/*

							 AAAAAAAA						
						    A		 A
						   A	 A    A
						  A		A A    A
						 A	   A   A    A
						A 	  A     A    A
					   A 	 A		 A    A
					  A 	A		  A    A
					 A 	   A 		   A    A
					A	  A				A    A
				   A 	 AAAAAAAAAAAAAAAAA	  A
				  A		AAAAAAAAAAAAAAAAAAA    A
				 A	   A				   A	A
				A	  A						A	 A
			   AAAAAAA 						AAAAAA				

						/$$$$$$$$\	/$$$$$$$
						| $$__  $$| $$__  $$
						| $$  \ $$| $$  \ $$
						| $$$$$$$/| $$$$$$$/
						| $$__  $$| $$____/
						| $$  \ $$| $$
						| $$  | $$| $$
						|__/  |__/|__/

//--------------------------------[A_MAIN.PWN]--------------------------------
							Alcazar Roleplay, LLC
				(created by LimitLess Development Team. Modified by Jeck, and Adriann)
				Current Developer:
								*** Director of A:RP Development:
								    Stewart
				Credits to:
								Emmet
								Jeck (TPC/LIRP Developer)
								Adriann (CCRP/GTA Pinas former Developer)

				Credits to alternate sources (Y_Less for foreach, gf, etc)
 *
 * Copyright (c) 2021-2022, Alcazar Roleplay, LLC
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are not permitted in any case.
 *
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#include <a_samp>
#undef MAX_PLAYERS
#define MAX_PLAYERS 100

#pragma disablerecursion
#pragma warning disable 238

#if !defined GetGravity
	native Float:GetGravity();
#endif

//#define Christmas
//#define Halloween

//#include <nex-ac>
#include <a_http>
#include <a_mysql>
#include <foreach>
#include <sscanf2>
#include <cbug>
#include <streamer>
#include <Pawn.CMD>
#include <sampvoice>
#include <progress2>
#include <mSelection>
#include <callbacks>
#include <SKY> // Alias Custom Damage
#include <weapon-config> // Custom Damage
#include <selection> // New Selection Dialog
#include <tp> // Anti Teleport
//#include <center> // MsgBox Center
#include <geolite>
#include <discord-connector>
#include <discord-cmd>
#include <strlib>
//#include <Anti_cheat_pack>

static DCC_Channel:commandChannel; // In this variable we will store the channel ID only where the commands will be registered and not anywhere else //
main(){
    commandChannel = DCC_FindChannelById("921323540547010581"); // Now we will copy the channel ID where we want the commands to work! //
    // Now the DCC_Channel is stored in the variable commandChannel //
}



//-----------------------------------------------------------------[MODULES]-------------------------------------------------------------------------

// Server Infos - Stewart
#include "./modules/server/ServerInfo.pwn"
#include "./modules/server/mysql.pwn"
#include "./modules/server/enums.pwn"
#include "./modules/server/newvars.pwn"
#include "./modules/server/ranks.pwn"
#include "./modules/server/globalchat.pwn"

#include "./modules/MesPopup.pwn"

// DISCORD-SAMP   - STEWART
#include "./modules/discord/enum.pwn"
//#include "./modules/discord/discord-verification.pwn" // My version 1 of Discord Verification
#include "./modules/discord/verification.pwn" // My Version 2 of Discord Verification
#include "./modules/discord/info.pwn"
#include "./modules/discord/discord-panel.pwn"
#include "./modules/discord/discord.pwn"

// Sabong
#include "/modules/samp-sabong.pwn"

// JOBS - STEWART
#include "./modules/jobs/tailor.pwn"

#include "./modules/server/UpTime.pwn"

//Seperate system
#include "./modules/jailbreak.pwn"
#include "./modules/interaction.pwn" // Genji and Tiyo's work
#include "./modules/anims.pwn"
//#include "./modules/Sabong.pwn" // Disabled due to login numerical password problem/Fixing
#include "./modules/safezone.pwn"
#include "./modules/dynamic-actor.pwn"
#include "./modules/newbie-chatroom.pwn"
#include "./modules/navigator.pwn"
#include "./modules/misc/bind.pwn"

// Jobs
#include "./modules/jobs/shipment_contractor/pumps.pwn"
#include "./modules/jobs/shipment_contractor/shipment-contractor.pwn"

// Biz
#include "/modules/business/dealership.pwn"
#include "/modules/business/gas-station.pwn"
#include "/modules/business/gasoline-deliver.pwn"

// SA:MP Voice
#include "/modules/voicechat/samp-voice.pwn"

// TextDraw Includes - Stewart
#include "./modules/speedo-textdraw.pwn"
#include "./modules/hunger-textdraw.pwn"
//#include "./modules/LoginRegisterTD.pwn"

//---------------------------------------------------------------------------------------------------------------------------------------------------

#define FuelSystem

new Text3D:gBankTime;



// PR Enums //

enum robberyEnum
{
	rTime,
	rPlanning,
	rStarted,
	rStolen,
	rRobbers[MAX_BANK_ROBBERS],
	rObjects[2],
	Text3D:rText[5]
};
new RobberyInfo[robberyEnum];

enum fEnum
{
	fName[48],
	fShortName[24],
	fLeader[MAX_PLAYER_NAME],
	fType,
	fColor,
	fRankCount,
	Float:fLockerX,
	Float:fLockerY,
	Float:fLockerZ,
	fLockerInterior,
	fLockerWorld,
	fSkins[MAX_FACTION_SKINS],
	fPaycheck[MAX_FACTION_RANKS],
	fTurfTokens,
	Text3D:fText,
	fPickup
};
new FactionInfo[MAX_FACTIONS][fEnum];

enum gaEnum
{
	gSetup,
	gName[32],
	gMOTD[128],
	gLeader[MAX_PLAYER_NAME],
	gColor,
	gStrikes,
	gLevel,
	gPoints,
	gTurfTokens,
	DCC_Role:gRole,
	Float:gStashX,
	Float:gStashY,
	Float:gStashZ,
	gStashInterior,
	gStashWorld,
	gCash,
	gMaterials,
	gPot,
	gCrack,
	gMeth,
	gPainkillers,
	gHPAmmo,
	gPoisonAmmo,
	gFMJAmmo,
	gSkins[MAX_GANG_SKINS],
	gWeapons[15],
	gArmsDealer,
	gDrugDealer,
	Float:gArmsX,
	Float:gArmsY,
	Float:gArmsZ,
	Float:gArmsA,
	Float:gDrugX,
	Float:gDrugY,
	Float:gDrugZ,
	Float:gDrugA,
	gArmsWorld,
	gDrugWorld,
	gDrugPot,
	gDrugCrack,
	gDrugMeth,
	gArmsMaterials,
	gArmsPrices[12],
	gDrugPrices[3],
	gArmsHPAmmo,
	gArmsPoisonAmmo,
	gArmsFMJAmmo,
	gClaimCount,
	Text3D:gText[3],
	gPickup,
	gActors[2],
	gAlliance
};
new GangInfo[MAX_GANGS][gaEnum];


// ---------------------------------------





// Variables //

LocateMethod(playerid, params[])
{
	if(isnull(params))
	{
	    SCM(playerid, COLOR_SYNTAX, "Null Error - failed to locate properly - contact a developer.");
	    return 1;
	}
	if(!strcmp(params, "dmv", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 1896.5051, -1872.4714, 13.1361, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of DMV.");
	}
	else if(!strcmp(params, "mall", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 1179.5540,-1323.4713,14.1752, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the mall.");
	}
	else if(!strcmp(params, "impound", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 2050.3113, -1911.2911, 12.8366, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the impound.");
	}
	else if(!strcmp(params, "allsaints", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 1179.5540,-1323.4713,14.1752, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the all saints.");
	}
	else if(!strcmp(params, "dealership", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 542.0433, -1293.5909, 17.2422, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the dealership.");
	}
	else if(!strcmp(params, "boatdealer", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 154.2223, -1946.3030, 5.1920, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the boat dealership.");
	}
	else if(!strcmp(params, "airdealer", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 1892.6315, -2328.6721, 13.5469, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the aircraft dealership.");
	}
	else if(!strcmp(params, "bank", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 1465.1348, -1010.5063, 26.8438, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the bank.");
	}
	else if(!strcmp(params, "casino", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 1452.2224, -1048.5103, 23.5985, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the casino.");
	}
	else if(!strcmp(params, "vip", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 1817.3633, -1573.3855, 13.0547, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the vip.");
	}
	else if(!strcmp(params, "mechanic", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 2859.1218, -1981.2913, 10.3173, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the mechanic.");
	}
	else if(!strcmp(params, "smuggledrugs", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 52.0937, -292.2513, 1.7001, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the drug smuggling spot.");
	}
	else if(!strcmp(params, "matpickup1", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 1421.6913, -1318.4719, 13.5547, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the 1st materials pickup.");
	}
    else if(!strcmp(params, "matpickup2", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 2393.4885, -2008.5726, 13.3467, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the 2nd materials pickup.");
	}
	else if(!strcmp(params, "matfactory1", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 2173.2129, -2264.1548, 13.3467, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the 1st materials factory.");
	}
    else if(!strcmp(params, "matfactory2", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 2288.0918, -1105.6555, 37.9766, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the 2nd materials factory.");
	}
	else if(!strcmp(params, "heisenbergs", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, -65.0972, -1574.3820, 2.6107, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of Heisenberg's meth cooking trailer.");
	}
	else if(!strcmp(params, "aiportdepot", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 2112.3240, -2432.8130, 13.5469, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of LSI Materials Depot.");
	}
	else if(!strcmp(params, "marinadepot", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 714.5344, -1565.1694, 1.7680, 3.0);
        SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of Marina materials depot.");
	}
	else if(!strcmp(params, "foodpanda", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, jobLocations[JOB_FOODPANDA][jobX], jobLocations[JOB_FOODPANDA][jobY], jobLocations[JOB_FOODPANDA][jobZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Foodpanda job.");
	}
	else if(!strcmp(params, "garbageman", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 2441.6909, -2115.9131, 13.5469, 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Garbage Man.");
	}
	else if(!strcmp(params, "lumberjack", true)) //lumberjack
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 2359.1599,-650.2137,128.0523, 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the forklift driver.");
	}
	else if(!strcmp(params, "forklifter", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
     	SetPlayerCheckpoint(playerid, jobLocations[JOB_FORKLIFTER][jobX], jobLocations[JOB_FORKLIFTER][jobY], jobLocations[JOB_FORKLIFTER][jobZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Forklifter job.");
	}
	else if(!strcmp(params, "Trucker", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, jobLocations[JOB_COURIER][jobX], jobLocations[JOB_COURIER][jobY], jobLocations[JOB_COURIER][jobZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Trucker job.");
	}
	else if(!strcmp(params, "fisherman", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, jobLocations[JOB_FISHERMAN][jobX], jobLocations[JOB_FISHERMAN][jobY], jobLocations[JOB_FISHERMAN][jobZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Fisherman job.");
	}
	else if(!strcmp(params, "bodyguard", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, jobLocations[JOB_BODYGUARD][jobX], jobLocations[JOB_BODYGUARD][jobY], jobLocations[JOB_BODYGUARD][jobZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Bodyguard job.");
	}
	else if(!strcmp(params, "armsdealer", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, jobLocations[JOB_ARMSDEALER][jobX], jobLocations[JOB_ARMSDEALER][jobY], jobLocations[JOB_ARMSDEALER][jobZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Arms Dealer job.");
	}
	else if(!strcmp(params, "miner", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, jobLocations[JOB_MINER][jobX], jobLocations[JOB_MINER][jobY], jobLocations[JOB_MINER][jobZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Miner job.");
	}
	else if(!strcmp(params, "construction", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, jobLocations[JOB_CONSTRUCTION][jobX], jobLocations[JOB_CONSTRUCTION][jobY], jobLocations[JOB_CONSTRUCTION][jobZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Construction job.");
	}
	else if(!strcmp(params, "tailor", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, jobLocations[JOB_TAILOR][jobX], jobLocations[JOB_TAILOR][jobY], jobLocations[JOB_TAILOR][jobZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Tailor job.");
	}
	else if(!strcmp(params, "taxidriver", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, jobLocations[JOB_TAXIDRIVER][jobX], jobLocations[JOB_TAXIDRIVER][jobY], jobLocations[JOB_TAXIDRIVER][jobZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Taxi Driver job.");
	}
	else if(!strcmp(params, "drugdealer", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, jobLocations[JOB_DRUGDEALER][jobX], jobLocations[JOB_DRUGDEALER][jobY], jobLocations[JOB_DRUGDEALER][jobZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Drug Dealer job.");
	}
	else if(!strcmp(params, "lawyer", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, jobLocations[JOB_LAWYER][jobX], jobLocations[JOB_LAWYER][jobY], jobLocations[JOB_LAWYER][jobZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Lawyer job.");
	}
	else if(!strcmp(params, "detective", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 1554.8918, -1675.6486, 16.1953, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Detective job.");
 	}
	else if(!strcmp(params, "supermarket", true))
	{
	    new businessid = GetClosestBusiness(playerid, BUSINESS_STORE);

	    if(businessid == -1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "There are no businesses of this type to be found.");
	    }

	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the closest supermarket to you.");
	}
	else if(!strcmp(params, "gunshop", true))
	{
	    new businessid = GetClosestBusiness(playerid, BUSINESS_GUNSHOP);

	    if(businessid == -1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "There are no businesses of this type to be found.");
	    }

	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the closest gun shop to you.");
	}
	else if(!strcmp(params, "clothesshop", true))
	{
	    new businessid = GetClosestBusiness(playerid, BUSINESS_CLOTHES);

	    if(businessid == -1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "There are no businesses of this type to be found.");
	    }

	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the closest clothes shop to you.");
	}
	else if(!strcmp(params, "gym", true))
	{
	    new businessid = GetClosestBusiness(playerid, BUSINESS_GYM);

	    if(businessid == -1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "There are no businesses of this type to be found.");
	    }

	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the closest gym to you.");
	}
	else if(!strcmp(params, "restaurant", true))
	{
	    new businessid = GetClosestBusiness(playerid, BUSINESS_RESTAURANT);

	    if(businessid == -1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "There are no businesses of this type to be found.");
	    }

	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the closest restaurant to you.");
	}
	else if(!strcmp(params, "adagency", true))
	{
	    new businessid = GetClosestBusiness(playerid, BUSINESS_AGENCY);

	    if(businessid == -1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "There are no businesses of this type to be found.");
	    }

	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the closest advertisement agency to you.");
	}
	else if(!strcmp(params, "club", true))
	{
	    new businessid = GetClosestBusiness(playerid, BUSINESS_BARCLUB);

	    if(businessid == -1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "There are no businesses of this type to be found.");
	    }

	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the closest club/bar to you.");
	}
	return 1;
}

Graffiti_Refresh(id)
{
	if (id != -1 && GraffitiData[id][graffitiExists])
	{
		if (IsValidDynamicMapIcon(GraffitiData[id][graffitiIcon]))
		    DestroyDynamicMapIcon(GraffitiData[id][graffitiIcon]);

		if (IsValidDynamicObject(GraffitiData[id][graffitiObject]))
			DestroyDynamicObject(GraffitiData[id][graffitiObject]);

        GraffitiData[id][graffitiIcon] = CreateDynamicMapIcon(GraffitiData[id][graffitiPos][0], GraffitiData[id][graffitiPos][1], GraffitiData[id][graffitiPos][2], 23, 0, -1, -1, -1, 100.0, MAPICON_GLOBAL);
		GraffitiData[id][graffitiObject] = CreateDynamicObject(19482, GraffitiData[id][graffitiPos][0], GraffitiData[id][graffitiPos][1], GraffitiData[id][graffitiPos][2], 0.0, 0.0, GraffitiData[id][graffitiPos][3]);

		SetDynamicObjectMaterial(GraffitiData[id][graffitiObject], 0, 0, "none", "none", 0);
		SetDynamicObjectMaterialText(GraffitiData[id][graffitiObject], 0, GraffitiData[id][graffitiText], OBJECT_MATERIAL_SIZE_256x128, "Diploma", 24, 1, GraffitiData[id][graffitiColor], 0, 0);
	}
	return 1;
}

IsSprayingInProgress(id)
{
	foreach (new i : Player)
	{
	    if (pData[i][pGraffiti] == id && IsPlayerInRangeOfPoint(i, 5.0, GraffitiData[id][graffitiPos][0], GraffitiData[id][graffitiPos][1], GraffitiData[id][graffitiPos][2]))
	        return 1;
	}
	return 0;
}

Graffiti_Nearest(playerid)
{
	for (new i = 0; i < MAX_GRAFFITI_POINTS; i ++) if (GraffitiData[i][graffitiExists] && IsPlayerInRangeOfPoint(playerid, 5.0, GraffitiData[i][graffitiPos][0], GraffitiData[i][graffitiPos][1], GraffitiData[i][graffitiPos][2]))
	    return i;

	return -1;
}

Graffiti_Delete(id)
{
    if (id != -1 && GraffitiData[id][graffitiExists])
	{
	    new
	        string[64];

		if (IsValidDynamicMapIcon(GraffitiData[id][graffitiIcon]))
		    DestroyDynamicMapIcon(GraffitiData[id][graffitiIcon]);

		if (IsValidDynamicObject(GraffitiData[id][graffitiObject]))
			DestroyDynamicObject(GraffitiData[id][graffitiObject]);

		format(string, sizeof(string), "DELETE FROM `graffiti` WHERE `graffitiID` = '%d'", GraffitiData[id][graffitiID]);
		mysql_tquery(connectionID, string);

		GraffitiData[id][graffitiExists] = false;
		GraffitiData[id][graffitiText][0] = 0;
		GraffitiData[id][graffitiID] = 0;
	}
	return 1;
}

Graffiti_Save(id)
{
	new
	    query[384];

	format(query, sizeof(query), "UPDATE `graffiti` SET `graffitiX` = '%.4f', `graffitiY` = '%.4f', `graffitiZ` = '%.4f', `graffitiAngle` = '%.4f', `graffitiColor` = '%d', `graffitiText` = '%s' WHERE `graffitiID` = '%d'",
        GraffitiData[id][graffitiPos][0],
        GraffitiData[id][graffitiPos][1],
        GraffitiData[id][graffitiPos][2],
        GraffitiData[id][graffitiPos][3],
		GraffitiData[id][graffitiColor],
		SQL_ReturnEscaped(GraffitiData[id][graffitiText]),
		GraffitiData[id][graffitiID]
	);
	return mysql_tquery(connectionID, query);
}

Graffiti_Create(Float:x, Float:y, Float:z, Float:angle)
{
	for (new i = 0; i < MAX_GRAFFITI_POINTS; i ++)
	{
	    if (!GraffitiData[i][graffitiExists])
	    {
			GraffitiData[i][graffitiExists] = 1;
			GraffitiData[i][graffitiPos][0] = x;
			GraffitiData[i][graffitiPos][1] = y;
			GraffitiData[i][graffitiPos][2] = z;
			GraffitiData[i][graffitiPos][3] = angle - 90.0;
			GraffitiData[i][graffitiColor] = 0xFFFFFFFF;

			format(GraffitiData[i][graffitiText], 32, "Graffiti");

			Graffiti_Refresh(i);
			mysql_tquery(connectionID, "INSERT INTO `graffiti` (`graffitiColor`) VALUES(0)", "OnGraffitiCreated", "d", i);

			return i;
		}
	}
	return -1;
}

forward Graffiti_Load();
public Graffiti_Load()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, connectionID);

	for (new i = 0; i < rows; i ++) if (i < MAX_GRAFFITI_POINTS)
	{
	    cache_get_field_content(i, "graffitiText", GraffitiData[i][graffitiText], connectionID, 64);

    	GraffitiData[i][graffitiExists] = 1;
	    GraffitiData[i][graffitiID] = cache_get_field_content_int(i, "graffitiID");
	    GraffitiData[i][graffitiPos][0] = cache_get_field_content_float(i, "graffitiX");
	    GraffitiData[i][graffitiPos][1] = cache_get_field_content_float(i, "graffitiY");
	    GraffitiData[i][graffitiPos][2] = cache_get_field_content_float(i, "graffitiZ");
	    GraffitiData[i][graffitiPos][3] = cache_get_field_content_float(i, "graffitiAngle");
	    GraffitiData[i][graffitiColor] = cache_get_field_content_int(i, "graffitiColor");

		Graffiti_Refresh(i);
	}
	return 1;
}

public OnPlayerTeleport(playerid, Float:distance)
{
	if((gAnticheat) && pData[playerid][pAdmin] < 2 && !pData[playerid][pKicked])
	{
	    if(!IsPlayerInRangeOfPoint(playerid, 3.0, pData[playerid][pPosX], pData[playerid][pPosY], pData[playerid][pPosZ]))
	    {
		    pData[playerid][pACWarns]++;

		    if(pData[playerid][pACWarns] < 4)
		    {
	    	    SAM(COLOR_YELLOW, "AdmWarning: %s[%i] is possibly teleport hacking (distance: %.1f).", GetRPName(playerid), playerid, distance);
	        	Log_Write("log_cheat", "%s (uid: %i) possibly teleport hacked (distance: %.1f)", GetPlayerNameEx(playerid), pData[playerid][pID], distance);
			}
			else
			{
		    	SMA(COLOR_LIGHTRED, "AdmCmd: %s was autokicked by %s, reason: Teleport hacks", GetRPName(playerid), SERVER_BOT);
		    	KickPlayer(playerid);
			}
		}
	}

	return 1;
}

public OnPlayerAirbreak(playerid)
{
	if((gAnticheat) && pData[playerid][pAdmin] < 2 && !pData[playerid][pKicked])
	{
	    pData[playerid][pACWarns]++;

	    if(pData[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
	    {
	        SAM(COLOR_YELLOW, "AdmWarning: %s[%i] is possibly using airbreak hacks.", GetRPName(playerid), playerid);
	        Log_Write("log_cheat", "%s (uid: %i) possibly used airbreak.", GetPlayerNameEx(playerid), pData[playerid][pID]);
		}
		else
		{
		    SMA(COLOR_LIGHTRED, "AdmCmd: %s was autobanned by %s, reason: Airbreak", GetRPName(playerid), SERVER_BOT);
		    BanPlayer(playerid, SERVER_BOT, "Airbreak");
		}
	}
	return 1;
}
stock SendQuestionToStaff(color, text[])
{
	foreach(new x: Player)
	{
		if(pData[x][pHelper] >= 1 || pData[x][pAdmin] >= 1)
		{
		    SendClientMessageEx(x, color, text);
		}
	}
}
stock SendShoutoutToInfluencer(color, text[])
{
	foreach(new x: Player)
	{
		if(pData[x][pInfluencer] >= 1)
		{
		    SendClientMessageEx(x, color, text);
		}
	}
}
IsAMotorBike(carid)
{
	switch(GetVehicleModel(carid)) {
		case 509, 510, 462, 448, 581, 522, 461, 521, 523, 463, 586, 468, 471: return 1;
	}
	return 0;
}

forward FlasherFunc();
public FlasherFunc() {
	new panelsx,doorsx,lightsx,tiresx;
	for (new p=0; p<MAX_VEHICLES; p++)
	{
		if (Flasher[p] == 1)
		{
			if (FlasherState[p] == 1)
			{
				GetVehicleDamageStatus(p,panelsx,doorsx,lightsx,tiresx);
				UpdateVehicleDamageStatus(p, panelsx, doorsx, 4, tiresx);
				FlasherState[p] = 0;
			}
			else
			{
				GetVehicleDamageStatus(p,panelsx,doorsx,lightsx,tiresx);
				UpdateVehicleDamageStatus(p, panelsx, doorsx, 1, tiresx);
				FlasherState[p] = 1;
			}
		}
	}
	return 1;
}

forward SetScriptSkin(playerid, skinid);
public SetScriptSkin(playerid, skinid)
{
    SetPlayerSkin(playerid, skinid);
    pData[playerid][pSkin] = skinid;

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET skin = %i WHERE uid = %i", pData[playerid][pSkin], pData[playerid][pID]);
    mysql_tquery(connectionID, queryBuffer);
}

forward CBugFreezeOver(playerid);
public CBugFreezeOver(playerid)
{
	TogglePlayerControllable(playerid, true);
	pCBugging[playerid] = false;
	return 1;
}

ResetPlayerVariables(playerid)
{
	pCBugging[playerid] = false;
	KillTimer(ptmCBugFreezeOver[playerid]);
	ptsLastFiredWeapon[playerid] = 0;
	return 1;
}

GetDate()
{
	new date[5], string[128], datestring[24];

	getdate(date[0], date[1], date[2]);
	gettime(date[3], date[4]);
	
	switch(date[1])
	{
	    case 1: string = "Jan.";
	    case 2: string = "Feb.";
	    case 3: string = "March";
	    case 4: string = "April";
	    case 5: string = "May";
	    case 6: string = "June";
	    case 7: string = "July";
	    case 8: string = "Aug.";
	    case 9: string = "Sept.";
	    case 10: string = "Oct.";
	    case 11: string = "Nov.";
	    case 12: string = "Dec.";
	}

	//format(datestring, sizeof(datestring), "%s %02d, %i %02d:%02d", /*date[1]*/string, date[2], date[0], date[3], date[4]);
	format(datestring, sizeof(datestring), "%s %02d, %i %s", /*date[1]*/string, date[2], date[0], ConvertToTwelveHour(date[3]));
	return datestring;
}

FormatNumber(number, money = 1)
{
	new length, value[32];

	format(value, sizeof(value), "%i", (number < 0) ? (-number) : (number));

	length = strlen(value);

    if(length > 3)
	{
  		for(new l = 0, i = length; --i >= 0; l ++)
		{
		    if((l % 3 == 0) && l > 0)
		    {
				strins(value, ",", i + 1);
			}
		}
	}

	if(money)
		strins(value, "$", 0);
	if(number < 0)
		strins(value, "-", 0);

	return value;
}
GetPlayerIP(playerid)
{
	new
	    ip[16];

	GetPlayerIp(playerid, ip, sizeof(ip));
	return ip;
}

GetPlayerIPRange(playerid, ch = '*')
{
	new string[16], part[2];

	if(!sscanf(GetPlayerIP(playerid), "p<.>ii{ii}", part[0], part[1]))
	{
	    format(string, sizeof(string), "%i.%i.%c.%c", part[0], part[1], ch, ch);
	}

	return string;
}

GetDeathReason(reason)
{
	new
	    string[24];

	switch(reason)
	{
	    case 0: string = "Fists";
	    case 18: string = "Molotov Cocktail";
	    case 44: string = "Nightvision Goggles";
	    case 45: string = "Infrared Goggles";
	    case 49: string = "Vehicle";
	    case 50: string = "Helicopter Blades";
	    case 51: string = "Explosion";
	    case 53: string = "Drowned";
	    case 54: string = "Splat";
	    default: GetWeaponName(reason, string, sizeof(string));
	}

	return string;
}

GetWeaponNameEx(weaponid)
{
	new
	    weapon[24];

	GetWeaponName(weaponid, weapon, sizeof(weapon));

	switch(weaponid)
	{
	    case 0: weapon = "None";
	    case 18: weapon = "Molotov Cocktail";
	    case 44: weapon = "Nightvision Goggles";
	    case 45: weapon = "Infrared Goggles";
	}

	return weapon;
}

GetDonatorRank(level)
{
	new string[16];

	switch(level)
	{
	    case 0: string = "None";
	    case 1: string = "{F7A763}VIP I";
	    case 2: string = "{00FFFF}VIP II";
	    case 3: string = "{FF6347}VIP III";
	    case 4: string = "{C2A2DA}VIP IV";
	}

	return string;
}

GetJobName(jobid)
{
	new
	    name[32];

	if(jobid == JOB_NONE)
	    name = "None";
	else
		strcat(name, jobLocations[jobid][jobName]);

	return name;
}

IncreaseJobSkill(playerid, jobid)
{
	if((gDoubleXP) || pData[playerid][pDoubleXP] > 0)
	{
	    GiveJobSkill(playerid, jobid);
	}

	GiveJobSkill(playerid, jobid);
}

GiveJobSkill(playerid, jobid)
{
	new level = GetJobLevel(playerid, jobid);

	switch(jobid)
	{
		case JOB_COURIER:
		{
		    pData[playerid][pCourierSkill]++;

	    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET courierskill = courierskill + 1 WHERE uid = %i", pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			if(GetJobLevel(playerid, jobid) != level)
			{
			    SM(playerid, COLOR_YELLOW, "Your Trucker skill level is now %i/5. You will deliver more products and earn more money now.", level + 1);
			}
		}
		case JOB_FISHERMAN:
		{
		    pData[playerid][pFishingSkill]++;

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fishingskill = fishingskill + 1 WHERE uid = %i", pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			if(GetJobLevel(playerid, jobid) != level)
			{
				SM(playerid, COLOR_YELLOW, "Your fishing skill level is now %i/5. You will catch bigger fish and your cooldowns are reduced.", level + 1);
			}
		}
		case JOB_ARMSDEALER:
		{
		    pData[playerid][pWeaponSkill]++;

            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET weaponskill = weaponskill + 1 WHERE uid = %i", pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			if(GetJobLevel(playerid, jobid) != level)
			{
			    SM(playerid, COLOR_YELLOW, "Your arms dealer skill level is now %i/5. You have unlocked more weapons.", level + 1);
			}
		}
		case JOB_DRUGDEALER:
		{
		    pData[playerid][pSmugglerSkill]++;

            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET smugglerskill = smugglerskill + 1 WHERE uid = %i", pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			if(GetJobLevel(playerid, jobid) != level)
			{
			    SM(playerid, COLOR_YELLOW, "Your drug smuggler skill level is now %i/5. You will now earn more cash for smuggling.", level + 1);
			}
		}
		case JOB_LAWYER:
		{
		    pData[playerid][pLawyerSkill]++;

            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET lawyerskill = lawyerskill + 1 WHERE uid = %i", pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			if(GetJobLevel(playerid, jobid) != level)
			{
			    SM(playerid, COLOR_YELLOW, "Your lawyer skill level is now %i/5. Your cooldown times are reduced and you can free people for more time.", level + 1);
			}
		}
		case JOB_DETECTIVE:
		{
		    pData[playerid][pDetectiveSkill]++;

            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET detectiveskill = detectiveskill + 1 WHERE uid = %i", pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			if(GetJobLevel(playerid, jobid) != level)
			{
			    SM(playerid, COLOR_YELLOW, "Your detective skill level is now %i/5. Your cooldown times are now reduced.", level + 1);
			}
		}
	}
}

GetJobLevel(playerid, jobid)
{
	if(jobid == JOB_COURIER)
	{
	    if(0 <= pData[playerid][pCourierSkill] <= 49) {
	        return 1;
		} else if(50 <= pData[playerid][pCourierSkill] <= 99) {
			return 2;
		} else if(100 <= pData[playerid][pCourierSkill] <= 199) {
			return 3;
		} else if(200 <= pData[playerid][pCourierSkill] <= 349) {
			return 4;
		} else if(pData[playerid][pCourierSkill] >= 350) {
		    return 5;
		}
	}
	if(jobid == JOB_FISHERMAN)
	{
	    if(0 <= pData[playerid][pFishingSkill] <= 49) {
	        return 1;
		} else if(50 <= pData[playerid][pFishingSkill] <= 99) {
			return 2;
		} else if(100 <= pData[playerid][pFishingSkill] <= 199) {
			return 3;
		} else if(200 <= pData[playerid][pFishingSkill] <= 349) {
			return 4;
		} else if(pData[playerid][pFishingSkill] >= 350) {
		    return 5;
		}
	}
	else if(jobid == JOB_ARMSDEALER)
	{
	    if(0 <= pData[playerid][pWeaponSkill] <= 29) {
	        return 1;
		} else if(30 <= pData[playerid][pWeaponSkill] <= 79) {
			return 2;
		} else if(80 <= pData[playerid][pWeaponSkill] <= 199) {
			return 3;
		} else if(180 <= pData[playerid][pWeaponSkill] <= 479) {
			return 4;
		} else if(pData[playerid][pWeaponSkill] >= 480) {
		    return 5;
		}
	}
	else if(jobid == JOB_DRUGDEALER)
	{
	    if(0 <= pData[playerid][pSmugglerSkill] <= 24) {
	        return 1;
		} else if(25 <= pData[playerid][pSmugglerSkill] <= 49) {
			return 2;
		} else if(50 <= pData[playerid][pSmugglerSkill] <= 74) {
			return 3;
		} else if(75 <= pData[playerid][pSmugglerSkill] <= 99) {
			return 4;
		} else if(pData[playerid][pSmugglerSkill] >= 100) {
		    return 5;
		}
	}
	else if(jobid == JOB_LAWYER)
	{
	    if(0 <= pData[playerid][pLawyerSkill] <= 24) {
	        return 1;
		} else if(25 <= pData[playerid][pLawyerSkill] <= 49) {
			return 2;
		} else if(50 <= pData[playerid][pLawyerSkill] <= 99) {
			return 3;
		} else if(100 <= pData[playerid][pLawyerSkill] <= 199) {
			return 4;
		} else if(pData[playerid][pLawyerSkill] >= 200) {
		    return 5;
		}
	}
	else if(jobid == JOB_DETECTIVE)
	{
	    if(0 <= pData[playerid][pDetectiveSkill] <= 49) {
	        return 1;
		} else if(50 <= pData[playerid][pDetectiveSkill] <= 99) {
			return 2;
		} else if(100 <= pData[playerid][pDetectiveSkill] <= 199) {
			return 3;
		} else if(200 <= pData[playerid][pDetectiveSkill] <= 399) {
			return 4;
		} else if(pData[playerid][pDetectiveSkill] >= 400) {
		    return 5;
		}
	}

	return 0;
}

GetPlayerCapacity(item)
{
	switch(item)
	{
	    case CAPACITY_MATERIALS:
	    {
	        return 250000;
		}
		case CAPACITY_WEED:
		{
		    return 50;
		}
		case CAPACITY_COCAINE:
		{
		    return 50;
		}
		case CAPACITY_METH:
		{
		    return 50;
		}
        case CAPACITY_PAINKILLERS:
		{
		    return 20;
		}
		case CAPACITY_SEEDS:
		{
		    return 100;
		}
		case CAPACITY_EPHEDRINE:
		{
		    return 50;
		}
		case CAPACITY_HPAMMO:
		{
		    return 60;
		}
        case CAPACITY_POISONAMMO:
		{
		    return 60;
		}
        case CAPACITY_FMJAMMO:
		{
      		return 60;
		}
	}
	return 0;
}

GetPlayerAssetCount(playerid, type)
{
	new count;

	switch(type)
	{
	    case LIMIT_HOUSES:
	    {
	        for(new i = 0; i < MAX_HOUSES; i ++)
	        {
	            if(HouseInfo[i][hExists] && IsHouseOwner(playerid, i))
	            {
	                count++;
				}
			}
		}
		case LIMIT_BUSINESSES:
	    {
	        for(new i = 0; i < MAX_BUSINESSES; i ++)
	        {
	            if(BusinessInfo[i][bExists] && IsBusinessOwner(playerid, i))
	            {
	                count++;
				}
			}
		}
		case LIMIT_GARAGES:
	    {
	        for(new i = 0; i < MAX_GARAGES; i ++)
	        {
	            if(GarageInfo[i][gExists] && IsGarageOwner(playerid, i))
	            {
	                count++;
				}
			}
		}
	}

	return count;
}

GetPlayerAssetLimit(playerid, type)
{
	switch(type)
	{
	    case LIMIT_HOUSES:
	    {
	        switch(pData[playerid][pDonator])
			{
			    case 2: return 3;
			    case 3: return 3;
			}

			switch(pData[playerid][pAssetUpgrade])
			{
			    case 0, 1: return 2;
			    case 2, 3: return 2;
			    case 4: return 2;
			}
		}
		case LIMIT_BUSINESSES:
	    {
			switch(pData[playerid][pAssetUpgrade])
			{
			    case 0, 1: return 1;
			    case 2, 3: return 2;
			    case 4: return 3;
			}
		}
		case LIMIT_GARAGES:
	    {
			switch(pData[playerid][pAssetUpgrade])
			{
			    case 0, 1: return 1;
			    case 2, 3: return 2;
			    case 4: return 3;
			}
		}
        case LIMIT_VEHICLES:
	    {
            switch(pData[playerid][pDonator])
			{
			    case 1: return 10;
			    case 2: return 15;
			    case 3: return 20;
			}

	        switch(pData[playerid][pAssetUpgrade])
	        {
	            case 0: return 3;
	            case 1: return 4;
	            case 2: return 5;
	            case 3: return 7;
	            case 4: return 10;
			}
		}
	}

	return 0;
}

DeployObject(type, Float:x, Float:y, Float:z, Float:angle)
{
	for(new i = 0; i < MAX_DEPLOYABLES; i ++)
	{
	    if(!DeployInfo[i][dExists])
	    {
			DeployInfo[i][dExists] = 1;
            DeployInfo[i][dType] = type;
            DeployInfo[i][dPosX] = x;
            DeployInfo[i][dPosY] = y;
            DeployInfo[i][dPosZ] = z;
            DeployInfo[i][dPosA] = angle;

            if(type == DEPLOY_SPIKESTRIP) {
                DeployInfo[i][dObject] = CreateDynamicObject(2899, x + 1.0 * floatsin(-angle, degrees), y + 1.0 * floatcos(-angle, degrees), z - 0.9, 0.0, 0.0, angle + 90.0);
            } else if(type == DEPLOY_CONE) {
                DeployInfo[i][dObject] = CreateDynamicObject(1238, x + 1.0 * floatsin(-angle, degrees), y + 1.0 * floatcos(-angle, degrees), z - 0.7, 0.0, 0.0, angle);
	        } else if(type == DEPLOY_ROADBLOCK) {
	            DeployInfo[i][dObject] = CreateDynamicObject(981, x + 3.0 * floatsin(-angle, degrees), y + 3.0 * floatcos(-angle, degrees), z, 0.0, 0.0, angle);
			} else if(type == DEPLOY_BARREL) {
			    DeployInfo[i][dObject] = CreateDynamicObject(1237, x + 1.0 * floatsin(-angle, degrees), y + 1.0 * floatcos(-angle, degrees), z - 1.0, 0.0, 0.0, angle);
			} else if(type == DEPLOY_FLARE) {
			    DeployInfo[i][dObject] = CreateDynamicObject(18728, x, y, z - 1.4, 0.0, 0.0, angle);
			}

			return i;
		}
	}

	return -1;
}

IsFireActive()
{
	for(new i = 0; i < MAX_FIRES; i ++)
	{
	    if(IsValidDynamicObject(gFireObjects[i]))
	    {
	        return 1;
		}
	}

	return 0;
}

HandleContract(playerid, killerid)
{
    if(GetFactionType(killerid) == FACTION_HITMAN && pData[killerid][pContractTaken] == playerid)
	{
	    new price = pData[playerid][pContracted];

	    SM(killerid, COLOR_YELLOW, "You have completed your contract on %s and received $%i.", GetRPName(playerid), price);
	    SM(playerid, COLOR_YELLOW, "You have been killed by a hitman and lost $%i.", price);

	    GivePlayerCash(playerid, -price);
	    GivePlayerCash(killerid, price);

	    pData[killerid][pContractTaken] = INVALID_PLAYER_ID;
	    pData[killerid][pCompletedHits]++;
	    pData[playerid][pContracted] = 0;
	    pData[playerid][pContractBy] = 0;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET contracted = 0, contractby = 'Nobody' WHERE uid = %i", pData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET completedhits = %i WHERE uid = %i", pData[killerid][pCompletedHits], pData[killerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

        foreach(new i : Player)
        {
            if(pData[i][pContractTaken] == playerid)
            {
                pData[i][pContractTaken] = INVALID_PLAYER_ID;
			}
		}

		Log_Write("log_contracts", "%s (uid: %i) successfully completed their hit on %s (uid: %i) for $%i.", GetRPName(killerid), pData[killerid][pID], GetRPName(playerid), pData[playerid][pID], price);
	}
	else if(pData[playerid][pContractTaken] == killerid)
	{
	    new price = pData[killerid][pContracted];

	    SM(playerid, COLOR_YELLOW, "You have failed your contract on %s and lost $%i.", GetRPName(playerid), price);
	    SM(killerid, COLOR_YELLOW, "You have killed a hitman chasing after you and received $%i. The contract on your head has been removed.", price);

	    GivePlayerCash(playerid, -price);
	    GivePlayerCash(killerid, price);

	    pData[playerid][pContractTaken] = INVALID_PLAYER_ID;
	    pData[playerid][pFailedHits]++;
	    pData[killerid][pContracted] = 0;
	    pData[killerid][pContractBy] = 0;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET contracted = 0, contractby = 'Nobody' WHERE uid = %i", pData[killerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET failedhits = %i WHERE uid = %i", pData[playerid][pFailedHits], pData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

        foreach(new i : Player)
        {
            if(pData[i][pContractTaken] == killerid)
            {
                pData[i][pContractTaken] = INVALID_PLAYER_ID;
			}
		}

		Log_Write("log_contracts", "%s (uid: %i) failed their hit on %s (uid: %i) and lost $%i.", GetRPName(playerid), pData[playerid][pID], GetRPName(killerid), pData[killerid][pID], price);
	}
}

GetPlayerNameEx(playerid)
{
	new
		name[MAX_PLAYER_NAME];

	GetPlayerName(playerid, name, sizeof(name));
	return name;
}

GetRPName(playerid)
{
	new
		name[MAX_PLAYER_NAME];

	GetPlayerName(playerid, name, sizeof(name));

	for(new i = 0, l = strlen(name); i < l; i ++)
	{
	    if(name[i] == '_')
	    {
	        name[i] = ' ';
		}
	}

	return name;
}

stock SendMessageFormatted(playerid, const error[], const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192],
		string[128];

	if((args = numargs()) <= 3)
	{
		format(string, sizeof(string), "[%s]: {FFFFFF}%s", error, text);
	    SendClientMessage(playerid, 0xAFAFAFFF, string);
	}
	else
	{
		while(--args >= 3)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 	text
		#emit PUSH.C 	192
		#emit PUSH.C 	str
		#emit PUSH.S	8
		#emit SYSREQ.C 	format
		#emit LCTRL 	5
		#emit SCTRL 	4

		format(str, sizeof(str), "[%s]: {FFFFFF}%s", error, text);
		SendClientMessage(playerid, 0xAFAFAFFF, str);

		#emit RETN
	}
	return 1;
}

GetPlayerZoneName(playerid)
{
	new zone[32], Float:x, Float:y, Float:z;

	GetPlayerPos(playerid, x, y, z);

 	if(GetInsideHouse(playerid) >= 0)
	    zone = "House";
	else if(GetInsideBusiness(playerid) >= 0)
	    zone = "Business";
	else if(GetInsideGarage(playerid) >= 0)
	    zone = "Garage";
	else if(GetPlayerInterior(playerid))
	    zone = "Interior";
	else
	    strcpy(zone, GetZoneName(x, y, z));

	return zone;
}

GetPlayerPosEx(playerid, &Float:x, &Float:y, &Float:z)
{
	new id;

	if((id = GetInsideHouse(playerid)) >= 0)
	{
	    x = HouseInfo[id][hPosX];
	    y = HouseInfo[id][hPosY];
	    z = HouseInfo[id][hPosZ];
	    return 1;
	}
	else if((id = GetInsideBusiness(playerid)) >= 0)
	{
	    x = BusinessInfo[id][bPosX];
	    y = BusinessInfo[id][bPosY];
	    z = BusinessInfo[id][bPosZ];
	    return 1;
	}
	else if((id = GetInsideGarage(playerid)) >= 0)
	{
	    x = GarageInfo[id][gPosX];
	    y = GarageInfo[id][gPosY];
	    z = GarageInfo[id][gPosZ];
	    return 1;
	}
	else if((id = GetInsideEntrance(playerid)) >= 0)
	{
	    x = EntranceInfo[id][ePosX];
	    y = EntranceInfo[id][ePosY];
	    z = EntranceInfo[id][ePosZ];
	    return 1;
	}
	else if(GetPlayerInterior(playerid))
	{
		for(new i = 0; i < sizeof(staticEntrances); i ++)
		{
		    if(IsPlayerInRangeOfPoint(playerid, 100.0, staticEntrances[i][eIntX], staticEntrances[i][eIntY], staticEntrances[i][eIntZ]))
		    {
		        x = staticEntrances[i][ePosX];
		        y = staticEntrances[i][ePosY];
		        z = staticEntrances[i][ePosZ];
		        return 1;
			}
		}
	}
	else
	{
	    GetPlayerPos(playerid, x, y, z);
	    return 1;
	}

	return 0;
}

GetVehicleLinkedID(id)
{
    for(new i=0; i<MAX_VEHICLES; i++)
    {
        if(VehicleInfo[i][vID] == id)
        {
		 	return i;
    	}
    }

    return INVALID_VEHICLE_ID;
}
GetVehicleZoneName(vehicleid)
{
	new zone[32], Float:x, Float:y, Float:z;

	GetVehiclePos(vehicleid, x, y, z);

	if(GetVehicleVirtualWorld(vehicleid))
	    zone = "Garage";
	else
	    strcpy(zone, GetZoneName(x, y, z));

	return zone;
}

GetZoneName(Float:x, Float:y, Float:z)
{
	new zone[32];

	for(new i = 0; i < sizeof(zoneArray); i ++)
	{
	    if((zoneArray[i][zoneMinX] <= x <= zoneArray[i][zoneMaxX]) && (zoneArray[i][zoneMinY] <= y <= zoneArray[i][zoneMaxY]) && (zoneArray[i][zoneMinZ] <= z <= zoneArray[i][zoneMaxZ]))
	    {
	        strcpy(zone, zoneArray[i][zoneName]);
	        return zone;
	    }
	}

	return zone;
}

PreviewClothing(playerid, index)
{
	new businessid = GetInsideBusiness(playerid);
    if(pData[playerid][pCash] < BusinessInfo[businessid][bPrices][1])
    {
        SCM(playerid, COLOR_SYNTAX, "You can't purchase this. You don't have enough money for it.");
    }
    else
    {
        SetPlayerAttachedObject(playerid, 9, clothingArray[index][clothingModel], clothingArray[index][clothingBone]);

		pData[playerid][pEditType] = EDIT_CLOTHING_PREVIEW;
        pData[playerid][pSelected] = index;

		SM(playerid, COLOR_AQUA, "You are now previewing "SVRCLR"%s{CCFFFF}. This clothing item costs "SVRCLR"%s{CCFFFF} to purchase.", clothingArray[index][clothingName], FormatNumber(BusinessInfo[businessid][bPrices][1]));
		SM(playerid, COLOR_AQUA, "Use your cursor to control the editor interface. Click the floppy disk to save changes.");
        EditAttachedObject(playerid, 9);
	}
}

PurchaseLandObject(playerid, landid, index)
{
    if(pData[playerid][pCash] < furnitureArray[index][fPrice])
    {
        SCM(playerid, COLOR_SYNTAX, "You can't purchase this. You don't have enough money for it.");
    }
    else
    {
        new
            Float:x,
            Float:y,
	        Float:z,
    	    Float:a;

        if(pData[playerid][pEditType] == EDIT_LAND_OBJECT_PREVIEW && IsValidDynamicObject(pData[playerid][pEditObject])) // Bug fix where if you did '/furniture buy' again while editing your object gets stuck. (12/28/2016)
        {
            DestroyDynamicObject(pData[playerid][pEditObject]);
            pData[playerid][pEditObject] = INVALID_OBJECT_ID;
		}

		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);

		pData[playerid][pEditType] = EDIT_LAND_OBJECT_PREVIEW;
		pData[playerid][pEditObject] = CreateDynamicObject(furnitureArray[index][fModel], x + 2.0 * floatsin(-a, degrees), y + 2.0 * floatcos(-a, degrees), z + 1.0, 0.0, 0.0, ((19353 <= furnitureArray[index][fModel] <= 19417) || (19426 <= furnitureArray[index][fModel] <= 19465)) ? (a + 90.0) : (a), GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
		pData[playerid][pObjectLand] = landid;
        pData[playerid][pSelected] = index;

		SM(playerid, COLOR_AQUA, "You are now previewing "SVRCLR"%s{CCFFFF}. This object costs "SVRCLR"%s{CCFFFF} to purchase.", furnitureArray[index][fName], FormatNumber(furnitureArray[index][fPrice]));
		SM(playerid, COLOR_AQUA, "Use your cursor to control the editor interface. Click the floppy disk to save changes.");
        EditDynamicObject(playerid, pData[playerid][pEditObject]);
	}
}

stock TimeConvert(time)
{
	new month = time / 2592000; time %= 2592000;
	new day = time / 86400; time %= 86400;
	new hour = time / 3600; time %= 3600;
	new minute = time / 60; time %= 60;
	new second = time;

	new string[128];
	if(day > 30)
	{
		format(string, sizeof(string), "%d month(s) %d day(s) %d hour(s) %d minute(s) %d second(s)", month, day, hour, minute, second);
		return string;
	}
	else if(day > 0)
	{
		format(string, sizeof(string), "%d day(s) %d hour(s) %d minute(s) %d second(s)", day, hour, minute, second);
		return string;
	}
	else if(hour > 0)
	{
		format(string, sizeof(string), "%d hour(s) %d minute(s) %d second(s)", hour, minute, second);
		return string;
	}
	else if(minute > 0)
	{
		format(string, sizeof(string), "%d minute(s) %d second(s)", minute, second);
		return string;
	}
	else if(second > 0)
	{
		format(string, sizeof(string), "%d second(s)", second);
		return string;
	}
	return string;
}

AFKCheck(playerid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:cx,
	    Float:cy,
	    Float:cz;

	GetPlayerPos(playerid, x, y, z);
	GetPlayerCameraPos(playerid, cx, cy, cz);

	if(pData[playerid][pAFKPos][0] == x && pData[playerid][pAFKPos][1] == y && pData[playerid][pAFKPos][2] == z && pData[playerid][pAFKPos][3] == cx && pData[playerid][pAFKPos][4] == cy && pData[playerid][pAFKPos][5] == cz)
	{
		pData[playerid][pAFKTime]++;

	    if(!pData[playerid][pAFK] && pData[playerid][pAFKTime] >= 60)
	    {
		    //SCM(playerid, COLOR_WHITE, "You are now marked as "SVRCLR"Away from keyboard"WHITE" as you haven't moved in one minute.");
		    pData[playerid][pAFK] = 1;
		}
		if(!pData[playerid][pAFK] && pData[playerid][pAFKTime] >= 1800)
	    {
		    //Afk System - Stewart
			SCM(playerid, COLOR_YELLOW, "You have been kicked to the server due to not moving in 30 minutes.");
			Kick(playerid);
		}
	}
	else
	{
		if(pData[playerid][pAFK])
		{
		    /*if(pData[playerid][pAFKTime] < 120) {
		    	SM(playerid, COLOR_WHITE, "You are no longer marked as Away from Keyboard after %i seconds.", pData[playerid][pAFKTime]);
			} else {
			    SM(playerid, COLOR_WHITE, "You are no longer marked as Away from Keyboard after %i minutes.", pData[playerid][pAFKTime] / 60);
			}*/

			pData[playerid][pAFK] = 0;
		}

		SetPlayerSpecialTag(playerid, TAG_NORMAL);
		pData[playerid][pAFKTime] = 0;
	}

	pData[playerid][pAFKPos][0] = x;
	pData[playerid][pAFKPos][1] = y;
	pData[playerid][pAFKPos][2] = z;
	pData[playerid][pAFKPos][3] = cx;
	pData[playerid][pAFKPos][4] = cy;
	pData[playerid][pAFKPos][5] = cz;
}

ShowObjectSelectionMenu(playerid, type)
{
    new
		models[MAX_SELECTION_MENU_ITEMS] = {-1, ...},
		index;

	pData[playerid][pFurnitureIndex] = -1;

	for(new i = 0; i < sizeof(furnitureArray); i ++)
	{
	    if(!strcmp(furnitureArray[i][fCategory], furnitureCategories[pData[playerid][pCategory]]))
	    {
	        if(pData[playerid][pFurnitureIndex] == -1)
	        {
	            pData[playerid][pFurnitureIndex] = i;
			}

	        models[index++] = furnitureArray[i][fModel];
	    }
	}

	ShowPlayerSelectionMenu(playerid, type, furnitureCategories[pData[playerid][pCategory]], models, index);
}

PurchaseFurniture(playerid, index)
{
    if(pData[playerid][pCash] < furnitureArray[index][fPrice])
    {
        SCM(playerid, COLOR_SYNTAX, "You can't purchase this. You don't have enough money for it.");
    }
    else
    {
        new
            Float:x,
            Float:y,
	        Float:z,
    	    Float:a;

        if(pData[playerid][pEditType] == EDIT_FURNITURE_PREVIEW && IsValidDynamicObject(pData[playerid][pEditObject])) // Bug fix where if you did '/furniture buy' again while editing your object gets stuck. (12/28/2016)
        {
            DestroyDynamicObject(pData[playerid][pEditObject]);
            pData[playerid][pEditObject] = INVALID_OBJECT_ID;
		}

		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);

		pData[playerid][pEditType] = EDIT_FURNITURE_PREVIEW;
		pData[playerid][pEditObject] = CreateDynamicObject(furnitureArray[index][fModel], x + 2.0 * floatsin(-a, degrees), y + 2.0 * floatcos(-a, degrees), z + 1.0, 0.0, 0.0, ((19353 <= furnitureArray[index][fModel] <= 19417) || (19426 <= furnitureArray[index][fModel] <= 19465)) ? (a + 90.0) : (a), GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
        pData[playerid][pSelected] = index;

		SM(playerid, COLOR_AQUA, "You are now previewing "SVRCLR"%s{CCFFFF}. This furniture item costs {00AA00}%s{CCFFFF} to purchase.", furnitureArray[index][fName], FormatNumber(furnitureArray[index][fPrice]));
		SM(playerid, COLOR_AQUA, "Use your cursor to control the editor interface. Click the floppy disk to save changes.");
        EditDynamicObject(playerid, pData[playerid][pEditObject]);
	}
}
ShowClothingSelectionMenu(playerid)
{
    new
		models[MAX_SELECTION_MENU_ITEMS] = {-1, ...},
		index;

	pData[playerid][pClothingIndex] = -1;

	for(new i = 0; i < sizeof(clothingArray); i ++)
    {
        if(!strcmp(clothingArray[i][clothingType], clothingTypes[pData[playerid][pCategory]]))
        {
	        if(pData[playerid][pClothingIndex] == -1)
	        {
	            pData[playerid][pClothingIndex] = i;
			}

	        models[index++] = clothingArray[i][clothingModel];
	    }
	}

	ShowPlayerSelectionMenu(playerid, MODEL_SELECTION_CLOTHING, clothingTypes[pData[playerid][pCategory]], models, index);
}
PurchaseVehicle(playerid)
{
	new vehicleid;
    if(pData[playerid][pCash] < vehicleArray[vehicleid][carPrice])
    {
        SendClientMessage(playerid, COLOR_GREY, "You can't purchase this. You don't have enough money for it.");
    }

    else
    {
        new
            string[128];

		format(string, sizeof(string), "{FFD700}Confirmation:\nAre you sure you want to purchase this %s for {00AA00}$%i{FFD700}?", vehicleNames[vehicleArray[pData[playerid][pSelected]][carModel] - 400], vehicleArray[pData[playerid][pSelected]][carPrice]);
		ShowPlayerDialog(playerid, DIALOG_BUYVEHICLE2, DIALOG_STYLE_MSGBOX, "Purchase confirmation", string, "Yes", "No");
	}
}

ClearChat(playerid)
{
	for(new i = 0; i < 29; i ++)
	{
	    SCM(playerid, -1, " ");
	}
}

ClearAllChat(playerid)
{
	for(new i = 0; i < 65; i ++)
	{
	    SCM(playerid, -1, " ");
	}
}
Float:Streamer_GetExtraFloat(objectid, type)
{
	new
	    string[24];

	getproperty(.id = objectid, .value = type, .string = string);
	strunpack(string, string);
	return floatstr(string);
}

Streamer_SetExtraFloat(objectid, type, Float:value)
{
	new
	    string[24];

	format(string, sizeof(string), "%f", value);
	setproperty(.id = objectid, .value = type, .string = string);
	return 1;
}
ShowVehicleSelectionMenu(playerid, type)
{
	new
	    models[MAX_SELECTION_MENU_ITEMS	] = {-1, ...},
	    index;
	for(new i = 0; i < sizeof(vehicleArray); i ++)
	{

	   models[index++] = vehicleArray[i][carModel];

	}
	ShowPlayerSelectionMenu(playerid, type, "Buy a Vehicle", models, index);

}
Streamer_GetExtraInt(objectid, type)
{
	new extra[11];

	if(Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, extra, sizeof(extra)))
	{
		return extra[type];
	}

	return 0;
}

Streamer_SetExtraInt(objectid, type, value)
{
	new extra[11];

    if(Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, extra, sizeof(extra)))
    {
	    extra[type] = value;
		return Streamer_SetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, extra, sizeof(extra));
	}

	return 0;
}

CreateObjectEx(modelid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, Float:drawdistance = 0.0)
{
	new
		objectid = CreateObject(modelid, x, y, z, rx, ry, rz, drawdistance);

	if(objectid != INVALID_OBJECT_ID)
	{
	    gScriptObject{objectid} = 1;
	}
	return objectid;

}

Float:DistanceCameraTargetToLocation(Float:cx, Float:cy, Float:cz, Float:ox, Float:oy, Float:oz, Float:vx, Float:vy, Float:vz)
{
	new Float:x, Float:y, Float:z, Float:distance;

    distance = floatround(floatsqroot(((cx - ox) * (cx - ox)) + ((cy - oy) * (cy - oy)) + ((cz - oz) * (cz - oz))));

	x = vx * distance + cx;
	y = vy * distance + cy;
	z = vz * distance + cz;

	return floatsqroot((x - ox) * (x - ox) + (y - oy) * (y - oy) + (z - oz) * (z - oz));
}

LandDoorCheck(playerid)
{
    new houseid = GetInsideHouse(playerid), landid = GetNearbyLand(playerid),id;

	if((id = GetNearbyLand(playerid)) >= 0 && (IsLandOwner(playerid, id) || pData[playerid][pLandPerms] == id))
	{
		for(new i = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i <= j; i ++)
		{
    		if(IsValidDynamicObject(i) && IsGateObject(i) && IsPlayerInRangeOfPoint(playerid, 10.0, Streamer_GetExtraFloat(i, E_OBJECT_X), Streamer_GetExtraFloat(i, E_OBJECT_Y), Streamer_GetExtraFloat(i, E_OBJECT_Z)) && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_LAND && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == LandInfo[id][lID])
			{
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM landobjects WHERE id = %i", Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
			    mysql_tquery(connectionID, queryBuffer, "OnPlayerUseLandGate", "ii", playerid, i);
			    return 1;
			}
		}
	}
	for(new i = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i <= j; i ++)
	{
    	if(IsValidDynamicObject(i) && IsPlayerInRangeOfDynamicObject(playerid, i, 2.5) && IsDoorObject(i))
		{
		    if(houseid >= 0 && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_FURNITURE && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == HouseInfo[houseid][hID])
			{
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT door_opened, door_locked FROM furniture WHERE id = %i", Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
			    mysql_tquery(connectionID, queryBuffer, "OnPlayerUseFurnitureDoor", "iii", playerid, i, Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
		    	return 1;
			}
			else if(landid >= 0 && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_LAND && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == LandInfo[landid][lID])
			{
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT door_opened, door_locked FROM landobjects WHERE id = %i", Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
			    mysql_tquery(connectionID, queryBuffer, "OnPlayerUseLandDoor", "iii", playerid, i, Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
			    return 1;
			}
		}
	}

	return 0;
}

EnterCheck(playerid)
{
	new id;
	if((gettime() - pData[playerid][pLastEnter]) < 3 && pData[playerid][pAdminDuty] == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need to wait before using this command again.");
	}
    if((id = GetNearbyHouse(playerid)) >= 0)
	{
	    if(HouseInfo[id][hLocked])
	    {
	    	SCM(playerid, COLOR_SYNTAX, "This house is locked.");
			//Dyuze(playerid, "Notice", "This house is ~r~Locked.");
			return 0;
		}

		if(IsHouseOwner(playerid, id))
		{
			//new STEWART[128];
		    HouseInfo[id][hTimestamp] = gettime();

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET timestamp = %i WHERE id = %i", gettime(), HouseInfo[id][hID]);
		    mysql_tquery(connectionID, queryBuffer);
			//SM(playerid, COLOR_SYNTAX, "** This house can be robbed again in %i hours. (( Type /robhouse to rob this house. ))", HouseInfo[id][hRobbed]);

		    //SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has entered their house.", GetRPName(playerid));
		    //format(STEWART, (sizeof(STEWART), "**{C2A2DA} %s has entered their house.", GetRPName(playerid));
		    SetPlayerBubbleText(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has entered their house.", GetRPName(playerid));
			ShowHouseTextDraws(playerid);
		}
		else
		{
			SM(playerid, COLOR_SYNTAX, "** This house can be robbed again in %i hours. (( Type /robhouse to rob this house. ))", HouseInfo[id][hRobbed]);
			//SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has entered the house.", GetRPName(playerid));
			SetPlayerBubbleText(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has entered the house.", GetRPName(playerid));
			ShowHouseTextDraws(playerid);
		}

        pData[playerid][pLastEnter] = gettime();
		SetFreezePos(playerid, HouseInfo[id][hIntX], HouseInfo[id][hIntY], HouseInfo[id][hIntZ]);
		SetPlayerFacingAngle(playerid, HouseInfo[id][hIntA]);
		SetPlayerInterior(playerid, HouseInfo[id][hInterior]);
		SetPlayerVirtualWorld(playerid, HouseInfo[id][hWorld]);
		SetCameraBehindPlayer(playerid);
		return 1;
	}
	else if((id = GetNearbyGarage(playerid)) >= 0)
	{
	    if(GarageInfo[id][gLocked])
	    {
	    	SCM(playerid, COLOR_SYNTAX, "This garage is locked.");
			//Dyuze(playerid, "Notice", "This garage is ~r~Locked.");
			return 0;
		}

		if(IsGarageOwner(playerid, id))
		{
		    GarageInfo[id][gTimestamp] = gettime();

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET timestamp = %i WHERE id = %i", gettime(), GarageInfo[id][gID]);
		    mysql_tquery(connectionID, queryBuffer);

		    //SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has entered their garage.", GetRPName(playerid));
		    SetPlayerBubbleText(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has entered their garage.", GetRPName(playerid));
		}
		else
		{
			//SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has entered the garage.", GetRPName(playerid));
			SetPlayerBubbleText(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has entered the garage.", GetRPName(playerid));
		}

		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
		    TeleportToGarage(playerid, garageInteriors[GarageInfo[id][gType]][intVX], garageInteriors[GarageInfo[id][gType]][intVY], garageInteriors[GarageInfo[id][gType]][intVZ], garageInteriors[GarageInfo[id][gType]][intVA], garageInteriors[GarageInfo[id][gType]][intID], GarageInfo[id][gWorld]);
		}
		else
		{
		    pData[playerid][pLastEnter] = gettime();
			SetFreezePos(playerid, garageInteriors[GarageInfo[id][gType]][intPX], garageInteriors[GarageInfo[id][gType]][intPY], garageInteriors[GarageInfo[id][gType]][intPZ]);
			SetPlayerFacingAngle(playerid, garageInteriors[GarageInfo[id][gType]][intPA]);
			SetPlayerInterior(playerid, garageInteriors[GarageInfo[id][gType]][intID]);
			SetPlayerVirtualWorld(playerid, GarageInfo[id][gWorld]);
			SetCameraBehindPlayer(playerid);
		}

		return 1;
	}
	else if((id = GetNearbyBusiness(playerid)) >= 0)
	{
	    if(BusinessInfo[id][bLocked])
	    {
	    	return SCM(playerid, COLOR_SYNTAX, "This store is closed.");
			//Dyuze(playerid, "Notice", "This store is ~r~Closed.");
		}

		if(IsBusinessOwner(playerid, id))
		{
		    BusinessInfo[id][bTimestamp] = gettime();

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET timestamp = %i WHERE id = %i", gettime(), BusinessInfo[id][bID]);
		    mysql_tquery(connectionID, queryBuffer);
		    SM(playerid, COLOR_TEAL, "[Business]:"WHITE"%s", BusinessInfo[id][bDescription]);
			SM(playerid, COLOR_TEAL, "[Business Message]:"WHITE" %s", BusinessInfo[id][bMessage]);
			//SM(playerid, COLOR_SYNTAX, "** This business can be robbed again in %i hours. (( Type /robbiz to rob this business. ))", BusinessInfo[id][bRobbed]);
		    //SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has entered %s.", GetRPName(playerid), bizInteriors[BusinessInfo[id][bType]][intType]);
		    SetPlayerBubbleText(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has entered %s.", GetRPName(playerid), bizInteriors[BusinessInfo[id][bType]][intType]);
		}
		else
		{
		    if(BusinessInfo[id][bEntryFee] > 0)
			{
				if(pData[playerid][pCash] < BusinessInfo[id][bEntryFee])
		    	{
		    	    return SCM(playerid, COLOR_SYNTAX, "You don't have enough money to pay the entry fee. You may not enter.");
		        }

		        //format(string, sizeof(string), "~r~-$%i", BusinessInfo[id][bEntryFee]);
		        //Dyuze(playerid, "Notice", string);

		        BusinessInfo[id][bCash] += BusinessInfo[id][bEntryFee];
		        GivePlayerCash(playerid, -BusinessInfo[id][bEntryFee]);

		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[id][bCash], BusinessInfo[id][bID]);
		    	mysql_tquery(connectionID, queryBuffer);
		    }

			//SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has entered %s.", GetRPName(playerid), bizInteriors[BusinessInfo[id][bType]][intType]);
			SetPlayerBubbleText(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has entered %s.", GetRPName(playerid), bizInteriors[BusinessInfo[id][bType]][intType]);
            SM(playerid, COLOR_GREEN, "%s", BusinessInfo[id][bMessage]);
			SM(playerid, COLOR_SYNTAX, "** This business can be robbed again in %i hours. (( Type /robbiz to rob this business. ))", BusinessInfo[id][bRobbed]);
		}

		pData[playerid][pLastEnter] = gettime();
		SetFreezePos(playerid, BusinessInfo[id][bIntX], BusinessInfo[id][bIntY], BusinessInfo[id][bIntZ]);
		SetPlayerFacingAngle(playerid, BusinessInfo[id][bIntA]);
		SetPlayerInterior(playerid, BusinessInfo[id][bInterior]);
		SetPlayerVirtualWorld(playerid, BusinessInfo[id][bWorld]);
		SetCameraBehindPlayer(playerid);
		SelectTextDraw(playerid, -1);

		/*SCM(playerid, COLOR_SYNTAX, "Entering a business is now disabled due to the open int biz system update. You can interact in the business while inside of...");
		SCM(playerid, COLOR_SYNTAX , " the radius of the business. Happy Gaming!!!");*/
		return 1;
	}
	else if((id = GetNearbyEntrance(playerid)) >= 0)
	{
	    if(EntranceInfo[id][eLocked])
	    {
	    	SCM(playerid, COLOR_SYNTAX, "This building is locked.");
			//Dyuze(playerid, "Notice", "This building is ~r~Locked.");
			return 0;
		}
		if(EntranceInfo[id][eIntX] == 0.0 && EntranceInfo[id][eIntY] == 0.0 && EntranceInfo[id][eIntZ] == 0.0)
		{
		    SCM(playerid, COLOR_SYNTAX, "This entrance has no interior and therefore cannot be entered.");
		    return 0;
		}

		if(!pData[playerid][pAdminDuty])
		{
			if(EntranceInfo[id][eAdminLevel] && pData[playerid][pAdmin] < EntranceInfo[id][eAdminLevel])
			{
			    SCM(playerid, COLOR_SYNTAX, "Your administrator level is too low. You may not enter.");
		    	return 0;
			}
			if(EntranceInfo[id][eFactionType] > 0 && GetFactionType(playerid) != EntranceInfo[id][eFactionType])
			{
		    	SCM(playerid, COLOR_SYNTAX, "This entrance is only accesible to a specific faction type. You may not enter.");
				return 0;
			}
			if(EntranceInfo[id][eVIP] && pData[playerid][pDonator] < EntranceInfo[id][eVIP])
			{
		    	SCM(playerid, COLOR_SYNTAX, "Your VIP rank is too low. You may not enter.");
		    	return 0;
			}
		}

        pData[playerid][pLastEnter] = gettime();
		//SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has entered %s.", GetRPName(playerid), EntranceInfo[id][eName]);
		SetPlayerBubbleText(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has entered %s.", GetRPName(playerid), EntranceInfo[id][eName]);

		if(EntranceInfo[id][eVehicles] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
		    if(EntranceInfo[id][eFreeze])
		    {
		        TeleportToCoords(playerid, EntranceInfo[id][eIntX], EntranceInfo[id][eIntY], EntranceInfo[id][eIntZ], EntranceInfo[id][eIntA], EntranceInfo[id][eInterior], EntranceInfo[id][eWorld], true);
		    }
			else
			{
				TeleportToCoords(playerid, EntranceInfo[id][eIntX], EntranceInfo[id][eIntY], EntranceInfo[id][eIntZ], EntranceInfo[id][eIntA], EntranceInfo[id][eInterior], EntranceInfo[id][eWorld]);
			}
		}
		else
		{
			if(EntranceInfo[id][eFreeze])
			{
  				SetFreezePos(playerid, EntranceInfo[id][eIntX], EntranceInfo[id][eIntY], EntranceInfo[id][eIntZ]);
			}
			else
			{
			    SetPlayerPos(playerid, EntranceInfo[id][eIntX], EntranceInfo[id][eIntY], EntranceInfo[id][eIntZ]);
  			}

	  		SetPlayerFacingAngle(playerid, EntranceInfo[id][eIntA]);
	    	SetPlayerInterior(playerid, EntranceInfo[id][eInterior]);
			SetPlayerVirtualWorld(playerid, EntranceInfo[id][eWorld]);
			SetCameraBehindPlayer(playerid);
		}

		if(!EntranceInfo[id][eFreeze])
		{
			//format(string, sizeof(string), "~w~%s", EntranceInfo[id][eName]);
		    //Dyuze(playerid, "Notice", string);
		}
		return 1;
	}
	else
	{
	    for(new i = 0; i < sizeof(staticEntrances); i ++)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 3.0, staticEntrances[i][ePosX], staticEntrances[i][ePosY], staticEntrances[i][ePosZ]))
	        {
	            if(staticEntrances[i][eFreeze])
				{
				    SetFreezePos(playerid, staticEntrances[i][eIntX], staticEntrances[i][eIntY], staticEntrances[i][eIntZ]);
				}
				else
				{
				    SetPlayerPos(playerid, staticEntrances[i][eIntX], staticEntrances[i][eIntY], staticEntrances[i][eIntZ]);

   					//format(string, sizeof(string), "~w~%s", staticEntrances[i][eName]);
		        	//Dyuze(playerid, "Notice", string);
				}

                pData[playerid][pLastEnter] = gettime();
	            //SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has entered %s.", GetRPName(playerid), staticEntrances[i][eName]);
	            SetPlayerBubbleText(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has entered %s.", GetRPName(playerid), staticEntrances[i][eName]);
	            SetPlayerFacingAngle(playerid, staticEntrances[i][eIntA]);
	            SetPlayerInterior(playerid, staticEntrances[i][eInterior]);
				SetPlayerVirtualWorld(playerid, staticEntrances[i][eWorld]);
				SetCameraBehindPlayer(playerid);
	            return 1;
    		}
		}
	}
	return 0;
}

ExitCheck(playerid)
{
	new id;

    if((gettime() - pData[playerid][pLastEnter]) < 3 && pData[playerid][pAdminDuty] == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need to wait before using this command again.");
	}

    if((id = GetInsideHouse(playerid)) >= 0 && IsPlayerInRangeOfPoint(playerid, 3.0, HouseInfo[id][hIntX], HouseInfo[id][hIntY], HouseInfo[id][hIntZ]))
	{
	    pData[playerid][pLastEnter] = gettime();
		//SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has exited the house.", GetRPName(playerid));
		SetPlayerBubbleText(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has exited the house.", GetRPName(playerid));
		SetPlayerPos(playerid, HouseInfo[id][hPosX], HouseInfo[id][hPosY], HouseInfo[id][hPosZ]);
		SetPlayerFacingAngle(playerid, HouseInfo[id][hPosA]);
		SetPlayerInterior(playerid, HouseInfo[id][hOutsideInt]);
		SetPlayerVirtualWorld(playerid, HouseInfo[id][hOutsideVW]);
		SetCameraBehindPlayer(playerid);
		return 1;
	}
	else if((id = GetInsideGarage(playerid)) >= 0)
	{
	    if(
			(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsPlayerInRangeOfPoint(playerid, 6.0, garageInteriors[GarageInfo[id][gType]][intVX], garageInteriors[GarageInfo[id][gType]][intVY], garageInteriors[GarageInfo[id][gType]][intVZ])) ||
			((GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) && (IsPlayerInRangeOfPoint(playerid, 2.0, garageInteriors[GarageInfo[id][gType]][intPX], garageInteriors[GarageInfo[id][gType]][intPY], garageInteriors[GarageInfo[id][gType]][intPZ]) || IsPlayerInRangeOfPoint(playerid, 4.0, garageInteriors[GarageInfo[id][gType]][intVX], garageInteriors[GarageInfo[id][gType]][intVY], garageInteriors[GarageInfo[id][gType]][intVZ]))))
		{
	    	//SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has exited the garage.", GetRPName(playerid));
	    	SetPlayerBubbleText(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has exited the garage.", GetRPName(playerid));

			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
			    TeleportToCoords(playerid, GarageInfo[id][gExitX], GarageInfo[id][gExitY], GarageInfo[id][gExitZ], GarageInfo[id][gExitA], 0, 0);
			}
			else
			{
		    	SetPlayerPos(playerid, GarageInfo[id][gPosX], GarageInfo[id][gPosY], GarageInfo[id][gPosZ]);
				SetPlayerFacingAngle(playerid, GarageInfo[id][gPosA]);
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				SetCameraBehindPlayer(playerid);
			}
		}

        pData[playerid][pLastEnter] = gettime();
		return 1;
	}
	else if((id = GetInsideBusiness(playerid)) >= 0 && IsPlayerInRangeOfPoint(playerid, 3.0, BusinessInfo[id][bIntX], BusinessInfo[id][bIntY], BusinessInfo[id][bIntZ]))
	{
	    pData[playerid][pLastEnter] = gettime();
		//SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has exited the business.", GetRPName(playerid));
		SetPlayerBubbleText(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has exited the business.", GetRPName(playerid));
		SetPlayerPos(playerid, BusinessInfo[id][bPosX], BusinessInfo[id][bPosY], BusinessInfo[id][bPosZ]);
		SetPlayerFacingAngle(playerid, BusinessInfo[id][bPosA]);
		SetPlayerInterior(playerid, BusinessInfo[id][bOutsideInt]);
		SetPlayerVirtualWorld(playerid, BusinessInfo[id][bOutsideVW]);
		SetCameraBehindPlayer(playerid);
		CancelSelectTextDraw(playerid);
		return 1;
		/*SCM(playerid, COLOR_SYNTAX, "Exiting a business is now disabled due to the new open int biz system update. You can interact in the business while inside of...");
		SCM(playerid, COLOR_SYNTAX , " the radius of the business. Happy Gaming!!!");
		return 1;*/
	}
	else if((id = GetInsideEntrance(playerid)) >= 0 && IsPlayerInRangeOfPoint(playerid, (IsPlayerInAnyVehicle(playerid)) ? (7.0) : (3.0), EntranceInfo[id][eIntX], EntranceInfo[id][eIntY], EntranceInfo[id][eIntZ]))
	{
	    pData[playerid][pLastEnter] = gettime();
	    //SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has exited %s.", GetRPName(playerid), EntranceInfo[id][eName]);
	    SetPlayerBubbleText(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has exited %s.", GetRPName(playerid), EntranceInfo[id][eName]);

		if(EntranceInfo[id][eVehicles] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
		    if(EntranceInfo[id][eFreeze])
		    {
		    	TeleportToCoords(playerid, EntranceInfo[id][ePosX], EntranceInfo[id][ePosY], EntranceInfo[id][ePosZ], EntranceInfo[id][ePosA], EntranceInfo[id][eOutsideInt], EntranceInfo[id][eOutsideVW], true);
			}
			else
			{
				TeleportToCoords(playerid, EntranceInfo[id][ePosX], EntranceInfo[id][ePosY], EntranceInfo[id][ePosZ], EntranceInfo[id][ePosA], EntranceInfo[id][eOutsideInt], EntranceInfo[id][eOutsideVW]);
			}
		}
		else
		{
		    if(EntranceInfo[id][eFreeze])
		    {
				SetFreezePos(playerid, EntranceInfo[id][ePosX], EntranceInfo[id][ePosY], EntranceInfo[id][ePosZ]);
			}
			else
			{
			    SetPlayerPos(playerid, EntranceInfo[id][ePosX], EntranceInfo[id][ePosY], EntranceInfo[id][ePosZ]);
			}

			SetPlayerFacingAngle(playerid, EntranceInfo[id][ePosA]);
			SetPlayerInterior(playerid, EntranceInfo[id][eOutsideInt]);
			SetPlayerVirtualWorld(playerid, EntranceInfo[id][eOutsideVW]);
			SetCameraBehindPlayer(playerid);
		}
		return 1;
	}
	else
	{
	    for(new i = 0; i < sizeof(staticEntrances); i ++)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 3.0, staticEntrances[i][eIntX], staticEntrances[i][eIntY], staticEntrances[i][eIntZ]) && GetPlayerVirtualWorld(playerid) == staticEntrances[i][eWorld])
			{
	            if(staticEntrances[i][eFreeze])
				{
				    SetFreezePos(playerid, staticEntrances[i][ePosX], staticEntrances[i][ePosY], staticEntrances[i][ePosZ]);
				}
				else
				{
                    SetPlayerPos(playerid, staticEntrances[i][ePosX], staticEntrances[i][ePosY], staticEntrances[i][ePosZ]);
				}

                pData[playerid][pLastEnter] = gettime();
			    //SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has exited %s.", GetRPName(playerid), staticEntrances[i][eName]);
			    SetPlayerBubbleText(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has exited %s.", GetRPName(playerid), staticEntrances[i][eName]);
	            SetPlayerFacingAngle(playerid, staticEntrances[i][ePosA]);
	            SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				SetCameraBehindPlayer(playerid);
				return 1;
			}
		}
	}
	return 0;
}

AddReportToQueue(playerid, text[])
{
	new targetid;
    for(new x = 0; x < MAX_REPORTS; x ++)
	{
	    if(!ReportInfo[x][rExists])
	    {
	        strcpy(ReportInfo[x][rText], text, 128);

	        ReportInfo[x][rExists] = 1;
			ReportInfo[x][rAccepted] = 0;
			ReportInfo[x][rReporter] = playerid;
			ReportInfo[x][rHandledBy] = INVALID_PLAYER_ID;
			ReportInfo[x][rTime] = 5;
			
	        pData[playerid][pLastReport] = gettime();
			SAM(COLOR_WHITE, "==================================");
			SAM(COLOR_LIGHTRED, "New Report!!!");
	        SAM(COLOR_AQUA, "Report from %s - Reporter ID: %i", GetRPName(playerid), playerid);
			SAM(COLOR_AQUA, "ID Reported: %i", targetid);
			SAM(COLOR_AQUA, "Report ID: %i", x);
			SAM(COLOR_AQUA, "Report Message: %s", text);
			SAM(COLOR_WHITE, "==================================");

			if(pData[x][pReportTimer] != -1) HideReport(x);
			TextDrawShowForPlayer(x, ReportTD);

			pData[x][pReportTimer] = SetTimerEx("HideReport", 5000, false, "d", x);
			return 1;
		}
	}

	return 0;
}

forward HideReport(playerid);
public HideReport(playerid)
{
	TextDrawHideForPlayer(playerid, ReportTD);
	KillTimer(pData[playerid][pReportTimer]);
	pData[playerid][pReportTimer] = -1;
	return 1;
}

AddDMReportToQueue(playerid, text[])
{
    for(new i = 0; i < MAX_REPORTS; i ++)
	{
	    if(!ReportInfo[i][rExists])
	    {
	        strcpy(ReportInfo[i][rText], text, 128);

	        ReportInfo[i][rExists] = 1;
			ReportInfo[i][rAccepted] = 0;
			ReportInfo[i][rReporter] = playerid;
			ReportInfo[i][rHandledBy] = INVALID_PLAYER_ID;
			ReportInfo[i][rTime] = 5;

	        pData[playerid][pLastReport] = gettime();
	        SAM(COLOR_YELLOW, "%s has reported that the following player may be deathmatching:  (ReportID: %i)", GetRPName(playerid), text, i);
	        return 1;
		}
	}

	return 0;
}

AddBan(username[], ip[], from[], reason[], permanent = 0)
{
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id FROM bans WHERE username = '%s' OR ip = '%s'", username, ip);
	mysql_tquery(connectionID, queryBuffer, "OnBanAttempt", "ssssi", username, ip, from, reason, permanent);
}

BanPlayer(playerid, from[], reason[], permanent = 0)
{
	if(!strcmp(from, SERVER_BOT))
	{
	    gAnticheatBans++;
    	SaveServerInfo();
	}

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO log_bans VALUES(null, %i, NOW(), '%s (IP: %s) was banned by %s, reason: %e')", pData[playerid][pID], GetPlayerNameEx(playerid), GetPlayerIP(playerid), from, reason);
	mysql_tquery(connectionID, queryBuffer);

	AddBan(GetPlayerNameEx(playerid), GetPlayerIP(playerid), from, reason, permanent);
	KickIP(GetPlayerIP(playerid));
}

Rangeban(playerid, from[], reason[])
{
	AddBan(GetPlayerNameEx(playerid), GetPlayerIPRange(playerid), from, reason);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO log_bans VALUES(null, %i, NOW(), '%s (IP: %s) was rangebanned by %s, reason: %e')", pData[playerid][pID], GetPlayerNameEx(playerid), GetPlayerIP(playerid), from, reason);
	mysql_tquery(connectionID, queryBuffer);

	KickIP(GetPlayerIP(playerid));
}

KickIP(ip[])
{
	foreach(new i : Player)
	{
	    if(!strcmp(GetPlayerIP(i), ip))
	    {
	        KickPlayer(i);
		}
	}
}

GetHealth(playerid)
{
	new Float:health;
	GetPlayerHealth(playerid, health);
	return floatround(health);
}

GetArmor(playerid)
{
	new Float:armor;
 	GetPlayerArmour(playerid, armor);
	return floatround(armor);
}

GivePlayerHealth(playerid, Float:amount)
{
	new Float:health;
	GetPlayerHealth(playerid, health);
	SetPlayerHealth(playerid, (health + amount > 100.0) ? (100.0) : (	health + amount));
}

GivePlayerArmour(playerid, Float:amount)
{
	new Float:armor;
	GetPlayerArmour(playerid, armor);
	SetScriptArmour(playerid, (armor + amount > 100.0) ? (100.0) : (armor + amount));
}

AddToPaycheck(playerid, amount)
{
	if(pData[playerid][pLogged])
	{
		pData[playerid][pPaycheck] = pData[playerid][pPaycheck] + amount;

		if(!pData[playerid][pAdminDuty])
	    {
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET paycheck = paycheck + %i WHERE uid = %i", amount, pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
	}
}
AddJailTime(playerid, amount)
{
	if(pData[playerid][pLogged])
	{
		pData[playerid][pJailTime] = pData[playerid][pJailTime] + amount;

		if(!pData[playerid][pAdminDuty])
	    {
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET jailtime = jailtime + %i WHERE uid = %i", amount, pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
	}
}

forward OnPlayerCallContact(playerid);
public OnPlayerCallContact(playerid)
{
	new
		contact[MAX_PLAYER_NAME];
	new rows, fields;
	cache_get_data(rows, fields, connectionID);

	if (!rows)
	{
		return SCM(playerid, COLOR_ERROR, "You don't have that name in your contacts");
	}
	else
	{
		new
			number;
		number = cache_get_field_content_int(0, "contact_number");
		cache_get_field_content(0, "contact_name", contact);

		if(number == pData[playerid][pPhone])
		{
			return SCM(playerid, COLOR_ERROR, "Invalid number.");
		}	

		foreach(new i : Player)
		{
			if(pData[i][pTogglePhone])
				return SCM(playerid, COLOR_ERROR, "The player's phone is off.");
		
			if(pData[i][pPhone] == number)
			{
				if(pData[i][pJailType] > 0)
				{
					return SCM(playerid, COLOR_ERROR, "That player is currently imprisoned and cannot use their phone.");
				}
				if(pData[i][pCallLine] != INVALID_PLAYER_ID)
				{
					return SCM(playerid, COLOR_ERROR, "This player is currently in a call. Wait until they hang up.");
				}
				if(pData[i][pTogglePhone])
				{
					return SCM(playerid, COLOR_ERROR, "That player has their mobile phone switched off.");
				}
				if(pData[i][pLiveBroadcast] != INVALID_PLAYER_ID)
				{
					return SCM(playerid, COLOR_ERROR, "That player is currently in a live interview and can't talk on the phone.");
				}

				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);

				KillTimer(pData[playerid][pCallTimer]);
				KillTimer(pData[i][pCallTimer]);

				pData[playerid][pCallTimer] = SetTimerEx("OnPhoneBecomeAvailable", 1000 * 30, false, "d", playerid);
				pData[i][pCallTimer] = SetTimerEx("OnPhoneBecomeAvailable", 1000 * 30, false, "d", i);

				pData[playerid][pCallLine] = i;
				pData[playerid][pCalling] = 1;
				pData[playerid][pCallStage] = 0;

				pData[i][pCallLine] = playerid;
				pData[i][pCallStage] = 1;

				SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s dials a number on their keypad and begins a call.", GetRPName(playerid));
				SendProximityMessage(i, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s's mobile phone begins to ring.", GetRPName(i));
				PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);

				SCMf(playerid, COLOR_YELLOW, "** You've placed a call to number: %i (%s). Please wait for your call to be answered.", number, contact);
				SCMf(i, COLOR_YELLOW, "** Incoming call from %s [%i]. Use /pickup to take this call.", GetRPName(playerid), pData[playerid][pPhone]);
				PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
				return 1;
			}
		}

		SCM(playerid, COLOR_ERROR, "That number is either not in service or the owner is offline.");
	}
	return 1;
}

forward OnPlayerTextContact(playerid);
public OnPlayerTextContact(playerid)
{
	new
		contact[MAX_PLAYER_NAME];

	new rows, fields;
	cache_get_data(rows, fields, connectionID);

	if (!rows)
	{
		return 0;
	}
	else
	{
		new
			number;

		number = cache_get_field_content_int(0, "Number");
		cache_get_field_content(0, "Contact", contact);

		pData[playerid][pPhoneSMS] = number;

		ShowPlayerDialog(playerid, DIALOG_PHONE_SMS_TEXT, DIALOG_STYLE_INPUT, "SMS Text", "Please type your message:", "Send", "Cancel");
	}
	return 1;
}
forward OnPlayerListContacts(playerid);
public OnPlayerListContacts(playerid)
{
	new
		contact[MAX_PLAYER_NAME],
		string[1024],
		number;

	new rows, fields;
	cache_get_data(rows, fields, connectionID);
	strcat(string, "Add Contact");

	for (new i = 0; i < rows; i ++)
	{
		cache_get_field_content(i, "contact_name", contact);
		number = cache_get_field_content_int(i, "contact_number");
		format(string, sizeof(string), "%s\n%s (%i)", string, contact, number);

		gListedItems[playerid][i] = cache_get_field_content_int(i, "contact_id");
	}
	ShowPlayerDialog(playerid, DIALOG_CONTACTS, DIALOG_STYLE_LIST, "{FFFFFF}My contacts", string, "Select", "Cancel");
}

ListContacts(playerid)
{
	if (pData[playerid][pPhone] > 0)
	{
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM phone_contacts WHERE phone_number = %i", pData[playerid][pPhone]);
		mysql_tquery(connectionID, queryBuffer, "OnPlayerListContacts", "i", playerid);
	}
}

forward OnPhoneBecomeAvailable(playerid);
public OnPhoneBecomeAvailable(playerid)
{
	if(pData[playerid][pCallStage] < 1 && pData[playerid][pCallLine] != INVALID_PLAYER_ID)
	{
		for(new i = 0; i < 13; i ++)
		{
			TextDrawHideForPlayer(playerid, CallingTD[i]);
		}
		for(new g = 0; g < 5; g++) {
			PlayerTextDrawHide(playerid, CallingPlayerTD[playerid][g]);
		}
		TextDrawHideForPlayer(playerid, CloseCallTD);
		TextDrawHideForPlayer(playerid, PICKUP);
		TextDrawHideForPlayer(playerid, HANGUP);
		SCM(playerid, COLOR_YELLOW, "They didn't answered the call.");
		SCM(playerid, COLOR_GREY, "The other line didn't picked up the call, please try again later.");
		SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s presses a button and hangs up their mobile phone.", GetRPName(playerid));
	} 
	/*else {
		for(new i = 0; i < 13; i ++)
		{
			TextDrawHideForPlayer(playerid, CallingTD[i]);
		}
		for(new g = 0; g < 4; g++) {
			PlayerTextDrawHide(playerid, CallingPlayerTD[playerid][g]);
		}
		TextDrawHideForPlayer(playerid, CloseCallTD);
		TextDrawHideForPlayer(playerid, PICKUP);
		TextDrawHideForPlayer(playerid, HANGUP);
		SCM(playerid, COLOR_YELLOW, "You didn't answered the call, the phone stopped ringing.");
		SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s's phone stopped ringing.", GetRPName(playerid));
	}

	pData[playerid][pCallStage] = 0;
	pData[playerid][pCallLine] = INVALID_PLAYER_ID;
	pData[playerid][pCalling] = 0;

	KillTimer(pData[playerid][pCallTimer]);*/
	return 1;
}
forward OnGraffitiCreated(id);
public OnGraffitiCreated(id)
{
	GraffitiData[id][graffitiID] = cache_insert_id(connectionID);
	Graffiti_Save(id);

	return 1;
}

GivePlayerCash(playerid, amount)
{
	if(pData[playerid][pLogged])
	{
		pData[playerid][pCash] = pData[playerid][pCash] + amount;

		if(!pData[playerid][pAdminDuty])
	    {
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cash = cash + %i WHERE uid = %i", amount, pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
	}
}

FriskPlayer(playerid, targetid)
{
	new str[(1024 * 2)], weapon_count;

	format(str, sizeof(str), "{7DAEFF}%s's Items:"WHITE"\n\n", GetRPName(targetid));
    format(str, sizeof(str), "%Dirty Money: $%i\n\n", str, pData[targetid][pDirtyCash]);
	format(str, sizeof(str), "%sCash: $%i\n\n", str, pData[targetid][pCash]);

	if(pData[targetid][pBackpack])
	{
	    format(str, sizeof(str), "%sThis player has a backpack, use {33AA33}/bpfrisk"WHITE" to frisk the backpack.\n", str);
	}
	if(pData[targetid][pPhone])
	{
	    format(str, sizeof(str), "%sThis player has a Mobile Phone.\n", str);
	}
	if(pData[targetid][pWalkieTalkie])
	{
	    format(str, sizeof(str), "%sThis player has a Portable Radio.\n", str);
	}
    if(pData[targetid][pSpraycans])
	{
	    format(str, sizeof(str), "%sThis player has (%d) spraycans.\n", str, pData[targetid][pSpraycans]);
	}
    if(pData[targetid][pRepairKit])
	{
	    format(str, sizeof(str), "%sThis player has (%d) repairtkit.\n", str, pData[targetid][pRepairKit]);
	}
    if(pData[targetid][pParts])
	{
	    format(str, sizeof(str), "%sThis player has (%d) vehicle parts.\n", str, pData[targetid][pParts]);
	}
	if(pData[targetid][pBoombox])
	{
	    format(str, sizeof(str), "%sThis player has a Boombox.\n", str);
	}
	if(pData[targetid][pMP3Player])
	{
	    format(str, sizeof(str), "%sThis player has a Mp3 Player.\n", str);
	}
	if(pData[targetid][pPhonebook])
	{
	    format(str, sizeof(str), "%sThis player has a Phone Book.\n", str);
	}
	if(pData[targetid][pMaterials] > 0)
	{
	    format(str, sizeof(str), "%sThis player has (%d) materials.\n", str, pData[targetid][pMaterials]);
	}
    if(pData[targetid][pPot])
	{
	    format(str, sizeof(str), "%sThis player has a (%dg) of pot.\n", str, pData[targetid][pPot]);
	}
	if(pData[targetid][pCrack])
	{
	    format(str, sizeof(str), "%sThis player has a (%dg) of crack.\n", str, pData[targetid][pCrack]);
	}
	if(pData[targetid][pMeth])
	{
	    format(str, sizeof(str), "%sThis player has a (%dg) of meth.\n", str, pData[targetid][pMeth]);
	}
	if(pData[targetid][pPainkillers])
	{
	    format(str, sizeof(str), "%sThis player has a (%d) of painkillers.\n", str, pData[targetid][pPainkillers]);
	}
	if(pData[targetid][pSeeds])
	{
	    format(str, sizeof(str), "%sThis player has a (%d) of Marijuana Seeds.\n", str, pData[targetid][pSeeds]);
	}
	if(pData[targetid][pEphedrine])
	{
	    format(str, sizeof(str), "%sThis player has a (%d) of Raw Ephedrine.\n", str, pData[targetid][pEphedrine]);
	}

	switch(pData[targetid][pSmuggleDrugs])
	{
	    case 1: format(str, sizeof(str), "%s{FF0000}Seeds package"WHITE"\n\n", str);
	    case 2: format(str, sizeof(str), "%s{FF0000}Crack package"WHITE"\n\n", str);
	    case 3: format(str, sizeof(str), "%s{FF0000}Raw ephedrine package"WHITE"\n\n", str);
	}

	format(str, sizeof(str), "%sWeapons:\n", str);
	for(new i = 0; i < 13; i ++)
	{
	    if(pData[targetid][pWeapons][i] > 0)
	    {
			weapon_count++;
			format(str, sizeof(str), "%s{FF0000}* %s\n", str, GetWeaponNameEx(pData[targetid][pWeapons][i]));
		}
	}
	if(weapon_count < 1) format(str, sizeof(str), "%s{FF0000}* This player has no weapon with them.", str);

	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Frisk Result", str, "Close", "");
    SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s searches for items on %s.", GetRPName(playerid), GetRPName(targetid));
}


DisplayInventory(playerid, targetid = INVALID_PLAYER_ID)
{
	if(targetid == INVALID_PLAYER_ID) targetid = playerid;

	new package[12], string[2048], title[64];

	switch(pData[playerid][pSmuggleDrugs])
	{
	    case 0: package = "None";
	    case 1: package = "Seeds";
	    case 2: package = "Crack";
	    case 3: package = "Ephedrine";
	}
	format(title, sizeof(title), "%s's Inventory Size: %i / 5", GetRPName(playerid), pData[playerid][pInventoryUpgrade]);

	format(string, sizeof(string), "Pot\t%i/%ig\n\
		Crack\t%i/%ig\n\
		Meth\t%i/%ig\n\
		Painkillers\t%i/%i\n\
		Seeds\t%i/%i\n\
		Materials\t%s/%i\n\
		Ephedrine\t%i/%ig\n\
		Muriatic acid\t%i/10\n\
		Baking soda\t%i/10\n\
		Diamond\t%d\n\
		Bandage\t%d\n\
		Medkit\t%d\n\
		Repairkit\t%d\n\
		Vehicle Parts\t%d\n\
		Vest\t%d\n\
		Foods\t%d\n\
		Drinks\t%d\n\
		Fireworks\t%d\n\
		Fishing rod\t%s\n\
		Fish bait\t%i/20\n\
		Boombox\t%s\n\
		MP3 player\t%s\n\
		Phonebook\t%s\n\
		Skates\t%s\n\
		Drivers License\t%s", pData[playerid][pPot],
		GetPlayerCapacity(CAPACITY_WEED),
		pData[playerid][pCrack],
		GetPlayerCapacity(CAPACITY_COCAINE),
		pData[playerid][pMeth],
		GetPlayerCapacity(CAPACITY_METH),
		pData[playerid][pPainkillers],
		GetPlayerCapacity(CAPACITY_PAINKILLERS),
		pData[playerid][pSeeds],
		GetPlayerCapacity(CAPACITY_SEEDS),
		AddCommas(pData[playerid][pMaterials]),
		GetPlayerCapacity(CAPACITY_MATERIALS),
		pData[playerid][pEphedrine],
		GetPlayerCapacity(CAPACITY_EPHEDRINE),
		pData[playerid][pMuriaticAcid],
		pData[playerid][pBakingSoda],
		FormatNumber(pData[playerid][pDiamonds], 0),
		pData[playerid][pBandage],
		pData[playerid][pMedkit],
		pData[playerid][pRepairKit],
		pData[playerid][pParts],
		pData[playerid][pVest],
		pData[playerid][pFood],
		pData[playerid][pDrink],
		pData[playerid][pFirework],
		(pData[playerid][pFishingRod]) ? (""GREEN"Have") : (""RED"None"),
		pData[playerid][pFishingBait],
		(pData[playerid][pBoombox]) ? (""GREEN"Have") : (""RED"None"),
		(pData[playerid][pMP3Player]) ? (""GREEN"Have") : (""RED"None"),
		(pData[playerid][pPhonebook]) ? (""GREEN"Have") : (""RED"None"),
		(pData[playerid][pSkates]) ? (""GREEN"Have") : (""RED"None"),
		(pData[playerid][pCarLicense]) ? (""GREEN"Have") : (""RED"None"));
	ShowPlayerDialog(playerid, DIALOG_INV, DIALOG_STYLE_TABLIST, title, string, "Next", "");

	/*SM(targetid, COLOR_REALRED, "_______ %s's inventory [Inventory Skill: %i/5] [%s] _______", GetRPName(playerid), pData[playerid][pInventoryUpgrade], GetDate());
	SM(targetid, COLOR_WHITE, "(Pot: %i/%ig) - (Crack: %i/%ig) - (Meth: %i/%ig) - (Painkillers: %i/%i) - (Seeds: %i/%i)\n", pData[playerid][pPot], GetPlayerCapacity(CAPACITY_WEED),
		pData[playerid][pCrack], GetPlayerCapacity(CAPACITY_COCAINE), pData[playerid][pMeth], GetPlayerCapacity(CAPACITY_METH), pData[playerid][pPainkillers], GetPlayerCapacity(CAPACITY_PAINKILLERS), pData[playerid][pSeeds], GetPlayerCapacity(CAPACITY_SEEDS));
	SM(targetid, SERVER_COLOR, "(Materials: %s/%i) - (Ephedrine: %i/%ig) - (Muriatic acid: %i/10) - (Baking soda: %i/10)\n", AddCommas(pData[playerid][pMaterials]), GetPlayerCapacity(CAPACITY_MATERIALS),
		pData[playerid][pEphedrine], GetPlayerCapacity(CAPACITY_EPHEDRINE), pData[playerid][pMuriaticAcid], pData[playerid][pBakingSoda]);

	SM(targetid, COLOR_WHITE, "(Fishing rod: %s) - (Fish bait: %i/20) - (Boombox: %s) - (MP3 player: %s) - (Phonebook: %s)\n", (pData[playerid][pFishingRod]) ? ("Yes") : ("No"), pData[playerid][pFishingBait], (pData[playerid][pBoombox]) ? ("Yes") : ("No"), (pData[playerid][pMP3Player]) ? ("Yes") : ("No"), (pData[playerid][pPhonebook]) ? ("Yes") : ("No"));
	SM(targetid, SERVER_COLOR, "(Drivers License: %s) - (Cigars: %i) - (Spraycans: %i/20) - (Bombs: %i/3)\n", (pData[playerid][pCarLicense]) ? ("Yes") : ("No"), pData[playerid][pCigars], pData[playerid][pSpraycans], pData[playerid][pBombs]);
	SM(targetid, COLOR_WHITE, "(Gasoline: %i/20L) - (Portable Radio: %s) - (Mobile Phone: %s) - (Drug Package: %s) - (Rope: %i/10)\n", pData[playerid][pGasCan], (pData[playerid][pWalkieTalkie]) ? ("Yes") : ("No"), (pData[playerid][pPhone]) ? ("Yes") : ("No"), package, pData[playerid][pRope]);
    SM(targetid, SERVER_COLOR, "(Watch: %s) - (GPS: %s) - (Hollow point: %i/%i) - (Poison tip: %i/%i) - (FMJ ammo: %i/%i)", (pData[playerid][pWatch]) ? ("Yes") : ("No"), (pData[playerid][pGPS]) ? ("Yes") : ("No"), pData[playerid][pHPAmmo], GetPlayerCapacity(CAPACITY_HPAMMO), pData[playerid][pPoisonAmmo], GetPlayerCapacity(CAPACITY_POISONAMMO), pData[playerid][pFMJAmmo], GetPlayerCapacity(CAPACITY_FMJAMMO));
    SCM(targetid, COLOR_REALRED, "______________________________________________________________________");*/
	return 1;
}
/*DisplayStats(playerid, targetid = INVALID_PLAYER_ID)
{
	if(targetid == INVALID_PLAYER_ID) targetid = playerid;

    new name[24], gender[8], faction[48], facrank[32], gang[32], gangrank[32], insurance[24], division[32], Float:health, Float:armor, Float:maxarmor;

	if(playerid == MAX_PLAYERS)
	{
		strcpy(name, pData[playerid][pUsername]);
	}
	else
	{
		strcat(name, GetRPName(playerid));
	}

	if(pData[playerid][pGender] == 1) gender = "Male";
	else if(pData[playerid][pGender] == 2) gender = "Female";
	else if(pData[playerid][pGender] == 3) gender = "Shemale";

	switch(pData[playerid][pInsurance])
	{
	    case HOSPITAL_COUNTY: insurance = "County General";
	    case HOSPITAL_ALLSAINTS: insurance = "All Saints";
	    default: insurance = "None";
	}

	if(pData[playerid][pFaction] >= 0)
	{
	    strcpy(faction, FactionInfo[pData[playerid][pFaction]][fName]);
	    strcpy(facrank, FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]]);

	    if(pData[playerid][pDivision] >= 0)
	    {
	        strcpy(division, FactionDivisions[pData[playerid][pFaction]][pData[playerid][pDivision]]);
		}
		else
		{
		    division = "None";
		}
	}
	else
	{
	    faction = "None";
	    facrank = "N/A";
	    division = "None";
	}

	if(pData[playerid][pGang] >= 0)
	{
	    strcpy(gang, GangInfo[pData[playerid][pGang]][gName]);
	    strcpy(gangrank, GangRanks[pData[playerid][pGang]][pData[playerid][pGangRank]]);
	}
	else
	{
	    gang = "None";
	    gangrank = "N/A";
	}

	switch(pData[playerid][pDonator])
	{
		case 0:
			maxarmor = 100.0;
		case 1, 2:
			maxarmor = 125.0;
		case 3:
		    maxarmor = 150.0;
	}

	if(playerid == MAX_PLAYERS)
	{
	    health = pData[playerid][pHealth];
	    armor = pData[playerid][pArmor];
	}
	else
	{
		GetPlayerHealth(playerid, health);
		GetPlayerArmour(playerid, armor);
	}

	SM(targetid, SERVER_COLOR,  	"_______________________________________________________________________________");
 	SM(targetid, COLOR_WHITE, 		"%s - (Level: %i) - (Gender: %s) - (Age: %i) - (Cash: $%s) - (Bank: $%s) - (Hours: %i) - (Ph: %i)\n", name, pData[playerid][pLevel], gender, pData[playerid][pAge], AddCommas(pData[playerid][pCash]), AddCommas(pData[playerid][pBank]), pData[playerid][pHours], pData[playerid][pPhone]);
	SM(targetid, 0xffde84ff,  	 	"(Total Wealth: $%s) - (Addict: %i/3) - (Asset: %i/4) - (Channel: %i) - (Report Warnings: %i/3)\n", AddCommas(pData[playerid][pCash] + pData[playerid][pBank]), pData[playerid][pAddictUpgrade], pData[playerid][pAssetUpgrade], pData[playerid][pChannel], pData[playerid][pReportWarns]);
	SM(targetid, COLOR_WHITE, 		"(Job: %s / %s) - (Job Skill: %i) - (Crimes: %i) - (Arrested: %i) - (Jail Time: %i seconds)\n", GetJobName(pData[playerid][pJob]), GetJobName(pData[playerid][pSecondJob]), GetJobLevel(playerid, pData[playerid][pJob]), pData[playerid][pCrimes], pData[playerid][pArrested], pData[playerid][pJailTime]);
	SM(targetid, 0xffde84ff,  	 	"(Spawn Health: %.1f/100.0) - (Spawn Armor: %.1f/%.1f) - (Insurance: %s) - (Paycheck: $%i)\n", pData[playerid][pSpawnHealth], pData[playerid][pSpawnArmor], maxarmor, insurance, pData[playerid][pPaycheck]);
    SM(targetid, COLOR_WHITE, 		"(Faction: %s [%s %i -%s]) - (Gang: %s [%s %i]) - (Helper: %s) - (DM Warnings: %i/5) - (Weapon Restriction: %i Hrs)\n", faction, facrank, pData[playerid][pFactionRank], division, gang, gangrank, pData[playerid][pGangRank], GetHelperRank(playerid), pData[playerid][pDMWarnings], pData[playerid][pWeaponRestricted]);
	SM(targetid, 0xffde84ff, 		"(VIP Package: %s) - (Married to: %s) - (Warnings: %i) - (Wanted Level: %i)\n", GetDonatorRank(pData[playerid][pDonator]), pData[playerid][pMarriedName], pData[playerid][pWarnings], pData[playerid][pWantedLevel]);

	if(pData[targetid][pAdmin] > 0)
	{
	    SM(targetid, COLOR_WHITE, 	"(Interior: %i) - (Virtual: %i) - (AFK: %s) - (Reports: %i) - (Help Requests: %i)", (playerid == MAX_PLAYERS) ? (pData[playerid][pInterior]) : (GetPlayerInterior(playerid)), (playerid == MAX_PLAYERS) ? (pData[playerid][pWorld]) : (GetPlayerVirtualWorld(playerid)), (playerid == MAX_PLAYERS) ? ("No") : ((pData[playerid][pAFK]) ? ("Yes") : ("No")),
			pData[playerid][pReports], pData[playerid][pHelpRequests]);
	}
	SM(targetid, SERVER_COLOR,  	"_______________________________________________________________________________");
	return 1;
}*/

DisplayStats(playerid, targetid = INVALID_PLAYER_ID)
{
	if(targetid == INVALID_PLAYER_ID) targetid = playerid;

    new super[268], str[3000], titlestring[250];
    new name[24], gender[8], faction[48], facrank[32], gang[32], gangrank[32], insurance[24], division[32], Float:health, Float:armor, Float:maxarmor;

	if(playerid == MAX_PLAYERS)
	{
		strcpy(name, pData[playerid][pUsername]);
	}
	else
	{
		strcat(name, GetRPName(playerid));
	}

	if(pData[playerid][pGender] == 1) gender = "Male";
	else if(pData[playerid][pGender] == 2) gender = "Female";
	else if(pData[playerid][pGender] == 3) gender = "Shemale";

	switch(pData[playerid][pInsurance])
	{
	    case HOSPITAL_COUNTY: insurance = "County General";
	    case HOSPITAL_ALLSAINTS: insurance = "All Saints";
	    //case HOSPITAL_VIP: insurance = "VIP LOUNGE";
	    default: insurance = "None";
	}

	if(pData[playerid][pFaction] >= 0)
	{
	    if(!strcmp(FactionInfo[pData[playerid][pFaction]][fShortName], "None", true))
	    {
		    strcpy(faction, FactionInfo[pData[playerid][pFaction]][fName]);
		}
		else
		{
		    strcpy(faction, FactionInfo[pData[playerid][pFaction]][fShortName]);
		}

	    format(facrank, sizeof(facrank), "%s (%i)", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], pData[playerid][pFactionRank]);

	    if(pData[playerid][pDivision] >= 0)
	    {
	        strcpy(division, FactionDivisions[pData[playerid][pFaction]][pData[playerid][pDivision]]);
		}
		else
		{
		    division = "None";
		}
	}
	else
	{
	    faction = "None";
	    facrank = "N/A";
	    division = "None";
	}

	if(pData[playerid][pGang] >= 0)
	{
	    strcpy(gang, GangInfo[pData[playerid][pGang]][gName]);
	    strcpy(gangrank, GangRanks[pData[playerid][pGang]][pData[playerid][pGangRank]]);
	}
	else
	{
	    gang = "None";
	    gangrank = "N/A";
	}

	switch(pData[playerid][pDonator])
	{
		case 0:
			maxarmor = 100.0;
		case 1, 2:
			maxarmor = 125.0;
		case 3:
		    maxarmor = 150.0;
	}

	if(playerid == MAX_PLAYERS)
	{
	    health = pData[playerid][pHealth];
	    armor = pData[playerid][pArmor];
	}
	else
	{
		GetPlayerHealth(playerid, health);
		GetPlayerArmour(playerid, armor);
	}
	//Dialog Stats by Stewart(Look-A-Like LIRP)
	format(super, sizeof(super), "In-Character Stats of %s [%s]", name, GetDate());
	strcat(titlestring, super);

	format(super, sizeof(super), "Asset: %i/4 - Spawn Health: %.1f/100.0 - Spawn Armor: %.1f/%.1f - Inventory: %i/5 - Addict: %i/3\n\n", pData[playerid][pAssetUpgrade], 						pData[playerid][pSpawnHealth], maxarmor, pData[playerid][pInventoryUpgrade], pData[playerid][pAddictUpgrade]);
	strcat(str, super);

	format(super, sizeof(super), "Membership: [%s{A9C4E4}]\n", GetDonatorRank(pData[playerid][pDonator]));
	strcat(str, super);
	format(super, sizeof(super), "Diamonds: [%i]\n\n", pData[playerid][pDiamonds]);
	strcat(str, super);

	format(super, sizeof(super), "Level: {00D4FF}[%i]{A9C4E4}\n", pData[playerid][pLevel]);
	strcat(str, super);
	format(super, sizeof(super), "Hours: {00D4FF}[%i]{A9C4E4}\n", pData[playerid][pHours]);
	strcat(str, super);
	format(super, sizeof(super), "Gender: {00D4FF}[%s]{A9C4E4}\n", gender);
	strcat(str, super);
	format(super, sizeof(super), "Age: {00D4FF}[%i]{A9C4E4}\n", pData[playerid][pAge]);
	strcat(str, super);
	format(super, sizeof(super), "Married to: {00D4FF}[%s]{A9C4E4}\n", pData[playerid][pMarriedName]);
	strcat(str, super);
	format(super, sizeof(super), "Insurance: {00D4FF}[%s]{A9C4E4}\n", insurance);
	strcat(str, super);
	format(super, sizeof(super), "Paycheck: {00D4FF}[$%i]{A9C4E4} - Cash: {00D4FF}[$%s]{A9C4E4} - Bank: {00D4FF}[$%s]{A9C4E4} - Total Wealth: {00D4FF}[$%s]{A9C4E4}\n\n", pData[playerid][pPaycheck], AddCommas(pData[playerid][pCash]), AddCommas(pData[playerid][pBank]), AddCommas(pData[playerid][pCash] + pData[playerid][pBank]));
	strcat(str, super);

	format(super, sizeof(super), "Faction: {00D4FF}[%s]{A9C4E4} - Rank: {00D4FF}[%s]{A9C4E4} - Division: {00D4FF}[%s]{A9C4E4}\n", faction, facrank, division);
	strcat(str, super);
	format(super, sizeof(super), "Gang: {00D4FF}[%s]{A9C4E4} - Rank: {00D4FF}[%s %i]{A9C4E4}\n", gang, gangrank, pData[playerid][pGangRank]);
	strcat(str, super);
	format(super, sizeof(super), "Primary Job: {00D4FF}[%s]{A9C4E4}\n", GetJobName(pData[playerid][pJob]));
	strcat(str, super);
	format(super, sizeof(super), "Secondary Job: {00D4FF}[%s]{A9C4E4}\n\n", GetJobName(pData[playerid][pSecondJob]));
	strcat(str, super);

	format(super, sizeof(super), "Wanted Level: [%i/3] - Jail Time: [%i second(s)] -Crimes: [%i] - Arrested: [%i]\n", pData[playerid][pWantedLevel], pData[playerid][pJailTime], pData[playerid][pCrimes], pData[playerid][pArrested]);
	strcat(str, super);
	format(super, sizeof(super), "DM Warn: [%i/5] - Weapon Restriction: [%i] - Character Warn: [%i] - Report Warnings: [%i/3]\n", pData[playerid][pDMWarnings], pData[playerid][pWeaponRestricted], pData[playerid][pWarnings], pData[playerid][pReportWarns]);
	strcat(str, super);
	ShowPlayerDialog(targetid, DIALOG_STATS, DIALOG_STYLE_MSGBOX, titlestring, str, "Next Page", "Close");
	return 1;
}

ShowDialogToPlayer(playerid, dialogid)
{
	new string[2048];
	switch(dialogid)
	{
		case DIALOG_REGISTER:
		{
			/*format(string, sizeof(string), ""WHITE"Welcome to "SERVER_NAME"!\nYou can {00AA00}register "WHITE"an account by entering your desired password.\n\n"SVRCLR"Username: "WHITE"%s\n"SVRCLR"Password:", GetPlayerNameEx(playerid));
			ShowPlayerDialog(playerid,DIALOG_REGISTER,DIALOG_STYLE_PASSWORD,""SVRCLR"Registration",string,"Register","Exit");*/
			format(string, sizeof(string), ""WHITE"Welcome to "SVRCLR""SERVER_NAME"\n\n\
			"WHITE"Your Account is not registered, Please put your password below\n\n\
			"SVRCLR"Your Platform: "WHITE"%s\n\n\
			"SVRCLR"[Username]: "WHITE"%s\n\n\
			"SVRCLR"[Password]:", IsPlayerAndroid(playerid) ? ("Mobile") : ("Desktop"), GetPlayerNameEx(playerid));
			ShowPlayerDialog(playerid,DIALOG_REGISTER,DIALOG_STYLE_PASSWORD,"Account",string,"Register","Exit");
		}
		case DIALOG_LOGIN:
		{
			new dest[22];
			new logindate[24];
			cache_get_field_content(0, "lastlogin", logindate, connectionID, 24);
			NetStats_GetIpPort(playerid, dest, sizeof(dest));
			format(string, sizeof(string), ""WHITE"Welcome to "SERVER_NAME"\n\n\
			"SVRCLR"Your Platform: "WHITE"%s\n\n\
			"SVRCLR"Your IP Address: "WHITE"%s\n\n\
			"SVRCLR"Your last login was: "WHITE"%s\n\n\
			"SVRCLR"[Username]: "WHITE"%s\n\
			"SVRCLR"[Password]:\n\n\
			"WHITE"Your Account is already registered, Please login below.", IsPlayerAndroid(playerid) ? ("Mobile") : ("Desktop"), dest, logindate, GetPlayerNameEx(playerid));
			ShowPlayerDialog(playerid,DIALOG_LOGIN,DIALOG_STYLE_PASSWORD,"Account",string,"Login","Exit");
			
		}
		case DIALOG_GENDER:
		{
		    ShowPlayerDialog(playerid, DIALOG_GENDER, DIALOG_STYLE_LIST, ""SVRCLR"Gender", "Male\nFemale", "Select", "");
		}
		//Sampvoice
		case DIALOG_VOICECHAT2:
		{
		    ShowPlayerDialog(playerid, DIALOG_VOICECHAT2, DIALOG_STYLE_LIST, ""SVRCLR"Voice Chat", "Whisper\nNormal\nShout", "Select", "Exit");
		}
		case DIALOG_AGE:
		{
	   		ShowPlayerDialog(playerid, DIALOG_AGE, DIALOG_STYLE_INPUT, ""SVRCLR"Age", ""WHITE"What age would you like your character to be (Between 13-99 yeas old):", "Submit", "Back");
		}
		case DIALOG_BINDMAIN2:
		{
            ShowPlayerDialog(playerid, DIALOG_BINDMAIN, DIALOG_STYLE_LIST, "Binds", "Bind Type\nBind Text", "Confirm", "Cancel");
		}
		case DIALOG_BINDTEXT:
		{
            ShowPlayerDialog(playerid, DIALOG_BINDTEXT, DIALOG_STYLE_INPUT, "bind text", "Wanna bind? Put the text below.", "Confirm", "Cancel");
		}
		case DIALOG_BINDTEXT2:
		{
            ShowPlayerDialog(playerid, DIALOG_BINDTEXT2, DIALOG_STYLE_INPUT, "bind text", "Wanna bind? Put the text below.", "Confirm", "Cancel");
		}
		case DIALOG_BINDTEXT3:
		{
            ShowPlayerDialog(playerid, DIALOG_BINDTEXT3, DIALOG_STYLE_INPUT, "bind text", "Wanna bind? Put the text below.", "Confirm", "Cancel");
		}
		case DIALOG_BINDTEXT4:
		{
            ShowPlayerDialog(playerid, DIALOG_BINDTEXT4, DIALOG_STYLE_INPUT, "bind text", "Wanna bind? Put the text below.", "Confirm", "Cancel");
		}
		case DIALOG_BINDTEXT5:
		{
            ShowPlayerDialog(playerid, DIALOG_BINDTEXT5, DIALOG_STYLE_INPUT, "bind text", "Wanna bind? Put the text below.", "Confirm", "Cancel");
		}
		case DIALOG_BINDTYPE:
		{
            ShowPlayerDialog(playerid, DIALOG_BINDTYPE, DIALOG_STYLE_LIST, "bind Type", "/me\n/do", "Confirm", "Cancel");
		}
		case DIALOG_BINDTYPE2:
		{
            ShowPlayerDialog(playerid, DIALOG_BINDTYPE2, DIALOG_STYLE_LIST, "bind Type", "/me\n/do", "Confirm", "Cancel");
		}
		case DIALOG_BINDTYPE3:
		{
            ShowPlayerDialog(playerid, DIALOG_BINDTYPE3, DIALOG_STYLE_LIST, "bind Type", "/me\n/do", "Confirm", "Cancel");
		}
		case DIALOG_BINDTYPE4:
		{
            ShowPlayerDialog(playerid, DIALOG_BINDTYPE4, DIALOG_STYLE_LIST, "bind Type", "/me\n/do", "Confirm", "Cancel");
		}
		case DIALOG_BINDTYPE5:
		{
            ShowPlayerDialog(playerid, DIALOG_BINDTYPE5, DIALOG_STYLE_LIST, "bind Type", "/me\n/do", "Confirm", "Cancel");
		}
 	    case DIALOG_BUYVEHICLENEW:
	    {
	        ShowPlayerDialog(playerid, DIALOG_BUYVEHICLENEW, DIALOG_STYLE_LIST, "Vehicle Menu", "Browse as Model\t"RED"PC VERSION"WHITE"\nBrowse as List\t{32cd32}CP VERSION"WHITE"", "Select", "");
		}
		case DIALOG_REFERRAL:
		{
		    ShowPlayerDialog(playerid, DIALOG_REFERRAL, DIALOG_STYLE_INPUT, ""SVRCLR"Referral", ""WHITE"Have you been invited here by one of our players? Put their name:\n(Click on 'Skip' if you haven't been referred by anyone.)", "Submit", "Skip");
		}
		case DIALOG_TELEPORT:
		{
		    ShowPlayerDialog(playerid, DIALOG_TELEPORT, DIALOG_STYLE_LIST, ""SVRCLR"Spawn", "Los Santos\nLas Venturas\nSan Fierro", "Submit", "Skip");
		}
		/*#if defined Christmas
	#else
			case DIALOG_CAROL:
			{
				new carolString[250];
				format(carolString, sizeof(carolString), ""RED"Merry"GREY"Christmas\n"WHITE"To start caroling on this house, type in the following into the text field.\n"GREEN"%s", ReturnLyrics(CarolLyrics[playerid]));
				ShowPlayerDialog(playerid, DIALOG_CAROL, DIALOG_STYLE_INPUT, ""SVRCLR"Christmas Caroling", carolString, "Submit", "Skip");
			}
		#endif*/
 		case DIALOG_VENDOR:
		{
			ShowPlayerDialog(playerid, DIALOG_VENDOR, DIALOG_STYLE_LIST, ""TEAL"Street Food", "Burger "GREEN"85 PHP"WHITE"\nSISIG "GREEN"150 PHP"WHITE"\nPIATTOS "GREEN"25 PHP"WHITE"\nDONUT "GREEN"55 PHP"WHITE"\nBUKO JUICE "GREEN"20 PHP"WHITE"\nPINEAPPLE JUICE "GREEN"50 PHP"WHITE"\nSPRITE "GREEN"28 PHP"WHITE"\nNATURE SPRING "GREEN"15 PHP"WHITE"", "Proceed", "Back");
		}
		case DIALOG_BUYFURNITURE1:
		{
		    for(new i = 0; i < sizeof(furnitureCategories); i ++)
		    {
		        format(string, sizeof(string), "%s\n%s", string, furnitureCategories[i]);
		    }
		    ShowPlayerDialog(playerid, DIALOG_BUYFURNITURE1, DIALOG_STYLE_LIST, "Choose a category to browse.", string, "Select", "Cancel");
			//ShowModelSelectionMenuEx(playerid, furnitureArray, "Select an item to buy", DIALOG_BUYFURNITURE1, 16.0, 0.0, 130.0);
		}
		case DIALOG_BUYFURNITURE2:
		{
		    new index = -1;

            for(new i = 0; i < sizeof(furnitureArray); i ++)
            {
                if(!strcmp(furnitureArray[i][fCategory], furnitureCategories[pData[playerid][pCategory]]))
                {
                    if(index == -1)
                    {
                        index = i;
                    }

                    format(string, sizeof(string), "%s\n%s ($%i)", string, furnitureArray[i][fName], furnitureArray[i][fPrice]);
                }
            }

            pData[playerid][pFurnitureIndex] = index;
            ShowPlayerDialog(playerid, DIALOG_BUYFURNITURE2, DIALOG_STYLE_LIST, "Choose an item in order to preview it.", string, "Select", "Back");
		}
		case DIALOG_NEWBIE:
		{
			ShowPlayerDialog(playerid, DIALOG_NEWBIE, DIALOG_STYLE_INPUT, "Ask Newbie Question", "Please input your question\nPlease bare in mind only script/server related questions will be answered.", "Send", "Cancel");
		}
		case DIALOG_ATM:
		{
	        ShowPlayerDialog(playerid, DIALOG_ATM, DIALOG_STYLE_LIST, ""SVRCLR"Select your option", "Withdraw\nDeposit", "Submit", "Cancel");
		}
		case DIALOG_ATMDEPOSIT:
		{
		    format(string, sizeof(string), "How much would you like to deposit? (Your account balance is %s.)", FormatNumber(pData[playerid][pBank]));
	        ShowPlayerDialog(playerid, DIALOG_ATMDEPOSIT, DIALOG_STYLE_INPUT, ""SVRCLR"Deposit", string, "Select", "Cancel");
		}
		case DIALOG_ATMWITHDRAW:
		{
		    format(string, sizeof(string), "How much would you like to withdraw? (Your account balance is %s.)", FormatNumber(pData[playerid][pBank]));
	        ShowPlayerDialog(playerid, DIALOG_ATMWITHDRAW, DIALOG_STYLE_INPUT, ""SVRCLR"Withdraw", string, "Select", "Cancel");
		}
		case DIALOG_ATM_TRANSFER:
		{
	        ShowPlayerDialog(playerid, DIALOG_ATM_TRANSFER, DIALOG_STYLE_INPUT, ""SVRCLR"PAYPAL ID", "Please put the paypalID you want to transfer the money to:", "Select", "Cancel");
		}
		case DIALOG_ATM_TRANSFER2:
		{
		    format(string, sizeof(string), "How much would you like to transfer? (Your account balance is %s.)", FormatNumber(pData[playerid][pBank]));
	        ShowPlayerDialog(playerid, DIALOG_ATM_TRANSFER2, DIALOG_STYLE_INPUT, ""SVRCLR"Withdraw", string, "Select", "Cancel");
		}
		case DIALOG_BUYCLOTHINGTYPE:
		{
		    ShowPlayerDialog(playerid, DIALOG_BUYCLOTHINGTYPE, DIALOG_STYLE_LIST, "Choose a browsing method.", "Browse by Model\nBrowse by List", "Select", "Back");
		}
		case DIALOG_BUYCLOTHING:
		{
		    new index = -1;

            for(new i = 0; i < sizeof(clothingArray); i ++)
            {
                if(!strcmp(clothingArray[i][clothingType], clothingTypes[pData[playerid][pCategory]]))
                {
                    if(index == -1)
                    {
                        index = i;
                    }

                    format(string, sizeof(string), "%s\n%s", string, clothingArray[i][clothingName]);
                }
            }

            pData[playerid][pClothingIndex] = index;
            ShowPlayerDialog(playerid, DIALOG_BUYCLOTHING, DIALOG_STYLE_LIST, "Choose an item in order to preview it.", string, "Select", "Cancel");
		}
		case DIALOG_BUYCLOTHES:
		{
			new businessid = GetInsideBusiness(playerid);

			if(businessid >= 0 && BusinessInfo[businessid][bType] == BUSINESS_CLOTHES)
			{
			    format(string, sizeof(string), "%s %s [%i products]", BusinessInfo[businessid][bDescription], bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bProducts]);

				if(pData[playerid][pDonator] > 0) {
					ShowPlayerDialog(playerid, DIALOG_BUYCLOTHES, DIALOG_STYLE_INPUT, string, "NOTE: New clothes are free for VIP members.\n\nPlease input the ID of the skin you wish to purchase.\n(( List of skins: http://wiki.sa-mp.net/wiki/Skins:All ))", "Submit", "Cancel");
				} else {
					ShowPlayerDialog(playerid, DIALOG_BUYCLOTHES, DIALOG_STYLE_INPUT, string, "NOTE: New clothes costs $2,000.\n\nPlease input the ID of the skin you wish to purchase.\n(( List of skins: http://wiki.sa-mp.net/wiki/Skins:All ))", "Submit", "Cancel");
				}
			}
		}
		case DIALOG_FACTIONPAY1:
		{
		    string = "#\tRank\tPaycheck";

		    for(new i = 0; i < FactionInfo[pData[playerid][pFactionEdit]][fRankCount]; i ++)
		    {
		        format(string, sizeof(string), "%s\n%i\t%s\t"SVRCLR"$%i"WHITE"", string, i, FactionRanks[pData[playerid][pFactionEdit]][i], FactionInfo[pData[playerid][pFactionEdit]][fPaycheck][i]);
			}

			ShowPlayerDialog(playerid, DIALOG_FACTIONPAY1, DIALOG_STYLE_TABLIST_HEADERS, FactionInfo[pData[playerid][pFactionEdit]][fName], string, "Change", "Cancel");
		}
		case DIALOG_PHONEBOOK:
		{
		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM phonebook ORDER BY name ASC LIMIT %i, %i", (pData[playerid][pPage] - 1) * MAX_LISTED_NUMBERS, MAX_LISTED_NUMBERS);
			mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_VIEW_PHONEBOOK, playerid);
		}
		case DIALOG_LANDBUILDTYPE:
		{
		    ShowPlayerDialog(playerid, DIALOG_LANDBUILDTYPE, DIALOG_STYLE_LIST, "Choose your browsing method.", "Browse by Model\nBrowse by List", "Select", "Back");
		}
  		case DIALOG_LANDBUILD1:
		{
		    for(new i = 0; i < sizeof(furnitureCategories); i ++)
		    {
		        format(string, sizeof(string), "%s\n%s", string, furnitureCategories[i]);
		    }

		    ShowPlayerDialog(playerid, DIALOG_LANDBUILD1, DIALOG_STYLE_LIST, "Choose a category to browse.", string, "Select", "Back");
		}
		case DIALOG_LANDBUILD2:
		{
		    new index = -1;

            for(new i = 0; i < sizeof(furnitureArray); i ++)
            {
                if(!strcmp(furnitureArray[i][fCategory], furnitureCategories[pData[playerid][pCategory]]))
                {
                    if(index == -1)
                    {
                        index = i;
                    }

                    format(string, sizeof(string), "%s\n%s (%s)", string, furnitureArray[i][fName], FormatNumber(furnitureArray[i][fPrice]));
                }
            }

            pData[playerid][pFurnitureIndex] = index;
            ShowPlayerDialog(playerid, DIALOG_LANDBUILD2, DIALOG_STYLE_LIST, "Choose an item in order to preview it.", string, "Select", "Back");
		}
		case DIALOG_LANDMENU:
		{
		    new
		        landid = GetNearbyLand(playerid);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM landobjects WHERE landid = %i", LandInfo[landid][lID]);
			mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LAND_MAINMENU, playerid);
		}
		case DIALOG_LANDOBJECTMENU:
		{
	        if(IsGateObject(pData[playerid][pSelected]))
	        {
		        ShowPlayerDialog(playerid, DIALOG_LANDOBJECTMENU, DIALOG_STYLE_LIST, "Object menu", "Edit object\nEdit gate destination\nDuplicate object\nSell object", "Select", "Cancel");
	        }
			else
			{
                ShowPlayerDialog(playerid, DIALOG_LANDOBJECTMENU, DIALOG_STYLE_LIST, "Object menu", "Edit object\nDuplicate object\nSell object", "Select", "Cancel");
	        }
		}
		case DIALOG_LANDOBJECTS:
		{
		    new landid = GetNearbyLand(playerid);

		    if(landid >= 0 && HasLandPerms(playerid, landid))
		    {
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM landobjects WHERE landid = %i ORDER BY id DESC LIMIT %i, %i", LandInfo[landid][lID], (pData[playerid][pPage] - 1) * MAX_LISTED_OBJECTS, MAX_LISTED_OBJECTS);
   				mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LIST_LANDOBJECTS, playerid);
			}
		}
		case DIALOG_MP3PLAYER:
		{
		    ShowPlayerDialog(playerid, DIALOG_MP3PLAYER, DIALOG_STYLE_LIST, "MP3 player", "Custom URL\nUploaded Music\nRadio Stations\nStop Music", "Select", "Cancel");
		}
		case DIALOG_MP3RADIO:
		{
		    ShowPlayerDialog(playerid, DIALOG_MP3RADIO, DIALOG_STYLE_LIST, "Radio Stations", "Browse Genres\nSearch by Name", "Select", "Back");
		}
		case DIALOG_MP3RADIOGENRES:
		{
		    new genre[32] = "n/a";

		    for(new i = 0; i < sizeof(radioGenreList); i ++)
		    {
		        if(strcmp(radioGenreList[i][rGenre], genre) != 0)
		        {
		            strcpy(genre, radioGenreList[i][rGenre]);
		            strcat(string, genre);
		            strcat(string, "\n");
		        }
		    }

		    ShowPlayerDialog(playerid, DIALOG_MP3RADIOGENRES, DIALOG_STYLE_LIST, "Choose a genre to browse stations in.", string, "Select", "Back");
		}
		case DIALOG_MP3RADIOSUBGENRES:
		{
		    for(new i = 0; i < sizeof(radioGenreList); i ++)
		    {
		        if(!strcmp(radioGenreList[i][rGenre], pData[playerid][pGenre]))
		        {
		            format(string, sizeof(string), "%s\n%s", string, radioGenreList[i][rSubgenre]);
		        }
			}

			ShowPlayerDialog(playerid, DIALOG_MP3RADIOSUBGENRES, DIALOG_STYLE_LIST, "Choose a subgenre to browse stations in.", string, "Select", "Back");
		}
		case DIALOG_MP3RADIOSEARCH:
		{
		    ShowPlayerDialog(playerid, DIALOG_MP3RADIOSEARCH, DIALOG_STYLE_INPUT, "Search by Name | "SERVER_NAME"", "Enter the full or partial name of the radio station:", "Submit", "Back");
		}

		case DIALOG_GCLOTHES:
		{
		    if(!GetGangSkinCount(pData[playerid][pGang]))
    		{
        		return SCM(playerid, COLOR_SYNTAX, "There are no skins setup for your gang.");
			}
			pData[playerid][pSkinSelected] = -1;
    		ShowPlayerDialog(playerid, DIALOG_GANGSKINS, DIALOG_STYLE_MSGBOX, "Skin selection", "Press "SVRCLR"Next{A9C4E4} to browse through available gang skins.", "Next", "Confirm");
		}

		case DIALOG_GANGSTASH:
		{
		    format(string, sizeof(string), "Gang Locker ($%i/$%i) (Materials: %i/%i)", GangInfo[pData[playerid][pGang]][gCash], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_CASH), GangInfo[pData[playerid][pGang]][gMaterials], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_MATERIALS));
		    ShowPlayerDialog(playerid, DIALOG_GANGSTASH, DIALOG_STYLE_LIST, string, "Weapons\nDrugs\nMaterials\nCash\nClothes", "Select", "Cancel");
		}
		case DIALOG_GANGSTASHWEAPONS1:
		{
		    format(string, sizeof(string), "[%i] Vest (R1+)\n[%i] 9mm (R1+)\n[%i] Sdpistol (R1+)\n[%i] Deagle (R4+)\n[%i] Shotgun (R1+)\n[%i] SPAS-12 (R4+)\n[%i] Sawn-off (R4+)\n[%i] Tec-9 (R3+)\n[%i] Micro Uzi (R3+)\n[%i] MP5 (R3+)\n[%i] AK-47 (R4+)\n[%i] M4 (R4+)\n[%i] Rifle (R2+)\n[%i] Sniper (R5+)\n[%i] Molotov (R5+)",
		        GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_VEST], GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_9MM], GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SDPISTOL], GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_DEAGLE], GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SHOTGUN], GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SPAS12], GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SAWNOFF], GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_TEC9],
				GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_UZI], GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_MP5], GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_AK47], GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_M4], GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_RIFLE], GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SNIPER], GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_MOLOTOV]);
		    ShowPlayerDialog(playerid, DIALOG_GANGSTASHWEAPONS1, DIALOG_STYLE_LIST, "Gang Locker | Weapons", string, "Select", "Back");
		}
		case DIALOG_GANGSTASHDRUGS1:
		{
		    format(string, sizeof(string), "Pot (%i/%ig)\nCrack (%i/%ig)\nMeth (%i/%ig)\nPainkillers (%i/%i)",
				GangInfo[pData[playerid][pGang]][gPot], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_WEED), GangInfo[pData[playerid][pGang]][gCrack], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_COCAINE), GangInfo[pData[playerid][pGang]][gMeth], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_METH), GangInfo[pData[playerid][pGang]][gPainkillers], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_PAINKILLERS));
		    ShowPlayerDialog(playerid, DIALOG_GANGSTASHDRUGS1, DIALOG_STYLE_LIST, "Gang Locker | Drugs", string, "Select", "Back");
		}
		case DIALOG_GANGSTASHDRUGS2:
		{
		    if(pData[playerid][pSelected] == ITEM_WEED) {
		        ShowPlayerDialog(playerid, DIALOG_GANGSTASHDRUGS2, DIALOG_STYLE_LIST, "Gang Locker | Pot", "Withdraw\nDeposit", "Select", "Back");
			} else if(pData[playerid][pSelected] == ITEM_COCAINE) {
			    ShowPlayerDialog(playerid, DIALOG_GANGSTASHDRUGS2, DIALOG_STYLE_LIST, "Gang Locker | Crack", "Withdraw\nDeposit", "Select", "Back");
			} else if(pData[playerid][pSelected] == ITEM_METH) {
		        ShowPlayerDialog(playerid, DIALOG_GANGSTASHDRUGS2, DIALOG_STYLE_LIST, "Gang Locker | Meth", "Withdraw\nDeposit", "Select", "Back");
			} else if(pData[playerid][pSelected] == ITEM_PAINKILLERS) {
			    ShowPlayerDialog(playerid, DIALOG_GANGSTASHDRUGS2, DIALOG_STYLE_LIST, "Gang Locker | Painkillers", "Withdraw\nDeposit", "Select", "Back");
			}
		}
		case DIALOG_GANGSTASHAMMO1:
		{
		    format(string, sizeof(string), "HP ammo (%i/%i)\nPoison ammo (%i/%i)\nFMJ ammo (%i/%i)", GangInfo[pData[playerid][pGang]][gHPAmmo], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_HPAMMO), GangInfo[pData[playerid][pGang]][gPoisonAmmo], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_POISONAMMO), GangInfo[pData[playerid][pGang]][gFMJAmmo], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_FMJAMMO));
		    ShowPlayerDialog(playerid, DIALOG_GANGSTASHAMMO1, DIALOG_STYLE_LIST, "Gang Locker | Ammo", string, "Select", "Back");
		}
		case DIALOG_GANGSTASHAMMO2:
		{
		    if(pData[playerid][pSelected] == ITEM_HPAMMO) {
		        ShowPlayerDialog(playerid, DIALOG_GANGSTASHAMMO2, DIALOG_STYLE_LIST, "Gang Locker | HP ammo", "Withdraw\nDeposit", "Select", "Back");
			} else if(pData[playerid][pSelected] == ITEM_POISONAMMO) {
		        ShowPlayerDialog(playerid, DIALOG_GANGSTASHAMMO2, DIALOG_STYLE_LIST, "Gang Locker | Poison ammo", "Withdraw\nDeposit", "Select", "Back");
			} else if(pData[playerid][pSelected] == ITEM_FMJAMMO) {
		        ShowPlayerDialog(playerid, DIALOG_GANGSTASHAMMO2, DIALOG_STYLE_LIST, "Gang Locker | FMJ ammo", "Withdraw\nDeposit", "Select", "Back");
			}
		}
		case DIALOG_GANGSTASHMATS:
		{
		    format(string, sizeof(string), "Withdraw (%i/%i)\nDeposit", GangInfo[pData[playerid][pGang]][gMaterials], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_MATERIALS));
			ShowPlayerDialog(playerid, DIALOG_GANGSTASHMATS, DIALOG_STYLE_LIST, "Gang Locker | Materials", string, "Select", "Back");
		}
		case DIALOG_GANGSTASHCASH:
		{
		    format(string, sizeof(string), "Withdraw ($%i/$%i)\nDeposit", GangInfo[pData[playerid][pGang]][gCash], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_CASH));
  			ShowPlayerDialog(playerid, DIALOG_GANGSTASHCASH, DIALOG_STYLE_LIST, "Gang Locker | Cash", string, "Select", "Back");
		}
		case DIALOG_GANGWITHDRAW:
		{
		    if(pData[playerid][pSelected] == ITEM_WEED) {
		        format(string, sizeof(string), "How much pot would you like to withdraw? (The safe contains %i/%i grams.)", GangInfo[pData[playerid][pGang]][gPot], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_WEED));
			} else if(pData[playerid][pSelected] == ITEM_COCAINE) {
			    format(string, sizeof(string), "How much Crack would you like to withdraw? (The safe contains %i/%i grams.)", GangInfo[pData[playerid][pGang]][gCrack], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_COCAINE));
			} else if(pData[playerid][pSelected] == ITEM_METH) {
		        format(string, sizeof(string), "How much meth would you like to withdraw? (The safe contains %i/%i grams.)", GangInfo[pData[playerid][pGang]][gMeth], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_METH));
			} else if(pData[playerid][pSelected] == ITEM_PAINKILLERS) {
			    format(string, sizeof(string), "How much painkillers would you like to withdraw? (The safe contains %i/%i.)", GangInfo[pData[playerid][pGang]][gPainkillers], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_PAINKILLERS));
			} else if(pData[playerid][pSelected] == ITEM_MATERIALS) {
		        format(string, sizeof(string), "How much materials would you like to withdraw? (The safe contains %i/%i.)", GangInfo[pData[playerid][pGang]][gMaterials], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_MATERIALS));
			} else if(pData[playerid][pSelected] == ITEM_CASH) {
			    format(string, sizeof(string), "How much cash would you like to withdraw? (The safe contains $%i/$%i.)", GangInfo[pData[playerid][pGang]][gCash], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_CASH));
			} else if(pData[playerid][pSelected] == ITEM_HPAMMO) {
		        format(string, sizeof(string), "How much HP ammo would you like to withdraw? (The safe contains %i/%i rounds.)", GangInfo[pData[playerid][pGang]][gHPAmmo], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_HPAMMO));
			} else if(pData[playerid][pSelected] == ITEM_POISONAMMO) {
		        format(string, sizeof(string), "How much poison ammo would you like to withdraw? (The safe contains %i/%i rounds.)", GangInfo[pData[playerid][pGang]][gPoisonAmmo], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_POISONAMMO));
			} else if(pData[playerid][pSelected] == ITEM_FMJAMMO) {
		        format(string, sizeof(string), "How much FMJ ammo would you like to withdraw? (The safe contains %i/%i rounds.)", GangInfo[pData[playerid][pGang]][gFMJAmmo], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_FMJAMMO));
			}

			ShowPlayerDialog(playerid, DIALOG_GANGWITHDRAW, DIALOG_STYLE_INPUT, "Gang Stash Withdraw | "SERVER_NAME"", string, "Submit", "Back");
		}
		case DIALOG_GANGDEPOSIT:
		{
		    if(pData[playerid][pSelected] == ITEM_WEED) {
		        format(string, sizeof(string), "How much pot would you like to deposit? (The safe contains %i/%i grams.)", GangInfo[pData[playerid][pGang]][gPot], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_WEED));
			} else if(pData[playerid][pSelected] == ITEM_COCAINE) {
			    format(string, sizeof(string), "How much Crack would you like to deposit? (The safe contains %i/%i grams.)", GangInfo[pData[playerid][pGang]][gCrack], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_COCAINE));
			} else if(pData[playerid][pSelected] == ITEM_METH) {
		        format(string, sizeof(string), "How much meth would you like to deposit? (The safe contains %i/%i grams.)", GangInfo[pData[playerid][pGang]][gMeth], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_METH));
			} else if(pData[playerid][pSelected] == ITEM_PAINKILLERS) {
			    format(string, sizeof(string), "How much painkillers would you like to deposit? (The safe contains %i/%i.)", GangInfo[pData[playerid][pGang]][gPainkillers], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_PAINKILLERS));
			} else if(pData[playerid][pSelected] == ITEM_MATERIALS) {
		        format(string, sizeof(string), "How much materials would you like to deposit? (The safe contains %i/%i.)", GangInfo[pData[playerid][pGang]][gMaterials], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_MATERIALS));
			} else if(pData[playerid][pSelected] == ITEM_CASH) {
			    format(string, sizeof(string), "How much cash would you like to deposit? (The safe contains $%i/$%i.)", GangInfo[pData[playerid][pGang]][gCash], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_CASH));
			} else if(pData[playerid][pSelected] == ITEM_HPAMMO) {
		        format(string, sizeof(string), "How much HP ammo would you like to deposit? (The safe contains %i/%i rounds.)", GangInfo[pData[playerid][pGang]][gHPAmmo], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_HPAMMO));
			} else if(pData[playerid][pSelected] == ITEM_POISONAMMO) {
		        format(string, sizeof(string), "How much poison ammo would you like to deposit? (The safe contains %i/%i rounds.)", GangInfo[pData[playerid][pGang]][gPoisonAmmo], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_POISONAMMO));
			} else if(pData[playerid][pSelected] == ITEM_FMJAMMO) {
		        format(string, sizeof(string), "How much FMJ ammo would you like to deposit? (The safe contains %i/%i rounds.)", GangInfo[pData[playerid][pGang]][gFMJAmmo], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_FMJAMMO));
			}

			ShowPlayerDialog(playerid, DIALOG_GANGDEPOSIT, DIALOG_STYLE_INPUT, "Gang Stash Deposit | "SERVER_NAME"", string, "Submit", "Back");
		}
		case DIALOG_GANGARMSPRICES:
		{
		    format(string, sizeof(string), "#\tWeapon\tPrice\tCost\n1\tMicro Uzi\t$%i\t500 materials\n2\tTec-9\t$%i\t500 materials\n3\tMP5\t$%i\t1000 materials\n4\tDesert Eagle\t$%i\t2000 materials\n5\tMolotov\t$%i\t5000 materials\n6\tAK-47\t$%i\t3000 materials\n7\tM4\t$%i\t4000 materials\n8\tSniper\t$%i\t6500 materials\n9\tSawnoff Shotgun\t$%i\t3000 materials\n10\tHollow Point Ammo\t$%i\t%i rounds\n11\tPoison Tip Ammo\t$%i\t%i rounds\n12\tFMJ Ammo\t$%i\t%i rounds",
		        GangInfo[pData[playerid][pGang]][gArmsPrices][0], GangInfo[pData[playerid][pGang]][gArmsPrices][1], GangInfo[pData[playerid][pGang]][gArmsPrices][2], GangInfo[pData[playerid][pGang]][gArmsPrices][3], GangInfo[pData[playerid][pGang]][gArmsPrices][4], GangInfo[pData[playerid][pGang]][gArmsPrices][5], GangInfo[pData[playerid][pGang]][gArmsPrices][6], GangInfo[pData[playerid][pGang]][gArmsPrices][7], GangInfo[pData[playerid][pGang]][gArmsPrices][8],
				GangInfo[pData[playerid][pGang]][gArmsPrices][9], GangInfo[pData[playerid][pGang]][gArmsHPAmmo], GangInfo[pData[playerid][pGang]][gArmsPrices][10], GangInfo[pData[playerid][pGang]][gArmsPoisonAmmo], GangInfo[pData[playerid][pGang]][gArmsPrices][11], GangInfo[pData[playerid][pGang]][gArmsFMJAmmo]);
			ShowPlayerDialog(playerid, DIALOG_GANGARMSPRICES, DIALOG_STYLE_TABLIST_HEADERS, "Choose a weapon price to edit.", string, "Change", "Back");
		}
		case DIALOG_GANGARMSDEALER:
		{
		    ShowPlayerDialog(playerid, DIALOG_GANGARMSDEALER, DIALOG_STYLE_LIST, "Arms dealer", "Buy Guns\nBuy Ammo\nEdit", "Select", "Cancel");
		}
		case DIALOG_GANGARMSWEAPONS:
		{
		    new
		        title[48];

		    format(title, sizeof(title), "Gang arms dealer (Materials available: %i.)", GangInfo[pData[playerid][pDealerGang]][gArmsMaterials]);

		    format(string, sizeof(string), "#\tWeapon\tPrice\tCost\n1\tMicro Uzi\t$%i\t500 materials\n2\tTec-9\t$%i\t500 materials\n3\tMP5\t$%i\t1000 materials\n4\tDesert Eagle\t$%i\t2000 materials\n5\tMolotov\t$%i\t5000 materials\n6\tAK-47\t$%i\t3000 materials\n7\tM4\t$%i\t4000 materials\n8\tSniper\t$%i\t6500 materials\n9\tSawnoff Shotgun\t$%i\t3000 materials",
		        GangInfo[pData[playerid][pDealerGang]][gArmsPrices][0], GangInfo[pData[playerid][pDealerGang]][gArmsPrices][1], GangInfo[pData[playerid][pDealerGang]][gArmsPrices][2], GangInfo[pData[playerid][pDealerGang]][gArmsPrices][3], GangInfo[pData[playerid][pDealerGang]][gArmsPrices][4], GangInfo[pData[playerid][pDealerGang]][gArmsPrices][5], GangInfo[pData[playerid][pDealerGang]][gArmsPrices][6], GangInfo[pData[playerid][pDealerGang]][gArmsPrices][7],
				GangInfo[pData[playerid][pDealerGang]][gArmsPrices][8]);
			ShowPlayerDialog(playerid, DIALOG_GANGARMSWEAPONS, DIALOG_STYLE_TABLIST_HEADERS, title, string, "Buy", "Back");
		}
		case DIALOG_GANGARMSAMMO:
		{
		    format(string, sizeof(string), "#\tType\tCost\tStock\n1\tHollow Point Ammo\t$%i\t%i rounds\n2\tPoison Tip Ammo\t$%i\t%i rounds\n3\tFMJ Ammo\t$%i\t%i rounds",
				GangInfo[pData[playerid][pDealerGang]][gArmsPrices][9], GangInfo[pData[playerid][pDealerGang]][gArmsHPAmmo], GangInfo[pData[playerid][pDealerGang]][gArmsPrices][10], GangInfo[pData[playerid][pDealerGang]][gArmsPoisonAmmo], GangInfo[pData[playerid][pDealerGang]][gArmsPrices][11], GangInfo[pData[playerid][pDealerGang]][gArmsFMJAmmo]);
			ShowPlayerDialog(playerid, DIALOG_GANGARMSAMMO, DIALOG_STYLE_TABLIST_HEADERS, "Arms dealer | Ammo", string, "Buy", "Back");
		}
		case DIALOG_GANGAMMOBUY:
		{
		    if(pData[playerid][pSelected] == 0) {
		        format(string, sizeof(string), "How much hollow point ammo would you like to buy? ($%i per round. %i rounds available.)", GangInfo[pData[playerid][pDealerGang]][gArmsPrices][9], GangInfo[pData[playerid][pDealerGang]][gArmsHPAmmo]);
			} else if(pData[playerid][pSelected] == 1) {
		        format(string, sizeof(string), "How much poison tip ammo would you like to buy? ($%i per round. %i rounds available.)", GangInfo[pData[playerid][pDealerGang]][gArmsPrices][10], GangInfo[pData[playerid][pDealerGang]][gArmsPoisonAmmo]);
			} else if(pData[playerid][pSelected] == 2) {
		        format(string, sizeof(string), "How much FMJ ammo would you like to buy? ($%i per round. %i rounds available.)", GangInfo[pData[playerid][pDealerGang]][gArmsPrices][11], GangInfo[pData[playerid][pDealerGang]][gArmsFMJAmmo]);
			}

		    ShowPlayerDialog(playerid, DIALOG_GANGAMMOBUY, DIALOG_STYLE_INPUT, "Arms Dealer | Buy Ammo", string, "Submit", "Back");
		}
		case DIALOG_GANGARMSEDIT:
		{
			format(string, sizeof(string), "Arms dealer (Materials available: %i.)", GangInfo[pData[playerid][pGang]][gArmsMaterials]);
			ShowPlayerDialog(playerid, DIALOG_GANGARMSEDIT, DIALOG_STYLE_LIST, string, "Edit prices\nDeposit mats\nWithdraw mats\nDeposit ammo\nWithdraw ammo", "Select", "Back");
		}
		case DIALOG_GANGARMSDEPOSITMATS:
		{
			format(string, sizeof(string), "How much materials would you like to deposit? (This arms dealer contains %i materials.)", GangInfo[pData[playerid][pGang]][gArmsMaterials]);
			ShowPlayerDialog(playerid, DIALOG_GANGARMSDEPOSITMATS, DIALOG_STYLE_INPUT, "Arms dealer | Deposit", string, "Submit", "Back");
		}
		case DIALOG_GANGARMSWITHDRAWMATS:
		{
			format(string, sizeof(string), "How much materials would you like to withdraw? (This arms dealer contains %i materials.)", GangInfo[pData[playerid][pGang]][gArmsMaterials]);
			ShowPlayerDialog(playerid, DIALOG_GANGARMSWITHDRAWMATS, DIALOG_STYLE_INPUT, "Arms dealer | Withdraw", string, "Submit", "Back");
		}
		case DIALOG_GANGAMMODEPOSITS:
		{
		    format(string, sizeof(string), "Hollow point (%i)\nPoison tip (%i)\nFMJ ammo (%i)", GangInfo[pData[playerid][pGang]][gArmsHPAmmo], GangInfo[pData[playerid][pGang]][gArmsPoisonAmmo], GangInfo[pData[playerid][pGang]][gArmsFMJAmmo]);
		    ShowPlayerDialog(playerid, DIALOG_GANGAMMODEPOSITS, DIALOG_STYLE_LIST, "Arms dealer | Deposit ammo", string, "Select", "Back");
		}
		case DIALOG_GANGAMMODEPOSIT:
		{
		    if(pData[playerid][pSelected] == 0) {
		        format(string, sizeof(string), "How much hollow point ammo would you like to deposit? (This arms dealer contains %i rounds.)", GangInfo[pData[playerid][pGang]][gArmsHPAmmo]);
		    } else if(pData[playerid][pSelected] == 1) {
		        format(string, sizeof(string), "How much poison tip ammo would you like to deposit? (This arms dealer contains %i rounds.)", GangInfo[pData[playerid][pGang]][gArmsPoisonAmmo]);
			} else if(pData[playerid][pSelected] == 2) {
		        format(string, sizeof(string), "How much FMJ ammo would you like to deposit? (This arms dealer contains %i rounds.)", GangInfo[pData[playerid][pGang]][gArmsFMJAmmo]);
			}

			ShowPlayerDialog(playerid, DIALOG_GANGAMMODEPOSIT, DIALOG_STYLE_INPUT, "Arms dealer | Deposit ammo", string, "Submit", "Back");
		}
		case DIALOG_GANGAMMOWITHDRAWS:
		{
		    format(string, sizeof(string), "Hollow point (%i)\nPoison tip (%i)\nFMJ ammo (%i)", GangInfo[pData[playerid][pGang]][gArmsHPAmmo], GangInfo[pData[playerid][pGang]][gArmsPoisonAmmo], GangInfo[pData[playerid][pGang]][gArmsFMJAmmo]);
		    ShowPlayerDialog(playerid, DIALOG_GANGAMMOWITHDRAWS, DIALOG_STYLE_LIST, "Arms dealer | Withdraw ammo", string, "Select", "Back");
		}
        case DIALOG_GANGAMMOWITHDRAW:
		{
			if(pData[playerid][pSelected] == 0) {
		        format(string, sizeof(string), "How much hollow point ammo would you like to withdraw? (This arms dealer contains %i rounds.)", GangInfo[pData[playerid][pGang]][gArmsHPAmmo]);
   			} else if(pData[playerid][pSelected] == 1) {
		        format(string, sizeof(string), "How much poison tip ammo would you like to withdraw? (This arms dealer contains %i rounds.)", GangInfo[pData[playerid][pGang]][gArmsPoisonAmmo]);
			} else if(pData[playerid][pSelected] == 2) {
		        format(string, sizeof(string), "How much FMJ ammo would you like to withdraw? (This arms dealer contains %i rounds.)", GangInfo[pData[playerid][pGang]][gArmsFMJAmmo]);
			}

			ShowPlayerDialog(playerid, DIALOG_GANGAMMOWITHDRAW, DIALOG_STYLE_INPUT, "Arms dealer | Withdraw", string, "Submit", "Back");
		}
		case DIALOG_GANGDRUGDEALER:
		{
		    ShowPlayerDialog(playerid, DIALOG_GANGDRUGDEALER, DIALOG_STYLE_LIST, "Drug dealer", "Buy Drugs\nEdit", "Select", "Cancel");
		}
		case DIALOG_GANGDRUGSHOP:
		{
		    format(string, sizeof(string), "Drug\tPrice\tStock\nPot\t$%i\t%i grams\nCrack\t$%i\t%i grams\nMeth\t$%i\t%i grams", GangInfo[pData[playerid][pDealerGang]][gDrugPrices][0], GangInfo[pData[playerid][pDealerGang]][gDrugPot], GangInfo[pData[playerid][pDealerGang]][gDrugPrices][1], GangInfo[pData[playerid][pDealerGang]][gDrugCrack], GangInfo[pData[playerid][pDealerGang]][gDrugPrices][2], GangInfo[pData[playerid][pDealerGang]][gDrugMeth]);
			ShowPlayerDialog(playerid, DIALOG_GANGDRUGSHOP, DIALOG_STYLE_TABLIST_HEADERS, "Drug dealer", string, "Buy", "Back");
		}
		case DIALOG_GANGDRUGBUY:
		{
		    if(pData[playerid][pSelected] == 0) {
		        format(string, sizeof(string), "How much pot would you like to buy? ($%i per gram. %i grams available.)", GangInfo[pData[playerid][pDealerGang]][gDrugPrices][0], GangInfo[pData[playerid][pDealerGang]][gDrugPot]);
			} else if(pData[playerid][pSelected] == 1) {
		        format(string, sizeof(string), "How much Crack would you like to buy? ($%i per gram. %i grams available.)", GangInfo[pData[playerid][pDealerGang]][gDrugPrices][1], GangInfo[pData[playerid][pDealerGang]][gDrugCrack]);
			} else if(pData[playerid][pSelected] == 2) {
		        format(string, sizeof(string), "How much meth would you like to buy? ($%i per gram. %i grams available.)", GangInfo[pData[playerid][pDealerGang]][gDrugPrices][2], GangInfo[pData[playerid][pDealerGang]][gDrugMeth]);
			}

		    ShowPlayerDialog(playerid, DIALOG_GANGDRUGBUY, DIALOG_STYLE_INPUT, "Drug dealer | Buy", string, "Submit", "Back");
		}
		case DIALOG_GANGDRUGEDIT:
		{
			format(string, sizeof(string), "Drug dealer (Pot: %i) (Crack: %i) (Meth: %i)", GangInfo[pData[playerid][pGang]][gDrugPot], GangInfo[pData[playerid][pGang]][gDrugCrack], GangInfo[pData[playerid][pGang]][gDrugMeth]);
			ShowPlayerDialog(playerid, DIALOG_GANGDRUGEDIT, DIALOG_STYLE_LIST, string, "Edit prices\nDeposit drugs\nWithdraw drugs", "Select", "Back");
		}
		case DIALOG_GANGDRUGPRICES:
		{
		    format(string, sizeof(string), "Drug\tPrice\tStock\nPot\t$%i\t%i grams\nCrack\t$%i\t%i grams\nMeth\t$%i\t%i grams", GangInfo[pData[playerid][pGang]][gDrugPrices][0], GangInfo[pData[playerid][pGang]][gDrugPot], GangInfo[pData[playerid][pGang]][gDrugPrices][1], GangInfo[pData[playerid][pGang]][gDrugCrack], GangInfo[pData[playerid][pGang]][gDrugPrices][2], GangInfo[pData[playerid][pGang]][gDrugMeth]);
			ShowPlayerDialog(playerid, DIALOG_GANGDRUGPRICES, DIALOG_STYLE_TABLIST_HEADERS, "Choose a drug price to edit.", string, "Change", "Back");
		}
		case DIALOG_GANGDRUGDEPOSITS:
		{
		    format(string, sizeof(string), "Pot (%ig)\nCrack (%ig)\nMeth (%ig)", GangInfo[pData[playerid][pGang]][gDrugPot], GangInfo[pData[playerid][pGang]][gDrugCrack], GangInfo[pData[playerid][pGang]][gDrugMeth]);
		    ShowPlayerDialog(playerid, DIALOG_GANGDRUGDEPOSITS, DIALOG_STYLE_LIST, "Drug dealer | Deposit", string, "Select", "Back");
		}
		case DIALOG_GANGDRUGDEPOSIT:
		{
		    if(pData[playerid][pSelected] == 0) {
		        format(string, sizeof(string), "How much pot would you like to deposit? (This drug dealer contains %i grams.)", GangInfo[pData[playerid][pGang]][gDrugPot]);
		    } else if(pData[playerid][pSelected] == 1) {
		        format(string, sizeof(string), "How much Crack would you like to deposit? (This drug dealer contains %i grams.)", GangInfo[pData[playerid][pGang]][gDrugCrack]);
			} else if(pData[playerid][pSelected] == 2) {
		        format(string, sizeof(string), "How much meth would you like to deposit? (This drug dealer contains %i grams.)", GangInfo[pData[playerid][pGang]][gDrugMeth]);
			}

			ShowPlayerDialog(playerid, DIALOG_GANGDRUGDEPOSIT, DIALOG_STYLE_INPUT, "Drug dealer | Deposit", string, "Submit", "Back");
		}
		case DIALOG_GANGDRUGWITHDRAWS:
		{
		    format(string, sizeof(string), "Pot (%ig)\nCrack (%ig)\nMeth (%ig)", GangInfo[pData[playerid][pGang]][gDrugPot], GangInfo[pData[playerid][pGang]][gDrugCrack], GangInfo[pData[playerid][pGang]][gDrugMeth]);
		    ShowPlayerDialog(playerid, DIALOG_GANGDRUGWITHDRAWS, DIALOG_STYLE_LIST, "Drug dealer | Withdraw", string, "Select", "Back");
		}
        case DIALOG_GANGDRUGWITHDRAW:
		{
		    if(pData[playerid][pSelected] == 0) {
		        format(string, sizeof(string), "How much pot would you like to withdraw? (This drug dealer contains %i grams.)", GangInfo[pData[playerid][pGang]][gDrugPot]);
		    } else if(pData[playerid][pSelected] == 1) {
		        format(string, sizeof(string), "How much Crack would you like to withdraw? (This drug dealer contains %i grams.)", GangInfo[pData[playerid][pGang]][gDrugCrack]);
			} else if(pData[playerid][pSelected] == 2) {
		        format(string, sizeof(string), "How much meth would you like to withdraw? (This drug dealer contains %i grams.)", GangInfo[pData[playerid][pGang]][gDrugMeth]);
			}

			ShowPlayerDialog(playerid, DIALOG_GANGDRUGWITHDRAW, DIALOG_STYLE_INPUT, "Drug dealer | Withdraw", string, "Submit", "Back");
		}
		/*case DIALOG_FACTIONEQUIPMENT:
		{
			new lockerid = GetNearbyLocker(playerid);
	 		string = "Weapon\tPrice\n";
            if(LockerInfo[lockerid][locKevlar][0]) { format(string, sizeof(string), "%sKevlar Vest\t$%i\n", string, LockerInfo[lockerid][locKevlar][1]); }
            if(LockerInfo[lockerid][locMedKit][0]) { format(string, sizeof(string), "%sMedkit\t$%i\n", string, LockerInfo[lockerid][locMedKit][1]); }
            if(LockerInfo[lockerid][locNitestick][0]) { format(string, sizeof(string), "%sNitestick\t$%i\n", string, LockerInfo[lockerid][locNitestick][1]); }
            if(LockerInfo[lockerid][locMace][0]) { format(string, sizeof(string), "%sMace\t$%i\n", string, LockerInfo[lockerid][locMace][1]); }
            if(LockerInfo[lockerid][locDeagle][0]) { format(string, sizeof(string), "%sDeagle\t$%i\n", string, LockerInfo[lockerid][locDeagle][1]); }
            if(LockerInfo[lockerid][locShotgun][0]) { format(string, sizeof(string), "%sShotgun\t$%i\n", string, LockerInfo[lockerid][locShotgun][1]); }
            if(LockerInfo[lockerid][locMP5][0]) { format(string, sizeof(string), "%sMP5\t$%i\n", string, LockerInfo[lockerid][locMP5][1]); }
            if(LockerInfo[lockerid][locM4][0]) { format(string, sizeof(string), "%sM4\t$%i\n", string, LockerInfo[lockerid][locM4][1]); }
            if(LockerInfo[lockerid][locSpas12][0]) { format(string, sizeof(string), "%sSPAS-12\t$%i\n", string, LockerInfo[lockerid][locSpas12][1]); }
            if(LockerInfo[lockerid][locSniper][0]) { format(string, sizeof(string), "%sSniper\t$%i\n", string, LockerInfo[lockerid][locSniper][1]); }
            if(LockerInfo[lockerid][locCamera][0]) { format(string, sizeof(string), "%sCamera\t$%i\n", string, LockerInfo[lockerid][locCamera][1]); }
            if(LockerInfo[lockerid][locFireExt][0]) { format(string, sizeof(string), "%sFire Extinguisher\t$%i\n", string, LockerInfo[lockerid][locFireExt][1]); }
            if(LockerInfo[lockerid][locPainKillers][0]) { format(string, sizeof(string), "%sPainkillers\t$%i\n", string, LockerInfo[lockerid][locPainKillers][1]); }
			ShowPlayerDialog(playerid, DIALOG_FACTIONEQUIPMENT, DIALOG_STYLE_TABLIST_HEADERS, "Locker", string, "Select", "Cancel");
		}*/
		case DIALOG_LOCATE:
		{
		    ShowPlayerDialog(playerid, DIALOG_LOCATE, DIALOG_STYLE_LIST, "List of Destination", "Job Locations\nNearest Businesses\nGeneral Locations\nPoints", "Select", "Close");
		}
		case DIALOG_INV: {
			new package[12];
			switch(pData[playerid][pSmuggleDrugs])
			{
				case 0: package = "None";
				case 1: package = "Seeds";
				case 2: package = "Crack";
				case 3: package = "Ephedrine";
			}
			format(string, sizeof(string), "Cigars\t%i\n\
				Spraycans\t%i/20\n\
				Bombs\t%i/3\n\
				Gasoline\t%i/20L\n\
				Portable Radio\t%s\n\
				Mobile Phone\t%s\n\
				Drug Package\t%s\n\
				Rope\t%i/10\n\
				Watch\t%s\n\
				GPS\t%s\n\
				Dirty Money\t%i\n\
				Back",
				pData[playerid][pCigars],
				pData[playerid][pSpraycans],
				pData[playerid][pBombs],
				pData[playerid][pGasCan],
				(pData[playerid][pWalkieTalkie]) ? (""GREEN"Have") : (""RED"None"),
				(pData[playerid][pPhone]) ? (""GREEN"Have") : (""RED"None"),
				package,
				pData[playerid][pRope],
				(pData[playerid][pWatch]) ? (""GREEN"Have") : (""RED"None"),
				(pData[playerid][pGPS]) ? (""GREEN"Have") : (""RED"None"),
				FormatNumber(pData[playerid][pDirtyCash]));
			ShowPlayerDialog(playerid, 0, DIALOG_STYLE_TABLIST, "Inventory (Page 2)", string, "Okay", "");
		}
		/*case DIALOG_HELP:
		{
		    ShowPlayerDialog(playerid, DIALOG_HELP, DIALOG_STYLE_LIST, "List of Commands", "Chat\nGeneral\nUpgrades\nOther", "Select", "Close");
		}*/
		case DIALOG_TOP: {
			ShowPlayerDialog(playerid, DIALOG_TOP, DIALOG_STYLE_TABLIST, SERVER_DIALOG, "Top 20 Most Highest Crimes.\nTop 20 Most Highest Cash.\nTop 20 Highest Hours\nTop Gang's Claim", "Select", "Close");
		}
		case DIALOG_TWEET:
		{
	    	ShowPlayerDialog(playerid, DIALOG_TWEET, DIALOG_STYLE_INPUT, "Tweet", "What's on your mind?", "Post", "Back");
		}
		case DIALOG_CREATEQUIZ:
		{
		    if(CreateQuiz == -1)
		    {
		        CreateQuiz = 0;
		    	ShowPlayerDialog(playerid, DIALOG_CREATEQUIZ, DIALOG_STYLE_INPUT, "Create A Quiz - Enter Question", "What should the question be? (displayed globally)", "Submit", "Back");
			}
			if(CreateQuiz == 1)
			{
			    ShowPlayerDialog(playerid, DIALOG_CREATEQUIZ, DIALOG_STYLE_INPUT, "Create A Quiz - Enter Answer", "What should the answer be? (displayed once answered)", "Submit", "Back");
			}
		}
	}
	return 1;
}
SetPlayerToSpawn(playerid)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
	{
	    //if(pData[playerid][pTutorial]) SetSpawnInfo(playerid, NO_TEAM, pData[playerid][pSkin], 7.1234, 1226.2716, 895.8371,328.7138, 0, 0, 0, 0, 0, 0);
		// Check niyo [pFirstSpawn] kung gusto niyo palitan ang spawn point ng mga new players.
		SetSpawnInfo(playerid, NO_TEAM, pData[playerid][pSkin], -226.2883,1394.4431,172.4141,198.9879, 0, 0, 0, 0, 0, 0);
		TogglePlayerSpectating(playerid, 0);
	}
	else
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        new
	            Float:x,
	            Float:y,
	            Float:z;
			GetPlayerPos(playerid, x, y, z);
			SetPlayerPos(playerid, x, y, z + 5.0);
	    }

	    SpawnPlayer(playerid);
	}
	pData[playerid][pACTime] = gettime() + 2;
}
/*SetPlayerToSpawn(playerid)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
	{
		if(pData[playerid][pPosX] == 0.0 && pData[playerid][pPosY] == 0.0 && pData[playerid][pPosZ] == 0.0)
		{
            SetSpawnInfo(playerid, 0, pData[playerid][pSkin], 1529.6, -1691.2, 13.3, 1.0, -1, -1, -1, -1, -1, -1);
		}
		else
		{
			SetSpawnInfo(playerid, 0, pData[playerid][pSkin], pData[playerid][pPosX],pData[playerid][pPosY],pData[playerid][pPosZ], 1.0, -1, -1, -1, -1, -1, -1);
		}

		TogglePlayerSpectating(playerid, 0);
	}
	else
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        new
	            Float:x,
	            Float:y,
	            Float:z;
			GetPlayerPos(playerid, x, y, z);
			SetPlayerPos(playerid, x, y, z + 5.0);
	    }
	    SpawnPlayer(playerid);
	}
	pData[playerid][pACTime] = gettime() + 2;
}*/

SetPlayerToFacePlayer(playerid, targetid)
{
	new
	    Float:px,
	    Float:py,
	    Float:pz,
	    Float:tx,
	    Float:ty,
	    Float:tz;

	GetPlayerPos(targetid, tx, ty, tz);
	GetPlayerPos(playerid, px, py, pz);
	SetPlayerFacingAngle(playerid, 180.0 - atan2(px - tx, py - ty));
}

SavePlayerWeapons(playerid)
{
	if(pData[playerid][pLogged] && !pData[playerid][pJoinedEvent] && !pData[playerid][pPaintball] && !pData[playerid][pPaintball2] && pData[playerid][pDueling] == INVALID_PLAYER_ID)
	{
		// Saving weapons.
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET weapon_0 = %i, weapon_1 = %i, weapon_2 = %i, weapon_3 = %i, weapon_4 = %i, weapon_5 = %i, weapon_6 = %i, weapon_7 = %i, weapon_8 = %i, weapon_9 = %i, weapon_10 = %i, weapon_11 = %i, weapon_12 = %i WHERE uid = %i",
	        pData[playerid][pWeapons][0], pData[playerid][pWeapons][1], pData[playerid][pWeapons][2], pData[playerid][pWeapons][3], pData[playerid][pWeapons][4], pData[playerid][pWeapons][5], pData[playerid][pWeapons][6], pData[playerid][pWeapons][7], pData[playerid][pWeapons][8], pData[playerid][pWeapons][9], pData[playerid][pWeapons][10], pData[playerid][pWeapons][11], pData[playerid][pWeapons][12], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		// And finally the ammo.
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET hpammo = %i, poisonammo = %i, fmjammo = %i, ammotype = %i, ammoweapon = %i WHERE uid = %i",
		   pData[playerid][pHPAmmo], pData[playerid][pPoisonAmmo], pData[playerid][pFMJAmmo], pData[playerid][pAmmoType], pData[playerid][pAmmoWeapon], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
}

ResetBackpack(playerid)
{
	if(pData[playerid][pLogged] && !pData[playerid][pAdminDuty])
	{
		pData[playerid][pBackpack] = 0;
		pData[playerid][bpCash] = 0;
		pData[playerid][bpMaterials] = 0;
		pData[playerid][bpPot] = 0;
		pData[playerid][bpCrack] = 0;
		pData[playerid][bpMeth] = 0;
		pData[playerid][bpPainkillers] = 0;
		pData[playerid][bpWeapons][0] = 0;
		pData[playerid][bpWeapons][1] = 0;
		pData[playerid][bpWeapons][2] = 0;
		pData[playerid][bpWeapons][3] = 0;
		pData[playerid][bpWeapons][4] = 0;
		pData[playerid][bpWeapons][5] = 0;
		pData[playerid][bpWeapons][6] = 0;
		pData[playerid][bpWeapons][7] = 0;
		pData[playerid][bpWeapons][8] = 0;
		pData[playerid][bpWeapons][9] = 0;
		pData[playerid][bpWeapons][10] = 0;
		pData[playerid][bpWeapons][11] = 0;
		pData[playerid][bpWeapons][13] = 0;
		pData[playerid][bpWeapons][14] = 0;
		pData[playerid][bpHPAmmo] = 0;
		pData[playerid][bpPoisonAmmo] = 0;
		pData[playerid][bpFMJAmmo] = 0;
	}
	SavePlayerVariables(playerid);
}

forward SavePlayerVariables(playerid);
public SavePlayerVariables(playerid)
{
	if(pData[playerid][pLogged] && !pData[playerid][pAdminDuty])
	{
	    if(GetPlayerState(playerid) != PLAYER_STATE_SPECTATING && !pData[playerid][pPaintball] && !pData[playerid][pPaintball2] && 	!IsPlayerInRangeOfPoint(playerid, 2.0, 0.0, 0.0, 0.0) && !pData[playerid][pJoinedEvent] && !pData[playerid][pAcceptedHelp] && pData[playerid][pDueling] == INVALID_PLAYER_ID)
		{
		    SavePlayerWeapons(playerid);

            GetPlayerCameraPos(playerid, pData[playerid][pCameraX], pData[playerid][pCameraY], pData[playerid][pCameraZ]);
			GetPlayerPos(playerid, pData[playerid][pPosX], pData[playerid][pPosY], pData[playerid][pPosZ]);
	        GetPlayerFacingAngle(playerid, pData[playerid][pPosA]);

	        GetPlayerHealth(playerid, pData[playerid][pHealth]);
	        GetPlayerArmour(playerid, pData[playerid][pArmor]);

	        pData[playerid][pInterior] = GetPlayerInterior(playerid);
	        pData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET jailbreak = %i WHERE uid = %i", pData[playerid][pJailBreak], pData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET camera_x = '%f', camera_y = '%f', camera_z = '%f', pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', interior = %i, world = %i, health = '%f', armor = '%f', minutes = %i, warnings = %i, injured = %i, hospital = %i, spawnhealth = '%f', spawnarmor = '%f', jailtype = %i, jailtime = %i, bedtype = %i, bedtime = %i WHERE uid = %i", pData[playerid][pCameraX], pData[playerid][pCameraY],
			pData[playerid][pCameraZ], pData[playerid][pPosX], pData[playerid][pPosY], pData[playerid][pPosZ], pData[playerid][pPosA], pData[playerid][pInterior], pData[playerid][pWorld], pData[playerid][pHealth], pData[playerid][pArmor], pData[playerid][pMinutes], pData[playerid][pWarnings], pData[playerid][pInjured], pData[playerid][pHospital], pData[playerid][pSpawnHealth],
			pData[playerid][pSpawnArmor], pData[playerid][pJailType], pData[playerid][pJailTime], pData[playerid][pBedType], pData[playerid][pBedTime], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		//Claim time - Stewart
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET claimtime = %i WHERE uid = %i", pData[playerid][pClaimTime], pData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET newbiemuted = %i, helpmuted = %i, admuted = %i, livemuted = %i, globalmuted = %i, reportmuted = %i, reportwarns = %i, fightstyle = %i, dirtycash = %i, toggleooc = %i, togglephone = %i, toggleadmin = %i, togglehelper = %i, togglenewbie = %i, togglewt = %i, togglevip = %i, backpack = %i, flashlight = %i, chatanim = %i WHERE uid = %i", pData[playerid][pNewbieMuted], pData[playerid][pHelpMuted], pData[playerid][pAdMuted],
			pData[playerid][pLiveMuted], pData[playerid][pGlobalMuted], pData[playerid][pReportMuted], pData[playerid][pReportWarns], pData[playerid][pFightStyle], pData[playerid][pDirtyCash], pData[playerid][pToggleOOC], pData[playerid][pTogglePhone], pData[playerid][pToggleAdmin], pData[playerid][pToggleHelper], pData[playerid][pToggleNewbie], pData[playerid][pToggleWT],
			pData[playerid][pToggleVIP], pData[playerid][pBackpack], pData[playerid][pFlashlight], pData[playerid][pChatAnim], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET toggleradio = %i, togglemusic = %i, togglefaction = %i, togglenews = %i, toggleglobal = %i, togglecam = %i, togglehud = %i, pottime = %i, potgrams = %i, showturfs = %i, showlands = %i, watchon = %i, gpson = %i, pizzacooldown = %i, deathcooldown = %i, detectivecooldown = %i, duty = %i, bandana = %i WHERE uid = %i", pData[playerid][pToggleRadio], pData[playerid][pToggleMusic],
			pData[playerid][pToggleFaction], pData[playerid][pToggleNews], pData[playerid][pToggleGlobal], pData[playerid][pToggleCam], pData[playerid][pToggleHUD], pData[playerid][pPotTime], pData[playerid][pPotGrams], pData[playerid][pShowTurfs], pData[playerid][pShowLands], pData[playerid][pWatchOn], pData[playerid][pGPSOn], pData[playerid][pPizzaCooldown], pData[playerid][pDeathCooldown],
			pData[playerid][pDetectiveCooldown], pData[playerid][pDuty], pData[playerid][pBandana], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		// Backpack Info
  		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bpcash = %i, bpmaterials = %i, bppot = %i, bpcrack = %i, bpmeth = %i, bppainkillers = %i, bphpammo = %i, bppoisonammo = %i, bpfmjammo = %i, totalpatients = %i, totalfires = %i, rarecooldown = %i WHERE uid = %i", pData[playerid][bpCash], pData[playerid][bpMaterials], pData[playerid][bpPot], pData[playerid][bpCrack], pData[playerid][bpMeth],
			pData[playerid][bpPainkillers], pData[playerid][bpHPAmmo], pData[playerid][bpPoisonAmmo], pData[playerid][bpFMJAmmo], pData[playerid][pTotalPatients], pData[playerid][pTotalFires], pData[playerid][pRareTime], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		// Backpack Weapons
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bpweapon_0 = %i, bpweapon_1 = %i, bpweapon_2 = %i, bpweapon_3 = %i, bpweapon_4 = %i, bpweapon_5 = %i, bpweapon_6 = %i, bpweapon_7 = %i, bpweapon_8 = %i, bpweapon_9 = %i, bpweapon_10 = %i, bpweapon_11 = %i, bpweapon_12 = %i, bpweapon_13 = %i, bpweapon_14 = %i WHERE uid = %i", pData[playerid][bpWeapons][0], pData[playerid][bpWeapons][1], pData[playerid][bpWeapons][2], pData[playerid][bpWeapons][3],
			pData[playerid][bpWeapons][4], pData[playerid][bpWeapons][5], pData[playerid][bpWeapons][6], pData[playerid][bpWeapons][7], pData[playerid][bpWeapons][8], pData[playerid][bpWeapons][9], pData[playerid][bpWeapons][10], pData[playerid][bpWeapons][11], pData[playerid][bpWeapons][12], pData[playerid][bpWeapons][13], pData[playerid][bpWeapons][14], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET hunger = %i, hungertimer = %i, thirst = %i, thirsttimer = %i  WHERE uid = %i", pData[playerid][pHunger], pData[playerid][pHungerTimer], pData[playerid][pThirst], pData[playerid][pThirstTimer],pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET seconds = %i WHERE uid = %i", pData[playerid][pSeconds], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		// CCRP	 v2
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET brokenleg = %d, amcount = %d, chatstyle = %i, vest = %i, lottery = %d, mask = %d, refunded = %i	 where uid = %d", pData[playerid][pBrokenLeg], pData[playerid][pAMCount], pData[playerid][pChatstyle], pData[playerid][pVest], pData[playerid][pLottery], pData[playerid][pMask], pData[playerid][pRefunded], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		//Monthsary
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET monthsary = '%i' WHERE uid = %i", pData[playerid][pMonthsary], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		
		//Binds
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bind1 = '%e' WHERE uid = %i", pData[playerid][pBind], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bind2 = '%s' WHERE uid = %i", pData[playerid][pBind2], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bind3 = '%s' WHERE uid = %i", pData[playerid][pBind3], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bind4 = '%s' WHERE uid = %i", pData[playerid][pBind4], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bind5 = '%s' WHERE uid = %i", pData[playerid][pBind5], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		/*#if defined Christmas
	#else
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET candy = %i WHERE uid = %i", pData[playerid][pCandy], pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		#endif*/
	}
}

SendPaycheck(playerid)
{
	new super[268], str[3000], titlestring[250], name[24];
	/*if(pData[playerid][pPaycheck] <= 0)
	{
	    pData[playerid][pPaycheck] = min(pData[playerid][pLevel], 21) * 100; // Temporary
	}*/

    new paycheck = pData[playerid][pPaycheck];
    new interest, rate;
    new tax = (paycheck / 200) * gTax; // 8% tax
    new rent = 0, renting = -1; // temp
    new total = paycheck - tax;

	switch(pData[playerid][pDonator])
	{
	    case 0: rate = 1;
	    case 1: rate = 1;
	    case 2: rate = 1;
	    case 3: rate = 1;
	}

	interest = (pData[playerid][pBank] / 500) * rate;

	total += interest;

 	if(pData[playerid][pRentingHouse])
	{
		for(new i = 0; i < MAX_HOUSES; i ++)
		{
		    if(HouseInfo[i][hExists] && HouseInfo[i][hID] == pData[playerid][pRentingHouse] && HouseInfo[i][hRentPrice] > 0)
		    {
		        rent = HouseInfo[i][hRentPrice];
		        renting = i;
			}
		}
	}
 	SCM(playerid, COLOR_WHITE, "========[ PAYDAY ]========");
	SM(playerid, COLOR_GREY2, "Job Pay: +$%i", paycheck);

	if(pData[playerid][pFaction] >= 0 && FactionInfo[pData[playerid][pFaction]][fPaycheck][pData[playerid][pFactionRank]] > 0)
	{
	    SM(playerid, COLOR_GREY2, "Faction Pay: {33CC33}+$%i", FactionInfo[pData[playerid][pFaction]][fPaycheck][pData[playerid][pFactionRank]]);
	    total += FactionInfo[pData[playerid][pFaction]][fPaycheck][pData[playerid][pFactionRank]];
	}

	SM(playerid, COLOR_GREY2, "Interest: {33CC33}+$%i{C8C8C8} (Rate: "WHITE"%.1f)", interest, floatdiv(float(rate), 10));
	SM(playerid, COLOR_GREY2, "Income Tax: "SVRCLR"-$%i{C8C8C8} (%i Percent)", tax, gTax);

	if(renting != -1)
	{
		if(total >= rent || pData[playerid][pBank] >= rent)
		{
		    if(total >= rent)
	    	{
	        	total -= rent;
			}
			else
			{
		    	pData[playerid][pBank] -= rent;
			}

			SM(playerid, COLOR_GREY2, "Rent Paid: "SVRCLR"-$%i", rent);
			HouseInfo[renting][hCash] += rent;

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET cash = %i WHERE id = %i", HouseInfo[renting][hCash], HouseInfo[renting][hID]);
			mysql_tquery(connectionID, queryBuffer);
		}
		else
		{
		    rent = -1;
		}
	}
	if((gDoubleXP) || pData[playerid][pDoubleXP] > 0) {
		SM(playerid, COLOR_GREY2, "Old Balance: $%i | New Balance: $%i", pData[playerid][pBank], (pData[playerid][pBank] + total) * 2);
	} else {
		SM(playerid, COLOR_GREY2, "Old Balance: $%i | New Balance: $%i", pData[playerid][pBank], pData[playerid][pBank] + total);
	}
	SCM(playerid, COLOR_WHITE, "==========================");
//	SM(playerid, COLOR_AQUA, "You have played %i/25 minutes this hour and earned your paycheck.", pData[playerid][pMinutes]);
	//Dyuze(playerid, "Payday", "Added to bank account.");
	SCM(playerid, COLOR_SYNTAX, "Added to bank account.");
	if(rent == -1)
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rentinghouse = 0 WHERE uid = %i", pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		pData[playerid][pRentingHouse] = 0;
	    SCM(playerid, COLOR_RED, "You couldn't afford to pay rent and were evicted as a result.");
	}
	
	//Dialog Send Paycheck
	format(super, sizeof(super), "%s [%s]", name, GetDate());
	strcat(titlestring, super);

	format(super, sizeof(super), "");
	strcat(str, super);

	AddToTaxVault(tax);

	if((gDoubleXP) || pData[playerid][pDoubleXP] > 0) {
		pData[playerid][pEXP] += 2;
		pData[playerid][pBank] += total * 2;
	} else {
	    pData[playerid][pEXP]++;
	    pData[playerid][pBank] += total;
	}
	if(pData[playerid][pGang] >= 0)
	{
	    GiveGangPoints(pData[playerid][pGang], 1);
	}

    pData[playerid][pHours]++;
    pData[playerid][pMinutes] = 0;
    pData[playerid][pPaycheck] = 0;

	if(pData[playerid][pWeaponRestricted] > 0)
	{
		pData[playerid][pWeaponRestricted]--;
	}
	if((!gDoubleXP) && pData[playerid][pDoubleXP] > 0)
	{
	    pData[playerid][pDoubleXP]--;

	    if(pData[playerid][pDoubleXP] > 0)
	        SM(playerid, COLOR_YELLOW, "Your double XP token expires in %i more hours.", pData[playerid][pDoubleXP]);
		else
		    SCM(playerid, COLOR_YELLOW, "Your double XP token has expired.");
	}

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET minutes = 0, hours = hours + 1, exp = %i, bank = %i, paycheck = 0, weaponrestricted = %i, doublexp = %i WHERE uid = %i", pData[playerid][pEXP], pData[playerid][pBank], pData[playerid][pWeaponRestricted], pData[playerid][pDoubleXP], pData[playerid][pID]);
    mysql_tquery(connectionID, queryBuffer);

    gTotalHours++;
    SaveServerInfo();
}

HangupCall(playerid, reason)
{
	new callerid = pData[playerid][pCallLine];

	if(reason == HANGUP_DROPPED)
	{
	    SCM(playerid, COLOR_WHITE, "** The call has been dropped...");
	}
	else
	{
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s presses a button and hangs up their mobile phone.", GetRPName(playerid));
    	SCM(playerid, COLOR_WHITE, "** You hung up your phone and ended the call.");

		if(callerid != playerid)
		{
			CancelSelectTextDraw(callerid);
			for(new i = 0; i < 13; i ++)
			{
				TextDrawHideForPlayer(callerid, CallingTD[i]);
			}
			for(new g = 0; g < 5; g++) {
				PlayerTextDrawHide(callerid, CallingPlayerTD[playerid][g]);
			}
			TextDrawHideForPlayer(callerid, CloseCallTD);
			TextDrawHideForPlayer(callerid, PICKUP);
			TextDrawHideForPlayer(callerid, HANGUP);
			SCM(callerid, COLOR_WHITE, "** They hung up their phone and ended the call.");
		}
	}

	if(callerid != playerid)
	{
		if(GetPlayerSpecialAction(callerid) == SPECIAL_ACTION_USECELLPHONE)
		{
		    SetPlayerSpecialAction(callerid, SPECIAL_ACTION_STOPUSECELLPHONE);
		}

		pData[callerid][pCallStage] = 0;
		pData[callerid][pCallLine] = INVALID_PLAYER_ID;
	}
	HangupVoiceCall(playerid, callerid);

	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USECELLPHONE)
	{
 		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
 	}


	pData[playerid][pCallStage] = 0;
	pData[playerid][pCallLine] = INVALID_PLAYER_ID;
}

AddToTaxVault(amount)
{
	gVault += amount;
	SaveServerInfo();
}

SaveServerInfo()
{
    new File:file = fopen("server_info.ini", io_write);

    if(file)
    {
        new
			string[255];
        format(string, sizeof(string), "%i|%i|%i|%s|%s|%i|%i|%i|%i|%i|%i|%s|%s|%i|%i|%i", gTax, gVault, gPlayerRecord, gRecordDate, gServerMOTD, gConnections, gTotalRegistered, gTotalKills, gTotalDeaths, gTotalHours, gAnticheatBans, adminMOTD, helperMOTD, MaxCapCount[0], MaxCapCount[1], gLotto);
        fwrite(file, string);
        fclose(file);
	}
}

SaveStaffLeaderName()
{
	new File:file = fopen("staffleaders.txt", io_write);

	if(file)
	{
		new
			string[255];
		format(string, sizeof(string), "%s|%s|%s|%s|%s|%s", StaffInfo[pFactionModLead], StaffInfo[pGangModLead], StaffInfo[pBanAppealerLead], StaffInfo[pAdminPersonnelLead], StaffInfo[pPublicRelationLead], StaffInfo[pSecurityLead]);
		fwrite(file, string);
        fclose(file);
	}
}

LoadStaffLeaderName()
{
	new File:file = fopen("staffleaders.txt", io_write);

	if(file)
	{
		new
			string[255];

		fread(file, string);
		sscanf(string, "p<|>ssssss", StaffInfo[pFactionModLead], StaffInfo[pGangModLead], StaffInfo[pBanAppealerLead], StaffInfo[pAdminPersonnelLead], StaffInfo[pPublicRelationLead], StaffInfo[pSecurityLead]);
        fclose(file);
	}
}

LoadServerInfo()
{
	new File:file = fopen("server_info.ini", io_read);

	if(file)
	{
	    new string[255];

	    fread(file, string);
	    sscanf(string, "p<|>iiis[64]s[128]iiiiiis[128]s[128]iii", gTax, gVault, gPlayerRecord, gRecordDate, gServerMOTD, gConnections, gTotalRegistered, gTotalKills, gTotalDeaths, gTotalHours, gAnticheatBans, adminMOTD, helperMOTD, MaxCapCount[0], MaxCapCount[1], gLotto);
	    fclose(file);
	}

	if(gTax == 0)
	{
	    gTax = 10;
	}
}

RefreshTime()
{
	new hour, minute, string[12];

	gettime(hour, minute);

    format(string, sizeof(string), "%02d:%02d", hour, minute);
	TextDrawSetString(TimeTD, string);

    format(string, sizeof(string), "%02d:%02d", hour, minute);
	TextDrawSetString(PhoneTD[11], string);

    format(string, sizeof(string), "%02d:%02d", hour, minute);
	TextDrawSetString(CallingTD[11], string);
}

GetBankRobbers()
{
	new count;

    for(new i = 0; i < MAX_BANK_ROBBERS; i ++)
	{
    	if(RobberyInfo[rRobbers][i] != INVALID_PLAYER_ID)
	    {
	        count++;
		}
	}

	return count;
}

AddToBankRobbery(playerid)
{
    for(new i = 0; i < MAX_BANK_ROBBERS; i ++)
	{
    	if(RobberyInfo[rRobbers][i] == INVALID_PLAYER_ID)
	    {
	        RobberyInfo[rRobbers][i] = playerid;
	        pData[playerid][pRobCash] = 0;
	        break;
		}
	}
}

RemoveFromBankRobbery(playerid)
{
    for(new i = 0; i < MAX_BANK_ROBBERS; i ++)
	{
    	if(RobberyInfo[rRobbers][i] == playerid)
	    {
	        RobberyInfo[rRobbers][i] = INVALID_PLAYER_ID;
		}
	}

	if(!GetBankRobbers())
	{
	  	ResetRobbery();
	}
	else if(RobberyInfo[rPlanning] && RobberyInfo[rRobbers][0] == INVALID_PLAYER_ID)
	{
	    for(new i = 1; i < MAX_BANK_ROBBERS; i ++)
	    {
	        if(RobberyInfo[rRobbers][i] != INVALID_PLAYER_ID)
	        {
	            RobberyInfo[rRobbers][0] = RobberyInfo[rRobbers][i];
	            RobberyInfo[rRobbers][i] = INVALID_PLAYER_ID;
	            SM(RobberyInfo[rRobbers][0], COLOR_AQUA, "You are now the leader of this bank heist!");
	            break;
			}
		}
	}

	pData[playerid][pRobCash] = 0;
	pData[playerid][pCP] = CHECKPOINT_NONE;

	RemovePlayerAttachedObject(playerid, 8);
	RemovePlayerAttachedObject(playerid, 9);
	PlayerPlaySound(playerid, 3402, 0.0, 0.0, 0.0);
	DisablePlayerCheckpoint(playerid);

	return 0;
}

IsPlayerInBankRobbery(playerid)
{
	if(RobberyInfo[rPlanning] || RobberyInfo[rStarted])
	{
		for(new i = 0; i < MAX_BANK_ROBBERS; i ++)
		{
	    	if(RobberyInfo[rRobbers][i] == playerid)
		    {
		        return 1;
			}
		}
	}

	return 0;
}

// ATM System

GetNearbyAtm(playerid)
{
	for(new i = 0; i < MAX_ATMS; i ++)
	{
	    if(AtmInfo[i][aExists] && IsPlayerInRangeOfPoint(playerid, 3.0, AtmInfo[i][aPosX], AtmInfo[i][aPosY], AtmInfo[i][aPosZ]))
	    {
	        return i;
	    }
	}
	return -1;
}

ReloadAtm(atmid)
{
	if(AtmInfo[atmid][aExists])
	{
	    DestroyDynamic3DTextLabel(AtmInfo[atmid][aText]);
	    DestroyDynamicObject(AtmInfo[atmid][aObject]);

		AtmInfo[atmid][aText] = CreateDynamic3DTextLabel(""SVRCLR"ATM machine"WHITE"\nUsage: "YELLOW"/atm.", COLOR_TEAL, AtmInfo[atmid][aPosX], AtmInfo[atmid][aPosY], AtmInfo[atmid][aPosZ] + 0.4, 10.0);
        AtmInfo[atmid][aObject] = CreateDynamicObject(19324, AtmInfo[atmid][aPosX], AtmInfo[atmid][aPosY], AtmInfo[atmid][aPosZ], 0.0, 0.0, AtmInfo[atmid][aPosA]);
	}
}

// Locker System

IsPlayerInRangeOfLocker(playerid, factionid)
{
	new lockerid;

	if((lockerid = GetNearbyLocker(playerid)) >= 0 && LockerInfo[lockerid][lFaction] == factionid)
	{
	    return 1;
	}

	return 0;
}

GetNearbyLocker(playerid)
{
	for(new i = 0; i < MAX_LOCKERS; i ++)
	{
	    if(LockerInfo[i][lExists] && IsPlayerInRangeOfPoint(playerid, 3.0, LockerInfo[i][lPosX], LockerInfo[i][lPosY], LockerInfo[i][lPosZ]))
	    {
	        return i;
		}
	}

	return -1;
}

ReloadLockers(factionid)
{
	for(new i = 0; i < MAX_LOCKERS; i ++)
	{
	    if(LockerInfo[i][lExists] && LockerInfo[i][lFaction] == factionid)
	    {
         ReloadLocker(i);
		}
	}
}

ReloadLocker(lockerid)
{
	new color;
	if(LockerInfo[lockerid][lExists])
	{
	    for(new factionid = 1; factionid < MAX_FACTIONS; factionid++)
		{
			if(FactionInfo[factionid][fType] != FACTION_NONE) {
				if(FactionInfo[factionid][fColor] == -1 || FactionInfo[factionid][fColor] == -256)
				{
					color = 0xC8C8C8FF;
				}
				else
				{
					color = FactionInfo[factionid][fColor];
				}
			}
		}
	    DestroyDynamic3DTextLabel(LockerInfo[lockerid][lText]);
	    DestroyDynamicPickup(LockerInfo[lockerid][lPickup]);
	    if(LockerInfo[lockerid][lLabel])
	    {
	        new string[128];
	    	format(string, sizeof(string), "{%06x}%s"YELLOW"\nUsage: /locker.", color >>> 8, FactionInfo[LockerInfo[lockerid][lFaction]][fName]);//, lockerid);
     		LockerInfo[lockerid][lText] = CreateDynamic3DTextLabel(string, COLOR_LIGHTRED, LockerInfo[lockerid][lPosX], LockerInfo[lockerid][lPosY], LockerInfo[lockerid][lPosZ], 10.0, .worldid = LockerInfo[lockerid][lWorld], .interiorid = LockerInfo[lockerid][lInterior]);
		}
		LockerInfo[lockerid][lPickup] = CreateDynamicPickup(LockerInfo[lockerid][lIcon], 1, LockerInfo[lockerid][lPosX], LockerInfo[lockerid][lPosY], LockerInfo[lockerid][lPosZ], .worldid = LockerInfo[lockerid][lWorld], .interiorid = LockerInfo[lockerid][lInterior]);
	}
}

// Vendor System

GetNearbyMdc(playerid)
{
	for(new i = 0; i < MAX_MDC; i ++)
	{
	    if(MdcInfo[i][aExists] && IsPlayerInRangeOfPoint(playerid, 3.0, MdcInfo[i][aPosX], MdcInfo[i][aPosY], MdcInfo[i][aPosZ]))
	    {
	        return i;
	    }
	}
	return -1;
}

ReloadMdc(atmid)
{
	if(MdcInfo[atmid][aExists])
	{
	    DestroyDynamic3DTextLabel(MdcInfo[atmid][aText]);
	    DestroyDynamicObject(MdcInfo[atmid][aObject]);

		MdcInfo[atmid][aText] = CreateDynamic3DTextLabel("Mobile Data Computer\n"WHITE"Usage: "YELLOW"/mdc"WHITE".", COLOR_BLUE, MdcInfo[atmid][aPosX], MdcInfo[atmid][aPosY], MdcInfo[atmid][aPosZ] + 0.4, 10.0);
        //VenInfo[atmid][aObject] = CreateDynamicObject(1239, VenInfo[atmid][aPosX], VenInfo[atmid][aPosY], VenInfo[atmid][aPosZ], 0.0, 0.0, VenInfo[atmid][aPosA]);
	}
}

// Vendor System

GetNearbyVen(playerid)
{
	for(new i = 0; i < MAX_VENDORS; i ++)
	{
	    if(VenInfo[i][aExists] && IsPlayerInRangeOfPoint(playerid, 3.0, VenInfo[i][aPosX], VenInfo[i][aPosY], VenInfo[i][aPosZ]))
	    {
	        return i;
	    }
	}
	return -1;
}

ReloadVen(atmid)
{
	if(VenInfo[atmid][aExists])
	{
	    DestroyDynamic3DTextLabel(VenInfo[atmid][aText]);
	    DestroyDynamicObject(VenInfo[atmid][aObject]);

		VenInfo[atmid][aText] = CreateDynamic3DTextLabel("Street Food\n"WHITE"Press "RED"'N'"WHITE" to buy from vendor.", SERVER_COLOR, VenInfo[atmid][aPosX], VenInfo[atmid][aPosY], VenInfo[atmid][aPosZ] + 0.4, 10.0);
        //VenInfo[atmid][aObject] = CreateDynamicObject(1239, VenInfo[atmid][aPosX], VenInfo[atmid][aPosY], VenInfo[atmid][aPosZ], 0.0, 0.0, VenInfo[atmid][aPosA]);
	}
}
// BAR System

GetNearbyBar(playerid)
{
	for(new i = 0; i < MAX_BAR; i ++)
	{
	    if(BarInfo[i][aExists] && IsPlayerInRangeOfPoint(playerid, 3.0, BarInfo[i][aPosX], BarInfo[i][aPosY], BarInfo[i][aPosZ]))
	    {
	        return i;
	    }
	}
	return -1;
}

ReloadBar(atmid)
{
	if(BarInfo[atmid][aExists])
	{
	    DestroyDynamic3DTextLabel(BarInfo[atmid][aText]);
	    DestroyDynamicObject(BarInfo[atmid][aObject]);

		BarInfo[atmid][aText] = CreateDynamic3DTextLabel("Bar\n"WHITE"Press "RED"'N'"WHITE" to buy from bartender.", SERVER_COLOR, BarInfo[atmid][aPosX], BarInfo[atmid][aPosY], BarInfo[atmid][aPosZ] + 0.4, 10.0);
        //VenInfo[atmid][aObject] = CreateDynamicObject(1239, VenInfo[atmid][aPosX], VenInfo[atmid][aPosY], VenInfo[atmid][aPosZ], 0.0, 0.0, VenInfo[atmid][aPosA]);
	}
}
// PUBLIC GARAGE

GetNearbyPG(playerid)
{
	for(new i = 0; i < MAX_PGARAGE; i ++)
	{
	    if(PGInfo[i][aExists] && IsPlayerInRangeOfPoint(playerid, 3.0, PGInfo[i][aPosX], PGInfo[i][aPosY], PGInfo[i][aPosZ]))
	    {
	        return i;
	    }
	}
	return -1;
}
// Surgery System

GetNearbySur(playerid)
{
	for(new i = 0; i < MAX_SURGERY; i ++)
	{
	    if(SurInfo[i][aExists] && IsPlayerInRangeOfPoint(playerid, 3.0, SurInfo[i][aPosX], SurInfo[i][aPosY], SurInfo[i][aPosZ]))
	    {
	        return i;
	    }
	}
	return -1;
}

ReloadSur(atmid)
{
	if(SurInfo[atmid][aExists])
	{
	    DestroyDynamic3DTextLabel(SurInfo[atmid][aText]);
	    DestroyDynamicObject(SurInfo[atmid][aObject]);
		
		SurInfo[atmid][aText] = CreateDynamic3DTextLabel("Surgery Room\nType "WHITE"'/surgery'"LIME" to begin the operation.", COLOR_LIME, SurInfo[atmid][aPosX], SurInfo[atmid][aPosY], SurInfo[atmid][aPosZ] + 0.4, 10.0);
        //VenInfo[atmid][aObject] = CreateDynamicObject(1239, VenInfo[atmid][aPosX], VenInfo[atmid][aPosY], VenInfo[atmid][aPosZ], 0.0, 0.0, VenInfo[atmid][aPosA]);
	}
}
ReloadPG(atmid)
{
	if(PGInfo[atmid][aExists])
	{
	    DestroyDynamic3DTextLabel(PGInfo[atmid][aText]);
	    DestroyDynamicObject(PGInfo[atmid][aObject]);
		DestroyDynamicMapIcon(PGInfo[atmid][aMapIcon]);
		
		PGInfo[atmid][aText] = CreateDynamic3DTextLabel("Public Garage\n"YELLOW"Usage: Press 'Y'.", COLOR_WHITE, PGInfo[atmid][aPosX], PGInfo[atmid][aPosY], PGInfo[atmid][aPosZ] + 0.4, 20.0);
		PGInfo[atmid][aMapIcon] = CreateDynamicMapIcon(PGInfo[atmid][aPosX], PGInfo[atmid][aPosY], PGInfo[atmid][aPosZ], 30, 1, -1, -1, -1, 500.0);

		//VenInfo[atmid][aObject] = CreateDynamicObject(1239, VenInfo[atmid][aPosX], VenInfo[atmid][aPosY], VenInfo[atmid][aPosZ], 0.0, 0.0, VenInfo[atmid][aPosA]);
	}
}
ResetRobbery()
{
	new rows = cache_get_row_count(connectionID);
    if(RobberyInfo[rStarted])
	{
		SMA(COLOR_LIGHTGREEN, "Breaking News"WHITE": The bank robbery is now finished. $%i was stolen from the bank.", RobberyInfo[rStolen]);
	}
	if(IsValidDynamicObject(RobberyInfo[rObjects][0]))
	{
		DestroyDynamicObject(RobberyInfo[rObjects][0]);
	}
	if(IsValidDynamicObject(RobberyInfo[rObjects][1]))
	{
		DestroyDynamicObject(RobberyInfo[rObjects][1]);
	}

	for(new i = 0; i < 5; i ++)
	{
	    DestroyDynamic3DTextLabel(RobberyInfo[rText][i]);
	    RobberyInfo[rText][i] = Text3D:INVALID_3DTEXT_ID;
	}

	for(new i = 0; i < MAX_BANK_ROBBERS; i ++)
	{
	    RobberyInfo[rRobbers][i] = INVALID_PLAYER_ID;
	}

	for(new i = 0; i < rows && i < MAX_ENTRANCES; i ++)
	{
		ReloadEntrance(i);
	}

    RobberyInfo[rTime] = 16;
    RobberyInfo[rPlanning] = 0;
    RobberyInfo[rStarted] = 0;
    RobberyInfo[rStolen] = 0;
    RobberyInfo[rObjects][0] = CreateDynamicObject(19799, 1678.248901, -988.194702, 671.695007, 0.000000, 0.000000, 0.000000);
    RobberyInfo[rObjects][1] = INVALID_OBJECT_ID;
}
ResetChop()
{
	ChopInfo[cTime] = 1;
}
ResetRob()
{
	RobInfo[rTime] = 1;
}
ResetEvent()
{
	if(EventInfo[eStarted])
	{
	    foreach(new i : Player)
	    {
	        if(pData[i][pJoinedEvent])
	        {
	            pData[i][pJoinedEvent] = 0;
	            SetPlayerToSpawn(i);
			}
		}
	}

	for(new i = 0; i < 5; i ++)
	{
	    EventInfo[eWeapons][i] = 0;
	}

    EventInfo[eReady] = 0;
    EventInfo[eStarted] = 0;
    EventInfo[eLocked] = 0;
    EventInfo[eType] = 0;
    EventInfo[eJoinText] = 0;
    EventInfo[eHealth] = 100.0;
    EventInfo[eArmor] = 0.0;
    EventInfo[eInterior] = 0;
    EventInfo[eWorld] = 0;
    EventInfo[eNext] = 0;
    EventInfo[eCS] = 0;
    EventInfo[eQS] = 0;
    EventInfo[eHeal] = 0;

	for(new i = 0; i < 2; i ++)
	{
	    EventInfo[ePosX][i] = 0.0;
	    EventInfo[ePosY][i] = 0.0;
	    EventInfo[ePosZ][i] = 0.0;
	    EventInfo[ePosA][i] = 0.0;
	    EventInfo[eSkin][i] = 0;
	}
}
CheckServerAd(szInput[])
{
	if(strfind(szInput, ":", true) != -1)
	{
		new
			iCount,
			iPeriod,
			iDash,
			iPos,
			iChar,
			iColon;

		while((iChar = szInput[iPos++]))
		{
			if('0' <= iChar <= '9') iCount++;
			else if(iChar == '.') iPeriod++;
			else if(iChar == '-') iDash++;
			else if(iChar == ':') iColon++;
		}
		if(iCount >= 7 && iPeriod >= 3 && iColon >= 1 || strfind(szInput, "samp.") > -1 || strfind(szInput, "play.") > -1 || strfind(szInput, ":7777") > -1) {
			return 1;
		}
	}

	return 0;
}

stock PreloadAnims(playerid) {
	ApplyAnimation(playerid, "AIRPORT", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "Attractors", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BAR", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BASEBALL", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BD_FIRE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BEACH", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "benchpress", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BF_injection", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKED", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKEH", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKELEAP", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKES", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKEV", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKE_DBZ", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BMX", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BOMBER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BOX", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BSKTBALL", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BUDDY", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BUS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CAMERA", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CAR", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CARRY", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CAR_CHAT", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CASINO", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CHAINSAW", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CHOPPA", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CLOTHES", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "COACH", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "COLT45", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "COP_AMBIENT", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "COP_DVBYZ", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CRACK", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CRIB", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DAM_JUMP", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DANCING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DEALER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DILDO", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DODGE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DOZER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DRIVEBYS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FAT", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FIGHT_B", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FIGHT_C", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FIGHT_D", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FIGHT_E", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FINALE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FINALE2", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FLAME", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "Flowers", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FOOD", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "Freeweights", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GANGS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GHANDS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GHETTO_DB", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "goggles", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GRAFFITI", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GRAVEYARD", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GRENADE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GYMNASIUM", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "HAIRCUTS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "HEIST9", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "INT_HOUSE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "INT_OFFICE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "INT_SHOP", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "JST_BUISNESS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "KART", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "KISSING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "KNIFE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "LAPDAN1", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "LAPDAN2", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "LAPDAN3", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "LOWRIDER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MD_CHASE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MD_END", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MEDIC", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MISC", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MTB", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MUSCULAR", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "NEVADA", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "ON_LOOKERS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "OTB", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PARACHUTE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PARK", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PAULNMAC", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "ped", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PLAYER_DVBYS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PLAYIDLES", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "POLICE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "POOL", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "POOR", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PYTHON", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "QUAD", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "QUAD_DBZ", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "RAPPING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "RIFLE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "RIOT", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "ROB_BANK", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "RUSTLER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "RYDER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SCRATCHING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SHAMAL", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SHOP", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SHOTGUN", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SILENCED", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SKATE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SMOKING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SNIPER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SPRAYCAN", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "STRIP", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SUNBATHE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SWAT", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SWEET", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SWIM", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SWORD", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "TANK", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "TATTOOS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "TEC", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "TRAIN", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "TRUCK", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "UZI", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "VAN", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "VENDING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "VORTEX", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "WAYFARER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "WEAPONS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "WUZI", "null", 0.0, 0, 0, 0, 0, 0);
	return 1;
}

ApplyAnimationEx(playerid, animlib[], animname[], Float:fDelta, loop, lockx, locky, freeze, time)
{
	ApplyAnimation(playerid, animlib, animname, fDelta, loop, lockx, locky, freeze, time, 1);

	if(loop > 0 || freeze > 0)
	{
		pData[playerid][pLoopAnim] = 1;

		if(!pData[playerid][pToggleTextdraws] && !pData[playerid][pHospital])
		{
			TextDrawShowForPlayer(playerid, AnimationTD);
		}
	}
}
forward ShowPlayerAnimTextdraw(playerid);
public ShowPlayerAnimTextdraw(playerid)
{
		pData[playerid][pLoopAnim] = 1;

		if(!pData[playerid][pToggleTextdraws])
		{
			TextDrawShowForPlayer(playerid, AnimationTD);
		}
}

CanPlayerUseAnims(playerid)
{
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED || pData[playerid][pBrokenLeg] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pMiningTime] > 0 || pData[playerid][pConstructionTime] > 0 || pData[playerid][pTazedTime] > 0 || pData[playerid][pCuffed] > 0)
	{
	    return 0;
	}

	return 1;
}
CanPlayerVehAnims(playerid)
{
	if(!IsPlayerInAnyVehicle(playerid) || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED || pData[playerid][pInjured] > 0 || pData[playerid][pBrokenLeg] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pMiningTime] > 0 || pData[playerid][pBrokenLeg] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pMiningTime] > 0 || pData[playerid][pConstructionTime] > 0 || pData[playerid][pTazedTime] > 0 || pData[playerid][pCuffed] > 0)
	{
	    return 0;
	}

	return 1;
}

GetAvailableAttachedSlot(playerid)
{
	for(new i = 0; i < 5; i ++)
	{
	    if(!IsPlayerAttachedObjectSlotUsed(playerid, i))
	    {
	        return i;
		}
	}

	return -1;
}

CancelTaxiRide(playerid) // playerid is the driver of the taxi.
{
	new
		passengerid = pData[playerid][pTaxiPassenger],
		bill = pData[playerid][pTaxiBill],
		string[20];

	SM(passengerid, COLOR_AQUA, "This ride costed you "SVRCLR"$%i{CCFFFF}.", bill);
	SM(playerid, COLOR_AQUA, "You earned $%i  for this ride.", bill);

	format(string, sizeof(string), "~r~-$%i", bill);
	GameTextForPlayer(passengerid, string, 5000, 1);

	format(string, sizeof(string), "~g~+$%i", bill);
	GameTextForPlayer(playerid, string, 5000, 1);

	GivePlayerCash(passengerid, -bill);
	GivePlayerCash(playerid, bill);

	pData[playerid][pTaxiPassenger] = INVALID_PLAYER_ID;
	pData[playerid][pTaxiBill] = 0;
	pData[playerid][pTaxiTime] = 0;
}

SetFreezePos(playerid, Float:x, Float:y, Float:z)
{
    if(pData[playerid][pFreezeTimer] >= 0)
	{
		KillTimer(pData[playerid][pFreezeTimer]);
	}
	SetPlayerPos(playerid, x, y, z);
    pData[playerid][pFreezeTimer] = SetTimerEx("UnfreezePlayer", 3000, false, "ifff", playerid, x, y, z);
	ShowNoticeGUIFrame(playerid, 4);

    TogglePlayerControllable(playerid, 0);
	//ShowFreezeTextdraw(playerid);
}

IsPlayerChatActive(playerid)
{
	foreach(new i : Player)
	{
	    if(chattingWith[playerid]{i})
	    {
	        return 1;
		}
	}

	return 0;
}

PlayerHasJob(playerid, job)
{
    return (pData[playerid][pJob] == job || pData[playerid][pSecondJob] == job);
}

SetScriptArmour(playerid, Float:amount)
{
    pData[playerid][pACTime] = gettime() + 5;
	pData[playerid][pArmorTime] = gettime() + 5;
	pData[playerid][pArmor] = amount;
	return SetPlayerArmour(playerid, amount);
}

GetWeaponClipSize(weaponid)
{
    switch(weaponid)
    {
        case 22, 23:
			return 17;
        case 26:
            return 2;
        case 24, 27:
			return 7;
        case 28, 31, 32:
			return 50;
        case 29, 30:
			return 30;
    }

    return 0;
}

IsAForkliftVehicle(vehicleid)
{
	for(new i = 0; i < 5; i ++) {
	    if(vehicleid == forkliftVehicles[i]) return 1;
	}
	return 0;
}
StartForkliftJob(playerid)
{
	if(PlayerHasJob(playerid, JOB_FORKLIFTER))
    {
		switch (random(5))
		{
	        case 0: SetPlayerCheckpoint(playerid, 2756.0898, -2568.1514, 13.3329, 2.0);
			case 1: SetPlayerCheckpoint(playerid, 2396.0554, -2507.3931, 13.6478, 2.0);
			case 2: SetPlayerCheckpoint(playerid, 2350.6902, -2329.9878, 13.5469, 2.0);
			case 3: SetPlayerCheckpoint(playerid, 2204.1365, -2592.5439, 13.5409, 2.0);
			case 4: SetPlayerCheckpoint(playerid, 2450.6052, -2628.4292, 13.6645, 2.0);
		}
		pData[playerid][pCP] = CHECKPOINT_FORKLIFTER;
		pData[playerid][pJobStage] = 0;
	}
}

ResetPlayerWeaponsEx(playerid)
{
	ResetPlayerWeapons(playerid);
	SetPlayerArmedWeapon(playerid, 0);

	for(new i = 0; i < 13; i ++)
	{
	    pData[playerid][pWeapons][i] = 0;
	    pData[playerid][pTempWeapons][i] = 0;
	}

	pData[playerid][pACTime] = gettime() + 2;
}

RemovePlayerWeapon(playerid, weaponid)
{
	// Reset the player's weapons.
	ResetPlayerWeapons(playerid);
	// Set the armed slot to zero.
	SetPlayerArmedWeapon(playerid, 0);
	// Set the weapon in the slot to zero.
	pData[playerid][pACTime] = gettime() + 2;
	pData[playerid][pWeapons][weaponSlotIDs[weaponid]] = 0;
	pData[playerid][pTempWeapons][weaponSlotIDs[weaponid]] = 0;
	// Set the player's weapons.
	SetPlayerWeapons(playerid);
	// Save them to prevent rollbacks.
	SavePlayerWeapons(playerid);
}

SetWeaponAmmo(playerid, type, amount)
{
	if(type == AMMO_HP) {
		pData[playerid][pHPAmmo] = amount;
	} else if(type == AMMO_POISON) {
	    pData[playerid][pPoisonAmmo] = amount;
	} else if(type == AMMO_FMJ) {
	    pData[playerid][pFMJAmmo] = amount;
	}

	SetPlayerWeapons(playerid);
}

GiveWeapon(playerid, weaponid, bool:temp = false)
{
    if(pData[playerid][pWeaponRestricted]) return 1;
	if(1 <= weaponid <= 46)
	{
	    if(temp)
		{
			pData[playerid][pTempWeapons][weaponSlotIDs[weaponid]] = weaponid;
			GivePlayerWeapon(playerid, weaponid, 19999);
	    }
		else
		{
			pData[playerid][pWeapons][weaponSlotIDs[weaponid]] = weaponid;
			SetPlayerWeapons(playerid);
		}

		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
		    SetPlayerArmedWeapon(playerid, 0);
		}
		else if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
		{
			switch(weaponid)
			{
		    	case 22, 25, 28, 29, 30, 31, 32:
		    	{
		    	    SetPlayerArmedWeapon(playerid, weaponid);
			    }
			    default:
			    {
		    	    SetPlayerArmedWeapon(playerid, 0);
				}
			}
		}
		else
		{
		    SetPlayerArmedWeapon(playerid, weaponid);
		}

		SavePlayerWeapons(playerid);

		pData[playerid][pACTime] = gettime() + 2;
	}
	return 1;
}

/*IsAFlashingEXB(carid)
{
	switch(GetVehicleModel(carid)) {
		case 596, 597, 598, 599, 541, 426, 427, 416, 407, 560, 490: return 1;
	}
	return 0;
}*/
SQL_ReturnEscaped(const string[])
{
	new
	    entry[256];

	mysql_real_escape_string(string, entry, connectionID);
	return entry;
}

GivePlayerWeaponEx(playerid, weaponid, bool:temp = false)
{
	if(1 <= weaponid <= 46)
	{
	    if(temp)
		{
			pData[playerid][pTempWeapons][weaponSlotIDs[weaponid]] = weaponid;
			GivePlayerWeapon(playerid, weaponid, 29999);
	    }
		else
		{
			pData[playerid][pWeapons][weaponSlotIDs[weaponid]] = weaponid;
			SetPlayerWeapons(playerid);
		}

		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
		    SetPlayerArmedWeapon(playerid, 0);
		}
		else if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
		{
			switch(weaponid)
			{
		    	case 22, 23, 25, 28..34:
		    	{
		    	    SetPlayerArmedWeapon(playerid, weaponid);
			    }
			    default:
			    {
		    	    SetPlayerArmedWeapon(playerid, 0);
				}
			}
		}
		else
		{
		    SetPlayerArmedWeapon(playerid, weaponid);
		}

		SavePlayerWeapons(playerid);

		pData[playerid][pACTime] = gettime() + 2;
	}
}

GetScriptWeapon(playerid)
{
	new weaponid = GetPlayerWeapon(playerid);

	if(PlayerHasWeapon(playerid, weaponid))
	{
	    return weaponid;
	}

	return 0;
}
AddCommas(number, const separator[] = ",")
{
	new output[15]; // longest possible output given 32 bit integers: -2,147,483,648
	format(output, sizeof(output), "%d", number);

	for(new i = strlen(output) - 3; i > 0 && output[i-1] != '-'; i -= 3)
	{
		strins(output, separator, i);
	}

	return output;
}
PlayerHasWeapon(playerid, weaponid, bool:temp = false)
{
	switch(weaponid)
	{
	    case 0, 2, 40, 46:
	    {
	        return 1;
		}
	}

	if(weaponid == 23 && (pData[playerid][pTazer] || (IsLawEnforcement(playerid) || GetFactionType(playerid) == FACTION_GOVERNMENT || GetFactionType(playerid) == FACTION_DOC)))
	{
	    return 1;
	}
	else if(weaponid == 25 && (pData[playerid][pBeanbag] || (IsLawEnforcement(playerid) || GetFactionType(playerid) == FACTION_GOVERNMENT || GetFactionType(playerid) == FACTION_DOC)))
	{
	    return 1;
	}
	if((temp) && pData[playerid][pTempWeapons][weaponSlotIDs[weaponid]] == weaponid)
	{
	    return 1;
	}

	return pData[playerid][pWeapons][weaponSlotIDs[weaponid]] == weaponid;
}

SetPlayerWeapons(playerid)
{
	if(!pData[playerid][pJoinedEvent] && pData[playerid][pDueling] == INVALID_PLAYER_ID && !pData[playerid][pJailType] && !pData[playerid][pWeaponRestricted])
	{
		new weaponid = GetPlayerWeapon(playerid);

		ResetPlayerWeapons(playerid);

		for(new i = 0; i < 13; i ++)
		{
		    /*if(pData[playerid][pTempWeapons][i] > 0)
		    {
		        pData[playerid][pTempWeapons][i] = 0;
		    }*/

		    if(pData[playerid][pWeapons][i] > 0)
		    {
		        /*if(i == 2 && pData[playerid][pTazer])
		        {
		            GiveWeapon(playerid, 23, true);
		            continue;
		        }*/

				if(pData[playerid][pAmmoType] != AMMOTYPE_NORMAL && pData[playerid][pAmmoWeapon] == pData[playerid][pWeapons][i])
				{
				    if(pData[playerid][pAmmoType] == AMMOTYPE_HP && pData[playerid][pHPAmmo] > 0) {
				        GivePlayerWeapon(playerid, pData[playerid][pWeapons][i], pData[playerid][pHPAmmo]);
				    } else if(pData[playerid][pAmmoType] == AMMOTYPE_POISON && pData[playerid][pPoisonAmmo] > 0) {
				        GivePlayerWeapon(playerid, pData[playerid][pWeapons][i], pData[playerid][pPoisonAmmo]);
					} else if(pData[playerid][pAmmoType] == AMMOTYPE_FMJ && pData[playerid][pFMJAmmo] > 0) {
					    GivePlayerWeapon(playerid, pData[playerid][pWeapons][i], pData[playerid][pFMJAmmo]);
				    } else {
						GivePlayerWeapon(playerid, pData[playerid][pWeapons][i], 19999);
						SM(playerid, COLOR_WHITE, "** Your %s is now using normal ammunition again as you ran out of special ammo.", GetWeaponNameEx(pData[playerid][pWeapons][i]));
						pData[playerid][pAmmoType] = AMMOTYPE_NORMAL;
						pData[playerid][pAmmoWeapon] = 0;
					}
				}
				else
				{
				    if(16 <= pData[playerid][pWeapons][i] <= 18)
				        GivePlayerWeapon(playerid, pData[playerid][pWeapons][i], 1);
				    else
						GivePlayerWeapon(playerid, pData[playerid][pWeapons][i], 19999);
				}
				if(pTazerReplace[playerid] && !pData[playerid][pTazer]) {
					pData[playerid][pWeapons][2] = pTazerReplace[playerid];
					pData[playerid][pAmmo][2] = pTazerAmmo[playerid];

					pTazerReplace[playerid] = 0;
					pTazerAmmo[playerid] = 0;
				}
				else if(pBeanbagReplace[playerid] && !pData[playerid][pBeanbag]) {
					pData[playerid][pWeapons][2] = pBeanbagReplace[playerid];
					pData[playerid][pAmmo][2] = pBeanbagAmmo[playerid];

					pBeanbagReplace[playerid] = 0;
					pBeanbagAmmo[playerid] = 0;
				}
				GivePlayerWeapon(playerid, pData[playerid][pWeapons][i], pData[playerid][pAmmo][i]);
			}
		}
		switch(GetPlayerState(playerid))
		{
		    case PLAYER_STATE_DRIVER:
		    {
		        SetPlayerArmedWeapon(playerid, 0);
			}
			case PLAYER_STATE_PASSENGER:
			{
			    switch(weaponid) // Driveby
			    {
			        case 22, 28, 29, 32:
			        {
			            SetPlayerArmedWeapon(playerid, weaponid);
					}
					default:
					{
					    SetPlayerArmedWeapon(playerid, 0);
					}
				}
			}
			default:
			{
			    SetPlayerArmedWeapon(playerid, weaponid);
		    }
		}
	}
}
DestroyVehicleEx(vehicleid)
{
	if(IsValidVehicle(vehicleid))
	{
		ResetVehicleObjects(vehicleid);
	}

	return DestroyVehicle(vehicleid);
}

ResetVehicleObjects(vehicleid)
{
    if(IsValidDynamicObject(vehicleSiren[vehicleid]))
	{
	    DestroyDynamicObject(vehicleSiren[vehicleid]);
	    vehicleSiren[vehicleid] = INVALID_OBJECT_ID;
	}
	if(IsValidDynamic3DTextLabel(vehicleCallsign[vehicleid]))
	{
	    DestroyDynamic3DTextLabel(vehicleCallsign[vehicleid]);
		vehicleCallsign[vehicleid] = Text3D:INVALID_3DTEXT_ID;
	}
	if(IsValidDynamic3DTextLabel(DonatorCallSign[vehicleid]))
	{
	    DestroyDynamic3DTextLabel(DonatorCallSign[vehicleid]);
		DonatorCallSign[vehicleid] = Text3D:INVALID_3DTEXT_ID;
	}
 	if(VehicleInfo[vehicleid][vNeonEnabled])
	{
		if(IsValidDynamicObject(VehicleInfo[vehicleid][vObjects][0]))
		{
		    DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][0]);
		    VehicleInfo[vehicleid][vObjects][0] = INVALID_OBJECT_ID;
		}
		if(IsValidDynamicObject(VehicleInfo[vehicleid][vObjects][1]))
		{
		    DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][1]);
		    VehicleInfo[vehicleid][vObjects][1] = INVALID_OBJECT_ID;
		}
 	}

 	adminVehicle{vehicleid} = false;
}
SetPlayerClothing(playerid)
{
	// Reset any clothing that the player has on them.
	for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
	{
	    if(ClothingInfo[playerid][i][cExists] && ClothingInfo[playerid][i][cAttached])
	    {
	        RemovePlayerAttachedObject(playerid, ClothingInfo[playerid][i][cAttachedIndex]);
		}
	}

	// Now, we reapply the clothing to the player.
	for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
	{
	    if(ClothingInfo[playerid][i][cExists] && ClothingInfo[playerid][i][cAttached])
		{
		    if(ClothingInfo[playerid][i][cAttachedIndex] == -1)
		    {
			    ClothingInfo[playerid][i][cAttachedIndex] = GetAvailableAttachedSlot(playerid);
			}

		    if(ClothingInfo[playerid][i][cAttachedIndex] >= 0)
		    {
		        SetPlayerAttachedObject(playerid, ClothingInfo[playerid][i][cAttachedIndex], ClothingInfo[playerid][i][cModel], ClothingInfo[playerid][i][cBone], ClothingInfo[playerid][i][cPosX], ClothingInfo[playerid][i][cPosY], ClothingInfo[playerid][i][cPosZ], ClothingInfo[playerid][i][cRotX], ClothingInfo[playerid][i][cRotY], ClothingInfo[playerid][i][cRotZ], ClothingInfo[playerid][i][cScaleX], ClothingInfo[playerid][i][cScaleY], ClothingInfo[playerid][i][cScaleZ]);
			}
			else
			{
			    // Clothing wasn't attached... slots are probably all full.
			    ClothingInfo[playerid][i][cAttached] = 0;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET attached = 0 WHERE id = %i", ClothingInfo[playerid][i][cID]);
			    mysql_tquery(connectionID, queryBuffer);
			}
		}
	}

	pData[playerid][pAwaitingClothing] = 0;
}

SetPlayerInPaintball(playerid)
{
	new rand = random(sizeof(paintballSpawns));

    if(!pData[playerid][pPaintball])
	{
		SavePlayerVariables(playerid);
		ResetPlayerWeapons(playerid);
	}

	SetPlayerPos(playerid, paintballSpawns[rand][0], paintballSpawns[rand][1], paintballSpawns[rand][2]);
	SetPlayerFacingAngle(playerid, paintballSpawns[rand][3]);
	SetPlayerInterior(playerid, 18);
	SetPlayerVirtualWorld(playerid, 1000);
	SetCameraBehindPlayer(playerid);

	SetPlayerHealth(playerid, 100.0);

	GiveWeapon(playerid, 24, true);
	GiveWeapon(playerid, 27, true);
	GiveWeapon(playerid, 29, true);
	GiveWeapon(playerid, 31, true);
	GiveWeapon(playerid, 34, true);

	pData[playerid][pPaintball] = 1;
}

SetPlayerInPaintball2(playerid)
{
	new rand = random(sizeof(paintballSpawns2));

    if(!pData[playerid][pPaintball2])
	{
		SavePlayerVariables(playerid);
		ResetPlayerWeapons(playerid);
	}

	SetPlayerPos(playerid, paintballSpawns2[rand][0], paintballSpawns2[rand][1], paintballSpawns2[rand][2]);
	SetPlayerFacingAngle(playerid, paintballSpawns2[rand][3]);
	SetPlayerInterior(playerid, 10);
	SetPlayerVirtualWorld(playerid, 1000);
	SetCameraBehindPlayer(playerid);

	SetPlayerHealth(playerid, 100.0);

	GiveWeapon(playerid, 24, true);
	GiveWeapon(playerid, 27, true);
	GiveWeapon(playerid, 29, true);
	GiveWeapon(playerid, 31, true);
	GiveWeapon(playerid, 34, true);

	pData[playerid][pPaintball2] = 1;
}

SetPlayerInEvent(playerid)
{
    SavePlayerVariables(playerid);
	ResetPlayerWeapons(playerid);

	pData[playerid][pJoinedEvent] = 1;
	pData[playerid][bpWearing] = 0;
	pData[playerid][pBandana] = 0;

	if(EventInfo[eType] == 2)
	{
		pData[playerid][pEventTeam] = EventInfo[eNext];

		if(EventInfo[eNext] == RED_TEAM) {
			EventInfo[eNext] = BLUE_TEAM;
		} else {
	    	EventInfo[eNext] = RED_TEAM;
		}

		if(pData[playerid][pEventTeam] == RED_TEAM) {
			SCM(playerid, COLOR_SYNTAX, "You are on Red Team.");
			//Dyuze(playerid, "Notice", "You are on ~r~Red Team.");
		} else if(pData[playerid][pEventTeam] == BLUE_TEAM) {
			SCM(playerid, COLOR_SYNTAX, "You are on Blue Team.");
			//Dyuze(playerid, "Notice", "You are on ~b~Red Team.");
		}
	}
	else
	{
	    pData[playerid][pEventTeam] = 0;
	}

	/*for(new x = 0; x < 5; x ++)
    {
        if(EventInfo[eWeapons][x])
        {
            GiveWeapon(playerid, EventInfo[eWeapons][x], true);
        }
    }*/

	SetPlayerPos(playerid, EventInfo[ePosX][pData[playerid][pEventTeam]], EventInfo[ePosY][pData[playerid][pEventTeam]], EventInfo[ePosZ][pData[playerid][pEventTeam]]);
	SetPlayerFacingAngle(playerid, EventInfo[ePosA][pData[playerid][pEventTeam]]);
	SetPlayerInterior(playerid, EventInfo[eInterior]);
	SetPlayerVirtualWorld(playerid, EventInfo[eWorld]);
	SetPlayerHealth(playerid, EventInfo[eHealth]);
	SetPlayerArmour(playerid, EventInfo[eArmor]);
	SetCameraBehindPlayer(playerid);

    if(EventInfo[eSkin][pData[playerid][pEventTeam]])
	{
		SetPlayerSkin(playerid, EventInfo[eSkin][pData[playerid][pEventTeam]]);
	}

	if(!isnull(EventInfo[eJoinText]))
	{
		SCMf(playerid, COLOR_SYNTAX, "Event:", EventInfo[eJoinText]);
		//Dyuze(playerid, "Event", EventInfo[eJoinText]);
	}

	if(EventInfo[eType] == 1 || EventInfo[eType] == 2)
	{
		SM(playerid, COLOR_YELLOW, "Event: Crackshooting is %s, Quickswapping is %s, Healing is %s.", (EventInfo[eCS]) ? ("{FFD700}Allowed"WHITE"") : ("{FFA500}Not allowed"WHITE""), (EventInfo[eQS]) ? ("{FFD700}Allowed"WHITE"") : ("{FFA500}Not allowed"WHITE""), (EventInfo[eHeal]) ? ("{FFD700}Allowed"WHITE"") : ("{FFA500}Not allowed"WHITE""));
	}

	return 1;
}

//------------------------[PRIORITY COOLDOWN BY STEWART]---------------------------------
new gPriority;
forward Priority(playerid, stage);
public Priority(playerid, stage)
{
	switch(stage)
	{
		case 0:
		{
            new string[128];
		    format(string, sizeof(string), "~w~Illegal Activity: ~r~15 Mins");
		    TextDrawSetString(Textdraw2, string);
		}
		case 1:
		{
            new string[128];
		    format(string, sizeof(string), "~w~Illegal Activity: ~r~14 Mins");
		    TextDrawSetString(Textdraw2, string);
		}
		case 2:
		{
            new string[128];
		    format(string, sizeof(string), "~w~Illegal Activity: ~r~13 Mins");
		    TextDrawSetString(Textdraw2, string);
		}
		case 3:
		{
            new string[128];
		    format(string, sizeof(string), "~w~Illegal Activity: ~r~12 Mins");
		    TextDrawSetString(Textdraw2, string);
		}
		case 4:
		{
            new string[128];
		    format(string, sizeof(string), "~w~Illegal Activity: ~r~11 Mins");
		    TextDrawSetString(Textdraw2, string);
		}
		case 5:
		{
            new string[128];
		    format(string, sizeof(string), "~w~Illegal Activity: ~r~10 Mins");
		    TextDrawSetString(Textdraw2, string);
		}
		case 6:
		{
            new string[128];
		    format(string, sizeof(string), "~w~Illegal Activity: ~r~9 Mins");
		    TextDrawSetString(Textdraw2, string);
		}
		case 7:
		{
            new string[128];
		    format(string, sizeof(string), "~w~Illegal Activity: ~r~8 Mins");
		    TextDrawSetString(Textdraw2, string);
		}
		case 8:
		{
            new string[128];
		    format(string, sizeof(string), "~w~Illegal Activity: ~r~7 Mins");
		    TextDrawSetString(Textdraw2, string);
		}
		case 9:
		{
            new string[128];
		    format(string, sizeof(string), "~w~Illegal Activity: ~r~6 Mins");
		    TextDrawSetString(Textdraw2, string);
		}
		case 10:
		{
            new string[128];
		    format(string, sizeof(string), "~w~Illegal Activity: ~r~5 Mins");
		    TextDrawSetString(Textdraw2, string);
		}
		case 11:
		{
            new string[128];
		    format(string, sizeof(string), "~w~Illegal Activity: ~r~4 Mins");
		    TextDrawSetString(Textdraw2, string);
		}
		case 12:
		{
            new string[128];
		    format(string, sizeof(string), "~w~Illegal Activity: ~r~3 Mins");
		    TextDrawSetString(Textdraw2, string);
		}
		case 13:
		{
            new string[128];
		    format(string, sizeof(string), "~w~Illegal Activity: ~r~2 Mins");
		    TextDrawSetString(Textdraw2, string);
		}
		case 14:
		{
            new string[128];
		    format(string, sizeof(string), "~w~Illegal Activity: ~r~1 Mins");
		    TextDrawSetString(Textdraw2, string);
		}
		case 15:
		{
            new string[128];
		    format(string, sizeof(string), "~w~Illegal Activity: ~r~Open for Heist");
		    TextDrawSetString(Textdraw2, string);
		}
	}
	stage++;

	if(stage < 15)
	{
 		gPriority = SetTimerEx("Priority", 60000, false, "ii", playerid, stage);
	}
}
SetPriority(playerid)
{
	if(PriorityInfo[prioType] == 1)
	{
        new string[128];
	    format(string, sizeof(string), "~w~Illegal Activity: ~r~Open for Heist");
	    TextDrawSetString(Textdraw2, string);
	}
	if(PriorityInfo[prioType] == 2)
	{
        new string[128];
	    format(string, sizeof(string), "~w~Illegal Activity: ~y~Priority On Hold");
	    TextDrawSetString(Textdraw2, string);
	}
	if(PriorityInfo[prioType] == 3)
	{
		SetTimerEx("Priority", 500, false, "ii", playerid, 0);
		SMA(COLOR_YELLOW, ""SVRCLR"Priority has been reseted. Please wait for 15 minutes before conducting another crime.");
	}
	return 1;
}

// Binds - Stewart
//              When command is executed.
Binds1(playerid)
{
    if(pData[playerid][pBindtype] == 0)
    {
        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}* %s %s", GetRPName(playerid), (pData[playerid][pBind]));
    }
    if(pData[playerid][pBindtype] == 1)
    {
        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s (( %s ))", (pData[playerid][pBind]), GetRPName(playerid));
    }
    return 1;
}
Binds2(playerid)
{
    if(pData[playerid][pBindtype2] == 0)
    {
        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}* %s %s", GetRPName(playerid), (pData[playerid][pBind2]));
    }
    if(pData[playerid][pBindtype2] == 1)
    {
        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s (( %s ))", (pData[playerid][pBind2]), GetRPName(playerid));
    }
	return 1;
}
Binds3(playerid)
{
    if(pData[playerid][pBindtype3] == 0)
    {
        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}* %s %s", GetRPName(playerid), (pData[playerid][pBind3]));
    }
    if(pData[playerid][pBindtype3] == 1)
    {
        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s (( %s ))", (pData[playerid][pBind3]), GetRPName(playerid));
    }
    return 1;
}
Binds4(playerid)
{
    if(pData[playerid][pBindtype4] == 0)
    {
        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}* %s %s", GetRPName(playerid), (pData[playerid][pBind4]));
    }
    if(pData[playerid][pBindtype4] == 1)
    {
        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s (( %s ))", (pData[playerid][pBind4]), GetRPName(playerid));
    }
    return 1;
}
Binds5(playerid)
{
    if(pData[playerid][pBindtype5] == 0)
    {
        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}* %s %s", GetRPName(playerid), (pData[playerid][pBind5]));
    }
    if(pData[playerid][pBindtype5] == 1)
    {
        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s (( %s ))", (pData[playerid][pBind5]), GetRPName(playerid));
    }
    return 1;
}
//              END OF CODE             //

SetPlayerInHospital(playerid, time = 15, type = -1)
{
    pData[playerid][pHospitalType] = (type == -1) ? (random(2) + 1) : (type);
    pData[playerid][pHospitalTime] = time;
    pData[playerid][pHospital] = 1;
    
    TextDrawHideForPlayer(playerid, Text:DieText);
    TextDrawHideForPlayer(playerid, Text:InjuredText);
    
    SetPlayerVirtualWorld(playerid, random(100)+4);
    TogglePlayerControllable(playerid, 0);
    
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~Recovering... 15", 1000, 3);
    SetPlayerPos(playerid, 1251.0936,-1299.2771,1061.8671);
	SetPlayerFacingAngle(playerid, 177.0752);
 	InterpolateCameraPos(playerid, 1260.641967, -1302.528320, 1061.624633, 1246.852050, -1302.613403, 1063.365722, 7000);
	InterpolateCameraLookAt(playerid, 1255.648315, -1302.345581, 1061.798217, 1250.818847, -1300.314086, 1061.371337, 7000);

	SetPlayerInterior(playerid, 1);
}
SetPlayerInBed(playerid)
{
	if(pData[playerid][pBedType] == 1) 
	{
		SetCameraBehindPlayer(playerid);
		SetPlayerArmedWeapon(playerid, 0);
		TogglePlayerControllable(playerid, 0);
		SetTimerEx("UnfreezePlayerEx", 8000, false, "i", playerid);
	}
}
SetPlayerInJail(playerid)
{
	if(pData[playerid][pCallLine] != INVALID_PLAYER_ID)
	{
 		HangupCall(pData[playerid][pCallLine], HANGUP_DROPPED);
	}

	if(pData[playerid][pJailType] == 1) // /prisonic
	{
		new index = random(sizeof(highcellSpawns));
		TeleportToCoords(playerid, highcellSpawns[index][0], highcellSpawns[index][1], highcellSpawns[index][2], highcellSpawns[index][3],1,1);
	}
	else if(pData[playerid][pJailType] == 2) // /jail /prison
	{
		new index = random(sizeof(highcellSpawns));
		TeleportToCoords(playerid, highcellSpawns[index][0], highcellSpawns[index][1], highcellSpawns[index][2], highcellSpawns[index][3],1,1);
	}
	else if(pData[playerid][pJailType] == 3) // IC prison
	{
		ResetPlayerWeaponsEx(playerid);
		ResetPlayer(playerid);
		SetCameraBehindPlayer(playerid);
		SetPlayerArmedWeapon(playerid, 0);
		TogglePlayerControllable(playerid, 0);
		SetTimerEx("UnfreezePlayerEx", 8000, false, "i", playerid);
	}
	ResetPlayerWeaponsEx(playerid);
	ResetPlayer(playerid);
	SetCameraBehindPlayer(playerid);
	SetPlayerArmedWeapon(playerid, 0);
	TogglePlayerControllable(playerid, 0);
	SetTimerEx("UnfreezePlayerEx", 8000, false, "i", playerid);
}
TeleportToVehicle(playerid, vehicleid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z,
		Float:a,
		interior,
		garageid;

	GetVehiclePos(vehicleid, x, y, z);
	GetVehicleZAngle(vehicleid, a);

	if((garageid = GetVehicleGarage(vehicleid)) >= 0)
	{
 		interior = garageInteriors[GarageInfo[garageid][gType]][intID];
	}

	TeleportToCoords(playerid, x + 1, y + 1, z + 1, a, interior, GetVehicleVirtualWorld(vehicleid));
}

TeleportToPlayer(playerid, targetid, bool:vehicle = true)
{
	new
	    Float:x,
	    Float:y,
	    Float:z,
		Float:a;

	GetPlayerPos(targetid, x, y, z);
	GetPlayerFacingAngle(targetid, a);

	TeleportToCoords(playerid, x + 1, y + 1, z, a, GetPlayerInterior(targetid), GetPlayerVirtualWorld(targetid), .vehicle = vehicle);
}

TeleportToCoords(playerid, Float:x, Float:y, Float:z, Float:angle, interiorid, worldid, bool:freeze = false, bool:vehicle = true)
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if((vehicle) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    foreach(new i : Player)
	    {
	        if(IsPlayerInVehicle(i, vehicleid))
	        {
	            SetPlayerInterior(i, interiorid);
	            SetPlayerVirtualWorld(i, worldid);
			}
	    }

        SetVehiclePos(vehicleid, x, y, z);
     	SetVehicleZAngle(vehicleid, angle);
	    SetVehicleVirtualWorld(vehicleid, worldid);
	    LinkVehicleToInterior(vehicleid, interiorid);
	}
	else
	{
	    SetPlayerPos(playerid, x, y, z);
	    SetPlayerFacingAngle(playerid, angle);
		SetPlayerInterior(playerid, interiorid);
		SetPlayerVirtualWorld(playerid, worldid);
		SetCameraBehindPlayer(playerid);
	}

	if((freeze) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
        SetTimerEx("VehicleUnfreeze", 3000, false, "iifffii", playerid, GetPlayerVehicleID(playerid), x, y, z, interiorid, worldid);
        //ShowFreezeTextdraw(playerid);
        TogglePlayerControllable(playerid, 0);
	}
}
TeleportToGarage(playerid, Float:x, Float:y, Float:z, Float:angle, interiorid, worldid, bool:freeze = true, bool:vehicle = true)
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if((vehicle) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    foreach(new i : Player)
	    {
	        if(IsPlayerInVehicle(i, vehicleid))
	        {
	            SetPlayerInterior(i, interiorid);
	            SetPlayerVirtualWorld(i, worldid);
			}
	    }

        SetVehiclePos(vehicleid, x, y, z);
     	SetVehicleZAngle(vehicleid, angle);
	    SetVehicleVirtualWorld(vehicleid, worldid);
	    LinkVehicleToInterior(vehicleid, interiorid);
	}
	else
	{
	    SetPlayerPos(playerid, x, y, z);
	    SetPlayerFacingAngle(playerid, angle);
		SetPlayerInterior(playerid, interiorid);
		SetPlayerVirtualWorld(playerid, worldid);
		SetCameraBehindPlayer(playerid);
	}

	if((freeze) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
        SetTimerEx("VehicleUnfreeze", 3000, false, "iifffii", playerid, GetPlayerVehicleID(playerid), x, y, z, interiorid, worldid);
		SCM(playerid, COLOR_SYNTAX, "Loading Objects...");
		//Dyuze(playerid, "Notice", "Loading objects...");
        TogglePlayerControllable(playerid, 0);
	}
}

ShowLandsOnMap(playerid, enable)
{
	for(new i = 0; i < MAX_LANDS; i ++)
	{
	    if(LandInfo[i][lExists])
	    {
		    if(enable) {
 				GangZoneShowForPlayer(playerid, LandInfo[i][lGangZone], (LandInfo[i][lOwnerID] > 0) ? (0x0080FFAA) : (0x33CC33AA));
			} else {
		    	GangZoneHideForPlayer(playerid, LandInfo[i][lGangZone]);
			}
		}
	}

	pData[playerid][pShowLands] = enable;
}

ShowTurfsOnMap(playerid, enable)
{
	for(new i = 0; i < MAX_TURFS; i ++)
	{
	    if(TurfInfo[i][tExists])
	    {
		    if(enable)
			{
			    GangZoneShowForPlayer(playerid, TurfInfo[i][tGangZone], GetTurfColor(i));

			    if(TurfInfo[i][tCapturer] == INVALID_PLAYER_ID)
			    {
                    GangZoneStopFlashForPlayer(playerid, TurfInfo[i][tGangZone]);
			    }
			    else
			    {
				    if(pData[TurfInfo[i][tCapturer]][pGang] == -1 && GetFactionType(TurfInfo[i][tCapturer]) == FACTION_POLICE)
				        GangZoneFlashForPlayer(playerid, TurfInfo[i][tGangZone], 0x000000AA);
					else if(pData[TurfInfo[i][tCapturer]][pGang] >= 0)
						GangZoneFlashForPlayer(playerid, TurfInfo[i][tGangZone], (GangInfo[pData[TurfInfo[i][tCapturer]][pGang]][gColor] & ~0xff) + 0xAA);
				}
			}
			else
			{
		    	GangZoneHideForPlayer(playerid, TurfInfo[i][tGangZone]);
			}
		}
	}

	pData[playerid][pShowTurfs] = enable;
}

CancelZoneCreation(playerid)
{
    for(new i = 0; i < 4; i ++)
    {
        DestroyDynamicPickup(pData[playerid][pZonePickups][i]);
        pData[playerid][pZonePickups][i] = -1;
	}

	GangZoneDestroy(pData[playerid][pZoneID]);

	pData[playerid][pZoneID] = -1;
	pData[playerid][pZoneCreation] = 0;
    pData[playerid][pMinX] = 0.0;
    pData[playerid][pMinY] = 0.0;
    pData[playerid][pMaxX] = 0.0;
    pData[playerid][pMaxY] = 0.0;
}

ResetCooking(playerid)
{
    pData[playerid][pCookMeth] = 0;
	pData[playerid][pCookGrams] = 0;
	pData[playerid][pCookTime] = 0;
}

ResetPlayer(playerid)
{
    if(pData[playerid][pJoinedEvent])
	{
		SetPlayerSkin(playerid, pData[playerid][pSkin]);
		ResetPlayerWeapons(playerid);
		pData[playerid][pJoinedEvent] = 0;
	}
	if(pData[playerid][pPaintball])
	{
	    ResetPlayerWeapons(playerid);
		pData[playerid][pPaintball] = 0;
	}
	if(pData[playerid][pPaintball2])
	{
	    ResetPlayerWeapons(playerid);
		pData[playerid][pPaintball2] = 0;
	}
	if(pData[playerid][pHospital])
	{
	    GameTextForPlayer(playerid, " ", 100, 3);
	    pData[playerid][pHospital] = 0;
	    pData[playerid][pHospitalTime] = 0;
	}
	if(pData[playerid][pMiningTime] > 0)
	{
	    ClearAnimations(playerid, 1);
	}
	if(pData[playerid][pConstructionTime] > 0)
	{
	    ClearAnimations(playerid, 1);
	}
	if(pData[playerid][pTazedTime] > 0)
	{
	    ClearAnimations(playerid, 1);
	    TogglePlayerControllable(playerid, 1);
	}
	if(pData[playerid][pCuffed])
	{
	    TogglePlayerControllable(playerid, 1);
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	}
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
	{
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	}
	if(pData[playerid][pLiveBroadcast] != INVALID_PLAYER_ID)
	{
	    pData[pData[playerid][pLiveBroadcast]][pLiveBroadcast] = INVALID_PLAYER_ID;
	    pData[playerid][pLiveBroadcast] = INVALID_PLAYER_ID;
	}
	if(pData[playerid][pPlantedBomb])
	{
	    DestroyDynamicObject(pData[playerid][pBombObject]);
	    pData[playerid][pBombObject] = INVALID_OBJECT_ID;
	    pData[playerid][pPlantedBomb] = 0;
	}
	if(pData[playerid][pFreezeTimer] >= 0)
	{
	    KillTimer(pData[playerid][pFreezeTimer]);
	    TogglePlayerControllable(playerid, 1);
		pData[playerid][pFreezeTimer] = -1;
	}
	if(pData[playerid][pDueling] != INVALID_PLAYER_ID)
	{
		pData[pData[playerid][pDueling]][pDueling] = INVALID_PLAYER_ID;
		pData[playerid][pDueling] = INVALID_PLAYER_ID;
	}
	if(RobberyInfo[rPlanning] || RobberyInfo[rStarted])
	{
		RemoveFromBankRobbery(playerid);
	}

	pData[playerid][pInjured] = 0;
	pData[playerid][pBrokenLeg] = 0;
	pData[playerid][pAcceptedHelp] = 0;
	pData[playerid][pMiningTime] = 0;
	pData[playerid][pConstructionTime] = 0;
	pData[playerid][pConstruction] = 0;
	pData[playerid][pChatstyle] = 0;
	pData[playerid][pMiningRock] = 0;
	pData[playerid][pSpeedTime] = 0;
	pData[playerid][pGraffiti] = -1;
	pData[playerid][pGraffitiTime] = 0;
	pData[playerid][pTazer] = 0;
	pData[playerid][pTazedTime] = 0;
	pData[playerid][pBeanbag] = 0;
	pData[playerid][pBeanbagTime] = 0;
	pData[playerid][pCuffed] = 0;
	pData[playerid][pTied] = 0;
	pData[playerid][pDraggedBy] = INVALID_PLAYER_ID;
	pData[playerid][pDelivered] = 0;
	pData[playerid][pContractTaken] = INVALID_PLAYER_ID;
    pData[playerid][pPoisonTime] = 0;
    pData[playerid][pCapturingPoint] = -1;
    pData[playerid][pCaptureTime] = 0;

 	CancelActiveCheckpoint(playerid);
 	RemovePlayerAttachedObject(playerid, 9);
}
forward OtherTimerEx(playerid, type);
public OtherTimerEx(playerid, type)
{
	switch(type)
	{
		case TYPE_TPLUMBERJACKRUNTIMER:
		{
	    	if(GetPVarInt(playerid, "tpLumberJackRunTimer") > 0)
			{
				SetPVarInt(playerid, "tpLumberJackRunTimer", GetPVarInt(playerid, "tpLumberJackRunTimer")-1);
				SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPLUMBERJACKRUNTIMER);
			}
		}
	}
}
forward Lumbers(playerid);
public Lumbers(playerid)
{
	if(IsPlayerAttachedObjectSlotUsed(playerid, 8)) RemovePlayerAttachedObject(playerid, 8);
	SetPlayerAttachedObject(playerid, 8, 1463, 1,0.20,0.36,0.0,0.0,90.0, 0.0, 0.4, 0.3, 0.6);
	pData[playerid][pCP] = CHECKPOINT_LUMBERJACKRUN;
	SetPlayerCheckpoint(playerid, 2351.5188,-653.9022,128.0547, 3);
	SendClientMessage(playerid, COLOR_WHITE,"You got some lumber,deliver them and get your salary!");
	Lumbered[playerid] = 1;
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
	return 1;
}
forward StopAnim1(playerid);
public StopAnim1(playerid)
{
	LumberJacking[playerid] = 0;
	Lumber1[playerid] += 1;
   	if(Lumber1[playerid] >= 7)
	{
	    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0, 1);
		SetTimerEx("Lumbers", 2000, 0, "i", playerid);
		SetPVarInt(playerid, "LumberJackRun", 1);
		SetPVarInt(playerid, "tpLumberJackRunTimer", 7);
		SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPLUMBERJACKRUNTIMER);
		return 1;
	}
	ClearAnimations(playerid);
	return 1;
}
forward garbagewait(playerid);
public garbagewait(playerid)
{
	SCM(playerid, COLOR_SYNTAX, "Garage Loaded: Proceed  to the next checkpoint.");
	//Dyuze(playerid, "Garbage Loaded", "Proceed to the next checkpoint.");
    TogglePlayerControllable(playerid, 1);
}

CancelActiveCheckpoint(playerid)
{
    if(pData[playerid][pDrivingTest])
	{
		SetVehicleToRespawn(pData[playerid][pTestVehicle]);
	}
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
	{
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	    RemovePlayerAttachedObject(playerid, 9);
    }

    DisablePlayerCheckpoint(playerid);

	pData[playerid][pCP] = CHECKPOINT_NONE;
	pData[playerid][pPizzas] = 0;
	pData[playerid][pSmuggleMats] = 0;
	pData[playerid][pSmuggleDrugs] = 0;
	pData[playerid][pDrivingTest] = 0;
	pData[playerid][pTestVehicle] = INVALID_VEHICLE_ID;
	pData[playerid][pTestCP] = 0;
    pData[playerid][pMiningRock] = 0;
    pData[playerid][pConstruction] = 0;
    pData[playerid][pShipment] = -1;
    pData[playerid][pIllegalCargo] = -1;
    pData[playerid][pGarbage] = 0;
}

ReferralCheck(playerid)
{
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, ip FROM users WHERE uid = %i", pData[playerid][pReferralUID]);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_REWARD_REFERRER, playerid);
}
forward ReturnChatAnimation(playerid, text[]);
public ReturnChatAnimation(playerid, text[])
{
    if(pData[playerid][pLoopAnim] != 0)
	{
	    return 1;
	}
	switch(pData[playerid][pChatstyle])
	{
		case 0: ApplyAnimation(playerid,"PED","IDLE_CHAT",4.0,1,1,0,1,1,1);
		case 1: ApplyAnimation(playerid, "GANGS", "PRTIAL_GNGTLKA",4.0,1,0,0,1,1,1);
		case 2: ApplyAnimation(playerid, "GANGS", "PRTIAL_GNGTLKB", 4.0,1,0,0,1,1,1);
		case 3: ApplyAnimation(playerid, "GANGS", "PRTIAL_GNGTLKD", 4.0,1,0,0,1,1,1);
		case 4: ApplyAnimation(playerid, "GANGS", "PRTIAL_GNGTLKE", 4.0,1,0,0,1,1,1);
		case 5: ApplyAnimation(playerid, "GANGS", "PRTIAL_GNGTLKF", 4.0,1,0,0,1,1,1);
		case 6: ApplyAnimation(playerid, "GANGS", "PRTIAL_GNGTLKG", 4.0,1,0,0,1,1,1);
		case 7: ApplyAnimation(playerid, "GANGS", "PRTIAL_GNGTLKH", 4.0,1,0,0,1,1,1);
	}
	if(strlen(text) <= 16) SetTimerEx("TIMER_EndChatAnim",2000, 0, "i", playerid);
	else if(strlen(text) <= 32 && strlen(text) > 16) SetTimerEx("TIMER_EndChatAnim",3500, 0, "i", playerid);
	else if(strlen(text) <= 64 && strlen(text) > 32) SetTimerEx("TIMER_EndChatAnim",4000, 0, "i", playerid);
	else if(strlen(text) <= 96 && strlen(text) > 64) SetTimerEx("TIMER_EndChatAnim",4500, 0, "i", playerid);
	else if(strlen(text) <= 128 && strlen(text) > 96) SetTimerEx("TIMER_EndChatAnim",5000, 0, "i", playerid);
	else if(strlen(text) > 128) SetTimerEx("TIMER_EndChatAnim",5500, 0, "i", playerid);
	return 1;
}

forward TIMER_EndChatAnim(playerid);
public TIMER_EndChatAnim(playerid)
{
	if(pData[playerid][pInjured] != 1)
		return ApplyAnimation(playerid, "CARRY", "crry_prtial", 4, 0, 0, 0, 0, 0, 1);
	return 1;
}
public OnPlayerStreamIn(playerid, forplayerid)
{
	/*if(pData[playerid][pTagType] != TAG_NONE)
	{
	    ShowPlayerNameTagForPlayer(forplayerid, playerid, 0);
	}
	else
	{
	    ShowPlayerNameTagForPlayer(forplayerid, playerid, 1);
	}*/
	return 1;
}

SetPlayerSpecialTag(playerid, type)
{
	new
	    string[128];

	if(IsValidDynamic3DTextLabel(pData[playerid][pSpecialTag]))
	{
		DestroyDynamic3DTextLabel(pData[playerid][pSpecialTag]);
        pData[playerid][pSpecialTag] = Text3D:INVALID_3DTEXT_ID;
	}

    foreach(new i : Player)
	{
	    if(type == TAG_NORMAL)
		    ShowPlayerNameTagForPlayer(i, playerid, 1);
		else
		    ShowPlayerNameTagForPlayer(i, playerid, 1);
	}

	switch(type)
    {
		case TAG_ADMIN:
        {
            if(!strcmp(pData[playerid][pAdminName], "None", true))
	            format(string, sizeof(string), ""SVRCLR"Adminstrating - "WHITE"%s", GetAdminRank(playerid));
			else
			    format(string, sizeof(string), ""SVRCLR"%s\nAdminstrating - "WHITE"%s", pData[playerid][pAdminName], GetAdminRank(playerid));

			/*if(strlen(GetAdminDivisionFull(playerid)) > 0)
			{
				format(string, sizeof(string), "%s\n{00C2E0}%s", string, GetAdminDivisionFull(playerid));
			}*/
			pData[playerid][pSpecialTag] = CreateDynamic3DTextLabel(string, COLOR_WHITE, 0.0, 0.0, 0.2, 20.0, .attachedplayer = playerid, .testlos = 1);
		}
		case TAG_HELPER:
		{
		    format(string, sizeof(string), ""SVRCLR"Assisting - "WHITE"%s", GetHelperRank(playerid));
			pData[playerid][pSpecialTag] = CreateDynamic3DTextLabel(string, COLOR_WHITE, 0.0, 0.0, 0.2, 20.0, .attachedplayer = playerid, .testlos = 1);
		}
		case TAG_AFK:
		{
			format(string, sizeof(string), "Tabbed for "GREEN"%d"WHITE" second(s)", pData[playerid][pAFKTime]);
			pData[playerid][pSpecialTag] = CreateDynamic3DTextLabel(string, COLOR_WHITE, 0.0, 0.0, 0.2, 20.0, .attachedplayer = playerid, .testlos = 1);
		}
	}

	pData[playerid][pTagType] = type;
}
ShowCopClothingMenu(playerid)
{
	new models[sizeof(copClothing)];

	for(new i = 0; i < sizeof(copClothing); i ++) {
	    models[i] = copClothing[i][cModel];
	}

	ShowPlayerSelectionMenu(playerid, MODEL_SELECTION_COPCLOTHING, "LEO Clothing", models, sizeof(models));
}
SendNewbieChatMessage(playerid, text[])
{
	new string[64];
	if((!isnull(pData[playerid][pCustomTitle]) && strcmp(pData[playerid][pCustomTitle], "None", true) != 0 && strcmp(pData[playerid][pCustomTitle], "0", true) != 0) && strcmp(pData[playerid][pCustomTitle], "NULL", true) != 0) {
	    new color;
		if(pData[playerid][pCustomTColor] == -1 || pData[playerid][pCustomTColor] == -256)
		{
	    	color = 0xC8C8C8FF;
		}
		else
		{
		    color = pData[playerid][pCustomTColor];
		}
	    format(string, sizeof(string), "{%06x}%s{7DAEFF} %s", color >>> 8, pData[playerid][pCustomTitle], GetRPName(playerid));

    }
	else if(pData[playerid][pAdmin] > 1)
	{
	    format(string, sizeof(string), "%s{7DAEFF} %s", GetColorARank(playerid), GetRPName(playerid));
	} else if(pData[playerid][pHelper] > 0) {
	    format(string, sizeof(string), "{33CCFF}%s{7DAEFF} %s", GetHelperRank(playerid), GetRPName(playerid));
    } else if(pData[playerid][pFormerAdmin]) {
	    format(string, sizeof(string), "Former Admin %s", GetRPName(playerid));
	} else if(pData[playerid][pDonator] > 0) {
		format(string, sizeof(string), "%s{7DAEFF} %s", GetDonatorRank(pData[playerid][pDonator]), GetRPName(playerid));
	} else if(pData[playerid][pLevel] > 1) {
	    format(string, sizeof(string), "Level %i Player %s", pData[playerid][pLevel], GetRPName(playerid));
	} else {
	    format(string, sizeof(string), "Newbie %s", GetRPName(playerid));
	}

    foreach(new i : Player)
	{
	    if(!pData[i][pToggleNewbie])
	    {
	        if(strlen(text) > MAX_SPLIT_LENGTH)
	        {
				SM(i, COLOR_NEWBIE, "[?] %s: %.*s...", string, MAX_SPLIT_LENGTH, text);
				SM(i, COLOR_NEWBIE, "[?] %s: ...%s", string, text[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SM(i, COLOR_NEWBIE, "[?] %s: %s", string, text);
			}
		}
	}

	if(pData[playerid][pAdmin] < 2 && pData[playerid][pHelper] == 0)
	{
 		pData[playerid][pLastNewbie] = gettime();
	}
}

SellWeapon(playerid, targetid, weaponid, price = 0)
{
	new cost;

	switch(weaponid)
	{
	    case 1: cost = 25;
	    case 2, 5..8, 15: cost = 50;
	    case 22: cost = 100;
	    case 23: cost = 125;
	    case 24: cost = 1250;
	    case 25: cost = 250;
	    case 29: cost = 500;
	    case 28, 32: cost = 500;
	    case 30: cost = 2500;
	    case 33: cost = 350;
	    case 34: cost = 4000;
	    case 27: cost = 4000;
	}

    if(pData[playerid][pMaterials] >= cost)
    {
		pData[playerid][pMaterials] -= cost;

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", pData[playerid][pMaterials], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		if(targetid == playerid)
		{
		    SM(playerid, COLOR_AQUA, "You have crafted yourself a "SVRCLR"%s{CCFFFF}.", GetWeaponNameEx(weaponid));
		    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s puts together some materials and crafts themselves a %s.", GetRPName(playerid), GetWeaponNameEx(weaponid));
		}
		else
		{
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s puts together some materials and crafts a %s for %s.", GetRPName(playerid), GetWeaponNameEx(weaponid), GetRPName(targetid));
			SM(playerid, COLOR_AQUA, "You have sold %s a "SVRCLR"%s{CCFFFF} for $%i.", GetRPName(targetid), GetWeaponNameEx(weaponid), price);
			SM(targetid, COLOR_AQUA, "%s has sold you a "SVRCLR"%s{CCFFFF} for $%i.", GetRPName(playerid), GetWeaponNameEx(weaponid), price);

			GivePlayerCash(playerid, price);
			GivePlayerCash(targetid, -price);

			IncreaseJobSkill(playerid, JOB_ARMSDEALER);

	    	if(GetJobLevel(playerid, JOB_ARMSDEALER) < 5)
	    	{
	        	if(pData[playerid][pWeaponSkill] < 30) {
	        		SM(playerid, COLOR_YELLOW, "You need to sell%i more weapons in order to level up.", 30 - pData[playerid][pWeaponSkill]);
	        	} else if(pData[playerid][pWeaponSkill] < 80) {
	        		SM(playerid, COLOR_YELLOW, "You need to sell %i more weapons in order to level up.", 80 - pData[playerid][pWeaponSkill]);
	        	} else if(pData[playerid][pWeaponSkill] < 180) {
	        		SM(playerid, COLOR_YELLOW, "You need to sell %i more weapons in order to level up.", 180 - pData[playerid][pWeaponSkill]);
            	} else if(pData[playerid][pWeaponSkill] < 480) {
	        		SM(playerid, COLOR_YELLOW, "You need to sell %i more weapons in order to level up.", 480 - pData[playerid][pWeaponSkill]);
				}
			}
			else
			{
				//
			}

	    	/*if(GetJobLevel(playerid, JOB_ARMSDEALER) == 1) // J E C K
	    	{
	    		if(weaponid >= 5 && weaponid >= 6 && weaponid >= 2 && weaponid >= 7 && weaponid >= 8 && weaponid >= 15 && weaponid >= 1)
				{
					IncreaseJobSkill(playerid, JOB_ARMSDEALER);
				}

			}
	    	if(GetJobLevel(playerid, JOB_ARMSDEALER) == 2)
	    	{
                if(weaponid >= 22 && weaponid >= 23 && weaponid >= 25)
				{
					IncreaseJobSkill(playerid, JOB_ARMSDEALER);
				}
			}

	    	if(GetJobLevel(playerid, JOB_ARMSDEALER) == 3)
      		{
                if(weaponid >= 28 && weaponid >= 29 && weaponid >= 32)
				{
					IncreaseJobSkill(playerid, JOB_ARMSDEALER);
				}
			}

	    	if(GetJobLevel(playerid, JOB_ARMSDEALER) == 4)
	    	{
	        	if(weaponid >= 24 && weaponid >= 33)
				{
					IncreaseJobSkill(playerid, JOB_ARMSDEALER);
				}
			}

	    	if(GetJobLevel(playerid, JOB_ARMSDEALER) == 5)
	    	{
                if(weaponid >= 30)
				{
					IncreaseJobSkill(playerid, JOB_ARMSDEALER);
				}
			}*/
		}

		GiveWeapon(targetid, weaponid);
		return 1;
	}
	else
	{
	    SCM(targetid, COLOR_SYNTAX, "That player has ran out of materials.");
	}

	return 0;
}

Namechange(playerid, oldname[], newname[])
{
    for(new i = 0; i < MAX_HOUSES; i ++)
    {
        if(HouseInfo[i][hExists] && !strcmp(HouseInfo[i][hOwner], oldname, false))
        {
            strcpy(HouseInfo[i][hOwner], newname, MAX_PLAYER_NAME);
            ReloadHouse(i);
        }
    }

    for(new i = 0; i < MAX_GARAGES; i ++)
    {
        if(GarageInfo[i][gExists] && !strcmp(GarageInfo[i][gOwner], oldname, false))
        {
            strcpy(GarageInfo[i][gOwner], newname, MAX_PLAYER_NAME);
            ReloadGarage(i);
        }
    }

    for(new i = 0; i < MAX_BUSINESSES; i ++)
    {
        if(BusinessInfo[i][bExists] && !strcmp(BusinessInfo[i][bOwner], oldname, false))
        {
            strcpy(BusinessInfo[i][bOwner], newname, MAX_PLAYER_NAME);
            ReloadBusiness(i);
        }
    }


    for(new i = 0; i < MAX_VEHICLES; i ++)
    {
        if(IsValidVehicle(i) && VehicleInfo[i][vID] && !strcmp(VehicleInfo[i][vOwner], oldname, false))
        {
            strcpy(VehicleInfo[i][vOwner], newname, MAX_PLAYER_NAME);
        }
    }

	for(new i = 0; i < MAX_LANDS; i ++)
    {
        if(LandInfo[i][lExists] && !strcmp(LandInfo[i][lOwner], oldname, false))
        {
            strcpy(LandInfo[i][lOwner], newname, MAX_PLAYER_NAME);
            ReloadLand(i);
        }
    }

	// Updating queries.
    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET owner = '%s' WHERE owner = '%s'", newname, oldname);
    mysql_tquery(connectionID, queryBuffer);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET owner = '%s' WHERE owner = '%s'", newname, oldname);
    mysql_tquery(connectionID, queryBuffer);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET owner = '%s' WHERE owner = '%s'", newname, oldname);
    mysql_tquery(connectionID, queryBuffer);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET owner = '%s' WHERE owner = '%s'", newname, oldname);
    mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE lands SET owner = '%s' WHERE owner = '%s'", newname, oldname);
    mysql_tquery(connectionID, queryBuffer);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET username = '%s' WHERE uid = %i", newname, pData[playerid][pID]);
    mysql_tquery(connectionID, queryBuffer);

	strcpy(pData[playerid][pUsername], newname, MAX_PLAYER_NAME);

    SetPlayerName(playerid, newname);
    SavePlayerVariables(playerid);
}

IsABoat(vehicleid)
{
    switch(GetVehicleModel(vehicleid))
    {
        case 430, 446, 452..454, 472, 473, 484, 493, 595: return 1;
    }

    return 0;
}

IsAGarbageCar(carid)
{
	for(new v =0; v < sizeof(garbageVehicles); v++){
		if(carid == garbageVehicles[v]) return 1;
	}
	if(VehicleInfo[carid][vJob] == JOB_GARBAGEMAN) return 1;
	return 0;
}

IsLawEnforcement(playerid)
{
	return GetFactionType(playerid) == FACTION_POLICE || GetFactionType(playerid) == FACTION_SHERIFF || GetFactionType(playerid) == FACTION_FEDERAL;
}
IsSheriff(playerid)
{
	return GetFactionType(playerid) == FACTION_SHERIFF;
}
IsPlayerBeingFound(playerid)
{
	foreach(new i : Player)
	{
	    if(pData[i][pFindPlayer] == playerid && pData[i][pFindTime] > 0)
	    {
	        return 1;
		}
	}

	return 0;
}
IsGateModel(modelid)
{
    switch(modelid)
    {
        case 8957, 7891, 3037, 19861, 19864, 19912, 971, 975, 980, 985, 19870, 988:
        {
            return 1;
        }
    }

	return 0;
}
IsGateObject(objectid)
{
    new
		modelid = Streamer_GetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_MODEL_ID);

	if((modelid) && IsGateModel(modelid))
	{
	    return 1;
	}

	return 0;
}

IsDoorObject(objectid)
{
	new
		modelid = Streamer_GetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_MODEL_ID);

	if((modelid) && !IsGateObject(objectid))
	{
		for(new i = 0; i < sizeof(furnitureArray); i ++)
		{
	    	if(!strcmp(furnitureArray[i][fCategory], "Doors & Gates") && furnitureArray[i][fModel] == modelid)
	    	{
		        return 1;
			}
		}
	}

	return 0;
}

RemoveFaction(factionid)
{
	foreach(new i : Player)
	{
	    if(pData[i][pFaction] == factionid)
	    {
			ResetPlayerWeaponsEx(i);
	        SM(i, COLOR_LIGHTRED, "The faction you were apart of has been deleted by an administrator.");
            SetPlayerSkin(i, 230);

	        pData[i][pFaction] = -1;
	        pData[i][pFactionRank] = 0;
	        pData[i][pDivision] = -1;
	        pData[i][pDuty] = 0;
	    }
	}
	for(new i = 0; i < MAX_LOCKERS; i ++)
	{
		if(LockerInfo[i][lExists] && LockerInfo[i][lFaction] == factionid)
		{
		    DestroyDynamic3DTextLabel(LockerInfo[i][lText]);
		    DestroyDynamicPickup(LockerInfo[i][lPickup]);
		    LockerInfo[i][lExists] = 0;
		}
	}
	DestroyDynamic3DTextLabel(FactionInfo[factionid][fText]);
	DestroyDynamicPickup(FactionInfo[factionid][fPickup]);

    FactionInfo[factionid][fName] = 0;
    FactionInfo[factionid][fLeader] = 0;
	FactionInfo[factionid][fType] = FACTION_NONE;
	FactionInfo[factionid][fColor] = 0;
	FactionInfo[factionid][fRankCount] = 0;
    FactionInfo[factionid][fLockerX] = 0.0;
    FactionInfo[factionid][fLockerY] = 0.0;
    FactionInfo[factionid][fLockerZ] = 0.0;
    FactionInfo[factionid][fLockerInterior] = 0;
    FactionInfo[factionid][fLockerWorld] = 0;
    FactionInfo[factionid][fTurfTokens] = 0;
    FactionInfo[factionid][fText] = Text3D:INVALID_3DTEXT_ID;
    FactionInfo[factionid][fPickup] = -1;

    for(new i = 0; i < MAX_FACTION_RANKS; i ++)
    {
        strcpy(FactionRanks[factionid][i], "Unspecified", 32);
        FactionInfo[factionid][fPaycheck][i] = 0;
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM factions WHERE id = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM factionranks WHERE id = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM factionskins WHERE id = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM factionpay WHERE id = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM divisions WHERE id = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM factionlockers WHERE factionid = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);
	
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET faction = -1, factionrank = 0, division = -1 WHERE faction = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);
}

GetFactionSkinCount(factionid)
{
	new count;

	for(new i = 0; i < MAX_FACTION_SKINS; i ++)
	{
	    if(FactionInfo[factionid][fSkins][i] != 0)
	    {
	        count++;
		}
	}

	return count;
}

GetFactionType(playerid)
{
	if(pData[playerid][pFaction] >= 0)
	{
	    return FactionInfo[pData[playerid][pFaction]][fType];
	}

	return FACTION_NONE;
}

SetupFaction(factionid, name[], type)
{
    strcpy(FactionInfo[factionid][fName], name, 48);
   	strcpy(FactionInfo[factionid][fShortName], "None", 24);
	strcpy(FactionInfo[factionid][fLeader], "Pending", MAX_PLAYER_NAME);

    FactionInfo[factionid][fType] = type;
    FactionInfo[factionid][fColor] = 0xFFFFFF00;
    FactionInfo[factionid][fRankCount] = 6;
    FactionInfo[factionid][fLockerX] = 0.0;
    FactionInfo[factionid][fLockerY] = 0.0;
    FactionInfo[factionid][fLockerZ] = 0.0;
    FactionInfo[factionid][fLockerInterior] = 0;
    FactionInfo[factionid][fLockerWorld] = 0;
    FactionInfo[factionid][fTurfTokens] = 0;
    FactionInfo[factionid][fText] = Text3D:INVALID_3DTEXT_ID;
    FactionInfo[factionid][fPickup] = -1;

    for(new i = 0; i < MAX_FACTION_RANKS; i ++)
    {
        strcpy(FactionRanks[factionid][i], "Unspecified", 32);
        FactionInfo[factionid][fPaycheck][i] = 0;
	}
	for(new i = 0; i < MAX_FACTION_SKINS; i ++)
	{
	    FactionInfo[factionid][fSkins][i] = 0;
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO factions (id, name, type) VALUES(%i, '%e', %i)", factionid, name, type);
	mysql_tquery(connectionID, queryBuffer);
}

new nagid;
new nagname[50];

SetupGang(gangid, name[])
{
	strcpy(GangInfo[gangid][gName], name, 32);
	strcpy(GangInfo[gangid][gMOTD], "None", 128);
	strcpy(GangInfo[gangid][gLeader], "Pending", MAX_PLAYER_NAME);

	GangInfo[gangid][gSetup] = 1;
	GangInfo[gangid][gColor] = 0xFFFFFF00;
	GangInfo[gangid][gStrikes] = 0;
	GangInfo[gangid][gLevel] = 1;
	GangInfo[gangid][gPoints] = 0;
	GangInfo[gangid][gTurfTokens] = 0;
	GangInfo[gangid][gStashX] = 0.0;
	GangInfo[gangid][gStashY] = 0.0;
	GangInfo[gangid][gStashZ] = 0.0;
	GangInfo[gangid][gStashInterior] = 0;
	GangInfo[gangid][gStashWorld] = 0;
	GangInfo[gangid][gCash] = 0;
	GangInfo[gangid][gMaterials] = 0;
	GangInfo[gangid][gPot] = 0;
	GangInfo[gangid][gCrack] = 0;
	GangInfo[gangid][gMeth] = 0;
	GangInfo[gangid][gPainkillers] = 0;
	GangInfo[gangid][gHPAmmo] = 0;
	GangInfo[gangid][gPoisonAmmo] = 0;
	GangInfo[gangid][gFMJAmmo] = 0;
    GangInfo[gangid][gArmsDealer] = 0;
    GangInfo[gangid][gDrugDealer] = 0;
    GangInfo[gangid][gArmsX] = 0.0;
    GangInfo[gangid][gArmsY] = 0.0;
    GangInfo[gangid][gArmsZ] = 0.0;
    GangInfo[gangid][gDrugX] = 0.0;
    GangInfo[gangid][gDrugY] = 0.0;
    GangInfo[gangid][gDrugZ] = 0.0;
    GangInfo[gangid][gArmsWorld] = 0;
    GangInfo[gangid][gDrugWorld] = 0;
    GangInfo[gangid][gDrugPot] = 0;
    GangInfo[gangid][gDrugCrack] = 0;
    GangInfo[gangid][gDrugMeth] = 0;
    GangInfo[gangid][gArmsMaterials] = 0;
    GangInfo[gangid][gAlliance] = -1;
    GangInfo[gangid][gArmsHPAmmo] = 0;
    GangInfo[gangid][gArmsPoisonAmmo] = 0;
    GangInfo[gangid][gArmsFMJAmmo] = 0;
    GangInfo[gangid][gPickup] = -1;
    GangInfo[gangid][gActors][0] = INVALID_ACTOR_ID;
    GangInfo[gangid][gActors][1] = INVALID_ACTOR_ID;
    GangInfo[gangid][gText][0] = Text3D:INVALID_3DTEXT_ID;
    GangInfo[gangid][gText][1] = Text3D:INVALID_3DTEXT_ID;
    GangInfo[gangid][gText][2] = Text3D:INVALID_3DTEXT_ID;

	for(new i = 0; i < 7; i ++)
    {
        strcpy(GangRanks[gangid][i], "Unspecified", 32);
	}

	for(new i = 0; i < 12; i ++)
	{
	    if(i < 3)
	    {
	        GangInfo[gangid][gDrugPrices][i] = 0;
		}

		GangInfo[gangid][gArmsPrices][i] = 0;
	}

	for(new i = 0; i < MAX_GANG_SKINS; i ++)
	{
        GangInfo[gangid][gSkins][i] = 0;
	}

	new DCC_Guild:guild = DCC_FindGuildById("905667779103977522");
	nagid = gangid;
	strcpy(nagname, name, 50);
	DCC_CreateGuildRole(guild, name, "CreateGangRole", "i", 0);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO gangs (id, name) VALUES(%i, '%e')", gangid, name);
	mysql_tquery(connectionID, queryBuffer);
}

forward CreateGangRole();
public CreateGangRole()
{
	new DCC_Role:role = DCC_GetCreatedGuildRole(), roleid[DCC_ID_SIZE];
	new DCC_Guild:guild = DCC_FindGuildById("905667779103977522");
	new DCC_Channel:ganglog = DCC_FindChannelById("925023496512360469");

	DCC_SetGuildRoleMentionable(guild, role, false);
	DCC_GetRoleId(role, roleid, sizeof(roleid));

	new DCC_Embed:embed = DCC_CreateEmbed(), string[500];
	DCC_SetEmbedTitle(embed, "New Created Gang");
	format(string, 500, "New Gang has appeared on Alcazar City!!!\nName: %s\nGang ID: %i\n\nNote: `For those who's included to this gang must send a request a role format on <#@941243272553181225>`\n<@%s>\n@everyone", nagname, nagid, roleid);
	DCC_SetEmbedDescription(embed, string);
	DCC_SetEmbedFooter(embed, "Brought to you by "SERVER_NAME"'s Gang Moderators");
	DCC_SendChannelEmbedMessage(ganglog, embed);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET gangrole = '%e' WHERE id = %i", roleid, nagid);
	mysql_tquery(connectionID, queryBuffer);
	nagid = 0;
	strcpy(nagname, "none", 50);
}

AddPointMoney(type, amount)
{
	for(new i = 0; i < MAX_POINTS; i ++)
	{
	    if(PointInfo[i][pExists] && PointInfo[i][pType] == type)
	    {
	        if(PointInfo[i][pCapturedGang] >= 0)
	        {
	            amount /= 2;
	            GangInfo[PointInfo[i][pCapturedGang]][gCash] += amount;

	            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET cash = %i WHERE id = %i", GangInfo[PointInfo[i][pCapturedGang]][gCash], PointInfo[i][pCapturedGang]);
	        	mysql_tquery(connectionID, queryBuffer);
	        }

			PointInfo[i][pProfits] += amount;

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET profits = %i WHERE id = %i", PointInfo[i][pProfits], i);
	 		mysql_tquery(connectionID, queryBuffer);
	    }
    }
}

ReloadPoint(pointid)
{
    if(PointInfo[pointid][pExists])
    {
        new string[128], name[32] = "None";

        DestroyDynamic3DTextLabel(PointInfo[pointid][pText]);
        DestroyDynamicPickup(PointInfo[pointid][pPickup]);

        if(PointInfo[pointid][pCapturedGang] >= 0)
        {
            strcpy(name, GangInfo[PointInfo[pointid][pCapturedGang]][gName]);
        }

        if(PointInfo[pointid][pTime] > 0)
        	format(string, sizeof(string), "["WHITE"%s{FFFF00}]\n"WHITE"Owned by: %s\nAvailable in %i hours.", PointInfo[pointid][pName], name, PointInfo[pointid][pTime]);
		else
		    format(string, sizeof(string), "["WHITE"%s{FFFF00}]\n"WHITE"Owned by: %s\nAvailable to capture!", PointInfo[pointid][pName], name);

		PointInfo[pointid][pText] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, PointInfo[pointid][pPointX], PointInfo[pointid][pPointY], PointInfo[pointid][pPointZ], 10.0, .worldid = PointInfo[pointid][pPointWorld], .interiorid = PointInfo[pointid][pPointInterior]);
        PointInfo[pointid][pPickup] = CreateDynamicPickup(1254, 1, PointInfo[pointid][pPointX], PointInfo[pointid][pPointY], PointInfo[pointid][pPointZ], .worldid = PointInfo[pointid][pPointWorld], .interiorid = PointInfo[pointid][pPointInterior]);
	}
}

ReloadGang(gangid)
{
	if(GangInfo[gangid][gSetup])
	{
	    new string[128];

	    DestroyDynamic3DTextLabel(GangInfo[gangid][gText][0]);
	    DestroyDynamic3DTextLabel(GangInfo[gangid][gText][1]);
	    DestroyDynamic3DTextLabel(GangInfo[gangid][gText][2]);
	    DestroyDynamicPickup(GangInfo[gangid][gPickup]);
	    DestroyActor(GangInfo[gangid][gActors][0]);
	    DestroyActor(GangInfo[gangid][gActors][1]);

	    if(GangInfo[gangid][gStashX] != 0.0 && GangInfo[gangid][gStashY] != 0.0 && GangInfo[gangid][gStashZ] != 0.0)
	    {
	        format(string, sizeof(string), "[(Level %i) Gang Stash]\n"WHITE"Owned by: %s", GangInfo[gangid][gLevel], GangInfo[gangid][gName]);

            GangInfo[gangid][gText][0] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, GangInfo[gangid][gStashX], GangInfo[gangid][gStashY], GangInfo[gangid][gStashZ], 10.0, .worldid = GangInfo[gangid][gStashWorld], .interiorid = GangInfo[gangid][gStashInterior]);
            GangInfo[gangid][gPickup] = CreateDynamicPickup(1275, 1, GangInfo[gangid][gStashX], GangInfo[gangid][gStashY], GangInfo[gangid][gStashZ], .worldid = GangInfo[gangid][gStashWorld], .interiorid = GangInfo[gangid][gStashInterior]);
	    }
	    /*if(GangInfo[gangid][gArmsDealer] && GangInfo[gangid][gArmsX] != 0.0 && GangInfo[gangid][gArmsY] != 0.0 && GangInfo[gangid][gArmsZ] != 0.0)
	    {
	        format(string, sizeof(string), "[Arms Dealer]\n"WHITE"Owned by: %s\nType /armsdealer for more info.", GangInfo[gangid][gName]);

	        GangInfo[gangid][gActors][0] = CreateActor(179, GangInfo[gangid][gArmsX], GangInfo[gangid][gArmsY], GangInfo[gangid][gArmsZ], GangInfo[gangid][gArmsA]);
			GangInfo[gangid][gText][1] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, GangInfo[gangid][gArmsX], GangInfo[gangid][gArmsY], GangInfo[gangid][gArmsZ] + 0.3, 10.0, .worldid = GangInfo[gangid][gArmsWorld]);

		    SetActorVirtualWorld(GangInfo[gangid][gActors][0], GangInfo[gangid][gArmsWorld]);
		}
		if(GangInfo[gangid][gDrugDealer] && GangInfo[gangid][gDrugX] != 0.0 && GangInfo[gangid][gDrugY] != 0.0 && GangInfo[gangid][gDrugZ] != 0.0)
	    {
	        format(string, sizeof(string), "[Drug Dealer]\n"WHITE"Owned by: %s\nType /drugdealer for more info.", GangInfo[gangid][gName]);

	        GangInfo[gangid][gActors][1] = CreateActor(28, GangInfo[gangid][gDrugX], GangInfo[gangid][gDrugY], GangInfo[gangid][gDrugZ], GangInfo[gangid][gDrugA]);
            GangInfo[gangid][gText][2] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, GangInfo[gangid][gDrugX], GangInfo[gangid][gDrugY], GangInfo[gangid][gDrugZ] + 0.3, 10.0, .worldid = GangInfo[gangid][gDrugWorld]);

	        SetActorVirtualWorld(GangInfo[gangid][gActors][1], GangInfo[gangid][gDrugWorld]);
		}*/
	}
}

GiveGangPoints(gangid, amount)
{
	if(GangInfo[gangid][gSetup])
	{
        GangInfo[gangid][gPoints] = GangInfo[gangid][gPoints] + amount;

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET points = %i WHERE id = %i", GangInfo[gangid][gPoints], gangid);
        mysql_tquery(connectionID, queryBuffer);
	}
}

RemoveGang(gangid)
{
	if(GangInfo[gangid][gAlliance] >= 0)
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = -1 WHERE id = %i", gangid);
	    mysql_tquery(connectionID, queryBuffer);

	    GangInfo[GangInfo[gangid][gAlliance]][gAlliance] = -1;
	}
	foreach(new i : Player)
	{
	    if(pData[i][pGang] == gangid)
	    {
	        SM(i, COLOR_LIGHTRED, "The gang you were apart of has been deleted by an administrator.");
	        pData[i][pGang] = -1;
	        pData[i][pGangRank] = 0;
	    }
	}

	DestroyDynamic3DTextLabel(GangInfo[gangid][gText][0]);
    DestroyDynamic3DTextLabel(GangInfo[gangid][gText][1]);
    DestroyDynamic3DTextLabel(GangInfo[gangid][gText][2]);
    DestroyDynamicPickup(GangInfo[gangid][gPickup]);
    DestroyActor(GangInfo[gangid][gActors][0]);
    DestroyActor(GangInfo[gangid][gActors][1]);

    GangInfo[gangid][gSetup] = 0;
    GangInfo[gangid][gName] = 0;
    GangInfo[gangid][gMOTD] = 0;
    GangInfo[gangid][gLeader] = 0;
	GangInfo[gangid][gColor] = 0;
	GangInfo[gangid][gStrikes] = 0;
	GangInfo[gangid][gLevel] = 0;
	GangInfo[gangid][gPoints] = 0;
	GangInfo[gangid][gTurfTokens] = 0;
	GangInfo[gangid][gStashX] = 0.0;
	GangInfo[gangid][gStashY] = 0.0;
	GangInfo[gangid][gStashZ] = 0.0;
	GangInfo[gangid][gStashInterior] = 0;
	GangInfo[gangid][gStashWorld] = 0;
	GangInfo[gangid][gCash] = 0;
	GangInfo[gangid][gMaterials] = 0;
	GangInfo[gangid][gPot] = 0;
	GangInfo[gangid][gCrack] = 0;
	GangInfo[gangid][gMeth] = 0;
	GangInfo[gangid][gPainkillers] = 0;
	GangInfo[gangid][gArmsDealer] = 0;
    GangInfo[gangid][gDrugDealer] = 0;
    GangInfo[gangid][gArmsX] = 0.0;
    GangInfo[gangid][gArmsY] = 0.0;
    GangInfo[gangid][gArmsZ] = 0.0;
    GangInfo[gangid][gDrugX] = 0.0;
    GangInfo[gangid][gDrugY] = 0.0;
    GangInfo[gangid][gDrugZ] = 0.0;
    GangInfo[gangid][gArmsWorld] = 0;
    GangInfo[gangid][gDrugWorld] = 0;
    GangInfo[gangid][gDrugPot] = 0;
    GangInfo[gangid][gDrugCrack] = 0;
    GangInfo[gangid][gDrugMeth] = 0;
    GangInfo[gangid][gArmsMaterials] = 0;
    GangInfo[gangid][gAlliance] = -1;
    GangInfo[gangid][gArmsHPAmmo] = 0;
    GangInfo[gangid][gArmsPoisonAmmo] = 0;
    GangInfo[gangid][gArmsFMJAmmo] = 0;
    GangInfo[gangid][gPickup] = -1;
    GangInfo[gangid][gActors][0] = INVALID_ACTOR_ID;
    GangInfo[gangid][gActors][1] = INVALID_ACTOR_ID;
    GangInfo[gangid][gText][0] = Text3D:INVALID_3DTEXT_ID;
    GangInfo[gangid][gText][1] = Text3D:INVALID_3DTEXT_ID;
    GangInfo[gangid][gText][2] = Text3D:INVALID_3DTEXT_ID;

    for(new i = 0; i < 7; i ++)
    {
        strcpy(GangRanks[gangid][i], "Unspecified", 32);
	}

	for(new i = 0; i < 14; i ++)
	{
		GangInfo[gangid][gWeapons][i] = 0;
	}

	for(new i = 0; i < MAX_GANG_SKINS; i ++)
	{
	    GangInfo[gangid][gSkins][i] = 0;
	}

	for(new i = 0; i < MAX_POINTS; i ++)
	{
		if(PointInfo[i][pExists] && PointInfo[i][pCapturedGang] == gangid)
		{
		    PointInfo[i][pCapturedGang] = -1;
		}
	}

	for(new i = 0; i < MAX_TURFS; i ++)
	{
		if(TurfInfo[i][tExists] && TurfInfo[i][tCapturedGang] == gangid)
		{
		    TurfInfo[i][tCapturedGang] = -1;
		}
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM gangs WHERE id = %i", gangid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM gangranks WHERE id = %i", gangid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM gangskins WHERE id = %i", gangid);
	mysql_tquery(connectionID, queryBuffer);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET capturedgang = -1 WHERE capturedgang = %i", gangid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET capturedgang = -1 WHERE capturedgang = %i", gangid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gang = -1, gangrank = 0 WHERE gang = %i", gangid);
	mysql_tquery(connectionID, queryBuffer);
}

GetGangVehicles(gangid)
{
	new count;

    for(new i = 0; i < MAX_VEHICLES; i ++)
	{
	    if(IsValidVehicle(i) && VehicleInfo[i][vID] > 0 && VehicleInfo[i][vGang] == gangid)
	    {
	        count++;
		}
	}

	return count;
}

GetGangVehicleLimit(gangid)
{
	switch(GangInfo[gangid][gLevel])
	{
	    case 1: return 6;
	    case 2: return 8;
	    case 3: return 12;
	}

	return 0;
}

GetGangMemberLimit(gangid)
{
	switch(GangInfo[gangid][gLevel])
	{
	    case 1: return 20;
	    case 2: return 40;
	    case 3: return 70;
	}

	return 0;
}

GetGangSkinCount(gangid)
{
	new count;

	for(new i = 0; i < MAX_GANG_SKINS; i ++)
	{
	    if(GangInfo[gangid][gSkins][i] != 0)
	    {
	        count++;
		}
	}

	return count;
}
GetSpawnedVehicles(playerid)
{
	new count;

    for(new i = 1; i < MAX_VEHICLES; i ++)
	{
	    if(IsVehicleOwner(playerid, i))
	    {
	        count++;
		}
	}

	return count;
}
GetVehicleGarage(vehicleid)
{
	for(new i = 0; i < MAX_GARAGES; i ++)
	{
	    if(GarageInfo[i][gExists] && GarageInfo[i][gWorld] == GetVehicleVirtualWorld(vehicleid))
	    {
	        return i;
		}
	}

	return -1;
}

GetNearbyVehicle(playerid)
{
	new Float:x, Float:y, Float:z;

	for(new i = 1; i < MAX_VEHICLES; i ++)
	{
	    if(IsVehicleStreamedIn(i, playerid))
	    {
	        GetVehiclePos(i, x, y, z);

	        if(IsPlayerInRangeOfPoint(playerid, 3.5, x, y, z))
	        {
	            return i;
			}
		}
	}

	return INVALID_VEHICLE_ID;
}

IsVehicleOwner(playerid, vehicleid)
{
	return (VehicleInfo[vehicleid][vOwnerID] == pData[playerid][pID]) || (VehicleInfo[vehicleid][vOwnerID] > 0 && pData[playerid][pAdminDuty]);
}

SetVehicleNeon(vehicleid, modelid)
{
	if(18647 <= modelid <= 18652)
	{
	    if(VehicleInfo[vehicleid][vNeonEnabled])
	    {
	        DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][0]);
			DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][1]);
	    }

	    VehicleInfo[vehicleid][vNeon] = modelid;
	    VehicleInfo[vehicleid][vNeonEnabled] = (modelid > 0);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET neon = %i, neonenabled = 1 WHERE id = %i", VehicleInfo[vehicleid][vNeon], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		ReloadVehicleNeon(vehicleid);
	}
}

ReloadVehicleNeon(vehicleid)
{
	if(VehicleInfo[vehicleid][vID] > 0)
	{
	    DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][0]);
	    DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][1]);

	    if(VehicleInfo[vehicleid][vNeon] && VehicleInfo[vehicleid][vNeonEnabled])
	    {
	        new
				Float:x,
				Float:y,
				Float:z;

			GetVehicleModelInfo(VehicleInfo[vehicleid][vModel], VEHICLE_MODEL_INFO_SIZE, x, y, z);

			VehicleInfo[vehicleid][vObjects][0] = CreateDynamicObject(VehicleInfo[vehicleid][vNeon], 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
			VehicleInfo[vehicleid][vObjects][1] = CreateDynamicObject(VehicleInfo[vehicleid][vNeon], 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

			AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][vObjects][0], vehicleid, -x / 2.8, 0.0, -0.6, 0.0, 0.0, 0.0);
			AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][vObjects][1], vehicleid, x / 2.8, 0.0, -0.6, 0.0, 0.0, 0.0);
		}
	}
}

ResyncVehicle(vehicleid)
{
	new
		worldid = GetVehicleVirtualWorld(vehicleid);
	SetVehicleVirtualWorld(vehicleid, cellmax);
	SetVehicleVirtualWorld(vehicleid, worldid);
}

SaveVehicleModifications(vehicleid)
{
	for(new i = 0; i < 14; i ++)
	{
	    VehicleInfo[vehicleid][vMods][i] = GetVehicleComponentInSlot(vehicleid, i);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET mod_%i = %i WHERE id = %i", i + 1, VehicleInfo[vehicleid][vMods][i], VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
}

ReloadVehicle(vehicleid)
{
    if(VehicleInfo[vehicleid][vPaintjob] >= 0)
    {
        ChangeVehiclePaintjob(vehicleid, VehicleInfo[vehicleid][vPaintjob]);
    }
    if(VehicleInfo[vehicleid][vNeon] && VehicleInfo[vehicleid][vNeonEnabled])
	{
		ReloadVehicleNeon(vehicleid);
    }

	for(new i = 0; i < 14; i ++)
	{
	    if(VehicleInfo[vehicleid][vMods][i] >= 1000)
	    {
	        AddVehicleComponent(vehicleid, VehicleInfo[vehicleid][vMods][i]);
		}
	}
	
    LinkVehicleToInterior(vehicleid, VehicleInfo[vehicleid][vInterior]);
    SetVehicleVirtualWorld(vehicleid, VehicleInfo[vehicleid][vWorld]);
    SetVehicleHealth(vehicleid, VehicleInfo[vehicleid][vHealth]);
    SetVehicleParams(vehicleid, VEHICLE_DOORS, VehicleInfo[vehicleid][vLocked]);
}

DespawnVehicle(vehicleid, bool:save = true)
{
	if(VehicleInfo[vehicleid][vID] > 0)
	{
	    if(VehicleInfo[vehicleid][vNeonEnabled])
	    {
	        DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][0]);
	        DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][1]);
	    }

		if(save) {
		    new
				Float:health;

		    GetVehicleHealth(vehicleid, health);
		    SaveVehicleModifications(vehicleid);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET fuel = %i, health = '%f', mileage = '%f' WHERE id = %i", vehicleFuel[vehicleid], health, VehicleInfo[vehicleid][vMileage], VehicleInfo[vehicleid][vID]);
	    	mysql_tquery(connectionID, queryBuffer);
	    }

		DestroyVehicleEx(vehicleid);
		ResetVehicle(vehicleid);
	}
}

ResetVehicle(vehicleid)
{
	strcpy(VehicleInfo[vehicleid][vPlate], "UNREG", 32);

	if(VehicleInfo[vehicleid][vTimer] >= 0)
	{
	    KillTimer(VehicleInfo[vehicleid][vTimer]);
	}

    VehicleInfo[vehicleid][vID] = 0;
	VehicleInfo[vehicleid][vOwnerID] = 0;
	VehicleInfo[vehicleid][vOwner] = 0;
	VehicleInfo[vehicleid][vModel] = 0;
	VehicleInfo[vehicleid][vPrice] = 0;
	VehicleInfo[vehicleid][vTickets] = 0;
	VehicleInfo[vehicleid][vLocked] = 0;
	VehicleInfo[vehicleid][vStolen] = 0;
	VehicleInfo[vehicleid][vHealth] = 1000.0;
	VehicleInfo[vehicleid][vPosX] = 0.0;
	VehicleInfo[vehicleid][vPosY] = 0.0;
	VehicleInfo[vehicleid][vPosZ] = 0.0;
	VehicleInfo[vehicleid][vPosA] = 0.0;
	VehicleInfo[vehicleid][vColor1] = 0;
	VehicleInfo[vehicleid][vColor2] = 0;
	VehicleInfo[vehicleid][vPaintjob] = -1;
	VehicleInfo[vehicleid][vInterior] = 0;
	VehicleInfo[vehicleid][vWorld] = 0;
	VehicleInfo[vehicleid][vCash] = 0;
	VehicleInfo[vehicleid][vMaterials] = 0;
	VehicleInfo[vehicleid][vPot] = 0;
	VehicleInfo[vehicleid][vCrack] = 0;
	VehicleInfo[vehicleid][vMeth] = 0;
	VehicleInfo[vehicleid][vPainkillers] = 0;
	VehicleInfo[vehicleid][vWeapons][0] = 0;
	VehicleInfo[vehicleid][vWeapons][1] = 0;
	VehicleInfo[vehicleid][vWeapons][2] = 0;
	VehicleInfo[vehicleid][vHPAmmo] = 0;
	VehicleInfo[vehicleid][vPoisonAmmo] = 0;
	VehicleInfo[vehicleid][vFMJAmmo] = 0;
    VehicleInfo[vehicleid][vGang] = -1;
	VehicleInfo[vehicleid][vFactionType] = FACTION_NONE;
	VehicleInfo[vehicleid][vJob] = JOB_NONE;
	VehicleInfo[vehicleid][vObjects][0] = INVALID_OBJECT_ID;
	VehicleInfo[vehicleid][vObjects][1] = INVALID_OBJECT_ID;
	VehicleInfo[vehicleid][vTimer] = -1;
	VehicleInfo[vehicleid][vMileage] = 0.0;

	for(new i = 0; i < 14; i ++)
	{
	    VehicleInfo[vehicleid][vMods][i] = 0;
	}
	ResetVehicleObjects(vehicleid);
}

IsPointInLand(landid, Float:x, Float:y)
{
	if((LandInfo[landid][lMinX] <= x <= LandInfo[landid][lMaxX]) && (LandInfo[landid][lMinY] <= y <= LandInfo[landid][lMaxY]))
	{
	    return 1;
	}

	return 0;
}

HasLandPerms(playerid, landid)
{
	return IsLandOwner(playerid, landid) || pData[playerid][pLandPerms] == landid;
}

IsLandOwner(playerid, landid)
{
	return (LandInfo[landid][lOwnerID] == pData[playerid][pID]) || (LandInfo[landid][lOwnerID] > 0 && pData[playerid][pAdminDuty]);
}

SetLandOwner(landid, playerid)
{
	if(playerid == INVALID_PLAYER_ID)
	{
	    strcpy(LandInfo[landid][lOwner], "Nobody", MAX_PLAYER_NAME);
	    LandInfo[landid][lOwnerID] = 0;
	}
	else
	{
	    GetPlayerName(playerid, LandInfo[landid][lOwner], MAX_PLAYER_NAME);
	    LandInfo[landid][lOwnerID] = pData[playerid][pID];
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE lands SET ownerid = %i, owner = '%s' WHERE id = %i", LandInfo[landid][lOwnerID], LandInfo[landid][lOwner], LandInfo[landid][lID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadLand(landid);
}

GetLandObjectID(sql_id)
{
    for(new i = 0; i <= Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i ++)
    {
        if(IsValidDynamicObject(i) && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_LAND && Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID) == sql_id)
        {
            return i;
		}
	}

	return INVALID_OBJECT_ID;
}

GetLandObjectCapacity(playerid)
{
	return (pData[playerid][pDonator] * 50) + 250;
}

RemoveLandObject(objectid)
{
    if(IsValidDynamicObject(objectid) && Streamer_GetExtraInt(objectid, E_OBJECT_TYPE) == E_OBJECT_LAND)
	{
 		new
	        id = Streamer_GetExtraInt(objectid, E_OBJECT_INDEX_ID);

	    DeleteLandObject(objectid);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM landobjects WHERE id = %i", id);
	    mysql_tquery(connectionID, queryBuffer);
	}
}

DeleteLandObject(objectid)
{
	if(IsValidDynamicObject(objectid) && Streamer_GetExtraInt(objectid, E_OBJECT_TYPE) == E_OBJECT_LAND)
	{
    	new Text3D:textid = Text3D:Streamer_GetExtraInt(objectid, E_OBJECT_3DTEXT_ID);

        if(IsValidDynamic3DTextLabel(textid))
        {
            DestroyDynamic3DTextLabel(textid);
        }

        DestroyDynamicObject(objectid);
	}
}

RemoveAllLandObjects(landid)
{
    if(LandInfo[landid][lExists])
	{
	    for(new i = 0; i <= Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i ++)
	    {
	        if(IsValidDynamicObject(i) && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_LAND && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == LandInfo[landid][lID])
	        {
             	DeleteLandObject(i);
			}
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM landobjects WHERE landid = %i", LandInfo[landid][lID]);
		mysql_tquery(connectionID, queryBuffer);
	}
}

ReloadLandObject(objectid, labels)
{
	if(IsValidDynamicObject(objectid) && Streamer_GetExtraInt(objectid, E_OBJECT_TYPE) == E_OBJECT_LAND)
	{
	    new
	        id = Streamer_GetExtraInt(objectid, E_OBJECT_INDEX_ID);

	    DeleteLandObject(objectid);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM landobjects WHERE id = %i", id);
	    mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOAD_LANDOBJECTS, labels);
	}
}

ReloadAllLandObjects(landid)
{
    if(LandInfo[landid][lExists])
	{
	    for(new i = 0; i <= Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i ++)
	    {
	        if(IsValidDynamicObject(i) && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_LAND && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == LandInfo[landid][lID])
	        {
             	DeleteLandObject(i);
			}
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM landobjects WHERE landid = %i", LandInfo[landid][lID]);
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOAD_LANDOBJECTS, LandInfo[landid][lLabels]);
	}
}

ReloadLand(landid)
{
	if(LandInfo[landid][lExists])
	{
	    new
	        string[128];

		DestroyDynamic3DTextLabel(LandInfo[landid][lText]);
		DestroyDynamicPickup(LandInfo[landid][lPickup]);
	    DestroyDynamicArea(LandInfo[landid][lArea]);
	    GangZoneDestroy(LandInfo[landid][lGangZone]);

	    LandInfo[landid][lArea] = CreateDynamicRectangle(LandInfo[landid][lMinX], LandInfo[landid][lMinY], LandInfo[landid][lMaxX], LandInfo[landid][lMaxY]);
	    LandInfo[landid][lGangZone] = GangZoneCreateEx(LandInfo[landid][lMinX], LandInfo[landid][lMinY], LandInfo[landid][lMaxX], LandInfo[landid][lMaxY]);

        if(LandInfo[landid][lOwnerID] == 0)
        {
	        format(string, sizeof(string), "Land ID: %i\nOwned by: Nobody\n Price: %i", landid, LandInfo[landid][lPrice]);
		}
		else
		{
		    format(string, sizeof(string), "Land ID: %i\nOwned by: %s", landid, LandInfo[landid][lOwner]);
		}
		LandInfo[landid][lText] = CreateDynamic3DTextLabel(string, 0xFFFFFFFF, LandInfo[landid][lX], LandInfo[landid][lY], LandInfo[landid][lZ], 15.0, .worldid = 0, .interiorid = 0);
		LandInfo[landid][lPickup] = CreateDynamicPickup(19523, 1, LandInfo[landid][lX], LandInfo[landid][lY], LandInfo[landid][lZ]);

	    foreach(new i : Player)
	    {
	        if(pData[i][pShowLands])
	        {
	            GangZoneShowForPlayer(i, LandInfo[landid][lGangZone], (LandInfo[landid][lOwnerID] > 0) ? (0x99ffbeAA) : (0x33CC33AA));
			}
		}
	}
}

GangZoneCreateEx(Float:minx, Float:miny, Float:maxx, Float:maxy)
{
	return GangZoneCreate((minx > maxx) ? (maxx) : (minx), (miny > maxy) ? (maxy) : (miny), (minx > maxx) ? (minx) : (maxx), (miny > maxy) ? (miny) : (maxy));
}

Gate_Nearest(playerid)
{
    for (new i = 0; i != MAX_GATES; i ++) if (GateData[i][gateExists] && IsPlayerInRangeOfPoint(playerid, GateData[i][gateRadius], GateData[i][gatePos][0], GateData[i][gatePos][1], GateData[i][gatePos][2]))
	{
		if (GetPlayerInterior(playerid) == GateData[i][gateInterior] && GetPlayerVirtualWorld(playerid) == GateData[i][gateWorld])
			return i;
	}
	return -1;
}
Object_Nearest(playerid)
{
    for (new i = 0; i != MAX_MAPOBJECTS; i ++) if (ObjectData[i][mobjExists] && IsPlayerInRangeOfPoint(playerid, 3.0, ObjectData[i][mobjPos][0], ObjectData[i][mobjPos][1], ObjectData[i][mobjPos][2]))
	{
		if (GetPlayerInterior(playerid) == ObjectData[i][mobjInterior] && GetPlayerVirtualWorld(playerid) == ObjectData[i][mobjWorld])
			return i;
	}
	return -1;
}

forward Toll_G10();
forward Toll_G9();
forward Toll_G8();
forward Toll_G7();
forward Toll_G6();
forward Toll_G5();
forward Toll_G4();
forward Toll_G3();
forward Toll_G2();
forward Toll_G();

public Toll_G10()
{
      DestroyDynamicObject( Border000 );
      Border0 = CreateDynamicObject(968,-173.392,374.704,11.722,0.000,90.000,344.634);
      Border00 = 0;
      return 1;
}
public Toll_G9()
{
      DestroyDynamicObject( Border999 );
      Border9 = CreateDynamicObject(968,-159.520,371.172,11.722,0.000,90.000,166.787);
      Border99 = 0;
      return 1;
}
public Toll_G8()
{
      DestroyDynamicObject( Border888 );
      Border8 = CreateDynamicObject(968,525.827,477.249,18.799,0.000,90.000,217.985);
      Border88 = 0;
      return 1;
}
public Toll_G7()
{
      DestroyDynamicObject( Border777 );
      Border7 = CreateDynamicObject(968,514.546,468.370,18.759,0.000,90.000,38.485);
      Border77 = 0;
      return 1;
}
public Toll_G5()
{
      DestroyDynamicObject( Border555 );
      Border5 = CreateDynamicObject(968,51.067,-1286.589,13.659,0.000,-90.200,-54.806);
      Border55 = 0;
      return 1;
}
public Toll_G6()
{
      DestroyDynamicObject( Border666 );
      Border6 = CreateDynamicObject(968,71.514,-1305.882,12.010,0.000,-89.399,-49.406);
      Border66 = 0;
      return 1;
}
public Toll_G3()
{
      DestroyDynamicObject( Border333 );
      Border3 = CreateDynamicObject(968,53.587,-1541.730,4.809,0.000,-90.000,263.597);
      Border33 = 0;
      return 1;
}
public Toll_G4()
{
      DestroyDynamicObject( Border444 );
      Border4 = CreateDynamicObject(968,55.194,-1522.403,4.809,0.000,-90.000,89.192);
      Border44 = 0;
      return 1;
}
public Toll_G2()
{
      DestroyDynamicObject( Border222 );
      Border2 = CreateDynamicObject(968, 1780.06458, 802.22620, 10.66680,   0.00000, 270.00000, 900.00000);
      Border22 = 0;
      return 1;
}

public Toll_G()
{
      DestroyDynamicObject( Border111 );
	  Border1 = CreateDynamicObject(968, 1813.34851, 813.63531, 10.66680,   0.00000, 270.00000, 0.00000);//
      Border11 = 0;
      return 1;
}

//
stock ShowGPSTextdraw(playerid) {
	PlayerTextDrawShow(playerid, pData[playerid][pText][0]);
	PlayerTextDrawShow(playerid, pData[playerid][pText][1]);
	PlayerTextDrawShow(playerid, pData[playerid][pText][6]);
	PlayerTextDrawShow(playerid, pData[playerid][pText][7]);
}

stock HideGPSTextdraw(playerid) {
	PlayerTextDrawHide(playerid, pData[playerid][pText][0]);
	PlayerTextDrawHide(playerid, pData[playerid][pText][1]);
	PlayerTextDrawHide(playerid, pData[playerid][pText][6]);
	PlayerTextDrawHide(playerid, pData[playerid][pText][7]);
}

stock IsPlayerNearDynamicObject(playerid, objectid, Float:range = 5.0) {

	static
	    Float:fX,
	    Float:fY,
	    Float:fZ;

	GetDynamicObjectPos(objectid, fX, fY, fZ);

	return (IsPlayerInRangeOfPoint(playerid, range, fX, fY, fZ));
}

stock GetFactionByID(sqlid)
{
	for (new i = 0; i != MAX_FACTIONS; i ++) if (FactionInfo[i][fType] == sqlid)
	    return i;

	return -1;
}

stock ShowNoticeGUIFrame(playerid, frame)
{
	HideNoticeGUIFrame(playerid);

	TextDrawShowForPlayer(playerid, NoticeTxtdraw[0]);
	TextDrawShowForPlayer(playerid, NoticeTxtdraw[1]);
	SendClientMessage(playerid, COLOR_YELLOW, "If the notice box didn't hide, use /hideplayergui to hide the notice box.");

	switch(frame)
	{
		case 1: // Looking up account
		{
			TextDrawSetString(NoticeTxtdraw[2], "Looking up account");
			TextDrawShowForPlayer(playerid, NoticeTxtdraw[2]);
			TextDrawSetString(NoticeTxtdraw[3], "Checking to see if account exists...");
			TextDrawShowForPlayer(playerid, NoticeTxtdraw[3]);
		}
		case 2: // Fetching & Comparing Password
		{
			TextDrawSetString(NoticeTxtdraw[2], "Comparing Password");
			TextDrawShowForPlayer(playerid, NoticeTxtdraw[2]);
			TextDrawSetString(NoticeTxtdraw[3], "Comparing passwords with database, Please Wait!");
			TextDrawShowForPlayer(playerid, NoticeTxtdraw[3]);
		}
		case 3: // Fetching & Loading Account
		{
			TextDrawSetString(NoticeTxtdraw[2], "Fetching Data");
			TextDrawShowForPlayer(playerid, NoticeTxtdraw[2]);
			TextDrawSetString(NoticeTxtdraw[3], "Fetching & Loading your account, Please Wait!");
			TextDrawShowForPlayer(playerid, NoticeTxtdraw[3]);
		}
		case 4: // Streaming Objects
		{
			TextDrawSetString(NoticeTxtdraw[2], "Streaming Objects");
			TextDrawShowForPlayer(playerid, NoticeTxtdraw[2]);
			TextDrawSetString(NoticeTxtdraw[3], "Loading objects within your area, please wait");
			TextDrawShowForPlayer(playerid, NoticeTxtdraw[3]);
		}
		case 5: // Login Queue
		{
			TextDrawSetString(NoticeTxtdraw[2], "Loading your Account");
			TextDrawShowForPlayer(playerid, NoticeTxtdraw[2]);
			TextDrawSetString(NoticeTxtdraw[3], "Logging you into the server, please wait");
			TextDrawShowForPlayer(playerid, NoticeTxtdraw[3]);
		}
		case 6: // General loading
		{
			TextDrawSetString(NoticeTxtdraw[2], "Loading...");
			TextDrawShowForPlayer(playerid, NoticeTxtdraw[2]);
		}
		case 7: // Event Loading
		{
			TextDrawSetString(NoticeTxtdraw[2], "Joining Event");
			TextDrawShowForPlayer(playerid, NoticeTxtdraw[2]);
			TextDrawSetString(NoticeTxtdraw[3], "Loading event information, please wait");
			TextDrawShowForPlayer(playerid, NoticeTxtdraw[3]);
		}
		case 8: // Event Exit
		{
			TextDrawSetString(NoticeTxtdraw[2], "Leaving Event");
			TextDrawShowForPlayer(playerid, NoticeTxtdraw[2]);
			TextDrawSetString(NoticeTxtdraw[3], "Loading your last location, please wait");
			TextDrawShowForPlayer(playerid, NoticeTxtdraw[3]);
		}
	}
}

stock HideNoticeGUIFrame(playerid)
{
	for(new i = 0; i < 4; i++)
	{
		TextDrawHideForPlayer(playerid, NoticeTxtdraw[i]);
	}
}


ShowNoticeTextDraw()
{
    NoticeTxtdraw[0] = TextDrawCreate(186.000000, 181.000000, "Box");
	TextDrawBackgroundColor(NoticeTxtdraw[0], 0);
	TextDrawFont(NoticeTxtdraw[0], 1);
	TextDrawLetterSize(NoticeTxtdraw[0], 1.590000, 7.700005);
	TextDrawColor(NoticeTxtdraw[0], 0);
	TextDrawSetOutline(NoticeTxtdraw[0], 0);
	TextDrawSetProportional(NoticeTxtdraw[0], 1);
	TextDrawSetShadow(NoticeTxtdraw[0], 1);
	TextDrawUseBox(NoticeTxtdraw[0], 1);
	TextDrawBoxColor(NoticeTxtdraw[0], 100);
	TextDrawTextSize(NoticeTxtdraw[0], 454.000000, 18.000000);

	NoticeTxtdraw[1] = TextDrawCreate(317.000000, 174.000000, ""SERVER_NAME" - Notice");
	TextDrawAlignment(NoticeTxtdraw[1], 2);
	TextDrawBackgroundColor(NoticeTxtdraw[1], 255);
	TextDrawFont(NoticeTxtdraw[1], 2);
	TextDrawLetterSize(NoticeTxtdraw[1], 0.189999, 1.200000);
	TextDrawColor(NoticeTxtdraw[1], -1);
	TextDrawSetOutline(NoticeTxtdraw[1], 1);
	TextDrawSetProportional(NoticeTxtdraw[1], 1);

	// Title
	NoticeTxtdraw[2] = TextDrawCreate(323.000000, 196.000000, " ");
	TextDrawAlignment(NoticeTxtdraw[2], 2);
	TextDrawBackgroundColor(NoticeTxtdraw[2], 255);
	TextDrawFont(NoticeTxtdraw[2], 2);
	TextDrawLetterSize(NoticeTxtdraw[2], 0.449999, 2.000000);
	//TextDrawLetterSize(NoticeTxtdraw[2], 0.529999, 2.800000);
	TextDrawColor(NoticeTxtdraw[2], -1);
	TextDrawSetOutline(NoticeTxtdraw[2], 1);
	TextDrawSetProportional(NoticeTxtdraw[2], 1);

	// Description.
	NoticeTxtdraw[3] = TextDrawCreate(322.000000, 221.000000, " ");
	TextDrawAlignment(NoticeTxtdraw[3], 2);
	TextDrawBackgroundColor(NoticeTxtdraw[3], 255);
	TextDrawFont(NoticeTxtdraw[3], 1);
	TextDrawLetterSize(NoticeTxtdraw[3], 0.189999, 1.200000);
	TextDrawColor(NoticeTxtdraw[3], -1);
	TextDrawSetOutline(NoticeTxtdraw[3], 1);
	TextDrawSetProportional(NoticeTxtdraw[3], 1);
    
}

stock GetGateByID(sqlid)
{
	for (new i = 0; i != MAX_GATES; i ++) if (GateData[i][gateExists] && GateData[i][gateID] == sqlid)
	    return i;

	return -1;
}

forward OnObjectCreated(gateid);
public OnObjectCreated(gateid)
{
	if (gateid == -1 || !ObjectData[gateid][mobjExists])
	    return 0;

	ObjectData[gateid][mobjID] = cache_insert_id(connectionID);
	Object_Save(gateid);

	return 1;
}

forward OnGateCreated(gateid);
public OnGateCreated(gateid)
{
	if (gateid == -1 || !GateData[gateid][gateExists])
	    return 0;

	GateData[gateid][gateID] = cache_insert_id(connectionID);
	Gate_Save(gateid);

	return 1;
}

stock Speed_Refresh(speedid)
{
	if (speedid != -1 && SpeedData[speedid][speedExists])
	{
	    new
	        string[64];

		if (IsValidDynamicObject(SpeedData[speedid][speedObject]))
		    DestroyDynamicObject(SpeedData[speedid][speedObject]);

		if (IsValidDynamic3DTextLabel(SpeedData[speedid][speedText3D]))
		    DestroyDynamic3DTextLabel(SpeedData[speedid][speedText3D]);

		format(string, sizeof(string), "%.0f MPH Speed Limit\n"GREY"(( Type '/rules' > 'Speed Laws' for info. ))", SpeedData[speedid][speedLimit]);

		SpeedData[speedid][speedText3D] = CreateDynamic3DTextLabel(string, 0xFF0000FF, SpeedData[speedid][speedPos][0], SpeedData[speedid][speedPos][1], SpeedData[speedid][speedPos][2] + 2.5, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);
        SpeedData[speedid][speedObject] = CreateDynamicObject(18880, SpeedData[speedid][speedPos][0], SpeedData[speedid][speedPos][1], SpeedData[speedid][speedPos][2], 0.0, 0.0, SpeedData[speedid][speedPos][3]);
		SpeedData[speedid][sMapIcon] = CreateDynamicMapIcon(SpeedData[speedid][speedPos][0], SpeedData[speedid][speedPos][1], SpeedData[speedid][speedPos][2], 56, 0, .style = MAPICON_GLOBAL);
	}
	return 1;
}

stock GiftBox(playerid, giveplayerid)
{
	if(pData[playerid][pAdmin] >= 1 || playerid == MAX_PLAYERS)
	{
		new randgift = Random(1, 100);
		if(randgift >= 1 && randgift <= 83)
		{
		    new gift = Random(1, 8);
		    if(gift == 1)
		    {
          		if(pData[giveplayerid][pHours] < 2)
          		{
				    return GiftBox(playerid, giveplayerid);
				}
		        GiveWeapon(giveplayerid, 24);
				GiveWeapon(giveplayerid, 25);
				GiveWeapon(giveplayerid, 27);
				GiveWeapon(giveplayerid, 31);
		        SendClientMessage(giveplayerid, COLOR_GREY2, " Gift Box - You won Full Weapon Set");
		        SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "* %s was just given a reward a full weapon set, enjoy!", GetPlayerNameEx(giveplayerid));
		    }
		    else if(gift == 2)
		    {
		        pData[giveplayerid][pBandage]++;
		        SendClientMessageEx(giveplayerid, COLOR_GREY2, "Gift Box - You won a bandage kit!");
		        SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "* %s was just given a reward a bandage kit, enjoy!", GetPlayerNameEx(giveplayerid));
		    }
		    else if(gift == 3)
		    {
		        pData[giveplayerid][pMaterials] += 2000;
		        SendClientMessageEx(giveplayerid, COLOR_GREY2, "Gift Box - You won 2,000 materials!");
		    }
		    else if(gift == 4)
		    {
		        if(pData[giveplayerid][pDMWarnings] != 0)
		        {
		        	pData[giveplayerid][pDMWarnings]--;
		        	SendClientMessageEx(giveplayerid, COLOR_GREY, "Gift Box - You won a single warning removal!");
		        	SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "* %s was just given a reward a single warning removal, enjoy!", GetPlayerNameEx(giveplayerid));
                  	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET dmwarnings = %i, WHERE uid = %i", pData[giveplayerid][pDMWarnings], pData[giveplayerid][pID]);
                 	mysql_tquery(connectionID, queryBuffer);
				}
				else
				{
        			SendClientMessageEx(playerid, COLOR_GREY, "Random Reward ended up in a removal of one warning - let's try again!");
        			GiftBox(playerid, giveplayerid);
				    return 1;
				}
		    }
		    else if(gift == 5)
		    {
				pData[giveplayerid][pPot] += 50;
				SendClientMessageEx(giveplayerid, COLOR_GREY, "Gift Box - You won 50 grams of weed!");
				SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "* %s was just given a reward 50 grams of pot, enjoy!", GetPlayerNameEx(giveplayerid));
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", pData[giveplayerid][pPot], pData[giveplayerid][pID]);
	            mysql_tquery(connectionID, queryBuffer);
		    }
		    else if(gift == 6)
		    {
		        pData[giveplayerid][pCrack] += 25;
				SendClientMessageEx(giveplayerid, COLOR_GREY, "Gift Box - You won 25 grams of cocaine!");
				SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "* %s was just given a reward 25 grams of cocaine, enjoy!", GetPlayerNameEx(giveplayerid));
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", pData[giveplayerid][pCrack], pData[giveplayerid][pID]);
	            mysql_tquery(connectionID, queryBuffer);
		    }
		    else if(gift == 7)
		    {
		        GivePlayerCash(giveplayerid, 20000);
				SendClientMessageEx(giveplayerid, COLOR_GREY, "Gift Box - You won $20,000!");
				SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "* %s was just given a reward $20,000, enjoy!", GetPlayerNameEx(giveplayerid));
		    }
		}
		else if(randgift > 83 && randgift <= 98)
		{
		    new gift = Random(1, 5);
			if(gift == 1)
			{
			    GivePlayerCash(giveplayerid, 15000);
				SendClientMessageEx(giveplayerid, COLOR_GREY, "Gift Box - You won $15000!");
				SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "* %s was just given a reward $15000, enjoy!", GetPlayerNameEx(giveplayerid));
			}
			else if(gift == 2)
			{
			    pData[giveplayerid][pMaterials] += 3000;
				SendClientMessageEx(giveplayerid, COLOR_GREY, "Gift Box - You won 3,000 materials!");
				SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "* %s was just given a reward 3,000 materials, enjoy!", GetPlayerNameEx(giveplayerid));
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", pData[giveplayerid][pMaterials], pData[giveplayerid][pID]);
	            mysql_tquery(connectionID, queryBuffer);
			}
			else if(gift == 3)
			{
				pData[giveplayerid][pDiamonds] += 20;
				SendClientMessageEx(giveplayerid, COLOR_GREY, "Gift Box - You won 20 diamonds!");
				SendAdminMessage(COLOR_YELLOW, "{FF0000}AdmWarning{FFFF00}:%s has just won 20 diamonds from the giftbox.", GetPlayerNameEx(giveplayerid));
				SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "* %s was just given a reward 20 diamonds, enjoy!", GetPlayerNameEx(giveplayerid));
			}
			else if(gift == 4)
			{
			    pData[giveplayerid][pMaterials] += 3000;
				SendClientMessageEx(giveplayerid, COLOR_GREY, "Gift Box - You won 3,000 materials!");
				SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "* %s was just given a reward 3,000 materials, enjoy!", GetPlayerNameEx(giveplayerid));
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", pData[giveplayerid][pMaterials], pData[giveplayerid][pID]);
	            mysql_tquery(connectionID, queryBuffer);
			}
		}
		else if(randgift > 98 && randgift <= 100)
		{
		    new gift = Random(1, 4);
			if(gift == 1 && pData[giveplayerid][pDonator] <= 2)
			{
				SCM(playerid, COLOR_YELLOW, "You received a Silver VIP status for 1 month, contact an admin to receive your Donator Status!");
				SAM(COLOR_ERROR, "AdmWarning: %s won a Silver VIP that lasts for 1 month from carol (Flagged)", GetPlayerNameEx(playerid));

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vippackage = %i, viptime = %i, vipcooldown = 0 WHERE uid = %i", pData[playerid][pDonator], pData[playerid][pVIPTime], pData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);
			}
			if(gift == 1)
			{
				pData[giveplayerid][pDiamonds] += 20;
				SendClientMessageEx(giveplayerid, COLOR_GREY, "Gift Box - You won 20 diamonds!");
				SendAdminMessage(COLOR_YELLOW, "{FF0000}AdmWarning{FFFF00}:%s has just won 20 diamonds from the giftbox.", GetPlayerNameEx(giveplayerid));
				SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "* %s was just given a reward 20 diamonds, enjoy!", GetPlayerNameEx(giveplayerid));
			}
			else if(gift == 2)
			{
				GivePlayerCash(giveplayerid, 5000);
				SendClientMessageEx(giveplayerid, COLOR_GREY, "Gift Box - You won $5,000!");
				SendAdminMessage(COLOR_YELLOW, "{FF0000}AdmWarning{FFFF00}:%s has just won $5,000 from the giftbox.", GetPlayerNameEx(giveplayerid));
				SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "* %s was just given a reward $5,000, enjoy!", GetPlayerNameEx(giveplayerid));
			}
		}
	}
	return 1;
}

stock Speed_Save(speedid)
{
	new
	    query[255];

	format(query, sizeof(query), "UPDATE `speedcameras` SET `speedRange` = '%.4f', `speedLimit` = '%.4f', `speedX` = '%.4f', `speedY` = '%.4f', `speedZ` = '%.4f', `speedAngle` = '%.4f' WHERE `speedID` = '%d'",
	    SpeedData[speedid][speedRange],
	    SpeedData[speedid][speedLimit],
	    SpeedData[speedid][speedPos][0],
	    SpeedData[speedid][speedPos][1],
	    SpeedData[speedid][speedPos][2],
	    SpeedData[speedid][speedPos][3],
	    SpeedData[speedid][speedID]
	);
	return mysql_tquery(connectionID, query);
}

stock Speed_Nearest(playerid)
{
	for (new i = 0; i < MAX_SPEED_CAMERAS; i ++) if (SpeedData[i][speedExists] && IsPlayerInRangeOfPoint(playerid, SpeedData[i][speedRange], SpeedData[i][speedPos][0], SpeedData[i][speedPos][1], SpeedData[i][speedPos][2]))
	    return i;

	return -1;
}

stock Speed_Delete(speedid)
{
    if (speedid != -1 && SpeedData[speedid][speedExists])
	{
	    new
	        string[64];

		if (IsValidDynamicObject(SpeedData[speedid][speedObject]))
		    DestroyDynamicObject(SpeedData[speedid][speedObject]);

		if (IsValidDynamic3DTextLabel(SpeedData[speedid][speedText3D]))
		    DestroyDynamic3DTextLabel(SpeedData[speedid][speedText3D]);

		format(string, sizeof(string), "DELETE FROM `speedcameras` WHERE `speedID` = '%d'", SpeedData[speedid][speedID]);
		mysql_tquery(connectionID, string);

		SpeedData[speedid][speedExists] = false;
		SpeedData[speedid][speedLimit] = 0.0;
		SpeedData[speedid][speedRange] = 0.0;
		SpeedData[speedid][speedID] = 0;
	}
	return 1;
}

stock Speed_Create(playerid, Float:limit, Float:range)
{
	new
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);

	for (new i = 0; i < MAX_SPEED_CAMERAS; i ++) if (!SpeedData[i][speedExists])
	{
	    SpeedData[i][speedExists] = true;
	    SpeedData[i][speedRange] = range;
        SpeedData[i][speedLimit] = limit;

		SpeedData[i][speedPos][0] = x + (1.5 * floatsin(-angle, degrees));
	    SpeedData[i][speedPos][1] = y + (1.5 * floatcos(-angle, degrees));
	    SpeedData[i][speedPos][2] = z - 1.2;
	    SpeedData[i][speedPos][3] = angle;

	    Speed_Refresh(i);
	    mysql_tquery(connectionID, "INSERT INTO `speedcameras` (`speedRange`) VALUES(0.0)", "OnSpeedCreated", "d", i);
	    return i;
	}
	return -1;
}
forward OnSpeedCreated(speedid);
public OnSpeedCreated(speedid)
{
	if (speedid == -1 || !SpeedData[speedid][speedExists])
	    return 0;

	SpeedData[speedid][speedID] = cache_insert_id(connectionID);
	Speed_Save(speedid);

	return 1;
}
forward Speed_Load();
public Speed_Load()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, connectionID);

	for (new i = 0; i < rows; i ++) if (i < MAX_SPEED_CAMERAS)
	{
	    SpeedData[i][speedExists] = true;
	    SpeedData[i][speedID] = cache_get_field_content_int(i, "speedID");
	    SpeedData[i][speedRange] = cache_get_field_content_float(i, "speedRange");
	    SpeedData[i][speedLimit] = cache_get_field_content_float(i, "speedLimit");
	    SpeedData[i][speedPos][0] = cache_get_field_content_float(i, "speedX");
	    SpeedData[i][speedPos][1] = cache_get_field_content_float(i, "speedY");
	    SpeedData[i][speedPos][2] = cache_get_field_content_float(i, "speedZ");
	    SpeedData[i][speedPos][3] = cache_get_field_content_float(i, "speedAngle");

	    Speed_Refresh(i);
	}
	return 1;
}

stock Float:GetPlayerSpeed(playerid)
{
	static Float:velocity[3];

	if (IsPlayerInAnyVehicle(playerid))
	    GetVehicleVelocity(GetPlayerVehicleID(playerid), velocity[0], velocity[1], velocity[2]);
	else
	    GetPlayerVelocity(GetPlayerVehicleID(playerid), velocity[0], velocity[1], velocity[2]);

	return floatsqroot((velocity[0] * velocity[0]) + (velocity[1] * velocity[1]) + (velocity[2] * velocity[2])) * 100.0;
}

stock IsEngineVehicle(vehicleid)
{
	static const g_aEngineStatus[] = {
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0
	};
    new modelid = GetVehicleModel(vehicleid);

    if (modelid < 400 || modelid > 611)
        return 0;

    return (g_aEngineStatus[modelid - 400]);
}

forward HidePlayerBox(playerid, PlayerText:boxid);
public HidePlayerBox(playerid, PlayerText:boxid)
{
	if (!IsPlayerConnected(playerid))
	    return 0;

	PlayerTextDrawHide(playerid, boxid);
	PlayerTextDrawDestroy(playerid, boxid);

	return 1;
}

stock PlayerText:ShowPlayerBox(playerid, color)
{
	new
	    PlayerText:textid;

    textid = CreatePlayerTextDraw(playerid, 0.000000, 0.000000, "_");
	PlayerTextDrawFont(playerid, textid, 1);
	PlayerTextDrawLetterSize(playerid, textid, 0.500000, 50.000000);
	PlayerTextDrawColor(playerid, textid, -1);
	PlayerTextDrawUseBox(playerid, textid, 1);
	PlayerTextDrawBoxColor(playerid, textid, color);
	PlayerTextDrawTextSize(playerid, textid, 640.000000, 30.000000);
	PlayerTextDrawShow(playerid, textid);

	return textid;
}

IsACruiser(vehicleid)
{
	switch (GetVehicleModel(vehicleid))
	{
	    case 523, 427, 490, 528, 596..599, 601: return 1;
	}
	return 0;
}

IsAPlane(vehicleid)
{
    switch(GetVehicleModel(vehicleid))
    {
        case 460, 464, 476, 511..513, 519, 520, 553, 577, 592, 593: return 1;
    }
    return 0;
}

IsAHelicopter(vehicleid)
{
    switch(GetVehicleModel(vehicleid))
    {
        case 417, 425, 447, 465, 469, 487, 488, 497, 501, 548, 563: return 1;
    }

    return 0;
}

forward CheckKeyPress(playerid);
public CheckKeyPress(playerid)
{
    new keys, updown, leftright;
    GetPlayerKeys(playerid, keys, updown, leftright);
	if(CurrentCCTV[playerid] > -1 && PlayerMenu[playerid] == -1)
	{
	    if(leftright == KEY_RIGHT)
	  	{
	  	    if(keys == KEY_SPRINT)
			{
	 	    	CCTVDegree[playerid] = (CCTVDegree[playerid] - 2.0);
			}
			else
			{
			    CCTVDegree[playerid] = (CCTVDegree[playerid] - 0.5);
			}
	  	    if(CCTVDegree[playerid] < 0)
	  	    {
	  	        CCTVDegree[playerid] = 359;
			}
	  	    MovePlayerCCTV(playerid);

		}
	    if(leftright == KEY_LEFT)
	    {
	        if(keys == KEY_SPRINT)
			{
	 	    	CCTVDegree[playerid] = (CCTVDegree[playerid] + 2.0);
			}
			else
			{
			    CCTVDegree[playerid] = (CCTVDegree[playerid] + 0.5);
			}
			if(CCTVDegree[playerid] >= 360)
	  	    {
	  	        CCTVDegree[playerid] = 0;
			}
	        MovePlayerCCTV(playerid);

	    }
	    if(updown == KEY_UP)
	    {
	        if(CCTVRadius[playerid] < 25)
	        {
		        if(keys == KEY_SPRINT)
				{
				    CCTVRadius[playerid] =  (CCTVRadius[playerid] + 0.5);
		        	MovePlayerCCTV(playerid);
				}
				else
				{
				    CCTVRadius[playerid] =  (CCTVRadius[playerid] + 0.1);
		        	MovePlayerCCTV(playerid);
				}
			}
		}
		if(updown == KEY_DOWN)
	    {
			if(keys == KEY_SPRINT)
			{
			    if(CCTVRadius[playerid] >= 0.6)
	        	{
				    CCTVRadius[playerid] =  (CCTVRadius[playerid] - 0.5);
			       	MovePlayerCCTV(playerid);
				}
			}
			else
			{
			    if(CCTVRadius[playerid] >= 0.2)
	        	{
				    CCTVRadius[playerid] =  (CCTVRadius[playerid] - 0.1);
			       	MovePlayerCCTV(playerid);
				}
			}
		}
		if(keys == KEY_CROUCH)
		{
		    SetPlayerPos(playerid, LastPos[playerid][LX], LastPos[playerid][LY], LastPos[playerid][LZ]);
			SetPlayerFacingAngle(playerid, LastPos[playerid][LA]);
			SetPlayerInterior(playerid, LastPos[playerid][LInterior]);
			TogglePlayerControllable(playerid, 1);
			KillTimer(KeyTimer[playerid]);
			SetCameraBehindPlayer(playerid);
			TextDrawHideForPlayer(playerid, TD);
			CurrentCCTV[playerid] = -1;
		}
	}
	MovePlayerCCTV(playerid);
}

stock MovePlayerCCTV(playerid)
{
	CCTVLA[playerid][0] = CCTVLAO[CurrentCCTV[playerid]][0] + (floatmul(CCTVRadius[playerid], floatsin(-CCTVDegree[playerid], degrees)));
	CCTVLA[playerid][1] = CCTVLAO[CurrentCCTV[playerid]][1] + (floatmul(CCTVRadius[playerid], floatcos(-CCTVDegree[playerid], degrees)));
 	SetPlayerCameraLookAt(playerid, CCTVLA[playerid][0], CCTVLA[playerid][1], CCTVLA[playerid][2]);
}

stock AddCCTV(name[], Float:X, Float:Y, Float:Z, Float:Angle)
{
	if(TotalCCTVS >= MAX_CCTVS) return 0;
	format(CameraName[TotalCCTVS], 32, "%s", name);
	CCTVCP[TotalCCTVS][0] = X;
	CCTVCP[TotalCCTVS][1] = Y;
	CCTVCP[TotalCCTVS][2] = Z;
	CCTVCP[TotalCCTVS][3] = Angle;
	CCTVLAO[TotalCCTVS][0] = X;
	CCTVLAO[TotalCCTVS][1] = Y;
	CCTVLAO[TotalCCTVS][2] = Z-10;
	TotalCCTVS++;
	return TotalCCTVS-1;
}

SetPlayerToCCTVCamera(playerid, CCTV)
{
	if(CCTV >= TotalCCTVS)
	{
	    SendClientMessage(playerid, 0xFF0000AA, "Invald CCTV");
	    return 1;
	}
	if(CurrentCCTV[playerid] == -1)
    {
	    GetPlayerPos(playerid, LastPos[playerid][LX], LastPos[playerid][LY], LastPos[playerid][LZ]);
		GetPlayerFacingAngle(playerid, LastPos[playerid][LA]);
        LastPos[playerid][LInterior] = GetPlayerInterior(playerid);
	}
	else
	{
		KillTimer(KeyTimer[playerid]);
	}
	CurrentCCTV[playerid] = CCTV;
    TogglePlayerControllable(playerid, 0);
	//SetPlayerPos(playerid, CCTVCP[CCTV][0], CCTVCP[CCTV][1], (CCTVCP[CCTV][2]-50));
	SetPlayerPos(playerid, CCTVCP[CCTV][0], CCTVCP[CCTV][1], -100.0);
	SetPlayerCameraPos(playerid, CCTVCP[CCTV][0], CCTVCP[CCTV][1], CCTVCP[CCTV][2]);
	SetPlayerCameraLookAt(playerid, CCTVLAO[CCTV][0], (CCTVLAO[CCTV][1]+0.2), CCTVLAO[CCTV][2]);
	CCTVLA[playerid][0] = CCTVLAO[CCTV][0];
	CCTVLA[playerid][1] = CCTVLAO[CCTV][1]+0.2;
	CCTVLA[playerid][2] = CCTVLAO[CCTV][2];
	CCTVRadius[playerid] = 12.5;
	CCTVDegree[playerid] = CCTVCP[CCTV][3];
	MovePlayerCCTV(playerid);
    KeyTimer[playerid] = SetTimerEx("CheckKeyPress", 75, 1, "i", playerid);
    TextDrawShowForPlayer(playerid, TD);
	return 1;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
	new Menu:Current = GetPlayerMenu(playerid);
	for(new menu; menu<TotalMenus; menu++)
	{

		if(Current == CCTVMenu[menu])
		{
		    if(MenuType[PlayerMenu[playerid]] == 1)
		    {
		        if(row == 11)
		        {
		            ShowMenuForPlayer(CCTVMenu[menu+1], playerid);
		            TogglePlayerControllable(playerid, 0);
		            PlayerMenu[playerid] = (menu+1);
				}
				else
				{
				    if(PlayerMenu[playerid] == 0)
				    {
				    	SetPlayerToCCTVCamera(playerid, row);
				    	PlayerMenu[playerid] = -1;
					}
					else
					{
					    SetPlayerToCCTVCamera(playerid, ((PlayerMenu[playerid]*11)+row));
					    PlayerMenu[playerid] = -1;
					}
				}
			}
			else
			{
			    if(PlayerMenu[playerid] == 0)
			    {
			    	SetPlayerToCCTVCamera(playerid, row);
			    	PlayerMenu[playerid] = -1;
				}
				else
				{
				    SetPlayerToCCTVCamera(playerid, ((PlayerMenu[playerid]*11)+row));
				    PlayerMenu[playerid] = -1;
				}
			}
		}
	}

	return 1;
}

public OnPlayerExitedMenu(playerid)
{
	TogglePlayerControllable(playerid, 1);
	PlayerMenu[playerid] = -1;
	return 1;
}

/*stock IsValidObjectModel(modelid)
{
	if (modelid < 0 || modelid > 20000)
	    return 0;

    switch (modelid)
	{
		case 18632..18645, 18646..18658, 18659..18667, 18668..19299, 19301..19515, 18631, 331, 333..339, 318..321, 325, 326, 341..344, 346..353, 355..370, 372:
			return 1;
	}
    new const g_arrModelData[] =
	{
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128,
        -515899393, -134217729, -1, -1, 33554431, -1, -1, -1, -14337, -1, -33,
      	127, 0, 0, 0, 0, 0, -8388608, -1, -1, -1, -16385, -1, -1, -1, -1, -1,
       -1, -1, -33, -1, -771751937, -1, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, 33554431, -25, -1, -1, -1, -1, -1, -1,
       -1073676289, -2147483648, 34079999, 2113536, -4825600, -5, -1, -3145729,
       -1, -16777217, -63, -1, -1, -1, -1, -201326593, -1, -1, -1, -1, -1,
       -257, -1, 1073741823, -133122, -1, -1, -65, -1, -1, -1, -1, -1, -1,
       -2146435073, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1073741823, -64, -1,
       -1, -1, -1, -2635777, 134086663, 0, -64, -1, -1, -1, -1, -1, -1, -1,
       -536870927, -131069, -1, -1, -1, -1, -1, -1, -1, -1, -16384, -1,
       -33554433, -1, -1, -1, -1, -1, -1610612737, 524285, -128, -1,
       2080309247, -1, -1, -1114113, -1, -1, -1, 66977343, -524288, -1, -1, -1,
       -1, -2031617, -1, 114687, -256, -1, -4097, -1, -4097, -1, -1,
       1010827263, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -32768, -1, -1, -1, -1, -1,
       2147483647, -33554434, -1, -1, -49153, -1148191169, 2147483647,
       -100781080, -262145, -57, 134217727, -8388608, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1048577, -1, -449, -1017, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1835009, -2049, -1, -1, -1, -1, -1, -1,
       -8193, -1, -536870913, -1, -1, -1, -1, -1, -87041, -1, -1, -1, -1, -1,
       -1, -209860, -1023, -8388609, -2096897, -1, -1048577, -1, -1, -1, -1,
       -1, -1, -897, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1610612737,
       -3073, -28673, -1, -1, -1, -1537, -1, -1, -13, -1, -1, -1, -1, -1985,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1056964609, -1, -1, -1,
       -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -236716037, -1, -1, -1, -1, -1, -1, -1, -536870913, 3, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -2097153, -2109441, -1, 201326591, -4194304, -1, -1,
       -241, -1, -1, -1, -1, -1, -1, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, -32768, -1, -1, -1, -2, -671096835, -1, -8388609, -66323585, -13,
       -1793, -32257, -247809, -1, -1, -513, 16252911, 0, 0, 0, -131072,
       33554383, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8356095, 0, 0, 0, 0, 0,
       0, -256, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -268435449, -1, -1, -2049, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       92274627, -65536, -2097153, -268435457, 591191935, 1, 0, -16777216, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127
	};
 	return ((modelid >= 0) && ((modelid / 32) < sizeof(g_arrModelData)) && (g_arrModelData[modelid / 32] & (1 << (modelid % 32))));
}*/

forward CloseGate(gateid, linkid, Float:fX, Float:fY, Float:fZ, Float:speed, Float:fRotX, Float:fRotY, Float:fRotZ);
public CloseGate(gateid, linkid, Float:fX, Float:fY, Float:fZ, Float:speed, Float:fRotX, Float:fRotY, Float:fRotZ)
{
	new id = -1;

	if (GateData[gateid][gateExists] && GateData[gateid][gateOpened])
 	{
	 	MoveDynamicObject(GateData[gateid][gateObject], fX, fY, fZ, speed, fRotX, fRotY, fRotZ);

	 	if ((id = GetGateByID(linkid)) != -1)
            MoveDynamicObject(GateData[id][gateObject], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], speed, GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5]);

		GateData[id][gateOpened] = 0;
		return 1;
	}
	return 0;
}

stock Gate_Operate(gateid)
{
	if (gateid != -1 && GateData[gateid][gateExists])
	{
	    new id = -1;

		if (!GateData[gateid][gateOpened])
		{
		    GateData[gateid][gateOpened] = true;
		    MoveDynamicObject(GateData[gateid][gateObject], GateData[gateid][gateMove][0], GateData[gateid][gateMove][1], GateData[gateid][gateMove][2], GateData[gateid][gateSpeed], GateData[gateid][gateMove][3], GateData[gateid][gateMove][4], GateData[gateid][gateMove][5]);

            if (GateData[gateid][gateTime] > 0) {
				GateData[gateid][gateTimer] = SetTimerEx("CloseGate", GateData[gateid][gateTime], false, "ddfffffff", gateid, GateData[gateid][gateLinkID], GateData[gateid][gatePos][0], GateData[gateid][gatePos][1], GateData[gateid][gatePos][2], GateData[gateid][gateSpeed], GateData[gateid][gatePos][3], GateData[gateid][gatePos][4], GateData[gateid][gatePos][5]);
			}
			if (GateData[gateid][gateLinkID] != -1 && (id = GetGateByID(GateData[gateid][gateLinkID])) != -1)
			{
			    GateData[id][gateOpened] = true;
			    MoveDynamicObject(GateData[id][gateObject], GateData[id][gateMove][0], GateData[id][gateMove][1], GateData[id][gateMove][2], GateData[id][gateSpeed], GateData[id][gateMove][3], GateData[id][gateMove][4], GateData[id][gateMove][5]);
			}
		}
		else if (GateData[gateid][gateOpened])
		{
		    GateData[gateid][gateOpened] = false;
		    MoveDynamicObject(GateData[gateid][gateObject], GateData[gateid][gatePos][0], GateData[gateid][gatePos][1], GateData[gateid][gatePos][2], GateData[gateid][gateSpeed], GateData[gateid][gatePos][3], GateData[gateid][gatePos][4], GateData[gateid][gatePos][5]);

            if (GateData[gateid][gateTime] > 0) {
				KillTimer(GateData[gateid][gateTimer]);
		    }
			if (GateData[gateid][gateLinkID] != -1 && (id = GetGateByID(GateData[gateid][gateLinkID])) != -1)
			{
			    GateData[id][gateOpened] = false;
			    MoveDynamicObject(GateData[id][gateObject], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gateSpeed], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5]);
			}
		}
	}
	return 1;
}

stock Object_Duplicate(playerid, idx)
{
	for (new i = 0; i < MAX_MAPOBJECTS; i ++) if (!ObjectData[i][mobjExists])
	{
		ObjectData[i][mobjExists] = true;
		ObjectData[i][mobjModel] = ObjectData[idx][mobjModel];

		ObjectData[i][mobjPos][0] = ObjectData[idx][mobjPos][0];
		ObjectData[i][mobjPos][1] = ObjectData[idx][mobjPos][1];
		ObjectData[i][mobjPos][2] = ObjectData[idx][mobjPos][2];
		ObjectData[i][mobjPos][3] = ObjectData[idx][mobjPos][3];
		ObjectData[i][mobjPos][4] = ObjectData[idx][mobjPos][4];
		ObjectData[i][mobjPos][5] = ObjectData[idx][mobjPos][5];

		ObjectData[i][mobjInterior] = ObjectData[idx][mobjInterior];
		ObjectData[i][mobjWorld] = ObjectData[idx][mobjInterior];

		ObjectData[i][mobjObject] = CreateDynamicObject(ObjectData[idx][mobjModel], ObjectData[idx][mobjPos][0], ObjectData[idx][mobjPos][1], ObjectData[idx][mobjPos][2], ObjectData[idx][mobjPos][3], ObjectData[idx][mobjPos][4], ObjectData[idx][mobjPos][5], ObjectData[idx][mobjWorld], ObjectData[idx][mobjInterior]);

		new string[48];
		format(string, sizeof(string), "[%i]\nID: %i", ObjectData[i][mobjModel], i);
		ObjectData[i][mobjname2] = CreateDynamic3DTextLabel(string, COLOR_GREY, ObjectData[i][mobjPos][0], ObjectData[i][mobjPos][1], ObjectData[i][mobjPos][2], 5.0);

		mysql_tquery(connectionID, "INSERT INTO `object` (`mobjModel`) VALUES(980)", "OnObjectCreated", "d", i);

		pData[playerid][pEditmObject] = -1;
		EditDynamicObject(playerid, ObjectData[i][mobjObject]);
		pData[playerid][pEditmObject] = i;
		pData[playerid][pEditType] = EDIT_OBJECT_PREVIEW;
		SM(playerid, COLOR_WHITE, "You are now adjusting the position of object ID: %d.", i);
		return i;
	}
	return -1;
}

stock Object_Create(playerid, idx)
{
	new
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i < MAX_MAPOBJECTS; i ++) if (!ObjectData[i][mobjExists])
		{
		    ObjectData[i][mobjExists] = true;
			ObjectData[i][mobjModel] = idx;

			ObjectData[i][mobjPos][0] = x + (3.0 * floatsin(-angle, degrees));
			ObjectData[i][mobjPos][1] = y + (3.0 * floatcos(-angle, degrees));
			ObjectData[i][mobjPos][2] = z;
			ObjectData[i][mobjPos][3] = 0.0;
			ObjectData[i][mobjPos][4] = 0.0;
			ObjectData[i][mobjPos][5] = angle;

            ObjectData[i][mobjInterior] = GetPlayerInterior(playerid);
            ObjectData[i][mobjWorld] = GetPlayerVirtualWorld(playerid);

            ObjectData[i][mobjObject] = CreateDynamicObject(ObjectData[i][mobjModel], ObjectData[i][mobjPos][0], ObjectData[i][mobjPos][1], ObjectData[i][mobjPos][2], ObjectData[i][mobjPos][3], ObjectData[i][mobjPos][4], ObjectData[i][mobjPos][5], ObjectData[i][mobjWorld], ObjectData[i][mobjInterior]);

			new string[48];
			format(string, sizeof(string), "[%i]\nID: %i", ObjectData[i][mobjModel], i);
			ObjectData[i][mobjname2] = CreateDynamic3DTextLabel(string, COLOR_GREY, ObjectData[i][mobjPos][0], ObjectData[i][mobjPos][1], ObjectData[i][mobjPos][2], 5.0);

			mysql_tquery(connectionID, "INSERT INTO `object` (`mobjModel`) VALUES(980)", "OnObjectCreated", "d", i);

			pData[playerid][pEditmObject] = -1;
			EditDynamicObject(playerid, ObjectData[i][mobjObject]);
			pData[playerid][pEditmObject] = i;
			pData[playerid][pEditType] = EDIT_OBJECT_PREVIEW;
			SM(playerid, COLOR_WHITE, "You are now adjusting the position of object ID: %d.", i);
			return i;
		}
	}
	return -1;
}

stock Gate_Create(playerid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i < MAX_GATES; i ++) if (!GateData[i][gateExists])
		{
		    GateData[i][gateExists] = true;
			GateData[i][gateModel] = 980;
			GateData[i][gateSpeed] = 3.0;
			GateData[i][gateRadius] = 5.0;
			GateData[i][gateOpened] = 0;
			GateData[i][gateTime] = 0;

			GateData[i][gatePos][0] = x + (3.0 * floatsin(-angle, degrees));
			GateData[i][gatePos][1] = y + (3.0 * floatcos(-angle, degrees));
			GateData[i][gatePos][2] = z;
			GateData[i][gatePos][3] = 0.0;
			GateData[i][gatePos][4] = 0.0;
			GateData[i][gatePos][5] = angle;

			GateData[i][gateMove][0] = x + (3.0 * floatsin(-angle, degrees));
			GateData[i][gateMove][1] = y + (3.0 * floatcos(-angle, degrees));
			GateData[i][gateMove][2] = z - 10.0;
			GateData[i][gateMove][3] = -1000.0;
			GateData[i][gateMove][4] = -1000.0;
			GateData[i][gateMove][5] = -1000.0;

            GateData[i][gateInterior] = GetPlayerInterior(playerid);
            GateData[i][gateWorld] = GetPlayerVirtualWorld(playerid);

            GateData[i][gateLinkID] = -1;
            GateData[i][gateFaction] = -1;

            GateData[i][gatePass][0] = '\0';
            GateData[i][gateObject] = CreateDynamicObject(GateData[i][gateModel], GateData[i][gatePos][0], GateData[i][gatePos][1], GateData[i][gatePos][2], GateData[i][gatePos][3], GateData[i][gatePos][4], GateData[i][gatePos][5], GateData[i][gateWorld], GateData[i][gateInterior]);

			mysql_tquery(connectionID, "INSERT INTO `gates` (`gateModel`) VALUES(980)", "OnGateCreated", "d", i);
			return i;
		}
	}
	return -1;
}

stock Gate_Delete(gateid)
{
	if (gateid != -1 && GateData[gateid][gateExists])
	{
		new
		    query[64];

		format(query, sizeof(query), "DELETE FROM `gates` WHERE `gateID` = '%d'", GateData[gateid][gateID]);
		mysql_tquery(connectionID, query);

		if (IsValidDynamicObject(GateData[gateid][gateObject]))
		    DestroyDynamicObject(GateData[gateid][gateObject]);

		for (new i = 0; i != MAX_GATES; i ++) if (GateData[i][gateExists] && GateData[i][gateLinkID] == GateData[gateid][gateID]) {
		    GateData[i][gateLinkID] = -1;
		    Gate_Save(i);
		}
		if (GateData[gateid][gateOpened] && GateData[gateid][gateTime] > 0) {
		    KillTimer(GateData[gateid][gateTimer]);
		}
	    GateData[gateid][gateExists] = false;
	    GateData[gateid][gateID] = 0;
	    GateData[gateid][gateOpened] = 0;
	}
	return 1;
}

stock Object_Delete(gateid)
{
	if (gateid != -1 && ObjectData[gateid][mobjExists])
	{
		new
		    query[64];

		format(query, sizeof(query), "DELETE FROM `object` WHERE `mobjID` = '%d'", ObjectData[gateid][mobjID]);
		mysql_tquery(connectionID, query);

		if (IsValidDynamicObject(ObjectData[gateid][mobjObject]))
		    DestroyDynamicObject(ObjectData[gateid][mobjObject]);

		if (IsValidDynamic3DTextLabel(ObjectData[gateid][mobjname2]))
			DestroyDynamic3DTextLabel(ObjectData[gateid][mobjname2]);

	    ObjectData[gateid][mobjExists] = false;
	    ObjectData[gateid][mobjID] = 0;
	}
	return 1;
}

stock Object_Save(gateid)
{
	new
	    query[768];

	format(query, sizeof(query), "UPDATE `object` SET `mobjModel` = '%d', `mobjX` = '%.4f', `mobjY` = '%.4f', `mobjZ` = '%.4f', `mobjRX` = '%.4f', `mobjRY` = '%.4f', `mobjRZ` = '%.4f', `mobjInterior` = '%d', `mobjWorld` = '%d' WHERE `mobjID` = '%d'",
	    ObjectData[gateid][mobjModel],
	    ObjectData[gateid][mobjPos][0],
	    ObjectData[gateid][mobjPos][1],
	    ObjectData[gateid][mobjPos][2],
	    ObjectData[gateid][mobjPos][3],
	    ObjectData[gateid][mobjPos][4],
	    ObjectData[gateid][mobjPos][5],
	    ObjectData[gateid][mobjInterior],
	    ObjectData[gateid][mobjWorld],
	    ObjectData[gateid][mobjID]
	);
	return mysql_tquery(connectionID, query);
}

stock Gate_Save(gateid)
{
	new
	    query[768];

	format(query, sizeof(query), "UPDATE `gates` SET `gateModel` = '%d', `gateSpeed` = '%.4f', `gateRadius` = '%.4f', `gateTime` = '%d', `gateX` = '%.4f', `gateY` = '%.4f', `gateZ` = '%.4f', `gateRX` = '%.4f', `gateRY` = '%.4f', `gateRZ` = '%.4f', `gateInterior` = '%d', `gateWorld` = '%d', `gateMoveX` = '%.4f', `gateMoveY` = '%.4f', `gateMoveZ` = '%.4f', `gateMoveRX` = '%.4f', `gateMoveRY` = '%.4f', `gateMoveRZ` = '%.4f', `gateLinkID` = '%d', `gateFaction` = '%d', `gatePass` = '%s' WHERE `gateID` = '%d'",
	    GateData[gateid][gateModel],
	    GateData[gateid][gateSpeed],
	    GateData[gateid][gateRadius],
	    GateData[gateid][gateTime],
	    GateData[gateid][gatePos][0],
	    GateData[gateid][gatePos][1],
	    GateData[gateid][gatePos][2],
	    GateData[gateid][gatePos][3],
	    GateData[gateid][gatePos][4],
	    GateData[gateid][gatePos][5],
	    GateData[gateid][gateInterior],
	    GateData[gateid][gateWorld],
	    GateData[gateid][gateMove][0],
	    GateData[gateid][gateMove][1],
	    GateData[gateid][gateMove][2],
	    GateData[gateid][gateMove][3],
	    GateData[gateid][gateMove][4],
	    GateData[gateid][gateMove][5],
	    GateData[gateid][gateLinkID],
	    GateData[gateid][gateFaction],
	    SQL_ReturnEscaped(GateData[gateid][gatePass]),
	    GateData[gateid][gateID]
	);
	return mysql_tquery(connectionID, query);
}

forward Gate_Load();
public Gate_Load()
{
    static
	    rows,
	    fields;

	cache_get_data(rows, fields, connectionID);

	for (new i = 0; i < rows; i ++) if (i < MAX_GATES)
	{
	    GateData[i][gateExists] = true;
	    GateData[i][gateOpened] = false;

	    GateData[i][gateID] = cache_get_field_content_int(i, "gateID");
	    GateData[i][gateModel] = cache_get_field_content_int(i, "gateModel");
	    GateData[i][gateSpeed] = cache_get_field_content_float(i, "gateSpeed");
	    GateData[i][gateRadius] = cache_get_field_content_float(i, "gateRadius");
	    GateData[i][gateTime] = cache_get_field_content_int(i, "gateTime");
	    GateData[i][gateInterior] = cache_get_field_content_int(i, "gateInterior");
	    GateData[i][gateWorld] = cache_get_field_content_int(i, "gateWorld");

	    GateData[i][gatePos][0] = cache_get_field_content_float(i, "gateX");
	    GateData[i][gatePos][1] = cache_get_field_content_float(i, "gateY");
	    GateData[i][gatePos][2] = cache_get_field_content_float(i, "gateZ");
	    GateData[i][gatePos][3] = cache_get_field_content_float(i, "gateRX");
	    GateData[i][gatePos][4] = cache_get_field_content_float(i, "gateRY");
	    GateData[i][gatePos][5] = cache_get_field_content_float(i, "gateRZ");

        GateData[i][gateMove][0] = cache_get_field_content_float(i, "gateMoveX");
	    GateData[i][gateMove][1] = cache_get_field_content_float(i, "gateMoveY");
	    GateData[i][gateMove][2] = cache_get_field_content_float(i, "gateMoveZ");
	    GateData[i][gateMove][3] = cache_get_field_content_float(i, "gateMoveRX");
	    GateData[i][gateMove][4] = cache_get_field_content_float(i, "gateMoveRY");
	    GateData[i][gateMove][5] = cache_get_field_content_float(i, "gateMoveRZ");

        GateData[i][gateLinkID] = cache_get_field_content_int(i, "gateLinkID");
	    GateData[i][gateFaction] = cache_get_field_content_int(i, "gateFaction");

	    cache_get_field_content(i, "gatePass", GateData[i][gatePass], connectionID, 32);

	    GateData[i][gateObject] = CreateDynamicObject(GateData[i][gateModel], GateData[i][gatePos][0], GateData[i][gatePos][1], GateData[i][gatePos][2], GateData[i][gatePos][3], GateData[i][gatePos][4], GateData[i][gatePos][5], GateData[i][gateWorld], GateData[i][gateInterior]);
	}
	return 1;
}

forward Object_Load();
public Object_Load()
{
    static
	    rows,
	    fields;

	cache_get_data(rows, fields, connectionID);

	for (new i = 0; i < rows; i ++) if (i < MAX_MAPOBJECTS)
	{
	    ObjectData[i][mobjExists] = true;
	    ObjectData[i][mobjID] = cache_get_field_content_int(i, "mobjID");
	    ObjectData[i][mobjModel] = cache_get_field_content_int(i, "mobjModel");
	    ObjectData[i][mobjInterior] = cache_get_field_content_int(i, "mobjInterior");
	    ObjectData[i][mobjWorld] = cache_get_field_content_int(i, "mobjWorld");
	    ObjectData[i][mobjPos][0] = cache_get_field_content_float(i, "mobjX");
	    ObjectData[i][mobjPos][1] = cache_get_field_content_float(i, "mobjY");
	    ObjectData[i][mobjPos][2] = cache_get_field_content_float(i, "mobjZ");
	    ObjectData[i][mobjPos][3] = cache_get_field_content_float(i, "mobjRX");
	    ObjectData[i][mobjPos][4] = cache_get_field_content_float(i, "mobjRY");
	    ObjectData[i][mobjPos][5] = cache_get_field_content_float(i, "mobjRZ");

	    ObjectData[i][mobjObject] = CreateDynamicObject(ObjectData[i][mobjModel], ObjectData[i][mobjPos][0], ObjectData[i][mobjPos][1], ObjectData[i][mobjPos][2], ObjectData[i][mobjPos][3], ObjectData[i][mobjPos][4], ObjectData[i][mobjPos][5], ObjectData[i][mobjWorld], ObjectData[i][mobjInterior]);

		new string[48];
		format(string, sizeof(string), "[%i]\nID: %i", ObjectData[i][mobjModel], i);
		ObjectData[i][mobjname2] = CreateDynamic3DTextLabel(string, COLOR_GREY, ObjectData[i][mobjPos][0], ObjectData[i][mobjPos][1], ObjectData[i][mobjPos][2], 5.0);
	}
	return 1;
}

stock number_format(number)
{
	new i, string[15];
	FIXES_valstr(string, number);
	if(strfind(string, "-") != -1) i = strlen(string) - 4;
	else i = strlen(string) - 3;
	while (i >= 1)
 	{
		if(strfind(string, "-") != -1) strins(string, ",", i + 1);
		else strins(string, ",", i);
		i -= 3;
	}
	return string;
}

stock RBS(bizid)
{
	new string[128];
	if(BusinessInfo[bizid][bLocked] == 1) format(string, sizeof(string), "{AA3333}Closed"WHITE"");
    else if(BusinessInfo[bizid][bLocked] == 0) format(string, sizeof(string), "{00FF00}Opened"WHITE"");
	return string;
}

stock FIXES_valstr(dest[], value, bool:pack = false)
{
    // format can't handle cellmin properly
    static const cellmin_value[] = !"-2147483648";

    if (value == cellmin)
        pack && strpack(dest, cellmin_value, 12) || strunpack(dest, cellmin_value, 12);
    else
        format(dest, 12, "%d", value) && pack && strpack(dest, dest, 12);
}

stock TerminateInfo(playerid, reason)
{
    if(Reconnecting[playerid] == true)
    {
    	new string[64];
     	format(string, sizeof(string), "unbanip %s", ReconnectIP[playerid]);
      	SendRconCommand(string);
       	Reconnecting[playerid] = false;
       	SendRconCommand("reloadbans");
	}
    if(IsPlayerNPC(playerid)) return 1;


	//PlayerTextDrawDestroy(playerid, HungerTD[playerid]);
	PlayerTextDrawDestroy(playerid, SpeedoTextdraw(playerid));
	PlayerTextDrawDestroy(playerid, HungerTD(playerid))
	DestroyDynamic3DTextLabel(PlayerLabel[playerid]);
	DestroyDynamic3DTextLabel(InjuredLabel[playerid]);
    DestroyPlayerProgressBar(playerid, ProgressfreeBar[playerid][0]);
    
    //PlayerTextDrawDestroy(playerid, SampvoiceTD[playerid][0]);


	/*#if defined Christmas
	#else
		PlayerTextDrawDestroy(playerid, EventTextdraw[playerid]);
	#endif*/

	Maskara[playerid] = 0;

	if(CurrentCCTV[playerid] > -1)
	{
	    KillTimer(KeyTimer[playerid]);
	    TextDrawHideForPlayer(playerid, TD);
	}
	CurrentCCTV[playerid] = -1;

 	DestroyDynamic3DTextLabel(pData[playerid][aMeID]);
 	pData[playerid][aMeStatus] = 0;

	KillTimer(Timer[playerid]);
    pBlood[playerid] = false;
	ResetPlayerVariables(playerid);
	foreach(new i : Player)
	{
	    if(pData[i][pSpectating] == playerid)
	    {
	        SM(i, COLOR_ORANGE, "You are no longer spectating %s (ID %i).", GetRPName(pData[i][pSpectating]), pData[i][pSpectating]);
	    	pData[i][pSpectating] = INVALID_PLAYER_ID;
	    	SetPlayerToSpawn(i);
		}
		if(pData[i][pHouseOffer] == playerid)
		{
		    pData[i][pHouseOffer] = INVALID_PLAYER_ID;
		}
        if(pData[i][pGarageOffer] == playerid)
		{
		    pData[i][pGarageOffer] = INVALID_PLAYER_ID;
		}
		if(pData[i][pBizOffer] == playerid)
		{
		    pData[i][pBizOffer] = INVALID_PLAYER_ID;
		}
 		if(pData[i][pMarriageOffer] == playerid)
		{
		    pData[i][pMarriageOffer] = INVALID_PLAYER_ID;
		}
		if(pData[i][pVestOffer] == playerid)
		{
		    pData[i][pVestOffer] = INVALID_PLAYER_ID;
		}
		if(pData[i][pCarOffer] == playerid)
		{
		    pData[i][pCarOffer] = INVALID_PLAYER_ID;
		}
		if(pData[i][pFactionOffer] == playerid)
		{
		    pData[i][pFactionOffer] = INVALID_PLAYER_ID;
		}
		if(pData[i][pGangOffer] == playerid)
		{
		    pData[i][pGangOffer] = INVALID_PLAYER_ID;
		}
		if(pData[i][pFriskOffer] == playerid)
		{
		    pData[i][pFriskOffer] = INVALID_PLAYER_ID;
		}
		if(pData[i][pTicketOffer] == playerid)
		{
		    pData[i][pTicketOffer] = INVALID_PLAYER_ID;
		}
		if(pData[i][pLiveOffer] == playerid)
		{
		    pData[i][pLiveOffer] = INVALID_PLAYER_ID;
		}
		if(pData[i][pLiveBroadcast] == playerid)
		{
		    pData[i][pLiveBroadcast] = INVALID_PLAYER_ID;
		}
		if(pData[i][pShakeOffer] == playerid)
		{
		    pData[i][pShakeOffer] = INVALID_PLAYER_ID;
		}
		if(pData[i][pLandOffer] == playerid)
		{
		    pData[i][pLandOffer] = INVALID_PLAYER_ID;
		}
		if(pData[i][pSellOffer] == playerid)
		{
		    pData[i][pSellOffer] = INVALID_PLAYER_ID;
		}
 		if(pData[i][pAllianceOffer] == playerid)
		{
		    pData[i][pSellOffer] = INVALID_PLAYER_ID;
		}
        if(pData[i][pDefendOffer] == playerid)
		{
		    pData[i][pDefendOffer] = INVALID_PLAYER_ID;
		}
		if(pData[i][pDiceOffer] == playerid)
		{
		    pData[i][pDiceOffer] = INVALID_PLAYER_ID;
		}
		if(pData[i][pSendRob] == playerid)
		{
		    pData[i][pSendRob] = INVALID_PLAYER_ID;
		}
		if(pData[i][pInviteOffer] == playerid)
		{
		    pData[i][pInviteOffer] = INVALID_PLAYER_ID;
		}
		if(pData[i][pRobberyOffer] == playerid)
		{
		    pData[i][pRobberyOffer] = INVALID_PLAYER_ID;
		}
		if(pData[i][pTextFrom] == playerid)
		{
		    pData[i][pTextFrom] = INVALID_PLAYER_ID;
		}
		if(pData[i][pWhisperFrom] == playerid)
		{
		    pData[i][pWhisperFrom] = INVALID_PLAYER_ID;
		}
		if(pData[i][pFindPlayer] == playerid)
		{
		    pData[i][pFindPlayer] = INVALID_PLAYER_ID;
		}
		if(chattingWith[i]{playerid})
		{
		    SM(i, COLOR_YELLOW, "Your chat with %s (ID %i) has ended as they left the server.", GetRPName(playerid), playerid);
		    chattingWith[i]{playerid} = false;
		}
		if(pData[i][pActiveReport] >= 0 && (ReportInfo[pData[i][pActiveReport]][rHandledBy] == playerid || ReportInfo[pData[i][pActiveReport]][rReporter] == playerid))
		{
		    if(ReportInfo[pData[i][pActiveReport]][rHandledBy] == playerid)
				SCM(i, COLOR_YELLOW, "The player who made the report has left the server.");
			else
                SCM(i, COLOR_YELLOW, "The admin who accepted the report has left the server.");

		    ReportInfo[pData[i][pActiveReport]][rExists] = 0;
		    pData[i][pActiveReport] = -1;
		}
		if(pData[i][pDueling] == playerid)
		{
		    SCM(i, COLOR_WHITE, "Your target has left the server.");
		    pData[i][pDueling] = INVALID_PLAYER_ID;
		    SetPlayerToSpawn(i);
		}
		if(pData[i][pContractTaken] == playerid)
		{
		    SCM(i, COLOR_YELLOW, "Your contract target has disconnected from the server.");
		    pData[i][pContractTaken] = INVALID_PLAYER_ID;
		}
		if(pData[i][pDraggedBy] == playerid)
		{
		    SCM(i, COLOR_AQUA, "The person dragging you has disconnected. You are free!");
			pData[i][pDraggedBy] = INVALID_PLAYER_ID;
		}
		if(pData[i][pTaxiPassenger] == playerid)
		{
		    CancelTaxiRide(i);
		}
		if(pData[i][pCallLine] == playerid)
		{
		    HangupCall(pData[i][pCallLine], HANGUP_DROPPED);
		}
	}
	if(pData[playerid][pLogged])
	{
		/*if(pData[playerid][pHurt])
		{
		    SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s possibly left the server while in a gunfight.", GetRPName(playerid));
			pData[playerid][pInjured] = 1;
		}*/
	    SavePlayerVariables(playerid);
	    if(pData[playerid][pTazedTime] > 0 || pData[playerid][pCuffed] > 0)
		{
	    	SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s left the server while tazed or cuffed.", GetRPName(playerid));
        	ResetPlayerWeaponsEx(playerid);

			SMA(COLOR_LIGHTRED, "Admcmd: %s was prisoned by %s. Reason: Quitting During Arrest.", GetRPName(playerid), SERVER_BOT);
		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET jailtype = 2, jailtime = 1200, prisonedby = 'Server', prisonreason = 'Logging to avoid arrest' WHERE uid = %i", pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
	}
	/*if(pData[playerid][pActiveReport] >= 0)
	{
	    callcmd::cr(playerid, "\1");
	}*/
	if(pData[playerid][pAcceptedEMS] != INVALID_PLAYER_ID)
	{
		SM(pData[playerid][pAcceptedEMS], COLOR_YELLOW, "Your patient %s has left the server while injured.", GetRPName(playerid));
		pData[playerid][pAcceptedEMS] = INVALID_PLAYER_ID;
	}
	foreach(new i : Player)
	{
	    if(pData[i][pAcceptedEMS] == playerid)
	    {
	        SCM(i, COLOR_YELLOW, "Your medic has left the server while rescuing you. (you can now accept your fate)");
	        pData[i][pAcceptedEMS] = INVALID_PLAYER_ID;
	    }
	}
	if(IsValidDynamicObject(pData[playerid][pEditObject]))
	{
	    DestroyDynamicObject(pData[playerid][pEditObject]);
	}
	if(IsValidDynamic3DTextLabel(pData[playerid][pSpecialTag]))
	{
	    DestroyDynamic3DTextLabel(pData[playerid][pSpecialTag]);
	}
	if(IsValidDynamicObject(pData[playerid][pBombObject]))
	{
	    DestroyDynamicObject(pData[playerid][pBombObject]);
	}
	if(IsValidDynamicObject(pData[playerid][pPotObject]))
	{
	    DestroyDynamicObject(pData[playerid][pPotObject]);
	}
	if(pData[playerid][pAdminDuty])
	{
	    SetPlayerName(playerid, pData[playerid][pUsername]);
	}
	if(pData[playerid][pBoomboxPlaced])
	{
	    DestroyBoombox(playerid);
	}
	if(pData[playerid][pZoneID] >= 0)
	{
	    GangZoneDestroy(pData[playerid][pZoneID]);
	}
	if(RobberyInfo[rPlanning] || RobberyInfo[rStarted])
	{
		RemoveFromBankRobbery(playerid);
	}
	/*if(pData[playerid][pDyuze])
	{
	    KillTimer(pData[playerid][pDyuzeTimer]);
	}*/
	if(pData[playerid][pDyuze])
	{
	    KillTimer(pData[playerid][pDyuzeTimer]);
	}
	if(pData[playerid][pAdrian])
	{
	    KillTimer(pData[playerid][pAdrianTimer]);
	}
	if(pData[playerid][pPriority])
	{
	    KillTimer(pData[playerid][pPriorityTimer]);
	}
	for(new i = 0; i < 4; i ++)
	{
	    if(IsValidDynamicPickup(pData[playerid][pZonePickups][i]))
	    {
	        DestroyDynamicPickup(pData[playerid][pZonePickups][i]);
	    }
	}

	if(pData[playerid][pLogged])
	{
		for(new i = 1; i < MAX_VEHICLES; i ++)
		{
	    	if(IsValidVehicle(i) && IsVehicleOwner(playerid, i) && VehicleInfo[i][vTimer] == -1)
		    {
				VehicleInfo[i][vTimer] = SetTimerEx("DespawnTimer", 300000, false, "i", i);
	   		}
		}
	}
	for(new i = 0; i < MAX_REPORTS; i ++)
	{
	    if(ReportInfo[i][rExists] && ReportInfo[i][rReporter] == playerid)
	    {
	        ReportInfo[i][rExists] = 0;
		}
	}

	/*for(new i = 0; i < MAX_POINTS; i ++)
	{
	    if(PointInfo[i][pExists] && PointInfo[i][pCaptureTime] > 0 && PointInfo[i][pCapturer] == playerid)
	    {
	        SendProximityMessage(i, 20.0, COLOR_RED, "(( %s disconnected and therefore failed to capture the point. ))", GetRPName(playerid));

	        PointInfo[i][pCapturer] = INVALID_PLAYER_ID;
	        PointInfo[i][pCaptureTime] = 0;
	    }
	}

	for(new i = 0; i < MAX_TURFS; i ++)
	{
	    if(TurfInfo[i][tExists] && TurfInfo[i][tCaptureTime] > 0 && TurfInfo[i][tCapturer] == playerid)
	    {
	        if(reason == 0)
			{
				if(pData[playerid][pGang] >= 0)
		        {
		            GangInfo[pData[playerid][pGang]][gTurfTokens]++;
		            SendGangMessage(pData[playerid][pGang], COLOR_YELLOW, "%s crashed while attempting to capture a turf. 1 turf token was refunded to your gang.", GetRPName(playerid));

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET turftokens = turftokens + 1 WHERE id = %i", pData[playerid][pGang]);
		            mysql_tquery(connectionID, queryBuffer);
				}
				else if(pData[playerid][pFaction] >= 0)
		        {
		            FactionInfo[pData[playerid][pFaction]][fTurfTokens]++;
		            SendFactionMessage(pData[playerid][pFaction], COLOR_YELLOW, "%s crashed while attempting to capture a turf. 1 turf token was refunded to your faction.", GetRPName(playerid));

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET turftokens = turftokens + 1 WHERE id = %i", pData[playerid][pFaction]);
		            mysql_tquery(connectionID, queryBuffer);
				}
			}

	        SendTurfMessage(i, COLOR_RED, "(( %s disconnected and therefore failed to capture the turf. ))", GetRPName(playerid));

	        TurfInfo[i][tCapturer] = INVALID_PLAYER_ID;
	        TurfInfo[i][tCaptureTime] = 0;
	        ReloadTurf(i);
	    }
	}*/

	switch(reason)
	{
	    case 0: SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "** %s has left the server. (Timeout)", GetRPName(playerid));
	    case 1: SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "** %s has left the server. (Leaving)", GetRPName(playerid));
	    case 2: SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "** %s has left the server. (Kicked)", GetRPName(playerid));
	}
	/*#if defined DISCORD
		DCC_SetGuildMemberVoiceChannel(DCC_FindGuildById(GUILDSVR), DCC_FindUserByName(pData[playerid][pDiscordName], pData[playerid][pDiscordTag]), DCC_FindChannelById(VCLOBBY));
	#endif*/
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM shots WHERE (playerid = %i) OR (hitid = %i AND hittype = 1)", playerid, playerid);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}

// Vehicle Tank Explode
stock Float: GetDistanceCameraToLocation(Float: cam_X, Float: cam_Y, Float: cam_Z, Float: vect_X, Float: vect_Y, Float: vect_Z, Float: dest_X, Float: dest_Y, Float: dest_Z, Float: targetDist = 0.0)
{
        cam_X -= dest_X;
        cam_Y -= dest_Y;
        cam_Z -= dest_Z;

        targetDist = floatsqroot(cam_X * cam_X + cam_Y * cam_Y + cam_Z * cam_Z);

        cam_X += vect_X * targetDist;
        cam_Y += vect_Y * targetDist;
        cam_Z += vect_Z * targetDist;

        return floatsqroot(cam_X * cam_X + cam_Y * cam_Y + cam_Z * cam_Z);
}

stock IsPlayerAimingAtPoint(playerid, Float: pos_X, Float: pos_Y, Float: pos_Z, Float: aimRadius)
{
        new
                Float: cam_Pos[3],
                Float: cam_Vect[3]
        ;
        GetPlayerCameraPos(playerid, cam_Pos[0], cam_Pos[1], cam_Pos[2]);
        GetPlayerCameraFrontVector(playerid, cam_Vect[0], cam_Vect[1], cam_Vect[2]);

        new
                Float: aimOffset
        ;
        switch(GetPlayerWeapon(playerid))
        {
                case 22, 23, 24, 25, 26, 27, 28, 29, 32, 38: aimOffset = -2.1;
                case 30, 31: aimOffset = -1.3;
                case 33: aimOffset = -0.9;
                case 34: return GetDistanceCameraToLocation(cam_Pos[0], cam_Pos[1], cam_Pos[2], cam_Vect[0], cam_Vect[1], cam_Vect[2], pos_X, pos_Y, pos_Z) < aimRadius;
                default: return 0;
        }
        new
                Float: aimAngle = atan2(cam_Vect[2], floatsqroot(cam_Vect[0] * cam_Vect[0] + cam_Vect[1] * cam_Vect[1])),
                Float: tmpVar
        ;
        cam_Vect[2] = floatcos(aimAngle + (aimOffset * -2), degrees) * floatsin(-(atan2(cam_Vect[1], cam_Vect[0]) + aimOffset + 270.0), degrees);
        tmpVar = floatcos(aimAngle + (aimOffset * -2), degrees) * floatcos(-(atan2(cam_Vect[1], cam_Vect[0]) + aimOffset + 270.0), degrees);

        return GetDistanceCameraToLocation(cam_Pos[0], cam_Pos[1], cam_Pos[2], cam_Vect[2], tmpVar, floatsin(aimAngle + (aimOffset * -2), degrees), pos_X, pos_Y, pos_Z) < aimRadius;
}

stock GetPetrolcapOffsets(modelID, &Float: aimOffset_X, &Float: aimOffset_Y, &Float: aimOffset_Z)
{
        enum e_PetrolcapData
        {
                e_ModelID,
                Float: e_Offset_X,
                Float: e_Offset_Y,
                Float: e_Offset_Z
        };
        static const
                g_PetrolcapData[][e_PetrolcapData] =
                {
                        { 400, -1.100, -2.059, -0.070 },
                        { 401, 1.090, -0.939, 0.000 },
                        { 402, 1.039, -1.919, 0.140 },
                        { 403, -1.450, 0.070, -0.800 },
                        { 404, -0.939, -2.359, -0.009 },
                        { 405, -1.039, -2.180, -0.039 },
                        { 407, -1.110, -3.660, -0.540 },
                        { 408, -1.230, 1.299, -0.660 },
                        { 409, -0.980, -2.829, 0.119 },
                        { 410, -1.019, -1.669, 0.209 },
                        { 411, 1.090, -2.099, 0.090 },
                        { 412, 0.000, -3.549, -0.170 },
                        { 413, -1.049, 0.340, -0.529 },
                        { 414, -0.920, -0.740, -0.699 },
                        { 415, -1.129, -2.069, 0.019 },
                        { 416, -1.350, -2.740, -0.189 },
                        { 418, -1.179, -1.769, -0.019 },
                        { 418, 1.210, -1.570, -0.079 },
                        { 419, -1.080, -1.990, 0.029 },
                        { 420, -1.100, -2.150, 0.100 },
                        { 421, -1.070, -2.440, -0.170 },
                        { 422, -1.080, -0.419, -0.200 },
                        { 423, -1.169, -1.899, -0.319 },
                        { 424, 0.180, 1.080, 0.430 },
                        { 426, -1.100, -2.150, 0.090 },
                        { 427, -1.269, -3.200, -0.159 },
                        { 428, -1.009, -3.059, -0.490 },
                        { 429, 0.990, -2.140, 0.140 },
                        { 431, -1.450, -5.469, -0.129 },
                        { 433, -1.519, 0.159, -0.680 },
                        { 434, -0.730, -1.580, 0.289 },
                        { 436, -1.070, -1.820, 0.140 },
                        { 437, -1.490, -4.969, -0.500 },
                        { 438, -1.090, -1.929, -0.019 },
                        { 439, -1.110, -1.509, 0.059 },
                        { 440, -1.090, -0.460, -0.419 },
                        { 442, -1.210, -2.210, 0.059 },
                        { 443, -1.529, 1.240, -0.899 },
                        { 444, 0.000, -2.599, -0.059 },
                        { 445, -1.039, -1.940, 0.129 },
                        { 451, 1.059, -1.220, -0.039 },
                        { 455, -1.529, -0.009, -0.759 },
                        { 456, 0.790, -0.050, -0.610 },
                        { 458, -1.110, -2.049, -0.109 },
                        { 459, -0.819, -2.390, -0.479 },
                        { 459, -1.049, -2.289, 0.219 },
                        { 461, 0.000, 0.140, 0.540 },
                        { 463, 0.000, 0.170, 0.469 },
                        { 466, 0.000, -3.000, -0.129 },
                        { 467, -1.070, -2.299, 0.119 },
                        { 468, 0.000, 0.009, 0.409 },
                        { 470, -1.259, -2.380, 0.239 },
                        { 475, -1.070, -1.600, 0.129 },
                        { 477, -1.200, -1.529, 0.239 },
                        { 478, 1.090, -0.340, 0.230 },
                        { 479, -1.090, -1.970, 0.029 },
                        { 480, -1.000, -0.879, 0.100 },
                        { 482, 1.070, -2.190, 0.000 },
                        { 483, 0.930, -2.509, -0.039 },
                        { 485, -0.889, 0.720, 0.019 },
                        { 486, -0.699, -3.170, 0.579 },
                        { 489, 1.159, -0.740, 0.000 },
                        { 490, 1.370, -1.250, 0.000 },
                        { 491, -1.070, -2.180, 0.000 },
                        { 492, -0.980, -2.240, 0.119 },
                        { 494, -1.019, -2.200, 0.119 },
                        { 495, 1.210, -1.909, -0.100 },
                        { 496, 1.059, -1.860, 0.150 },
                        { 498, -1.299, -0.009, 0.090 },
                        { 499, -1.110, -1.070, -0.349 },
                        { 500, -0.980, -1.710, -0.070 },
                        { 502, -1.080, -1.879, 0.140 },
                        { 503, -1.100, -2.049, 0.029 },
                        { 504, 0.000, -3.000, -0.129 },
                        { 504, -1.159, -1.830, 0.109 },
                        { 505, 1.159, -0.740, 0.000 },
                        { 506, 1.049, -1.110, -0.050 },
                        { 507, -1.169, -2.299, 0.109 },
                        { 508, -1.379, -3.049, -0.670 },
                        { 514, 1.429, 0.379, -0.649 },
                        { 515, -1.450, 0.479, -1.309 },
                        { 516, -1.100, -2.450, -0.029 },
                        { 517, -1.179, -1.950, 0.070 },
                        { 518, 1.210, -2.190, -0.070 },
                        { 521, 0.000, 0.129, 0.610 },
                        { 522, 0.000, 0.140, 0.610 },
                        { 523, 0.000, 0.150, 0.550 },
                        { 524, 1.529, 0.479, -0.990 },
                        { 525, -1.389, -0.509, -0.090 },
                        { 526, -0.990, -1.960, 0.059 },
                        { 527, -1.139, -1.690, 0.140 },
                        { 528, -1.090, -2.029, 0.119 },
                        { 529, -1.200, -2.220, 0.200 },
                        { 531, -0.009, 0.819, 0.430 },
                        { 533, 1.019, -1.960, 0.140 },
                        { 534, -1.039, -0.819, -0.200 },
                        { 535, -1.200, -0.560, 0.270 },
                        { 536, -1.070, -1.690, 0.090 },
                        { 540, -1.169, -2.519, -0.019 },
                        { 541, 1.009, -1.990, 0.150 },
                        { 542, -1.120, -1.919, 0.310 },
                        { 543, -1.100, -0.949, 0.000 },
                        { 544, -1.299, 2.069, 0.319 },
                        { 545, 0.000, -2.220, -0.319 },
                        { 546, 1.090, -2.029, 0.150 },
                        { 547, -1.169, -2.009, 0.119 },
                        { 549, -1.080, -1.179, 0.219 },
                        { 550, -1.070, -2.490, 0.039 },
                        { 551, -1.149, -2.670, 0.090 },
                        { 552, -1.289, -0.959, 0.490 },
                        { 554, 1.210, -2.390, 0.119 },
                        { 555, -0.790, -1.500, 0.180 },
                        { 557, 1.190, -2.569, 0.850 },
                        { 558, -1.090, -1.940, 0.270 },
                        { 559, -1.080, -1.710, 0.270 },
                        { 560, 1.139, -1.899, 0.129 },
                        { 561, 1.110, -2.299, 0.109 },
                        { 562, 1.039, -0.699, 0.070 },
                        { 565, 0.910, -0.870, 0.029 },
                        { 566, 1.080, -2.440, 0.019 },
                        { 567, 0.000, -2.859, -0.460 },
                        { 568, -0.500, -0.660, 0.379 },
                        { 571, 0.000, 0.189, 0.019 },
                        { 572, -0.379, -0.970, 0.159 },
                        { 573, -1.179, 0.479, -0.479 },
                        { 574, -0.750, -0.970, 0.280 },
                        { 575, 0.000, -2.779, -0.050 },
                        { 576, 0.000, -3.160, -0.250 },
                        { 578, -1.240, 2.910, -0.019 },
                        { 579, 1.220, -2.299, 0.170 },
                        { 580, 1.190, -1.820, 0.239 },
                        { 581, 0.000, 0.129, 0.540 },
                        { 582, -1.059, 0.140, -0.280 },
                        { 583, -0.759, 0.409, -0.059 },
                        { 584, 0.000, 0.000, 0.000 },
                        { 585, 1.139, -2.299, 0.200 },
                        { 587, -1.230, -1.220, 0.100 },
                        { 588, -1.460, -2.160, 0.219 },
                        { 589, 0.980, -0.889, 0.119 },
                        { 596, -1.110, -2.160, 0.100 },
                        { 597, -1.100, -2.150, 0.100 },
                        { 598, -1.080, -1.960, 0.159 },
                        { 599, 1.159, -0.740, 0.000 },
                        { 600, 1.090, -2.029, 0.079 },
                        { 601, -1.330, -1.690, 0.920 },
                        { 602, 1.090, -1.990, 0.109 },
                        { 603, 1.179, -2.190, -0.079 },
                        { 604, 0.000, -3.000, -0.129 },
                        { 605, -1.100, -0.949, 0.000 },
                        { 609, -1.299, 0.000, 0.100 }
                }
        ;
        for(new i; i < sizeof(g_PetrolcapData); ++i)
        {
                if(g_PetrolcapData[i][e_ModelID] == modelID)
                {
                        aimOffset_X = g_PetrolcapData[i][e_Offset_X];
                        aimOffset_Y = g_PetrolcapData[i][e_Offset_Y];
                        aimOffset_Z = g_PetrolcapData[i][e_Offset_Z];
                        return 1;
                }
        }
        return 0;
}

GetNearbyLand(playerid)
{
    if(GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) == 0)
	{
		for(new i = 0; i < MAX_LANDS; i ++)
		{
			if(LandInfo[i][lExists] && IsPlayerInDynamicArea(playerid, LandInfo[i][lArea]))
			{
			    return i;
			}
		}
	}

	return -1;
}

TurfTaxCheck(playerid, amount)
{
	new turfid = GetNearbyTurf(playerid);

	if(turfid >= 0 && TurfInfo[turfid][tType] == 7 && TurfInfo[turfid][tCapturedGang] >= 0)
	{
	    amount = percent(amount, 10);

	    SM(playerid, COLOR_AQUA, "You have been taxed a 10 percent fee of "SVRCLR"$%i{CCFFFF} for selling in %s's turf.", amount, GangInfo[TurfInfo[turfid][tCapturedGang]][gName]);
	    GivePlayerCash(playerid, -amount);

	    GangInfo[TurfInfo[turfid][tCapturedGang]][gCash] += amount;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET cash = %i WHERE id = %i", GangInfo[TurfInfo[turfid][tCapturedGang]][gCash], TurfInfo[turfid][tCapturedGang]);
	    mysql_tquery(connectionID, queryBuffer);
	}
}

GetNearbyTurf(playerid)
{
	for(new i = 0; i < MAX_TURFS; i ++)
	{
		if(TurfInfo[i][tExists] && IsPlayerInDynamicArea(playerid, TurfInfo[i][tArea]))
		{
		    return i;
		}
	}
	return -1;
}

GetNearbyPoint(playerid, Float:radius = 3.0)
{
    for(new i = 0; i < MAX_POINTS; i ++)
	{
	    if(PointInfo[i][pExists] && IsPlayerInRangeOfPoint(playerid, radius, PointInfo[i][pPointX], PointInfo[i][pPointY], PointInfo[i][pPointZ]) && GetPlayerInterior(playerid) == PointInfo[i][pPointInterior] && GetPlayerVirtualWorld(playerid) == PointInfo[i][pPointWorld])
		{
		    return i;
		}
	}
	return -1;
}


GetTurfColor(turfid)
{
	if(TurfInfo[turfid][tCapturedGang] >= 0)
	{
	    return (GangInfo[TurfInfo[turfid][tCapturedGang]][gColor] & ~0xff) + 0xAA;
	}

	return 0x000000AA;
}

ReloadTurf(turfid)
{
	if(TurfInfo[turfid][tExists])
	{
	    DestroyDynamicArea(TurfInfo[turfid][tArea]);
	    GangZoneDestroy(TurfInfo[turfid][tGangZone]);

	    TurfInfo[turfid][tArea] = CreateDynamicRectangle(TurfInfo[turfid][tMinX], TurfInfo[turfid][tMinY], TurfInfo[turfid][tMaxX], TurfInfo[turfid][tMaxY]);
	    TurfInfo[turfid][tGangZone] = GangZoneCreateEx(TurfInfo[turfid][tMinX], TurfInfo[turfid][tMinY], TurfInfo[turfid][tMaxX], TurfInfo[turfid][tMaxY]);

	    foreach(new i : Player)
	    {
	        if(pData[i][pShowTurfs])
	        {
	            ShowTurfsOnMap(i, true);
			}
		}
	}
}

GetNearbyEntranceEx(playerid)
{
	return GetNearbyEntrance(playerid) == -1 ? GetInsideEntrance(playerid) : GetNearbyEntrance(playerid);
}

GetNearbyEntrance(playerid)
{
	for(new i = 0; i < MAX_ENTRANCES; i ++)
	{
	    if(EntranceInfo[i][eExists] && IsPlayerInRangeOfPoint(playerid, EntranceInfo[i][eRadius], EntranceInfo[i][ePosX], EntranceInfo[i][ePosY], EntranceInfo[i][ePosZ]) && GetPlayerInterior(playerid) == EntranceInfo[i][eOutsideInt] && GetPlayerVirtualWorld(playerid) == EntranceInfo[i][eOutsideVW])
	    {
	        return i;
		}
	}

	return -1;
}

GetInsideEntrance(playerid)
{
	for(new i = 0; i < MAX_ENTRANCES; i ++)
	{
	    if(EntranceInfo[i][eExists] && IsPlayerInRangeOfPoint(playerid, 100.0, EntranceInfo[i][eIntX], EntranceInfo[i][eIntY], EntranceInfo[i][eIntZ]) && GetPlayerInterior(playerid) == EntranceInfo[i][eInterior] && GetPlayerVirtualWorld(playerid) == EntranceInfo[i][eWorld])
	    {
	        return i;
		}
	}

	return -1;
}

SetEntranceOwner(entranceid, playerid)
{
	if(playerid == INVALID_PLAYER_ID)
	{
	    strcpy(EntranceInfo[entranceid][eOwner], "Nobody", MAX_PLAYER_NAME);
	    EntranceInfo[entranceid][eOwnerID] = 0;
	}
	else
	{
	    GetPlayerName(playerid, EntranceInfo[entranceid][eOwner], MAX_PLAYER_NAME);
	    EntranceInfo[entranceid][eOwnerID] = pData[playerid][pID];
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET ownerid = %i, owner = '%s' WHERE id = %i", EntranceInfo[entranceid][eOwnerID], EntranceInfo[entranceid][eOwner], EntranceInfo[entranceid][eID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadEntrance(entranceid);
}

/*ReloadEntrance(entranceid)
{
	if(EntranceInfo[entranceid][eExists])
	{
	    new
	        string[128];

		DestroyDynamic3DTextLabel(EntranceInfo[entranceid][eText]);
		DestroyDynamicPickup(EntranceInfo[entranceid][ePickup]);
		DestroyDynamicMapIcon(EntranceInfo[entranceid][eMapIconID]);

		if(EntranceInfo[entranceid][eLabel])
		{
			if(EntranceInfo[entranceid][eOwnerID])
			{
			    format(string, sizeof(string), "%s\nOwned by: %s\n\n"WHITE"Press {B9B9B9}'Y'"WHITE" to go inside", EntranceInfo[entranceid][eName], EntranceInfo[entranceid][eOwner]);
			}
			else
			{
		        format(string, sizeof(string), "%s\n\n"WHITE"Press {B9B9B9}'Y'"WHITE" to go inside", EntranceInfo[entranceid][eName]);
			}

			EntranceInfo[entranceid][eText] = CreateDynamic3DTextLabel(string, COLOR_NEWS, EntranceInfo[entranceid][ePosX], EntranceInfo[entranceid][ePosY], (EntranceInfo[entranceid][eIcon] == 19902) ? (EntranceInfo[entranceid][ePosZ] + 0.1) : (EntranceInfo[entranceid][ePosZ]), 10.0, .worldid = EntranceInfo[entranceid][eOutsideVW], .interiorid = EntranceInfo[entranceid][eOutsideInt]);
        }

		EntranceInfo[entranceid][ePickup] = CreateDynamicPickup(EntranceInfo[entranceid][eIcon], 1, EntranceInfo[entranceid][ePosX], EntranceInfo[entranceid][ePosY], (EntranceInfo[entranceid][eIcon] == 19902) ? (EntranceInfo[entranceid][ePosZ] - 1.0) : (EntranceInfo[entranceid][ePosZ]), .worldid = EntranceInfo[entranceid][eOutsideVW], .interiorid = EntranceInfo[entranceid][eOutsideInt]);

	}
}*/

ReloadEntrance(entranceid)
{
	if(EntranceInfo[entranceid][eExists])
	{
	    new string[1028];

		DestroyDynamic3DTextLabel(EntranceInfo[entranceid][eText]);
		DestroyDynamicPickup(EntranceInfo[entranceid][ePickup]);
		DestroyDynamicMapIcon(EntranceInfo[entranceid][eMapIconID]);

		if(EntranceInfo[entranceid][eLabel])
		{
			if(EntranceInfo[entranceid][eOwnerID])
			{
				format(string, sizeof(string), "Door info\n\n"SVRCLR"[Door owner]: "WHITE"%s\n"SVRCLR"[Door Name]: "WHITE"%s\n"SVRCLR"[Door Address]: "WHITE"%d %s\n\n Press 'Y' to enter", EntranceInfo[entranceid][eOwner], EntranceInfo[entranceid][eName], entranceid, GetZoneName(EntranceInfo[entranceid][ePosX], EntranceInfo[entranceid][ePosY], EntranceInfo[entranceid][ePosZ]));
				format(string, sizeof(string), "Press 'Y' to enter", EntranceInfo[entranceid][eIntX], EntranceInfo[entranceid][eIntY], EntranceInfo[entranceid][eIntZ], EntranceInfo[entranceid][eIntA], EntranceInfo[entranceid][eInterior], EntranceInfo[entranceid][eWorld]);
			}
			else
			{
				format(string, sizeof(string), "Door info\n\n"SVRCLR"[Door Name]: "WHITE"%s\n"SVRCLR"[Door Address]: "WHITE"%d %s\n\n Press 'Y' to enter", EntranceInfo[entranceid][eName],entranceid, GetZoneName(EntranceInfo[entranceid][ePosX], EntranceInfo[entranceid][ePosY], EntranceInfo[entranceid][ePosZ]));
			}

			EntranceInfo[entranceid][eText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, EntranceInfo[entranceid][ePosX], EntranceInfo[entranceid][ePosY], (EntranceInfo[entranceid][eIcon] == 19902) ? (EntranceInfo[entranceid][ePosZ] + 0.1) : (EntranceInfo[entranceid][ePosZ]), 10.0, .worldid = EntranceInfo[entranceid][eOutsideVW], .interiorid = EntranceInfo[entranceid][eOutsideInt]);
        }

		EntranceInfo[entranceid][ePickup] = CreateDynamicPickup(EntranceInfo[entranceid][eIcon], 1, EntranceInfo[entranceid][ePosX], EntranceInfo[entranceid][ePosY], (EntranceInfo[entranceid][eIcon] == 19902) ? (EntranceInfo[entranceid][ePosZ] - 1.0) : (EntranceInfo[entranceid][ePosZ]), .worldid = EntranceInfo[entranceid][eOutsideVW], .interiorid = EntranceInfo[entranceid][eOutsideInt]);

		if(EntranceInfo[entranceid][eMapIcon])
		{
		    EntranceInfo[entranceid][eMapIconID] = CreateDynamicMapIcon(EntranceInfo[entranceid][ePosX], EntranceInfo[entranceid][ePosY], EntranceInfo[entranceid][ePosZ], EntranceInfo[entranceid][eMapIcon], 0, .worldid = EntranceInfo[entranceid][eOutsideVW], .interiorid = EntranceInfo[entranceid][eOutsideInt]);
		}
	}
}

IsEntranceOwner(playerid, entranceid)
{
	return (EntranceInfo[entranceid][eOwnerID] == pData[playerid][pID]) || (EntranceInfo[entranceid][eOwnerID] > 0 && pData[playerid][pAdminDuty]);
}

GetClosestBusiness(playerid, type)
{
	new
	    Float:distance[2] = {99999.0, 0.0},
	    index = -1;

	for(new i = 0; i < MAX_BUSINESSES; i ++)
	{
		if((BusinessInfo[i][bExists] && BusinessInfo[i][bType] == type) && (BusinessInfo[i][bOutsideInt] == 0 && BusinessInfo[i][bOutsideVW] == 0))
		{
			distance[1] = GetPlayerDistanceFromPoint(playerid, BusinessInfo[i][bPosX], BusinessInfo[i][bPosY], BusinessInfo[i][bPosZ]);

			if(distance[0] > distance[1])
			{
			    distance[0] = distance[1];
			    index = i;
			}
		}
	}

	return index;
}

GetNearbyBusinessEx(playerid)
{
	return GetNearbyBusiness(playerid) == -1 ? GetInsideBusiness(playerid) : GetNearbyBusiness(playerid);
}

GetNearbyBusiness(playerid, Float:radius = 2.0)
{
	for(new i = 0; i < MAX_BUSINESSES; i ++)
	{
	    if(BusinessInfo[i][bExists] && IsPlayerInRangeOfPoint(playerid, radius, BusinessInfo[i][bPosX], BusinessInfo[i][bPosY], BusinessInfo[i][bPosZ]) && GetPlayerInterior(playerid) == BusinessInfo[i][bOutsideInt] && GetPlayerVirtualWorld(playerid) == BusinessInfo[i][bOutsideVW])
	    {
	        return i;
		}
	}

	return -1;
}

GetInsideBusiness(playerid, Float:radius = 10.0)
{
	for(new i = 0; i < MAX_BUSINESSES; i ++)
	{
	    if(BusinessInfo[i][bExists] && IsPlayerInRangeOfPoint(playerid, radius, BusinessInfo[i][bIntX], BusinessInfo[i][bIntY], BusinessInfo[i][bIntZ]) && GetPlayerInterior(playerid) == BusinessInfo[i][bInterior] && GetPlayerVirtualWorld(playerid) == BusinessInfo[i][bWorld])
	    {
	        return i;
		}
	}

	return -1;
}

SetBusinessOwner(businessid, playerid)
{
	if(playerid == INVALID_PLAYER_ID)
	{
	    strcpy(BusinessInfo[businessid][bOwner], "Nobody", MAX_PLAYER_NAME);
	    BusinessInfo[businessid][bOwnerID] = 0;
	}
	else
	{
     	GetPlayerName(playerid, BusinessInfo[businessid][bOwner], MAX_PLAYER_NAME);
	    BusinessInfo[businessid][bOwnerID] = pData[playerid][pID];
	}

	BusinessInfo[businessid][bTimestamp] = gettime();

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET timestamp = %i, ownerid = %i, owner = '%s' WHERE id = %i", BusinessInfo[businessid][bTimestamp], BusinessInfo[businessid][bOwnerID], BusinessInfo[businessid][bOwner], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadBusiness(businessid);
}

ReloadBusiness(businessid)
{
	if(BusinessInfo[businessid][bExists])
	{
	    new
	        string[128*3];

		DestroyDynamic3DTextLabel(BusinessInfo[businessid][bText]);
		DestroyDynamicPickup(BusinessInfo[businessid][bPickup]);
        DestroyDynamicMapIcon(BusinessInfo[businessid][bMapIcon]);

		if(BusinessInfo[businessid][bOwnerID] == 0)
		{
			format(string, sizeof(string), ""YELLOW"%s"WHITE"\n"GREY"Owner: "GREEN"%s\n"WHITE"Entry Fee: "GREEN"$%i\n\n"GREY"Press 'Y' to enter/exit", bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bOwner], BusinessInfo[businessid][bEntryFee]);
			//format(string, sizeof(string), "Business Info\n\n"BUSINESS"[Business Type]: "WHITE"%s\n"BUSINESS"[Business Price]: "WHITE"$%i\n"BUSINESS"[Business Entrance]: "WHITE"$%i\n"BUSINESS"[Business Address]: "WHITE"%i %s\n\n"GREY"Press 'Y' to enter", bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bPrice], BusinessInfo[businessid][bEntryFee], businessid, GetZoneName(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ]));
		}
		else
		{
		    if(!BusinessInfo[businessid][bDescription])
		    {
		    	format(string, sizeof(string), ""YELLOW"%s"WHITE"\n"GREY"Owner: "GREEN"%s\n"WHITE"Entry Fee: "GREEN"$%i\n\n"GREY"Press 'Y' to enter/exit.", bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bOwner], BusinessInfo[businessid][bEntryFee]);
				//format(string, sizeof(string), ""GREY"Business Info\n\n"BUSINESS"[Business Owner]: "WHITE"%s\n\n"BUSINESS"[Business Type]: "WHITE"$%s\n"BUSINESS"[Business Price]: "WHITE"%i\n"BUSINESS"[Business Entrance]: "WHITE"$%i\n"BUSINESS"[Business Address]: "WHITE"%s $i\n\n"GREY"Press 'Y' to enter", BusinessInfo[businessid][bOwner], bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bPrice], BusinessInfo[businessid][bEntryFee], GetZoneName(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ]), businessid);
			}
			else
		    {
		    	format(string, sizeof(string), ""YELLOW"%s"WHITE"\n"GREY"Owner: "GREEN"%s\n"WHITE"Entry Fee: "GREEN"$%i\n\n"GREY"Press 'Y' to enter/exit.", BusinessInfo[businessid][bDescription], BusinessInfo[businessid][bOwner], BusinessInfo[businessid][bEntryFee]);
				//format(string, sizeof(string), ""GREY"Business Info\n\n"BUSINESS"[Business Owner]: "WHITE"%s\n\n"BUSINESS"[Business Description]: "WHITE"%s\n"BUSINESS"[Business Type]: "WHITE"$%s\n"BUSINESS"[Business Price]: "WHITE"%i\n"BUSINESS"[Business Entrance]: "WHITE"$%i\n"BUSINESS"[Business Address]: "WHITE"%s $i\n\n"GREY"Press 'Y' to enter", BusinessInfo[businessid][bOwner], BusinessInfo[businessid][bDescription], bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bPrice], BusinessInfo[businessid][bEntryFee], GetZoneName(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ]), businessid);
			}
		}

		BusinessInfo[businessid][bText] = CreateDynamic3DTextLabel(string, BIZ_COLOR, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ] + 0.1, 5.0, .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt]);
        //BusinessInfo[businessid][bPickup] = CreateDynamicPickup(1274, 1, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt]);

		switch(BusinessInfo[businessid][bType])
		{
		    case BUSINESS_STORE:
			{
			 	BusinessInfo[businessid][bMapIcon] = CreateDynamicMapIcon(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 17, 0, .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt], .style = MAPICON_GLOBAL);
				BusinessInfo[businessid][bPickup] = CreateDynamicPickup(1885, 1, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt]);
			}
		    case BUSINESS_GUNSHOP: 	
			{
				BusinessInfo[businessid][bMapIcon] = CreateDynamicMapIcon(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 6, 0, .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt], .style = MAPICON_GLOBAL);
				BusinessInfo[businessid][bPickup] = CreateDynamicPickup(355, 1, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt]);
			}
		    case BUSINESS_CLOTHES: 	
			{
				BusinessInfo[businessid][bMapIcon] = CreateDynamicMapIcon(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 45, 0, .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt], .style = MAPICON_GLOBAL);
				BusinessInfo[businessid][bPickup] = CreateDynamicPickup(1275, 1, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt]);
			}
		    case BUSINESS_RESTAURANT: 
			{
				BusinessInfo[businessid][bMapIcon] = CreateDynamicMapIcon(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 10, 0, .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt], .style = MAPICON_GLOBAL);
				BusinessInfo[businessid][bPickup] = CreateDynamicPickup(2880, 1, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt]);
			}
		    case BUSINESS_GYM: 	
			{
				BusinessInfo[businessid][bMapIcon] = CreateDynamicMapIcon(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 54, 0, .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt], .style = MAPICON_GLOBAL);
				BusinessInfo[businessid][bPickup] = CreateDynamicPickup(1945, 1, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt]);
			}
		    case BUSINESS_AGENCY: 	
			{
				BusinessInfo[businessid][bMapIcon] = CreateDynamicMapIcon(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 58, 0, .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt], .style = MAPICON_GLOBAL);
				BusinessInfo[businessid][bPickup] = CreateDynamicPickup(1274, 1, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt]);
			}
		    case BUSINESS_BARCLUB: 
			{
				BusinessInfo[businessid][bMapIcon] = CreateDynamicMapIcon(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 49, 0, .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt], .style = MAPICON_GLOBAL);
				BusinessInfo[businessid][bPickup] = CreateDynamicPickup(19835, 1, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt]);
			}
			case BUSINESS_DEALERSHIP:
			{
				BusinessInfo[businessid][bMapIcon] = CreateDynamicMapIcon(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 55, 0, .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt], .style = MAPICON_GLOBAL);
				BusinessInfo[businessid][bPickup] = CreateDynamicPickup(1274, 1, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt]);
			}
		}
	}
}

ShowBlood(playerid, time)
{
    for(new i = 0; i < 8;i++)
    {
		if(pData[playerid][pLogged] && !pData[playerid][pAdminDuty]  && !pData[playerid][pPaintball] && !pData[playerid][pPaintball2])
        {
        	TextDrawShowForPlayer(playerid, Blood[i]);
		}
    }
    Timer[playerid] = SetTimerEx("RemoveBlood", time*1000, false, "i", playerid);
    return 1;
}

IsBusinessOwner(playerid, businessid)
{
	return (BusinessInfo[businessid][bOwnerID] == pData[playerid][pID]) || (BusinessInfo[businessid][bOwnerID] > 0 && pData[playerid][pAdminDuty]);
}

IsGarageOwner(playerid, garageid)
{
	return (GarageInfo[garageid][gOwnerID] == pData[playerid][pID]) || (GarageInfo[garageid][gOwnerID] > 0 && pData[playerid][pAdminDuty]);
}

GetNearbyGarageEx(playerid)
{
	return GetNearbyGarage(playerid) == -1 ? GetInsideGarage(playerid) : GetNearbyGarage(playerid);
}

GetNearbyGarage(playerid)
{
	for(new i = 0; i < MAX_GARAGES; i ++)
	{
	    if(GarageInfo[i][gExists] && IsPlayerInRangeOfPoint(playerid, 4.0, GarageInfo[i][gPosX], GarageInfo[i][gPosY], GarageInfo[i][gPosZ]))
	    {
	        return i;
		}
	}

	return -1;
}

GetInsideGarage(playerid)
{
	for(new i = 0; i < MAX_GARAGES; i ++)
	{
	    if(GarageInfo[i][gExists] && IsPlayerInRangeOfPoint(playerid, 50.0, garageInteriors[GarageInfo[i][gType]][intVX], garageInteriors[GarageInfo[i][gType]][intVY], garageInteriors[GarageInfo[i][gType]][intVZ]) && GetPlayerInterior(playerid) == garageInteriors[GarageInfo[i][gType]][intID] && GetPlayerVirtualWorld(playerid) == GarageInfo[i][gWorld])
	    {
	        return i;
		}
	}

	return -1;
}

ReloadGarage(garageid)
{
	if(GarageInfo[garageid][gExists])
	{
	    new string[128];

		DestroyDynamic3DTextLabel(GarageInfo[garageid][gText]);
		DestroyDynamicPickup(GarageInfo[garageid][gPickup]);

        if(GarageInfo[garageid][gOwnerID] == 0)
        {
	        format(string, sizeof(string), "%s Garage\nPrice: $%i\n> %i cars capacity <\n"WHITE"%s %d", garageInteriors[GarageInfo[garageid][gType]][intName],GarageInfo[garageid][gPrice], GarageInfo[garageid][gType] + 1,GetZoneName(GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ]),garageid);
		}
		else
		{
		    format(string, sizeof(string), "%s Garage\nOwned by %s\n> %i cars capacity <\n"WHITE"%s %d", garageInteriors[GarageInfo[garageid][gType]][intName],GarageInfo[garageid][gOwner], GarageInfo[garageid][gType] + 1,GetZoneName(GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ]),garageid);
		}

		GarageInfo[garageid][gText] = CreateDynamic3DTextLabel(string, 0xc1ff75ff, GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ] + 0.1, 10.0);
        GarageInfo[garageid][gPickup] = CreateDynamicPickup(1316, 1, GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ]);
	}
}

SetGarageOwner(garageid, playerid)
{
	if(playerid == INVALID_PLAYER_ID)
	{
	    strcpy(GarageInfo[garageid][gOwner], "Nobody", MAX_PLAYER_NAME);
	    GarageInfo[garageid][gOwnerID] = 0;
	}
	else
	{
	    GetPlayerName(playerid, GarageInfo[garageid][gOwner], MAX_PLAYER_NAME);
	    GarageInfo[garageid][gOwnerID] = pData[playerid][pID];
	}

	GarageInfo[garageid][gTimestamp] = gettime();

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET timestamp = %i, ownerid = %i, owner = '%s' WHERE id = %i", GarageInfo[garageid][gTimestamp], GarageInfo[garageid][gOwnerID], GarageInfo[garageid][gOwner], GarageInfo[garageid][gID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadGarage(garageid);
}
HasFurniturePerms(playerid, houseid)
{
	return IsHouseOwner(playerid, houseid) || pData[playerid][pFurniturePerms] == houseid;
}
IsHouseOwner(playerid, houseid)
{
	return (HouseInfo[houseid][hOwnerID] == pData[playerid][pID]) || (HouseInfo[houseid][hOwnerID] > 0 && pData[playerid][pAdminDuty]);
}

GetVehicleStashCapacity(vehicleid, item)
{
	static const stashCapacities[][] = {
		// Cash   Mats    W     C    M    P   HP   PT   FMJ  WEP
	    {25000,   5000,   25,   25,  10,  5,  80,  60,  50,  3}, // level 1
	    {50000,   10000,  50,   50,  25,  10, 100, 80,  60,  4}, // level 2
	    {100000,  25000,  100,  75,  50,  20, 125, 100, 70,  5} // level 3
	};

	if(VehicleInfo[vehicleid][vTrunk] > 0)
	{
		return stashCapacities[VehicleInfo[vehicleid][vTrunk] - 1][item];
	}

	return 0;
}
GetBackpackCapacity(playerid, item)
{
	static const stashCapacities[][] = {
		// Cash   Mats    W     C    M    P   HP   PT   FMJ  WEP
	    {30000,   5000,   25,   25,  10,  5,  80,  60,  50,  4}, // Small
	    {55000,   10000,  50,   50,  25,  10, 100, 80,  60,  8}, // Medium
	    {120000,  25000,  100,  75,  50,  20, 125, 100, 70,  12} // Large
	};

	if(pData[playerid][pBackpack] > 0)
	{
		return stashCapacities[pData[playerid][pBackpack] - 1][item];
	}

	return 0;
}
GetGangStashCapacity(gangid, item)
{
	static const stashCapacities[][] = {
		{1000000, 100000, 500,  500,  250,  50,  1000, 500,  250},
		{2000000, 200000, 1000, 1000, 500,  100, 1500, 1000, 500},
		{3000000, 300000, 1500, 1500, 1000, 250, 2000, 1500, 1000}
	};

	return stashCapacities[GangInfo[gangid][gLevel] - 1][item];
}

GetHouseStashCapacity(houseid, item)
{
	static const stashCapacities[][] = {
		// Cash   Mats    W    C    M    P   HP   PT   FMJ  WEP
	    {50000,   5000,   50,  25,  20,  10, 80,  60,  50,  2}, // level 1
	    {100000,  10000,  100, 50,  40,  20, 100, 80,  60,  4}, // level 2
	    {250000,  25000,  150, 75,  60,  30, 125, 100, 70,  6}, // level 3
	    {500000,  50000,  200, 100, 80,  40, 150, 125, 80,  8}, // level 4
	    {1000000, 100000, 300, 200, 100, 50, 200, 150, 100, 10} // level 5
	};

	return stashCapacities[HouseInfo[houseid][hLevel] - 1][item];
}

GetHouseTenantCapacity(houseid)
{
	switch(HouseInfo[houseid][hLevel])
	{
	    case 0: return 5;
	    case 1: return 10;
	    case 2: return 15;
	    case 3: return 20;
	    case 4: return 25;
	    case 5: return 30;
	}

	return 0;
}

GetHouseFurnitureCapacity(houseid)
{
	switch(HouseInfo[houseid][hLevel])
	{
	    case 0: return 25;
	    case 1: return 50;
	    case 2: return 75;
	    case 3: return 100;
	    case 4: return 150;
	    case 5: return 300;
	}

	return 0;
}

GetRandomHouse(playerid) // For pizzaboy job.
{
	new index, houseIDs[MAX_HOUSES] = {-1, ...};

	for(new i = 0; i < MAX_HOUSES; i ++)
	{
	    if(HouseInfo[i][hExists] && HouseInfo[i][hOutsideInt] == 0 && HouseInfo[i][hOutsideVW] == 0)
	    {
	        if(300.0 <= GetPlayerDistanceFromPoint(playerid, HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ]) <= 1200.0)
	        {
	        	houseIDs[index++] = i;
			}
		}
	}

	if(index == 0)
	{
	    return -1;
	}

	return houseIDs[random(index)];
}

GetNearbyHouseEx(playerid)
{
	return GetNearbyHouse(playerid) == -1 ? GetInsideHouse(playerid) : GetNearbyHouse(playerid);
}

GetNearbyHouse(playerid)
{
	for(new i = 0; i < MAX_HOUSES; i ++)
	{
	    if(HouseInfo[i][hExists] && IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ]) && GetPlayerInterior(playerid) == HouseInfo[i][hOutsideInt] && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hOutsideVW])
	    {
	        return i;
		}
	}

	return -1;
}

GetInsideHouse(playerid)
{
	for(new i = 0; i < MAX_HOUSES; i ++)
	{
	    if(HouseInfo[i][hExists] && IsPlayerInRangeOfPoint(playerid, 100.0, HouseInfo[i][hIntX], HouseInfo[i][hIntY], HouseInfo[i][hIntZ]) && GetPlayerInterior(playerid) == HouseInfo[i][hInterior] && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hWorld])
	    {
	        return i;
		}
	}

	return -1;
}

SetHouseOwner(houseid, playerid)
{
	if(playerid == INVALID_PLAYER_ID)
	{
	    strcpy(HouseInfo[houseid][hOwner], "Nobody", MAX_PLAYER_NAME);
	    HouseInfo[houseid][hOwnerID] = 0;
	}
	else
	{
	    GetPlayerName(playerid, HouseInfo[houseid][hOwner], MAX_PLAYER_NAME);
	    HouseInfo[houseid][hOwnerID] = pData[playerid][pID];
	}

	HouseInfo[houseid][hTimestamp] = gettime();

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET timestamp = %i, ownerid = %i, owner = '%s' WHERE id = %i", HouseInfo[houseid][hTimestamp], HouseInfo[houseid][hOwnerID], HouseInfo[houseid][hOwner], HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadHouse(houseid);
}
RemoveFurniture(objectid)
{
    if(IsValidDynamicObject(objectid) && Streamer_GetExtraInt(objectid, E_OBJECT_TYPE) == E_OBJECT_FURNITURE)
	{
 		new
	        id = Streamer_GetExtraInt(objectid, E_OBJECT_INDEX_ID);

	    DeleteFurnitureObject(objectid);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM furniture WHERE id = %i", id);
	    mysql_tquery(connectionID, queryBuffer);
	}
}

DeleteFurnitureObject(objectid)
{
	if(IsValidDynamicObject(objectid) && Streamer_GetExtraInt(objectid, E_OBJECT_TYPE) == E_OBJECT_FURNITURE)
	{
    	new Text3D:textid = Text3D:Streamer_GetExtraInt(objectid, E_OBJECT_3DTEXT_ID);

        if(IsValidDynamic3DTextLabel(textid))
        {
            DestroyDynamic3DTextLabel(textid);
        }

        DestroyDynamicObject(objectid);
	}
}

RemoveAllFurniture(houseid)
{
    if(HouseInfo[houseid][hExists])
	{
	    for(new i = 0; i <= Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i ++)
	    {
	        if(IsValidDynamicObject(i) && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_FURNITURE && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == HouseInfo[houseid][hID])
	        {
             	DeleteFurnitureObject(i);
			}
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM furniture WHERE houseid = %i", HouseInfo[houseid][hID]);
		mysql_tquery(connectionID, queryBuffer);
	}
}

ReloadFurniture(objectid, labels)
{
	if(IsValidDynamicObject(objectid) && Streamer_GetExtraInt(objectid, E_OBJECT_TYPE) == E_OBJECT_FURNITURE)
	{
	    new
	        id = Streamer_GetExtraInt(objectid, E_OBJECT_INDEX_ID);

	    DeleteFurnitureObject(objectid);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM furniture WHERE id = %i", id);
	    mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOAD_FURNITURE, labels);
	}
}
ReloadAllFurniture(houseid)
{
    if(HouseInfo[houseid][hExists])
	{
	    for(new i = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i <= j; i ++)
	    {
	        if(IsValidDynamicObject(i) && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_FURNITURE && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == HouseInfo[houseid][hID])
	        {
             	DeleteFurnitureObject(i);
			}
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM furniture WHERE houseid = %i", HouseInfo[houseid][hID]);
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOAD_FURNITURE, HouseInfo[houseid][hLabels]);
	}
}
ReloadHouse(houseid)
{
	if(HouseInfo[houseid][hExists])
	{
	    new
	        housestring[128*2],
			type[16];

		DestroyDynamic3DTextLabel(HouseInfo[houseid][hText]);
		DestroyDynamicPickup(HouseInfo[houseid][hPickup]);

		if(HouseInfo[houseid][hType] == -1)
		{
		    type = "Other";
		}
		else
		{
		    strcpy(type, houseInteriors[HouseInfo[houseid][hType]][intClass]);
		}

        if(HouseInfo[houseid][hOwnerID] == 0)
        {
	        format(housestring, sizeof(housestring), ""YELLOW"%s\n"GREY"Price: "GREEN"$%i", houseInteriors[HouseInfo[houseid][hType]][intClass], HouseInfo[houseid][hPrice]);
			HouseInfo[houseid][hText] = CreateDynamic3DTextLabel(housestring, 0xffea5eff, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ] + 0.1, 10.0, .worldid = HouseInfo[houseid][hOutsideVW], .interiorid = HouseInfo[houseid][hOutsideInt]);
			HouseInfo[houseid][hPickup] = CreateDynamicPickup(19524, 1, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], .worldid = HouseInfo[houseid][hOutsideVW], .interiorid = HouseInfo[houseid][hOutsideInt]);
			//HouseInfo[houseid][hMapIcon] = CreateDynamicMapIcon(HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], 31, 1, -1, -1, -1, 45.0);
		}
		else
		{
		    if(HouseInfo[houseid][hRentPrice] > 0)
		    {
		        format(housestring, sizeof(housestring), ""RED"%s\n"GREY"Owner: "GREEN"%s\n"GREY"Rent: "GREEN"$%i", houseInteriors[HouseInfo[houseid][hType]][intClass], HouseInfo[houseid][hOwner], HouseInfo[houseid][hRentPrice], GetZoneName(HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]), houseid);
		    }
		    else
		    {
			    format(housestring, sizeof(housestring), ""RED"%s\n"GREY"Owner: "GREEN"%s", houseInteriors[HouseInfo[houseid][hType]][intClass], HouseInfo[houseid][hOwner]);
			}
			HouseInfo[houseid][hText] = CreateDynamic3DTextLabel(housestring, 0xff3838ff, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ] + 0.1, 10.0, .worldid = HouseInfo[houseid][hOutsideVW], .interiorid = HouseInfo[houseid][hOutsideInt]);
	        HouseInfo[houseid][hPickup] = CreateDynamicPickup(19522, 1, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], .worldid = HouseInfo[houseid][hOutsideVW], .interiorid = HouseInfo[houseid][hOutsideInt]);
			//HouseInfo[houseid][hMapIcon] = CreateDynamicMapIcon(HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], 32, 1, -1, -1, -1, 45.0);
		}

	}
}
GetPBPlayers1()
{
	new players;
	foreach(new i : Player)
	{
	    if(pData[i][pPaintball])
	    {
	        players++;
	    }
	}
	return players;
}
GetPBPlayers2()
{
	new players;
	foreach(new i : Player)
	{
	    if(pData[i][pPaintball2])
	    {
	        players++;
	    }
	}
	return players;
}
IsNumeric(const string[])
{
	new
		len = strlen(string),
		i;

	if(string[0] == '-') i = 1;

	while(i < len)
	{
	    if(!('0' <= string[i++] <= '9'))
	        return 0;
	}

	return 1;
}

GetVehicleParams(vehicleid, param)
{
	new
	    params[7];

	GetVehicleParamsEx(vehicleid, params[0], params[1], params[2], params[3], params[4], params[5], params[6]);
	return params[param] == VEHICLE_PARAMS_ON;
}

SetVehicleParams(vehicleid, param, status)
{
	new
	    params[7];

	GetVehicleParamsEx(vehicleid, params[0], params[1], params[2], params[3], params[4], params[5], params[6]);

	params[param] = status;

	return SetVehicleParamsEx(vehicleid, params[0], params[1], params[2], params[3], params[4], params[5], params[6]);
}

Float:GetVehicleSpeedMPH(vehicleid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z;

	if(GetVehicleVelocity(vehicleid, x, y, z))
	{
		return floatsqroot((x * x) + (y * y) + (z * z)) * 100;
	}

	return 0.0;
}

Float:GetVehicleSpeed(vehicleid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z;

	if(GetVehicleVelocity(vehicleid, x, y, z))
	{
		return floatsqroot((x * x) + (y * y) + (z * z)) * 181.5;
	}

	return 0.0;
}

VehicleHasWindows(vehicleid)
{
    static const vehicleWindows[] = {
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0,
		1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0,
		0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1,
		0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
		1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1,
		0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0
	};

	new
	    model = GetVehicleModel(vehicleid);

	if(400 <= model <= 611)
	{
	    return vehicleWindows[model - 400];
	}

	return 0;
}

VehicleHasEngine(vehicleid)
{
	static const vehicleEngines[] = {
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
		1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0
	};

	new
	    modelid = GetVehicleModel(vehicleid);

	if(400 <= modelid <= 611)
	{
		return vehicleEngines[modelid - 400];
	}

	return 0;
}

GetVehicleSeatCount(vehicleid)
{
    static const vehicleSeats[] =
	{
		4, 2, 2, 2, 4, 4, 1, 2, 2, 4, 2, 2, 2, 4, 2, 2, 4, 2, 4, 2, 4, 4, 2, 2, 2, 1, 4, 4, 4, 2,
		1, 7, 1, 2, 2, 0, 2, 7, 4, 2, 4, 1, 2, 2, 2, 4, 1, 2, 1, 0, 0, 2, 1, 1, 1, 2, 2, 2, 4,
		4, 2, 2, 2, 2, 1, 1, 4, 4, 2, 2, 4, 2, 1, 1, 2, 2, 1, 2, 2, 4, 2, 1, 4, 3, 1, 1, 1, 4, 2,
		2, 4, 2, 4, 1, 2, 2, 2, 4, 4, 2, 2, 1, 2, 2, 2, 2, 2, 4, 2, 1, 1, 2, 1, 1, 2, 2, 4, 2, 2,
		1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 4, 1, 1, 1, 2, 2, 2, 2, 7, 7, 1, 4, 2, 2, 2, 2, 2, 4, 4,
		2, 2, 4, 4, 2, 1, 2, 2, 2, 2, 2, 2, 4, 4, 2, 2, 1, 2, 4, 4, 1, 0, 0, 1, 1, 2, 1, 2, 2, 1, 2,
		4, 4, 2, 4, 1, 0, 4, 2, 2, 2, 2, 0, 0, 7, 2, 2, 1, 4, 4, 4, 2, 2, 2, 2, 2, 4, 2, 0, 0, 0,
		4, 0, 0
	};

	new
	    modelid = GetVehicleModel(vehicleid);

	if(400 <= modelid <= 611)
	{
		return vehicleSeats[modelid - 400];
	}

	return 0;
}

IsSeatOccupied(vehicleid, seatid)
{
	foreach(new i : Player)
	{
	    if(IsPlayerInVehicle(i, vehicleid) && GetPlayerVehicleSeat(i) == seatid)
	    {
	        return 1;
		}
	}

	return 0;
}
GetVehicleName(vehicleid)
{
	new
		modelid = GetVehicleModel(vehicleid),
		name[32];

	if(400 <= modelid <= 611)
	    strcat(name, vehicleNames[modelid - 400]);
	else
	    name = "Unknown";

	return name;
}

GetVehicleModelByName(const string[])
{
	new
	    modelid = strval(string);

	if(400 <= modelid <= 611)
	{
	    return modelid;
	}

	for(new i = 0; i < sizeof(vehicleNames); i ++)
	{
		if(strfind(vehicleNames[i], string, true) != -1)
  		{
			return i + 400;
		}
	}

	return 0;
}

GetVehicleDriver(vehicleid)
{
	foreach(new i : Player)
	{
	    if(IsPlayerInVehicle(i, vehicleid) && GetPlayerState(i) == PLAYER_STATE_DRIVER)
	    {
	        return i;
		}
	}

	return INVALID_PLAYER_ID;
}
IsACluckNBellVehicle(carid)
{
	for(new v = 0; v < sizeof(pizzaVehicles); v++)
	{
	    if(carid == pizzaVehicles[v]) return 1;
	}
	return 0;
}
IsVehicleOccupied(vehicleid)
{
	foreach(new i : Player)
	{
	    if(IsPlayerInVehicle(i, vehicleid) && GetPlayerState(i) == PLAYER_STATE_DRIVER)
	    {
	        return 1;
		}
	}

	return 0;
}

AnticheatCheck(playerid)
{
	if(gettime() > pData[playerid][pACTime] && !pData[playerid][pKicked])
	{
	    // Speedhacking
		if((gAnticheat) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && GetVehicleSpeed(GetPlayerVehicleID(playerid)) > 350 && pData[playerid][pAdmin] < 2)
		{
		    pData[playerid][pACWarns]++;

		    if(pData[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
		    {
		        SAM(COLOR_YELLOW, "AdmWarning: %s[%i] is possibly speedhacking, speed: %.1f km/h.", GetRPName(playerid), playerid, GetVehicleSpeed(GetPlayerVehicleID(playerid)));
		        Log_Write("log_cheat", "%s (uid: %i) possibly speedhacked, speed: %.1f km/h", GetPlayerNameEx(playerid), pData[playerid][pID], GetVehicleSpeed(GetPlayerVehicleID(playerid)));
			}
			else
			{
			    SMA(COLOR_LIGHTRED, "AdmCmd: %s was auto-kicked by %s, reason: Speed hacking", GetRPName(playerid), SERVER_BOT);
			    //BanPlayer(playerid, SERVER_BOT, "Speed hacking");
			    Kick(playerid);
			}
		}

		// Jetpack
		if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK && pData[playerid][pAdmin] < 2 && !pData[playerid][pJetpack])
		{
		    SMA(COLOR_LIGHTRED, "AdmCmd: %s was auto-kicked by %s, reason: Jetpack", GetRPName(playerid), SERVER_BOT);
	    	//BanPlayer(playerid, SERVER_BOT, "Jetpack");
	    	Kick(playerid);
		}

		// Flying hacks
		if((gAnticheat) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			switch(GetPlayerAnimationIndex(playerid))
			{
			    case 958, 1538, 1539, 1543:
			    {
			        new
			            Float:z,
			            Float:vx,
			            Float:vy,
			            Float:vz;

					GetPlayerPos(playerid, z, z, z);
                    GetPlayerVelocity(playerid, vx, vy, vz);

                    if((z > 20.0) && (0.9 <= floatsqroot((vx * vx) + (vy * vy) + (vz * vz)) <= 1.9) && pData[playerid][pAdmin] < 2)
                    {
                        SMA(COLOR_LIGHTRED, "AdmCmd: %s was auto-kicked by %s, reason: Flying hacks", GetRPName(playerid), SERVER_BOT);
	    				//BanPlayer(playerid, SERVER_BOT, "Flying hacks");
	    				Kick(playerid);
					}
				}
			}
		}

			// Armor hacks
		if(!pData[playerid][pJoinedEvent] && !pData[playerid][pPaintball] && pData[playerid][pDueling] == INVALID_PLAYER_ID)
		{
		    new
   				Float:armor;

			GetPlayerArmour(playerid, armor);

  			if(!(gettime() - pData[playerid][pLastUpdate] > 5))
  			{
				if(floatround(armor) > floatround(pData[playerid][pArmor]) && gettime() > pData[playerid][pACTime] && gettime() > pData[playerid][pArmorTime] && pData[playerid][pAdmin] < 2)
				{
		            pData[playerid][pACWarns]++;
	    	        pData[playerid][pArmorTime] = gettime() + 10;

				    if(pData[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
				    {
				        SAM(COLOR_YELLOW, "AdmWarning: %s[%i] is possibly armor hacking. (old: %.2f, new: %.2f)", GetRPName(playerid), playerid, pData[playerid][pArmor], armor);
				        Log_Write("log_cheat", "%s (uid: %i) possibly hacked armor. (old: %.2f, new: %.2f)", GetPlayerNameEx(playerid), pData[playerid][pID], pData[playerid][pArmor], armor);
					}
					else
					{
					    SMA(COLOR_LIGHTRED, "AdmCmd: %s was auto-kicked by %s, reason: Armor hacking", GetRPName(playerid), SERVER_BOT);
					    //BanPlayer(playerid, SERVER_BOT, "Armor hacking");
					    Kick(playerid);
					}
				}
			}

			pData[playerid][pArmor] = armor;
		}
	}

	// Ammo hacks
	if(!pData[playerid][pJoinedEvent] && pData[playerid][pDueling] == INVALID_PLAYER_ID && !(pData[playerid][pTazer] && GetPlayerWeapon(playerid) == 23))
	{
	    new
			weapon,
			ammo;

		GetPlayerWeaponData(playerid, 8, weapon, ammo);

		if((16 <= weapon <= 18) && ammo <= 0)
		{
			RemovePlayerWeapon(playerid, weapon);
		}
	}

	// Warping into vehicles while locked
	/*if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && GetVehicleParams(GetPlayerVehicleID(playerid), VEHICLE_DOORS) && (!IsVehicleOwner(playerid, GetPlayerVehicleID(playerid)) && pData[playerid][pVehicleKeys] != GetPlayerVehicleID(playerid)))
    {
        new
            Float:x,
            Float:y,
            Float:z;
        GetPlayerPos(playerid, x, y, z);
        SetPlayerPos(playerid, x, y, z + 1.0);
        GameTextForPlayer(playerid, "~r~This vehicle is locked!", 3000, 3);
    }*/
}

IsAnIP(ip[])
{
	new part[4];

	if(!sscanf(ip, "p<.>iiii", part[0], part[1], part[2], part[3]))
	{
	    return (0 <= part[0] <= 255) && (0 <= part[1] <= 255) && (0 <= part[2] <= 255) && (0 <= part[3] <= 255);
	}
	else if(!sscanf(ip, "p<.>iicc", part[0], part[1], part[2], part[3]))
	{
	    return (0 <= part[0] <= 255) && (0 <= part[1] <= 255) && (part[2] == '*' && part[3] == '*');
	}

	return 0;
}

IsValidName(name[])
{
	for(new i = 0, j = strlen(name); i < j; i ++)
	{
	    if(!(3 <= j <= MAX_PLAYER_NAME))
	        return 0;

	    switch(name[i])
	    {
	        case 'A'..'Z', 'a'..'z', '0'..'9', '_', '.', '[', ']', '(', ')', '=', '@':
	        {
	            continue;
			}
			default:
			{
			    return 0;
			}
		}
	}

	return 1;
}

IsValidModel(modelid)
{
    static modeldat[] =
	{
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128,
        -515899393, -134217729, -1, -1, 33554431, -1, -1, -1, -14337, -1, -33,
      	127, 0, 0, 0, 0, 0, -8388608, -1, -1, -1, -16385, -1, -1, -1, -1, -1,
       -1, -1, -33, -1, -771751937, -1, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, 33554431, -25, -1, -1, -1, -1, -1, -1,
       -1073676289, -2147483648, 34079999, 2113536, -4825600, -5, -1, -3145729,
       -1, -16777217, -63, -1, -1, -1, -1, -201326593, -1, -1, -1, -1, -1,
       -257, -1, 1073741823, -133122, -1, -1, -65, -1, -1, -1, -1, -1, -1,
       -2146435073, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1073741823, -64, -1,
       -1, -1, -1, -2635777, 134086663, 0, -64, -1, -1, -1, -1, -1, -1, -1,
       -536870927, -131069, -1, -1, -1, -1, -1, -1, -1, -1, -16384, -1,
       -33554433, -1, -1, -1, -1, -1, -1610612737, 524285, -128, -1,
       2080309247, -1, -1, -1114113, -1, -1, -1, 66977343, -524288, -1, -1, -1,
       -1, -2031617, -1, 114687, -256, -1, -4097, -1, -4097, -1, -1,
       1010827263, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -32768, -1, -1, -1, -1, -1,
       2147483647, -33554434, -1, -1, -49153, -1148191169, 2147483647,
       -100781080, -262145, -57, 134217727, -8388608, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1048577, -1, -449, -1017, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1835009, -2049, -1, -1, -1, -1, -1, -1,
       -8193, -1, -536870913, -1, -1, -1, -1, -1, -87041, -1, -1, -1, -1, -1,
       -1, -209860, -1023, -8388609, -2096897, -1, -1048577, -1, -1, -1, -1,
       -1, -1, -897, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1610612737,
       -3073, -28673, -1, -1, -1, -1537, -1, -1, -13, -1, -1, -1, -1, -1985,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1056964609, -1, -1, -1,
       -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -236716037, -1, -1, -1, -1, -1, -1, -1, -536870913, 3, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -2097153, -2109441, -1, 201326591, -4194304, -1, -1,
       -241, -1, -1, -1, -1, -1, -1, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, -32768, -1, -1, -1, -2, -671096835, -1, -8388609, -66323585, -13,
       -1793, -32257, -247809, -1, -1, -513, 16252911, 0, 0, 0, -131072,
       33554383, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8356095, 0, 0, 0, 0, 0,
       0, -256, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -268435449, -1, -1, -2049, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       92274627, -65536, -2097153, -268435457, 591191935, 1, 0, -16777216, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127
	};

	if((modelid >= 0) && ((modelid / 32) < sizeof (modeldat)) && (modeldat[modelid / 32] & (1 << (modelid % 32))))
  	{
   	    return 1;
	}

	if((18632 <= modelid <= 19999) || (11682 <= modelid <= 11753))
	{
	    return 1;
	}

 	return 0;
}

forward SetVehicleEngine(vehicleid, playerid);
public SetVehicleEngine(vehicleid, playerid)
{
	if(pData[playerid][pLogged])
	{
	    pData[playerid][pEngine] = 0;
		SetVehicleParams(vehicleid, VEHICLE_ENGINE, true);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s turns on the engine of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}
	return 1;
}

forward SetVehicleEngineHotwire(vehicleid, playerid);
public SetVehicleEngineHotwire(vehicleid, playerid)
{
	if(pData[playerid][pLogged])
	{
	    pData[playerid][pEngine] = 0;
		SetVehicleParams(vehicleid, VEHICLE_ENGINE, true);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has successfully hotwired the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}
	return 1;
}

IsPlayerOnline(const name[], &id = INVALID_PLAYER_ID)
{
	foreach(new i : Player)
	{
	    if(!strcmp(GetPlayerNameEx(i), name) && pData[i][pLogged])
	    {
	        id = i;
	        return 1;
		}
	}

	id = INVALID_PLAYER_ID;
	return 0;
}

IsPlayerAimingEx(playerid)
{
    new
		keys,
		ud,
		lr;

	GetPlayerKeys(playerid, keys, ud, lr);

	if((keys & KEY_HANDBRAKE) & KEY_HANDBRAKE && (22 <= GetPlayerWeapon(playerid) <= 38))
	{
		switch(GetPlayerAnimationIndex(playerid))
		{
			case 1160..1167, 360..363, 220, 640, 1189, 1331, 1365, 1453, 1449, 1643:
			{
			    return 1;
			}
		}
	}

	return 0;
}

/*IsPointInRangeOfPoint(Float:x1, Float:y1, Float:z1, Float:radius, Float:x2, Float:y2, Float:z2)
{
	x1 -= x2;
	y1 -= y2;
	z1 -= z2;

	return ((x1 * x1) + (y1 * y1) + (z1 * z1)) < (radius * radius);
}

IsVehicleInGarage(vehicleid, garageid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetVehiclePos(vehicleid, x, y, z);

	return IsPointInRangeOfPoint(x, y, z, 50.0, garageInteriors[GarageInfo[garageid][gType]][intVX], garageInteriors[GarageInfo[garageid][gType]][intVY], garageInteriors[GarageInfo[garageid][gType]][intVZ]) && GetVehicleVirtualWorld(vehicleid) == GarageInfo[garageid][gWorld];
}*/


IsPlayerInMiningArea(playerid)
{
    for(new i = 0; i < sizeof(minerPositions); i ++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 4.0, minerPositions[i][0], minerPositions[i][1], minerPositions[i][2]))
	    {
	    	return 1;
	    }
	}

	return 0;
}
IsPlayerInConstructionArea(playerid)
{
    for(new i = 0; i < sizeof(constructionPositions); i ++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 4.0, constructionPositions[i][0], constructionPositions[i][1], constructionPositions[i][2]))
	    {
	    	return 1;
	    }
	}

	return 0;
}
IsPlayerInTuneArea(playerid)
{
    for(new i = 0; i < sizeof(tunePositions); i ++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 4.0, tunePositions[i][0], tunePositions[i][1], tunePositions[i][2]))
	    {
	    	return 1;
	    }
	}

	return 0;
}
forward Checkin(playerid);
public Checkin(playerid)
{
    /*new hospital[32];
	$switch(pData[playerid][pHospitalType])
	{
	    case HOSPITAL_COUNTY: strcat(hospital, "All Saints General");
	    case HOSPITAL_ALLSAINTS: strcat(hospital, "County General");
	}*/
	new rand = random(sizeof(hospitalspawns));
	SetFreezePos(playerid, hospitalspawns[rand][0], hospitalspawns[rand][1], hospitalspawns[rand][2]);
	TogglePlayerControllable(playerid, 1);
	SetPlayerFacingAngle(playerid, 89.7591);
	SetPlayerInterior(playerid, 1);
	ClearAnimations(playerid, 1);
	//SetPlayerVirtualWorld(playerid, pData[playerid][pHospitalType]);
	SetCameraBehindPlayer(playerid);
	SetPlayerHealth(playerid, 100);
	pData[playerid][pBrokenLeg] = 0;
	return 1;
}
forward Checkin2(playerid);
public Checkin2(playerid)
{
    /*new hospital[32];
	$switch(pData[playerid][pHospitalType])
	{
	    case HOSPITAL_COUNTY: strcat(hospital, "All Saints General");
	    case HOSPITAL_ALLSAINTS: strcat(hospital, "County General");
	}*/
	//new rand = random(sizeof(hospitalspawns));
	SetFreezePos(playerid, 1577.0229, 529.3601, 502.9909);
	TogglePlayerControllable(playerid, 1);
	SetPlayerFacingAngle(playerid, 89.7591);
	SetPlayerInterior(playerid, 2);
	ClearAnimations(playerid, 1);
	SetPlayerVirtualWorld(playerid, 5);
	//SetPlayerVirtualWorld(playerid, pData[playerid][pHospitalType]);
	SetCameraBehindPlayer(playerid);
	SetPlayerHealth(playerid, 100);
	pData[playerid][pBrokenLeg] = 0;
	return 1;
}
/*IsPlayerAtFuelStation(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid, 12.0, 1004.0070, -939.3102, 42.1797) || IsPlayerInRangeOfPoint(playerid, 12.0, 1944.3260, -1772.9254, 13.3906) || IsPlayerInRangeOfPoint(playerid, 12.0, -90.5515, -1169.4578, 2.4079) || IsPlayerInRangeOfPoint(playerid, 12.0, -1609.7958, -2718.2048, 48.5391)) {
        return 1;
	} else if(IsPlayerInRangeOfPoint(playerid, 12.0, -2029.4968, 156.4366, 28.9498) || IsPlayerInRangeOfPoint(playerid, 12.0, -2408.7590, 976.0934, 45.4175) || IsPlayerInRangeOfPoint(playerid, 12.0, -2243.9629, -2560.6477, 31.8841) || IsPlayerInRangeOfPoint(playerid, 12.0, -1676.6323, 414.0262, 6.9484)) {
	    return 1;
	} else if(IsPlayerInRangeOfPoint(playerid, 12.0, 2202.2349, 2474.3494, 10.5258) || IsPlayerInRangeOfPoint(playerid, 12.0, 614.9333, 1689.7418, 6.6968) || IsPlayerInRangeOfPoint(playerid, 12.0, -1328.8250, 2677.2173, 49.7665) || IsPlayerInRangeOfPoint(playerid, 12.0, 70.3882, 1218.6783, 18.5165)) {
	    return 1;
	} else if(IsPlayerInRangeOfPoint(playerid, 12.0, 654.9641, -559.7485, 16.5015) || IsPlayerInRangeOfPoint(playerid, 12.0, 654.9617, -570.4176, 16.5015) || IsPlayerInRangeOfPoint(playerid, 12.0, 1382.9899, 461.9903, 20.1245) || IsPlayerInRangeOfPoint(playerid, 12.0, 1380.9395, 457.2494, 19.9260) || IsPlayerInRangeOfPoint(playerid, 12.0, -2238.9214, -1714.1272, 480.2734)) {
	    return 1;
	}

	return 0;
}*/

IsPlayerAtFishingPlace(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid, 1.0, 403.8266, -2088.7598, 7.8359) || IsPlayerInRangeOfPoint(playerid, 1.0, 398.7553, -2088.7490, 7.8359) || IsPlayerInRangeOfPoint(playerid, 1.0, 396.2197, -2088.6692, 7.8359) || IsPlayerInRangeOfPoint(playerid, 1.0, 391.1094, -2088.7976, 7.8359)) {
		return 1;
	} else if(IsPlayerInRangeOfPoint(playerid, 1.0, 383.4157, -2088.7849, 7.8359) || IsPlayerInRangeOfPoint(playerid, 1.0, 374.9598, -2088.7979, 7.8359) || IsPlayerInRangeOfPoint(playerid, 1.0, 369.8107, -2088.7927, 7.8359) || IsPlayerInRangeOfPoint(playerid, 1.0, 367.3637, -2088.7925, 7.8359)) {
	    return 1;
	} else if(IsPlayerInRangeOfPoint(playerid, 1.0, 362.2244, -2088.7981, 7.8359) || IsPlayerInRangeOfPoint(playerid, 1.0, 354.5382, -2088.7979, 7.8359)) {
	    return 1;
	}

	return 0;
}

IsPlayerInRangeOfDynamicObject(playerid, objectid, Float:radius)
{
	if(IsValidDynamicObject(objectid))
	{
		new
		    interiorid = Streamer_GetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_INTERIOR_ID),
			worldid = Streamer_GetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_WORLD_ID),
		    Float:x,
		    Float:y,
		    Float:z;

		GetDynamicObjectPos(objectid, x, y, z);

		if(interiorid == -1) {
		    interiorid = GetPlayerInterior(playerid);
		} if(worldid == -1) {
		    worldid = GetPlayerVirtualWorld(playerid);
		}

		if(IsPlayerInRangeOfPoint(playerid, radius, x, y, z) && GetPlayerInterior(playerid) == interiorid && GetPlayerVirtualWorld(playerid) == worldid)
		{
		    return 1;
		}
	}

	return 0;
}

IsPlayerInRangeOfPlayer(playerid, targetid, Float:radius)
{
	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(targetid, x, y, z);

	if(IsPlayerInRangeOfPoint(playerid, radius, x, y, z) && GetPlayerInterior(playerid) == GetPlayerInterior(targetid) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(targetid))
	{
	    return 1;
	}

	return 0;
}

SetMusicStream(type, extraid, url[])
{
	switch(type)
	{
	    case MUSIC_MP3PLAYER:
	    {
	        if(isnull(url) && pData[extraid][pStreamType] == type)
	        {
	            StopAudioStreamForPlayer(extraid);
	            pData[extraid][pStreamType] = MUSIC_NONE;
	        }
	        else
	        {
	            PlayAudioStreamForPlayer(extraid, url);
	            pData[extraid][pStreamType] = type;
	        }
		}
		case MUSIC_BOOMBOX:
		{
		    foreach(new i : Player)
		    {
		        if(pData[i][pBoomboxListen] == extraid)
		        {
				    if(isnull(url) && pData[i][pStreamType] == type)
				    {
				        StopAudioStreamForPlayer(i);
			            pData[i][pStreamType] = MUSIC_NONE;
			        }
			        else if(pData[i][pStreamType] == MUSIC_NONE || pData[i][pStreamType] == MUSIC_BOOMBOX)
			        {
			            PlayAudioStreamForPlayer(i, url);
			            pData[i][pStreamType] = type;
			        }
				}
			}

			strcpy(pData[extraid][pBoomboxURL], url, 128);
		}
		case MUSIC_VEHICLE:
		{
		    foreach(new i : Player)
		    {
		        if(IsPlayerInVehicle(i, extraid))
		        {
				    if(isnull(url) && pData[i][pStreamType] == type)
				    {
		        		StopAudioStreamForPlayer(i);
	            		pData[i][pStreamType] = MUSIC_NONE;
			        }
	    		    else if(pData[i][pStreamType] == MUSIC_NONE || pData[i][pStreamType] == MUSIC_VEHICLE)
			        {
	    		        PlayAudioStreamForPlayer(i, url);
	           		 	pData[i][pStreamType] = type;
					}
				}
			}

			strcpy(vehicleStream[extraid], url, 128);
		}
	}
}

DestroyPotPlant(playerid)
{
	if(pData[playerid][pPotPlanted])
	{
	    DestroyDynamicObject(pData[playerid][pPotObject]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET potplanted = 0, pottime = 0, potgrams = 0, pot_x = 0.0, pot_y = 0.0, pot_z = 0.0, pot_a = 0.0 WHERE uid = %i", pData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    pData[playerid][pPotPlanted] = 0;
	    pData[playerid][pPotTime] = 0;
	    pData[playerid][pPotGrams] = 0;
	    pData[playerid][pPotX] = 0.0;
	    pData[playerid][pPotY] = 0.0;
	    pData[playerid][pPotZ] = 0.0;
	    pData[playerid][pPotA] = 0.0;
	}
}

DestroyBoombox(playerid)
{
	if(pData[playerid][pBoomboxPlaced])
	{
    	DestroyDynamicObject(pData[playerid][pBoomboxObject]);
		DestroyDynamic3DTextLabel(pData[playerid][pBoomboxText]);

		pData[playerid][pBoomboxObject] = INVALID_OBJECT_ID;
		pData[playerid][pBoomboxText] = Text3D:INVALID_3DTEXT_ID;
        pData[playerid][pBoomboxPlaced] = 0;
        pData[playerid][pBoomboxURL] = 0;
	}
}

GetNearbyBoombox(playerid)
{
	foreach(new i : Player)
	{
	    if(pData[i][pBoomboxPlaced] && IsPlayerInRangeOfDynamicObject(playerid, pData[i][pBoomboxObject], 30.0))
	    {
	        return i;
		}
	}

	return INVALID_PLAYER_ID;
}

SendClientMessageEx(playerid, color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 3)
	{
	    SendClientMessage(playerid, color, text);
	}
	else
	{
		while(--args >= 3)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 	text
		#emit PUSH.C 	192
		#emit PUSH.C 	str
		#emit PUSH.S	8
		#emit SYSREQ.C 	format
		#emit LCTRL 	5
		#emit SCTRL 	4

		SendClientMessage(playerid, color, str);

		#emit RETN
	}
	return 1;
}

SendClientMessageFormatted(playerid, color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 3)
	{
	    SCM(playerid, color, text);
	}
	else
	{
		while(--args >= 3)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 	text
		#emit PUSH.C 	192
		#emit PUSH.C 	str
		#emit PUSH.S	8
		#emit SYSREQ.C 	format
		#emit LCTRL 	5
		#emit SCTRL 	4

		SCM(playerid, color, str);

		#emit RETN
	}
	return 1;
}

SendClientMessageToAllFormatted(color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 2)
	{
	    foreach(new i : Player)
	    {
	        if(pData[i][pLogged])
	        {
			    SCM(i, color, text);
			}
		}
	}
	else
	{
		while(--args >= 2)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri 	8
		#emit ADD.C 		4
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		foreach(new i : Player)
	    {
	        if(pData[i][pLogged])
	        {
			    SCM(i, color, str);
			}
		}

		#emit RETN
	}
	return 1;
}


SendMessage(playerid, color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 3)
	{
	    SCM(playerid, color, text);
	}
	else
	{
		while(--args >= 3)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 	text
		#emit PUSH.C 	192
		#emit PUSH.C 	str
		#emit PUSH.S	8
		#emit SYSREQ.C 	format
		#emit LCTRL 	5
		#emit SCTRL 	4

		SCM(playerid, color, str);

		#emit RETN
	}
	return 1;
}

ShowActionBubble(playerid, text[], {Float, _}:...)
{
	static
		args,
		str[192];

	/*
	 *  Custom function that uses #emit to format variables into a string.
	 *  This code is very fragile; touching any code here will cause crashing!
	*/
	if ((args = numargs()) <= 2)
	{
		SetPlayerChatBubble(playerid, text, COLOR_PURPLE, 25.0, 6000);
	}
	else
	{
		while (--args >= 2)
		{
			#emit LCTRL 5
			#emit LOAD.alt args
			#emit SHL.C.alt 2
			#emit ADD.C 12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S text
		#emit PUSH.C 192
		#emit PUSH.C str
		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri
		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		SetPlayerChatBubble(playerid, str, COLOR_PURPLE, 25.0, 6000);

		#emit RETN
	}
	return 1;
}

SendMessageToAll(color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 2)
	{
	    foreach(new i : Player)
	    {
	        if(pData[i][pLogged])
	        {
			    SCM(i, color, text);
			}
		}
	}
	else
	{
		while(--args >= 2)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri 	8
		#emit ADD.C 		4
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		foreach(new i : Player)
	    {
	        if(pData[i][pLogged])
	        {
			    SCM(i, color, str);
			}
		}

		#emit RETN
	}
	return 1;
}

Log_Write(table[], const text[], {Float,_}:...)
{
	static
  	    args,
	    str[1024];

	if((args = numargs()) <= 2)
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO %e VALUES(null, NOW(), '%e')", table, text);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else
	{
		while(--args >= 2)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri 	8
		#emit ADD.C 		4
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO %e VALUES(null, NOW(), '%e')", table, str);
	    mysql_tquery(connectionID, queryBuffer);

		#emit RETN
	}
	return 1;
}

SendFactionMessage(factionid, color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 3)
	{
	    foreach(new i : Player)
	    {
	        if(pData[i][pLogged] && pData[i][pFaction] == factionid)
	        {
	    		SCM(i, color, text);
			}
		}
	}
	else
	{
		while(--args >= 3)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 	text
		#emit PUSH.C 	192
		#emit PUSH.C 	str
		#emit PUSH.S	8
		#emit SYSREQ.C 	format
		#emit LCTRL 	5
		#emit SCTRL 	4

		foreach(new i : Player)
	    {
	        if(pData[i][pLogged] && pData[i][pFaction] == factionid)
	        {
	    		SCM(i, color, str);
			}
		}

		#emit RETN
	}
	return 1;
}

SendGangMessage(gangid, color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 3)
	{
	    foreach(new i : Player)
	    {
	        if(pData[i][pLogged] && pData[i][pGang] == gangid)
	        {
	    		SCM(i, color, text);
			}
		}
	}
	else
	{
		while(--args >= 3)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 	text
		#emit PUSH.C 	192
		#emit PUSH.C 	str
		#emit PUSH.S	8
		#emit SYSREQ.C 	format
		#emit LCTRL 	5
		#emit SCTRL 	4

		foreach(new i : Player)
	    {
	        if(pData[i][pLogged] && pData[i][pGang] == gangid)
	        {
	    		SCM(i, color, str);
			}
		}

		#emit RETN
	}
	return 1;
}
stock SendNearbyMessage(playerid, Float:radius, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 16)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 16); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit CONST.alt 4
		#emit SUB
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
			if (IsPlayerNearPlayer(i, playerid, radius)) {
  				SendClientMessage(i, color, string);
			}
		}
		return 1;
	}
	foreach (new i : Player)
	{
		if (IsPlayerNearPlayer(i, playerid, radius)) {
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}
stock IsPlayerNearPlayer(playerid, TargetID, Float:radius)
{
	static
		Float:fX,
		Float:fY,
		Float:fZ;

	GetPlayerPos(TargetID, fX, fY, fZ);

	return (GetPlayerInterior(playerid) == GetPlayerInterior(TargetID) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(TargetID)) && IsPlayerInRangeOfPoint(playerid, radius, fX, fY, fZ);
}
forward SendAdminMessage(color, const text[], {Float,_}:...);
public SendAdminMessage(color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 2)
	{
	    foreach(new i : Player)
	    {
	        if(pData[i][pLogged] && pData[i][pAdmin] > 0)
	        {
	    		SCM(i, color, text);
			}
		}

		print(text);
	}
	else
	{
		while(--args >= 2)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri 	8
		#emit ADD.C 		4
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		foreach(new i : Player)
	    {
	        if(pData[i][pLogged] && pData[i][pAdmin] > 0)
	        {
	    		SCM(i, color, str);
			}
		}

		print(str);

		#emit RETN
	}
	return 1;
}


SendHelperMessage(color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 2)
	{
	    foreach(new i : Player)
	    {
	        if(pData[i][pLogged] && pData[i][pHelper] > 0)
	        {
	    		SCM(i, color, text);
			}
		}

		print(text);
	}
	else
	{
		while(--args >= 2)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri 	8
		#emit ADD.C 		4
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		foreach(new i : Player)
	    {
	        if(pData[i][pLogged] && pData[i][pHelper] > 0)
	        {
	    		SCM(i, color, str);
			}
		}

		print(str);

		#emit RETN
	}
	return 1;
}


getTurftype(tid)
{
	new ret[32], id = TurfInfo[tid][tType];
	switch(id)
	{
		case 0: { ret = "Normal"; }
		case 1: { ret = "Hollow point ammo"; } // hollowpoimt
		case 2: { ret = "Poison tip ammo"; }// poisontip
		case 3: { ret = "FMJ ammo"; }// fmj
		case 4: { ret = "Materials"; } // old weps
		case 5: { ret = "Traphouse"; }
		case 6: { ret = "Crackhouse"; }
		case 7: { ret = "Sales tax"; }
		case 8: { ret = "Low class weapons"; }
		case 9: { ret = "Medium class weapons"; }
		case 10: { ret = "High class weapons"; }
	}
	return ret;
}
SendStaffMessage(color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 2)
	{
	    foreach(new i : Player)
	    {
	        if(pData[i][pLogged] && (pData[i][pAdmin] > 0 || pData[i][pHelper] > 0))
	        {
	    		SCM(i, color, text);
			}
		}

		print(text);
	}
	else
	{
		while(--args >= 2)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri 	8
		#emit ADD.C 		4
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		foreach(new i : Player)
	    {
	        if(pData[i][pLogged] && (pData[i][pAdmin] > 0 || pData[i][pHelper] > 0))
	        {
	    		SCM(i, color, str);
			}
		}

		print(str);

		#emit RETN
	}
	return 1;
}

SetPlayerBubbleText(playerid, Float:drawdistance, color, text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 4)
	{
	    SetPlayerChatBubble(playerid, text, color, drawdistance, 8000);
	}
	else
	{
		while(--args >= 4)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri    8
		#emit CONST.alt     4
		#emit SUB
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		SetPlayerChatBubble(playerid, str, color, drawdistance, 8000);

		#emit RETN
	}
	return 1;
}


SendProximityMessage(playerid, Float:radius, color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 4)
	{
	    foreach(new i : Player)
		{
	        if(IsPlayerInRangeOfPlayer(i, playerid, radius) || pData[i][pListen])
	        {
	            SCM(i, color, text);
			}
		}
	}
	else
	{
		while(--args >= 4)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri    8
		#emit CONST.alt     4
		#emit SUB
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		foreach(new i : Player)
		{
	        if(IsPlayerInRangeOfPlayer(i, playerid, radius) || pData[i][pListen])
	        {
	            SCM(i, color, str);
			}
		}

		#emit RETN
	}
	return 1;
}

SendProximityFadeMessage(playerid, Float:radius, const text[], color1, color2, color3, color4, color5)
{
    foreach(new i : Player)
    {
	    if(IsPlayerInRangeOfPlayer(i, playerid, radius / 16))
		{
            SCM(i, color1, text);
        }
		else if(IsPlayerInRangeOfPlayer(i, playerid, radius / 8))
		{
            SCM(i, color2, text);
        }
		else if(IsPlayerInRangeOfPlayer(i, playerid, radius / 4))
		{
            SCM(i, color3, text);
        }
		else if(IsPlayerInRangeOfPlayer(i, playerid, radius / 2))
		{
            SCM(i, color4, text);
        }
		else if(IsPlayerInRangeOfPlayer(i, playerid, radius))
		{
            SCM(i, color5, text);
        }
        else if(pData[i][pListen])
        {
            SCM(i, color5, text);
        }
	}
}

forward RemoveBlood(playerid);
public RemoveBlood(playerid)
{
    for(new i = 0; i < 8;i++)
    {
        TextDrawHideForPlayer(playerid, Blood[i]);
    }
    pBlood[playerid] = false;
    return 1;
}

forward PlayerSpawn(playerid);
public PlayerSpawn(playerid) {
	if(IsPlayerConnected(playerid)) SetPlayerToSpawn(playerid);
}

forward ShowMainMenuCamera(playerid);
public ShowMainMenuCamera(playerid)
{
	HideNoticeGUIFrame(playerid);
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM bans WHERE username = '%s' OR ip = '%s' OR ip LIKE '%s'", GetPlayerNameEx(playerid), GetPlayerIP(playerid), GetPlayerIPRange(playerid));
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOOKUP_BANS, playerid);
}

stock Adrian(playerid, time = 10000)
{
	if(pData[playerid][pAdrian])
	{
		for(new i = 0; i < 16; i ++)
		{
			PlayerTextDrawHide(playerid, SHOWID[playerid][i]);
		}
	    KillTimer(pData[playerid][pAdrianTimer]);
	}
	for(new i = 0; i < 16; i ++)
	{
		PlayerTextDrawShow(playerid, SHOWID[playerid][i]);
	}

	pData[playerid][pAdrian] = true;
	pData[playerid][pAdrianTimer] = SetTimerEx("HidetheAdrian", time, false, "d", playerid);
}

forward HidetheAdrian(playerid);
public HidetheAdrian(playerid)
{
	if (!pData[playerid][pAdrian])
	    return 0;

	pData[playerid][pAdrian] = false;
	for(new i = 0; i < 16; i ++)
	{
		PlayerTextDrawHide(playerid, SHOWID[playerid][i]);
	}
	return 1;
}

stock Dyuze(playerid, title[], string[], time = 5000)
{
	if(pData[playerid][pDyuze])
	{
	    PlayerTextDrawHide(playerid, DyuzeeeTD[playerid][0]);
	    KillTimer(pData[playerid][pDyuzeTimer]);
	}
	new string2[128];
	format(string2, sizeof(string2), "%s~n~_", title);
	PlayerTextDrawSetString(playerid, DyuzeeeTD[playerid][1], string2);
	PlayerTextDrawShow(playerid, DyuzeeeTD[playerid][1]);

	PlayerTextDrawSetString(playerid, DyuzeeeTD[playerid][0], string);
	PlayerTextDrawShow(playerid, DyuzeeeTD[playerid][0]);

	pData[playerid][pDyuze] = true;
	pData[playerid][pDyuzeTimer] = SetTimerEx("HidetheDyuze", time, false, "d", playerid);
}

forward HidetheDyuze(playerid);
public HidetheDyuze(playerid)
{
	if (!pData[playerid][pDyuze])
	    return 0;

	pData[playerid][pDyuze] = false;
	PlayerTextDrawHide(playerid, DyuzeeeTD[playerid][0]);
	PlayerTextDrawHide(playerid, DyuzeeeTD[playerid][1]);
	return 1;
}

/*forward HidetheDyuze(playerid);
public HidetheDyuze(playerid)
{
	if (!pData[playerid][pDyuze])
	    return 0;

	pData[playerid][pDyuze] = false;
	PlayerTextDrawHide(playerid, ModernPlayerText[playerid][0]);
	PlayerTextDrawHide(playerid, ModernPlayerText[playerid][1]);
	return 1;
}*/

/*forward HidetheMysto(playerid);
public HidetheMysto(playerid)
{
	TextDrawHideForPlayer(playerid, StartupTD[0]);
	return 1;
}*/

forward Countdown(playerid, count);
public Countdown(playerid, count)
{
	foreach(new i : Player)
	{
	    if(pData[i][pJoinedEvent])
	    {
	        /*switch(count)
	        {
	        	case 3:
				{
					GameTextForPlayer(i, "~g~3", 1500, 3);
					PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				}
				case 2:
				{
                    GameTextForPlayer(i, "~g~2", 1500, 3);
					PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				}
				case 1:
				{
                    GameTextForPlayer(i, "~g~1", 1500, 3);
					PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				}
				case 0:
				{
                    GameTextForPlayer(i, "~g~Go! Go! Go!", 2000, 3);
					PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
				}
			}*/
			switch(count)
	        {
	        	case 3:
				{
					/*GameTextForPlayer(i, "~g~3", 1500, 3);
					PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);*/
					SCM(i, COLOR_LIGHTBLUE, "** 3");
				}
				case 2:
				{
                    /*GameTextForPlayer(i, "~g~2", 1500, 3);
					PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);*/
					SCM(i, COLOR_LIGHTBLUE, "** 2");
				}
				case 1:
				{
                    /*GameTextForPlayer(i, "~g~1", 1500, 3);
					PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);*/
					SCM(i, COLOR_LIGHTBLUE, "** 1");
				}
				case 0:
				{
                    /*GameTextForPlayer(i, "~g~Go! Go! Go!", 2000, 3);
					PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);*/
					SCM(i, COLOR_LIGHTBLUE, "** Go! Go! Go!");
				}
			}
		}
	}

	count--;

	if(count >= 0)
	{
 		SetTimerEx("Countdown", 1000, false, "ii", playerid, count);
	}
}

forward CountdownAll(playerid, count);
public CountdownAll(playerid, count)
{
	foreach(new i : Player)
	{
	    if(pData[i][pLogged])
	    {
	        switch(count)
	        {
	        	case 3:
				{
					/*GameTextForPlayer(i, "~g~3", 1500, 3);
					PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);*/
					SCM(i, COLOR_LIGHTBLUE, "** 3");
				}
				case 2:
				{
                    /*GameTextForPlayer(i, "~g~2", 1500, 3);
					PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);*/
					SCM(i, COLOR_LIGHTBLUE, "** 2");
				}
				case 1:
				{
                    /*GameTextForPlayer(i, "~g~1", 1500, 3);
					PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);*/
					SCM(i, COLOR_LIGHTBLUE, "** 1");
				}
				case 0:
				{
                    /*GameTextForPlayer(i, "~g~Go! Go! Go!", 2000, 3);
					PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);*/
					SCM(i, COLOR_LIGHTBLUE, "** Go! Go! Go!");
				}
			}
		}
	}

	count--;

	if(count >= 0)
	{
 		SetTimerEx("CountdownAll", 1000, false, "ii", playerid, count);
	}
}


forward UnfreezeNewbie(playerid);
public UnfreezeNewbie(playerid)
{
    TogglePlayerControllable(playerid, 1);
}

forward VehicleUnfreeze(playerid, vehicleid, Float:x, Float:y, Float:z, interior, world);
public VehicleUnfreeze(playerid, vehicleid, Float:x, Float:y, Float:z, interior, world)
{
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsPlayerInRangeOfPoint(playerid, 100.0, x, y, z) && GetPlayerInterior(playerid) == interior && GetPlayerVirtualWorld(playerid) == world)
	{
		SetVehiclePos(vehicleid, x, y, z);
	}

	TogglePlayerControllable(playerid, 1);
}

forward UnfreezePlayer(playerid, Float:x, Float:y, Float:z);
public UnfreezePlayer(playerid, Float:x, Float:y, Float:z)
{
	if(IsPlayerInRangeOfPoint(playerid, 5.0, x, y, z))
	{
	    SetPlayerPos(playerid, x, y, z);
	    TogglePlayerControllable(playerid, 1);
		HideNoticeGUIFrame(playerid);
	}
}

forward UnfreezePlayerEx(playerid);
public UnfreezePlayerEx(playerid)
{
	TogglePlayerControllable(playerid, 1);
	HideNoticeGUIFrame(playerid);
	return 1;
}

forward DestroyWater(objectid);
public DestroyWater(objectid)
{
	DestroyDynamicObject(objectid);
}
forward DynamicTimer();
public DynamicTimer()
{
	if(PaintballTimer1 > 0) PaintballTimer1--;
    if(PaintballTimer2 > 0) PaintballTimer2--;
	if(PaintballTimer1 == 0 && GetPBPlayers1() != 0) {
	    foreach(new pb : Player) {
	        if(pData[pb][pPaintball]) {
         		ResetPlayerWeapons(pb);
		        SetPlayerArmedWeapon(pb, 0);
				pData[pb][pPaintball] = 0;
				SetPlayerToSpawn(pb);
				TogglePlayerControllable(pb, 0);
				SetTimerEx("UnfreezePlayerEx", 5000, false, "i", pb);
				// Find the winner
				new winner;
				foreach(new w1 : Player)
				{
				    if(IsPlayerConnected(w1))
				    {
				         if(pbscore1[w1] > pbscore1[winner]) winner = w1;
				    }
				}
				SM(pb, -1, "The paintball round has ended! (Winner: %s | Score: %i)", GetRPName(winner), pbscore1[winner]);
			}
		}
	}
	if(PaintballTimer2 == 0 && GetPBPlayers2() != 0) {
	    foreach(new pbtwo : Player) {
	        if(pData[pbtwo][pPaintball2]) {
         		ResetPlayerWeapons(pbtwo);
		        SetPlayerArmedWeapon(pbtwo, 0);
				pData[pbtwo][pPaintball2] = 0;
				SetPlayerToSpawn(pbtwo);
				TogglePlayerControllable(pbtwo, 0);
				SetTimerEx("UnfreezePlayerEx", 5000, false, "i", pbtwo);

				new winner;
				foreach(new w2 : Player)
				{
				    if(IsPlayerConnected(w2))
				    {
				         if(pbscore2[w2] > pbscore2[winner]) winner = w2;
				    }
				}
				SM(pbtwo, -1, "The paintball round has ended! (Winner: %s | Score: %i)", GetRPName(winner), pbscore2[winner]);
			}
		}
	}
	if(PaintballTimer1 < 5 && GetPBPlayers1() != 0) {
    	foreach(new pbo : Player) {
        	if(pData[pbo][pPaintball]) {
            	TogglePlayerControllable(pbo,0);
            	GameTextForPlayer(pbo, "~r~Round is ending...", 800, 4);
			}
		}
	}
	if(PaintballTimer2 < 5 && GetPBPlayers2() != 0) {
    	foreach(new pbt : Player) {
        	if(pData[pbt][pPaintball2]) {
            	TogglePlayerControllable(pbt,0);
            	GameTextForPlayer(pbt, "~r~Round is ending...", 800, 4);
			}
		}
	}
}

IsHelicopter(vehid)
{
    new pveh = GetVehicleModel(vehid);
    if(pveh == 417|| pveh == 425 || pveh == 447 || pveh == 469 || pveh == 487
	|| pveh == 488 || pveh == 497 || pveh == 548 || pveh == 563) {
        return true;
    }
	return false;
}

IsSurfable(vehid)
{
	switch(GetVehicleModel(vehid)) {
		case 422, 535, 470, 406, 478, 543, 554, 600, 605, 607, 472, 473, 493, 595, 484, 430, 453, 452, 446, 454:
			return 1;
	}
	if(IsHelicopter(vehid)) return 1;
	return 0;
}

AntiCarSurf(playerid)
{
    new vehid = GetPlayerSurfingVehicleID(playerid);
    if(vehid != INVALID_VEHICLE_ID && GetVehicleSpeed(vehid) >= 20.0)
    {
		if(IsSurfable(vehid)) {
			SetPVarInt(playerid, "DistortAim", 1);
			//SetPlayerDrunkLevel(playerid, 30000);
        }
        else {
        	GetPlayerPos(playerid, pData[playerid][pPosX], pData[playerid][pPosY], pData[playerid][pPosZ]);
            SetPlayerPos(playerid, pData[playerid][pPosX], pData[playerid][pPosY]+1.0, pData[playerid][pPosZ]+1.0);
        }
    }
    /*else {
		if(GetPVarType(playerid, "DistortAim") != 0) {
			DeletePVar(playerid, "DistortAim");
			SetPlayerDrunkLevel(playerid, 0);
        }
    }*/
}

stock GetUniquePlate(vehicleid) {
	new string[128], rows;

	for(new i = 0; i < 10; i++){

		format(string,sizeof(string),"%i-%c%c%c %i%i%i",random(10),(65+random(26)),(65+random(26)),(65+random(26)),random(10),random(10),random(10));
		printf("string begin of loop = %s",string);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT plate FROM vehicles WHERE plate = '%e'", string);
		mysql_tquery(connectionID, queryBuffer);

		if(rows > 0)
		{
			printf("string already exists = %s",string);
			format(string,sizeof(string),"%i-%c%c%c %i%i%i",random(10),(65+random(26)),(65+random(26)),(65+random(26)),random(10),random(10),random(10));
		} else {
			format(VehicleInfo[vehicleid][vPlate],32, "%s", string);
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET plate = '%e' WHERE id = %i", VehicleInfo[vehicleid][vPlate], VehicleInfo[vehicleid][vID]);
			mysql_tquery(connectionID, queryBuffer);
			SetVehicleNumberPlate(vehicleid, VehicleInfo[vehicleid][vPlate]);
			//SetVehicleToRespawn(vehicleid);
			DespawnVehicle(vehicleid);
			break;
		}
	}
	return 1;
}

forward VehicleTimer();
public VehicleTimer()
{
	new string[16];
	foreach(new i : Player) {
    	if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
		{ // UpdateSpeedo
			new vehicleid = GetPlayerVehicleID(i);
			if(GetPlayerState(i) == PLAYER_STATE_DRIVER && VehicleHasEngine(vehicleid))
		    {
        		new
					Float:health;

				GetVehicleHealth(vehicleid, health);
				if(VehicleHasEngine(vehicleid))
				{
					format(string, sizeof(string), "~w~%.0f", GetVehicleSpeedMPH(vehicleid));
					PlayerTextDrawSetString(i, SpeedTD[i][14], string);
					if(GetVehicleSpeedMPH(vehicleid) < 20)
					{
						PlayerTextDrawSetString(i, SpeedTD[i][3], "~w~20");
						PlayerTextDrawSetString(i, SpeedTD[i][4], "~w~40");
						PlayerTextDrawSetString(i, SpeedTD[i][5], "~w~60");
						PlayerTextDrawSetString(i, SpeedTD[i][6], "~w~80");
						PlayerTextDrawSetString(i, SpeedTD[i][7], "~w~100");
						PlayerTextDrawSetString(i, SpeedTD[i][8], "~w~120");
						PlayerTextDrawSetString(i, SpeedTD[i][9], "~w~140");
						PlayerTextDrawSetString(i, SpeedTD[i][10], "~w~160");
						PlayerTextDrawSetString(i, SpeedTD[i][11], "~w~180");
						PlayerTextDrawSetString(i, SpeedTD[i][12], "~w~200");
					}
					if(GetVehicleSpeedMPH(vehicleid) > 20)
					{
						PlayerTextDrawSetString(i, SpeedTD[i][3], "~r~20");
						PlayerTextDrawSetString(i, SpeedTD[i][4], "~w~40");
						PlayerTextDrawSetString(i, SpeedTD[i][5], "~w~60");
						PlayerTextDrawSetString(i, SpeedTD[i][6], "~w~80");
						PlayerTextDrawSetString(i, SpeedTD[i][7], "~w~100");
						PlayerTextDrawSetString(i, SpeedTD[i][8], "~w~120");
						PlayerTextDrawSetString(i, SpeedTD[i][9], "~w~140");
						PlayerTextDrawSetString(i, SpeedTD[i][10], "~w~160");
						PlayerTextDrawSetString(i, SpeedTD[i][11], "~w~180");
						PlayerTextDrawSetString(i, SpeedTD[i][12], "~w~200");
					}
					if(GetVehicleSpeedMPH(vehicleid) > 40)
					{
						PlayerTextDrawSetString(i, SpeedTD[i][3], "~w~20");
						PlayerTextDrawSetString(i, SpeedTD[i][4], "~r~40");
						PlayerTextDrawSetString(i, SpeedTD[i][5], "~w~60");
						PlayerTextDrawSetString(i, SpeedTD[i][6], "~w~80");
						PlayerTextDrawSetString(i, SpeedTD[i][7], "~w~100");
						PlayerTextDrawSetString(i, SpeedTD[i][8], "~w~120");
						PlayerTextDrawSetString(i, SpeedTD[i][9], "~w~140");
						PlayerTextDrawSetString(i, SpeedTD[i][10], "~w~160");
						PlayerTextDrawSetString(i, SpeedTD[i][11], "~w~180");
						PlayerTextDrawSetString(i, SpeedTD[i][12], "~w~200");
					}
                    if(GetVehicleSpeedMPH(vehicleid) > 60)
					{
						PlayerTextDrawSetString(i, SpeedTD[i][3], "~w~20");
						PlayerTextDrawSetString(i, SpeedTD[i][4], "~w~40");
						PlayerTextDrawSetString(i, SpeedTD[i][5], "~r~60");
						PlayerTextDrawSetString(i, SpeedTD[i][6], "~w~80");
						PlayerTextDrawSetString(i, SpeedTD[i][7], "~w~100");
						PlayerTextDrawSetString(i, SpeedTD[i][8], "~w~120");
						PlayerTextDrawSetString(i, SpeedTD[i][9], "~w~140");
						PlayerTextDrawSetString(i, SpeedTD[i][10], "~w~160");
						PlayerTextDrawSetString(i, SpeedTD[i][11], "~w~180");
						PlayerTextDrawSetString(i, SpeedTD[i][12], "~w~200");
					}
                    if(GetVehicleSpeedMPH(vehicleid) > 80)
					{
						PlayerTextDrawSetString(i, SpeedTD[i][3], "~w~20");
						PlayerTextDrawSetString(i, SpeedTD[i][4], "~w~40");
						PlayerTextDrawSetString(i, SpeedTD[i][5], "~w~60");
						PlayerTextDrawSetString(i, SpeedTD[i][6], "~r~80");
						PlayerTextDrawSetString(i, SpeedTD[i][7], "~w~100");
						PlayerTextDrawSetString(i, SpeedTD[i][8], "~w~120");
						PlayerTextDrawSetString(i, SpeedTD[i][9], "~w~140");
						PlayerTextDrawSetString(i, SpeedTD[i][10], "~w~160");
						PlayerTextDrawSetString(i, SpeedTD[i][11], "~w~180");
						PlayerTextDrawSetString(i, SpeedTD[i][12], "~w~200");
					}
                    if(GetVehicleSpeedMPH(vehicleid) > 100)
					{
						PlayerTextDrawSetString(i, SpeedTD[i][3], "~w~20");
						PlayerTextDrawSetString(i, SpeedTD[i][4], "~w~40");
						PlayerTextDrawSetString(i, SpeedTD[i][5], "~w~60");
						PlayerTextDrawSetString(i, SpeedTD[i][6], "~w~80");
						PlayerTextDrawSetString(i, SpeedTD[i][7], "~r~100");
						PlayerTextDrawSetString(i, SpeedTD[i][8], "~w~120");
						PlayerTextDrawSetString(i, SpeedTD[i][9], "~w~140");
						PlayerTextDrawSetString(i, SpeedTD[i][10], "~w~160");
						PlayerTextDrawSetString(i, SpeedTD[i][11], "~w~180");
						PlayerTextDrawSetString(i, SpeedTD[i][12], "~w~200");
					}
                    if(GetVehicleSpeedMPH(vehicleid) > 120)
					{
						PlayerTextDrawSetString(i, SpeedTD[i][3], "~w~20");
						PlayerTextDrawSetString(i, SpeedTD[i][4], "~w~40");
						PlayerTextDrawSetString(i, SpeedTD[i][5], "~w~60");
						PlayerTextDrawSetString(i, SpeedTD[i][6], "~w~80");
						PlayerTextDrawSetString(i, SpeedTD[i][7], "~w~100");
						PlayerTextDrawSetString(i, SpeedTD[i][8], "~r~120");
						PlayerTextDrawSetString(i, SpeedTD[i][9], "~w~140");
						PlayerTextDrawSetString(i, SpeedTD[i][10], "~w~160");
						PlayerTextDrawSetString(i, SpeedTD[i][11], "~w~180");
						PlayerTextDrawSetString(i, SpeedTD[i][12], "~w~200");
					}
                    if(GetVehicleSpeedMPH(vehicleid) > 140)
					{
						PlayerTextDrawSetString(i, SpeedTD[i][3], "~w~20");
						PlayerTextDrawSetString(i, SpeedTD[i][4], "~w~40");
						PlayerTextDrawSetString(i, SpeedTD[i][5], "~w~60");
						PlayerTextDrawSetString(i, SpeedTD[i][6], "~w~80");
						PlayerTextDrawSetString(i, SpeedTD[i][7], "~w~100");
						PlayerTextDrawSetString(i, SpeedTD[i][8], "~w~120");
						PlayerTextDrawSetString(i, SpeedTD[i][9], "~r~140");
						PlayerTextDrawSetString(i, SpeedTD[i][10], "~w~160");
						PlayerTextDrawSetString(i, SpeedTD[i][11], "~w~180");
						PlayerTextDrawSetString(i, SpeedTD[i][12], "~w~200");
					}
                    if(GetVehicleSpeedMPH(vehicleid) > 160)
					{
						PlayerTextDrawSetString(i, SpeedTD[i][3], "~w~20");
						PlayerTextDrawSetString(i, SpeedTD[i][4], "~w~40");
						PlayerTextDrawSetString(i, SpeedTD[i][5], "~w~60");
						PlayerTextDrawSetString(i, SpeedTD[i][6], "~w~80");
						PlayerTextDrawSetString(i, SpeedTD[i][7], "~w~100");
						PlayerTextDrawSetString(i, SpeedTD[i][8], "~w~120");
						PlayerTextDrawSetString(i, SpeedTD[i][9], "~w~140");
						PlayerTextDrawSetString(i, SpeedTD[i][10], "~r~160");
						PlayerTextDrawSetString(i, SpeedTD[i][11], "~w~180");
						PlayerTextDrawSetString(i, SpeedTD[i][12], "~w~200");
					}
                    if(GetVehicleSpeedMPH(vehicleid) > 180)
					{
						PlayerTextDrawSetString(i, SpeedTD[i][3], "~w~20");
						PlayerTextDrawSetString(i, SpeedTD[i][4], "~w~40");
						PlayerTextDrawSetString(i, SpeedTD[i][5], "~w~60");
						PlayerTextDrawSetString(i, SpeedTD[i][6], "~w~80");
						PlayerTextDrawSetString(i, SpeedTD[i][7], "~w~100");
						PlayerTextDrawSetString(i, SpeedTD[i][8], "~w~120");
						PlayerTextDrawSetString(i, SpeedTD[i][9], "~w~140");
						PlayerTextDrawSetString(i, SpeedTD[i][10], "~w~160");
						PlayerTextDrawSetString(i, SpeedTD[i][11], "~r~180");
						PlayerTextDrawSetString(i, SpeedTD[i][12], "~w~200");
					}
                    if(GetVehicleSpeedMPH(vehicleid) > 200)
					{
						PlayerTextDrawSetString(i, SpeedTD[i][3], "~w~20");
						PlayerTextDrawSetString(i, SpeedTD[i][4], "~w~40");
						PlayerTextDrawSetString(i, SpeedTD[i][5], "~w~60");
						PlayerTextDrawSetString(i, SpeedTD[i][6], "~w~80");
						PlayerTextDrawSetString(i, SpeedTD[i][7], "~w~100");
						PlayerTextDrawSetString(i, SpeedTD[i][8], "~w~120");
						PlayerTextDrawSetString(i, SpeedTD[i][9], "~w~140");
						PlayerTextDrawSetString(i, SpeedTD[i][10], "~w~160");
						PlayerTextDrawSetString(i, SpeedTD[i][11], "~w~180");
						PlayerTextDrawSetString(i, SpeedTD[i][12], "~r~200");
					}

					format(string, sizeof(string), "Fuel: ~b~%i", vehicleFuel[vehicleid]);
					PlayerTextDrawSetString(i, SpeedTD[i][15], string);
				}
				for(new x = 0; x < MAX_DEPLOYABLES; x++)
				{
				    if(DeployInfo[x][dExists] && DeployInfo[x][dType] == DEPLOY_SPIKESTRIP && IsPlayerInRangeOfPoint(x, 3.0, DeployInfo[x][dPosX], DeployInfo[x][dPosY], DeployInfo[x][dPosZ]))
			        {
			            new
			                panels,
			                doors,
			                lights,
			                tires;

			            GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);

			            if(tires != 15)
			            {
			                UpdateVehicleDamageStatus(vehicleid, panels, doors, lights, 15);
			                SCM(i, COLOR_SYNTAX, "Spiked!");
							//Dyuze(i, "Notice", "Spiked!");
			            }
			        }
				}
			}
		}
	}
}

forward HudTimer();
public HudTimer()
{
	foreach(new i : Player)
	{
		new string[128];
		format(string, sizeof(string), "BALANCE; %s", FormatNumber(pData[i][pBank]));
		PlayerTextDrawSetString(i, ATMTD2[i][1], string);

		format(string, sizeof(string), "BALANCE; %s", FormatNumber(pData[i][pBank]));
		PlayerTextDrawSetString(i, PhoneAtmPlayer[i], string);

		/*format(string, sizeof(string), "~y~ONLINE:~w~%d", Iter_Count(Player));
		PlayerTextDrawSetString(i, CCRPMENU[i][1], string);*/

	}
}
BedTime(playerid)
{
	if (pData[playerid][pBedType] > 1)
	{
		if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1248.3483,-1305.1841,1061.8671))
		{
			new rand = random(sizeof(hospitalspawns));
			SetFreezePos(playerid, hospitalspawns[rand][0], hospitalspawns[rand][1], hospitalspawns[rand][2]);
			SetPlayerFacingAngle(playerid, 9.8095);
			SM(playerid, COLOR_GREY2,"** You're still hurt wait %i before you go.", pData[playerid][pBedTime]);
		}
	}
}

forward TDInfoTimer();
public TDInfoTimer()
{
	foreach(new i : Player)
	{
		if((GetNearbyBusiness(i)) >= 0)
		{
			ShowBizTextDraws(i);
			SelectTextDraw(i, -1);
		}
		/*if(!(GetNearbyBusiness(i)))
		{
			KillTimer(BizTDTimerVar[i]);
			BizTDTimerVar[i] = SetTimerEx("BizTDTimer", 3000, false, "i", i);
		}*/
		if((GetNearbyHouse(i)) >= 0)
		{
			ShowHouseTextDraws(i);
		}
		if((GetNearbyEntrance(i)) >= 0)
		{
			ShowEntranceTextDraws(i);
			SelectTextDraw(i, -1);
		}
		/*if(!(GetNearbyBusiness(i)))
		{
			KillTimer(EntranceTDTimerVar[i]);
			EntranceTDTimerVar[i] = SetTimerEx("EntranceTDTimer", 3000, false, "i", i);
		}*/
	}
}

forward SecondTimer();
public SecondTimer()
{
	new hour, minute, boomboxid, string[128];
	gettime(hour, minute);
	foreach(new i : Player)
	{
		if(pData[i][pJailTime] > 0) {
			format(string, sizeof(string), "You will release in ~r~%d~w~ seconds.", pData[i][pJailTime]);
			PlayerTextDrawSetString(i, DyuzeeeTD[i][0], string);
		}
		if(pData[i][pCarrying])
		{
			SetPlayerArmedWeapon(i, 0);
		}
  		//SetPlayerTime(i, hour, minute);
		if(pData[i][pLogged] && !pData[i][pKicked])
		{
			pData[i][pSeconds]++;
		    AFKCheck(i);
			AntiCarSurf(i);
			BedTime(i);
			/*#if defined Christmas
				#else
				if(pData[i][pLastCarolTime] > 0)
				{
					pData[i][pLastCarolTime] -= 1;
				}
			#endif*/
		    new Float:vhp;
			for(new vehicleid; vehicleid<MAX_VEHICLES;vehicleid++)
			{
				if(GetVehicleModel(vehicleid) == 0) continue; //only returns 0 when vehicle is invalid (not spawned)
				GetVehicleHealth(vehicleid,vhp);
				if(vhp < 300.0) {
					SetVehicleParams(vehicleid, VEHICLE_ENGINE, false);
					SetVehicleHealth(vehicleid, 251.0);
				}
			}
	        if(pData[i][pCapturingPoint] >= 0)
			{
				pData[i][pCaptureTime]--;

				if(pData[i][pCaptureTime] <= 0)
				{
					new Float:x, Float:y, Float:z;

					GetPlayerPos(i, x, y, z);

					if(PointInfo[pData[i][pCapturingPoint]][pTime] == 0 && pData[i][pPointX] == x && pData[i][pPointY] == y && pData[i][pPointZ] == z)
					{
						SMA(COLOR_YELLOW, "%s is attempting to Take-Over %s Point for %s in 10 minutes.", GetRPName(i), PointInfo[pData[i][pCapturingPoint]][pName], GangInfo[pData[i][pGang]][gName]);
						SMA(COLOR_RED, "%s is now redzone!", PointInfo[pData[i][pCapturingPoint]][pName]);

						PointInfo[pData[i][pCapturingPoint]][pCaptureTime] = 10;
						PointInfo[pData[i][pCapturingPoint]][pCapturer] = i;
					}
					else
					{
						SCM(i, COLOR_SYNTAX, "You moved from your position and therefore failed to capture.");
					}

					pData[i][pCapturingPoint] = -1;
					pData[i][pCaptureTime] = 0;
				}
			}
	       	if(Maskara[i] && !pData[i][pAdminDuty])
	    	{
	        	format(string, sizeof(string), "Stranger_%d", MaskaraID[i]);
				SetPlayerName(i, string);
	    	}
	    	if(!Maskara[i] && !pData[i][pAdminDuty])
	    	{
				SetPlayerName(i, pData[i][pUsername]);
	    	}
			if(pData[i][pLoopAnim] && !pData[i][pToggleTextdraws])
			{
				TextDrawShowForPlayer(i, AnimationTD);
		    }
			else
			{
		        TextDrawHideForPlayer(i, AnimationTD);
		    }

			/*#if defined Christmas
			#else
				if(pData[i][pCandy])
				{
					format(string,sizeof(string),"C%d",pData[i][pCandy]);
					PlayerTextDrawSetString(i, EventTextdraw[i], string);
				}
			#endif*/
			
			/*SetPlayerProgressBarValue(i, HungerBar[i][0], pData[i][pHunger]);
			SetPlayerProgressBarValue(i, HungerBar[i][1], pData[i][pThirst]);*/

			format(string, sizeof(string), "%d%%", pData[i][pHunger]);
			PlayerTextDrawSetString(i, HungerandThirstTD[i][1], string);
			
			format(string, sizeof(string), "%d%%", pData[i][pThirst]);
			PlayerTextDrawSetString(i, HungerandThirstTD[i][5], string);
			// Hunger
			if(pData[i][pHunger] > 26)
			{
				format(string, sizeof(string), "~y~%d%%", pData[i][pHunger]);
				PlayerTextDrawSetString(i, HungerandThirstTD[i][1], string);
			}
			if(pData[i][pHunger] > 75)
			{
				format(string, sizeof(string), "~g~%d%%", pData[i][pHunger]);
				PlayerTextDrawSetString(i, HungerandThirstTD[i][1], string);
			}
			if(pData[i][pHunger] < 26)
			{
				format(string, sizeof(string), "~r~%d%%", pData[i][pHunger]);
				PlayerTextDrawSetString(i, HungerandThirstTD[i][1], string);
			}
			// Thirst
			if(pData[i][pThirst] > 75)
			{
				format(string, sizeof(string), "~g~%d%%", pData[i][pThirst]);
				PlayerTextDrawSetString(i, HungerandThirstTD[i][5], string);
			}
			if(pData[i][pThirst] > 26)
			{
				format(string, sizeof(string), "~y~%d%%", pData[i][pThirst]);
				PlayerTextDrawSetString(i, HungerandThirstTD[i][5], string);
			}
			if(pData[i][pThirst] < 26)
			{
				format(string, sizeof(string), "~r~%d%%", pData[i][pThirst]);
				PlayerTextDrawSetString(i, HungerandThirstTD[i][5], string);
			}

		   	if(++pData[i][pHungerTimer] >= 180 && pData[i][pHunger] > 0) // 3 minutes
			{
				pData[i][pHungerTimer] = 0;
				pData[i][pHunger] -= 1;
				if(pData[i][pHunger] == 10)
				{
					SendMessage(i, COLOR_YELLOW, "You need to eat. You can die due to starvation");
				}
				if(pData[i][pHunger] == 1) // 2 minutes
				{
					SendMessage(i, COLOR_GREY, "You fall unconcious due to starvation.");
					SetPlayerHealth(i, 0);
				}
			}
			if(++pData[i][pThirstTimer] >= 120 && pData[i][pThirst] > 0) // 2 minutes
			{
				pData[i][pThirstTimer] = 0;
				pData[i][pThirst] -= 1;

				if(pData[i][pThirst] == 10)
				{
					SendMessage(i, COLOR_YELLOW, "You need to drink. You can die due to thirst!");
				}
   				if(pData[i][pThirst] == 1) // 2 minutes
				{
					SendMessage(i, COLOR_GREY, "You fall unconcious due to thirst.");
     				SetPlayerHealth(i, 0);
				}
			}
			if (pData[i][pSpeedTime] > 0)
			{
			    pData[i][pSpeedTime]--;
			}
		    if(pData[i][pShipment] >= 0)
			{
				if((GetPlayerState(i) == PLAYER_STATE_DRIVER) && (GetVehicleModel(GetPlayerVehicleID(i)) != 414 && GetVehicleModel(GetPlayerVehicleID(i)) != 498))
				{
			    	pData[i][pShipment] = -1;
			    	SCM(i, COLOR_SYNTAX, "Shipment cancelled. You went into another vehicle.");
				}
		    }

		    if(pData[i][pPizzas] > 0 && GetPlayerState(i) == PLAYER_STATE_DRIVER)
			{
				if(GetVehicleModel(GetPlayerVehicleID(i)) == 586)
				{
				    if(pData[i][pPizzaTime] < 90)
					{
						pData[i][pPizzaTime]++;
					}
				}
				else
				{
				    pData[i][pPizzas] = 0;
				    pData[i][pCP] = 0;

				    DisablePlayerCheckpoint(i);
				    SCM(i, SERVER_COLOR, "delivery cancelled. You went into another vehicle.");
				}
			}
			else if (pData[i][pGraffiti] != -1 && pData[i][pGraffitiTime] > 0)
			{
				if (Graffiti_Nearest(i) != pData[i][pGraffiti])
				{
				    pData[i][pGraffiti] = -1;
            	    pData[i][pGraffitiTime] = 0;
				}
				else
				{
	    	        pData[i][pGraffitiTime]--;

		            if (pData[i][pGraffitiTime] < 1)
					{
                        new str[500];
					    strunpack(str, pData[i][pGraffitiText]);
	        	        format(GraffitiData[pData[i][pGraffiti]][graffitiText], 64, str);

					    GraffitiData[pData[i][pGraffiti]][graffitiColor] = pData[i][pGraffitiColor];

						Graffiti_Refresh(pData[i][pGraffiti]);
					    Graffiti_Save(pData[i][pGraffiti]);

					    ClearAnimations(i, 1);
						SendProximityMessage(i, 30.0, SERVER_COLOR, "**{C2A2DA} %s puts their can of spray paint away.", GetRPName(i));

		   	            pData[i][pGraffiti] = -1;
		   	            pData[i][pGraffitiTime] = 0;
					}
				}
			}
		    if(!pData[i][pToggleTextdraws])
		    {
			    if(pData[i][pGPSOn])
				{
				    if(GetPlayerState(i) == PLAYER_STATE_SPECTATING)
					{
				        HideGPSTextdraw(i);
					}
				    else {
						new Float:rz;
						if(IsPlayerInAnyVehicle(i)) {
							GetVehicleZAngle(GetPlayerVehicleID(i), rz);
						}
						else {
							GetPlayerFacingAngle(i, rz);
						}

						if(rz >= 348.75 || rz < 11.25) PlayerTextDrawSetString(i, pData[i][pText][1], "N");
						else if(rz >= 326.25 && rz < 348.75) PlayerTextDrawSetString(i, pData[i][pText][1], "NNE");
						else if(rz >= 303.75 && rz < 326.25) PlayerTextDrawSetString(i, pData[i][pText][1], "NE");
						else if(rz >= 281.25 && rz < 303.75) PlayerTextDrawSetString(i, pData[i][pText][1], "ENE");
						else if(rz >= 258.75 && rz < 281.25) PlayerTextDrawSetString(i, pData[i][pText][1], "E");
						else if(rz >= 236.25 && rz < 258.75) PlayerTextDrawSetString(i, pData[i][pText][1], "ESE");
						else if(rz >= 213.75 && rz < 236.25) PlayerTextDrawSetString(i, pData[i][pText][1], "SE");
						else if(rz >= 191.25 && rz < 213.75) PlayerTextDrawSetString(i, pData[i][pText][1], "SSE");
						else if(rz >= 168.75 && rz < 191.25) PlayerTextDrawSetString(i, pData[i][pText][1], "S");
						else if(rz >= 146.25 && rz < 168.75) PlayerTextDrawSetString(i, pData[i][pText][1], "SSW");
						else if(rz >= 123.25 && rz < 146.25) PlayerTextDrawSetString(i, pData[i][pText][1], "SW");
						else if(rz >= 101.25 && rz < 123.25) PlayerTextDrawSetString(i, pData[i][pText][1], "WSW");
						else if(rz >= 78.75 && rz < 101.25) PlayerTextDrawSetString(i, pData[i][pText][1], "W");
						else if(rz >= 56.25 && rz < 78.75) PlayerTextDrawSetString(i, pData[i][pText][1], "WNW");
						else if(rz >= 33.75 && rz < 56.25) PlayerTextDrawSetString(i, pData[i][pText][1], "NW");
						else if(rz >= 11.5 && rz < 33.75) PlayerTextDrawSetString(i, pData[i][pText][1], "NNW");
						PlayerTextDrawSetString(i, pData[i][pText][0], GetPlayerZoneName(i));
					}
				}
				if(pData[i][pWatchOn])
				{
					if(GetPlayerState(i) == PLAYER_STATE_SPECTATING)
						TextDrawHideForPlayer(i, TimeTD);
					else
					    TextDrawShowForPlayer(i, TimeTD);
				}
				if(!pData[i][pToggleHUD])
				{
					if(GetPlayerState(i) == PLAYER_STATE_SPECTATING)
					{
						PlayerTextDrawHide(i, pData[i][pText][3]);
					    PlayerTextDrawHide(i, pData[i][pText][4]);
					}
					else
					{
					    PlayerTextDrawShow(i, pData[i][pText][3]);
					    PlayerTextDrawShow(i, pData[i][pText][4]);
					}
				}
			}

		    if(NetStats_PacketLossPercent(i) > 20.0 && gettime() - pData[i][pLastDesync] > 120)
	        {
	            SCM(i, COLOR_AQUA, "[SERVER]:"WHITE" You are desynced. Please re-log or check your router's speed.");
	            pData[i][pLastDesync] = gettime();
	        }

		    if(pData[i][pSpectating] != INVALID_PLAYER_ID)
		    {
		        if(GetPlayerInterior(i) != GetPlayerInterior(pData[i][pSpectating])) SetPlayerInterior(i, GetPlayerInterior(pData[i][pSpectating]));
		        if(GetPlayerVirtualWorld(i) != GetPlayerVirtualWorld(pData[i][pSpectating])) SetPlayerVirtualWorld(i, GetPlayerVirtualWorld(pData[i][pSpectating]));
		    }
			if(pData[i][pAwaitingClothing])
			{
			    SetPlayerClothing(i);
			}
			if(pData[i][pDraggedBy] != INVALID_PLAYER_ID)
			{
	    		TeleportToPlayer(i, pData[i][pDraggedBy]);
			}
			if(pData[i][pDonator] > 0 && gettime() > pData[i][pVIPTime])
			{
			    pData[i][pDonator] = 0;
			    pData[i][pVIPTime] = 0;
			    pData[i][pSecondJob] = -1;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vippackage = 0, viptime = 0, secondjob = -1 WHERE uid = %i", pData[i][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SCM(i, COLOR_LIGHTRED, "Your donator subscription has expired. You are no longer a VIP.");
			}
			if(pData[i][pCarLicense] > 0 && gettime() > pData[i][pCarLicenseTime])
			{
			    pData[i][pCarLicense] = 0;
			    pData[i][pCarLicenseTime] = 0;
			    
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET carLicense = 0, carlicensetime = 0 WHERE uid = %i", pData[i][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SCM(i, COLOR_LIGHTRED, "Your Car License has expired. Renew it at DMV.");
			}
			if(pData[i][pWeaponLicense] > 0 && gettime() > pData[i][pWeaponLicenseTime])
			{
			    pData[i][pWeaponLicense] = 0;
			    pData[i][pWeaponLicenseTime] = 0;
			    
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gunLicense = 0, gunlicensetime = 0 WHERE uid = %i", pData[i][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SCM(i, COLOR_LIGHTRED, "Your Weapon License has expired. You may renew it at Police Department.");
			}
			if(pData[i][pDonator] < 1 && pData[i][pSecondJob] != JOB_NONE)
			{
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET secondjob = -1 WHERE uid = %i", pData[i][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    pData[i][pSecondJob] = JOB_NONE;
			    SCM(i, COLOR_LIGHTRED, "Your second job has been removed as you don't have a Donator subscription.");
			}
			if(pData[i][pBandage])
			{
				new
				    Float:health;

				GetPlayerHealth(i, health);

				if((health + 5.0) > 100.0)
				{
				    SetPlayerHealth(i, 100.0);
				    pData[i][pBandage] = 0;
				    pData[i][pBrokenLeg] = 0;
				}
				else
				{
				    SetPlayerHealth(i, health + 1.0);
				    pData[i][pBrokenLeg] = 0;
				}
			}
			if(pData[i][pTazedTime] > 0)
			{
			    pData[i][pTazedTime]--;

			    if(!pData[i][pTazedTime])
			    {
			        ClearAnimations(i, 1);
			        TogglePlayerControllable(i, 1);
			    }
			}
			if(pData[i][pFishTime] > 0)
			{
			    pData[i][pFishTime]--;

				if(!IsPlayerAtFishingPlace(i))
				{
				    ClearAnimations(i, 1);
				    RemovePlayerAttachedObject(i, 9);
				    pData[i][pFishTime] = 0;
				}
			    else if(pData[i][pFishTime] <= 0 && IsPlayerAtFishingPlace(i))
			    {
	          		new rand = Random(1, 100);

					if(1 <= rand <= 20)
	    			{
	 	   				SCM(i, COLOR_SYNTAX, "You reeled in your line and caught nothing...");
					}
					else if(21 <= rand <= 30)
					{
	    				new amount = 10 + random(50);

		    			SM(i, COLOR_AQUA, "You reeled in your line and caught a used wallet with $%i inside.", amount);
						GivePlayerCash(i, amount);
					}
					else if(98 <= rand <= 99)
					{
					    new amount = random(10) + 100;

					    SM(i, COLOR_AQUA, "You reeled in your line and caught a rare 18th century coin valued at $%i!", amount);
						GivePlayerCash(i, amount);
					}
					else
					{
					    new weight;

					    if(pData[i][pUsedBait])
						{
							weight = random(15);
					    }
						else
						{
					        weight = random(10);
	    		        }

	    		        SM(i, COLOR_AQUA, "You reeled in your line and caught a fish weighing %i kg!", weight);
						pData[i][pFishWeight] += weight;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fishweight = %i WHERE uid = %i", pData[i][pFishWeight], pData[i][pID]);
						mysql_tquery(connectionID, queryBuffer);

						IncreaseJobSkill(i, JOB_FISHERMAN);

	    				if(GetJobLevel(i, JOB_FISHERMAN) < 5)
	    				{
	        				if(pData[i][pFishingSkill] < 50) {
	        					SM(i, COLOR_YELLOW, "You need to catch %i more fish in order to level up.", 50 - pData[i][pFishingSkill]);
	        				} else if(pData[i][pFishingSkill] < 100) {
	        					SM(i, COLOR_YELLOW, "You need to catch %i more fish in order to level up.", 100 - pData[i][pFishingSkill]);
	        				} else if(pData[i][pFishingSkill] < 200) {
	        					SM(i, COLOR_YELLOW, "You need to catch %i more fish in order to level up.", 200 - pData[i][pFishingSkill]);
            				} else if(pData[i][pFishingSkill] < 350) {
	        					SM(i, COLOR_YELLOW, "You need to catch %i more fish in order to level up.", 350 - pData[i][pFishingSkill]);
							}
						}
						else
						{
							//
						}

						if(GetJobLevel(i, JOB_FISHERMAN) == 1)
						{
							if(pData[i][pFishWeight] >= 50)
		    		        {
		    		            SCM(i, COLOR_YELLOW, "You have too much fish. You can continue fishing once you sell your load.");
		    		        }
						}
						if(GetJobLevel(i, JOB_FISHERMAN) == 2)
						{
							if(pData[i][pFishWeight] >= 100)
		    		        {
		    		            SCM(i, COLOR_YELLOW, "You have too much fish. You can continue fishing once you sell your load.");
		    		        }
						}
						if(GetJobLevel(i, JOB_FISHERMAN) == 3)
						{
							if(pData[i][pFishWeight] >= 150)
		    		        {
		    		            SCM(i, COLOR_YELLOW, "You have too much fish. You can continue fishing once you sell your load.");
		    		        }
						}
						if(GetJobLevel(i, JOB_FISHERMAN) == 4)
						{
							if(pData[i][pFishWeight] >= 200)
		    		        {
		    		            SCM(i, COLOR_YELLOW, "You have too much fish. You can continue fishing once you sell your load.");
		    		        }
						}
						if(GetJobLevel(i, JOB_FISHERMAN) == 5)
						{
							if(pData[i][pFishWeight] >= 250)
		    		        {
		    		            SCM(i, COLOR_YELLOW, "You have too much fish. You can continue fishing once you sell your load.");
		    		        }
						}
					}

					ClearAnimations(i, 1);
					RemovePlayerAttachedObject(i, 9);
			    }
			}
			if(pData[i][pJailType] > 0)
			{
			    pData[i][pJailTime]--;

			    if(pData[i][pJailTime] <= 0)
			    {
			        ResetPlayerWeaponsEx(i);

					if(!pData[i][pJailBreak])
					{
						SCM(i, COLOR_GREY2, "Your jail sentence has expired.");
						SetPlayerPos(i, 1544.4407, -1675.5522, 13.5584);
						SetPlayerFacingAngle(i, 90.0000);
						SetPlayerInterior(i, 0);
						SetPlayerVirtualWorld(i, 0);
						SetCameraBehindPlayer(i);
					}
					else
					{
						SCM(i, COLOR_GREY2, "Your jail sentence has expired. You have been wanted due to your jailbreak sentence.");
					}

					PlayerTextDrawHide(i, customHUD[i][1]);
					
					pData[i][pJailType] = 0;
			        pData[i][pJailTime] = 0;
				}
			}
			if(pData[i][pBedType] > 0)
			{
			    pData[i][pBedTime]--;

			    if(pData[i][pBedTime] <= 0)
			    {
			        ResetPlayerWeaponsEx(i);

			        SCM(i, COLOR_GREY2, "You're now free to go.");

					pData[i][pBedType] = 0;
			        pData[i][pBedTime] = 0;
				}
			}
			if(pData[i][pHospital] && pData[i][pHospitalTime])
			{
				pData[i][pHospitalTime]--;

				if(pData[i][pHospitalTime] == 0)
				{
					new rand = random(sizeof(hospitalspawns));
					SetFreezePos(i, hospitalspawns[rand][0], hospitalspawns[rand][1], hospitalspawns[rand][2]);
					SetPlayerFacingAngle(i, hospitalspawns[rand][3]);
					SetPlayerInterior(i, 1);
					SetPlayerVirtualWorld(i, pData[i][pHospitalType]);
					SetCameraBehindPlayer(i);

					if(!enabledpurge) {
						GivePlayerCash(i, -150);
						SCM(i, COLOR_SYNTAX, "Discharged we detuct you $150");
						SCM(i, COLOR_SYNTAX, "Discharged we deduct you $150.");
						if(pData[i][pDelivered])
						{
							SCM(i, COLOR_DOCTOR, "You have been billed $1500 for your stay. Your items is safed!");
							pData[i][pDelivered] = 0;
						}
						else
						{
							SCM(i, COLOR_DOCTOR, "You have been billed $1500 for your stay. Your illegal items have been confiscated by staff.");
							SCM(i, COLOR_LIGHTRED, "(( You have lost 30 minutes of your memory. ))");
						}
					} else SCM(i, COLOR_DOCTOR, "You have been discharged for free for the purge event. (( Type /purgeme to refill your weapons. ))");

					new hospital[32];
					switch(pData[i][pHospitalType])
					{
					    case HOSPITAL_COUNTY: strcat(hospital, "All Saints General");
					    case HOSPITAL_ALLSAINTS: strcat(hospital, "County General");
					}

					UpdateDynamic3DTextLabelText(InjuredLabel[i], COLOR_DOCTOR, "");

					SetPlayerHealth(i, pData[i][pSpawnHealth]);
					SetScriptArmour(i, pData[i][pSpawnArmor]);
					//pData[i][pHunger] = 25; // Hunger
					//pData[i][pHungerTimer] = 0;
					//pData[i][pThirst] = 25; // Thirst
					//pData[i][pThirstTimer] = 0;
					pData[i][pDirtyCash] = 0;
					
					// CCRP
					pData[i][pBrokenLeg] = 0;
                    pData[i][pBandage] = 0;
					pData[i][pFood] = 0;
					pData[i][pDrink] = 0;
					pData[i][pHospital] = 0;
		            pData[i][pHospitalTime] = 0;
		        }
			}
			if(pData[i][pRefuel] != INVALID_VEHICLE_ID)
			{
				new gasid = GetNearbyGas(i);
			    pData[i][pRefuelAmount] += 2;
			    vehicleFuel[pData[i][pRefuel]]++;
				GasCap[i]++;

				if(GasolineInfo[gasid][gsContents] == 1)
				{
					SCM(i, COLOR_WHITE, "Oh no... we left out of gas. Please ask some of our truckers to fill in this gas station.");
					new price = pData[i][pRefuel]+GasolineInfo[gasid][gsPrice];
			        AddPointMoney(POINT_FUEL, price);
			        GivePlayerCash(i, -price);
					GasolineInfo[gasid][gsContents] -= GasCap[i];

			        pData[i][pRefuel] = INVALID_VEHICLE_ID;
			        pData[i][pRefuelAmount] = 0;
					GasCap[i] = 0;
					ReloadGasoline(gasid);
				}
			    else if(vehicleFuel[pData[i][pRefuel]] >= 100 || pData[i][pCash] < pData[i][pRefuelAmount] || GetVehicleParams(pData[i][pRefuel], VEHICLE_ENGINE))
			    {
					new price = pData[i][pRefuel]+GasolineInfo[gasid][gsPrice];
			        AddPointMoney(POINT_FUEL, pData[i][pRefuelAmount]);
			        GivePlayerCash(i, -price);
			        SM(i, COLOR_AQUA, "You've refilled your vehicle's gas tank for "SVRCLR"$%i{CCFFFF}.", price);
					GasolineInfo[gasid][gsContents] -= GasCap[i];

			        pData[i][pRefuel] = INVALID_VEHICLE_ID;
			        pData[i][pRefuelAmount] = 0;
					GasCap[i] = 0;
					ReloadGasoline(gasid);
			    }
			}
			if(pData[i][pMiningTime] > 0)
			{
			    pData[i][pMiningTime]--;

			    if(pData[i][pMiningTime] <= 0)
				{
					if(IsPlayerInMiningArea(i) && GetPlayerState(i) == PLAYER_STATE_ONFOOT && !pData[i][pTazedTime] && !pData[i][pCuffed])
				    {
				        new number = random(350) + 1;

				        pData[i][pCP] = CHECKPOINT_MINING;

		                SetPlayerAttachedObject(i, 9, 3929, 1, 0.242999, 0.324000, 0.012000, -17.200078, 20.699993, 9.800034, 0.579999, 0.617999, 0.676999);
						SetPlayerSpecialAction(i, SPECIAL_ACTION_CARRY);

						ApplyAnimation(i, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
						SetPlayerCheckpoint(i, -962.6600, -2157.6577, 35.1390, 2.0);

						if(1 <= number <= 3)
						{
						    pData[i][pMiningRock] = 2;
						    SCM(i, COLOR_AQUA, "You have dug up an old quality stone. Send it to our boss.");
						}
						else if(number == 6)
						{
						    SCM(i, COLOR_AQUA, "You have dug up a 1980's stone. Send it to our boss.");
						    pData[i][pMiningRock] = 3;
						}
						else if(number == 2)
						{
						    SCM(i, COLOR_AQUA, "You have dug up a quality metal. Send it to our boss.");
						    pData[i][pMiningRock] = 4;
						}
						else if(number == 9 && !pData[i][pRareTime])
						{
						    SCM(i, COLOR_AQUA, "Woah, this looks oddly weird to find in the middle of a city, lets show it to the boss.");
						    pData[i][pMiningRock] = 5;
						}
						else
						{
						    pData[i][pMiningRock] = 1;
	                    	SCM(i, COLOR_AQUA, "You have dug up an ordinary stone. Send it to our boss.");
						}
					}
					else
					{
					    RemovePlayerAttachedObject(i, 9);
					    ClearAnimations(i, 1);
					}
				}
			}
			if(pData[i][pConstructionTime] > 0)
			{
			    pData[i][pConstructionTime]--;

			    if(pData[i][pConstructionTime] <= 0)
				{
					if(IsPlayerInConstructionArea(i) && GetPlayerState(i) == PLAYER_STATE_ONFOOT && !pData[i][pTazedTime] && !pData[i][pCuffed])
				    {
				        new number = random(20) + 1;

				        pData[i][pCP] = CHECKPOINT_CONSTRUCTION;

		                SetPlayerAttachedObject(i, 9, 3931, 1, 0.242999, 0.324000, 0.012000, -17.200078, 20.699993, 9.800034, 0.579999, 0.617999, 0.676999);
						SetPlayerSpecialAction(i, SPECIAL_ACTION_CARRY);

						ApplyAnimation(i, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
						SetPlayerCheckpoint(i, 1228.8248, -1262.4565, 14.4220, 2.0);

						if(1 <= number <= 3)
						{
						    pData[i][pConstruction] = 2;
						    SCM(i, COLOR_AQUA, "Drop it to the checkpoint");
						}
						else if(number == 6)
						{
						    SCM(i, COLOR_AQUA, "Drop it to the checkpoint");
						    pData[i][pConstruction] = 3;
						}
						else if(number == 2)
						{
						    SCM(i, COLOR_AQUA, "Drop it to the checkpoint");
						    pData[i][pConstruction] = 4;
						}
						else if(number == 9)
						{
						    SCM(i, COLOR_AQUA, "Drop it to the checkpoint");
						    pData[i][pConstruction] = 5;
						}
						else
						{
						    pData[i][pConstruction] = 1;
	                    	SCM(i, COLOR_AQUA, "Drop it to the checkpoint");
						}
					}
					else
					{
					    RemovePlayerAttachedObject(i, 9);
					    ClearAnimations(i, 1);
					}
				}
			}
			if(pData[i][pTaxiPassenger] != INVALID_PLAYER_ID)
			{
			    if((GetVehicleModel(GetPlayerVehicleID(i)) != 420 && GetVehicleModel(GetPlayerVehicleID(i)) != 438) || !IsPlayerInVehicle(pData[i][pTaxiPassenger], GetPlayerVehicleID(i)) || pData[i][pTaxiFare] == 0 || pData[pData[i][pTaxiPassenger]][pCash] < pData[i][pTaxiBill])
			    {
			        CancelTaxiRide(i);
			    }
			    else
			    {
			        pData[i][pTaxiTime]++;

			        if(pData[i][pTaxiTime] >= 15)
			        {
			            pData[i][pTaxiTime] = 0;
			            pData[i][pTaxiBill] += pData[i][pTaxiFare];
					}

					format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~g~Taxi Meter:~w~ $%i", pData[i][pTaxiBill]);
					GameTextForPlayer(i, string, 3000, 3);
			    }
			}
			if(pData[i][pMuted] > 0)
			{
			    pData[i][pMuted]--;

			    if(pData[i][pMuted] <= 0)
			    {
			        SCM(i, SERVER_COLOR, "**"WHITE" You are no longer muted.");
				}
			}
			if(pData[i][pVendorTime] > 0)
			{
			    pData[i][pVendorTime]--;
			}
			if(pData[i][pBarTime] > 0)
			{
			    pData[i][pBarTime]--;
			}
			if(pData[i][pSpamTime] > 0)
			{
			    pData[i][pSpamTime]--;
			}
			if(pData[i][pVehicleCount] > 0)
			{
			    pData[i][pVehicleCount]--;
			}
			if(pData[i][pMechanicCall] > 0)
			{
			    pData[i][pMechanicCall]--;
			}
			if(pData[i][pTaxiCall] > 0)
			{
			    pData[i][pTaxiCall]--;
			}
			if(pData[i][pEmergencyCall] > 0)
			{
			    pData[i][pEmergencyCall]--;
			}
			if(pData[i][pCourierCooldown] > 0)
			{
			    pData[i][pCourierCooldown]--;
			}
   			if(pData[i][pPizzaCooldown] > 0)
			{
       			pData[i][pPizzaCooldown]--;
			}
			if(pData[i][pRareTime] > 0)
			{
		    	pData[i][pRareTime]--;
			}
   			if(pData[i][pDeathCooldown] > 0)
			{
       			pData[i][pDeathCooldown]--;
			}
			if(pData[i][pDetectiveCooldown] > 0)
			{
       			pData[i][pDetectiveCooldown]--;
			}
			if(pData[i][pLootTime] > 0)
			{
			    pData[i][pLootTime]--;

			    if(IsPlayerInBankRobbery(i) && pData[i][pLootTime] <= 0)
			    {
			        new amount = random(1000) + 1000;

			        ClearAnimations(i, 1);

			        pData[i][pRobCash] += amount;
			        pData[i][pCP] = CHECKPOINT_ROBBERY;
			        pData[i][pLastLoad] = gettime();

					format(string, sizeof(string), "~g~+$%i", amount);
					GameTextForPlayer(i, string, 5000, 1);

			        SM(i, COLOR_AQUA, "You have looted $%i and now have $%i. You can keep looting or deliver the cash to the "SVRCLR"marker{CCFFFF}.", amount, pData[i][pRobCash]);
					SetPlayerCheckpoint(i, 1465.1348, -1010.5063, 26.8438, 3.0);
			    }
				else if((pData[i][pRobbingBiz] >= 0 && pData[i][pRobbingBiz] == GetInsideBusiness(i)) && pData[i][pLootTime] <= 0)
			    {
					if(pData[i][pRobCash] >= BusinessInfo[pData[i][pRobbingBiz]][bCash])
					{
						SCM(i, COLOR_GREY2, "Your pockets can't hold anymore!");
						pData[i][pLootTime] = 0;
					} else {
						pData[i][pLootTime] = 5;
						SCM(i, COLOR_SYNTAX, "Looting business vault...");
					}

			        new amount = random(500) + 500;

			        //ClearAnimations(i, 1);

			        pData[i][pRobCash] += amount;
			        pData[i][pCP] = CHECKPOINT_ROBBERYBIZ;
			        pData[i][pLastLoad] = gettime();

					format(string, sizeof(string), "~g~+P%i", amount);
					GameTextForPlayer(i, string, 5000, 1);

			        SM(i, COLOR_AQUA, "You have looted P%i and now have P%i. You can keep looting or deliver the cash to the "SVRCLR"marker{CCFFFF}.", amount, pData[i][pRobCash]);
					SetPlayerCheckpoint(i, BusinessInfo[pData[i][pRobbingBiz]][bPosX], BusinessInfo[pData[i][pRobbingBiz]][bPosY], BusinessInfo[pData[i][pRobbingBiz]][bPosZ], 3.0);
			    }
				else if((pData[i][pRobbingHouse] >= 0 && pData[i][pRobbingHouse] == GetInsideHouse(i)) && pData[i][pLootTime] <= 0)
			    {
					if(pData[i][pRobCash] >= HouseInfo[pData[i][pRobbingHouse]][hCash])
					{
						SCM(i, COLOR_GREY2, "Your pockets can't hold anymore!");
						pData[i][pLootTime] = 0;
					} else {
						pData[i][pLootTime] = 5;
						SCM(i, COLOR_SYNTAX, "Looting house vault...");
					}

			        new amount = random(500) + 500;

			        //ClearAnimations(i, 1);

			        pData[i][pRobCash] += amount;
			        pData[i][pCP] = CHECKPOINT_ROBBERYHOUSE;
			        pData[i][pLastLoad] = gettime();

					format(string, sizeof(string), "~g~+P%i", amount);
					GameTextForPlayer(i, string, 5000, 1);

			        SM(i, COLOR_AQUA, "You have looted P%i and now have P%i. You can keep looting or deliver the cash to the "SVRCLR"marker{CCFFFF}.", amount, pData[i][pRobCash]);
					SetPlayerCheckpoint(i, HouseInfo[pData[i][pRobbingHouse]][hPosX], HouseInfo[pData[i][pRobbingHouse]][hPosY], HouseInfo[pData[i][pRobbingHouse]][hPosZ], 3.0);
			    }
			}
			if(pData[i][pFindTime] > 0)
			{
			    pData[i][pFindTime]--;

			    if(pData[i][pFindTime] == 0)
			    {
			        SetPlayerMarkerForPlayer(i, pData[i][pFindPlayer], GetPlayerColor(pData[i][pFindPlayer]));
					pData[i][pFindPlayer] = INVALID_PLAYER_ID;
				}
			}
			if((pData[i][pToggleMusic]) || (pData[i][pBoomboxListen] != INVALID_PLAYER_ID && GetNearbyBoombox(i) != pData[i][pBoomboxListen]))
			{
				pData[i][pBoomboxListen] = INVALID_PLAYER_ID;

				if(pData[i][pStreamType] == MUSIC_BOOMBOX)
				{
				    StopAudioStreamForPlayer(i);
				    pData[i][pStreamType] = MUSIC_NONE;
				}
			}
			if((!pData[i][pToggleMusic]) && ((boomboxid = GetNearbyBoombox(i)) != INVALID_PLAYER_ID && pData[i][pBoomboxListen] != boomboxid))
			{
			    pData[i][pBoomboxListen] = boomboxid;

			    if(pData[i][pStreamType] == MUSIC_NONE)
			    {
			        PlayAudioStreamForPlayer(i, pData[boomboxid][pBoomboxURL]);
			        pData[i][pStreamType] = MUSIC_BOOMBOX;
			    }
			}
            if(pData[i][pPickPlant] != INVALID_PLAYER_ID)
            {
                pData[i][pPickTime]--;

                if(pData[i][pPickTime] <= 0)
                {
                    new planterid = pData[i][pPickPlant];

                    if(!IsPlayerConnected(planterid) || !pData[planterid][pLogged] || !pData[planterid][pPotPlanted])
                    {
                        SCM(i, COLOR_SYNTAX, "This plant is no longer available to pick.");
					}
					else if(!IsPlayerInRangeOfPoint(i, 3.0, pData[planterid][pPotX], pData[planterid][pPotY], pData[planterid][pPotZ]))
					{
					    SCM(i, COLOR_SYNTAX, "Picking failed. You left the area of the plant.");
					}
					else if(GetPlayerSpecialAction(i) != SPECIAL_ACTION_DUCK)
					{
					    SCM(i, COLOR_SYNTAX, "Picking failed. You must stay crouched when picking a plant.");
					}
					else
					{
					    pData[i][pPot] += pData[planterid][pPotGrams];

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", pData[i][pPot], pData[i][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SM(i, COLOR_AQUA, "You have harvested %i grams of pot from this plant.", pData[planterid][pPotGrams]);
					    DestroyPotPlant(planterid);
					}

					pData[i][pPickPlant] = INVALID_PLAYER_ID;
					pData[i][pPickTime] = 0;
				}
			}
			if(pData[i][pCookMeth] > 0)
			{
                pData[i][pCookTime]--;

                if(pData[i][pCookTime] <= 0)
                {
                    if(!IsPlayerInRangeOfPoint(i, 10.0, 333.5727, 1121.8536, 1083.8903))
                    {
                        SCM(i, COLOR_SYNTAX, "Cooking failed. You have left the cooking spot.");
                        ResetCooking(i);
                    }
                    else if(pData[i][pEphedrine] <= 0)
                    {
                        SCM(i, COLOR_SYNTAX, "Cooking failed. You have ran out of ephedrine.");
                        ResetCooking(i);
					}
                    else if(pData[i][pBakingSoda] <= 0)
                    {
                        SCM(i, COLOR_SYNTAX, "Cooking failed. You have ran out of baking soda.");
                        ResetCooking(i);
					}
					else if(pData[i][pMeth] + 2 > GetPlayerCapacity(CAPACITY_METH))
                    {
                        SCM(i, COLOR_SYNTAX, "Cooking failed. You have ran out of inventory space for meth.");
                        ResetCooking(i);
					}
					else
					{
						SCM(i, COLOR_SYNTAX, "+2 grams of meth!");

						pData[i][pEphedrine] -= 1;
						pData[i][pMeth] += 2;
						pData[i][pCookGrams] += 2;

						if((pData[i][pCookGrams] % 4) == 0)
						{
						    pData[i][pMuriaticAcid]--;
						    pData[i][pBakingSoda]--;
						}

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ephedrine = %i, meth = %i, muriaticacid = %i, bakingsoda = %i WHERE uid = %i", pData[i][pEphedrine], pData[i][pMeth], pData[i][pMuriaticAcid], pData[i][pBakingSoda], pData[i][pID]);
						mysql_tquery(connectionID, queryBuffer);

						if(!pData[i][pEphedrine])
						{
						    SM(i, COLOR_LIGHTRED, "You ran out of ephedrine therefore ending your cookoff. You made %i grams of meth from %i grams of ephedrine.", pData[i][pCookGrams], pData[i][pCookGrams] / 2);
							ResetCooking(i);
					    }
					    else if(!pData[i][pMuriaticAcid])
						{
						    SM(i, COLOR_LIGHTRED, "You ran out of muriatic acid therefore ending your cookoff. You made %i grams of meth from %i grams of ephedrine.", pData[i][pCookGrams], pData[i][pCookGrams] / 2);
							ResetCooking(i);
					    }
       					else if(!pData[i][pBakingSoda])
						{
						    SM(i, COLOR_LIGHTRED, "You ran out of baking soda therefore ending your cookoff. You made %i grams of meth from %i grams of ephedrine.", pData[i][pCookGrams], pData[i][pCookGrams] / 2);
							ResetCooking(i);
					    }
					    else if(pData[i][pMeth] >= GetPlayerCapacity(CAPACITY_METH))
	                    {
	                        SM(i, COLOR_LIGHTRED, "You ran out of inventory space for meth therefore ending your cookoff. You made %i grams of meth from %i grams of ephedrine.", pData[i][pCookGrams], pData[i][pCookGrams] / 2);
							ResetCooking(i);
					    }
					    else
					    {
					        pData[i][pCookTime] = 15;
						}
                    }
                }
			}
			if(pData[i][pDrugsUsed] >= 4)
			{
			    pData[i][pDrugsTime]--;

			    if(pData[i][pDrugsTime] <= 0)
			    {
			        SCM(i, SERVER_COLOR, "**"WHITE" You are no longer stoned.");
			        SetPlayerWeather(i, gWeather);

					SetPlayerTime(i, gWorldTime, 0);

			        pData[i][pDrugsUsed] = 0;
			        pData[i][pDrugsTime] = 0;
			    }
			    else
			    {
			        SetPlayerWeather(i, -66);
			        SetPlayerTime(i, 12, 0);
				}
			}
			if(pData[i][pPoisonTime] > 0)
			{
			    new
			        Float:health;
			    GetPlayerHealth(i, health);
			    SetPlayerHealth(i, health - 3.0 < 1.0 ? 1.0 : health - 3.0);
			    pData[i][pPoisonTime]--;
			}

			AnticheatCheck(i);

			//GetPlayerHealth(i, pData[i][pHealth]);

			if(pData[i][pGang] >= 0 && !pData[i][pBandana])
			{
				new id, gang = pData[i][pGang], color;
				if(GangInfo[gang][gColor] == -1 || GangInfo[gang][gColor] == -256)
				{
					color = 0xC8C8C8FF;
				}
				else
				{
					color = GangInfo[gang][gColor];
				}
				if((id = GetNearbyTurf(i)) >= 0 && TurfInfo[id][tTime] == 0 && TurfInfo[id][tCapturer] != INVALID_PLAYER_ID)
				{
					format(string, sizeof(string), "{%06x}%s\n"WHITE"%s", color >>> 8, GangInfo[gang][gName],GangRanks[gang][pData[i][pGangRank]]);
					UpdateDynamic3DTextLabelText(PlayerLabel[i], COLOR_WHITE, string);
					pData[i][pBandana] = 1;
					SendClientMessage(i, COLOR_WHITE, "Your bandana was enabled automatically as you entered a turf in an active war.");
				}
				if((id = GetNearbyPoint(i, 30.0)) >= 0 && PointInfo[id][pTime] == 0 && PointInfo[id][pCapturer] != INVALID_PLAYER_ID)
				{
					format(string, sizeof(string), "{%06x}%s\n"WHITE"%s", color >>> 8, GangInfo[gang][gName],GangRanks[gang][pData[i][pGangRank]]);
					UpdateDynamic3DTextLabelText(PlayerLabel[i], COLOR_WHITE, string);
					pData[i][pBandana] = 1;
					SendClientMessage(i, COLOR_WHITE, "Your bandana was enabled automatically as you are in range of an active point.");
				}
			}
			if(!pData[i][pBackup] && !IsPlayerBeingFound(i))
			{
				// Nametag colors gang colors bandana badge
				if(pData[i][pJoinedEvent] && EventInfo[eType] == 2)
				{
				    SetPlayerColor(i, (pData[i][pEventTeam] == RED_TEAM) ? (0xFF000000) : (0x0000FF00));
				}
				else if(pData[i][pJailType] == 2)
				{
				    SetPlayerColor(i, 0xF4A41900);
				}
				else if(PlayerHasJob(i, JOB_TAXIDRIVER) && pData[i][pTaxiFare] > 0)
				{
				    SetPlayerColor(i, 0xFFD70000);
				}
				else if(pData[i][pFaction] >= 0 && pData[i][pDuty] && FactionInfo[pData[i][pFaction]][fType] != FACTION_HITMAN)
				{
					SetPlayerColor(i, FactionInfo[pData[i][pFaction]][fColor] & ~0xff);
				}
				else if(pData[i][pGang] >= 0 && pData[i][pBandana])
				{
				    //SetPlayerColor(i, GangInfo[pData[i][pGang]][gColor] & ~0xff);
				}
				else if(pData[i][pDonator] > 0 && pData[i][pVIPColor])
				{
				    SetPlayerColor(i, 0xC2A2DA00);
				}
          		else if(pData[i][pAdmin] > 0 && pData[i][pAdminColor])
				{
				    SetPlayerColor(i, 0x1BFF00FF);
				}
				/*else if(pData[i][pAdmin] > 0 && pData[i][pAdminDuty])
				{
                    SetPlayerSpecialTag(i, TAG_ADMIN);
				}*/
   				else if(pData[i][pAFK])
				{
					SetPlayerSpecialTag(i, TAG_AFK);
				}
				else
				{
				    SetPlayerColor(i, 0xFFFFFF00);
				    //SetPlayerSpecialTag(i, TAG_NORMAL);
				}
			}
		}
	}
	if((gGMX) && mysql_unprocessed_queries(connectionID) == 0)
	{
	    SendRconCommand("gmx");
		SendRconCommand("reloadfs propamap");
		SendRconCommand("reloadfs pcrpmap");
	}

	for(new i = 0; i < MAX_ACTORS; i ++)
	{
	    if(IsValidActor(i))
	    {
	        new
	            Float:x,
	            Float:y,
	            Float:z;
	        GetActorPos(i, x, y, z);
	        SetActorPos(i, x, y, z);
	    }
	}
	format(string, sizeof(string), "Marijuana Seeds\n"WHITE"Stock: %i\nPrice: $5/seed\n/getdrug seeds [amount]", gSeedsStock);
	UpdateDynamic3DTextLabelText(gSeedsStockText, COLOR_YELLOW, string);

	format(string, sizeof(string), "Raw Ephedrine\n"WHITE"Stock: %i\nPrice: $150/gram\n/getdrug ephedrine [amount]", gEphedrineStock);
	UpdateDynamic3DTextLabelText(gEphedrineStockText, COLOR_YELLOW, string);

	format(string, sizeof(string), "Crack\n"WHITE"Stock: %i\nPrice: $250/gram\n/getdrug crack [amount]", gCrackStock);
    UpdateDynamic3DTextLabelText(gCrackText, COLOR_YELLOW, string);

	UpdateUpTime();

	if(Iter_Count(Player) > gPlayerRecord)
	{
		gPlayerRecord = Iter_Count(Player);
		gRecordDate = GetDate();
		SaveServerInfo();
	}
}

stock ConvertToTwelveHour(tHour)
{
	new string[56], suffix[3], cHour, date[5];
	gettime(date[3], date[4]);
	if(tHour > 12 && tHour < 24)
	{
		cHour = tHour - 12;
		suffix = "PM";
	}
	else if(tHour == 12)
	{
		cHour = 12;
		suffix = "PM";
	}
	else if(tHour > 0 && tHour < 12)
	{
		cHour = tHour;
		suffix = "AM";
	}
	else if(tHour == 0)
	{
		cHour = 12;
		suffix = "AM";
	}
	format(string, sizeof(string), "%d:%02d %s", cHour, date[4], suffix);
	return string;
}

forward MinuteTimer();
public MinuteTimer()
{
	new hour;
	gettime(.hour = hour);
	RefreshTime();
	if(gHour != hour)
	{
	    SMA(COLOR_WHITE, "The server time is now: %s.", ConvertToTwelveHour(hour+8));
		new string[128], banktime[128];
		format(string, sizeof(string), "The server time is now: %s.", ConvertToTwelveHour(hour));
		DCC_SendChannelMessage(commandChannel, string);
		format(banktime, sizeof(banktime), "Bank\n"SVRCLR"Usage: /bank\nAvailable to rob in: %i Hours", RobberyInfo[rTime]);
		UpdateDynamic3DTextLabelText(gBankTime, COLOR_GREY, banktime);
    	foreach(new i : Player)
	    {
	        SavePlayerVariables(i);
         	SendClientMessage(i, COLOR_RED, "[AUTO-SAVE]"YELLOW" Your account has been successfully saved.");
         	
	        if(pData[i][pLogged] && !pData[i][pKicked])
	        {
				pData[i][pPlayingHours]++;
	            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET playinghours = %i WHERE uid = %i", pData[i][pPlayingHours], pData[i][pID]);
	    		mysql_tquery(connectionID, queryBuffer);

		        if(pData[i][pAFK] && pData[i][pAFKTime] > 900)
		        {
		            SCM(i, COLOR_LIGHTRED, "You didn't receive a paycheck this hour as you were AFK for more than 15 minutes.");
		        }
		        /*else if(pData[i][pMinutes] < 25)
		        {
		            SCM(i, COLOR_TEAL, "You are ineligible for a paycheck as you played less than "WHITE"25 minutes"TEAL" this hour.");
		        }
		        else
		        {
					SendPaycheck(i);
					SCM(i, COLOR_SYNTAX, "You have earned your paycheck.");
					//Dyuze(i, "Payday", "You have earned your paycheck.");
				}*/
				else if(pData[i][pMinutes] < 25)
		        {
		            SCM(i, COLOR_LIGHTRED, "You are ineligible for a paycheck as you played less than 25 minutes this hour.");
		        }
		        else if(pData[i][pDonator] > 0)
				{
					SendPaycheck(i);
				}
		        else
		        {
		            new code = Random(100000, 999999);
	  				PayCheckCode[i] = code;

					SCM(i, COLOR_GREY,"______________________________________________________");
					SCM(i, COLOR_WHITE,"Information for tax on paychecks, Type /taxhelp.");
     	  	  		SCM(i, COLOR_GREY,"______________________________________________________");
	    			SCM(i, COLOR_WHITE,"Type /signcheck, to receive your paycheck.");
	    			SCM(i, COLOR_WHITE,"You have 5 minutes to signcheck before it becomes invalid.");
		    		SCM(i, COLOR_GREY,"______________________________________________________");

					//Dyuze(i, "Type ~y~/signcheck~w~ to get your ~b~paycheck~w~.");
		  			SetTimerEx("LastAlertPayCheck", 243000, false, "i", i);
				}
				if(pData[i][pReportMuted])
				{
					pData[i][pReportMuted]--;

					if(pData[i][pReportMuted] <= 0)
					{
					    pData[i][pReportMuted] = 0;
					    pData[i][pReportWarns] = 0;

					    SCM(i, COLOR_YELLOW, "Your report mute has automatically been lifted.");
				    }
				}
			}
	    }

	    for(new i = 0; i < MAX_POINTS; i ++)
	    {
	        if(PointInfo[i][pExists])
	        {
	            if(PointInfo[i][pTime] > 0)
	            {
	                PointInfo[i][pTime]--;
	                ReloadPoint(i);
				}

				if(!PointInfo[i][pTime])
				{
					new pawn[128];
				    SMA(COLOR_AQUA, "[Point update]: "WHITE"%s(Profits: "TEAL"$%i"WHITE") is now available to capture.", PointInfo[i][pName], PointInfo[i][pProfits]);
					format(pawn, sizeof(pawn), "[Point update]: %s(Profits: $%i) is now available to capture.", PointInfo[i][pName], PointInfo[i][pProfits]);
					DCC_SendChannelMessage(commandChannel, pawn);
				    PointInfo[i][pCapturedGang] = -1;
	            }

	            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET time = %i, capturedgang = %i WHERE id = %i", PointInfo[i][pTime], PointInfo[i][pCapturedGang], i);
             	mysql_tquery(connectionID, queryBuffer);
	        }
		}

		for(new i = 0; i < MAX_TURFS; i ++)
	    {
	        if(TurfInfo[i][tExists])
	        {
	            if(TurfInfo[i][tTime] > 0)
	            {
	                TurfInfo[i][tTime]--;
	                ReloadTurf(i);
				}

				if(!TurfInfo[i][tTime] && TurfInfo[i][tType] != 8)
				{
					new pawn[128];
				    SMA(COLOR_TEAL, "[Turf update]: "WHITE"%s(Perk: "TEAL"%s"WHITE") is now available to claim.", TurfInfo[i][tName], getTurftype(i));
					format(pawn, sizeof(pawn), "[Turf update]: %s(Perk: %s) is now available to claim.", TurfInfo[i][tName], getTurftype(i));
					DCC_SendChannelMessage(commandChannel, pawn);
	            }

	            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET time = %i WHERE id = %i", TurfInfo[i][tTime], i);
             	mysql_tquery(connectionID, queryBuffer);
	        }
		}

		switch(hour)
		{
		    case 0, 6, 12, 18:
		    {
		        for(new i = 0; i < MAX_GANGS; i ++)
		        {
		            if(GangInfo[i][gSetup] && GangInfo[i][gTurfTokens] < 10)
		            {
		                GangInfo[i][gTurfTokens]++;

		                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET turftokens = turftokens + 1 WHERE id = %i", i);
		                mysql_tquery(connectionID, queryBuffer);
		            }
		        }

		        for(new i = 0; i < MAX_FACTIONS; i ++)
		        {
		            if(FactionInfo[i][fType] == FACTION_POLICE && FactionInfo[i][fTurfTokens] < 3)
		            {
		                FactionInfo[i][fTurfTokens]++;

		                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET turftokens = turftokens + 1 WHERE id = %i", i);
		                mysql_tquery(connectionID, queryBuffer);
		            }
		        }
		    }
		}

		new rows = cache_get_row_count(connectionID);
		if(RobberyInfo[rTime] > 0)
		{
		    RobberyInfo[rTime]--;
			for(new i = 0; i < rows && i < MAX_ENTRANCES; i ++)
			{
				ReloadEntrance(i);
			}
		}
		if(ChopInfo[cTime] > 0)
		{
		    ChopInfo[cTime]--;
		}
		if(RobInfo[rTime] > 0)
		{
		    RobInfo[rTime]--;
		}
		for(new i = 0; i < MAX_BUSINESSES; i ++)
		{
			if(BusinessInfo[i][bRobbed] > 0)
			{
				BusinessInfo[i][bRobbed]--;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET robbed = %i WHERE id = %i", BusinessInfo[i][bRobbed], BusinessInfo[i][bID]);
				mysql_tquery(connectionID, queryBuffer);

			}
		}
		for(new i = 0; i < MAX_HOUSES; i ++)
		{
			if(HouseInfo[i][hRobbed] > 0)
			{
				HouseInfo[i][hRobbed]--;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET robbed = %i WHERE id = %i", HouseInfo[i][hRobbed], HouseInfo[i][hID]);
				mysql_tquery(connectionID, queryBuffer);

			}
		}

	    SetWorldTime(hour+8);

		gWorldTime = hour;
	    gHour = hour;

	    gCharityHealth = 0;
	    gCharityArmor = 0;
	}
	else
	{
	    foreach(new i : Player)
		{
		    if(pData[i][pPotPlanted] && pData[i][pPotTime] > 0)
		    {
		        pData[i][pPotTime]--;

		        if((pData[i][pPotTime] % 2) == 0)
		        {
		            pData[i][pPotGrams]++;
		        }
		    }
		    if(pData[i][pLogged] && pData[i][pAFKTime] < 900)
		    {
				//new amount = 35 * min(pData[i][pLevel], 21);
		        //AddToPaycheck(i, amount);

		        pData[i][pMinutes]++;
			}
		}

		for(new i = 0; i < MAX_POINTS; i ++)
	    {
	        if(PointInfo[i][pExists] && PointInfo[i][pCapturer] != INVALID_PLAYER_ID && PointInfo[i][pCaptureTime] > 0)
	        {
	            if(pData[PointInfo[i][pCapturer]][pGang] == -1)// || pData[PointInfo[i][pCapturer]][pGangRank] < 5)
	            {
	                PointInfo[i][pCapturer] = INVALID_PLAYER_ID;
	                PointInfo[i][pCaptureTime] = 0;
	            }
	            else
	            {
		            PointInfo[i][pCaptureTime]--;

		            if(PointInfo[i][pCaptureTime] <= 0)
		            {
		                GiveGangPoints(pData[PointInfo[i][pCapturer]][pGang], 10);

		                GetPlayerName(PointInfo[i][pCapturer], PointInfo[i][pCapturedBy], MAX_PLAYER_NAME);
					    PointInfo[i][pCapturedGang] = pData[PointInfo[i][pCapturer]][pGang];

						GangInfo[PointInfo[i][pCapturedGang]][gCash] += PointInfo[i][pProfits];
						SMA(COLOR_GREEN, "{%06x}%s has successfully captured %s for %s.", GangInfo[PointInfo[i][pCapturedGang]][gColor] >>> 8, GetRPName(PointInfo[i][pCapturer]), PointInfo[i][pName], GangInfo[PointInfo[i][pCapturedGang]][gName]);
						SendGangMessage(PointInfo[i][pCapturedGang], COLOR_YELLOW, "Your gang has earned $%i and 10 GP for successfully capturing this point.", PointInfo[i][pProfits]);

					    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET cash = %i WHERE id = %i", GangInfo[PointInfo[i][pCapturedGang]][gCash], PointInfo[i][pCapturedGang]);
					    mysql_tquery(connectionID, queryBuffer);

					    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET capturedby = '%s', capturedgang = %i, profits = 0, time = 20 WHERE id = %i", PointInfo[i][pCapturedBy], PointInfo[i][pCapturedGang], i);
					    mysql_tquery(connectionID, queryBuffer);

	                    PointInfo[i][pCapturer] = INVALID_PLAYER_ID;
		                PointInfo[i][pCaptureTime] = 0;
		                PointInfo[i][pProfits] = 0;
		                PointInfo[i][pTime] = 20;

		                ReloadPoint(i);
					}
				}
			}
		}

		for(new i = 0; i < MAX_TURFS; i ++)
	    {
	        if(TurfInfo[i][tExists] && TurfInfo[i][tCapturer] != INVALID_PLAYER_ID && TurfInfo[i][tCaptureTime] > 0)
	        {
	            if((GetFactionType(TurfInfo[i][tCapturer]) != FACTION_POLICE) && (pData[TurfInfo[i][tCapturer]][pGang] == -1))// || pData[TurfInfo[i][tCapturer]][pGangRank] < 5))
	            {
	                TurfInfo[i][tCapturer] = INVALID_PLAYER_ID;
	                TurfInfo[i][tCaptureTime] = 0;
	                ReloadTurf(i);
	            }
	            else
	            {
		            TurfInfo[i][tCaptureTime]--;

		            if(TurfInfo[i][tCaptureTime] <= 0)
		            {
		                GetPlayerName(TurfInfo[i][tCapturer], TurfInfo[i][tCapturedBy], MAX_PLAYER_NAME);

		                if(GetFactionType(TurfInfo[i][tCapturer]) == FACTION_POLICE)
		                {
		                    TurfInfo[i][tCapturedGang] = -1;
							SMA(COLOR_GREEN, "%s has been successfully claimed back as a civilian turf by Officer %s.", TurfInfo[i][tName], GetRPName(TurfInfo[i][tCapturer]));
						}
						else
						{
						    new gangid = pData[TurfInfo[i][tCapturer]][pGang];

						    TurfInfo[i][tCapturedGang] = gangid;

						    GiveGangPoints(gangid, 10);
						    SMA(COLOR_GREEN, "%s has been successfully claimed by %s for %s.", TurfInfo[i][tName], GetRPName(TurfInfo[i][tCapturer]), GangInfo[gangid][gName]);
							// for '/top' purposes
							GangInfo[gangid][gClaimCount]++;
							mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET claimcount = %i WHERE id = %i", GangInfo[gangid][gClaimCount], gangid);
							mysql_tquery(connectionID, queryBuffer);

							switch(TurfInfo[i][tType])
							{
							    case 1:
							    {
							        GangInfo[gangid][gHPAmmo] = GangInfo[gangid][gHPAmmo] + 80 > GetGangStashCapacity(gangid, STASH_CAPACITY_HPAMMO) ? GetGangStashCapacity(gangid, STASH_CAPACITY_HPAMMO) : GangInfo[gangid][gHPAmmo] + 80;
							        SendGangMessage(gangid, COLOR_YELLOW, "Your gang earned 80 rounds of hollow point ammo in its stash for capturing this turf!");

							        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET hpammo = %i WHERE id = %i", GangInfo[gangid][gHPAmmo], gangid);
							        mysql_tquery(connectionID, queryBuffer);
								}
								case 2:
							    {
							        GangInfo[gangid][gPoisonAmmo] = GangInfo[gangid][gPoisonAmmo] + 60 > GetGangStashCapacity(gangid, STASH_CAPACITY_POISONAMMO) ? GetGangStashCapacity(gangid, STASH_CAPACITY_POISONAMMO) : GangInfo[gangid][gPoisonAmmo] + 60;
							        SendGangMessage(gangid, COLOR_YELLOW, "Your gang earned 60 rounds of poison tip ammo in its stash for capturing this turf!");

							        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET poisonammo = %i WHERE id = %i", GangInfo[gangid][gPoisonAmmo], gangid);
							        mysql_tquery(connectionID, queryBuffer);
								}
								case 3:
							    {
							        GangInfo[gangid][gFMJAmmo] = GangInfo[gangid][gFMJAmmo] + 30 > GetGangStashCapacity(gangid, STASH_CAPACITY_FMJAMMO) ? GetGangStashCapacity(gangid, STASH_CAPACITY_FMJAMMO) : GangInfo[gangid][gFMJAmmo] + 30;
							        SendGangMessage(gangid, COLOR_YELLOW, "Your gang earned 30 rounds of full metal jacket ammo in its stash for capturing this turf!");

							        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET fmjammo = %i WHERE id = %i", GangInfo[gangid][gFMJAmmo], gangid);
							        mysql_tquery(connectionID, queryBuffer);
								}
							    case 4:
							    {
							        new amount = 50000;
							        GangInfo[gangid][gMaterials] = GangInfo[gangid][gMaterials] + amount > GetGangStashCapacity(gangid, STASH_CAPACITY_MATERIALS) ? GetGangStashCapacity(gangid, STASH_CAPACITY_MATERIALS) : GangInfo[gangid][gMaterials] + 10000;
									SendGangMessage(gangid, COLOR_YELLOW, "Your gang earned %i materials in the stash for capturing this turf!", amount);

							        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET materials = %i WHERE id = %i", GangInfo[gangid][gMaterials], gangid);
							        mysql_tquery(connectionID, queryBuffer);
								}
								case 5:
							    {
							        GangInfo[gangid][gPot] = GangInfo[gangid][gPot] + 50 > GetGangStashCapacity(gangid, STASH_CAPACITY_WEED) ? GetGangStashCapacity(gangid, STASH_CAPACITY_WEED) : GangInfo[gangid][gPot] + 20;
							        GangInfo[gangid][gMeth] = GangInfo[gangid][gMeth] + 50 > GetGangStashCapacity(gangid, STASH_CAPACITY_METH) ? GetGangStashCapacity(gangid, STASH_CAPACITY_METH) : GangInfo[gangid][gMeth] + 10;
							        SendGangMessage(gangid, COLOR_YELLOW, "Your gang earned 50 grams of pot & 50 grams meth in the stash for capturing this turf!");

							        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET pot = %i, meth = %i WHERE id = %i", GangInfo[gangid][gPot], GangInfo[gangid][gMeth], gangid);
							        mysql_tquery(connectionID, queryBuffer);
								}
								case 6:
							    {
							        GangInfo[gangid][gCrack] = GangInfo[gangid][gCrack] + 50 > GetGangStashCapacity(gangid, STASH_CAPACITY_COCAINE) ? GetGangStashCapacity(gangid, STASH_CAPACITY_COCAINE) : GangInfo[gangid][gCrack] + 10;
							        SendGangMessage(gangid, COLOR_YELLOW, "Your gang earned 50 grams of Crack in the stash for capturing this turf!");

							        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET crack = %i WHERE id = %i", GangInfo[gangid][gCrack], gangid);
							        mysql_tquery(connectionID, queryBuffer);
								}
								case 7:
								{
								    SendGangMessage(gangid, COLOR_YELLOW, "Your gang will now receive 50 percents of all sales in this turf.");
							    }
							    case 8:
							    {
							    	GangInfo[gangid][gWeapons][GANGWEAPON_VEST] += 2;
							        GangInfo[gangid][gWeapons][GANGWEAPON_9MM] += 4;
								    GangInfo[gangid][gWeapons][GANGWEAPON_SHOTGUN] += 2;
								    GangInfo[gangid][gWeapons][GANGWEAPON_RIFLE] += 2;

							        SendGangMessage(gangid, COLOR_YELLOW, "Your gang has earned vest(2), 9mm(4), Rifle(2), and Shotgun(2) in its stash for capturing this turf!");

							        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_vest = %i, weapon_9mm = %i, weapon_rifle = %i, weapon_shotgun = %i WHERE id = %i", GangInfo[gangid][gWeapons][GANGWEAPON_VEST], GangInfo[gangid][gWeapons][GANGWEAPON_9MM], GangInfo[gangid][gWeapons][GANGWEAPON_RIFLE], GangInfo[gangid][gWeapons][GANGWEAPON_SHOTGUN], gangid);
							        mysql_tquery(connectionID, queryBuffer);
								}
								case 9:
			    				{
								    GangInfo[gangid][gWeapons][GANGWEAPON_MP5] += 2;
								    GangInfo[gangid][gWeapons][GANGWEAPON_TEC9] += 2;
								    GangInfo[gangid][gWeapons][GANGWEAPON_UZI] += 2;
							        SendGangMessage(gangid, COLOR_YELLOW, "Your gang has earned MP5(2), Tec9(2), and Uzi(2) in its stash for capturing this turf!");

							        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_mp5 = %i, weapon_tec9 = %i, weapon_uzi = %i WHERE id = %i", GangInfo[gangid][gWeapons][GANGWEAPON_MP5], GangInfo[gangid][gWeapons][GANGWEAPON_TEC9], GangInfo[gangid][gWeapons][GANGWEAPON_UZI], gangid);
							        mysql_tquery(connectionID, queryBuffer);
								}
								case 10:
								{
								    GangInfo[gangid][gWeapons][GANGWEAPON_DEAGLE] += 2;
								    GangInfo[gangid][gWeapons][GANGWEAPON_AK47] += 2;
							        SendGangMessage(gangid, COLOR_YELLOW, "Your gang has earned Deagle(2), AK47(2) in its stash for capturing this turf!");

							        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_deagle = %i, weapon_ak47 = %i WHERE id = %i", GangInfo[gangid][gWeapons][GANGWEAPON_DEAGLE], GangInfo[gangid][gWeapons][GANGWEAPON_AK47], gangid);
							        mysql_tquery(connectionID, queryBuffer);
								}
							}
						}

					    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET capturedby = '%s', capturedgang = %i, time = 12 WHERE id = %i", TurfInfo[i][tCapturedBy], TurfInfo[i][tCapturedGang], i);
					    mysql_tquery(connectionID, queryBuffer);

	                    TurfInfo[i][tCapturer] = INVALID_PLAYER_ID;
		                TurfInfo[i][tCaptureTime] = 0;
		                TurfInfo[i][tTime] = 6;

						ReloadTurf(i);
					}
				}
			}
		}

		for(new i = 0; i < MAX_REPORTS; i ++)
		{
		    if(ReportInfo[i][rExists] && ReportInfo[i][rTime] > 0)
		    {
		        ReportInfo[i][rTime]--;

		        if(ReportInfo[i][rTime] <= 0)
		        {
		            SCM(ReportInfo[i][rReporter], COLOR_SYNTAX, "Your report has expired. You can make an admin request on "SERVER_URL" if you still need help.");
		            ReportInfo[i][rExists] = 0;
		        }
			}
	    }
	}
}

forward FuelTimer();
public FuelTimer()
{
	for(new i = 1; i < MAX_VEHICLES; i ++)
	{
	    if(VehicleHasEngine(i) && GetVehicleParams(i, VEHICLE_ENGINE))
	    {
			if(vehicleFuel[i] > 0)
			{
			    vehicleFuel[i]--;

			    switch(vehicleFuel[i])
			    {
			        case 15, 10, 5:
			        {
			            SCM(GetVehicleDriver(i), COLOR_LIGHTRED, "** This vehicle is running low on fuel. Visit the nearest gas station to fill up. (/refuel)");
					}
				}
			}

			if(vehicleFuel[i] <= 0)
			{
			    SetVehicleParams(i, VEHICLE_ENGINE, false);
			}

		}
	}
}

forward InjuredTimer();
public InjuredTimer()
{
	foreach(new i : Player)
	{
	    if(pData[i][pLogged] && pData[i][pInjured] && GetVehicleModel(GetPlayerVehicleID(i)) != 416)
		{
  			new
     			Float:health;
	    	GetPlayerHealth(i, health);
		    SetPlayerHealth(i, health - 1.0);
		}
	}
}

forward RandomFire(check);
public RandomFire(check)
{
	new count, index, announced, rand = random(10);

	if(!IsFireActive())
	{
	    if(check)
	    {
			foreach(new i : Player)
			{
			    if(GetFactionType(i) == FACTION_MEDIC)
		    	{
		        	count++;
	        	}
	    	}
	    }
	    else
	    {
	        count = 3;
	    }

	    if(count >= 3)
	    {
	        for(new i = 0; i < sizeof(randomFireSpawns); i ++)
	        {
	            if(randomFireSpawns[i][fireIndex] == rand)
	            {
	                if(!announced)
	                {
	                    foreach(new x : Player)
	                    {
	                        if(IsPlayerInRangeOfPoint(x, 30.0, randomFireSpawns[i][fireX], randomFireSpawns[i][fireY], randomFireSpawns[i][fireZ]))
	                        {
	                            SCM(x, SERVER_COLOR, "**{C2A2DA} An explosion can be heard. Smoke is rising from a building nearby.");
	                        }
	                        if(GetFactionType(x) == FACTION_MEDIC)
	                        {
	                            pData[x][pCP] = CHECKPOINT_MISC;
	                            SetPlayerCheckpoint(x, randomFireSpawns[i][fireX], randomFireSpawns[i][fireY], randomFireSpawns[i][fireZ], 3.0);
	                            SM(x, COLOR_DOCTOR, "** All units, a fire has been reported in %s. Please head to the beacon on your map. **", GetZoneName(randomFireSpawns[i][fireX], randomFireSpawns[i][fireY], randomFireSpawns[i][fireZ]));
							}
							SM(x, COLOR_LIGHTGREEN, "Breaking News"WHITE": %s is on fire!", GetZoneName(randomFireSpawns[i][fireX], randomFireSpawns[i][fireY], randomFireSpawns[i][fireZ]));
	                    }
						announced = 1;
					}

	                gFireObjects[index] = CreateDynamicObject(18691, randomFireSpawns[i][fireX], randomFireSpawns[i][fireY], randomFireSpawns[i][fireZ], 0.0, 0.0, randomFireSpawns[i][fireA], .streamdistance = 50.0);
	                gFireHealth[index++] = 50.0;
	            }
	        }

	        gFires = index;
	    }
	}
}

forward KickPlayer(playerid);
public KickPlayer(playerid)
{
	if(!pData[playerid][pKicked])
	{
	    pData[playerid][pKicked] = 1;
	    SetTimerEx("KickPlayer", 200, false, "i", playerid);
	}
	else
	{
	    pData[playerid][pKicked] = 0;
	    Kick(playerid);
	}
}

forward DespawnTimer(vehicleid);
public DespawnTimer(vehicleid)
{
	if(VehicleInfo[vehicleid][vOwnerID] > 0 && !IsVehicleOccupied(vehicleid))
	{
	    DespawnVehicle(vehicleid);
	}
	else
	{
	    // ANOTHER FIVE MINUTES!
	    VehicleInfo[vehicleid][vTimer] = SetTimerEx("DespawnTimer", 300000, false, "i", vehicleid);
	}
}

forward HTTP_OnMusicFetchResponse(index, response_code, data[]);
public HTTP_OnMusicFetchResponse(index, response_code, data[])
{
    if(response_code == 200)
    {
        new
            buffer[2048],
            string[288],
			count,
			start,
			pos;

		strcpy(buffer, data);

        while((pos = strfind(buffer, "<br/>")) != -1)
        {
            strdel(buffer, pos, pos + 5);

            if(++count == 8)
            {
                strmid(string, buffer, start, pos);
                SCM(index, COLOR_YELLOW, string);

				start = pos;
                count = 0;
			}
			else
			{
			    if((strlen(buffer) - pos) < 6)
			    {
			        strmid(string, buffer, start, pos);
			        SCM(index, COLOR_YELLOW, string);
			        break;
			    }

			    strins(buffer, ", ", pos);
            }
        }
    }
    else
    {
        SM(index, COLOR_RED, "The music database is currently not available. (error %i)", response_code);
    }
}

forward MDC_ListCharges(playerid);
public MDC_ListCharges(playerid)
{
	new rows = cache_get_row_count(connectionID);

	if(!rows)
	{
	    SCM(playerid, COLOR_SYNTAX, "This player has no active charges on them.");
	}
	else
	{
	    new chargedby[MAX_PLAYER_NAME], date[24], reason[128], string[512];

	    string = "Charged by\tDate\tReason";

	    for(new i = 0; i < rows; i ++)
	    {
	        cache_get_field_content(i, "chargedby", chargedby);
	        cache_get_field_content(i, "date", date);
	        cache_get_field_content(i, "reason", reason);

	        format(string, sizeof(string), "%s\n%s\t%s\t%s", string, chargedby, date, reason);
		}

		ShowPlayerDialog(playerid, DIALOG_MDCCHARGES, DIALOG_STYLE_TABLIST_HEADERS, "Active charges:", string, "<<", "");
	}

	return 1;
}

forward MDC_ClearCharges(playerid);
public MDC_ClearCharges(playerid)
{
	if(cache_get_row_count(connectionID))
	{
	    new username[MAX_PLAYER_NAME], id = pData[playerid][pSelected];

	    cache_get_field_content(0, "username", username);

    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM charges WHERE uid = %i", id);
        mysql_tquery(connectionID, queryBuffer);

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = 0 WHERE uid = %i", id);
        mysql_tquery(connectionID, queryBuffer);

        foreach(new i : Player)
        {
            if(!strcmp(GetPlayerNameEx(i), username))
            {
                SM(i, COLOR_WHITE, "** Your crimes were cleared by %s.", GetRPName(playerid));
                pData[i][pWantedLevel] = 0;
            }
        }

        SendFactionMessage(pData[playerid][pFaction], COLOR_ROYALBLUE, "HQ: %s %s has cleared %s's charges and wanted level.", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), username);
	}
}

forward MDC_PlayerLookup(playerid, username[]);
public MDC_PlayerLookup(playerid, username[])
{
	if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "That player doesn't exist and therefore has no information to view.");
	    ShowPlayerDialog(playerid, DIALOG_PLAYERLOOKUP, DIALOG_STYLE_INPUT, "Player lookup", "Enter the full name of the player to lookup:", "Submit", "Cancel");
	}
	else
	{
	    new string[512];

	    pData[playerid][pSelected] = cache_get_field_content_int(0, "uid");

	    format(string, sizeof(string), "Name: %s\nGender: %s\nAge: %i years old\nCrimes commited: %i\nTimes arrested: %i\nWanted level: %i/6\nDrivers License: %s\nGun License: %s", username, (cache_get_field_content_int(0, "gender") == 2) ? ("Female") : ("Male"), cache_get_field_content_int(0, "age"), cache_get_field_content_int(0, "crimes"), cache_get_field_content_int(0, "arrested"), cache_get_field_content_int(0, "wantedlevel"), cache_get_field_content_int(0, "carlicense") ? ("Yes") : ("No"), cache_get_field_content_int(0, "gunlicense") ? ("Yes") : ("No"));
		ShowPlayerDialog(playerid, DIALOG_MDCPLAYER1, DIALOG_STYLE_MSGBOX, "Player lookup", string, "Options", "Cancel");
	}
}

forward OnPlayerUseCarStorage(playerid);
public OnPlayerUseCarStorage(playerid)
{
	new vehicleid = GetVehicleLinkedID(cache_get_field_content_int(0, "id"));
	if(vehicleid != INVALID_VEHICLE_ID)
	{
		if(IsVehicleOccupied(vehicleid) && GetVehicleDriver(vehicleid) != playerid)
        {
            SCM(playerid, COLOR_SYNTAX, "This vehicle is occupied.");
        }
        else //SCM(playerid, COLOR_SYNTAX, "This command is disabled.");
        {
            new
				Float:health;

			GetVehicleHealth(vehicleid, health);

            if(health < 600.0)
            {
                SCM(playerid, COLOR_SYNTAX, "This vehicle is too damaged to be despawned.");
            }
            else
            {
		        SM(playerid, COLOR_AQUA, "Your "SVRCLR"%s{CCFFFF} which is located in %s has been despawned.", GetVehicleName(vehicleid), GetVehicleZoneName(vehicleid));
				DespawnVehicle(vehicleid);
			}
		}
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM vehicles WHERE id = %i AND ownerid = %i", cache_get_field_content_int(0, "id"), pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer, "OnPlayerSpawnVehicle", "ii", playerid, false);
	}
}

forward OnPlayerDMVRelease(playerid);
public OnPlayerDMVRelease(playerid)
{
	new tickets = cache_get_field_content_int(0, "tickets");

	if(pData[playerid][pCash] < tickets)
	{
		return SCMf(playerid, COLOR_ERROR, "[ERROR]{ffffff} You need %s to release this impounded vehicle.", FormatNumber(tickets));
	}
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET impounded = '0', tickets = '0' WHERE id = %i", cache_get_field_content_int(0, "id"));
	mysql_tquery(connectionID, queryBuffer);
	GivePlayerCash(playerid, -tickets);
	SCMf(playerid, -1, "You have paid %s to release your %s...", FormatNumber(tickets), vehicleNames[cache_get_field_content_int(0, "modelid") - 400]);
	return 1;
}
forward OnPlayerBuyParts(playerid);
public OnPlayerBuyParts(playerid)
{
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET parts = %i WHERE uid = %i", pData[playerid][pParts], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	
	if(pData[playerid][pParts] <= 0)
    {
        return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You need vehicle parts to restore this broken vehicle.");
    }
    
	pData[playerid][pParts] -= 1;
	
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET broken = '0' WHERE id = %i", cache_get_field_content_int(0, "id"));
	mysql_tquery(connectionID, queryBuffer);
	SCMf(playerid, -1, "You have use vehicle parts to release your %s..", vehicleNames[cache_get_field_content_int(0, "modelid") - 400]);
	return 1;
}
forward OnBanAttempt(username[], ip[], from[], reason[], permanent);
public OnBanAttempt(username[], ip[], from[], reason[], permanent)
{
	if(cache_get_row_count(connectionID))
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE bans SET reason = '%e' WHERE id = %i", reason, cache_get_row_int(0, 0));
		mysql_tquery(connectionID, queryBuffer);
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO bans VALUES(null, '%s', '%s', '%s', NOW(), '%e', %i)", username, ip, from, reason, permanent);
		mysql_tquery(connectionID, queryBuffer);
	}
}

forward OnPlayerAttemptInviteGang(playerid, targetid);
public OnPlayerAttemptInviteGang(playerid, targetid)
{
    if(cache_get_row_int(0, 0) >= GetGangMemberLimit(pData[playerid][pGang]))
    {
        SM(playerid, COLOR_SYNTAX, "Your gang can't have more than %i members at its level.", GetGangMemberLimit(pData[playerid][pGang]));
    }
    else
    {
    	pData[targetid][pGangOffer] = playerid;
		pData[targetid][pGangOffered] = pData[playerid][pGang];

		SM(targetid, COLOR_AQUA, "%s has invited you to join "SVRCLR"%s{CCFFFF} (/accept gang).", GetRPName(playerid), GangInfo[pData[playerid][pGang]][gName]);
		SM(playerid, COLOR_AQUA, "You have invited %s to join your gang.", GetRPName(targetid));
	}
}

forward OnPlayerAttemptBuyVehicle(playerid, index);
public OnPlayerAttemptBuyVehicle(playerid, index)
{
	new count = cache_get_row_int(0, 0);

	if(count >= GetPlayerAssetLimit(playerid, LIMIT_VEHICLES))
	{
	    SM(playerid, COLOR_SYNTAX, "You currently own %i/%i vehicles. You can't own anymore unless you upgrade your asset perk.", count, GetPlayerAssetLimit(playerid, LIMIT_VEHICLES));
	}
	else
	{
	    new string[20];

        if(pData[playerid][pCash] < vehicleArray[index][carPrice])
        {
            SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this vehicle.");
        }
        if(GetSpawnedVehicles(playerid) >= MAX_SPAWNED_VEHICLES)
	    {
	        SCMf(playerid, COLOR_ERROR, "[ERROR]{ffffff} You can't have more than %i vehicles spawned at a time.", MAX_SPAWNED_VEHICLES);
	    }
		else
		{
	        switch(random(3))
    	    {
        	    case 0:
				{
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO vehicles (ownerid, owner, modelid, price, pos_x, pos_y, pos_z, pos_a) VALUES(%i, '%s', %i, %i, '562.3970', '-1283.8485', '17.0007', '0.0000')", pData[playerid][pID], GetPlayerNameEx(playerid), vehicleArray[index][carModel], vehicleArray[index][carPrice]);
					mysql_tquery(connectionID, queryBuffer);
				}
            	case 1:
				{
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO vehicles (ownerid, owner, modelid, price, pos_x, pos_y, pos_z, pos_a) VALUES(%i, '%s', %i, %i, '557.8670', '-1283.9822', '17.0007', '0.0000')", pData[playerid][pID], GetPlayerNameEx(playerid), vehicleArray[index][carModel], vehicleArray[index][carPrice]);
					mysql_tquery(connectionID, queryBuffer);
				}
            	case 2:
				{
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO vehicles (ownerid, owner, modelid, price, pos_x, pos_y, pos_z, pos_a) VALUES(%i, '%s', %i, %i, '552.8177', '-1284.1307', '17.0007', '0.0000')", pData[playerid][pID], GetPlayerNameEx(playerid), vehicleArray[index][carModel], vehicleArray[index][carPrice]);
                    mysql_tquery(connectionID, queryBuffer);
				}
			}

	        AddPointMoney(POINT_AUTOEXPORT, percent(vehicleArray[index][carPrice], 3));
    	    GivePlayerCash(playerid, -vehicleArray[index][carPrice]);

	        format(string, sizeof(string), "~r~-$%i", vehicleArray[index][carPrice]);
    	    GameTextForPlayer(playerid, string, 5000, 1);

	        SM(playerid, COLOR_YELLOW, "%s purchased for $%i...", vehicleNames[vehicleArray[index][carModel] - 400], vehicleArray[index][carPrice]);
    	    Log_Write("log_property", "%s (uid: %i) purchased a %s for $%i.", GetPlayerNameEx(playerid), pData[playerid][pID], vehicleNames[vehicleArray[index][carModel] - 400], vehicleArray[index][carPrice]);
		}
	}
}

forward OnHitmanPassport(playerid, name[], level, skinid);
public OnHitmanPassport(playerid, name[], level, skinid)
{
    if(cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "That name is already taken, please choose another.");
	}
	else
	{
	    strcpy(pData[playerid][pNameChange], name, MAX_PLAYER_NAME);

		pData[playerid][pFreeNamechange] = 2;
		pData[playerid][pChosenLevel] = level;
	    pData[playerid][pChosenSkin] = skinid;

		SM(playerid, COLOR_AQUA, "You have requested a namechange to "SVRCLR"%s{CCFFFF} for free, please wait for admin approval.", name);
		SM(playerid, COLOR_AQUA, "Once the namechange has been approved, you will receive your chosen name, level and skin.");

		SAM(COLOR_YELLOW, "AdmWarning: %s[%i] is requesting a namechange to %s. (/acceptname %i or /denyname %i)", GetRPName(playerid), playerid, name, playerid, playerid);
	}
}

forward OnPlayerAttemptNameChange(playerid, name[]);
public OnPlayerAttemptNameChange(playerid, name[])
{
	if(cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "That name is already taken, please choose another.");

	    if(pData[playerid][pFreeNamechange])
	    {
	        ShowPlayerDialog(playerid, DIALOG_FREENAMECHANGE, DIALOG_STYLE_INPUT, "Non-RP Name", "An administrator has came to the conclusion that your name is non-RP.\nTherefore you have been given this free namechange in order to correct it.\n\nEnter a name in the Firstname_Lastname format in the box below:", "Submit", "Cancel");
		}
	}
	else
	{
	    strcpy(pData[playerid][pNameChange], name, MAX_PLAYER_NAME);

		if(pData[playerid][pFreeNamechange]) {
			SM(playerid, COLOR_AQUA, "You have requested a namechange to "SVRCLR"%s{CCFFFF} for free, please wait for admin approval.", name);
		} else {
		    SM(playerid, COLOR_AQUA, "You have requested a namechange to "SVRCLR"%s{CCFFFF} for $%i, please wait for admin approval.", name, pData[playerid][pLevel] * 7500);
		}

		SAM(COLOR_YELLOW, "AdmWarning: %s[%i] is requesting a namechange to %s. (/acceptname %i or /denyname %i)", GetRPName(playerid), playerid, name, playerid, playerid);
	}
}

forward OnPlayerLockFurnitureDoor(playerid, id);
public OnPlayerLockFurnitureDoor(playerid, id)
{
	new status = !cache_get_field_content_int(0, "door_locked");

	if(status) {
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s locks the door.", GetRPName(playerid));
	} else {
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s unlocks the door.", GetRPName(playerid));
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE furniture SET door_locked = %i WHERE id = %i", status, id);
	mysql_tquery(connectionID, queryBuffer);
}

forward OnPlayerUseFurnitureDoor(playerid, objectid, id);
public OnPlayerUseFurnitureDoor(playerid, objectid, id)
{
    if(cache_get_row_int(0, 1))
	{
	    SCM(playerid, COLOR_SYNTAX, "This door is locked.");
	}
	else
	{
		new
			status = !cache_get_row_int(0, 0),
			Float:rx,
			Float:ry,
			Float:rz;

		GetDynamicObjectRot(objectid, rx, ry, rz);

		if(status) {
		    rz -= 90.0;
		} else {
			rz += 90.0;
		}

		SetDynamicObjectRot(objectid, rx, ry, rz);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE furniture SET rot_z = '%f', door_opened = %i WHERE id = %i", rz, status, id);
		mysql_tquery(connectionID, queryBuffer);

		if(status)
		    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s opens the door.", GetRPName(playerid));
		else
		    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s closes the door.", GetRPName(playerid));
	}
}

forward OnPlayerLockLandDoor(playerid, id);
public OnPlayerLockLandDoor(playerid, id)
{
	new status = !cache_get_field_content_int(0, "door_locked");

	if(status) {
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s locks the door.", GetRPName(playerid));
	} else {
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s unlocks the door.", GetRPName(playerid));
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE landobjects SET door_locked = %i WHERE id = %i", status, id);
	mysql_tquery(connectionID, queryBuffer);
}

forward OnPlayerUseLandGate(playerid, objectid, id);
public OnPlayerUseLandGate(playerid, objectid, id)
{
	if(!Streamer_GetExtraInt(objectid, E_OBJECT_OPENED))
	{
	    new
         	Float:x = cache_get_field_content_float(0, "move_x"),
 			Float:y = cache_get_field_content_float(0, "move_y"),
 			Float:z = cache_get_field_content_float(0, "move_z");

	    if(x == 0.0 && y == 0.0 && z == 0.0)
	    {
	        SCM(playerid, COLOR_SYNTAX, "This gate has no destination set.");
	    }
	    else
	    {
			MoveDynamicObject(objectid, x, y, z, 3.0, cache_get_field_content_float(0, "move_rx"), cache_get_field_content_float(0, "move_ry"), cache_get_field_content_float(0, "move_rz"));
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s uses their remote to open the gate.", GetRPName(playerid));
			Streamer_SetExtraInt(objectid, E_OBJECT_OPENED, 1);
		}
	}
	else
	{
		MoveDynamicObject(objectid, cache_get_field_content_float(0, "pos_x"), cache_get_field_content_float(0, "pos_y"), cache_get_field_content_float(0, "pos_z"), 3.0, cache_get_field_content_float(0, "rot_x"), cache_get_field_content_float(0, "rot_y"), cache_get_field_content_float(0, "rot_z"));
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s uses their remote to close the gate.", GetRPName(playerid));
		Streamer_SetExtraInt(objectid, E_OBJECT_OPENED, 0);
	}
}
forward OnPlayerUseLandDoor(playerid, objectid, id);
public OnPlayerUseLandDoor(playerid, objectid, id)
{
    if(cache_get_row_int(0, 1))
	{
	    SCM(playerid, COLOR_SYNTAX, "This door is locked.");
	}
	else
	{
		new
			status = !cache_get_row_int(0, 0),
			Float:rx,
			Float:ry,
			Float:rz;

		GetDynamicObjectRot(objectid, rx, ry, rz);

		if(status) {
		    rz -= 90.0;
		} else {
			rz += 90.0;
		}

		SetDynamicObjectRot(objectid, rx, ry, rz);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE landobjects SET rot_z = '%f', door_opened = %i WHERE id = %i", rz, status, id);
		mysql_tquery(connectionID, queryBuffer);

		if(status)
		    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s opens the door.", GetRPName(playerid));
		else
		    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s closes the door.", GetRPName(playerid));
	}
}

forward OnPlayerAddToPhonebook(playerid, number, name[]);
public OnPlayerAddToPhonebook(playerid, number, name[])
{
	if(cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "That number is already in the phonebook.");
	}
	else
	{
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO phonebook VALUES('%e', %i)", name, number);
		mysql_tquery(connectionID, queryBuffer);

	    SM(playerid, COLOR_YELLOW, "You have added %s with number %i to the phonebook directory.", name, number);
	    Log_Write("log_faction", "%s (uid: %i) added %s with number %i to the phonebook.", GetRPName(playerid), pData[playerid][pID], name, number);
	}

	return 1;
}

forward OnPlayerRemoveFromPhonebook(playerid, number);
public OnPlayerRemoveFromPhonebook(playerid, number)
{
	if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "That number is not in the phonebook.");
	}
	else
	{
	    new name[MAX_PLAYER_NAME];

	    cache_get_row(0, 0, name);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM phonebook WHERE number = %i", number);
		mysql_tquery(connectionID, queryBuffer);

	    SM(playerid, COLOR_YELLOW, "You have removed %s with number %i from the phonebook directory.", name, number);
	    Log_Write("log_faction", "%s (uid: %i) removed %s with number %i from the phonebook.", GetRPName(playerid), pData[playerid][pID], name, number);
	}

	return 1;
}

forward OnPlayerListInjuries(playerid, targetid);
public OnPlayerListInjuries(playerid, targetid)
{
	new rows = cache_get_row_count(connectionID);

    if(!rows)
	{
	    SCM(playerid, COLOR_SYNTAX, "That player doesn't have any injuries.");
	}
	else
	{
	    SM(playerid, SERVER_COLOR, "%s's Injuries", GetRPName(targetid));

	    for(new i = 0; i < rows; i ++)
	    {
			SM(playerid, COLOR_YELLOW, "[%i seconds ago] %s was shot with a %s", gettime() - cache_get_row_int(i, 1), GetRPName(targetid), GetWeaponNameEx(cache_get_row_int(i, 0)));
		}
	}
}

forward OnPlayerOfflineKickFaction(playerid, username[]);
public OnPlayerOfflineKickFaction(playerid, username[])
{
    if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "The player specified doesn't exist.");
	}
	else if(cache_get_row_int(0, 1) != pData[playerid][pFaction])
	{
	    SCM(playerid, COLOR_SYNTAX, "That player is not apart of your faction.");
	}
	else if(cache_get_row_int(0, 2) > pData[playerid][pFactionRank])
	{
	    SCM(playerid, COLOR_SYNTAX, "That player has a higher rank than you.");
	}
	else
	{
	    new uid = cache_get_row_int(0, 0), factionid = cache_get_row_int(0, 1), rankid = cache_get_row_int(0, 2);

		Log_Write("log_faction", "%s (uid: %i) offline kicked %s (uid: %i) from %s (id: %i) as rank %s (%i).", GetPlayerNameEx(playerid), pData[playerid][pID], username, uid, FactionInfo[factionid][fName], factionid, FactionRanks[factionid][rankid], rankid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET faction = -1, factionrank = 0, division = -1 WHERE uid = %i", uid);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "You have offline kicked %s from your faction.", username);
	}
}

forward OnPlayerOfflineKickGang(playerid, username[]);
public OnPlayerOfflineKickGang(playerid, username[])
{
    if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "The player specified doesn't exist.");
	}
	else if(cache_get_row_int(0, 1) != pData[playerid][pGang])
	{
	    SCM(playerid, COLOR_SYNTAX, "That player is not apart of your gang.");
	}
	else if(cache_get_row_int(0, 2) > pData[playerid][pGangRank])
	{
	    SCM(playerid, COLOR_SYNTAX, "That player has a higher rank than you.");
	}
	else
	{
	    new uid = cache_get_row_int(0, 0), gangid = cache_get_row_int(0, 1), rankid = cache_get_row_int(0, 2);

		Log_Write("log_gang", "%s (uid: %i) offline kicked %s (uid: %i) from %s (id: %i) as rank %s (%i).", GetPlayerNameEx(playerid), pData[playerid][pID], username, uid, GangInfo[gangid][gName], gangid, GangRanks[gangid][rankid], rankid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gang = -1, gangrank = 0 WHERE uid = %i", uid);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "You have offline kicked %s from your gang.", username);
	}
}

forward OnPlayerListGangs(playerid, gangid);
public OnPlayerListGangs(playerid, gangid)
{
	new color, members = cache_get_row_int(0, 0), color2, allyname[32];

	if(GangInfo[gangid][gColor] == -1 || GangInfo[gangid][gColor] == -256)
	{
		color = 0xC8C8C8FF;
	}
	else
	{
	    color = GangInfo[gangid][gColor];
	}

	new alliance = GangInfo[gangid][gAlliance];

	if(alliance >= 0)
	{
		strcpy(allyname, GangInfo[alliance][gName]);
		if(GangInfo[alliance][gColor] == -1 || GangInfo[alliance][gColor] == -256)
		{
	    	color2 = 0xC8C8C8FF;
		}
		else
		{
		    color2 = GangInfo[alliance][gColor];
		}
	}
	if(alliance >= 0)
	{
	    SM(playerid, COLOR_GREY2, "{%06x}%i. %s | Leader: %s | Members: %i/%i | Strikes: %i/3 | Ally: {%06x}%s", color >>> 8, gangid, GangInfo[gangid][gName], GangInfo[gangid][gLeader], members, GetGangMemberLimit(gangid), GangInfo[gangid][gStrikes], color2 >>> 8, allyname);
	}
	else if(alliance >= 0)
	{
	    SM(playerid, COLOR_GREY2, "{%06x}%i. %s | Leader: %s | Members: %i/%i | Strikes: %i/3 | Ally: {%06x}%s", color >>> 8, gangid, GangInfo[gangid][gName], GangInfo[gangid][gLeader], members, GetGangMemberLimit(gangid), GangInfo[gangid][gStrikes], color2 >>> 8, allyname);
	}
	else
	{
		SM(playerid, COLOR_GREY2, "{%06x}%i. %s | Leader: %s | Members: %i/%i | Strikes: %i/3", color >>> 8, gangid, GangInfo[gangid][gName], GangInfo[gangid][gLeader], members, GetGangMemberLimit(gangid), GangInfo[gangid][gStrikes]);
	}
}

forward OnPlayerListGangsDiscord(gangid);
public OnPlayerListGangsDiscord(gangid)
{
	new DCC_Channel:channel = DCC_FindChannelById("926138919857315850");
	new members = cache_get_row_int(0, 0), allyname[32];
	new string[128];

	new alliance = GangInfo[gangid][gAlliance];

	if(alliance >= 0)
	{
		strcpy(allyname, GangInfo[alliance][gName]);
	}
	if(alliance >= 0)
	{
	    format(string, sizeof(string), "%i. %s | Leader: %s | Members: %i/%i | Strikes: %i/3 | Ally: %s", gangid, GangInfo[gangid][gName], GangInfo[gangid][gLeader], members, GetGangMemberLimit(gangid), GangInfo[gangid][gStrikes], allyname);
	}
	else if(alliance >= 0)
	{
	    format(string, sizeof(string), "%i. %s | Leader: %s | Members: %i/%i | Strikes: %i/3 | Ally: %s", gangid, GangInfo[gangid][gName], GangInfo[gangid][gLeader], members, GetGangMemberLimit(gangid), GangInfo[gangid][gStrikes], allyname);
	}
	else
	{
		format(string, sizeof(string), "%i. %s | Leader: %s | Members: %i/%i | Strikes: %i/3", gangid, GangInfo[gangid][gName], GangInfo[gangid][gLeader], members, GetGangMemberLimit(gangid), GangInfo[gangid][gStrikes]);
	}
	DCC_SendChannelMessage(channel, string);
}

forward OnPlayerListFactions(playerid, factionid);
public OnPlayerListFactions(playerid, factionid)
{
	new color, members = cache_get_row_int(0, 0), szMessage[1080], factioncount;

	if(FactionInfo[factionid][fColor] == -1 || FactionInfo[factionid][fColor] == -256)
	{
		color = 0xC8C8C8FF;
	}
	else
	{
	    color = FactionInfo[factionid][fColor];
	}

	foreach(new i : Player)
	{
	    if(pData[i][pLogged] && pData[i][pFaction] == factionid)
	    {
	    	factioncount++;
	    }
	}

	if(FactionInfo[factionid][fType] == FACTION_HITMAN || FactionInfo[factionid][fType] == FACTION_FEDERAL && pData[playerid][pAdmin] < 6)
	{
    	format(szMessage, sizeof(szMessage), "{%06x}%i. %s | "RED"Confidential | Member Online: %i", color >>> 8, factionid, FactionInfo[factionid][fName], factioncount);
	}
   	else
   	{
		format(szMessage, sizeof(szMessage), "{%06x}%i. %s | Leader: %s | Members: %i | Online: %i", color >>> 8, factionid, FactionInfo[factionid][fName], FactionInfo[factionid][fLeader], members, factioncount);
	}
	SCM(playerid, COLOR_GREY, szMessage);
}

forward OnPlayerBuyPhoneNumber(playerid, number);
public OnPlayerBuyPhoneNumber(playerid, number)
{
	if(cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "The specified phone number is already taken.");
	}
	else
	{
	    pData[playerid][pPhone] = number;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET phone = %i WHERE uid = %i", number, pData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    GivePlayerCash(playerid, -100000);
	    GameTextForPlayer(playerid, "~r~-$100000", 5000, 1);

	    SM(playerid, COLOR_WHITE, "** You paid $100000 to change your phone number to %i.", number);
	    Log_Write("log_vip", "%s Donator %s (uid: %i) has purchased phone number: %i for $100000.", GetDonatorRank(pData[playerid][pDonator]), GetPlayerNameEx(playerid), pData[playerid][pID], number);
	}
}

forward OnPlayerSpawnVehicle(playerid, parked);
public OnPlayerSpawnVehicle(playerid, parked)
{
	if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "The slot specified contains no valid vehicle which you can spawn.");
	}
	else
	{
        for(new i = 0; i < MAX_VEHICLES; i ++)
	    {
	        if(IsValidVehicle(i) && VehicleInfo[i][vID] == cache_get_field_content_int(0, "id"))
	        {
	            return SCM(playerid, COLOR_SYNTAX, "This vehicle is spawned already. /v find to track it.");
	    	}
	    }
		if(cache_get_field_content_int(0, "impounded"))
		{
			return SCM(playerid, COLOR_SYNTAX, "This vehicle is impounded. You can release it from the DMV. (/gps)");
		}
 		if(cache_get_field_content_int(0, "broken"))
		{
			return SCM(playerid, COLOR_SYNTAX, "Some parts are broken after getting stoled, (( You can spawned it after 5 days ))");
		}
 	    if(GetSpawnedVehicles(playerid) >= MAX_SPAWNED_VEHICLES)//vipveh
	    {
	        return SendClientMessageEx(playerid, COLOR_GREY, "You can't have more than %i vehicles spawned at a time.", MAX_SPAWNED_VEHICLES);
	    }
	    new
			modelid = cache_get_field_content_int(0, "modelid"),
			Float:x = cache_get_field_content_float(0, "pos_x"),
			Float:y = cache_get_field_content_float(0, "pos_y"),
			Float:z = cache_get_field_content_float(0, "pos_z"),
			Float:a = cache_get_field_content_float(0, "pos_a"),
			color1 = cache_get_field_content_int(0, "color1"),
			color2 = cache_get_field_content_int(0, "color2"),
			vehicleid;

		vehicleid = CreateVehicle(modelid, x, y, z, a, color1, color2, -1);
		GetPlayerPos(playerid, x, y, z);
		SetVehiclePos(vehicleid, x + 1, y + 1, z + 2.0);
		//PutPlayerInVehicle(playerid, vehicleid, 0);


		if(vehicleid != INVALID_VEHICLE_ID)
		{
		    ResetVehicle(vehicleid);

		    cache_get_field_content(0, "owner", VehicleInfo[vehicleid][vOwner], connectionID, MAX_PLAYER_NAME);
		    cache_get_field_content(0, "plate", VehicleInfo[vehicleid][vPlate], connectionID, 32);

		    VehicleInfo[vehicleid][vID] = cache_get_field_content_int(0, "id");
		    VehicleInfo[vehicleid][vOwnerID] = cache_get_field_content_int(0, "ownerid");
		    VehicleInfo[vehicleid][vPrice] = cache_get_field_content_int(0, "price");
		    VehicleInfo[vehicleid][vTickets] = cache_get_field_content_int(0, "tickets");
		    VehicleInfo[vehicleid][vLocked] = cache_get_field_content_int(0, "locked");
		    VehicleInfo[vehicleid][vStolen] = cache_get_field_content_int(0, "broken");
		    VehicleInfo[vehicleid][vHealth] = cache_get_field_content_float(0, "health");
		    VehicleInfo[vehicleid][vPaintjob] = cache_get_field_content_int(0, "paintjob");
		    VehicleInfo[vehicleid][vInterior] = cache_get_field_content_int(0, "interior");
	        VehicleInfo[vehicleid][vWorld] = cache_get_field_content_int(0, "world");
	        VehicleInfo[vehicleid][vNeon] = cache_get_field_content_int(0, "neon");
	        VehicleInfo[vehicleid][vNeonEnabled] = cache_get_field_content_int(0, "neonenabled");
	        VehicleInfo[vehicleid][vTrunk] = cache_get_field_content_int(0, "trunk");
	        VehicleInfo[vehicleid][vMods][0] = cache_get_field_content_int(0, "mod_1");
	        VehicleInfo[vehicleid][vMods][1] = cache_get_field_content_int(0, "mod_2");
	        VehicleInfo[vehicleid][vMods][2] = cache_get_field_content_int(0, "mod_3");
	        VehicleInfo[vehicleid][vMods][3] = cache_get_field_content_int(0, "mod_4");
	        VehicleInfo[vehicleid][vMods][4] = cache_get_field_content_int(0, "mod_5");
	        VehicleInfo[vehicleid][vMods][5] = cache_get_field_content_int(0, "mod_6");
	        VehicleInfo[vehicleid][vMods][6] = cache_get_field_content_int(0, "mod_7");
	        VehicleInfo[vehicleid][vMods][7] = cache_get_field_content_int(0, "mod_8");
	        VehicleInfo[vehicleid][vMods][8] = cache_get_field_content_int(0, "mod_9");
	        VehicleInfo[vehicleid][vMods][9] = cache_get_field_content_int(0, "mod_10");
	        VehicleInfo[vehicleid][vMods][10] = cache_get_field_content_int(0, "mod_11");
	        VehicleInfo[vehicleid][vMods][11] = cache_get_field_content_int(0, "mod_12");
	        VehicleInfo[vehicleid][vMods][12] = cache_get_field_content_int(0, "mod_13");
	        VehicleInfo[vehicleid][vMods][13] = cache_get_field_content_int(0, "mod_14");
	        VehicleInfo[vehicleid][vCash] = cache_get_field_content_int(0, "cash");
	        VehicleInfo[vehicleid][vMaterials] = cache_get_field_content_int(0, "materials");
	        VehicleInfo[vehicleid][vPot] = cache_get_field_content_int(0, "pot");
	        VehicleInfo[vehicleid][vCrack] = cache_get_field_content_int(0, "crack");
	        VehicleInfo[vehicleid][vMeth] = cache_get_field_content_int(0, "meth");
	        VehicleInfo[vehicleid][vPainkillers] = cache_get_field_content_int(0, "painkillers");
	        VehicleInfo[vehicleid][vWeapons][0] = cache_get_field_content_int(0, "weapon_1");
	        VehicleInfo[vehicleid][vWeapons][1] = cache_get_field_content_int(0, "weapon_2");
	        VehicleInfo[vehicleid][vWeapons][2] = cache_get_field_content_int(0, "weapon_3");
            VehicleInfo[vehicleid][vHPAmmo] = cache_get_field_content_int(0, "hpammo");
            VehicleInfo[vehicleid][vPoisonAmmo] = cache_get_field_content_int(0, "poisonammo");
            VehicleInfo[vehicleid][vFMJAmmo] = cache_get_field_content_int(0, "fmjammo");
	        VehicleInfo[vehicleid][vGang] = -1;
	        VehicleInfo[vehicleid][vFactionType] = FACTION_NONE;
	        VehicleInfo[vehicleid][vJob] = JOB_NONE;
	        VehicleInfo[vehicleid][vRespawnDelay] = -1;
	        VehicleInfo[vehicleid][vModel] = modelid;
		    VehicleInfo[vehicleid][vPosX] = x;
		    VehicleInfo[vehicleid][vPosY] = y;
		    VehicleInfo[vehicleid][vPosZ] = z;
		    VehicleInfo[vehicleid][vPosA] = a;
		    VehicleInfo[vehicleid][vColor1] = color1;
		    VehicleInfo[vehicleid][vColor2] = color2;
		    VehicleInfo[vehicleid][vObjects][0] = INVALID_OBJECT_ID;
		    VehicleInfo[vehicleid][vObjects][1] = INVALID_OBJECT_ID;
		    VehicleInfo[vehicleid][vTimer] = -1;

			vehicleFuel[vehicleid] = cache_get_field_content_int(0, "fuel");
			adminVehicle{vehicleid} = false;

			ReloadVehicle(vehicleid);

		    if(!parked)
			{
			    SCMf(playerid, COLOR_WHITE, "You have spawned your {C2A2DA}%s{FFFFFF} which is located in {F7A763}%s | Vehicle ID: "BLUE"%i{FFFFFF}, 	/v find to track it.", GetVehicleName(vehicleid), GetVehicleZoneName(vehicleid), vehicleid);
			}
	    }
	}

	return 1;
}

forward OnPlayerAttachCopClothing(playerid, name[], clothingid);
public OnPlayerAttachCopClothing(playerid, name[], clothingid)
{
	strcpy(ClothingInfo[playerid][clothingid][cName], name, 32);

    ClothingInfo[playerid][clothingid][cID] = cache_insert_id(connectionID);
    ClothingInfo[playerid][clothingid][cExists] = 1;
	ClothingInfo[playerid][clothingid][cAttached] = 0;
	ClothingInfo[playerid][clothingid][cAttachedIndex] = -1;

 	SCMf(playerid, COLOR_AQUA, "%s added to clothing inventory. /clothing to attach your new item.", name);
}


forward OnPlayerBuyClothingItem(playerid, name[], price, businessid, clothingid);
public OnPlayerBuyClothingItem(playerid, name[], price, businessid, clothingid)
{
    new string[16];

	strcpy(ClothingInfo[playerid][clothingid][cName], name, 32);

    ClothingInfo[playerid][clothingid][cID] = cache_insert_id(connectionID);
    ClothingInfo[playerid][clothingid][cExists] = 1;
	ClothingInfo[playerid][clothingid][cAttached] = 0;
	ClothingInfo[playerid][clothingid][cAttachedIndex] = -1;

	BusinessInfo[businessid][bCash] += price;
	BusinessInfo[businessid][bProducts]--;

 	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
 	mysql_tquery(connectionID, queryBuffer);

	GivePlayerCash(playerid, -price);
 	SM(playerid, COLOR_AQUA, "%s purchased for $%i. /clothing to find your new item.", name, price);

    format(string, sizeof(string), "~r~-$%i", price);
	GameTextForPlayer(playerid, string, 5000, 1);
}

forward OnPlayerSendTextMessage(playerid, number, msg[]);
public OnPlayerSendTextMessage(playerid, number, msg[])
{
	if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_ERROR, "The number you're trying to reach does not belong to any particular person.");
	}
	else if(cache_get_row_int(0, 1))
	{
	    SCM(playerid, COLOR_ERROR, "That player is currently imprisoned and cannot use their phone.");
 	}
 	else if(cache_get_row_int(0, 2))
 	{
 	    SCM(playerid, COLOR_ERROR, "That player has their mobile phone switched off.");
	}
 	else
	{
	    new
	        username[MAX_PLAYER_NAME];

	    cache_get_row(0, 0, username);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO texts VALUES(null, %i, %i, '%s', NOW(), '%e')", pData[playerid][pPhone], number, GetPlayerNameEx(playerid), msg);
	    mysql_tquery(connectionID, queryBuffer);

        SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s takes out a cellphone and sends a message.", GetRPName(playerid));
	    SCMf(playerid, COLOR_YELLOW, "** SMS to %s (%i): %s **", username, number, msg);
	    SCM(playerid, COLOR_WHITE, "** The player who owns the number is offline, but will receive your text when they log in.");

        GivePlayerCash(playerid, -1);
        GameTextForPlayer(playerid, "~w~Text sent!~n~~r~-$1", 5000, 1);
	}
}

forward OnPlayerRentHouse(playerid, houseid);
public OnPlayerRentHouse(playerid, houseid)
{
	if(cache_get_row_int(0, 0) >= GetHouseTenantCapacity(houseid))
	{
	    SM(playerid, COLOR_SYNTAX, "This house has reached its limit of %i tenants.", GetHouseTenantCapacity(houseid));
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rentinghouse = %i WHERE uid = %i", HouseInfo[houseid][hID], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		pData[playerid][pRentingHouse] = HouseInfo[houseid][hID];
		SM(playerid, COLOR_YELLOW, "You are now renting at %s's house. You will pay $%i every paycheck.", HouseInfo[houseid][hOwner], HouseInfo[houseid][hRentPrice]);
	}
}

forward OnPlayerEvict(playerid, username[]);
public OnPlayerEvict(playerid, username[])
{
	if(!cache_get_row_count(connectionID))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player doesn't exist, or is not renting at your home.");
	}
	else
	{
	    foreach(new i : Player)
	    {
	        if(!strcmp(GetPlayerNameEx(i), username) && pData[i][pLogged])
	        {
	            pData[i][pRentingHouse] = 0;
	            SCM(i, COLOR_RED, "You have been evicted from your home by the owner.");
	        }
	    }

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rentinghouse = 0 WHERE username = '%e'", username);
	    mysql_tquery(connectionID, queryBuffer);

        SM(playerid, COLOR_WHITE, "** You have evicted %s from your property.", username);
	}

	return 1;
}

forward OnListPlayerFlags(playerid, targetid);
public OnListPlayerFlags(playerid, targetid)
{
	new rows = cache_get_row_count(connectionID);

	if(!rows)
	{
	    SCM(playerid, COLOR_SYNTAX, "This player has no flags listed under their account.");
	}
	else
	{
	    new flaggedby[24], date[24], desc[128];

	    SM(playerid, SERVER_COLOR, "%s's Flags", GetRPName(targetid));

	    for(new i = 0; i < rows; i ++)
	    {
	        cache_get_field_content(i, "flaggedby", flaggedby);
	        cache_get_field_content(i, "date", date);
	        cache_get_field_content(i, "description", desc);

	        SM(playerid, COLOR_GREY2, "[%i][%s] %s (from: %s)", i + 1, date, desc, flaggedby);
	    }
	}
}

forward OnUpdatePartner(playerid);
public OnUpdatePartner(playerid)
{
    if(cache_get_row_count(connectionID))
	{
	    cache_get_field_content(0, "username", pData[playerid][pMarriedName], connectionID, MAX_PLAYER_NAME);
	}
}

forward OnVerifyRemoveFlag(playerid, targetid, slot);
public OnVerifyRemoveFlag(playerid, targetid, slot)
{
	if(cache_get_row_count(connectionID))
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM flags WHERE id = %i", cache_get_row_int(0, 0));
	    mysql_tquery(connectionID, queryBuffer);

	    SM(playerid, COLOR_YELLOW, "** %s's flag in slot %i was removed.", GetRPName(targetid), slot);
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "That player has no outstanding flag in that slot.");
	}
}

forward OnAdminCreateLocker(playerid, lockerid, factionid, Float:x, Float:y, Float:z, interior, world);
public OnAdminCreateLocker(playerid, lockerid, factionid, Float:x, Float:y, Float:z, interior, world)
{
	LockerInfo[lockerid][lID] = cache_insert_id(connectionID);
	LockerInfo[lockerid][lExists] = 1;
	LockerInfo[lockerid][lFaction] = factionid;
    LockerInfo[lockerid][lPosX] = x;
    LockerInfo[lockerid][lPosY] = y;
    LockerInfo[lockerid][lPosZ] = z;
    LockerInfo[lockerid][lInterior] = interior;
    LockerInfo[lockerid][lWorld] = world;
	LockerInfo[lockerid][lIcon] = 1239;
	LockerInfo[lockerid][lLabel] = 1;

    // CHANGE SQL TOO PLS
    LockerInfo[lockerid][locKevlar] = { 1, 100 };
    LockerInfo[lockerid][locMedKit] = { 1, 50 };
    LockerInfo[lockerid][locNitestick] = { 0, 0 };
    LockerInfo[lockerid][locMace] = { 0, 0 };
    LockerInfo[lockerid][locDeagle] = { 1, 850 };
    LockerInfo[lockerid][locShotgun] = { 1, 1000 };
    LockerInfo[lockerid][locMP5] = { 1, 1500 };
    LockerInfo[lockerid][locM4] = { 1, 2500 };
    LockerInfo[lockerid][locSpas12] = { 1, 3500 };
    LockerInfo[lockerid][locSniper] = { 1, 5000 };
    LockerInfo[lockerid][locCamera] = { 0, 0 };
    LockerInfo[lockerid][locFireExt] = { 0, 0 };
    LockerInfo[lockerid][locPainKillers] = { 0, 0 };

    LockerInfo[lockerid][lText] = Text3D:INVALID_3DTEXT_ID;
    LockerInfo[lockerid][lPickup] = -1;

    ReloadLocker(lockerid);
    SCMf(playerid, COLOR_GREEN, "* Locker %i created for %s.", lockerid, FactionInfo[factionid][fName]);
}

forward OnAdminCreateAtm(playerid, atm, Float:x, Float:y, Float:z, Float:a);
public OnAdminCreateAtm(playerid, atm, Float:x, Float:y, Float:z, Float:a)
{
    AtmInfo[atm][aID] = cache_insert_id(connectionID);
	AtmInfo[atm][aExists] = true;
    AtmInfo[atm][aPosX] = x;
    AtmInfo[atm][aPosY] = y;
    AtmInfo[atm][aPosZ] = z;
    AtmInfo[atm][aPosA] = a;

	ReloadAtm(atm);
	SCMf(playerid, COLOR_GREEN, "** ATM [%i] created at %.1f, %.1f, %.1f.", atm, x, y, z);
}

forward OnAdminCreateVen(playerid, atm, Float:x, Float:y, Float:z, Float:a);
public OnAdminCreateVen(playerid, atm, Float:x, Float:y, Float:z, Float:a)
{
    VenInfo[atm][aID] = cache_insert_id(connectionID);
	VenInfo[atm][aExists] = true;
    VenInfo[atm][aPosX] = x;
    VenInfo[atm][aPosY] = y;
    VenInfo[atm][aPosZ] = z;
    VenInfo[atm][aPosA] = a;

	ReloadVen(atm);
	SCMf(playerid, COLOR_YELLOW, "** VENDOR [%i] created at %.1f, %.1f, %.1f.", atm, x, y, z);
}
forward OnAdminCreateMdc(playerid, atm, Float:x, Float:y, Float:z, Float:a);
public OnAdminCreateMdc(playerid, atm, Float:x, Float:y, Float:z, Float:a)
{
    MdcInfo[atm][aID] = cache_insert_id(connectionID);
	MdcInfo[atm][aExists] = true;
    MdcInfo[atm][aPosX] = x;
    MdcInfo[atm][aPosY] = y;
    MdcInfo[atm][aPosZ] = z;
    MdcInfo[atm][aPosA] = a;

	ReloadMdc(atm);
	SCMf(playerid, COLOR_YELLOW, "** Mdc [%i] created at %.1f, %.1f, %.1f.", atm, x, y, z);
}

forward OnAdminCreateSur(playerid, atm, Float:x, Float:y, Float:z, Float:a);
public OnAdminCreateSur(playerid, atm, Float:x, Float:y, Float:z, Float:a)
{
    SurInfo[atm][aID] = cache_insert_id(connectionID);
	SurInfo[atm][aExists] = true;
    SurInfo[atm][aPosX] = x;
    SurInfo[atm][aPosY] = y;
    SurInfo[atm][aPosZ] = z;
    SurInfo[atm][aPosA] = a;

	ReloadSur(atm);
	SCMf(playerid, COLOR_YELLOW, "** SURGERY [%i] created at %.1f, %.1f, %.1f.", atm, x, y, z);
}

forward OnAdminCreateBar(playerid, atm, Float:x, Float:y, Float:z, Float:a);
public OnAdminCreateBar(playerid, atm, Float:x, Float:y, Float:z, Float:a)
{
    BarInfo[atm][aID] = cache_insert_id(connectionID);
	BarInfo[atm][aExists] = true;
    BarInfo[atm][aPosX] = x;
    BarInfo[atm][aPosY] = y;
    BarInfo[atm][aPosZ] = z;
    BarInfo[atm][aPosA] = a;

	ReloadBar(atm);
	SCMf(playerid, COLOR_YELLOW, "** BAR [%i] created at %.1f, %.1f, %.1f.", atm, x, y, z);
}
forward OnAdminCreatePG(playerid, atm, Float:x, Float:y, Float:z, Float:a);
public OnAdminCreatePG(playerid, atm, Float:x, Float:y, Float:z, Float:a)
{
    PGInfo[atm][aID] = cache_insert_id(connectionID);
	PGInfo[atm][aExists] = true;
    PGInfo[atm][aPosX] = x;
    PGInfo[atm][aPosY] = y;
    PGInfo[atm][aPosZ] = z;
    PGInfo[atm][aPosA] = a;

	ReloadPG(atm);
	SCMf(playerid, COLOR_YELLOW, "** Public Garage [%i] created at %.1f, %.1f, %.1f.", atm, x, y, z);
}
forward OnAdminOfflineCheck(playerid, username[]);
public OnAdminOfflineCheck(playerid, username[])
{
    if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "The player specified doesn't exist.");
	}
	else
	{
	    // At first I didn't know how I was going to do this. But then I came up with a plan.
	    // Load everything into an unused player slot, use DisplayStats as normal, then destroy the data.
	    // This ensures that whenever I add a new thing to /stats for instance, I don't have to maintain
	    // two stats functions, I can just call DisplayStats and let the work do itself.

	    pData[MAX_PLAYERS][pID] = cache_get_field_content_int(0, "uid");
	    pData[MAX_PLAYERS][pFirstSpawn] = cache_get_field_content_int(0, "firstspawn");
		pData[MAX_PLAYERS][pSetup] = cache_get_field_content_int(0, "setup");
        pData[MAX_PLAYERS][pGender] = cache_get_field_content_int(0, "gender");
        pData[MAX_PLAYERS][pAge] = cache_get_field_content_int(0, "age");
        pData[MAX_PLAYERS][pSkin] = cache_get_field_content_int(0, "skin");
        pData[MAX_PLAYERS][pCameraX] = cache_get_field_content_float(0, "camera_x");
        pData[MAX_PLAYERS][pCameraY] = cache_get_field_content_float(0, "camera_y");
        pData[MAX_PLAYERS][pCameraZ] = cache_get_field_content_float(0, "camera_z");
        pData[MAX_PLAYERS][pPosX] = cache_get_field_content_float(0, "pos_x");
        pData[MAX_PLAYERS][pPosY] = cache_get_field_content_float(0, "pos_y");
        pData[MAX_PLAYERS][pPosZ] = cache_get_field_content_float(0, "pos_z");
        pData[MAX_PLAYERS][pPosA] = cache_get_field_content_float(0, "pos_a");
        pData[MAX_PLAYERS][pInterior] = cache_get_field_content_int(0, "interior");
        pData[MAX_PLAYERS][pWorld] = cache_get_field_content_int(0, "world");
        pData[MAX_PLAYERS][pCash] = cache_get_field_content_int(0, "cash");
        pData[MAX_PLAYERS][pBank] = cache_get_field_content_int(0, "bank");
        pData[MAX_PLAYERS][pPaycheck] = cache_get_field_content_int(0, "paycheck");
        pData[MAX_PLAYERS][pLevel] = cache_get_field_content_int(0, "level");
        pData[MAX_PLAYERS][pCrowbar] = cache_get_field_content_int(0, "crowbar");
        pData[MAX_PLAYERS][pHelmet] = cache_get_field_content_int(0, "helmet");
        pData[MAX_PLAYERS][pFirework] = cache_get_field_content_int(0, "firework");
        pData[MAX_PLAYERS][pEXP] = cache_get_field_content_int(0, "exp");
        pData[MAX_PLAYERS][pMinutes] = cache_get_field_content_int(0, "minutes");
        pData[MAX_PLAYERS][pHours] = cache_get_field_content_int(0, "hours");
		pData[MAX_PLAYERS][pSeconds] = cache_get_field_content_int(0, "seconds");
		pData[MAX_PLAYERS][pPlayingHours] = cache_get_field_content_int(0, "playinghours");
        pData[MAX_PLAYERS][pAdmin] = cache_get_field_content_int(0, "adminlevel");
        pData[MAX_PLAYERS][pHelper] = cache_get_field_content_int(0, "helperlevel");
        pData[MAX_PLAYERS][pHealth] = cache_get_field_content_float(0, "health");
        pData[MAX_PLAYERS][pArmor] = cache_get_field_content_float(0, "armor");
		pData[MAX_PLAYERS][pWarnings] = cache_get_field_content_int(0, "warnings");
		pData[MAX_PLAYERS][pInjured] = cache_get_field_content_int(0, "injured");
		pData[MAX_PLAYERS][pBrokenLeg] = cache_get_field_content_int(0, "brokenleg");
		pData[MAX_PLAYERS][pHospital] = cache_get_field_content_int(0, "hospital");
		pData[MAX_PLAYERS][pSpawnHealth] = cache_get_field_content_float(0, "spawnhealth");
        pData[MAX_PLAYERS][pSpawnArmor] = cache_get_field_content_float(0, "spawnarmor");
        pData[MAX_PLAYERS][pJailType] = cache_get_field_content_int(0, "jailtype");
        pData[MAX_PLAYERS][pJailTime] = cache_get_field_content_int(0, "jailtime");
        pData[MAX_PLAYERS][pBedType] = cache_get_field_content_int(0, "bedtype");
        pData[MAX_PLAYERS][pBedTime] = cache_get_field_content_int(0, "bedtime");
    	pData[MAX_PLAYERS][pAMute] = cache_get_field_content_int(0, "amuted");
		pData[MAX_PLAYERS][pAMCount] = cache_get_field_content_int(0, "amcount");
        pData[MAX_PLAYERS][pNewbieMuted] = cache_get_field_content_int(0, "newbiemuted");
        pData[MAX_PLAYERS][pHelpMuted] = cache_get_field_content_int(0, "helpmuted");
        pData[MAX_PLAYERS][pAdMuted] = cache_get_field_content_int(0, "admuted");
        pData[MAX_PLAYERS][pLiveMuted] = cache_get_field_content_int(0, "livemuted");
        pData[MAX_PLAYERS][pGlobalMuted] = cache_get_field_content_int(0, "globalmuted");
        pData[MAX_PLAYERS][pReportMuted] = cache_get_field_content_int(0, "reportmuted");
        pData[MAX_PLAYERS][pReportWarns] = cache_get_field_content_int(0, "reportwarns");
        pData[MAX_PLAYERS][pFightStyle] = cache_get_field_content_int(0, "fightstyle");
        pData[MAX_PLAYERS][pDirtyCash] = cache_get_field_content_int(0, "dirtycash");

		/*#if defined Christmas
	#else
			pData[MAX_PLAYERS][pCandy] = cache_get_field_content_int(0, "candy");
		#endif*/

		pData[MAX_PLAYERS][pPhone] = cache_get_field_content_int(0, "phone");
		pData[MAX_PLAYERS][pLottery] = cache_get_field_content_int(0, "lottery");
		pData[MAX_PLAYERS][pJob] = cache_get_field_content_int(0, "job");
		pData[MAX_PLAYERS][pSecondJob] = cache_get_field_content_int(0, "secondjob");
		pData[MAX_PLAYERS][pCrimes] = cache_get_field_content_int(0, "crimes");
		pData[MAX_PLAYERS][pArrested] = cache_get_field_content_int(0, "arrested");
		pData[MAX_PLAYERS][pWantedLevel] = cache_get_field_content_int(0, "wantedlevel");
		pData[MAX_PLAYERS][pMaterials] = cache_get_field_content_int(0, "materials");
		pData[MAX_PLAYERS][pPot] = cache_get_field_content_int(0, "pot");
		pData[MAX_PLAYERS][pCrack] = cache_get_field_content_int(0, "crack");
		pData[MAX_PLAYERS][pMeth] = cache_get_field_content_int(0, "meth");
		pData[MAX_PLAYERS][pPainkillers] = cache_get_field_content_int(0, "painkillers");
		pData[MAX_PLAYERS][pSeeds] = cache_get_field_content_int(0, "seeds");
		pData[MAX_PLAYERS][pEphedrine] = cache_get_field_content_int(0, "ephedrine");
		pData[MAX_PLAYERS][pMuriaticAcid] = cache_get_field_content_int(0, "muriaticacid");
		pData[MAX_PLAYERS][pBakingSoda] = cache_get_field_content_int(0, "bakingsoda");
		pData[MAX_PLAYERS][pCigars] = cache_get_field_content_int(0, "cigars");
		pData[MAX_PLAYERS][pFood] = cache_get_field_content_int(0, "food");
		pData[MAX_PLAYERS][pDrink] = cache_get_field_content_int(0, "drink");
		pData[MAX_PLAYERS][pVest] = cache_get_field_content_int(0, "vest");
		pData[MAX_PLAYERS][pWalkieTalkie] = cache_get_field_content_int(0, "walkietalkie");
		pData[MAX_PLAYERS][pChannel] = cache_get_field_content_int(0, "channel");
		pData[MAX_PLAYERS][pRentingHouse] = cache_get_field_content_int(0, "rentinghouse");
		pData[MAX_PLAYERS][pSpraycans] = cache_get_field_content_int(0, "spraycans");
		pData[MAX_PLAYERS][pChatstyle] = cache_get_field_content_int(0, "chatstyle");
		pData[MAX_PLAYERS][pBandage] = cache_get_field_content_int(0, "bandage");
		pData[MAX_PLAYERS][pMedkit] = cache_get_field_content_int(0, "medkit");
		pData[MAX_PLAYERS][pRepairKit] = cache_get_field_content_int(0, "repairkit");
		pData[MAX_PLAYERS][pParts] = cache_get_field_content_int(0, "parts");
		pData[MAX_PLAYERS][pBoombox] = cache_get_field_content_int(0, "boombox");
		pData[MAX_PLAYERS][pMP3Player] = cache_get_field_content_int(0, "mp3player");
		pData[MAX_PLAYERS][pPhonebook] = cache_get_field_content_int(0, "phonebook");
		pData[MAX_PLAYERS][pFishingRod] = cache_get_field_content_int(0, "fishingrod");
		pData[MAX_PLAYERS][pFishingBait] = cache_get_field_content_int(0, "fishingbait");
		pData[MAX_PLAYERS][pFishWeight] = cache_get_field_content_int(0, "fishweight");
		pData[MAX_PLAYERS][pFishingSkill] = cache_get_field_content_int(0, "fishingskill");
		pData[MAX_PLAYERS][pGuardSkill] = cache_get_field_content_int(0, "guardskill");
		pData[MAX_PLAYERS][pWeaponSkill] = cache_get_field_content_int(0, "weaponskill");
		pData[MAX_PLAYERS][pLawyerSkill] = cache_get_field_content_int(0, "lawyerskill");
		pData[MAX_PLAYERS][pSmugglerSkill] = cache_get_field_content_int(0, "smugglerskill");
		pData[MAX_PLAYERS][pToggleTextdraws] = cache_get_field_content_int(0, "toggletextdraws");
		pData[MAX_PLAYERS][pToggleOOC] = cache_get_field_content_int(0, "toggleooc");
		pData[MAX_PLAYERS][pTogglePhone] = cache_get_field_content_int(0, "togglephone");
		pData[MAX_PLAYERS][pToggleAdmin] = cache_get_field_content_int(0, "toggleadmin");
		pData[MAX_PLAYERS][pToggleHelper] = cache_get_field_content_int(0, "togglehelper");
		pData[MAX_PLAYERS][pToggleNewbie] = cache_get_field_content_int(0, "togglenewbie");
		pData[MAX_PLAYERS][pToggleWT] = cache_get_field_content_int(0, "togglewt");
		pData[MAX_PLAYERS][pToggleRadio] = cache_get_field_content_int(0, "toggleradio");
		pData[MAX_PLAYERS][pToggleVIP] = cache_get_field_content_int(0, "togglevip");
		pData[MAX_PLAYERS][pToggleMusic] = cache_get_field_content_int(0, "togglemusic");
		pData[MAX_PLAYERS][pToggleFaction] = cache_get_field_content_int(0, "togglefaction");
		pData[MAX_PLAYERS][pToggleNews] = cache_get_field_content_int(0, "togglenews");
		pData[MAX_PLAYERS][pToggleGlobal] = cache_get_field_content_int(0, "toggleglobal");
		pData[MAX_PLAYERS][pToggleCam] = cache_get_field_content_int(0, "togglecam");
		pData[MAX_PLAYERS][pToggleHUD] = cache_get_field_content_int(0, "togglehud");
		pData[MAX_PLAYERS][pCarLicense] = cache_get_field_content_int(0, "carlicense");
		pData[MAX_PLAYERS][pWeaponLicense] = cache_get_field_content_int(0, "gunlicense");
		pData[MAX_PLAYERS][pDonator] = cache_get_field_content_int(0, "vippackage");
		pData[MAX_PLAYERS][pVIPTime] = cache_get_field_content_int(0, "viptime");
		pData[MAX_PLAYERS][pVIPCooldown] = cache_get_field_content_int(0, "vipcooldown");
		pData[MAX_PLAYERS][pWeapons][0] = cache_get_field_content_int(0, "weapon_0");
		pData[MAX_PLAYERS][pWeapons][1] = cache_get_field_content_int(0, "weapon_1");
		pData[MAX_PLAYERS][pWeapons][2] = cache_get_field_content_int(0, "weapon_2");
		pData[MAX_PLAYERS][pWeapons][3] = cache_get_field_content_int(0, "weapon_3");
		pData[MAX_PLAYERS][pWeapons][4] = cache_get_field_content_int(0, "weapon_4");
		pData[MAX_PLAYERS][pWeapons][5] = cache_get_field_content_int(0, "weapon_5");
		pData[MAX_PLAYERS][pWeapons][6] = cache_get_field_content_int(0, "weapon_6");
		pData[MAX_PLAYERS][pWeapons][7] = cache_get_field_content_int(0, "weapon_7");
		pData[MAX_PLAYERS][pWeapons][8] = cache_get_field_content_int(0, "weapon_8");
		pData[MAX_PLAYERS][pWeapons][9] = cache_get_field_content_int(0, "weapon_9");
		pData[MAX_PLAYERS][pWeapons][10] = cache_get_field_content_int(0, "weapon_10");
		pData[MAX_PLAYERS][pWeapons][11] = cache_get_field_content_int(0, "weapon_11");
		pData[MAX_PLAYERS][pWeapons][12] = cache_get_field_content_int(0, "weapon_12");
		pData[MAX_PLAYERS][pFaction] = cache_get_field_content_int(0, "faction");
		pData[MAX_PLAYERS][pFactionRank] = cache_get_field_content_int(0, "factionrank");
		pData[MAX_PLAYERS][pGang] = cache_get_field_content_int(0, "gang");
		pData[MAX_PLAYERS][pGangRank] = cache_get_field_content_int(0, "gangrank");
		pData[MAX_PLAYERS][pDivision] = cache_get_field_content_int(0, "division");
		pData[MAX_PLAYERS][pContracted] = cache_get_field_content_int(0, "contracted");
		pData[MAX_PLAYERS][pBombs] = cache_get_field_content_int(0, "bombs");
		pData[MAX_PLAYERS][pCompletedHits] = cache_get_field_content_int(0, "completedhits");
		pData[MAX_PLAYERS][pFailedHits] = cache_get_field_content_int(0, "failedhits");
		pData[MAX_PLAYERS][pReports] = cache_get_field_content_int(0, "reports");
		pData[MAX_PLAYERS][pNewbies] = cache_get_field_content_int(0, "newbies");
		pData[MAX_PLAYERS][pHelpRequests] = cache_get_field_content_int(0, "helprequests");
		pData[MAX_PLAYERS][pSpeedometer] = cache_get_field_content_int(0, "speedometer");

		pData[MAX_PLAYERS][pStaffLeader] = cache_get_field_content_int(0, "staffleader");
		pData[MAX_PLAYERS][pStaff] = cache_get_field_content_int(0, "staff");

		pData[MAX_PLAYERS][pDeveloper] = cache_get_field_content_int(0, "developer");
		pData[MAX_PLAYERS][pDynamicAdmin] = cache_get_field_content_int(0, "dynamicadmin");
		pData[MAX_PLAYERS][pFactionMod] = cache_get_field_content_int(0, "factionmod");
		pData[MAX_PLAYERS][pAdminPersonnel] = cache_get_field_content_int(0, "adminpersonnel");
		pData[MAX_PLAYERS][pGangMod] = cache_get_field_content_int(0, "gangmod");
		pData[MAX_PLAYERS][pBanAppealer] = cache_get_field_content_int(0, "banappealer");
  		pData[MAX_PLAYERS][pEventMod] = cache_get_field_content_int(0, "eventmod");
		pData[MAX_PLAYERS][pPotPlanted] = cache_get_field_content_int(0, "potplanted");
		pData[MAX_PLAYERS][pPotTime] = cache_get_field_content_int(0, "pottime");
		pData[MAX_PLAYERS][pPotGrams] = cache_get_field_content_int(0, "potgrams");
		pData[MAX_PLAYERS][pPotX] = cache_get_field_content_float(0, "pot_x");
		pData[MAX_PLAYERS][pPotY] = cache_get_field_content_float(0, "pot_y");
		pData[MAX_PLAYERS][pPotZ] = cache_get_field_content_float(0, "pot_z");
		pData[MAX_PLAYERS][pPotA] = cache_get_field_content_float(0, "pot_a");
		pData[MAX_PLAYERS][pInventoryUpgrade] = cache_get_field_content_int(0, "inventoryupgrade");
		pData[MAX_PLAYERS][pAddictUpgrade] = cache_get_field_content_int(0, "addictupgrade");
        pData[MAX_PLAYERS][pTraderUpgrade] = cache_get_field_content_int(0, "traderupgrade");
        pData[MAX_PLAYERS][pAssetUpgrade] = cache_get_field_content_int(0, "assetupgrade");
		pData[MAX_PLAYERS][pHPAmmo] = cache_get_field_content_int(0, "hpammo");
		pData[MAX_PLAYERS][pPoisonAmmo] = cache_get_field_content_int(0, "poisonammo");
		pData[MAX_PLAYERS][pFMJAmmo] = cache_get_field_content_int(0, "fmjammo");
		pData[MAX_PLAYERS][pAmmoType] = cache_get_field_content_int(0, "ammotype");
		pData[MAX_PLAYERS][pAmmoWeapon] = cache_get_field_content_int(0, "ammoweapon");
		pData[MAX_PLAYERS][pDMWarnings] = cache_get_field_content_int(0, "dmwarnings");
		pData[MAX_PLAYERS][pWeaponRestricted] = cache_get_field_content_int(0, "weaponrestricted");
		pData[MAX_PLAYERS][pReferralUID] = cache_get_field_content_int(0, "referral_uid");
		pData[MAX_PLAYERS][pWatch] = cache_get_field_content_int(0, "watch");
		pData[MAX_PLAYERS][pGPS] = cache_get_field_content_int(0, "gps");
		pData[MAX_PLAYERS][pRefunded] = cache_get_field_content_int(0, "refunded");
		pData[MAX_PLAYERS][pMonthsary] = cache_get_field_content_int(0, "monthsary");
		pData[MAX_PLAYERS][pMask] = cache_get_field_content_int(0, "mask");
		pData[MAX_PLAYERS][pBlindfold] = cache_get_field_content_int(0, "blindfold");
		pData[MAX_PLAYERS][pHunger] = cache_get_field_content_int(0, "hunger");
		pData[MAX_PLAYERS][pHungerTimer] = cache_get_field_content_int(0, "hungertimer");
		pData[MAX_PLAYERS][pThirst] = cache_get_field_content_int(0, "thirst");
		pData[MAX_PLAYERS][pThirstTimer] = cache_get_field_content_int(0, "thirsttimer");


		strcpy(pData[MAX_PLAYERS][pUsername], username, MAX_PLAYER_NAME);
		DisplayStats(MAX_PLAYERS, playerid);
	}
}

forward OnAdminOfflineFlag(playerid, username[], desc[]);
public OnAdminOfflineFlag(playerid, username[], desc[])
{
	if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "The player specified doesn't exist.");
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO flags VALUES(null, %i, '%s', NOW(), '%e')", cache_get_field_content_int(0, "uid"), GetPlayerNameEx(playerid), desc);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s offline flagged %s's account for '%s'.", GetRPName(playerid), username, desc);
	}
}
forward OnAdminCheckBanHistory(playerid, username[]);
public OnAdminCheckBanHistory(playerid, username[])
{
	new rows = cache_get_row_count(connectionID);

	if(!rows)
	{
		SCM(playerid, COLOR_SYNTAX, "This player has no ban history recorded.");
	}
	else
	{
	    new date[24], description[255];

	    for(new i = 0; i < rows; i ++)
	    {
	        cache_get_row(i, 0, date);
	        cache_get_row(i, 1, description);

	        SM(playerid, COLOR_LIGHTRED, "[%s] %s", date, description);
	    }
	}
}

forward OnAdminCheckLastActive(playerid, username[]);
public OnAdminCheckLastActive(playerid, username[])
{
    if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "The player specified doesn't exist.");
	}
	else
	{
	    new
	        date[40];

     	cache_get_row(0, 0, date);
		//SM(playerid, COLOR_YELLOW, "%s's last logged in was %s (server time).", username, GetDate1());
		SM(playerid, COLOR_YELLOW, "%s's last logged in was %s (server time).", username, date);
	}
}

//Text
forward OnPlayerCheckLastActive(playerid, username[]);
public OnPlayerCheckLastActive(playerid, username[])
{
    if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "The player specified doesn't exist.");
	}
	else
	{
	    new
	        date[40];

     	cache_get_row(0, 0, date);
		SM(playerid, COLOR_YELLOW, "Your last logged in was %s (server time).", date);
	}
}

//Dialog string
stock OnPlayerCheckLastLogin(playerid, username[])
{
	new string[128], specifiers[] = "%D of %M, %Y @ %k:%i";
    if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "The player specified doesn't exist.");
	}
	else
	{
	    new
	        date[40];
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT DATE_FORMAT(lastlogin, '%s') FROM users WHERE username = '%e'", specifiers, username);
		mysql_tquery(connectionID, queryBuffer, "OnPlayerCheckLastLogin", "is", playerid, username);

     	cache_get_row(0, 0, date);
		format(string, sizeof(string), "%s (server time).", date);
	}
	return string;
}

forward OnAdminSetHelperLevel(playerid, username[], level);
public OnAdminSetHelperLevel(playerid, username[], level)
{
    if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "The player specified doesn't exist.");
	}
	else if((pData[playerid][pAdmin] < 6) && cache_get_row_int(0, 0) > pData[playerid][pHelper] && level < cache_get_row_int(0, 0))
	{
	    SCM(playerid, COLOR_SYNTAX, "The player specified has a higher helper level than you. They cannot be demoted.");
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET helperlevel = %i WHERE username = '%e'", level, username);
	    mysql_tquery(connectionID, queryBuffer);

	    SendStaffMessage(COLOR_LIGHTRED, "AdmCmd: %s has offline set %s's helper level to %i.", GetRPName(playerid), username, level);
	    Log_Write("log_admin", "%s (uid: %i) has offline set %s's helper level to %i.", GetPlayerNameEx(playerid), pData[playerid][pID], username, level);
	}
}

forward OnAdminSetAdminLevel(playerid, username[], level);
public OnAdminSetAdminLevel(playerid, username[], level)
{
    if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "The player specified doesn't exist.");
	}
	else if(cache_get_row_int(0, 0) > pData[playerid][pAdmin] && level < cache_get_row_int(0, 0))
	{
	    SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be demoted.");
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET adminlevel = %i WHERE username = '%e'", level, username);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has offline set %s's admin level to %i.", GetRPName(playerid), username, level);
	    Log_Write("log_admin", "%s (uid: %i) has offline set %s's admin level to %i.", GetPlayerNameEx(playerid), pData[playerid][pID], username, level);
	}
}

forward OnAdminCreateTurf(playerid, turfid, name[], type, Float:minx, Float:miny, Float:maxx, Float:maxy, Float:height);
public OnAdminCreateTurf(playerid, turfid, name[], type, Float:minx, Float:miny, Float:maxx, Float:maxy, Float:height)
{
	strcpy(TurfInfo[turfid][tName], name, 32);
	strcpy(TurfInfo[turfid][tCapturedBy], "Pending", MAX_PLAYER_NAME);

	TurfInfo[turfid][tExists] = 1;
	TurfInfo[turfid][tCapturedGang] = -1;
	TurfInfo[turfid][tTime] = 6;
	TurfInfo[turfid][tType] = type;
	TurfInfo[turfid][tMinX] = minx;
	TurfInfo[turfid][tMinY] = miny;
	TurfInfo[turfid][tMaxX] = maxx;
	TurfInfo[turfid][tMaxY] = maxy;
	TurfInfo[turfid][tHeight] = height;
	TurfInfo[turfid][tGangZone] = -1;
	TurfInfo[turfid][tArea] = -1;
	TurfInfo[turfid][tCaptureTime] = 0;
	TurfInfo[turfid][tCapturer] = INVALID_PLAYER_ID;

	ReloadTurf(turfid);
	SM(playerid, COLOR_YELLOW, "** Turf %i created successfully.", turfid);
}

forward OnAdminCreateLand(playerid, landid, price, Float:minx, Float:miny, Float:maxx, Float:maxy, Float:height, Float:x, Float:y, Float:z);
public OnAdminCreateLand(playerid, landid, price, Float:minx, Float:miny, Float:maxx, Float:maxy, Float:height, Float:x, Float:y, Float:z)
{
	strcpy(LandInfo[landid][lOwner], "Nobody", MAX_PLAYER_NAME);

	LandInfo[landid][lExists] = 1;
	LandInfo[landid][lID] = cache_insert_id(connectionID);
	LandInfo[landid][lOwnerID] = 0;
	LandInfo[landid][lPrice] = price;
	LandInfo[landid][lMinX] = minx;
	LandInfo[landid][lMinY] = miny;
	LandInfo[landid][lMaxX] = maxx;
	LandInfo[landid][lMaxY] = maxy;
	LandInfo[landid][lX] = x;
	LandInfo[landid][lY] = y;
	LandInfo[landid][lZ] = z;
	LandInfo[landid][lHeight] = height;
	LandInfo[landid][lGangZone] = -1;
    LandInfo[landid][lArea] = -1;
    LandInfo[landid][lText] = Text3D:INVALID_3DTEXT_ID;
	LandInfo[landid][lPickup] = -1;

    ReloadLand(landid);
    SM(playerid, SERVER_COLOR, "** Land %i created successfully.", landid);
}

forward OnAdminCreateEntrance(playerid, entranceid, name[], Float:x, Float:y, Float:z, Float:angle);
public OnAdminCreateEntrance(playerid, entranceid, name[], Float:x, Float:y, Float:z, Float:angle)
{
	strcpy(EntranceInfo[entranceid][eOwner], "Nobody", MAX_PLAYER_NAME);
	strcpy(EntranceInfo[entranceid][eName], name, 40);
	strcpy(EntranceInfo[entranceid][ePassword], "None", 64);

	EntranceInfo[entranceid][eExists] = 1;
	EntranceInfo[entranceid][eID] = cache_insert_id(connectionID);
	EntranceInfo[entranceid][eOwnerID] = 0;
	EntranceInfo[entranceid][eIcon] = 19132;
	EntranceInfo[entranceid][eLocked] = 0;
	EntranceInfo[entranceid][eRadius] = 3.0;
	EntranceInfo[entranceid][ePosX] = x;
	EntranceInfo[entranceid][ePosY] = y;
	EntranceInfo[entranceid][ePosZ] = z;
	EntranceInfo[entranceid][ePosA] = angle;
	EntranceInfo[entranceid][eIntX] = 0.0;
	EntranceInfo[entranceid][eIntY] = 0.0;
	EntranceInfo[entranceid][eIntZ] = 0.0;
	EntranceInfo[entranceid][eIntA] = 0.0;
	EntranceInfo[entranceid][eInterior] = 0;
	EntranceInfo[entranceid][eWorld] = EntranceInfo[entranceid][eID] + 4000000;
	EntranceInfo[entranceid][eOutsideInt] = GetPlayerInterior(playerid);
	EntranceInfo[entranceid][eOutsideVW] = GetPlayerVirtualWorld(playerid);
	EntranceInfo[entranceid][eAdminLevel] = 0;
	EntranceInfo[entranceid][eFactionType] = FACTION_NONE;
	EntranceInfo[entranceid][eVIP] = 0;
	EntranceInfo[entranceid][eVehicles] = 0;
	EntranceInfo[entranceid][eFreeze] = 0;
	EntranceInfo[entranceid][eLabel] = 1;
	EntranceInfo[entranceid][eText] = Text3D:INVALID_3DTEXT_ID;
	EntranceInfo[entranceid][ePickup] = -1;
	EntranceInfo[entranceid][eMapIcon] = 0;
	EntranceInfo[entranceid][eMapIconID] = -1;
	//EntranceInfo[entranceid][eColor] = -256;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET world = %i WHERE id = %i", EntranceInfo[entranceid][eWorld], EntranceInfo[entranceid][eID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadEntrance(entranceid);
	SM(playerid, SERVER_COLOR, "** Entrance %i created successfully.", entranceid);
}

forward OnAdminCreateBusiness(playerid, businessid, type, Float:x, Float:y, Float:z, Float:angle, description[]);
public OnAdminCreateBusiness(playerid, businessid, type, Float:x, Float:y, Float:z, Float:angle, description[])
{
	strcpy(BusinessInfo[businessid][bOwner], "Nobody", MAX_PLAYER_NAME);
    format(BusinessInfo[businessid][bName], 64, "");
    strcpy(BusinessInfo[businessid][bDescription], description, 128);

	//strmid(BusinessInfo[businessid][bDescription], name, 0, strlen(name), 128);
	
	BusinessInfo[businessid][bExists] = 1;
	BusinessInfo[businessid][bID] = cache_insert_id(connectionID);
	BusinessInfo[businessid][bOwnerID] = 0;
	BusinessInfo[businessid][bType] = type;
	BusinessInfo[businessid][bPrice] = bizInteriors[type][intPrice];
	BusinessInfo[businessid][bEntryFee] = 0;
	BusinessInfo[businessid][bLocked] = 1;
	BusinessInfo[businessid][bPosX] = x;
	BusinessInfo[businessid][bPosY] = y;
	BusinessInfo[businessid][bPosZ] = z;
	BusinessInfo[businessid][bPosA] = angle;
	BusinessInfo[businessid][bIntX] = bizInteriors[type][intX];
	BusinessInfo[businessid][bIntY] = bizInteriors[type][intY];
	BusinessInfo[businessid][bIntZ] = bizInteriors[type][intZ];
	BusinessInfo[businessid][bIntA] = bizInteriors[type][intA];
	BusinessInfo[businessid][bInterior] = bizInteriors[type][intID];
	BusinessInfo[businessid][bWorld] = BusinessInfo[businessid][bID] + 3000000;
	BusinessInfo[businessid][bOutsideInt] = GetPlayerInterior(playerid);
	BusinessInfo[businessid][bOutsideVW] = GetPlayerVirtualWorld(playerid);
	BusinessInfo[businessid][bCash] = 0;
	BusinessInfo[businessid][bProducts] = 200;
	BusinessInfo[businessid][bText] = Text3D:INVALID_3DTEXT_ID;
	BusinessInfo[businessid][bPickup] = -1;
	BusinessInfo[businessid][bMapIcon] = -1;
	BusinessInfo[businessid][bRobbed] = 3;
	BusinessInfo[businessid][bRobbing] = 0;

	for (new j = 0; j < 25; j ++)
	{
		BusinessInfo[businessid][bPrices][j] = 500;
	}
	/*switch(BusinessInfo[businessid][bType])
	{
		case BUSINESS_STORE, BUSINESS_GUNSHOP, BUSINESS_CLOTHES, BUSINESS_RESTAURANT, BUSINESS_BARCLUB:
			format(BusinessInfo[businessid][bDescription], 128, ""TEAL"Welcome to "WHITE"%s's"TEAL"\n "WHITE"%s"TEAL"\n("WHITE"%i"TEAL" Products left)\nType "WHITE"/buy"TEAL" to purchase from this business.", BusinessInfo[businessid][bOwner], bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bProducts]);
		case BUSINESS_GYM:
		    format(BusinessInfo[businessid][bDescription], 128, ""TEAL"Welcome to "WHITE"%s's"TEAL" "WHITE"%s"TEAL". "WHITE"/buy "TEAL"to purchase a fighting style.", BusinessInfo[businessid][bOwner], bizInteriors[BusinessInfo[businessid][bType]][intType]);
		case BUSINESS_AGENCY:
			format(BusinessInfo[businessid][bDescription], 128, ""TEAL"Welcome to "WHITE"%s's"TEAL" "WHITE"%s"TEAL". "WHITE"/(ad)vertise"TEAL" to make an advertisement.", BusinessInfo[businessid][bOwner], bizInteriors[BusinessInfo[businessid][bType]][intType]);
	}*/

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET world = %i, name = '%e', message = '%e' WHERE id = %i", BusinessInfo[businessid][bWorld], BusinessInfo[businessid][bName], BusinessInfo[businessid][bMessage], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadBusiness(businessid);
	SM(playerid, SERVER_COLOR, "** Business %i created successfully.", businessid);
}

forward OnAdminCreateGarage(playerid, garageid, type, Float:x, Float:y, Float:z, Float:angle);
public OnAdminCreateGarage(playerid, garageid, type, Float:x, Float:y, Float:z, Float:angle)
{
	strcpy(GarageInfo[garageid][gOwner], "Nobody", MAX_PLAYER_NAME);

	GarageInfo[garageid][gExists] = 1;
	GarageInfo[garageid][gID] = cache_insert_id(connectionID);
	GarageInfo[garageid][gOwnerID] = 0;
	GarageInfo[garageid][gType] = type;
	GarageInfo[garageid][gPrice] = garageInteriors[type][intPrice];
	GarageInfo[garageid][gLocked] = 0;
	GarageInfo[garageid][gPosX] = x;
	GarageInfo[garageid][gPosY] = y;
	GarageInfo[garageid][gPosZ] = z;
	GarageInfo[garageid][gPosA] = angle;
	GarageInfo[garageid][gExitX] = x - 3.0 * floatsin(-angle, degrees);
	GarageInfo[garageid][gExitY] = y - 3.0 * floatsin(-angle, degrees);
	GarageInfo[garageid][gExitZ] = z;
	GarageInfo[garageid][gExitA] = angle - 180.0;
	GarageInfo[garageid][gWorld] = GarageInfo[garageid][gID] + 2000000;
    GarageInfo[garageid][gText] = Text3D:INVALID_3DTEXT_ID;
    GarageInfo[garageid][gPickup] = -1;

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET world = %i WHERE id = %i", GarageInfo[garageid][gWorld], GarageInfo[garageid][gID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadGarage(garageid);
	SM(playerid, SERVER_COLOR, "** Garage %i created successfully.", garageid);
}
forward OnAdminCreateHouse(playerid, houseid, type, Float:x, Float:y, Float:z, Float:angle, description[]);
public OnAdminCreateHouse(playerid, houseid, type, Float:x, Float:y, Float:z, Float:angle, description[])
{
	strcpy(HouseInfo[houseid][hOwner], "Nobody", MAX_PLAYER_NAME);
	strcpy(HouseInfo[houseid][hDescription], description, 128);

	HouseInfo[houseid][hExists] = 1;
	HouseInfo[houseid][hID] = cache_insert_id(connectionID);
	HouseInfo[houseid][hOwnerID] = 0;
	HouseInfo[houseid][hType] = type;
	HouseInfo[houseid][hPrice] = houseInteriors[type][intPrice];
	HouseInfo[houseid][hRentPrice] = 0;
	HouseInfo[houseid][hLevel] = 1;
	HouseInfo[houseid][hLocked] = 0;
	HouseInfo[houseid][hPosX] = x;
	HouseInfo[houseid][hPosY] = y;
	HouseInfo[houseid][hPosZ] = z;
	HouseInfo[houseid][hPosA] = angle;
	HouseInfo[houseid][hIntX] = houseInteriors[type][intX];
	HouseInfo[houseid][hIntY] = houseInteriors[type][intY];
	HouseInfo[houseid][hIntZ] = houseInteriors[type][intZ];
	HouseInfo[houseid][hIntA] = houseInteriors[type][intA];
	HouseInfo[houseid][hInterior] = houseInteriors[type][intID];
	HouseInfo[houseid][hWorld] = HouseInfo[houseid][hID] + 1000000;
	HouseInfo[houseid][hOutsideInt] = GetPlayerInterior(playerid);
	HouseInfo[houseid][hOutsideVW] = GetPlayerVirtualWorld(playerid);
	HouseInfo[houseid][hCash] = 0;
	HouseInfo[houseid][hMaterials] = 0;
	HouseInfo[houseid][hPot] = 0;
	HouseInfo[houseid][hCrack] = 0;
	HouseInfo[houseid][hMeth] = 0;
	HouseInfo[houseid][hPainkillers] = 0;
	HouseInfo[houseid][hHPAmmo] = 0;
	HouseInfo[houseid][hPoisonAmmo] = 0;
	HouseInfo[houseid][hFMJAmmo] = 0;
	HouseInfo[houseid][hLabels] = 0;
	HouseInfo[houseid][hText] = Text3D:INVALID_3DTEXT_ID;
	HouseInfo[houseid][hPickup] = -1;
	HouseInfo[houseid][hRobbed] = 3;
	HouseInfo[houseid][hRobbing] = 0;


	for(new i = 0; i < 10; i ++)
	{
	    HouseInfo[houseid][hWeapons][i] = 0;
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET world = %i WHERE id = %i", HouseInfo[houseid][hWorld], HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadHouse(houseid);
	SM(playerid, SERVER_COLOR, "** House %i created successfully.", houseid);
}

forward OnAdminDeleteAccount(playerid, username[]);
public OnAdminDeleteAccount(playerid, username[])
{
	if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "The player specified doesn't exist.");
	}
	else if(cache_get_row_int(0, 0) > pData[playerid][pAdmin])
	{
	    SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. You cannot delete them.");
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM users WHERE username = '%e'", username);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has deleted %s's account.", GetPlayerNameEx(playerid), username);
	}
}

forward OnAdminListKills(playerid, targetid);
public OnAdminListKills(playerid, targetid)
{
    new rows = cache_get_row_count(connectionID);

    if(!rows)
	{
	    SCM(playerid, COLOR_SYNTAX, "That player hasn't killed, or has been killed, by anyone since they registered.");
	}
	else
	{
	    new date[24], killer[24], target[24], reason[24];

	    SCM(playerid, SERVER_COLOR, "Kills & Deaths");

	    for(new i = 0; i < rows; i ++)
	    {
	        cache_get_field_content(i, "date", date);
	        cache_get_field_content(i, "killer", killer);
	        cache_get_field_content(i, "target", target);
	        cache_get_field_content(i, "reason", reason);

	        if(cache_get_field_content_int(i, "killer_uid") == pData[targetid][pID])
	        {
		        SM(playerid, COLOR_YELLOW, "[%s] %s killed %s (%s)", date, killer, target, reason);
	        }
	        else if(cache_get_field_content_int(i, "target_uid") == pData[targetid][pID])
	        {
	            SM(playerid, COLOR_YELLOW, "[%s] %s was killed by %s (%s)", date, target, killer, reason);
	        }
	    }
	}
}

forward OnAdminListDamages(playerid, targetid);
public OnAdminListDamages(playerid, targetid)
{
	new rows = cache_get_row_count(connectionID);

    if(!rows)
	{
	    SCM(playerid, COLOR_SYNTAX, "That player hasn't been damaged by anyone since they connected.");
	}
	else
	{
	    SCM(playerid, SERVER_COLOR, "Damage Received");

	    for(new i = 0; i < rows; i ++)
	    {
	        SM(playerid, COLOR_YELLOW, "[%i seconds ago] %s was shot by %s with a %s", gettime() - cache_get_row_int(i, 2), GetRPName(targetid), GetRPName(cache_get_row_int(1, 1)), GetWeaponNameEx(cache_get_row_int(i, 0)));
			//SM(playerid, COLOR_GREY2, "(Weapon: %s) - (From: %s) - (Time: %i seconds ago)", GetWeaponNameEx(cache_get_row_int(i, 0)), GetRPName(cache_get_row_int(i, 1)), gettime() - cache_get_row_int(i, 2));
		}
	}
}

forward OnAdminListShots(playerid, targetid);
public OnAdminListShots(playerid, targetid)
{
	new rows = cache_get_row_count(connectionID);

    if(!rows)
	{
	    SCM(playerid, COLOR_SYNTAX, "That player hasn't registered any shots since they connected.");
	}
	else
	{
	    new weaponid, hittype, timestamp, where[48];

	    SM(playerid, SERVER_COLOR, "%i Last Shots", rows);

	    for(new i = 0; i < rows; i ++)
	    {
	        weaponid 	= cache_get_field_content_int(i, "weaponid");
	        hittype 	= cache_get_field_content_int(i, "hittype");
	        timestamp 	= cache_get_field_content_int(i, "timestamp");

			switch(hittype)
			{
       			case BULLET_HIT_TYPE_PLAYER:
					cache_get_field_content(i, "hitplayer", where);
          		case BULLET_HIT_TYPE_VEHICLE:
          		    format(where, sizeof(where), "Vehicle (ID %i)", cache_get_field_content_int(i, "hitid"));
    			default:
    			    where = "Missed";
			}

			SM(playerid, COLOR_YELLOW, "[%i seconds ago] %s shot a %s and hit: %s", gettime() - timestamp, GetRPName(targetid), GetWeaponNameEx(weaponid), where);
		}
	}
}

forward OnAdminBanIP(playerid, ip[], reason[]);
public OnAdminBanIP(playerid, ip[], reason[])
{
	if(cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "This IP address is already banned.");
	}
	else
	{
	    foreach(new i : Player)
	    {
	        if(!strcmp(GetPlayerIP(i), ip))
			{
				SM(i, COLOR_YELLOW, "** Your IP address has been banned by %s, reason: %s", GetRPName(playerid), reason);
				KickPlayer(i);
			}
		}

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO bans VALUES(null, 'n/a', '%s', '%s', NOW(), '%s', 0)", ip, GetPlayerNameEx(playerid), reason);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has banned IP '%s', reason: %s", GetRPName(playerid), ip, reason);
	    Log_Write("log_punishments", "%s (uid: %i) has banned IP: %s, reason: %s", GetPlayerNameEx(playerid), pData[playerid][pID], ip, reason);
	}
}

forward OnAdminCheckBan(playerid, string[]);
public OnAdminCheckBan(playerid, string[])
{
	new bannedby[MAX_PLAYER_NAME], username[MAX_PLAYER_NAME], ip[16], date[24], reason[128];

	if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "There are no bans that match your criteria.");
	}
	else
	{
	    cache_get_field_content(0, "bannedby", bannedby);
	    cache_get_field_content(0, "username", username);
	    cache_get_field_content(0, "ip", ip);
	    cache_get_field_content(0, "date", date);
	    cache_get_field_content(0, "reason", reason);

		if(!strcmp(username, "n/a", true)) {
		    if(strfind(ip, "*", true) != -1) {
		    	SM(playerid, COLOR_LIGHTRED, "[%s] IP address '%s' was rangebanned by %s, reason: %s", date, ip, bannedby, reason);
	        } else {
	            SM(playerid, COLOR_LIGHTRED, "[%s] IP address '%s' was banned by %s, reason: %s", date, ip, bannedby, reason);
	        }
		}
		else {
		    if(strfind(ip, "*", true) != -1) {
		    	SM(playerid, COLOR_LIGHTRED, "[%s] %s (IP: %s) was rangebanned by %s, reason: %s", date, username, ip, bannedby, reason);
	        } else if(cache_get_field_content_int(0, "permanent")) {
	            SM(playerid, COLOR_LIGHTRED, "[%s] %s (IP: %s) was permanently banned by %s, reason: %s", date, username, ip, bannedby, reason);
	        } else {
	            SM(playerid, COLOR_LIGHTRED, "[%s] %s (IP: %s) was banned by %s, reason: %s", date, username, ip, bannedby, reason);
	        }
		}
	}
}

forward OnAdminUnbanUser(playerid, username[]);
public OnAdminUnbanUser(playerid, username[])
{
	if(cache_get_row_count(connectionID))
	{
	    if(cache_get_row_int(0, 1) && pData[playerid][pAdmin] < 7)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This player is permanently banned. Permabans may only be lifted by Executive Directors.");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM bans WHERE id = %i", cache_get_row_int(0, 0));
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has unbanned %s.", GetRPName(playerid), username);
		Log_Write("log_punishments", "%s (uid: %i) has unbanned %s.", GetPlayerNameEx(playerid), pData[playerid][pID], username);
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "There is no banned player known by that name.");
	}

	return 1;
}

forward OnAdminLockAccount(playerid, username[]);
public OnAdminLockAccount(playerid, username[])
{
    if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "The player specified doesn't exist.");
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET locked = 1 WHERE username = '%e'", username);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has whitelist %s's account.", GetRPName(playerid), username);
	    Log_Write("log_admin", "%s (uid: %i) whitelist %s's account.", GetPlayerNameEx(playerid), pData[playerid][pID], username);
	}
}

forward OnAdminUnlockAccount(playerid, username[]);
public OnAdminUnlockAccount(playerid, username[])
{
    if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "The player specified doesn't exist, or their account is not locked.");
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET locked = 0 WHERE username = '%e'", username);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has unwhitelist %s's account.", GetRPName(playerid), username);
	    Log_Write("log_admin", "%s (uid: %i) unwhitelist %s's account.", GetPlayerNameEx(playerid), pData[playerid][pID], username);
	}
}

forward OnAdminChangeName(playerid, targetid, name[]);
public OnAdminChangeName(playerid, targetid, name[])
{
	if(cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "The name specified is taken already.");
	}
	else
	{
	    Log_Write("log_admin", "%s (uid: %i) changed %s's (uid: %i) name to %s.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], name);
		Log_Write("log_namechanges", "%s (uid: %i) changed %s's (uid: %i) name to %s.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], name);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has changed %s's name to %s.", GetRPName(playerid), GetRPName(targetid), name);
		SM(targetid, COLOR_WHITE, "** %s changed your name from %s to %s.", GetRPName(playerid), GetRPName(targetid), name);

		Namechange(targetid, GetPlayerNameEx(targetid), name);
	}
}

forward OnAdminOfflineBan(playerid, username[], reason[]);
public OnAdminOfflineBan(playerid, username[], reason[])
{
    if(cache_get_row_count(connectionID))
	{
	    if(cache_get_row_int(0, 0) > pData[playerid][pAdmin])
	    {
			return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be banned.");
		}

		new
		    ip[16];

		cache_get_row(0, 1, ip);

        AddBan(username, ip, GetPlayerNameEx(playerid), reason);

    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO log_bans VALUES(null, %i, NOW(), '%s (IP: %s) was banned by %s, reason: %e')", cache_get_field_content_int(0, "uid"), username, ip, GetPlayerNameEx(playerid), reason);
		mysql_tquery(connectionID, queryBuffer);

        SAM(COLOR_LIGHTRED, "AdmCmd: %s was offline banned by %s, reason: %s", username, GetPlayerNameEx(playerid), reason);
        Log_Write("log_punishments", "%s (uid: %i) offline banned %s, reason: %s", GetPlayerNameEx(playerid), pData[playerid][pID], username, reason);
	}

	return 1;
}

forward OnAdminOfflinePrison(playerid, username[], minutes, reason[]);
public OnAdminOfflinePrison(playerid, username[], minutes, reason[])
{
	if(cache_get_row_count(connectionID))
	{
	    if(cache_get_row_int(0, 0) > pData[playerid][pAdmin])
	    {
			return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be prisoned.");
		}

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET jailtype = 2, jailtime = %i, prisonedby = '%e', prisonreason = '%e' WHERE username = '%e'", minutes * 60, GetPlayerNameEx(playerid), reason, username);
	    mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s was offline prisoned for %i minutes by %s, reason: %s", username, minutes, GetRPName(playerid), reason);
		Log_Write("log_punishments", "%s (uid: %i) offline prisoned %s for %i minutes, reason: %s", GetPlayerNameEx(playerid), pData[playerid][pID], username, minutes, reason);
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "That player is not registered.");
	}

	return 1;
}

forward OnAdminOfflineFine(playerid, username[], amount, reason[]);
public OnAdminOfflineFine(playerid, username[], amount, reason[])
{
	if(cache_get_row_count(connectionID))
	{
	    if(cache_get_row_int(0, 0) > pData[playerid][pAdmin])
	    {
			return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be fined.");
		}

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cash = cash - %i WHERE username = '%e'", amount, username);
	    mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s was offline fined for $%i by %s, reason: %s", username, amount, GetRPName(playerid), reason);
        Log_Write("log_admin", "%s (uid: %i) offline fined %s for $%i, reason: %s", GetPlayerNameEx(playerid), pData[playerid][pID], username, amount, reason);
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "That player is not registered.");
	}

	return 1;
}

public OnQueryError(errorid, error[], callback[], query[], connectionHandle)
{
	new
	    File:file = fopen("mysql_error.txt", io_append);
	new DCC_Channel:channel = DCC_FindChannelById("943360619539755018");

	if(file)
	{
	    new
	        string[2048];

		format(string, sizeof(string), "[%s]\r\nError ID: %i\r\nCallback: %s\r\nQuery: %s\r\n[!] %s\r\n\r\n", GetDate(), errorid, callback, query, error);
		DCC_SendChannelMessage(channel, string);
		fwrite(file, string);
		fclose(file);
	}

	SAM(COLOR_LIGHTRED, "AdmCmd: A MySQL error occurred (error %i). Details written to mysql_error.txt.", errorid);
	return 1;
}

public OnQueryFinished(threadid, extraid)
{
	new rows = cache_get_row_count(connectionID);

	switch(threadid)
	{
	    case THREAD_LOOKUP_BANS:
	    {
	        if(rows)
        	{
	            new playername[24], bannedby[24], date[24], reason[128];
                GetPlayerName(extraid, playername, sizeof(playername));
	            cache_get_field_content(0, "bannedby", bannedby);
	            cache_get_field_content(0, "date", date);
	            cache_get_field_content(0, "reason", reason);

				if(cache_get_field_content_int(0, "permanent"))
				    SCMf(extraid, COLOR_LIGHTRED, "You are permanently banned from this server.");
				else
					SCMf(extraid, COLOR_LIGHTRED, "You are banned from this server under the name '%s'. You can appeal your ban at "SERVER_URL"", playername);
            
                SCMf(extraid, COLOR_LIME, "========================================================================");
				SCMf(extraid, COLOR_LIGHTRED, "Admin: "ORANGE"%s", bannedby);
	            SCMf(extraid, COLOR_LIGHTRED, "Issue Date: "ORANGE"%s", date);
	            SCMf(extraid, COLOR_LIGHTRED, "Reason: "ORANGE"%s", reason);
	            SCMf(extraid, COLOR_LIME, "========================================================================");
				KickPlayer(extraid);

				SAM(COLOR_YELLOW, "AdmWarning: %s has attempted to log in while banned.", playername);
	        }
	        else
	        {
    			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = '%s'", GetPlayerNameEx(extraid));
				mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOOKUP_ACCOUNT, extraid);
	        }
		}
	    case THREAD_LOOKUP_ACCOUNT:
	    {
	        Introduction(extraid);
			ShowLoginRegister(extraid);
	        if(rows)
	        {
		        ShowDialogToPlayer(extraid, DIALOG_LOGIN);
			}
			else
			{
				if(strfind(GetPlayerNameEx(extraid), "_") == -1 && strfind(GetPlayerNameEx(extraid), "Stewart") == -1)
			    {
			        ShowPlayerDialog(extraid, DIALOG_FREENAMECHANGE, DIALOG_STYLE_INPUT, "Non-Roleplay Name", "An administrator has came to the conclusion that your name is non-RP.\nTherefore you have been given this free namechange in order to correct it.\n\nEnter a name in the Firstname_Lastname format in the box below:", "Submit", "");
			    }
				else
			    {
    				ShowDialogToPlayer(extraid, DIALOG_REGISTER);
				}
			}
	    }
	    case THREAD_ACCOUNT_REGISTER:
	    {
	        new
	            id = cache_insert_id(connectionID);

			if(id)
	        {
	        	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM users WHERE uid = %i", id);
	        	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_PROCESS_LOGIN, extraid);
	        }
		}
	    case THREAD_PROCESS_LOGIN:
	    {	// OnPlayerLogin
	        if(!rows)
	        {
	            pData[extraid][pLoginTries]++;

				if(pData[extraid][pLoginTries] < 3)
				{
					ShowDialogToPlayer(extraid, DIALOG_LOGIN);
					SM(extraid, COLOR_LIGHTRED, "Incorrect password. You have %i more attempts before you are kicked.", 3 - pData[extraid][pLoginTries]);
				}
				else
				{
					Kick(extraid);
				}

		    } // put "!" for whitelist
	        else if(cache_get_field_content_int(0, "locked"))
         	{
          		SCM(extraid, COLOR_NEWBIE, "** This account is currently locked. Contact an administrator to unlock your account.");
            	SAM(COLOR_YELLOW, "AdmWarning: %s tried to login with a locked account.", GetRPName(extraid));
             	KickPlayer(extraid);
            }
			else
   			{
	            new date[64];

	            cache_get_field_content(0, "login_date", date);
	            cache_get_field_content(0, "accent", pData[extraid][pAccent], connectionID, 16);
	            cache_get_field_content(0, "adminname", pData[extraid][pAdminName], connectionID, MAX_PLAYER_NAME);
	            cache_get_field_content(0, "contractby", pData[extraid][pContractBy], connectionID, MAX_PLAYER_NAME);
	            cache_get_field_content(0, "prisonedby", pData[extraid][pPrisonedBy], connectionID, MAX_PLAYER_NAME);
	            cache_get_field_content(0, "prisonreason", pData[extraid][pPrisonReason], connectionID, 128);
	            cache_get_field_content(0, "passportname", pData[extraid][pPassportName], connectionID, MAX_PLAYER_NAME);
	            cache_get_field_content(0, "customtitle", pData[extraid][pCustomTitle], connectionID, 64);
	            cache_get_field_content(0, "bind1", pData[extraid][pBind], connectionID, 128);
	            cache_get_field_content(0, "bind2", pData[extraid][pBind2], connectionID, 128);
	            cache_get_field_content(0, "bind3", pData[extraid][pBind3], connectionID, 128);
	            cache_get_field_content(0, "bind4", pData[extraid][pBind4], connectionID, 128);
	            cache_get_field_content(0, "bind5", pData[extraid][pBind5], connectionID, 128);
	            pData[extraid][pCustomTColor] = cache_get_field_content_int(0, "customcolor");

	            pData[extraid][pID] = cache_get_field_content_int(0, "uid");
				pData[extraid][pSetup] = cache_get_field_content_int(0, "setup");
				pData[extraid][pFirstSpawn] = cache_get_field_content_int(0, "firstspawn");
                pData[extraid][pGender] = cache_get_field_content_int(0, "gender");
                pData[extraid][pAge] = cache_get_field_content_int(0, "age");
                pData[extraid][pSkin] = cache_get_field_content_int(0, "skin");
                pData[extraid][pCameraX] = cache_get_field_content_float(0, "camera_x");
                pData[extraid][pCameraY] = cache_get_field_content_float(0, "camera_y");
                pData[extraid][pCameraZ] = cache_get_field_content_float(0, "camera_z");
                pData[extraid][pPosX] = cache_get_field_content_float(0, "pos_x");
                pData[extraid][pPosY] = cache_get_field_content_float(0, "pos_y");
                pData[extraid][pPosZ] = cache_get_field_content_float(0, "pos_z");
                pData[extraid][pPosA] = cache_get_field_content_float(0, "pos_a");
                pData[extraid][pInterior] = cache_get_field_content_int(0, "interior");
                pData[extraid][pWorld] = cache_get_field_content_int(0, "world");
                pData[extraid][pCash] = cache_get_field_content_int(0, "cash");
                pData[extraid][pBank] = cache_get_field_content_int(0, "bank");
                pData[extraid][pPaycheck] = cache_get_field_content_int(0, "paycheck");
                pData[extraid][pLevel] = cache_get_field_content_int(0, "level");
                pData[extraid][pCrowbar] = cache_get_field_content_int(0, "crowbar");
                pData[extraid][pHelmet] = cache_get_field_content_int(0, "helmet");
                pData[extraid][pFirework] = cache_get_field_content_int(0, "firework");
                pData[extraid][pEXP] = cache_get_field_content_int(0, "exp");
                pData[extraid][pMinutes] = cache_get_field_content_int(0, "minutes");
                pData[extraid][pHours] = cache_get_field_content_int(0, "hours");
				pData[extraid][pSeconds] = cache_get_field_content_int(0, "seconds");
				pData[extraid][pPlayingHours] = cache_get_field_content_int(0, "playinghours");
                pData[extraid][pAdmin] = cache_get_field_content_int(0, "adminlevel");
                pData[extraid][pHelper] = cache_get_field_content_int(0, "helperlevel");
                pData[extraid][pHealth] = cache_get_field_content_float(0, "health");
                pData[extraid][pArmor] = cache_get_field_content_float(0, "armor");
				pData[extraid][pWarnings] = cache_get_field_content_int(0, "warnings");
				pData[extraid][pInjured] = cache_get_field_content_int(0, "injured");
				pData[extraid][pBrokenLeg] = cache_get_field_content_int(0, "brokenleg");
				pData[extraid][pHospital] = cache_get_field_content_int(0, "hospital");
				pData[extraid][pSpawnHealth] = cache_get_field_content_float(0, "spawnhealth");
                pData[extraid][pSpawnArmor] = cache_get_field_content_float(0, "spawnarmor");
                pData[extraid][pJailType] = cache_get_field_content_int(0, "jailtype");
                pData[extraid][pJailTime] = cache_get_field_content_int(0, "jailtime");
             	pData[extraid][pBedType] = cache_get_field_content_int(0, "bedtype");
                pData[extraid][pBedTime] = cache_get_field_content_int(0, "bedtime");
                pData[extraid][pFormerAdmin] = cache_get_field_content_int(0, "formeradmin");
                pData[extraid][pBindtype] = cache_get_field_content_int(0, "bindtype");
                pData[extraid][pBindtype2] = cache_get_field_content_int(0, "bindtype2");
                pData[extraid][pBindtype3] = cache_get_field_content_int(0, "bindtype3");
                pData[extraid][pBindtype4] = cache_get_field_content_int(0, "bindtype4");
                pData[extraid][pBindtype5] = cache_get_field_content_int(0, "bindtype5");
  				pData[MAX_PLAYERS][pAMute] = cache_get_field_content_int(0, "amuted");
				pData[MAX_PLAYERS][pAMCount] = cache_get_field_content_int(0, "amcount");
                pData[extraid][pNewbieMuted] = cache_get_field_content_int(0, "newbiemuted");
                pData[extraid][pHelpMuted] = cache_get_field_content_int(0, "helpmuted");
                pData[extraid][pAdMuted] = cache_get_field_content_int(0, "admuted");
                pData[extraid][pLiveMuted] = cache_get_field_content_int(0, "livemuted");
                pData[extraid][pGlobalMuted] = cache_get_field_content_int(0, "globalmuted");
                pData[extraid][pReportMuted] = cache_get_field_content_int(0, "reportmuted");
                pData[extraid][pReportWarns] = cache_get_field_content_int(0, "reportwarns");
                pData[extraid][pFightStyle] = cache_get_field_content_int(0, "fightstyle");
                pData[extraid][pDirtyCash] = cache_get_field_content_int(0, "dirtycash");

				/*#if defined Christmas
	#else
					pData[extraid][pCandy] = cache_get_field_content_int(0, "candy");
				#endif*/

				pData[extraid][pPhone] = cache_get_field_content_int(0, "phone");
				pData[extraid][pLottery] = cache_get_field_content_int(0, "lottery");
				pData[extraid][pJob] = cache_get_field_content_int(0, "job");
				pData[extraid][pSecondJob] = cache_get_field_content_int(0, "secondjob");
				pData[extraid][pCrimes] = cache_get_field_content_int(0, "crimes");
				pData[extraid][pArrested] = cache_get_field_content_int(0, "arrested");
				pData[extraid][pWantedLevel] = cache_get_field_content_int(0, "wantedlevel");
				pData[extraid][pMaterials] = cache_get_field_content_int(0, "materials");
				pData[extraid][pPot] = cache_get_field_content_int(0, "pot");
				pData[extraid][pCrack] = cache_get_field_content_int(0, "crack");
				pData[extraid][pMeth] = cache_get_field_content_int(0, "meth");
				pData[extraid][pPainkillers] = cache_get_field_content_int(0, "painkillers");
				pData[extraid][pSeeds] = cache_get_field_content_int(0, "seeds");
				pData[extraid][pEphedrine] = cache_get_field_content_int(0, "ephedrine");
				pData[extraid][pMuriaticAcid] = cache_get_field_content_int(0, "muriaticacid");
				pData[extraid][pBakingSoda] = cache_get_field_content_int(0, "bakingsoda");
				pData[extraid][pCigars] = cache_get_field_content_int(0, "cigars");
				pData[extraid][pVest] = cache_get_field_content_int(0, "vest");
				pData[extraid][pFood] = cache_get_field_content_int(0, "food");
				pData[extraid][pDrink] = cache_get_field_content_int(0, "drink");
				pData[extraid][pWalkieTalkie] = cache_get_field_content_int(0, "walkietalkie");
				pData[extraid][pChannel] = cache_get_field_content_int(0, "channel");
				pData[extraid][pRentingHouse] = cache_get_field_content_int(0, "rentinghouse");
				pData[extraid][pSpraycans] = cache_get_field_content_int(0, "spraycans");
				pData[extraid][pChatstyle] = cache_get_field_content_int(0, "chatstyle");
				pData[extraid][pBandage] = cache_get_field_content_int(0, "bandage");
				pData[extraid][pMedkit] = cache_get_field_content_int(0, "medkit");
				pData[extraid][pRepairKit] = cache_get_field_content_int(0, "repairkit");
				pData[extraid][pParts] = cache_get_field_content_int(0, "parts");
				pData[extraid][pBoombox] = cache_get_field_content_int(0, "boombox");
				pData[extraid][pMP3Player] = cache_get_field_content_int(0, "mp3player");
				pData[extraid][pPhonebook] = cache_get_field_content_int(0, "phonebook");
				pData[extraid][pFishingRod] = cache_get_field_content_int(0, "fishingrod");
				pData[extraid][pFishingBait] = cache_get_field_content_int(0, "fishingbait");
				pData[extraid][pFishWeight] = cache_get_field_content_int(0, "fishweight");
				pData[extraid][pFishingSkill] = cache_get_field_content_int(0, "fishingskill");
				pData[extraid][pGuardSkill] = cache_get_field_content_int(0, "guardskill");
				pData[extraid][pWeaponSkill] = cache_get_field_content_int(0, "weaponskill");
				pData[extraid][pLawyerSkill] = cache_get_field_content_int(0, "lawyerskill");
				pData[extraid][pSmugglerSkill] = cache_get_field_content_int(0, "smugglerskill");
            	pData[extraid][pDetectiveSkill] = cache_get_field_content_int(0, "detectiveskill");
				pData[extraid][pToggleTextdraws] = cache_get_field_content_int(0, "toggletextdraws");
				pData[extraid][pToggleOOC] = cache_get_field_content_int(0, "toggleooc");
				pData[extraid][pTogglePhone] = cache_get_field_content_int(0, "togglephone");
				pData[extraid][pToggleAdmin] = cache_get_field_content_int(0, "toggleadmin");
				pData[extraid][pToggleHelper] = cache_get_field_content_int(0, "togglehelper");
				pData[extraid][pToggleNewbie] = cache_get_field_content_int(0, "togglenewbie");
				pData[extraid][pToggleWT] = cache_get_field_content_int(0, "togglewt");
				pData[extraid][pToggleRadio] = cache_get_field_content_int(0, "toggleradio");
				pData[extraid][pToggleVIP] = cache_get_field_content_int(0, "togglevip");
				pData[extraid][pToggleMusic] = cache_get_field_content_int(0, "togglemusic");
				pData[extraid][pToggleFaction] = cache_get_field_content_int(0, "togglefaction");
				pData[extraid][pToggleNews] = cache_get_field_content_int(0, "togglenews");
				pData[extraid][pToggleGlobal] = cache_get_field_content_int(0, "toggleglobal");
				pData[extraid][pToggleCam] = cache_get_field_content_int(0, "togglecam");
				pData[extraid][pToggleHUD] = cache_get_field_content_int(0, "togglehud");
				pData[extraid][pCarLicense] = cache_get_field_content_int(0, "carlicense");
				pData[extraid][pWeaponLicense] = cache_get_field_content_int(0, "gunlicense");
				pData[extraid][pDonator] = cache_get_field_content_int(0, "vippackage");
				pData[extraid][pVIPTime] = cache_get_field_content_int(0, "viptime");
				pData[extraid][pVIPCooldown] = cache_get_field_content_int(0, "vipcooldown");
				pData[extraid][pWeapons][0] = cache_get_field_content_int(0, "weapon_0");
				pData[extraid][pWeapons][1] = cache_get_field_content_int(0, "weapon_1");
				pData[extraid][pWeapons][2] = cache_get_field_content_int(0, "weapon_2");
				pData[extraid][pWeapons][3] = cache_get_field_content_int(0, "weapon_3");
				pData[extraid][pWeapons][4] = cache_get_field_content_int(0, "weapon_4");
				pData[extraid][pWeapons][5] = cache_get_field_content_int(0, "weapon_5");
				pData[extraid][pWeapons][6] = cache_get_field_content_int(0, "weapon_6");
				pData[extraid][pWeapons][7] = cache_get_field_content_int(0, "weapon_7");
				pData[extraid][pWeapons][8] = cache_get_field_content_int(0, "weapon_8");
				pData[extraid][pWeapons][9] = cache_get_field_content_int(0, "weapon_9");
				pData[extraid][pWeapons][10] = cache_get_field_content_int(0, "weapon_10");
				pData[extraid][pWeapons][11] = cache_get_field_content_int(0, "weapon_11");
				pData[extraid][pWeapons][12] = cache_get_field_content_int(0, "weapon_12");
				pData[extraid][pFaction] = cache_get_field_content_int(0, "faction");
				pData[extraid][pFactionRank] = cache_get_field_content_int(0, "factionrank");
				pData[extraid][pGang] = cache_get_field_content_int(0, "gang");
				pData[extraid][pGangRank] = cache_get_field_content_int(0, "gangrank");
				pData[extraid][pDivision] = cache_get_field_content_int(0, "division");
				pData[extraid][pContracted] = cache_get_field_content_int(0, "contracted");
				pData[extraid][pBombs] = cache_get_field_content_int(0, "bombs");
				pData[extraid][pCompletedHits] = cache_get_field_content_int(0, "completedhits");
				pData[extraid][pFailedHits] = cache_get_field_content_int(0, "failedhits");
				pData[extraid][pReports] = cache_get_field_content_int(0, "reports");
				pData[extraid][pNewbies] = cache_get_field_content_int(0, "newbies");
				pData[extraid][pHelpRequests] = cache_get_field_content_int(0, "helprequests");
				pData[extraid][pSpeedometer] = cache_get_field_content_int(0, "speedometer");
				pData[extraid][pStaffLeader] = cache_get_field_content_int(0, "staffleader");
				pData[extraid][pStaff] = cache_get_field_content_int(0, "staff");
				pData[extraid][pDeveloper] = cache_get_field_content_int(0, "developer");
				pData[extraid][pDynamicAdmin] = cache_get_field_content_int(0, "dynamicadmin");
				pData[extraid][pFactionMod] = cache_get_field_content_int(0, "factionmod");
				pData[extraid][pAdminPersonnel] = cache_get_field_content_int(0, "adminpersonnel");
				pData[extraid][pGangMod] = cache_get_field_content_int(0, "gangmod");
				pData[extraid][pBanAppealer] = cache_get_field_content_int(0, "banappealer");
				pData[extraid][pEventMod] = cache_get_field_content_int(0, "eventmod");
				pData[extraid][pPotPlanted] = cache_get_field_content_int(0, "potplanted");
				pData[extraid][pPotTime] = cache_get_field_content_int(0, "pottime");
				pData[extraid][pPotGrams] = cache_get_field_content_int(0, "potgrams");
				pData[extraid][pPotX] = cache_get_field_content_float(0, "pot_x");
				pData[extraid][pPotY] = cache_get_field_content_float(0, "pot_y");
				pData[extraid][pPotZ] = cache_get_field_content_float(0, "pot_z");
				pData[extraid][pPotA] = cache_get_field_content_float(0, "pot_a");
				pData[extraid][pInventoryUpgrade] = cache_get_field_content_int(0, "inventoryupgrade");
				pData[extraid][pAddictUpgrade] = cache_get_field_content_int(0, "addictupgrade");
                pData[extraid][pTraderUpgrade] = cache_get_field_content_int(0, "traderupgrade");
                pData[extraid][pAssetUpgrade] = cache_get_field_content_int(0, "assetupgrade");
   				pData[extraid][pHPAmmo] = cache_get_field_content_int(0, "hpammo");
				pData[extraid][pPoisonAmmo] = cache_get_field_content_int(0, "poisonammo");
				pData[extraid][pFMJAmmo] = cache_get_field_content_int(0, "fmjammo");
				pData[extraid][pAmmoType] = cache_get_field_content_int(0, "ammotype");
				pData[extraid][pAmmoWeapon] = cache_get_field_content_int(0, "ammoweapon");
				pData[extraid][pDMWarnings] = cache_get_field_content_int(0, "dmwarnings");
				pData[extraid][pWeaponRestricted] = cache_get_field_content_int(0, "weaponrestricted");
				pData[extraid][pReferralUID] = cache_get_field_content_int(0, "referral_uid");
				pData[extraid][pWatch] = cache_get_field_content_int(0, "watch");
				pData[extraid][pRefunded] = cache_get_field_content_int(0, "refunded");
				pData[extraid][pMonthsary] = cache_get_field_content_int(0, "monthsary");
				pData[extraid][pGPS] = cache_get_field_content_int(0, "gps");
				pData[extraid][pClothes] = cache_get_field_content_int(0, "clothes");
				pData[extraid][pShowLands] = cache_get_field_content_int(0, "showlands");
				pData[extraid][pShowTurfs] = cache_get_field_content_int(0, "showturfs");
				pData[extraid][pWatchOn] = cache_get_field_content_int(0, "watchon");
				pData[extraid][pGPSOn] = cache_get_field_content_int(0, "gpson");
				pData[extraid][pDoubleXP] = cache_get_field_content_int(0, "doublexp");
				pData[extraid][pCourierCooldown] = cache_get_field_content_int(0, "couriercooldown");
                pData[extraid][pPizzaCooldown] = cache_get_field_content_int(0, "pizzacooldown");
                pData[extraid][pDeathCooldown] = cache_get_field_content_int(0, "deathcooldown");
                pData[extraid][pDetectiveCooldown] = cache_get_field_content_int(0, "detectivecooldown");
            	pData[extraid][pGasCan] = cache_get_field_content_int(0, "gascan");
            	pData[extraid][pDuty] = cache_get_field_content_int(0, "duty");
            	pData[extraid][pBackpack] = cache_get_field_content_int(0, "backpack");
            	pData[extraid][bpCash] = cache_get_field_content_int(0, "bpcash");
				pData[extraid][bpMaterials] = cache_get_field_content_int(0, "bpmaterials");
				pData[extraid][bpPot] = cache_get_field_content_int(0, "bppot");
				pData[extraid][bpCrack] = cache_get_field_content_int(0, "bpcrack");
				pData[extraid][bpMeth] = cache_get_field_content_int(0, "bpmeth");
				pData[extraid][bpPainkillers] = cache_get_field_content_int(0, "bppainkillers");
    			pData[extraid][bpWeapons][0] = cache_get_field_content_int(0, "bpweapon_0");
				pData[extraid][bpWeapons][1] = cache_get_field_content_int(0, "bpweapon_1");
				pData[extraid][bpWeapons][2] = cache_get_field_content_int(0, "bpweapon_2");
				pData[extraid][bpWeapons][3] = cache_get_field_content_int(0, "bpweapon_3");
				pData[extraid][bpWeapons][4] = cache_get_field_content_int(0, "bpweapon_4");
				pData[extraid][bpWeapons][5] = cache_get_field_content_int(0, "bpweapon_5");
				pData[extraid][bpWeapons][6] = cache_get_field_content_int(0, "bpweapon_6");
				pData[extraid][bpWeapons][7] = cache_get_field_content_int(0, "bpweapon_7");
				pData[extraid][bpWeapons][8] = cache_get_field_content_int(0, "bpweapon_8");
				pData[extraid][bpWeapons][9] = cache_get_field_content_int(0, "bpweapon_9");
				pData[extraid][bpWeapons][10] = cache_get_field_content_int(0, "bpweapon_10");
				pData[extraid][bpWeapons][11] = cache_get_field_content_int(0, "bpweapon_11");
				pData[extraid][bpWeapons][13] = cache_get_field_content_int(0, "bpweapon_13");
				pData[extraid][bpWeapons][14] = cache_get_field_content_int(0, "bpweapon_14");
				pData[extraid][bpHPAmmo] = cache_get_field_content_int(0, "bphpammo");
				pData[extraid][bpPoisonAmmo] = cache_get_field_content_int(0, "bppoisonammo");
				pData[extraid][bpFMJAmmo] = cache_get_field_content_int(0, "bpfmjammo");
                pData[extraid][pPassport] = cache_get_field_content_int(0, "passport");
                pData[extraid][pPassportLevel] = cache_get_field_content_int(0, "passportlevel");
                pData[extraid][pPassportSkin] = cache_get_field_content_int(0, "passportskin");
                pData[extraid][pPassportPhone] = cache_get_field_content_int(0, "passportphone");
                pData[extraid][pRope] = cache_get_field_content_int(0, "rope");
                pData[extraid][pBlindfold] = cache_get_field_content_int(0, "blindfold");
                pData[extraid][pInsurance] = cache_get_field_content_int(0, "insurance");
                pData[extraid][pMask] = cache_get_field_content_int(0, "mask");
    			pData[extraid][pTotalPatients] = cache_get_field_content_int(0, "totalpatients");
				pData[extraid][pTotalFires] = cache_get_field_content_int(0, "totalfires");
				pData[extraid][pChatAnim] = cache_get_field_content_int(0, "chatanim");

                pData[extraid][pLogged] = 1;
                pData[extraid][pACTime] = gettime() + 5;

                pData[extraid][pRareTime] = cache_get_field_content_int(0, "rarecooldown");
                pData[extraid][pDiamonds] = cache_get_field_content_int(0, "diamonds");
				pData[extraid][pHunger] = cache_get_field_content_int(0, "hunger");
				pData[extraid][pHungerTimer] = cache_get_field_content_int(0, "hungertimer");
				pData[extraid][pThirst] = cache_get_field_content_int(0, "thirst");
				pData[extraid][pThirstTimer] = cache_get_field_content_int(0, "thirsttimer");
				pData[extraid][pMarriedTo] = cache_get_field_content_int(0, "marriedto");
				pData[extraid][pSkates] = cache_get_field_content_int(0, "rollerskates");
				pData[extraid][pVoiceChat] = cache_get_field_content_int(0, "voicechat");
				pData[extraid][pDiscordTag] = cache_get_field_content_int(0, "discordtag");
				cache_get_field_content(0, "discordname", pData[extraid][pDiscordName], connectionID, 16);
				cache_get_field_content(0, "discordid", pData[extraid][pDiscordID], connectionID, 21);

				//
				new last_login[128];
				cache_get_field_content(0, "lastlogin", last_login, connectionID, sizeof(last_login));
				SendMessage(extraid, COLOR_WHITE, "Welcome back to "SVRCLR""SERVER_NAME""WHITE", %s. Your last login was on "YELLOW"%s{FFFFFF}.", GetRPName(extraid), last_login);

				//Verification - Stewart
                pData[extraid][pVerified] = cache_get_field_content_int(0, "verify");

				//Verification - Stewart
				pData[extraid][pCode] = cache_get_field_content_int(0, "code");
				
				// Hiding Login/Register's TextDraws
				HideLoginRegister(extraid);

				TogglePlayerControllable(extraid, 0);
				SetTimerEx("UnfreezePlayerEx", 5000, false, "i", extraid);

				if(pData[extraid][pMarriedTo] != -1)
				{
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username FROM users WHERE uid = %i", pData[extraid][pMarriedTo]);
    				mysql_tquery(connectionID, queryBuffer, "OnUpdatePartner", "i", extraid);
				}
				else
				{
				    strcpy(pData[extraid][pMarriedName], "Nobody", MAX_PLAYER_NAME);
				}

                if(!pData[extraid][pAdminDuty])
				{
					ClearChat(extraid);
                }

				if(!pData[extraid][pToggleTextdraws])
				{
					if(!pData[extraid][pToggleHUD])
					{
					    PlayerTextDrawShow(extraid, pData[extraid][pText][3]);
					    PlayerTextDrawShow(extraid, pData[extraid][pText][4]);
					}
					if(pData[extraid][pWatchOn])
					{
					    TextDrawShowForPlayer(extraid, TimeTD);
					}
					if(pData[extraid][pGPSOn])
					{
                        ShowGPSTextdraw(extraid);
					}
				}

            	/*if(!isnull(gServerMOTD))
            	{
            		SM(extraid, SERVER_COLOR, "News:"WHITE" %s", gServerMOTD);
            	}*/
            	if(!isnull(gServerMOTD))
				{
					new string[64];
					//SCMf(playerid, COLOR_YELLOW, "%s", gServerMOTD);
					format(string, sizeof(string), "%s", gServerMOTD);
					Dyuze(extraid, "", string, 5000);
				}
            	if(!isnull(adminMOTD) && pData[extraid][pAdmin] > 0)
            	{
            		SM(extraid, COLOR_LIGHTRED, "[Admin News]:"WHITE" %s", adminMOTD);
            	}
            	if(!isnull(helperMOTD) && (pData[extraid][pHelper] > 0 || pData[extraid][pAdmin] > 0))
            	{
            		SM(extraid, COLOR_AQUA, "[Helper News]:"WHITE" %s", helperMOTD);
            	}
            	if(pData[extraid][pGang] >= 0 && strcmp(GangInfo[pData[extraid][pGang]][gMOTD], "None", true) != 0)
            	{
            		SM(extraid, COLOR_GREEN, "Gang News:"WHITE" %s", GangInfo[pData[extraid][pGang]][gMOTD]);
            	}
				if(!IsPlayerVerified(extraid))
				{
					SendClientMessage(extraid, COLOR_YELLOW, "Our system has detected that you are not verified. Use /settings to get the code and verify yourself.");
				}
				else
				{
					SendMessage(extraid, COLOR_GREY, "[DISCORD]: "WHITE"Your account is now connected to your discord account"GREEN"(%s#%i)"WHITE". Happy Gaming!", pData[extraid][pDiscordName], pData[extraid][pDiscordTag]);
				}

				if(cache_get_field_content_int(extraid, "refercount") > 0)
				{
				    new
						count = cache_get_field_content_int(0, "refercount");

				    SM(extraid, COLOR_YELLOW, "%i players who you've referred reached level 3. Therefore you received +1 level!", count);

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET refercount = 0 WHERE uid = %i", pData[extraid][pID]);
				    mysql_tquery(connectionID, queryBuffer);
				}

                if(!pData[extraid][pSetup])
                {
                    if(!pData[extraid][pAdminDuty] && !pData[extraid][pToggleCam])
                    {
                        pData[extraid][pLoginCamera] = 1;
					}
                    if(pData[extraid][pPotPlanted] && pData[extraid][pPotObject] == INVALID_OBJECT_ID)
                    {
                        pData[extraid][pPotObject] = CreateDynamicObject(3409, pData[extraid][pPotX], pData[extraid][pPotY], pData[extraid][pPotZ] - 1.8, 0.0, 0.0, pData[extraid][pPotA]);
					}
					if(pData[extraid][pShowTurfs])
					{
					    ShowTurfsOnMap(extraid, true);
					}
					if(pData[extraid][pShowLands])
					{
					    ShowLandsOnMap(extraid, true);
					}
					
				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET lastlogin = '%s', ip = '%s' WHERE uid = %i", GetDate(), GetPlayerIP(extraid), pData[extraid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id FROM flags WHERE uid = %i", pData[extraid][pID]);
				    mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_COUNT_FLAGS, extraid);

			     	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM clothing WHERE uid = %i", pData[extraid][pID]);
				    mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOAD_CLOTHING, extraid);

				    if(!pData[extraid][pTogglePhone])
				    {
					    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM texts WHERE recipient_number = %i", pData[extraid][pPhone]);
					    mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_COUNT_TEXTS, extraid);
					}

					for(new i = 1; i < MAX_VEHICLES; i ++)
					{
					    if(IsValidVehicle(i) && IsVehicleOwner(extraid, i) && VehicleInfo[i][vTimer] >= 0)
					    {
							KillTimer(VehicleInfo[i][vTimer]);
							VehicleInfo[i][vTimer] = -1;
					    }
					}

					// Just in case.
					//SetPlayerSpecialTag(extraid, TAG_NORMAL);
					/*for(new i = 0; i < 3; i++) {
						TextDrawShowForPlayer(extraid, LogoTD[i]);
					}*/

				    if(pData[extraid][pAdminDuty])
				    {
				    	pData[extraid][pAdminDuty] = 0;
				    	SetPlayerName(extraid, pData[extraid][pUsername]);

				        SAM(COLOR_LIGHTRED, "AdmCmd: %s is no longer on admin duty.", GetRPName(extraid));
				        SCM(extraid, COLOR_WHITE, "** You are no longer on admin duty. Your account's statistics have been preserved.");
				    }
				    else
				    {
					    if(pData[extraid][pAdmin])
					    {
					        SAM(COLOR_LIGHTRED, "[Admin Log]:"WHITE" %s %s has logged in.", GetAdminRank(extraid), GetRPName(extraid));
					    }
					    if(pData[extraid][pGang] >= 0)
					    {
							SendGangMessage(pData[extraid][pGang], COLOR_YELLOW, "Family Member %s(%s) has logged in.", GetRPName(extraid), GangRanks[pData[extraid][pGang]][pData[extraid][pGangRank]]);
						}
						if(pData[extraid][pFaction] >= 0)
					    {
							SendFactionMessage(pData[extraid][pFaction], COLOR_GREEN, "[Faction Log]:"WHITE" Faction Member %s has logged in. "GREEN"[Rank]:"WHITE" %s", GetRPName(extraid), FactionRanks[pData[extraid][pFaction]][pData[extraid][pFactionRank]]);
						}

					    //format(string, sizeof(string), "Welcome to "SERVER_NAME", %s.", GetRPName(extraid));
						//Dyuze(extraid, "Notice", string);

        	        	if(pData[extraid][pAdmin] > 0) {
							SM(extraid, COLOR_WHITE, "You have logged in as a level %i %s.", pData[extraid][pAdmin], GetAdminRank(extraid));
						} else if(pData[extraid][pHelper] > 0) {
						    SM(extraid, COLOR_WHITE, "You have logged in as a %s.", GetHelperRank(extraid));
						} else if(pData[extraid][pDonator] > 0) {
						    SM(extraid, COLOR_WHITE, "You have logged in as a %s Donator.", GetDonatorRank(pData[extraid][pDonator]));
        	        	} else {
        	        	    SM(extraid, COLOR_WHITE, "You have logged in as a level %i player.", pData[extraid][pLevel]);
        	        	}
        	        	if(IsPlayerAndroid(extraid))
						{
							SendClientMessage(extraid, COLOR_YELLOW, "AdmBot: Our bot has detected that you are using a "GREEN"Mobile Client"YELLOW". Happy Gaming!!!");
						} else {
							SendClientMessage(extraid, COLOR_YELLOW, "AdmBot: Our bot has detected that you are using a "GREEN"PC Client"YELLOW". Happy Gaming!!!");
						}
					    StopAudioStreamForPlayer(extraid);
					}

					if(pData[extraid][pFaction] >= 0 && FactionInfo[pData[extraid][pFaction]][fType] == FACTION_NONE)
					{
			         	ResetPlayerWeaponsEx(extraid);
				        SM(extraid, COLOR_LIGHTRED, "You were either kicked from the faction while offline or it was deleted.");
			            SetPlayerSkin(extraid, 230);

				        pData[extraid][pFaction] = -1;
				        pData[extraid][pFactionRank] = 0;
				        pData[extraid][pDivision] = -1;
				        pData[extraid][pDuty] = 0;

					    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET faction = -1, factionrank = 0, division = -1 WHERE uid = %i", pData[extraid][pID]);
					    mysql_tquery(connectionID, queryBuffer);
					}
					if(pData[extraid][pGang] >= 0 && !GangInfo[pData[extraid][pGang]][gSetup])
					{
					    SCM(extraid, COLOR_LIGHTRED, "You have either been kicked from the gang while offline or it was deleted.");
					    pData[extraid][pGang] = -1;
					    pData[extraid][pGangRank] = 0;

					    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gang = -1, gangrank = 0 WHERE uid = %i", pData[extraid][pID]);
					    mysql_tquery(connectionID, queryBuffer);
					}
				}

				if(pData[extraid][pBrokenLeg]) {
					SCM(extraid, COLOR_ERROR, "(( You have a broken leg the last time you logged out. ))");
				}
				SetPlayerToSpawn(extraid);
				ShowNoticeGUIFrame(extraid, 2);
			}
			if(pData[extraid][pSetup])
			{
			    SetPlayerInterior(extraid, 0);
				SetPlayerVirtualWorld(extraid, 0);

				/*InterpolateCameraPos(extraid, 1435.510253, -1302.250488, 307.852752, 1378.400146, -1067.601684, 245.088531, 5000);
				InterpolateCameraLookAt(extraid, 1432.551391, -1298.738891, 305.874450, 1383.033813, -1067.671020, 243.211135, 5000);*/
				SetPlayerPos(extraid, 395.7096, -1343.4858, 37.5186);
				SetPlayerCameraPos(extraid, 395.7096, -1343.4858, 37.51866);
				SetPlayerCameraLookAt(extraid, 412.5323, -1320.6434, 38.0040);

				ShowDialogToPlayer(extraid, DIALOG_GENDER);
			}
	    }
	    case THREAD_COUNT_FLAGS:
	    {
	        if(rows)
	        {
				SAM(COLOR_YELLOW, "AdmWarning: %s[%i] has %i pending flags. (/listflags %i)", GetRPName(extraid), extraid, rows, extraid);
			}
		}
		case THREAD_LOAD_SAFEZONES:
		{
		    for(new i = 0; i < rows && i < MAX_SAFEZONES; i ++)
		    {
		        SafezoneInfo[i][szID] = cache_get_field_content_int(i, "id");
		        SafezoneInfo[i][szSize] = cache_get_field_content_int(i, "size");
		        SafezoneInfo[i][szPosX] = cache_get_field_content_float(i, "pos_x");
		        SafezoneInfo[i][szPosY] = cache_get_field_content_float(i, "pos_y");
			   	SafezoneInfo[i][szPosZ] = cache_get_field_content_float(i, "pos_z");
			   	SafezoneInfo[i][szPosA] = cache_get_field_content_float(i, "pos_r");
			   	SafezoneInfo[i][szLabel] = cache_get_field_content_int(i, "label");
				SafezoneInfo[i][szIcon] = cache_get_field_content_int(i, "icon");
			   	SafezoneInfo[i][szPickup] = -1;
			   	SafezoneInfo[i][szTextID] = Text3D:INVALID_3DTEXT_ID;
				SafezoneInfo[i][szExists] = 1;
				ReloadSafezone(i);
			}
			printf("[Script] %i safezone(s) loaded", rows);//(rows < MAX_SAFEZONES) ? (rows) : (MAX_SAFEZONES));
		}
		case THREAD_LOAD_ACTORS:
        {
            for(new i = 0; i < rows && i < MAX_DYNAMICACTORS; i ++)
		    {
		        cache_get_field_content(i, "label", ActorInfo[i][acLabel], connectionID, 64);
		        ActorInfo[i][acID] = cache_get_field_content_int(i, "id");
		        ActorInfo[i][acPosX] = cache_get_field_content_float(i, "x");
		        ActorInfo[i][acPosY] = cache_get_field_content_float(i, "y");
			   	ActorInfo[i][acPosZ] = cache_get_field_content_float(i, "z");
			   	ActorInfo[i][acPosA] = cache_get_field_content_float(i, "a");
			   	ActorInfo[i][acSkin] = cache_get_field_content_int(i, "skin");
				ActorInfo[i][acWorld] = cache_get_field_content_int(i, "world");
			   	ActorInfo[i][acTextID] = Text3D:INVALID_3DTEXT_ID;
				ActorInfo[i][acExists] = 1;
				ReloadActors(i);
		    }

		    printf("[Script] %i actors loaded.", rows);
        }
		case THREAD_LOAD_PUMPS:
        {
            for(new i = 0; i < rows && i < MAX_PUMPS; i ++)
		    {
		        PumpInfo[i][pumpID] = cache_get_field_content_int(i, "id");
				PumpInfo[i][PosX] = cache_get_field_content_float(i, "posx");
				PumpInfo[i][PosY] = cache_get_field_content_float(i, "posy");
				PumpInfo[i][PosZ] = cache_get_field_content_float(i, "posz");
				PumpInfo[i][PosA] = cache_get_field_content_float(i, "posa");
				PumpInfo[i][pumpLiters] = cache_get_field_content_float(i, "liters");

				PumpInfo[i][pumpTextID] = Text3D:INVALID_3DTEXT_ID;
				PumpInfo[i][pumpExists] = 1;
				ReloadPumps(i);
		    }

		    printf("[Script] %i actors loaded.", rows);
        }
		case THREAD_DMVRELEASE:
		{
		    if(!rows)
		    {
		        SCM(extraid, COLOR_SYNTAX, "You do not have any impounded vehicles.");
		    }
		    else
		    {
		        new string[1024];

		        string = "#\tModel\tTickets";

		        for(new i = 0; i < rows; i ++)
					format(string, sizeof(string), "%s\n%i\t%s\t{ff0000}%s{ffffff}", string, i + 1, vehicleNames[cache_get_field_content_int(i, "modelid") - 400], FormatNumber(cache_get_field_content_int(i, "tickets")));

				ShowPlayerDialog(extraid, DIALOG_DMVRELEASE, DIALOG_STYLE_TABLIST_HEADERS, "Impound Department", string, "Release", "Cancel");
		    }
		}
		case THREAD_BUYPARTS:
		{
		    if(!rows)
		    {
		        SCM(extraid, COLOR_SYNTAX, "You do not have broken vehicles.");
		    }
		    else
		    {
		        new string[1024];

		        string = "#\tModel";

		        for(new i = 0; i < rows; i ++)
					format(string, sizeof(string), "%s\n%i\t%s", string, i + 1, vehicleNames[cache_get_field_content_int(i, "modelid") - 400]);

				ShowPlayerDialog(extraid, DIALOG_BUYPARTS, DIALOG_STYLE_TABLIST_HEADERS, "Broken Vehicles", string, "Choose", "Cancel");
		    }
		}
		case THREAD_TRACE_IP:
		{
		    if(rows)
		    {
		        new username[24], date[24];

		        SM(extraid, SERVER_COLOR, "%i Results Found", rows);

		        for(new i = 0; i < rows; i ++)
		        {
		            cache_get_field_content(i, "username", username);
		            cache_get_field_content(i, "lastlogin", date);

		            SM(extraid, COLOR_GREY2, "Name: %s - Last Seen: %s", username, date);
		        }
		    }
		    else
		    {
		        SCM(extraid, COLOR_SYNTAX, "This IP address is not associated with any accounts.");
			}
		}
		case THREAD_LIST_CHANGES:
		{
		    new text[128];

		    SCM(extraid, SERVER_COLOR, ""REVISION"");

		    for(new i = 0; i < rows; i ++)
			{
			    cache_get_field_content(i, "text", text);
			    SM(extraid, COLOR_GREY1, "%s", text);
			}
		}
		case THREAD_LIST_HELPERS:
		{
		    new username[MAX_PLAYER_NAME], lastlogin[24];

		    SCM(extraid, SERVER_COLOR, "Helper Roster:");

		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_field_content(i, "username", username);
		        cache_get_field_content(i, "lastlogin", lastlogin);

		        switch(cache_get_field_content_int(i, "helperlevel"))
				{
					case 1: SM(extraid, COLOR_AQUA, "[Trial Helper]"WHITE" %s - Last Seen: %s", username, lastlogin);
					case 2: SM(extraid, COLOR_AQUA, "[Junior Helper]"WHITE" %s - Last Seen: %s", username, lastlogin);
					case 3: SM(extraid, COLOR_AQUA, "[General Helper]"WHITE" %s - Last Seen: %s", username, lastlogin);
					case 4: SM(extraid, COLOR_AQUA, "[Senior Helper]"WHITE" %s - Last Seen: %s", username, lastlogin);
					case 5: SM(extraid, COLOR_AQUA, "[Junior Advisor]"WHITE" %s - Last Seen: %s", username, lastlogin);
					case 6: SM(extraid, COLOR_AQUA, "[Senior Advisor]"WHITE" %s - Last Seen: %s", username, lastlogin);
					case 7: SM(extraid, COLOR_AQUA, "[Advisory Director]"WHITE" %s - Last Seen: %s", username, lastlogin);
				}
		    }
		}
		case THREAD_LIST_ADMINS:
		{
		    new username[MAX_PLAYER_NAME], lastlogin[24];

		    SCM(extraid, SERVER_COLOR, "Admin Roster:");

		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_field_content(i, "username", username);
		        cache_get_field_content(i, "lastlogin", lastlogin);

		        switch(cache_get_field_content_int(i, "adminlevel"))
				{
					case 1: SM(extraid, SERVER_COLOR, "[A1]"WHITE" %s - Last Seen: %s", username, lastlogin);
					case 2: SM(extraid, SERVER_COLOR, "[A2]"WHITE" %s - Last Seen: %s", username, lastlogin);
					case 3: SM(extraid, SERVER_COLOR, "[A3]"WHITE" %s - Last Seen: %s", username, lastlogin);
					case 4: SM(extraid, SERVER_COLOR, "[A4]"WHITE" %s - Last Seen: %s", username, lastlogin);
					case 5: SM(extraid, SERVER_COLOR, "[A5]"WHITE" %s - Last Seen: %s", username, lastlogin);
					case 6: SM(extraid, SERVER_COLOR, "[A6]"WHITE" %s - Last Seen: %s", username, lastlogin);
					case 7: SM(extraid, SERVER_COLOR, "[A7]"WHITE" %s - Last Seen: %s", username, lastlogin);
					case 8: SM(extraid, SERVER_COLOR, "[A8]"WHITE" %s - Last Seen: %s", username, lastlogin);
				}
		    }
		}
		case THREAD_LOAD_LOCKERS:
		{
		    for(new i = 0; i < rows && i < MAX_LOCKERS; i ++)
		    {
		        LockerInfo[i][lID] = cache_get_field_content_int(i, "id");
		        LockerInfo[i][lFaction] = cache_get_field_content_int(i, "factionid");
		        LockerInfo[i][lPosX] = cache_get_field_content_float(i, "pos_x");
		        LockerInfo[i][lPosY] = cache_get_field_content_float(i, "pos_y");
		        LockerInfo[i][lPosZ] = cache_get_field_content_float(i, "pos_z");
		        LockerInfo[i][lInterior] = cache_get_field_content_int(i, "interior");
		        LockerInfo[i][lWorld] = cache_get_field_content_int(i, "world");
				LockerInfo[i][lIcon] = cache_get_field_content_int(i, "iconid");
				LockerInfo[i][lLabel] = cache_get_field_content_int(i, "label");

				LockerInfo[i][locKevlar][0] = cache_get_field_content_int(i, "weapon_kevlar");
			    LockerInfo[i][locMedKit][0] = cache_get_field_content_int(i, "weapon_medkit");
			    LockerInfo[i][locNitestick][0] = cache_get_field_content_int(i, "weapon_nitestick");
			    LockerInfo[i][locMace][0] = cache_get_field_content_int(i, "weapon_mace");
			    LockerInfo[i][locDeagle][0] = cache_get_field_content_int(i, "weapon_deagle");
			    LockerInfo[i][locShotgun][0] = cache_get_field_content_int(i, "weapon_shotgun");
			    LockerInfo[i][locMP5][0] = cache_get_field_content_int(i, "weapon_mp5");
			    LockerInfo[i][locM4][0] = cache_get_field_content_int(i, "weapon_m4");
			    LockerInfo[i][locSpas12][0] = cache_get_field_content_int(i, "weapon_spas12");
			    LockerInfo[i][locSniper][0] = cache_get_field_content_int(i, "weapon_sniper");
			    LockerInfo[i][locCamera][0] = cache_get_field_content_int(i, "weapon_camera");
			    LockerInfo[i][locFireExt][0] = cache_get_field_content_int(i, "weapon_fire_extinguisher");
			    LockerInfo[i][locPainKillers][0] = cache_get_field_content_int(i, "weapon_painkillers");

                LockerInfo[i][locKevlar][1] = cache_get_field_content_int(i, "price_kevlar");
			    LockerInfo[i][locMedKit][1] = cache_get_field_content_int(i, "price_medkit");
			    LockerInfo[i][locNitestick][1] = cache_get_field_content_int(i, "price_nitestick");
			    LockerInfo[i][locMace][1] = cache_get_field_content_int(i, "price_mace");
			    LockerInfo[i][locDeagle][1] = cache_get_field_content_int(i, "price_deagle");
			    LockerInfo[i][locShotgun][1] = cache_get_field_content_int(i, "price_shotgun");
			    LockerInfo[i][locMP5][1] = cache_get_field_content_int(i, "price_mp5");
			    LockerInfo[i][locM4][1] = cache_get_field_content_int(i, "price_m4");
			    LockerInfo[i][locSpas12][1] = cache_get_field_content_int(i, "price_spas12");
			    LockerInfo[i][locSniper][1] = cache_get_field_content_int(i, "price_sniper");
			    LockerInfo[i][locCamera][1] = cache_get_field_content_int(i, "price_camera");
			    LockerInfo[i][locFireExt][1] = cache_get_field_content_int(i, "price_fire_extinguisher");
			    LockerInfo[i][locPainKillers][1] = cache_get_field_content_int(i, "price_painkillers");

		        LockerInfo[i][lText] = Text3D:INVALID_3DTEXT_ID;
		        LockerInfo[i][lPickup] = -1;
		        LockerInfo[i][lExists] = 1;

		        ReloadLocker(i);
		    }
		}
		case THREAD_LOAD_HOUSES:
		{
		    for(new i = 0; i < rows && i < MAX_HOUSES; i ++)
		    {
		        cache_get_field_content(i, "owner", HouseInfo[i][hOwner], connectionID, MAX_PLAYER_NAME);

		        HouseInfo[i][hID] = cache_get_field_content_int(i, "id");
		        HouseInfo[i][hOwnerID] = cache_get_field_content_int(i, "ownerid");
		        cache_get_field_content(i, "house_desc", HouseInfo[i][hDescription]);
		        HouseInfo[i][hType] = cache_get_field_content_int(i, "type");
		        HouseInfo[i][hPrice] = cache_get_field_content_int(i, "price");
		        HouseInfo[i][hRentPrice] = cache_get_field_content_int(i, "rentprice");
		        HouseInfo[i][hLevel] = cache_get_field_content_int(i, "level");
		        HouseInfo[i][hLocked] = cache_get_field_content_int(i, "locked");
		        HouseInfo[i][hTimestamp] = cache_get_field_content_int(i, "timestamp");
		        HouseInfo[i][hPosX] = cache_get_field_content_float(i, "pos_x");
		        HouseInfo[i][hPosY] = cache_get_field_content_float(i, "pos_y");
		        HouseInfo[i][hPosZ] = cache_get_field_content_float(i, "pos_z");
		        HouseInfo[i][hPosA] = cache_get_field_content_float(i, "pos_a");
                HouseInfo[i][hIntX] = cache_get_field_content_float(i, "int_x");
		        HouseInfo[i][hIntY] = cache_get_field_content_float(i, "int_y");
		        HouseInfo[i][hIntZ] = cache_get_field_content_float(i, "int_z");
		        HouseInfo[i][hIntA] = cache_get_field_content_float(i, "int_a");
		        HouseInfo[i][hInterior] = cache_get_field_content_int(i, "interior");
		        HouseInfo[i][hWorld] = cache_get_field_content_int(i, "world");
		        HouseInfo[i][hOutsideInt] = cache_get_field_content_int(i, "outsideint");
		        HouseInfo[i][hOutsideVW] = cache_get_field_content_int(i, "outsidevw");
		        HouseInfo[i][hCash] = cache_get_field_content_int(i, "cash");
		        HouseInfo[i][hMaterials] = cache_get_field_content_int(i, "materials");
                HouseInfo[i][hPot] = cache_get_field_content_int(i, "pot");
                HouseInfo[i][hCrack] = cache_get_field_content_int(i, "crack");
                HouseInfo[i][hMeth] = cache_get_field_content_int(i, "meth");
                HouseInfo[i][hPainkillers] = cache_get_field_content_int(i, "painkillers");
                HouseInfo[i][hWeapons][0] = cache_get_field_content_int(i, "weapon_1");
                HouseInfo[i][hWeapons][1] = cache_get_field_content_int(i, "weapon_2");
                HouseInfo[i][hWeapons][2] = cache_get_field_content_int(i, "weapon_3");
                HouseInfo[i][hWeapons][3] = cache_get_field_content_int(i, "weapon_4");
                HouseInfo[i][hWeapons][4] = cache_get_field_content_int(i, "weapon_5");
                HouseInfo[i][hWeapons][5] = cache_get_field_content_int(i, "weapon_6");
                HouseInfo[i][hWeapons][6] = cache_get_field_content_int(i, "weapon_7");
                HouseInfo[i][hWeapons][7] = cache_get_field_content_int(i, "weapon_8");
                HouseInfo[i][hWeapons][8] = cache_get_field_content_int(i, "weapon_9");
                HouseInfo[i][hWeapons][9] = cache_get_field_content_int(i, "weapon_10");
                HouseInfo[i][hHPAmmo] = cache_get_field_content_int(i, "hpammo");
                HouseInfo[i][hPoisonAmmo] = cache_get_field_content_int(i, "poisonammo");
                HouseInfo[i][hFMJAmmo] = cache_get_field_content_int(i, "fmjammo");
                HouseInfo[i][hText] = Text3D:INVALID_3DTEXT_ID;
                HouseInfo[i][hPickup] = -1;
                HouseInfo[i][hLabels] = 0;
                HouseInfo[i][hExists] = 1;
				HouseInfo[i][hRobbed] = cache_get_field_content_int(i, "robbed");
				HouseInfo[i][hRobbing] = cache_get_field_content_int(i, "robbing");
                ReloadHouse(i);
		    }

		    printf("[Script] %i houses loaded.", rows);
		}
		case THREAD_LIST_TENANTS:
		{
		    if(!rows)
		    {
		        SCM(extraid, COLOR_SYNTAX, "There is nobody currently renting at your home.");
			}
			else
			{
			    new username[MAX_PLAYER_NAME], date[24];

				SCM(extraid, SERVER_COLOR, "List of Tenants");

			    for(new i = 0; i < rows; i ++)
			    {
			        cache_get_field_content(i, "username", username);
			        cache_get_field_content(i, "lastlogin", date);

			        SM(extraid, COLOR_GREY2, "Name: %s - Last Seen: %s", username, date);
				}
			}
		}
		case THREAD_LOAD_FURNITURE:
		{
		    for(new i = 0; i < rows; i ++)
		    {
		        new objectid = CreateDynamicObject(cache_get_field_content_int(i, "modelid"), cache_get_field_content_float(i, "pos_x"), cache_get_field_content_float(i, "pos_y"), cache_get_field_content_float(i, "pos_z"), cache_get_field_content_float(i, "rot_x"), cache_get_field_content_float(i, "rot_y"), cache_get_field_content_float(i, "rot_z"), cache_get_field_content_int(i, "world"), cache_get_field_content_int(i, "interior"));

				Streamer_SetExtraInt(objectid, E_OBJECT_TYPE, E_OBJECT_FURNITURE);
				Streamer_SetExtraInt(objectid, E_OBJECT_INDEX_ID, cache_get_field_content_int(i, "id"));
				Streamer_SetExtraInt(objectid, E_OBJECT_EXTRA_ID, cache_get_field_content_int(i, "houseid"));

				if(extraid)
				{
				    new
				        string[48];

				    cache_get_field_content(i, "name", string);

					format(string, sizeof(string), "[%i] - %s", objectid, string);
					Streamer_SetExtraInt(objectid, E_OBJECT_3DTEXT_ID, _:CreateDynamic3DTextLabel(string, COLOR_GREY2, cache_get_field_content_float(i, "pos_x"), cache_get_field_content_float(i, "pos_y"), cache_get_field_content_float(i, "pos_z"), 10.0, .worldid = cache_get_field_content_int(i, "world"), .interiorid = cache_get_field_content_int(i, "interior")));
				}
			}
		}
		case THREAD_LOAD_GARAGES:
		{
		    for(new i = 0; i < rows && i < MAX_GARAGES; i ++)
		    {
		        cache_get_field_content(i, "owner", GarageInfo[i][gOwner], connectionID, MAX_PLAYER_NAME);

		        GarageInfo[i][gID] = cache_get_field_content_int(i, "id");
		        GarageInfo[i][gOwnerID] = cache_get_field_content_int(i, "ownerid");
		        GarageInfo[i][gType] = cache_get_field_content_int(i, "type");
		        GarageInfo[i][gPrice] = cache_get_field_content_int(i, "price");
		        GarageInfo[i][gLocked] = cache_get_field_content_int(i, "locked");
		        GarageInfo[i][gTimestamp] = cache_get_field_content_int(i, "timestamp");
		        GarageInfo[i][gPosX] = cache_get_field_content_float(i, "pos_x");
		        GarageInfo[i][gPosY] = cache_get_field_content_float(i, "pos_y");
		        GarageInfo[i][gPosZ] = cache_get_field_content_float(i, "pos_z");
		        GarageInfo[i][gPosA] = cache_get_field_content_float(i, "pos_a");
		        GarageInfo[i][gExitX] = cache_get_field_content_float(i, "exit_x");
		        GarageInfo[i][gExitY] = cache_get_field_content_float(i, "exit_y");
		        GarageInfo[i][gExitZ] = cache_get_field_content_float(i, "exit_z");
		        GarageInfo[i][gExitA] = cache_get_field_content_float(i, "exit_a");
		        GarageInfo[i][gWorld] = cache_get_field_content_int(i, "world");
		        GarageInfo[i][gText] = Text3D:INVALID_3DTEXT_ID;
		        GarageInfo[i][gPickup] = -1;
		        GarageInfo[i][gExists] = 1;

				ReloadGarage(i);
		    }

		    printf("[Script] %i garages loaded.", rows);
		}
        case THREAD_LOAD_BUSINESSES:
		{
			new count;
		    for(new i = 0; i < rows && i < MAX_BUSINESSES; i ++)
		    {
		        cache_get_field_content(i, "owner", BusinessInfo[i][bOwner], connectionID, MAX_PLAYER_NAME);

		        BusinessInfo[i][bID] = cache_get_field_content_int(i, "id");
		        BusinessInfo[i][bOwnerID] = cache_get_field_content_int(i, "ownerid");
		        cache_get_field_content(i, "biz_desc", BusinessInfo[i][bDescription]);
		        BusinessInfo[i][bType] = cache_get_field_content_int(i, "type");
		        BusinessInfo[i][bPrice] = cache_get_field_content_int(i, "price");
		        BusinessInfo[i][bEntryFee] = cache_get_field_content_int(i, "entryfee");
		        BusinessInfo[i][bLocked] = cache_get_field_content_int(i, "locked");
		        BusinessInfo[i][bTimestamp] = cache_get_field_content_int(i, "timestamp");
		        BusinessInfo[i][bPosX] = cache_get_field_content_float(i, "pos_x");
		        BusinessInfo[i][bPosY] = cache_get_field_content_float(i, "pos_y");
		        BusinessInfo[i][bPosZ] = cache_get_field_content_float(i, "pos_z");
		        BusinessInfo[i][bPosA] = cache_get_field_content_float(i, "pos_a");
                BusinessInfo[i][bIntX] = cache_get_field_content_float(i, "int_x");
		        BusinessInfo[i][bIntY] = cache_get_field_content_float(i, "int_y");
		        BusinessInfo[i][bIntZ] = cache_get_field_content_float(i, "int_z");
		        BusinessInfo[i][bIntA] = cache_get_field_content_float(i, "int_a");
		        BusinessInfo[i][bInterior] = cache_get_field_content_int(i, "interior");
		        BusinessInfo[i][bWorld] = cache_get_field_content_int(i, "world");
		        BusinessInfo[i][bOutsideInt] = cache_get_field_content_int(i, "outsideint");
		        BusinessInfo[i][bOutsideVW] = cache_get_field_content_int(i, "outsidevw");
		        BusinessInfo[i][bCash] = cache_get_field_content_int(i, "cash");
                BusinessInfo[i][bProducts] = cache_get_field_content_int(i, "products");
                BusinessInfo[i][bText] = Text3D:INVALID_3DTEXT_ID;
                BusinessInfo[i][bPickup] = -1;
                BusinessInfo[i][bMapIcon] = -1;
                BusinessInfo[i][bExists] = 1;
          		cache_get_field_content(i, "name", BusinessInfo[i][bName], connectionID, 64);
                cache_get_field_content(i, "message", BusinessInfo[i][bMessage], connectionID, 128);
				BusinessInfo[i][bRobbed] = cache_get_field_content_int(i, "robbed");
				BusinessInfo[i][bRobbing] = cache_get_field_content_int(i, "robbing");

				new str[64];
				for (new j = 0; j < 25; j ++)
				{
					format(str, 32, "prices%d", j);
					BusinessInfo[i][bPrices][j] = cache_get_field_content_int(i, str);
				}
				if(BusinessInfo[i][bType] == BUSINESS_DEALERSHIP)
				{
					count++;
				}

				ReloadBusiness(i);
			}

		    printf("[Script] %i businesses loaded.", rows);
			printf("[Script]: %i dealership business loaded.", count);
		}
		case THREAD_LOAD_ENTRANCES:
		{
		    for(new i = 0; i < rows && i < MAX_ENTRANCES; i ++)
		    {
		        cache_get_field_content(i, "owner", EntranceInfo[i][eOwner], connectionID, MAX_PLAYER_NAME);
		        cache_get_field_content(i, "name", EntranceInfo[i][eName], connectionID, 40);
		        cache_get_field_content(i, "password", EntranceInfo[i][ePassword], connectionID, 64);

				EntranceInfo[i][eID] = cache_get_field_content_int(i, "id");
				EntranceInfo[i][eOwnerID] = cache_get_field_content_int(i, "ownerid");
				EntranceInfo[i][eIcon] = cache_get_field_content_int(i, "iconid");
                EntranceInfo[i][eLocked] = cache_get_field_content_int(i, "locked");
                EntranceInfo[i][eRadius] = cache_get_field_content_float(i, "radius");
                EntranceInfo[i][ePosX] = cache_get_field_content_float(i, "pos_x");
                EntranceInfo[i][ePosY] = cache_get_field_content_float(i, "pos_y");
                EntranceInfo[i][ePosZ] = cache_get_field_content_float(i, "pos_z");
                EntranceInfo[i][ePosA] = cache_get_field_content_float(i, "pos_a");
                EntranceInfo[i][eIntX] = cache_get_field_content_float(i, "int_x");
                EntranceInfo[i][eIntY] = cache_get_field_content_float(i, "int_y");
                EntranceInfo[i][eIntZ] = cache_get_field_content_float(i, "int_z");
                EntranceInfo[i][eIntA] = cache_get_field_content_float(i, "int_a");
                EntranceInfo[i][eInterior] = cache_get_field_content_int(i, "interior");
                EntranceInfo[i][eWorld] = cache_get_field_content_int(i, "world");
                EntranceInfo[i][eOutsideInt] = cache_get_field_content_int(i, "outsideint");
                EntranceInfo[i][eOutsideVW] = cache_get_field_content_int(i, "outsidevw");
                EntranceInfo[i][eAdminLevel] = cache_get_field_content_int(i, "adminlevel");
                EntranceInfo[i][eFactionType] = cache_get_field_content_int(i, "factiontype");
                EntranceInfo[i][eVIP] = cache_get_field_content_int(i, "vip");
                EntranceInfo[i][eVehicles] = cache_get_field_content_int(i, "vehicles");
                EntranceInfo[i][eFreeze] = cache_get_field_content_int(i, "freeze");
                EntranceInfo[i][eLabel] = cache_get_field_content_int(i, "label");
                EntranceInfo[i][eMapIcon] = cache_get_field_content_int(i, "mapicon");
                EntranceInfo[i][eColor] = cache_get_field_content_int(i, "color");
                EntranceInfo[i][eText] = Text3D:INVALID_3DTEXT_ID;
                EntranceInfo[i][ePickup] = -1;
                EntranceInfo[i][eExists] = 1;
                EntranceInfo[i][eMapIconID] = -1;

                ReloadEntrance(i);
			}

			printf("[Script] %i entrances loaded.", rows);
		}
		case THREAD_LOAD_FACTIONS:
		{
		    for(new i = 0; i < rows && i < MAX_FACTIONS; i ++)
		    {
		        new factionid = cache_get_field_content_int(i, "id");

		        cache_get_field_content(i, "name", FactionInfo[factionid][fName], connectionID, 48);
		        cache_get_field_content(i, "shortname", FactionInfo[factionid][fShortName], connectionID, 24);
		        cache_get_field_content(i, "leader", FactionInfo[factionid][fLeader], connectionID, MAX_PLAYER_NAME);

		        FactionInfo[factionid][fType] = cache_get_field_content_int(i, "type");
		        FactionInfo[factionid][fColor] = cache_get_field_content_int(i, "color");
		        FactionInfo[factionid][fRankCount] = cache_get_field_content_int(i, "rankcount");
		        FactionInfo[factionid][fTurfTokens] = cache_get_field_content_int(i, "turftokens");
                FactionInfo[factionid][fText] = Text3D:INVALID_3DTEXT_ID;
                FactionInfo[factionid][fPickup] = -1;
				FAC_VoiceDefine(factionid, FactionInfo[factionid][fColor]	);

		    }

		    printf("[Script] %i factions loaded.", rows);
		}
		case THREAD_LOAD_FACTIONRANKS:
		{
		    for(new i = 0; i < MAX_FACTIONS; i ++)
	    	{
		        for(new r = 0; r < MAX_FACTION_RANKS; r ++)
		        {
		            strcpy(FactionRanks[i][r], "Unspecified", 32);
		        }
		    }

		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_field_content(i, "name", FactionRanks[cache_get_field_content_int(i, "id")][cache_get_field_content_int(i, "rank")], connectionID, 32);
      		}
		}
        case THREAD_LOAD_FACTIONSKINS:
		{
		    for(new i = 0; i < rows; i ++)
		    {
				FactionInfo[cache_get_field_content_int(i, "id")][fSkins][cache_get_field_content_int(i, "slot")] = cache_get_field_content_int(i, "skinid");
		    }
		}
		case THREAD_LOAD_FACTIONPAY:
		{
		    for(new i = 0; i < rows; i ++)
		    {
				FactionInfo[cache_get_field_content_int(i, "id")][fPaycheck][cache_get_field_content_int(i, "rank")] = cache_get_field_content_int(i, "amount");
		    }
		}
		case THREAD_LOAD_DIVISIONS:
		{
		    for(new i = 0; i < MAX_FACTIONS; i ++)
	    	{
		        for(new r = 0; r < MAX_FACTION_DIVISIONS; r ++)
		        {
		            FactionDivisions[i][r][0] = 0;
		        }
		    }

		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_field_content(i, "name", FactionDivisions[cache_get_field_content_int(i, "id")][cache_get_field_content_int(i, "divisionid")], connectionID, 32);
      		}
		}
		case THREAD_LOAD_LANDS:
		{
		    for(new i = 0; i < rows && i < MAX_LANDS; i ++)
		    {
		        cache_get_field_content(i, "owner", LandInfo[i][lOwner], connectionID, MAX_PLAYER_NAME);

		        LandInfo[i][lID] = cache_get_field_content_int(i, "id");
		        LandInfo[i][lOwnerID] = cache_get_field_content_int(i, "ownerid");
		        LandInfo[i][lPrice] = cache_get_field_content_int(i, "price");
		        LandInfo[i][lMinX] = cache_get_field_content_float(i, "min_x");
		        LandInfo[i][lMinY] = cache_get_field_content_float(i, "min_y");
		        LandInfo[i][lMaxX] = cache_get_field_content_float(i, "max_x");
		        LandInfo[i][lMaxY] = cache_get_field_content_float(i, "max_y");
		        LandInfo[i][lHeight] = cache_get_field_content_float(i, "height");
		        LandInfo[i][lX] = cache_get_field_content_float(i, "lx");
		        LandInfo[i][lY] = cache_get_field_content_float(i, "ly");
		        LandInfo[i][lZ] = cache_get_field_content_float(i, "lz");
		        LandInfo[i][lGangZone] = -1;
		        LandInfo[i][lArea] = -1;
		        LandInfo[i][lLabels] = 0;
		        LandInfo[i][lExists] = 1;
				LandInfo[i][lPickup] = -1;

		        ReloadLand(i);
			}

			printf("[Script] %i lands loaded.", rows);
		}
		case THREAD_LOAD_LANDOBJECTS:
		{
		    for(new i = 0; i < rows; i ++)
		    {
		        new objectid = CreateDynamicObject(cache_get_field_content_int(i, "modelid"), cache_get_field_content_float(i, "pos_x"), cache_get_field_content_float(i, "pos_y"), cache_get_field_content_float(i, "pos_z"), cache_get_field_content_float(i, "rot_x"), cache_get_field_content_float(i, "rot_y"), cache_get_field_content_float(i, "rot_z"));

				Streamer_SetExtraInt(objectid, E_OBJECT_TYPE, E_OBJECT_LAND);
				Streamer_SetExtraInt(objectid, E_OBJECT_INDEX_ID, cache_get_field_content_int(i, "id"));
				Streamer_SetExtraInt(objectid, E_OBJECT_EXTRA_ID, cache_get_field_content_int(i, "landid"));
				Streamer_SetExtraFloat(objectid, E_OBJECT_X, cache_get_field_content_float(i, "pos_x"));
                Streamer_SetExtraFloat(objectid, E_OBJECT_Y, cache_get_field_content_float(i, "pos_y"));
                Streamer_SetExtraFloat(objectid, E_OBJECT_Z, cache_get_field_content_float(i, "pos_z"));

				if(extraid)
				{
				    new
				        landstring[48];

				    cache_get_field_content(i, "name", landstring);

					format(landstring, sizeof(landstring), "[%i] - %s", objectid, landstring);
					Streamer_SetExtraInt(objectid, E_OBJECT_3DTEXT_ID, _:CreateDynamic3DTextLabel(landstring, COLOR_GREY2, cache_get_field_content_float(i, "pos_x"), cache_get_field_content_float(i, "pos_y"), cache_get_field_content_float(i, "pos_z"), 10.0));
				}
			}
		}
		case THREAD_LOAD_GANGS:
		{
		    for(new i = 0; i < rows && i < MAX_GANGS; i ++)
		    {
		        new gangid = cache_get_field_content_int(i, "id");

		        cache_get_field_content(i, "name", GangInfo[gangid][gName], connectionID, 32);
		        cache_get_field_content(i, "motd", GangInfo[gangid][gMOTD], connectionID, 128);
		        cache_get_field_content(i, "leader", GangInfo[gangid][gLeader], connectionID, MAX_PLAYER_NAME);

		        GangInfo[gangid][gColor] = cache_get_field_content_int(i, "color");
		        GangInfo[gangid][gStrikes] = cache_get_field_content_int(i, "strikes");
		        GangInfo[gangid][gLevel] = cache_get_field_content_int(i, "level");
		        GangInfo[gangid][gPoints] = cache_get_field_content_int(i, "points");
		        GangInfo[gangid][gTurfTokens] = cache_get_field_content_int(i, "turftokens");
		        GangInfo[gangid][gStashX] = cache_get_field_content_float(i, "stash_x");
		        GangInfo[gangid][gStashY] = cache_get_field_content_float(i, "stash_y");
		        GangInfo[gangid][gStashZ] = cache_get_field_content_float(i, "stash_z");
		        GangInfo[gangid][gStashInterior] = cache_get_field_content_int(i, "stashinterior");
		        GangInfo[gangid][gStashWorld] = cache_get_field_content_int(i, "stashworld");
		        GangInfo[gangid][gCash] = cache_get_field_content_int(i, "cash");
		        GangInfo[gangid][gMaterials] = cache_get_field_content_int(i, "materials");
		        GangInfo[gangid][gPot] = cache_get_field_content_int(i, "pot");
		        GangInfo[gangid][gCrack] = cache_get_field_content_int(i, "crack");
		        GangInfo[gangid][gMeth] = cache_get_field_content_int(i, "meth");
		        GangInfo[gangid][gPainkillers] = cache_get_field_content_int(i, "painkillers");
				GangInfo[gangid][gHPAmmo] = cache_get_field_content_int(i, "hpammo");
				GangInfo[gangid][gPoisonAmmo] = cache_get_field_content_int(i, "poisonammo");
				GangInfo[gangid][gFMJAmmo] = cache_get_field_content_int(i, "fmjammo");
				GangInfo[gangid][gAlliance] = cache_get_field_content_int (i, "alliance");

				// Gang stash weapons
				GangInfo[gangid][gWeapons][GANGWEAPON_VEST] = cache_get_field_content_int(i, "weapon_vest");
		        GangInfo[gangid][gWeapons][GANGWEAPON_9MM] = cache_get_field_content_int(i, "weapon_9mm");
		        GangInfo[gangid][gWeapons][GANGWEAPON_SDPISTOL] = cache_get_field_content_int(i, "weapon_sdpistol");
		        GangInfo[gangid][gWeapons][GANGWEAPON_DEAGLE] = cache_get_field_content_int(i, "weapon_deagle");
		        GangInfo[gangid][gWeapons][GANGWEAPON_SHOTGUN] = cache_get_field_content_int(i, "weapon_shotgun");
		        GangInfo[gangid][gWeapons][GANGWEAPON_SPAS12] = cache_get_field_content_int(i, "weapon_spas12");
		        GangInfo[gangid][gWeapons][GANGWEAPON_SAWNOFF] = cache_get_field_content_int(i, "weapon_sawnoff");
		        GangInfo[gangid][gWeapons][GANGWEAPON_TEC9] = cache_get_field_content_int(i, "weapon_tec9");
		        GangInfo[gangid][gWeapons][GANGWEAPON_UZI] = cache_get_field_content_int(i, "weapon_uzi");
		        GangInfo[gangid][gWeapons][GANGWEAPON_MP5] = cache_get_field_content_int(i, "weapon_mp5");
		        GangInfo[gangid][gWeapons][GANGWEAPON_AK47] = cache_get_field_content_int(i, "weapon_ak47");
		        GangInfo[gangid][gWeapons][GANGWEAPON_M4] = cache_get_field_content_int(i, "weapon_m4");
		        GangInfo[gangid][gWeapons][GANGWEAPON_RIFLE] = cache_get_field_content_int(i, "weapon_rifle");
		        GangInfo[gangid][gWeapons][GANGWEAPON_SNIPER] = cache_get_field_content_int(i, "weapon_sniper");
		        GangInfo[gangid][gWeapons][GANGWEAPON_MOLOTOV] = cache_get_field_content_int(i, "weapon_molotov");

				// Gang arms & drug dealer
		        GangInfo[gangid][gArmsDealer] = cache_get_field_content_int(i, "armsdealer");
		        GangInfo[gangid][gDrugDealer] = cache_get_field_content_int(i, "drugdealer");
		        GangInfo[gangid][gArmsX] = cache_get_field_content_float(i, "arms_x");
		        GangInfo[gangid][gArmsY] = cache_get_field_content_float(i, "arms_y");
		        GangInfo[gangid][gArmsZ] = cache_get_field_content_float(i, "arms_z");
		        GangInfo[gangid][gArmsA] = cache_get_field_content_float(i, "arms_a");
		        GangInfo[gangid][gDrugX] = cache_get_field_content_float(i, "drug_x");
		        GangInfo[gangid][gDrugY] = cache_get_field_content_float(i, "drug_y");
		        GangInfo[gangid][gDrugZ] = cache_get_field_content_float(i, "drug_z");
		        GangInfo[gangid][gDrugA] = cache_get_field_content_float(i, "drug_a");
		        GangInfo[gangid][gArmsWorld] = cache_get_field_content_int(i, "armsworld");
		        GangInfo[gangid][gDrugWorld] = cache_get_field_content_int(i, "drugworld");
                GangInfo[gangid][gDrugPot] = cache_get_field_content_int(i, "drugpot");
                GangInfo[gangid][gDrugCrack] = cache_get_field_content_int(i, "drugcrack");
                GangInfo[gangid][gDrugMeth] = cache_get_field_content_int(i, "drugmeth");
                GangInfo[gangid][gArmsMaterials] = cache_get_field_content_int(i, "armsmaterials");
                GangInfo[gangid][gArmsPrices][0] = cache_get_field_content_int(i, "armsprice_1");
                GangInfo[gangid][gArmsPrices][1] = cache_get_field_content_int(i, "armsprice_2");
                GangInfo[gangid][gArmsPrices][2] = cache_get_field_content_int(i, "armsprice_3");
                GangInfo[gangid][gArmsPrices][3] = cache_get_field_content_int(i, "armsprice_4");
                GangInfo[gangid][gArmsPrices][4] = cache_get_field_content_int(i, "armsprice_5");
                GangInfo[gangid][gArmsPrices][5] = cache_get_field_content_int(i, "armsprice_6");
                GangInfo[gangid][gArmsPrices][6] = cache_get_field_content_int(i, "armsprice_7");
                GangInfo[gangid][gArmsPrices][7] = cache_get_field_content_int(i, "armsprice_8");
                GangInfo[gangid][gArmsPrices][8] = cache_get_field_content_int(i, "armsprice_9");
                GangInfo[gangid][gArmsPrices][9] = cache_get_field_content_int(i, "armsprice_10");
                GangInfo[gangid][gArmsPrices][10] = cache_get_field_content_int(i, "armsprice_11");
                GangInfo[gangid][gArmsPrices][11] = cache_get_field_content_int(i, "armsprice_12");
                GangInfo[gangid][gDrugPrices][0] = cache_get_field_content_int(i, "pot_price");
                GangInfo[gangid][gDrugPrices][1] = cache_get_field_content_int(i, "crack_price");
                GangInfo[gangid][gDrugPrices][2] = cache_get_field_content_int(i, "meth_price");
                GangInfo[gangid][gArmsHPAmmo] = cache_get_field_content_int(i, "armshpammo");
                GangInfo[gangid][gArmsPoisonAmmo] = cache_get_field_content_int(i, "armspoisonammo");
                GangInfo[gangid][gArmsFMJAmmo] = cache_get_field_content_int(i, "armsfmjammo");

		        GangInfo[gangid][gText][0] = Text3D:INVALID_3DTEXT_ID;
		        GangInfo[gangid][gText][1] = Text3D:INVALID_3DTEXT_ID;
		        GangInfo[gangid][gText][2] = Text3D:INVALID_3DTEXT_ID;
		        GangInfo[gangid][gActors][0] = INVALID_ACTOR_ID;
    			GangInfo[gangid][gActors][1] = INVALID_ACTOR_ID;
		        GangInfo[gangid][gPickup] = -1;
		        GangInfo[gangid][gSetup] = 1;

				ReloadGang(gangid);
			}

			printf("[Script] %i gangs loaded.", rows);
		}
		case THREAD_LOAD_GANGRANKS:
		{
		    for(new i = 0; i < MAX_GANGS; i ++)
	    	{
		        for(new r = 0; r < 7; r ++)
		        {
		            strcpy(GangRanks[i][r], "Unspecified", 32);
		        }
		    }

		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_field_content(i, "name", GangRanks[cache_get_field_content_int(i, "id")][cache_get_field_content_int(i, "rank")], connectionID, 32);
      		}
		}
        case THREAD_LOAD_GANGSKINS:
		{
		    for(new i = 0; i < rows; i ++)
		    {
				GangInfo[cache_get_field_content_int(i, "id")][gSkins][cache_get_field_content_int(i, "slot")] = cache_get_field_content_int(i, "skinid");
		    }
		}
		case THREAD_LOAD_POINTS:
		{
		    for(new i = 0; i < rows && i < MAX_POINTS; i ++)
		    {
		        new pointid = cache_get_field_content_int(i, "id");

		        cache_get_field_content(i, "name", PointInfo[pointid][pName], connectionID, 32);
		        cache_get_field_content(i, "capturedby", PointInfo[pointid][pCapturedBy], connectionID, MAX_PLAYER_NAME);

		        PointInfo[pointid][pCapturedGang] = cache_get_field_content_int(i, "capturedgang");
		        PointInfo[pointid][pType] = cache_get_field_content_int(i, "type");
		        PointInfo[pointid][pProfits] = cache_get_field_content_int(i, "profits");
		        PointInfo[pointid][pTime] = cache_get_field_content_int(i, "time");
		        PointInfo[pointid][pPointX] = cache_get_field_content_float(i, "point_x");
		        PointInfo[pointid][pPointY] = cache_get_field_content_float(i, "point_y");
		        PointInfo[pointid][pPointZ] = cache_get_field_content_float(i, "point_z");
		        PointInfo[pointid][pPointInterior] = cache_get_field_content_int(i, "pointinterior");
		        PointInfo[pointid][pPointWorld] = cache_get_field_content_int(i, "pointworld");
		        PointInfo[pointid][pCaptureTime] = 0;
		        PointInfo[pointid][pCapturer] = INVALID_PLAYER_ID;
		        PointInfo[pointid][pText] = Text3D:INVALID_3DTEXT_ID;
		        PointInfo[pointid][pPickup] = -1;
		        PointInfo[pointid][pExists] = 1;

				if(PointInfo[pointid][pCapturedGang] >= 0 && !GangInfo[PointInfo[pointid][pCapturedGang]][gSetup])
				{
				    PointInfo[pointid][pCapturedGang] = -1;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET capturedgang = -1 WHERE id = %i", pointid);
				    mysql_tquery(connectionID, queryBuffer);
				}

				ReloadPoint(pointid);
		    }

		    printf("[Script] %i points loaded.", rows);
		}
		case THREAD_LOAD_TURFS:
		{
		    for(new i = 0; i < rows && i < MAX_TURFS; i ++)
		    {
		        new turfid = cache_get_field_content_int(i, "id");

		        cache_get_field_content(i, "name", TurfInfo[turfid][tName], connectionID, 32);
		        cache_get_field_content(i, "capturedby", TurfInfo[turfid][tCapturedBy], connectionID, MAX_PLAYER_NAME);

		        TurfInfo[turfid][tCapturedGang] = cache_get_field_content_int(i, "capturedgang");
		        TurfInfo[turfid][tType] = cache_get_field_content_int(i, "type");
		        TurfInfo[turfid][tTime] = cache_get_field_content_int(i, "time");
		        TurfInfo[turfid][tMinX] = cache_get_field_content_float(i, "min_x");
		        TurfInfo[turfid][tMinY] = cache_get_field_content_float(i, "min_y");
		        TurfInfo[turfid][tMaxX] = cache_get_field_content_float(i, "max_x");
		        TurfInfo[turfid][tMaxY] = cache_get_field_content_float(i, "max_y");
		        TurfInfo[turfid][tHeight] = cache_get_field_content_float(i, "height");
		        TurfInfo[turfid][tGangZone] = -1;
		        TurfInfo[turfid][tArea] = -1;
		        TurfInfo[turfid][tCaptureTime] = 0;
				TurfInfo[turfid][tCapturer] = INVALID_PLAYER_ID;
		        TurfInfo[turfid][tExists] = 1;

		        ReloadTurf(turfid);
			}

			printf("[Script] %i turfs loaded.", rows);
		}
		case THREAD_LOAD_CLOTHING:
		{
		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_field_content(i, "name", ClothingInfo[extraid][i][cName], connectionID, 32);

		        ClothingInfo[extraid][i][cID] = cache_get_field_content_int(i, "id");
		        ClothingInfo[extraid][i][cModel] = cache_get_field_content_int(i, "modelid");
		        ClothingInfo[extraid][i][cBone] = cache_get_field_content_int(i, "boneid");
		        ClothingInfo[extraid][i][cAttached] = cache_get_field_content_int(i, "attached");
		        ClothingInfo[extraid][i][cPosX] = cache_get_field_content_float(i, "pos_x");
		        ClothingInfo[extraid][i][cPosY] = cache_get_field_content_float(i, "pos_y");
		        ClothingInfo[extraid][i][cPosZ] = cache_get_field_content_float(i, "pos_z");
		        ClothingInfo[extraid][i][cRotX] = cache_get_field_content_float(i, "rot_x");
		        ClothingInfo[extraid][i][cRotY] = cache_get_field_content_float(i, "rot_y");
		        ClothingInfo[extraid][i][cRotZ] = cache_get_field_content_float(i, "rot_z");
		        ClothingInfo[extraid][i][cScaleX] = cache_get_field_content_float(i, "scale_x");
		        ClothingInfo[extraid][i][cScaleY] = cache_get_field_content_float(i, "scale_y");
		        ClothingInfo[extraid][i][cScaleZ] = cache_get_field_content_float(i, "scale_z");
		        ClothingInfo[extraid][i][cExists] = 1;
		        ClothingInfo[extraid][i][cAttachedIndex] = -1;
		    }

		    pData[extraid][pAwaitingClothing] = 1;
		}
		case THREAD_HOUSE_INFORMATION:
		{
			new type[16], houseid = GetNearbyHouseEx(extraid);

		    if(HouseInfo[houseid][hType] == -1)
			{
				type = "Other";
			}
			else
			{
				strcpy(type, houseInteriors[HouseInfo[houseid][hType]][intClass]);
			}

			SM(extraid, SERVER_COLOR, "House ID %i", houseid);
			SM(extraid, COLOR_GREY2, "(Value: $%i) - (Rent Price: $%i) - (Level: %i/5) - (Active: %s) - (Locked: %s)", HouseInfo[houseid][hPrice], HouseInfo[houseid][hRentPrice], HouseInfo[houseid][hLevel], (gettime() - HouseInfo[houseid][hTimestamp] > 1209600) ? ("{FFA500}No{C8C8C8}") : ("Yes"), (HouseInfo[houseid][hLocked]) ? ("Yes") : ("No"));
			SM(extraid, COLOR_GREY2, "(Class: %s) - (Location: %s) - (Furniture: %i/%i) - (Tenants: %i/%i)", type, GetZoneName(HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]), cache_get_row_int(0, 0), GetHouseFurnitureCapacity(houseid), cache_get_row_int(0, 1), GetHouseTenantCapacity(houseid));
		}
		case THREAD_COUNT_FURNITURE:
		{
		    new houseid = GetInsideHouse(extraid);

		    if(cache_get_row_int(0, 0) >= GetHouseFurnitureCapacity(houseid))
		    {
		        SM(extraid, COLOR_SYNTAX, "Your house is only allowed up to %i furniture at its current level.", GetHouseFurnitureCapacity(houseid));
		    }
		    else
		    {
				ShowDialogToPlayer(extraid, DIALOG_BUYFURNITURE1);
			}
		}
		case THREAD_SELL_FURNITURE:
		{
		    if(cache_get_row_count(connectionID))
		    {
		        new name[32], price = percent(cache_get_field_content_int(0, "price"), 75);

		        cache_get_field_content(0, "name", name);
		        GivePlayerCash(extraid, price);

		        SM(extraid, COLOR_AQUA, "You have sold "SVRCLR"%s{CCFFFF} and received a 75 percent refund of $%i.", name, price);
		        RemoveFurniture(pData[extraid][pSelected]);
			}
		}
		case THREAD_CLEAR_FURNITURE:
		{
		    if(!rows)
		    {
		        SCM(extraid, COLOR_SYNTAX, "Your home contains no furniture which can be sold.");
		    }
		    else
		    {
		        new price, houseid = GetInsideHouse(extraid);

			    for(new i = 0; i < rows; i ++)
				{
				    price += percent(cache_get_field_content_int(i, "price"), 75);
				}

				RemoveAllFurniture(houseid);

				GivePlayerCash(extraid, price);
				SM(extraid, COLOR_AQUA, "You have sold a total of %i items and received $%i back.", rows, price);
			}
		}
		/*case THREAD_COUNT_TEXTS:
		{
		    rows = cache_get_row_int(0, 0);

		    if(rows)
		    {
		        SCMf(extraid, COLOR_YELLOW, "** You have %i unread text messages. (/texts)", rows);
			}
		}*/
		case THREAD_VIEW_TEXTS:
		{
		    if(!rows)
		    {
		        SCM(extraid, COLOR_ERROR, "You have no more unread text messages to read.");
			}
			else
			{
		    	static listString[4096], sender[MAX_PLAYER_NAME], date[24], message[128];

				listString = "Texts sent to you while offline (recent first):\n";

			    for(new i = 0; i < min(rows, 25); i ++)
			    {
			        cache_get_field_content(i, "sender", sender);
		    	    cache_get_field_content(i, "date", date);
		        	cache_get_field_content(i, "message", message);

			        format(listString, sizeof(listString), "%s\n[%s] SMS from %s (%i): %s", listString, date, sender, cache_get_field_content_int(i, "sender_number"), message);
				}

				if(rows > 25)
				{
				    ShowPlayerDialog(extraid, DIALOG_UNREADTEXTS, DIALOG_STYLE_MSGBOX, "Unread Texts", listString, "Next", "OK");
				}
				else
				{
				    ShowPlayerDialog(extraid, DIALOG_UNREADTEXTS, DIALOG_STYLE_MSGBOX, "Unread Texts", listString, "OK", "");
				}
			}
		}
		case THREAD_LIST_VEHICLES:
		{
		    if(!rows)
		    {
		        SCM(extraid, COLOR_SYNTAX, "You own no vehicles which you can spawn.");
		    }
		    else
		    {
		        new string[1024];

		        string = "#\tModel\tLocation";

		        for(new i = 0; i < rows; i ++)
		        {
		            format(string, sizeof(string), "%s\n%i\t%s\t%s", string, i + 1, vehicleNames[cache_get_field_content_int(i, "modelid") - 400], (cache_get_field_content_int(i, "world")) ? ("Garage") : (GetZoneName(cache_get_field_content_float(i, "pos_x"), cache_get_field_content_float(i, "pos_y"), cache_get_field_content_float(i, "pos_z"))));
				}

				ShowPlayerDialog(extraid, DIALOG_SPAWNCAR, DIALOG_STYLE_TABLIST_HEADERS, "Choose a vehicle to spawn.", string, "Select", "Cancel");
		    }
		}
		case THREAD_CAR_STORAGE:
		{
		    if(!rows)
		    {
		        SCM(extraid, COLOR_SYNTAX, "You own no vehicles which you can spawn.");
		    }
		    else
		    {
		        new string[1024], vehicleid;

		        string = "#\tModel\tStatus\tLocation";

		        for(new i = 0; i < rows; i ++)
		        {
		            if((vehicleid = GetVehicleLinkedID(cache_get_field_content_int(i, "id"))) != INVALID_VEHICLE_ID) {
		                format(string, sizeof(string), "%s\n%i\t%s\t"GREEN"Spawned"WHITE"\t%s", string, i + 1, vehicleNames[GetVehicleModel(vehicleid) - 400], GetVehicleZoneName(vehicleid));
					}
					else if(cache_get_field_content_int(i, "impounded")) {
						format(string, sizeof(string), "%s\n%i\t%s\t{FF0000}Impounded{FFFFFF}\tDMV", string, i + 1, vehicleNames[cache_get_field_content_int(i, "modelid") - 400]);
					}
					else if(cache_get_field_content_int(i, "broken")) {
						format(string, sizeof(string), "%s\n%i\t%s\t"LIGHTRED"Broken{FFFFFF}\tGarage", string, i + 1, vehicleNames[cache_get_field_content_int(i, "modelid") - 400]);
					}
					else {
						format(string, sizeof(string), "%s\n%i\t%s\t{FF6347}Despawned{FFFFFF}\t%s", string, i + 1, vehicleNames[cache_get_field_content_int(i, "modelid") - 400], (cache_get_field_content_int(i, "world")) ? ("Garage") : (GetZoneName(cache_get_field_content_float(i, "pos_x"), cache_get_field_content_float(i, "pos_y"), cache_get_field_content_float(i, "pos_z"))));
					}
				}

				ShowPlayerDialog(extraid, DIALOG_CARSTORAGE, DIALOG_STYLE_TABLIST_HEADERS, "Choose a vehicle to (de)spawn.", string, "Select", "Cancel");
		    }
		}
		case THREAD_FACTION_ROSTER:
		{
		    new username[MAX_PLAYER_NAME], date[24];

		    SCM(extraid, SERVER_COLOR, "Faction Roster:");

		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_field_content(i, "username", username);
		        cache_get_field_content(i, "lastlogin", date);

		        SM(extraid, COLOR_GREY2, "%s %s - Last Seen: %s", FactionRanks[pData[extraid][pFaction]][cache_get_field_content_int(i, "factionrank")], username, date);
		    }
		}
		case THREAD_GANG_ROSTER:
		{
		    new username[MAX_PLAYER_NAME], date[24];

		    SCM(extraid, SERVER_COLOR, "Gang Roster:");

			for(new i = 0; i < rows; i ++)
			{
				cache_get_field_content(i, "username", username);
				cache_get_field_content(i, "lastlogin", date);

				SM(extraid, COLOR_GREY2, "[%i] %s %s - Last Seen: %s", cache_get_field_content_int(i, "gangrank"), GangRanks[pData[extraid][pGang]][cache_get_field_content_int(i, "gangrank")], username, date);
			}
		}
		case THREAD_VIEW_PHONEBOOK:
		{
		    if((!rows) && pData[extraid][pPage] == 1)
		    {
		        SCM(extraid, COLOR_SYNTAX, "The phonebook directory is currently empty.");
		    }
		    else
		    {
		        static string[MAX_LISTED_NUMBERS * 32], name[MAX_PLAYER_NAME];

		        string = "#\tName\tNumber";

		        for(new i = 0; i < rows; i ++)
		        {
		            cache_get_field_content(i, "name", name);
		            format(string, sizeof(string), "%s\n%i\t%s\t%i", string, ((pData[extraid][pPage] - 1) * MAX_LISTED_NUMBERS) + (i + 1), name, cache_get_field_content_int(i, "number"));
				}

				if(pData[extraid][pPage] > 1)
				{
				    strcat(string, "\n"SVRCLR"<< Go back"WHITE"");
				}
    			if(rows == MAX_LISTED_NUMBERS)
    			{
    			    strcat(string, "\n"SVRCLR">> Next page"WHITE"");
				}

				ShowPlayerDialog(extraid, DIALOG_PHONEBOOK, DIALOG_STYLE_TABLIST_HEADERS, "Phonebook directory", string, "Select", "Close");
		    }
		}
		case THREAD_COUNT_LANDOBJECTS:
		{
		    if(cache_get_row_int(0, 0) >= GetLandObjectCapacity(extraid))
		    {
		        SM(extraid, COLOR_SYNTAX, "You are only only allowed up to %i objects for your land.", GetLandObjectCapacity(extraid));
		    }
		    else
		    {
		        ShowDialogToPlayer(extraid, DIALOG_LANDBUILDTYPE);
				//ShowDialogToPlayer(extraid, DIALOG_LANDBUILD1);
			}
		}
		case THREAD_SELL_LANDOBJECT:
		{
		    if(cache_get_row_count(connectionID))
		    {
		        new name[32], price = percent(cache_get_field_content_int(0, "price"), 75);

		        cache_get_field_content(0, "name", name);
		        GivePlayerCash(extraid, price);

		        SM(extraid, COLOR_AQUA, "You have sold "SVRCLR"%s{CCFFFF} and received a 75 percent refund of $%i.", name, price);
		        RemoveLandObject(pData[extraid][pSelected]);
			}
		}
		case THREAD_DUPLICATE_LANDOBJECT:
		{
			//name, modelid, price, pos_x, pos_y, pos_z, rot_x, rot_y, rot_z

  			if(cache_get_row_count(connectionID))
			{
			    new string[20], name[32], landid = GetNearbyLand(extraid);

			    new modelid = cache_get_field_content_int(0, "modelid");
			    new price = cache_get_field_content_int(0, "price");
			    new Float:x = cache_get_field_content_float(0, "pos_x");
			    new Float:y = cache_get_field_content_float(0, "pos_y");
			    new Float:z = cache_get_field_content_float(0, "pos_z");
			    new Float:rx = cache_get_field_content_float(0, "rot_x");
			    new Float:ry = cache_get_field_content_float(0, "rot_y");
			    new Float:rz = cache_get_field_content_float(0, "rot_z");

			    if(pData[extraid][pCash] < price)
			    {
			        SCM(extraid, COLOR_SYNTAX, "You can't afford to duplicate this object.");
			    }
			    else
			    {
			        pData[extraid][pObjectLand] = landid;
				    cache_get_field_content(0, "name", name);

			    	GivePlayerCash(extraid, -price);
			    	SM(extraid, COLOR_YELLOW, "%s duplicated for $%i. You will now edit this object.", name, price);

				    format(string, sizeof(string), "~r~-$%i", price);
				    GameTextForPlayer(extraid, string, 5000, 1);

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO landobjects VALUES(null, %i, %i, '%e', %i, '%f', '%f', '%f', '%f', '%f', '%f', 0, 0, '%f', '%f', '%f', '-1000.0', '-1000.0', '-1000.0')", LandInfo[landid][lID], modelid, name, price, x, y, z, rx, ry, rz, x, y, z - 10.0);
					mysql_tquery(connectionID, queryBuffer);

					mysql_tquery(connectionID, "SELECT * FROM landobjects WHERE id = LAST_INSERT_ID()", "OnQueryFinished", "ii", THREAD_LOAD_LANDOBJECTS, LandInfo[landid][lLabels]);
					mysql_tquery(connectionID, "SELECT LAST_INSERT_ID() FROM landobjects LIMIT 1", "OnQueryFinished", "ii", THREAD_DUPLICATED_OBJECT, extraid);
				}
			}
		}
		case THREAD_DUPLICATED_OBJECT:
		{
			if(cache_get_row_count(connectionID))
			{
			    new id = cache_get_row_int(0, 0);

			    for(new i = 0; i <= Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i ++)
			    {
			        if(IsValidDynamicObject(i) && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_LAND && Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID) == id)
			        {
			            pData[extraid][pEditType] = EDIT_LAND_OBJECT;
		    	    	pData[extraid][pEditObject] = i;

						EditDynamicObject(extraid, i);
	    		    	GameTextForPlayer(extraid, "~w~Editing Mode~n~~g~Click disk to save~n~~r~Press ESC to cancel", 5000, 1);

			            //pData[extraid][pSelected] = i;
						//ShowDialogToPlayer(extraid, DIALOG_LANDOBJECTMENU);
			            break;
					}
			    }
		    }
		}
		case THREAD_CLEAR_LANDOBJECTS:
		{
		    if(!rows)
		    {
		        SCM(extraid, COLOR_SYNTAX, "Your land contains no furniture which can be sold.");
		    }
		    else
		    {
		        new price, landid = GetNearbyLand(extraid);

			    for(new i = 0; i < rows; i ++)
				{
				    price += percent(cache_get_field_content_int(i, "price"), 75);
				}

				RemoveAllLandObjects(landid);

				GivePlayerCash(extraid, price);
				SM(extraid, COLOR_AQUA, "You have sold a total of %i items and received $%i back.", rows, price);
			}
		}
		case THREAD_LIST_LANDOBJECTS:
		{
		    if((!rows) && pData[extraid][pPage] == 1)
		    {
		        SCM(extraid, COLOR_SYNTAX, "Your land contains no objects which can be listed.");
		    }
		    else
		    {
		        static string[MAX_LISTED_OBJECTS * 48], name[32];

		        string = "#\tName\tCost\tDistance";

		        for(new i = 0; i < rows; i ++)
		        {
		            cache_get_field_content(i, "name", name);
		            format(string, sizeof(string), "%s\n%i\t%s\t"SVRCLR"$%i"WHITE"\t%.1fm", string, GetLandObjectID(cache_get_field_content_int(i, "id")), name, cache_get_field_content_int(i, "price"), GetPlayerDistanceFromPoint(extraid, cache_get_field_content_float(i, "pos_x"), cache_get_field_content_float(i, "pos_y"), cache_get_field_content_float(i, "pos_z")));
				}

				if(pData[extraid][pPage] > 1)
				{
				    strcat(string, "\n"SVRCLR"<< Go back"WHITE"");
				}
    			if(rows == MAX_LISTED_OBJECTS)
    			{
    			    strcat(string, "\n"SVRCLR">> Next page"WHITE"");
				}

				ShowPlayerDialog(extraid, DIALOG_LANDOBJECTS, DIALOG_STYLE_TABLIST_HEADERS, "List of objects", string, "Select", "Back");
		    }
		}
		case THREAD_LAND_MAINMENU:
		{
		    ShowPlayerDialog(extraid, DIALOG_LANDMENU, DIALOG_STYLE_LIST, "Land Menu | "SERVER_NAME"", "Build object\nEdit object\nToggle labels\nSell all objects\nPermissions", "Select", "Cancel");
		}
		case THREAD_LAND_INFORMATION:
		{
		    new landid = GetNearbyLand(extraid);

		    SCM(extraid, SERVER_COLOR, "Land Info:");
			SM(extraid, COLOR_GREY2, "(ID: %i) - (Value: $%i) - (Objects: %i/%i) - (Location: %s)", landid, LandInfo[landid][lPrice], cache_get_row_int(0, 0), GetLandObjectCapacity(landid), GetZoneName(LandInfo[landid][lMinX], LandInfo[landid][lMinY], LandInfo[landid][lHeight]));
		}
		case THREAD_LOAD_VEHICLES:
		{
		    new modelid, Float:pos_x, Float:pos_y, Float:pos_z, Float:pos_a, color1, color2, respawndelay, vehicleid;

		    for(new i = 0; i < rows; i ++)
		    {
	            modelid 		= cache_get_field_content_int(i, "modelid"),
				pos_x 			= cache_get_field_content_float(i, "pos_x"),
				pos_y 			= cache_get_field_content_float(i, "pos_y"),
				pos_z 			= cache_get_field_content_float(i, "pos_z"),
				pos_a 			= cache_get_field_content_float(i, "pos_a"),
				color1 			= cache_get_field_content_int(i, "color1"),
				color2 			= cache_get_field_content_int(i, "color2"),
				respawndelay 	= cache_get_field_content_int(i, "respawndelay");
		        vehicleid 		= CreateVehicle(modelid, pos_x, pos_y, pos_z, pos_a, color1, color2, respawndelay);

				if(vehicleid != INVALID_VEHICLE_ID)
				{
					VehicleInfo[vehicleid][vID] = cache_get_field_content_int(i, "id");
					VehicleInfo[vehicleid][vGang] = cache_get_field_content_int(i, "gangid");
					VehicleInfo[vehicleid][vFactionType] = cache_get_field_content_int(i, "factiontype");
					VehicleInfo[vehicleid][vJob] = cache_get_field_content_int(i, "job");
					VehicleInfo[vehicleid][vHealth] = cache_get_field_content_int(i, "health");
					VehicleInfo[vehicleid][vMileage] = cache_get_field_content_int(i, "mileage");

					if(VehicleInfo[vehicleid][vGang] >= 0)
					{
					    VehicleInfo[vehicleid][vPrice] = cache_get_field_content_int(i, "price");
					    VehicleInfo[vehicleid][vLocked] = cache_get_field_content_int(i, "locked");
					    VehicleInfo[vehicleid][vStolen] = cache_get_field_content_int(i, "broken");
					    VehicleInfo[vehicleid][vPaintjob] = cache_get_field_content_int(i, "paintjob");
					    VehicleInfo[vehicleid][vInterior] = cache_get_field_content_int(i, "interior");
				        VehicleInfo[vehicleid][vWorld] = cache_get_field_content_int(i, "world");
				        VehicleInfo[vehicleid][vMods][0] = cache_get_field_content_int(i, "mod_1");
				        VehicleInfo[vehicleid][vMods][1] = cache_get_field_content_int(i, "mod_2");
				        VehicleInfo[vehicleid][vMods][2] = cache_get_field_content_int(i, "mod_3");
				        VehicleInfo[vehicleid][vMods][3] = cache_get_field_content_int(i, "mod_4");
				        VehicleInfo[vehicleid][vMods][4] = cache_get_field_content_int(i, "mod_5");
				        VehicleInfo[vehicleid][vMods][5] = cache_get_field_content_int(i, "mod_6");
				        VehicleInfo[vehicleid][vMods][6] = cache_get_field_content_int(i, "mod_7");
				        VehicleInfo[vehicleid][vMods][7] = cache_get_field_content_int(i, "mod_8");
				        VehicleInfo[vehicleid][vMods][8] = cache_get_field_content_int(i, "mod_9");
				        VehicleInfo[vehicleid][vMods][9] = cache_get_field_content_int(i, "mod_10");
				        VehicleInfo[vehicleid][vMods][10] = cache_get_field_content_int(i, "mod_11");
				        VehicleInfo[vehicleid][vMods][11] = cache_get_field_content_int(i, "mod_12");
				        VehicleInfo[vehicleid][vMods][12] = cache_get_field_content_int(i, "mod_13");
				        VehicleInfo[vehicleid][vMods][13] = cache_get_field_content_int(i, "mod_14");
						ReloadVehicle(vehicleid);
					}

					VehicleInfo[vehicleid][vModel] = modelid;
					VehicleInfo[vehicleid][vPosX] = pos_x;
					VehicleInfo[vehicleid][vPosY] = pos_y;
					VehicleInfo[vehicleid][vPosZ] = pos_z;
					VehicleInfo[vehicleid][vPosA] = pos_a;
					VehicleInfo[vehicleid][vColor1] = color1;
					VehicleInfo[vehicleid][vColor2] = color2;
					VehicleInfo[vehicleid][vRespawnDelay] = respawndelay;
					VehicleInfo[vehicleid][vObjects][0] = INVALID_OBJECT_ID;
					VehicleInfo[vehicleid][vObjects][1] = INVALID_OBJECT_ID;
					VehicleInfo[vehicleid][vTimer] = -1;
					vehicleFuel[vehicleid] = 100;

					SetVehicleHealth(vehicleid, VehicleInfo[vehicleid][vHealth]);
		        }
			}
		}
		case THREAD_LOAD_ATMS:
		{
		    for(new i = 0; i < rows && i < MAX_ATMS; i ++)
		    {
		        AtmInfo[i][aID] = cache_get_field_content_int(i, "id");
		        AtmInfo[i][aPosX] = cache_get_field_content_float(i, "pos_x");
		        AtmInfo[i][aPosY] = cache_get_field_content_float(i, "pos_y");
			   	AtmInfo[i][aPosZ] = cache_get_field_content_float(i, "pos_z");
			   	AtmInfo[i][aPosA] = cache_get_field_content_float(i, "pos_r");
				AtmInfo[i][aExists] = true;
				ReloadAtm(i);
			}
			printf("[Script] %i atms loaded", (rows < MAX_ATMS) ? (rows) : (MAX_ATMS));
		}
		case THREAD_LOAD_VENDORS:
		{
		    for(new i = 0; i < rows && i < MAX_VENDORS; i ++)
		    {
		        VenInfo[i][aID] = cache_get_field_content_int(i, "id");
		        VenInfo[i][aPosX] = cache_get_field_content_float(i, "pos_x");
		        VenInfo[i][aPosY] = cache_get_field_content_float(i, "pos_y");
			   	VenInfo[i][aPosZ] = cache_get_field_content_float(i, "pos_z");
			   	VenInfo[i][aPosA] = cache_get_field_content_float(i, "pos_r");
				VenInfo[i][aExists] = true;
				ReloadVen(i);
			}
			printf("[Script] %i vendors loaded", (rows < MAX_VENDORS) ? (rows) : (MAX_VENDORS));
		}
		case THREAD_LOAD_MDC:
		{
		    for(new i = 0; i < rows && i < MAX_MDC; i ++)
		    {
		        MdcInfo[i][aID] = cache_get_field_content_int(i, "id");
		        MdcInfo[i][aPosX] = cache_get_field_content_float(i, "pos_x");
		        MdcInfo[i][aPosY] = cache_get_field_content_float(i, "pos_y");
			   	MdcInfo[i][aPosZ] = cache_get_field_content_float(i, "pos_z");
			   	MdcInfo[i][aPosA] = cache_get_field_content_float(i, "pos_r");
				MdcInfo[i][aExists] = true;
				ReloadMdc(i);
			}
			printf("[Script] %i mdc loaded", (rows < MAX_MDC) ? (rows) : (MAX_MDC));
		}
		case THREAD_LOAD_PGARAGE:
		{
		    for(new i = 0; i < rows && i < MAX_PGARAGE; i ++)
		    {
		        PGInfo[i][aID] = cache_get_field_content_int(i, "id");
		        PGInfo[i][aPosX] = cache_get_field_content_float(i, "pos_x");
		        PGInfo[i][aPosY] = cache_get_field_content_float(i, "pos_y");
			   	PGInfo[i][aPosZ] = cache_get_field_content_float(i, "pos_z");
			   	PGInfo[i][aPosA] = cache_get_field_content_float(i, "pos_r");
				PGInfo[i][aExists] = true;
				ReloadPG(i);
			}
			printf("[Script] %i Public Garage loaded", (rows < MAX_PGARAGE) ? (rows) : (MAX_PGARAGE));
		}
		case THREAD_LOAD_SURGERY:
		{
		    for(new i = 0; i < rows && i < MAX_SURGERY; i ++)
		    {
		        SurInfo[i][aID] = cache_get_field_content_int(i, "id");
		        VenInfo[i][aPosX] = cache_get_field_content_float(i, "pos_x");
		        VenInfo[i][aPosY] = cache_get_field_content_float(i, "pos_y");
			   	VenInfo[i][aPosZ] = cache_get_field_content_float(i, "pos_z");
			   	VenInfo[i][aPosA] = cache_get_field_content_float(i, "pos_r");
				VenInfo[i][aExists] = true;
				ReloadSur(i);
			}
			printf("[Script] %i surgery room loaded", (rows < MAX_SURGERY) ? (rows) : (MAX_SURGERY));
		}
		case THREAD_LOAD_BAR:
		{
		    for(new i = 0; i < rows && i < MAX_BAR; i ++)
		    {
		        BarInfo[i][aID] = cache_get_field_content_int(i, "id");
		        BarInfo[i][aPosX] = cache_get_field_content_float(i, "pos_x");
		        BarInfo[i][aPosY] = cache_get_field_content_float(i, "pos_y");
			   	BarInfo[i][aPosZ] = cache_get_field_content_float(i, "pos_z");
			   	BarInfo[i][aPosA] = cache_get_field_content_float(i, "pos_r");
				BarInfo[i][aExists] = true;
				ReloadBar(i);
			}
			printf("[Script] %i Bars loaded", (rows < MAX_BAR) ? (rows) : (MAX_BAR));
		}
		case THREAD_GANG_INFORMATION:
		{
			if(rows)
			{
			    new count, total;

			    for(new i = 0; i < MAX_TURFS; i ++)
			    {
			        if(TurfInfo[i][tExists])
			        {
			            if(TurfInfo[i][tCapturedGang] == pData[extraid][pGang])
			                count++;
			            else if(TurfInfo[i][tType] != 8)
			                total++;
			        }
				}

			    SM(extraid, SERVER_COLOR, "%s:", GangInfo[pData[extraid][pGang]][gName]);
			    SM(extraid, COLOR_GREY2, "Leader: %s - Level: %i/3 - Strikes: %i/3 - Members: %i/%i - Vehicles: %i/%i", GangInfo[pData[extraid][pGang]][gLeader], GangInfo[pData[extraid][pGang]][gLevel], GangInfo[pData[extraid][pGang]][gStrikes], cache_get_row_int(0, 0), GetGangMemberLimit(pData[extraid][pGang]), GetGangVehicles(pData[extraid][pGang]), GetGangVehicleLimit(pData[extraid][pGang]));
			    SM(extraid, COLOR_GREY2, "Gang Points: %i GP - Turf Tokens: %i - Cash: $%i/$%i - Materials: %i/%i", GangInfo[pData[extraid][pGang]][gPoints], GangInfo[pData[extraid][pGang]][gTurfTokens], GangInfo[pData[extraid][pGang]][gCash], GetGangStashCapacity(pData[extraid][pGang], STASH_CAPACITY_CASH), GangInfo[pData[extraid][pGang]][gMaterials], GetGangStashCapacity(pData[extraid][pGang], STASH_CAPACITY_MATERIALS));
			    SM(extraid, COLOR_GREY2, "Turfs: %i/%i - Pot: %i/%ig - Crack: %i/%ig - Meth: %i/%ig - Painkillers: %i/%i", count, total, GangInfo[pData[extraid][pGang]][gPot], GetGangStashCapacity(pData[extraid][pGang], STASH_CAPACITY_WEED), GangInfo[pData[extraid][pGang]][gCrack], GetGangStashCapacity(pData[extraid][pGang], STASH_CAPACITY_COCAINE), GangInfo[pData[extraid][pGang]][gMeth], GetGangStashCapacity(pData[extraid][pGang], STASH_CAPACITY_METH),
					GangInfo[pData[extraid][pGang]][gPainkillers], GetGangStashCapacity(pData[extraid][pGang], STASH_CAPACITY_PAINKILLERS));
				SM(extraid, COLOR_GREY2, "Hollow point: %i/%i - Poison tip: %i/%i - Full metal jacket: %i/%i", GangInfo[pData[extraid][pGang]][gHPAmmo], GetGangStashCapacity(pData[extraid][pGang], STASH_CAPACITY_HPAMMO), GangInfo[pData[extraid][pGang]][gPoisonAmmo], GetGangStashCapacity(pData[extraid][pGang], STASH_CAPACITY_POISONAMMO), GangInfo[pData[extraid][pGang]][gFMJAmmo], GetGangStashCapacity(pData[extraid][pGang], STASH_CAPACITY_FMJAMMO));
			}
		}
		case THREAD_OFFLINE_IP:
		{
		    if(!rows)
		    {
		        SCM(extraid, COLOR_SYNTAX, "The username specified is not registered.");
		    }
		    else
		    {
		        new username[MAX_PLAYER_NAME], ip[16];

		        cache_get_field_content(0, "username", username);
		        cache_get_field_content(0, "ip", ip);

		        SM(extraid, COLOR_WHITE, "** %s's IP: %s **", username, ip);

		    }
		}
		case THREAD_CHECK_REFERRAL:
		{
		    if(!rows)
		    {
		        SCM(extraid, COLOR_SYNTAX, "The player specified doesn't exist.");
		        ShowDialogToPlayer(extraid, DIALOG_REFERRAL);
		    }
		    else
		    {
		        new username[MAX_PLAYER_NAME], ip[16];

		        cache_get_field_content(0, "username", username);
		        cache_get_field_content(0, "ip", ip);

		        if(!strcmp(GetPlayerIP(extraid), ip))
		        {
		            SCM(extraid, COLOR_SYNTAX, "This account is listed under your own IP address. You can't refer yourself.");
		            ShowDialogToPlayer(extraid, DIALOG_REFERRAL);
		        }
		        else
		        {
		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET referral_uid = %i WHERE uid = %i", cache_get_field_content_int(0, "uid"), pData[extraid][pID]);
		            mysql_tquery(connectionID, queryBuffer);
					
	                SM(extraid, COLOR_YELLOW, "** You have chosen %s as your referrer. They will be rewarded once you reach level 3.", username);
				}
		    }
		}
		case THREAD_REWARD_REFERRER:
		{
		    if(rows)
		    {
			    new username[MAX_PLAYER_NAME], ip[16], referralid = INVALID_PLAYER_ID;

				cache_get_field_content(0, "username", username);
				cache_get_field_content(0, "ip", ip);

				// Check to see if any of the players online match the player's referral UID.
			    foreach(new i : Player)
			    {
			        if(i != extraid && pData[i][pLogged] && pData[i][pID] == pData[extraid][pReferralUID])
			        {
			            referralid = i;
			            break;
			        }
			    }

				// Referrer is online.
			    if(referralid != INVALID_PLAYER_ID && strcmp(GetPlayerIP(referralid), GetPlayerIP(extraid)) != 0)
			    {
			        pData[referralid][pLevel]++;
			        SCM(referralid, COLOR_YELLOW, "A player who you've referred reached level 3. Therefore you received 1 level!");
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET level = level + 1 WHERE uid = %i", pData[referralid][pID]);
					mysql_tquery(connectionID, queryBuffer);

				}
				else
				{
				    // Referrer is offline. Let's give them their dirtycash and increment refercount which sends them an alert on login!
				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET level = level + 1, refercount = refercount + 1 WHERE uid = %i AND ip != '%s'", pData[extraid][pReferralUID], GetPlayerIP(extraid));
					mysql_tquery(connectionID, queryBuffer);
				}

				// Finally, remove the player's link to the referrer as the prize has been given.
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET referral_uid = 0 WHERE uid = %i", pData[extraid][pID]);
				mysql_tquery(connectionID, queryBuffer);
			}
		}
		case THREAD_LIST_FLAGGED:
		{
		    new
				flags[MAX_PLAYERS],
				username[MAX_PLAYER_NAME],
				targetid;

		    SCM(extraid, SERVER_COLOR, "Flagged Players:");

		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_row(i, 0, username);

		        if(IsPlayerOnline(username, targetid))
		        {
		            flags[targetid]++;
				}
		    }

		    foreach(new i : Player)
		    {
		        if(flags[i] > 0)
		        {
		            SM(extraid, COLOR_WHITE, "** %s[%i] has %i active flags.", GetRPName(i), i, flags[i]);
				}
			}
		}
	}
}
stock GetNameWithSpace(oldName[]) {
	new name[MAX_PLAYER_NAME];
	format(name, sizeof(name), "%s", oldName);
	for(new i = 0; i < strlen(name); i++) {
		if(name[i] == '_') {
			name[i] = ' ';
		}
	}
	return name;
}
public OnPlayerClickTextDraw(playerid, Text:clickedid) {
	// ATM TEXTDRAWS
	if(clickedid == withdrawtd	) {
		ShowDialogToPlayer(playerid, DIALOG_ATMWITHDRAW);
	}
	if(clickedid == deposittd) {
 		ShowDialogToPlayer(playerid, DIALOG_ATMDEPOSIT);
	}
	if(clickedid == transfertd) {
		ShowDialogToPlayer(playerid, DIALOG_ATM_TRANSFER);
	}
	// PHONE  TEXTDRAWS
	if(clickedid == calltd) {
		ShowPlayerDialog(playerid, DIALOG_PHONE_CALL, DIALOG_STYLE_INPUT, "{6688FF}Call Number", "Please specify the number you would like to call:", "Call", "Cancel");
	}
	if(clickedid == mesaagetd) {
		ShowPlayerDialog(playerid, DIALOG_PHONE_SMS, DIALOG_STYLE_INPUT, "{6688FF}SMS Number", "Please specify the number you would like to SMS:", "Sms", "Cancel");
	}
	if(clickedid == banktd) {
 		for(new i = 0; i < 5; i++) {
			TextDrawShowForPlayer(playerid, PhoneAtmTD[i]);
		}
		PlayerTextDrawShow(playerid, PhoneAtmPlayer[playerid]);
		TextDrawShowForPlayer(playerid, PhoneAtmTransfer);
		TextDrawShowForPlayer(playerid, PhoneAtmExit);
		SelectTextDraw(playerid, COLOR_LIGHTBLUE);
	}
	if(clickedid == contactstd) {
		ListContacts(playerid);
	}
	if(clickedid == addtexttd) {
		ShowPlayerDialog(playerid, DIALOG_TWEET, DIALOG_STYLE_INPUT, "Tweet", "What's on your mind?", "Post", "Back");
	}
	if(clickedid == twittertd) {
		for(new i = 0; i < 20; i++) {
			TextDrawHideForPlayer(playerid, PhoneTD[i]);
		}
   		TextDrawHideForPlayer(playerid, phoneclosetd);
		TextDrawHideForPlayer(playerid, banktd);
		TextDrawHideForPlayer(playerid, mesaagetd);
		TextDrawHideForPlayer(playerid, calltd);
		TextDrawHideForPlayer(playerid, contactstd);
		TextDrawHideForPlayer(playerid, musictd);
		TextDrawHideForPlayer(playerid, twittertd);
 		for(new i = 0; i < 22; i++) {
			TextDrawShowForPlayer(playerid, TwitterApp[i]);
		}
		TextDrawShowForPlayer(playerid, TwitterApp[0]);
		TextDrawShowForPlayer(playerid, TwitterApp[1]);
		TextDrawShowForPlayer(playerid, phoneclosetd);
		TextDrawShowForPlayer(playerid, addtexttd);

		SelectTextDraw(playerid, COLOR_LIGHTBLUE);
	}
	if(clickedid == musictd) {
		pData[playerid][pMusicType] = MUSIC_MP3PLAYER;
		ShowDialogToPlayer(playerid, DIALOG_MP3PLAYER);
	}
	if(clickedid == phoneclosetd) {
 		for(new i = 0; i < 20; i++) {
			TextDrawHideForPlayer(playerid, PhoneTD[i]);
		}
 		for(new i = 0; i < 22; i++) {
			TextDrawHideForPlayer(playerid, TwitterApp[i]);
		}
		TextDrawHideForPlayer(playerid, TwitterApp[0]);
		TextDrawHideForPlayer(playerid, TwitterApp[1]);
		TextDrawHideForPlayer(playerid, phoneclosetd);
		TextDrawHideForPlayer(playerid, addtexttd);
		TextDrawHideForPlayer(playerid, banktd);
		TextDrawHideForPlayer(playerid, mesaagetd);
		TextDrawHideForPlayer(playerid, calltd);
		TextDrawHideForPlayer(playerid, contactstd);
		TextDrawHideForPlayer(playerid, phoneclosetd);
		TextDrawHideForPlayer(playerid, musictd);
		TextDrawHideForPlayer(playerid, twittertd);
		CancelSelectTextDraw(playerid);
	}
	// PHONE ATMTD
	if(clickedid == PhoneAtmTransfer) {
		ShowDialogToPlayer(playerid, DIALOG_ATM_TRANSFER);
	}
	if(clickedid == PhoneAtmExit) {
 		for(new i = 0; i < 5; i++) {
			TextDrawHideForPlayer(playerid, PhoneAtmTD[i]);
		}

		PlayerTextDrawHide(playerid, PhoneAtmPlayer[playerid]);
		TextDrawHideForPlayer(playerid, PhoneAtmTransfer);
		TextDrawHideForPlayer(playerid, PhoneAtmExit);
		SelectTextDraw(playerid, COLOR_LIGHTBLUE);
	}
	// CALLING TD
	if(clickedid == PICKUP) {
	    if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pJailTime] > 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You are unable to use your cellphone at the moment.");
		}

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s presses a button and answers their mobile phone.", GetRPName(playerid));
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);

		pData[pData[playerid][pCallLine]][pCallStage] = 2;
		pData[playerid][pCallStage] = 2;
		PlayerTextDrawHide(playerid, CallingPlayerTD[playerid][3]);
		PlayerTextDrawHide(pData[playerid][pCallLine], CallingPlayerTD[playerid][4]);
		TextDrawHideForPlayer(playerid, PICKUP);
		//TextDrawHideForPlayer(playerid, HANGUP);
		SCM(playerid, COLOR_WHITE, "** You have answered the call. You can now speak in chat to talk to the caller.");
		SCM(pData[playerid][pCallLine], COLOR_WHITE, "** They answered the call. You can now speak in chat to talk to them.");
		CALL_VoicePickup(playerid);
	}
	if(clickedid == HANGUP) {
		for(new i = 0; i < 13; i ++)
		{
			TextDrawHideForPlayer(playerid, CallingTD[i]);
		}
		for(new g = 0; g < 5; g++) {
			PlayerTextDrawHide(playerid, CallingPlayerTD[playerid][g]);
		}
		TextDrawHideForPlayer(playerid, CloseCallTD);
		TextDrawHideForPlayer(playerid, PICKUP);
		TextDrawHideForPlayer(playerid, HANGUP);
		HangupCall(playerid, HANGUP_USER);
		CancelSelectTextDraw(playerid);
	}
	if(clickedid == CloseCallTD) {
		for(new i = 0; i < 13; i ++)
		{
			TextDrawHideForPlayer(playerid, CallingTD[i]);
		}
		for(new g = 0; g < 5; g++) {
			PlayerTextDrawHide(playerid, CallingPlayerTD[playerid][g]);
		}
		TextDrawHideForPlayer(playerid, CloseCallTD);
		TextDrawHideForPlayer(playerid, PICKUP);
		TextDrawHideForPlayer(playerid, HANGUP);
		CancelSelectTextDraw(playerid);
	}
 	if(clickedid == Text:INVALID_TEXT_DRAW && !pData[playerid][pLogged])
	{
		SelectTextDraw(playerid, COLOR_LIGHTBLUE);
	}
	return 1;
}

forward Firework(playerid, type);
public Firework(playerid, type)
{
	if(!IsPlayerConnected(playerid))
	{
		DestroyDynamicObject(Rocket[playerid]);
		DestroyDynamicObject(RocketLight[playerid]);
		DestroyDynamicObject(RocketSmoke[playerid]);
		return 1;
	}
	new Float:x, Float:y, Float:z;
	x = GetPVarFloat(playerid, "fxpos");
	y = GetPVarFloat(playerid, "fypos");
	z = GetPVarFloat(playerid, "fzpos");
	if (type == TYPE_COUNTDOWN)
	{
     	SCMf(playerid, COLOR_GREEN, "* STAND BACK! 5 seconds till launch!", GetPlayerNameEx(playerid));
		SetTimerEx("Firework", 5000, 0, "ii", playerid, TYPE_LAUNCH);
	}
	else if(type == TYPE_LAUNCH)
	{
		CreateExplosion(x ,y, z, 13, 5);
		new time = MoveDynamicObject(Rocket[playerid], x, y, z + RocketHeight, 10);
		MoveDynamicObject(RocketLight[playerid], x, y, z + 2 + RocketHeight, 10);
		MoveDynamicObject(RocketSmoke[playerid], x, y, z + RocketHeight, 10);
		SetTimerEx("Firework", time, 0, "ii", playerid, TYPE_EXPLODE);
	}
	else if(type == TYPE_EXPLODE)
	{
		z += RocketHeight;
		if (RocketExplosions[playerid] == 0)
		{
			DestroyDynamicObject(Rocket[playerid]);
			DestroyDynamicObject(RocketLight[playerid]);
			DestroyDynamicObject(RocketSmoke[playerid]);
			CreateExplosion(x ,y, z, 4, 10);
			CreateExplosion(x ,y, z, 5, 10);
			CreateExplosion(x ,y, z, 6, 10);
		}
		else if (RocketExplosions[playerid] >= MAX_FIREWORKS)
		{
			for (new i = 0; i <= FireworkSpread; i++)
			{
				CreateExplosion(x + float(i - (FireworkSpread / 2)), y, z, 7, 10);
				CreateExplosion(x, y + float(i - (FireworkSpread / 2)), z, 7, 10);
				CreateExplosion(x, y, z + float(i - (FireworkSpread / 2)), 7, 10);
			}
			RocketExplosions[playerid] = -1;
			return 1;
		}
		else
		{
			x += float(random(FireworkSpread) - (FireworkSpread / 2));
			y += float(random(FireworkSpread) - (FireworkSpread / 2));
			z += float(random(FireworkSpread) - (FireworkSpread / 2));
			CreateExplosion(x, y, z, 7, 10);
		}
		RocketExplosions[playerid]++;
		SetTimerEx("Firework", 250, 0, "ii", playerid, TYPE_EXPLODE);
	}
	return 1;
}

public OnGameModeInit()
{
	VC_OnGameModeInit();

	//SetTimer("ChangingActivity", 3000, true);
	
	LoadStaffLeaderName();

	//CJRUN
	UsePlayerPedAnims();

	SendRconCommand("hostname "HOSTNAME"");
	SendRconCommand("weburl "SERVER_URL"");
	//Sabong
	print("Betting System");
    SetTimer("BettingTimer", 1000, true);
//    CreatePlayerBoxingCage();
	//------------------------------------------------------
	printf("Current gravity: %f", GetGravity());
    mobveh[0] = CreateVehicle(509, 1727.6648, -1883.2834, 13.5635, 90.3032, -1, -1, 100);
	PriorityInfo[prioType] = 3;
    
    SetTimer("AutoMessage",60*550*AUTO_MESSAGE_TIME,1);
	new string[128];
    for(new i = 0; i < MAX_PLAYERS; i ++)
	{
	    SetPlayerHealth(i, 100);
	}
    for(new i = 0; i < MAX_VEHICLES; i ++)
	{
	    ResetVehicle(i);
	}
	mysql_tquery(connectionID, "TRUNCATE TABLE shots");
	mysql_tquery(connectionID, "SELECT * FROM atms", "OnQueryFinished", "ii", THREAD_LOAD_ATMS, 0);
	mysql_tquery(connectionID, "SELECT * FROM dealerships", "LoadDealershipVehicles", "i", 0);
	mysql_tquery(connectionID, "SELECT * FROM furniture", "OnQueryFinished", "ii", THREAD_LOAD_FURNITURE, 0);
	mysql_tquery(connectionID, "SELECT * FROM factionlockers", "OnQueryFinished", "ii", THREAD_LOAD_LOCKERS, 0);
	mysql_tquery(connectionID, "SELECT * FROM gasolines", "LoadGasoline", "i", 0);
	mysql_tquery(connectionID, "SELECT * FROM vendors", "OnQueryFinished", "ii", THREAD_LOAD_VENDORS, 0);
	mysql_tquery(connectionID, "SELECT * FROM mdc", "OnQueryFinished", "ii", THREAD_LOAD_MDC, 0);
	mysql_tquery(connectionID, "SELECT * FROM surgery", "OnQueryFinished", "ii", THREAD_LOAD_SURGERY, 0);
	mysql_tquery(connectionID, "SELECT * FROM publicgarage", "OnQueryFinished", "ii", THREAD_LOAD_PGARAGE, 0);
	mysql_tquery(connectionID, "SELECT * FROM bars", "OnQueryFinished", "ii", THREAD_LOAD_BAR, 0);
	mysql_tquery(connectionID, "SELECT * FROM houses", "OnQueryFinished", "ii", THREAD_LOAD_HOUSES, 0);
	mysql_tquery(connectionID, "SELECT * FROM garages", "OnQueryFinished", "ii", THREAD_LOAD_GARAGES, 0);
	mysql_tquery(connectionID, "SELECT * FROM graffiti", "Graffiti_Load", "");
	mysql_tquery(connectionID, "SELECT * FROM speedcameras", "Speed_Load", "");
	mysql_tquery(connectionID, "SELECT * FROM businesses", "OnQueryFinished", "ii", THREAD_LOAD_BUSINESSES, 0);
	mysql_tquery(connectionID, "SELECT * FROM entrances", "OnQueryFinished", "ii", THREAD_LOAD_ENTRANCES, 0);
	mysql_tquery(connectionID, "SELECT * FROM factions", "OnQueryFinished", "ii", THREAD_LOAD_FACTIONS, 0);
	mysql_tquery(connectionID, "SELECT * FROM factionranks", "OnQueryFinished", "ii", THREAD_LOAD_FACTIONRANKS, 0);
	mysql_tquery(connectionID, "SELECT * FROM factionskins", "OnQueryFinished", "ii", THREAD_LOAD_FACTIONSKINS, 0);
    mysql_tquery(connectionID, "SELECT * FROM factionpay", "OnQueryFinished", "ii", THREAD_LOAD_FACTIONPAY, 0);
    mysql_tquery(connectionID, "SELECT * FROM divisions", "OnQueryFinished", "ii", THREAD_LOAD_DIVISIONS, 0);
	mysql_tquery(connectionID, "SELECT * FROM lands", "OnQueryFinished", "ii", THREAD_LOAD_LANDS, 0);
    mysql_tquery(connectionID, "SELECT * FROM landobjects", "OnQueryFinished", "ii", THREAD_LOAD_LANDOBJECTS, 0);
    mysql_tquery(connectionID, "SELECT * FROM vehicles WHERE ownerid = 0", "OnQueryFinished", "ii", THREAD_LOAD_VEHICLES, 0);
    mysql_tquery(connectionID, "SELECT * FROM gangs", "OnQueryFinished", "ii", THREAD_LOAD_GANGS, 0);
    mysql_tquery(connectionID, "SELECT * FROM gangranks", "OnQueryFinished", "ii", THREAD_LOAD_GANGRANKS, 0);
	mysql_tquery(connectionID, "SELECT * FROM gangskins", "OnQueryFinished", "ii", THREAD_LOAD_GANGSKINS, 0);
	mysql_tquery(connectionID, "SELECT * FROM points", "OnQueryFinished", "ii", THREAD_LOAD_POINTS, 0);
	mysql_tquery(connectionID, "SELECT * FROM turfs", "OnQueryFinished", "ii", THREAD_LOAD_TURFS, 0);
	mysql_tquery(connectionID, "SELECT * FROM `gates`", "Gate_Load", "");
	mysql_tquery(connectionID, "SELECT * FROM `object`", "Object_Load", "");

	for(new x=0; x<MAX_VEHICLES; x++)
	{
		Flasher[x] = 0;
		FlasherState[x] = 0;
	}
	FlashTimer = SetTimer("FlasherFunc", 200, 1);
	
	Salary = 1;
	DoubleSalary = 0;

	SetWeather(gWeather);
	EnableStuntBonusForAll(0);
//    UsePlayerPedAnims();
	DisableInteriorEnterExits();
	AllowInteriorWeapons(0);
	ManualVehicleEngineAndLights();

	SetDamageFeed(true);
	SetDamageSounds(true, true);
	SetVehicleUnoccupiedDamage(false);
	SetVehiclePassengerDamage(true);
	ShowNameTags(1);
	ShowNoticeTextDraw();

	HeadShotSystem = true;
	enabledGlobal = 0;
	//Streamer_TickRate(100);
	Streamer_SetVisibleItems(STREAMER_TYPE_OBJECT, 1000);
	gDoubleXP = false;

	// CCTV's (10 MAX)
	AddCCTV("LS Grovestreet", 2491.7839, -1666.6194, 46.3232, 0.0);
	AddCCTV("LS Downtown", 1102.6440, -837.8973, 122.7000, 180.0);
	AddCCTV("SF Wang Cars", -1952.4282,285.9786,57.7031, 90.0);
	AddCCTV("SF Airport", -1275.8070, 52.9402, 82.9162, 0.0);
	AddCCTV("SF Crossroad", -1899.0861,731.0627,65.2969, 90.0);
	AddCCTV("SF Tower", -1753.6606,884.7520,305.8750, 150.0);
	AddCCTV("LV The Strip 1", 2137.2390, 2143.8286, 30.6719, 270.0);
	AddCCTV("LV The Strip 2", 1971.7627, 1423.9323, 82.1563, 270.0);
    AddCCTV("Mount Chiliad", -2432.5852, -1620.1143, 546.8554, 270.0);
	AddCCTV("Sherman Dam", -702.9260, 1848.8094, 116.0507, 0.0);
	AddCCTV("Desert", 35.1291, 2245.0901, 146.6797, 310.0);
	AddCCTV("Query", 588.1079,889.4715,-14.9023, 270.0);
	AddCCTV("Water", 635.6223,498.1748,20.3451, 90.0);

	TD = TextDrawCreate(160, 400, "~y~Keys:~n~Arrow-Keys: ~w~Move The Camera~n~~y~Sprint-Key: ~w~Speed Up~n~~y~Crouch-Key: ~w~Exit Camera");
    TextDrawLetterSize(TD, 0.4, 0.9);
    TextDrawSetShadow(TD, 0);
    TextDrawUseBox(TD,1);
	TextDrawBoxColor(TD,0x00000055);
	TextDrawTextSize(TD, 380, 400);

	new Count, Left = TotalCCTVS;
	for(new menu; menu<MAX_CCTVMENUS; menu++)
	{
	    if(Left > 12)
	    {
	        CCTVMenu[menu] = CreateMenu("Choose Camera:", 1, 200, 100, 220);
	        TotalMenus++;
	        MenuType[menu] = 1;
	        for(new i; i<11; i++)
	        {
	        	AddMenuItem(CCTVMenu[menu], 0, CameraName[Count]);
	        	Count++;
	        	Left--;
			}
			AddMenuItem(CCTVMenu[menu], 0, "Next");
		}
		else if(Left<13 && Left > 0)
		{
		    CCTVMenu[menu] = CreateMenu("Choose Camera:", 1, 200, 100, 220);
		    TotalMenus++;
		    MenuType[menu] = 2;
		    new tmp = Left;
	        for(new i; i<tmp; i++)
	        {
	        	AddMenuItem(CCTVMenu[menu], 0, CameraName[Count]);
	        	Count++;
	        	Left--;
			}
		}
	}
	/*-----------------------------*/

	// Point bounds
	pointboundaries[0] = GangZoneCreate(2545.8984375 ,-2153.3203125, 2707.03125, -2062.5); // FFC
	pointboundaries[1] = GangZoneCreate(1361.328125,-1435.546875,1478.515625,-1236.328125); // MP1
	pointboundaries[2] = GangZoneCreate(2077.1484375, -2361.328125, 2285.15625, -2179.6875); // MF1
	pointboundaries[3] = GangZoneCreate(2298.828125,-2064.453125,2546.875,-1935.546875); // MP2
	pointboundaries[4] = GangZoneCreate(2156.25, -1151.3671875, 2320.3125, -1001.953125); // MF2
	pointboundaries[5] = GangZoneCreate(2581.0546875, -2586.9140625, 2862.3046875, -2329.1015625); // AEC
	pointboundaries[6] = GangZoneCreate(2105.46875,-1753.90625,2177.734375,-1626.953125); // Drug House
	pointboundaries[7] = GangZoneCreate(2304.6875,-1181.640625,2361.328125,-1160.15625); // Crack Lab
	pointboundaries[8] = GangZoneCreate(13.671875,-402.34375,167.96875,-208.984375); // Drug Factory

	for(new i = 0; i < sizeof(comservpoint); i ++)
	{
		//CreateDynamicPickup(19132, 1, comservpoint[i][0], comservpoint[i][1], comservpoint[i][2]);
		CreateDynamic3DTextLabel("Dirt\n"YELLOW"Usage: /clean.", COLOR_WHITE, comservpoint[i][0], comservpoint[i][1], comservpoint[i][2], 10.0);
	}
	for(new i = 0; i < sizeof(warehousepoint); i ++)
	{
		//CreateDynamicPickup(19132, 1, comservpoint[i][0], comservpoint[i][1], comservpoint[i][2]);
		CreateDynamic3DTextLabel("Box\n"YELLOW"Usage: /package.", COLOR_WHITE, warehousepoint[i][0], warehousepoint[i][1], warehousepoint[i][2], 10.0);
	}
    // Materials Pickup 1
	CreateDynamic3DTextLabel("Materials\nCost: $75\n"SVRCLR"(( Type '/getmats' to begin. ))", COLOR_GREY, 1421.6913, -1318.4719, 13.5547, 10.0);
	CreateDynamicPickup(1575, 1, 1421.6913, -1318.4719, 13.5547);
	CreateDynamic3DTextLabel("Materials\nCost: $75\n"SVRCLR"(( Type '/getmats' to begin. ))", COLOR_GREY, 2393.4885, -2008.5726, 13.3467, 10.0);
	CreateDynamicPickup(1575, 1, 2393.4885, -2008.5726, 13.3467); // Materials Pickup 2

	CreateDynamic3DTextLabel("Loading Dock\n"SVRCLR"(( Type '/loadtruck' and pick a load to begin delivery. ))", COLOR_GREY, 2460.9790,-2119.2590,13.5530, 10.0);
	CreateDynamicPickup(1239, 1, 2460.9790,-2119.2590,13.5530);

	CreateDynamic3DTextLabel("Drivers Test\nCost: $100\n"YELLOW":Usage: /taketest, /dmvmenu", COLOR_GREY, -2039.2168, -123.6363, -50.9141, 10.0);
	CreateDynamicPickup(1239, 1, -2039.2168, -123.6363, -50.9141);

	CreateDynamic3DTextLabel("Grotti Dealership\n"WHITE"Type "YELLOW"'/buyvehicle'"WHITE" to view catalog.", SERVER_COLOR, 1490.2845, 1305.7607, 1093.2964, 10.0);
	CreateDynamicPickup(1274, 1, 1490.2845, 1305.7607, 1093.2964);

	for(new i = 0; i < sizeof(lumberPositions); i ++)
	{
	    CreateDynamic3DTextLabel("Tree\nType "YELLOW"'/chop'"WHITE" to begin", COLOR_WHITE, lumberPositions[i][0], lumberPositions[i][1], lumberPositions[i][2], 25.0);
	}
	
	CreateDynamic3DTextLabel("Garbage Pickup\nType "YELLOW"'/garbage'"WHITE" to begin.", COLOR_WHITE, 2449.1167,-2090.1445,13.5469, 10.0);
	CreateDynamicPickup(19132, 1, 2449.1167,-2090.1445,13.5469);

	CreateDynamic3DTextLabel("Boat Dealership\n"SVRCLR"(( Type '/buyvehicle' to view catalog. ))", COLOR_GREY, 154.2223, -1946.3030, 5.1920, 10.0);
	CreateDynamicPickup(1274, 1, 154.2223, -1946.3030, 5.1920);

	CreateDynamic3DTextLabel("Aircraft Dealership\n"RED"Temporary Disabled", COLOR_GREY, 1892.6315, -2328.6721, 13.5469, 10.0);
	CreateDynamicPickup(1274, 1, 1892.6315, -2328.6721, 13.5469);

	CreateDynamic3DTextLabel("/upgrade' to upgrade.", COLOR_YELLOW, 2703.8176, -596.6273, -72.1423, 10.0);
	CreateDynamicPickup(1239, 1, 2703.8176, -596.6273, -72.1423);
	// FC
	CreateDynamic3DTextLabel("/upgrade' to upgrade.", COLOR_YELLOW, 1469.6366, -1809.1033, 2350.0251, 10.0);
	CreateDynamicPickup(1239, 1, 1469.6366, -1809.1033, 2350.0251);
	
	CreateDynamic3DTextLabel("Microphone\n"SVRCLR"(( Type '/mic' to use this microphone. ))", COLOR_GREY, 1082.1001,-1740.0272,14.1402, 10.0);
	CreateDynamicPickup(1239, 1, 1082.1001,-1740.0272,14.1402);

	CreateDynamicPickup(1239, 1, -64.7425,-1120.7697,1.0781); // Creates a checkpoint at -2112.7422,-753.4459,32.1719 with a range of 4, in any virtualworld, interior and for every player
	CreateDynamic3DTextLabel("Dirty Money\n"SVRCLR"(( Type /washmoney to wash the money. ))", COLOR_GREY, -64.7425,-1120.7697,1.0781, 10.0);

	CreateDynamic3DTextLabel("Drug Smuggling\nCost: $75\n"SVRCLR"(( Type '/getcrate' to begin smuggling. ))", COLOR_GREY, 415.5813,-1726.8542,9.0025, 10.0);
	CreateDynamicPickup(1279, 1, 415.5813,-1726.8542,9.0025);

	CreateDynamic3DTextLabel("Meth Cookoff\n> Requires Ephedrine <\n"SVRCLR"(( Type '/cookmeth' to begin cooking. ))", COLOR_GREY, 333.5727, 1121.8536, 1083.8903, 10.0);
	CreateDynamicPickup(1577, 1, 333.5727, 1121.8536, 1083.8903);

	new banktime[128];
	format(banktime, sizeof(banktime), "Bank\n"SVRCLR"Usage: /bank\nAvailable to rob in: %i Hours", RobberyInfo[rTime]);
	gBankTime = CreateDynamic3DTextLabel(string, COLOR_GREY, 1667.4260, -972.6691, 683.6873, 10.0);
	CreateDynamicPickup(1239, 1, 1667.4260, -972.6691, 683.6873);

	gSeedsStockText = CreateDynamic3DTextLabel("Marijuana Seeds\nStock: 100\n"SVRCLR"(( Type '/getdrug seeds [amount]' ))", COLOR_GREY, 323.7289, 1117.4187, 1083.8828, 10.0);
	CreateDynamicPickup(1578, 1, 323.7289, 1117.4187, 1083.8828);

	gEphedrineStockText = CreateDynamic3DTextLabel("Raw Ephedrine\nStock: 100\n"SVRCLR"(( '/getdrug ephedrine [amount]' ))", COLOR_GREY, 321.6007, 1117.3717, 1083.8828, 10.0);
	CreateDynamicPickup(1577, 1, 321.6007, 1117.3717, 1083.8828);

	gCrackText = CreateDynamic3DTextLabel("Crack\nStock: 100\n"SVRCLR"(( Type '/getdrug Crack [amount]' ))", COLOR_GREY, 2345.8250,-1185.5159,1031.9766, 10.0);
    CreateDynamicPickup(1575, 1, 2345.8250,-1185.5159,1031.9766);

	// HELP
	CreateDynamicPickup(1239, 23, 1829.9071, -1366.5021, 13.8285);
	CreateDynamic3DTextLabel("Welcome to "SVRCLR""SERVER_NAME""WHITE"\nUse {33AA33}/newb {FFFFFF}to ask questions\nUse {33AA33}/am {FFFFFF}to communicate with the admins", 0x33CCFFFF, 1829.9071, -1366.5021, 13.8285 + 1.0, 15.0);

	CreateDynamic3DTextLabel("Welcome to Alcazar City!\n"GREY"Type '/help' for the list of commands.\nType '/newb' if you have any questions.\nType '/am' if you want to talk to an admin\nType '/helpme' to request for helper's assistance", SERVER_COLOR, -80.5589, 1388.4001, 9.9049, 10.0);
	CreateDynamicPickup(1239, 1, -80.5589, 1388.4001, 9.9049);

    gParachutes[0] = CreateDynamicPickup(371, 1, 1542.9038, -1353.0352, 329.4744); // Star tower
	gParachutes[1] = CreateDynamicPickup(371, 1, 315.9415, 1010.6052, 1953.0031); // Andromada interior

	// Job NPC
 	ActorJob[0] = CreateActor(73, 1370.2173,-1311.9095,13.5469,139.7047);// ArmsDealerActor
    ApplyActorAnimation(ActorJob[0], "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
  	SetActorInvulnerable(ActorJob[0], true);

 	ActorJob[1] = CreateActor(163, 2227.3613,-1715.8910,13.5260, 145.1277);// BodyguardActor
    ApplyActorAnimation(ActorJob[1], "DEALER", "DEALER_IDLE_01", 4.0, 1, 0, 0, 0, 0);
  	SetActorInvulnerable(ActorJob[1], true);

   	ActorJob[2] = CreateActor(261, 2434.4448, -2125.6113, 13.5469, 0.0);// TruckerActor
	ApplyActorAnimation(ActorJob[2], "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
	SetActorInvulnerable(ActorJob[2], true);

    ActorJob[3] = CreateActor(20, 980.6055, -1297.1161, 13.5462, 206.6949);// FoodPanda
	ApplyActorAnimation(ActorJob[3], "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
	SetActorInvulnerable(ActorJob[3], true);

   	ActorJob[4] = CreateActor(71, -1650.3531,700.2090,1008.7549,138.9747);// DetectiveActor
	ApplyActorAnimation(ActorJob[4], "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
	SetActorInvulnerable(ActorJob[4], true);
    SetActorVirtualWorld(ActorJob[4], 1);

	ActorJob[5] = CreateActor(14, 393.2632,-2070.5837,7.8359, 56.3435);// FisherActor
	ApplyActorAnimation(ActorJob[5], "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
	SetActorInvulnerable(ActorJob[5], true);
/*
	ActorJob[6] = CreateActor(50, 2328.2659, -2314.9421, 13.5469, 138.6372);// MechanicActor
	ApplyActorAnimation(ActorJob[6], "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
	SetActorInvulnerable(ActorJob[6], true);*/

	ActorJob[7] = CreateActor(27, -1008.2990,-2158.0593,34.7481,311.8129);// MinerActor
	ApplyActorAnimation(ActorJob[7], "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
	SetActorInvulnerable(ActorJob[7], true);

	ActorJob[8] = CreateActor(15, 1748.1373, -1863.0981, 13.5755, 357.0072);// TaxiActor
	ApplyActorAnimation(ActorJob[8], "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
	SetActorInvulnerable(ActorJob[8], true);

	ActorJob[9] = CreateActor(28, 2165.3611, -1673.0824, 15.0778, 257.0941);// DrugsmugActor
	ApplyActorAnimation(ActorJob[9], "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
	SetActorInvulnerable(ActorJob[9], true);

	ActorJob[10] = CreateActor(113, 1381.0668, -1086.6857, 27.3906, 121.4697);// LawyerActor
	ApplyActorAnimation(ActorJob[10], "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
	SetActorInvulnerable(ActorJob[10], true);

	ActorJob[11] = CreateActor(260, 1265.4034, -1265.7041, 13.3503, 0.0000);// LawyerActor
	ApplyActorAnimation(ActorJob[11], "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
	SetActorInvulnerable(ActorJob[11], true);
	
	// MANAGEMENT ACTORS
	/*Create3DTextLabel(""TEAL"Management\n"WHITE"BRYAN", COLOR_WHITE, 1827.6786, -1359.9143, 14.4553, 16.0, 0, 0);
 	ManagementActor[0] = CreateActor(2, 1827.6786, -1359.9143, 14.4553, 93.1607);// REAPER
    ApplyActorAnimation(ManagementActor[0], "DEALER", "DEALER_IDLE", 4.1, 1, 1, 1, 1, 1);

	//Create3DTextLabel(""WHITE"XZYNA", COLOR_WHITE, 1827.6980, -1361.1017, 14.3894, 16.0, 0, 0);
 	ManagementActor[1] = CreateActor(216, 1827.6980, -1361.1017, 14.3894, 93.1607);// myyloves
    ApplyActorAnimation(ManagementActor[1], "DEALER", "DEALER_IDLE", 4.1, 1, 1, 1, 1, 1);

   	//Create3DTextLabel(""WHITE"DEKZ", COLOR_WHITE, 1827.7566, -1362.2842, 14.3894, 16.0, 0, 0);
 	ManagementActor[2] = CreateActor(299, 1827.7566, -1362.2842, 14.3894, 93.1607);// aezakmi
    ApplyActorAnimation(ManagementActor[2], "DEALER", "DEALER_IDLE", 4.1, 1, 1, 1, 1, 1);

    // YOUTUBER ACTORS
   	//Create3DTextLabel(""RED"Subscribe to\n"WHITE"MIC MIC", COLOR_WHITE, 1827.5677, -1350.6980, 14.4553, 16.0, 0, 0);
 	YoutuberActor[0] = CreateActor(294, 1827.5677, -1350.6980, 14.4553, 93.1607);
    ApplyActorAnimation(YoutuberActor[0], "DEALER", "DEALER_IDLE", 4.1, 1, 1, 1, 1, 1);

   //	Create3DTextLabel(""RED"Subscribe to\n"WHITE"AEZAKMI", COLOR_WHITE, 1827.5627, -1352.2198, 14.4553, 16.0, 0, 0);
 	YoutuberActor[1] = CreateActor(299, 1827.5627, -1352.2198, 14.4553, 93.1607);
    ApplyActorAnimation(YoutuberActor[1], "DEALER", "DEALER_IDLE", 4.1, 1, 1, 1, 1, 1);

   	//Create3DTextLabel(""RED"Streamer\n"WHITE"Suzuran", COLOR_WHITE, 1827.6418, -1353.8302, 14.4553, 16.0, 0, 0);
 	YoutuberActor[2] = CreateActor(290, 1827.6418, -1353.8302, 14.4553, 93.1607);
    ApplyActorAnimation(YoutuberActor[2], "DEALER", "DEALER_IDLE", 4.1, 1, 1, 1, 1, 1);

   	//Create3DTextLabel(""RED"Subscribe to\n"WHITE"REV PH TECH", COLOR_WHITE, 1827.6533, -1355.4777, 14.4553, 16.0, 0, 0);
 	YoutuberActor[3] = CreateActor(26, 1827.6533, -1355.4777, 14.4553, 93.1607);
    ApplyActorAnimation(YoutuberActor[3], "DEALER", "DEALER_IDLE", 4.1, 1, 1, 1, 1, 1);

    // Van ACTORS
   //	Create3DTextLabel(""RED"Guard to\n"WHITE"Manong Betong", COLOR_WHITE, 669.9692,-1310.3662,13.4609, 16.0, 0, 0);
 	VanActor[0] = CreateActor(113, 669.9692,-1310.3662,13.4609,143.5745);
    ApplyActorAnimation(VanActor[0], "DEALER", "DEALER_IDLE", 4.1, 1, 1, 1, 1, 1);

  // 	Create3DTextLabel(""RED"Guard to\n"WHITE"Manong Jose", COLOR_WHITE, 656.4261,-1231.6816,16.3907, 16.0, 0, 0);
 	VanActor[1] = CreateActor(113, 656.4261,-1231.6816,16.3907,30.2415);
    ApplyActorAnimation(VanActor[1], "DEALER", "DEALER_IDLE", 4.1, 1, 1, 1, 1, 1);

 //  	Create3DTextLabel(""RED"Guard\n"WHITE"Manong Jack", COLOR_WHITE, 785.9568,-1157.8646,23.7637, 16.0, 0, 0);
 	VanActor[2] = CreateActor(113, 785.9568,-1157.8646,23.7637,310.2061);
    ApplyActorAnimation(VanActor[2], "DEALER", "DEALER_IDLE", 4.1, 1, 1, 1, 1, 1);*/

	for(new i = 0; i < sizeof(jobLocations); i ++)
	{
	    format(string, sizeof(string), ""WHITE"%s\n"SVRCLR"Press "WHITE"'N'"SVRCLR" to get job.", jobLocations[i][jobName]);
	    CreateDynamic3DTextLabel(string, SERVER_COLOR, jobLocations[i][jobX], jobLocations[i][jobY], jobLocations[i][jobZ], 10.0);
	}

	for(new i = 0; i < sizeof(atmMachines); i ++)
	{
	    CreateDynamicObject(19324, atmMachines[i][atmX], atmMachines[i][atmY], atmMachines[i][atmZ], 0.0, 0.0, atmMachines[i][atmA]);
	    CreateDynamic3DTextLabel("ATM Machine\n"YELLOW"Usage: /atm", COLOR_WHITE, atmMachines[i][atmX], atmMachines[i][atmY], atmMachines[i][atmZ] + 0.4, 10.0);
	}
	/*for(new i = 0; i < sizeof(FuelStation); i ++)
	{
		CreateDynamicPickup(1650, 1, FuelStation[i][FuelX], FuelStation[i][FuelY], FuelStation[i][FuelZ]);
	    CreateDynamic3DTextLabel("Fuel Station\n"YELLOW"Usage: /refuel", COLOR_YELLOW, FuelStation[i][FuelX], FuelStation[i][FuelY], FuelStation[i][FuelZ] + 0.4, 12.0);
	}*/

	// - PLATE REGISTRATION CENTER
	CreateDynamic3DTextLabel("Front Desk\n"YELLOW"Usage: /registervehicle", COLOR_TEAL, -2772.9460, 376.7526, 3000.6462+ 0.4, 15.0);
	// - PLATE REGISTRATION CENTER
	CreateDynamic3DTextLabel("Front Desk\n"YELLOW"Usage: /registervehicle", COLOR_TEAL, -709.9255, 2606.4180, 1005.7650+ 0.4, 15.0);

	/*CreateDynamic3DTextLabel("Impound Area\nPress"WHITE"'N'"LIGHTRED" to releases your vehicle from impound.", COLOR_LIGHTRED, -2039.2168, -123.6363, -50.9141, 15.0);
	CreateDynamicPickup(1316, 1, -2039.2168, -123.6363, -50.9141);*/
	
	CreateDynamic3DTextLabel("Mechanic\nPress "WHITE"N"TEAL".", COLOR_TEAL, 2870.2981, -1955.2510, 10.7259, 10.0);
	CreateDynamicPickup(1239, 1, 2870.2981, -1955.2510, 10.7259);
	
   	CreateDynamic3DTextLabel(""TEAL"Hospital Desk\n"YELLOW"Usage: Press N",COLOR_TEAL,1256.1206,-1282.0250,1061.1492+0.6,4.0);// Insurance
  	CreateDynamic3DTextLabel(""TEAL"Hospital Desk\n"YELLOW"Usage: Press N",COLOR_TEAL,1602.7094, 537.6455, 501.9966+0.6,4.0);// Insurance

    CreateDynamic3DTextLabel(""WHITE"CAFETERIA\n"YELLOW"Usage: /cafeteria.",COLOR_YELLOW,2042.9763, -2031.3365, 871.1051+0.6,4.0);/// VIP locker room

	CreateDynamic3DTextLabel("Paintball arena\n/enter to play paintball!", COLOR_YELLOW, 2114.6918, -1742.9276, 13.5547, 10.0);
	CreateDynamicPickup(1254, 1, 2114.6918, -1742.9276, 13.5547);
	
	for(new i = 0; i < sizeof(staticEntrances); i ++)
	{
	    format(string, sizeof(string), "{FFA500}%s"WHITE"\n"WHITE"Press "GREY"Y"WHITE" to enter.", staticEntrances[i][eName]);
	    //CreateDynamicPickup(19132, 1, staticEntrances[i][ePosX], staticEntrances[i][ePosY], staticEntrances[i][ePosZ]);
	    CreateDynamic3DTextLabel(string, COLOR_GREY, staticEntrances[i][ePosX], staticEntrances[i][ePosY], staticEntrances[i][ePosZ], 10.0);
	    CreateDynamicPickup(19132, 1, staticEntrances[i][ePosX], staticEntrances[i][ePosY], staticEntrances[i][ePosZ]);

	    if(staticEntrances[i][eMapIcon])
	    {
	        CreateDynamicMapIcon(staticEntrances[i][ePosX], staticEntrances[i][ePosY], staticEntrances[i][ePosZ], staticEntrances[i][eMapIcon], 0);
		}
	}
	CreateDynamic3DTextLabel(""WHITE"Chop Shop\n"YELLOW"/chopvehicle to chop car.",COLOR_WHITE,-284.4217, 2657.7686, 62.2036+0.5,4.0);// Stolen Car Chop Shop (AP)
	CreatePickup(1239,23,-284.4217, 2657.7686, 62.2036,-1); // AP Chop Shop

	CreateDynamic3DTextLabel(""WHITE"Chop Shop\n"YELLOW"/chopvehicle to chop car.",COLOR_WHITE,-284.4217, 2657.7686, 62.2036+0.5,4.0);// Stolen Car Chop Shop (AP)
	CreatePickup(1239,23,-284.4217, 2657.7686, 62.2036,-1); // Sz
	for(new i = 0; i < sizeof(minerPositions); i ++)
	{
		CreateDynamicPickup(18634, 1, minerPositions[i][0], minerPositions[i][1], minerPositions[i][2]);
	    CreateDynamic3DTextLabel(""WHITE"Mining Area\n"YELLOW"Usage: /mine.", SERVER_COLOR, minerPositions[i][0], minerPositions[i][1], minerPositions[i][2], 25.0);
	}
	for(new i = 0; i < sizeof(constructionPositions); i ++)
	{
	    CreateDynamic3DTextLabel(""WHITE"Construction Area\n"YELLOW"Usage: Press N.", SERVER_COLOR, constructionPositions[i][0], constructionPositions[i][1], constructionPositions[i][2], 25.0);
	}
	for(new i = 0; i < sizeof(tunePositions); i ++)
	{
	    CreateDynamic3DTextLabel("Type "WHITE"'/tune'"LIGHTRED" to tune the vehicle\nType "WHITE" '/upgradevehicle' "LIGHTRED"to upgrade the vehicle.", COLOR_LIGHTRED, tunePositions[i][0], tunePositions[i][1], tunePositions[i][2], 8.0);
	}
	/*for(new i = 0; i < sizeof(arrestPoints); i ++)
	{
	    CreateDynamic3DTextLabel("Arrest\n"SVRCLR"(( Type '/arrest' to arrest a suspect. ))", COLOR_GREY, arrestPoints[i][0], arrestPoints[i][1], arrestPoints[i][2], 7.0);
	    CreateDynamicPickup(1247, 1, arrestPoints[i][0], arrestPoints[i][1], arrestPoints[i][2]);
	}*/

	// Blindfold - Ez Jeck
	Blind = TextDrawCreate(641.199951, 1.500000, "usebox");
	TextDrawLetterSize(Blind, 0.000000, 49.378147);
	TextDrawTextSize(Blind, -2.000000, 0.000000);
	TextDrawAlignment(Blind, 3);
	TextDrawColor(Blind, -1);
	TextDrawUseBox(Blind, true);
	TextDrawBoxColor(Blind, 255);
	TextDrawSetShadow(Blind, 0);
	TextDrawSetOutline(Blind, 0);
	TextDrawBackgroundColor(Blind, 255);
	TextDrawFont(Blind, 1);
	
	// Priority Cooldown - Ez STEWART
	Textdraw2 = TextDrawCreate(620.000000, 10.000000, "~w~Illegal Activity: ~y~Priority on Hold");
    TextDrawFont(Textdraw2, 1);
    TextDrawLetterSize(Textdraw2, 0.229166, 1.049998);
    TextDrawTextSize(Textdraw2, 400.000000, 17.000000);
    TextDrawSetOutline(Textdraw2, 1);
    TextDrawSetShadow(Textdraw2, 0);
    TextDrawAlignment(Textdraw2, 3);
    TextDrawColor(Textdraw2, -1);
    TextDrawBackgroundColor(Textdraw2, 255);
    TextDrawBoxColor(Textdraw2, 50);
    TextDrawUseBox(Textdraw2, 0);
    TextDrawSetProportional(Textdraw2, 1);
    TextDrawSetSelectable(Textdraw2, 0);

	ANN[0] = TextDrawCreate(323.000000, 315.000000, "_");
	TextDrawFont(ANN[0], 1);
	TextDrawLetterSize(ANN[0], 1.237501, 1.999992);
	TextDrawTextSize(ANN[0], 313.500000, 509.500000);
	TextDrawSetOutline(ANN[0], 1);
	TextDrawSetShadow(ANN[0], 0);
	TextDrawAlignment(ANN[0], 2);
	TextDrawColor(ANN[0], -1);
	TextDrawBackgroundColor(ANN[0], 255);
	TextDrawBoxColor(ANN[0], 139);
	TextDrawUseBox(ANN[0], 1);
	TextDrawSetProportional(ANN[0], 1);
	TextDrawSetSelectable(ANN[0], 0);

	ANN[1] = TextDrawCreate(70.000000, 317.000000, "ANNOUNCEMENT:");
	TextDrawFont(ANN[1], 2);
	TextDrawLetterSize(ANN[1], 0.258332, 1.099997);
	TextDrawTextSize(ANN[1], 576.000000, -79.000000);
	TextDrawSetOutline(ANN[1], 1);
	TextDrawSetShadow(ANN[1], 0);
	TextDrawAlignment(ANN[1], 1);
	TextDrawColor(ANN[1], SERVER_COLOR);
	TextDrawBackgroundColor(ANN[1], 255);
	TextDrawBoxColor(ANN[1], 50);
	TextDrawUseBox(ANN[1], 0);
	TextDrawSetProportional(ANN[1], 1);
	TextDrawSetSelectable(ANN[1], 0);

	ANN[2] = TextDrawCreate(162.000000, 317.000000, "ANNOUNCEMENT:");
	TextDrawFont(ANN[2], 2);
	TextDrawLetterSize(ANN[2], 0.258332, 1.099997);
	TextDrawTextSize(ANN[2], 837.000000, -79.000000);
	TextDrawSetOutline(ANN[2], 1);
	TextDrawSetShadow(ANN[2], 0);
	TextDrawAlignment(ANN[2], 1);
	TextDrawColor(ANN[2], -1);
	TextDrawBackgroundColor(ANN[2], 255);
	TextDrawBoxColor(ANN[2], 50);
	TextDrawUseBox(ANN[2], 0);
	TextDrawSetProportional(ANN[2], 1);
	TextDrawSetSelectable(ANN[2], 0);

	/*LogoTD[0] = TextDrawCreate(494.000000, 424.000000, "Philippine Law");
	TextDrawFont(LogoTD[0], 3);
	TextDrawLetterSize(LogoTD[0], 0.545831, 1.949993);
	TextDrawTextSize(LogoTD[0], 845.000000, -303.000000);
	TextDrawSetOutline(LogoTD[0], 1);
	TextDrawSetShadow(LogoTD[0], 0);
	TextDrawAlignment(LogoTD[0], 1);
	TextDrawColor(LogoTD[0], SERVER_COLOR);
	TextDrawBackgroundColor(LogoTD[0], 255);
	TextDrawBoxColor(LogoTD[0], 50);
	TextDrawUseBox(LogoTD[0], 0);
	TextDrawSetProportional(LogoTD[0], 1);
	TextDrawSetSelectable(LogoTD[0], 0);

	LogoTD[1] = TextDrawCreate(495.000000, 439.000000, "~w~THE NEXT LEVEL ROLEPLAY EXPERIENCE");
	TextDrawFont(LogoTD[1], 1);
	TextDrawLetterSize(LogoTD[1], 0.204163, 0.999993);
	TextDrawTextSize(LogoTD[1], 845.000000, -303.000000);
	TextDrawSetOutline(LogoTD[1], 1);
	TextDrawSetShadow(LogoTD[1], 0);
	TextDrawAlignment(LogoTD[1], 1);
	TextDrawColor(LogoTD[1], -293409025);
	TextDrawBackgroundColor(LogoTD[1], 255);
	TextDrawBoxColor(LogoTD[1], 50);
	TextDrawUseBox(LogoTD[1], 0);
	TextDrawSetProportional(LogoTD[1], 1);
	TextDrawSetSelectable(LogoTD[1], 0);

	LogoTD[2] = TextDrawCreate(496.000000, 417.000000, "~r~OWNER:~p~GreenMinded");
	TextDrawFont(LogoTD[2], 3);
	TextDrawLetterSize(LogoTD[2], 0.358329, 1.149994);
	TextDrawTextSize(LogoTD[2], 845.000000, -303.000000);
	TextDrawSetOutline(LogoTD[2], 1);
	TextDrawSetShadow(LogoTD[2], 0);
	TextDrawAlignment(LogoTD[2], 1);
	TextDrawColor(LogoTD[2], -293409025);
	TextDrawBackgroundColor(LogoTD[2], 255);
	TextDrawBoxColor(LogoTD[2], 50);
	TextDrawUseBox(LogoTD[2], 0);
	TextDrawSetProportional(LogoTD[2], 1);
	TextDrawSetSelectable(LogoTD[2], 0);*/
	
	//LoginTD
	LoginTD[0] = TextDrawCreate(232.000000, 77.000000, "Alcazar City");
	TextDrawFont(LoginTD[0], 2);
	TextDrawLetterSize(LoginTD[0], 0.254166, 2.649999);
	TextDrawTextSize(LoginTD[0], 402.000000, 12.500000);
	TextDrawSetOutline(LoginTD[0], 1);
	TextDrawSetShadow(LoginTD[0], 0);
	TextDrawAlignment(LoginTD[0], 1);
	TextDrawColor(LoginTD[0], -12320513);
	TextDrawBackgroundColor(LoginTD[0], 255);
	TextDrawBoxColor(LoginTD[0], 50);
	TextDrawUseBox(LoginTD[0], 0);
	TextDrawSetProportional(LoginTD[0], 1);
	TextDrawSetSelectable(LoginTD[0], 0);
	
	LoginTD[1] = TextDrawCreate(232.000000, 114.000000, "Alcazar City");
	TextDrawFont(LoginTD[1], 2);
	TextDrawLetterSize(LoginTD[1], 0.254166, -2.149998);
	TextDrawTextSize(LoginTD[1], 402.000000, 12.500000);
	TextDrawSetOutline(LoginTD[1], 1);
	TextDrawSetShadow(LoginTD[1], 0);
	TextDrawAlignment(LoginTD[1], 1);
	TextDrawColor(LoginTD[1], -1);
	TextDrawBackgroundColor(LoginTD[1], 255);
	TextDrawBoxColor(LoginTD[1], 50);
	TextDrawUseBox(LoginTD[1], 0);
	TextDrawSetProportional(LoginTD[1], 1);
	TextDrawSetSelectable(LoginTD[1], 0);
	
    /*Login[0]= TextDrawCreate(239.000000, 31.000000, "PHILIPPINE");
    TextDrawBackgroundColor(Login[0], -16776961);
    TextDrawFont(Login[0], 3);
    TextDrawLetterSize(Login[0], 1.000000, 2.000000);
    TextDrawColor(Login[0], -65281);
    TextDrawSetOutline(Login[0], 1);
    TextDrawSetProportional(Login[0], 1);
    TextDrawSetSelectable(Login[0], 0);

    Login[1]= TextDrawCreate(277.000000, 50.000000, "LAW");
    TextDrawBackgroundColor(Login[1], -16776961);
    TextDrawFont(Login[1], 3);
    TextDrawLetterSize(Login[1], 1.000000, 2.000000);
    TextDrawColor(Login[1], 65535);
    TextDrawSetOutline(Login[1], 1);
    TextDrawSetProportional(Login[1], 1);
    TextDrawSetSelectable(Login[1], 0);

    Login[2]= TextDrawCreate(240.000000, 74.000000, "ROLEPLAY");
    TextDrawBackgroundColor(Login[2], -16776961);
    TextDrawFont(Login[2], 3);
    TextDrawLetterSize(Login[2], 1.000000, 2.000000);
    TextDrawColor(Login[2], -1);
    TextDrawSetOutline(Login[2], 1);
    TextDrawSetProportional(Login[2], 1);
    TextDrawSetSelectable(Login[2], 0);
    
    Login[3]= TextDrawCreate(142.000000, 101.000000, "THE NEXT LEVEL PINOY ROLEPLAY EXPERIENCE");
    TextDrawBackgroundColor(Login[3], 255);
    TextDrawFont(Login[3], 2);
    TextDrawLetterSize(Login[3], 0.400000, 1.500000);
    TextDrawColor(Login[3], 16777215);
    TextDrawSetOutline(Login[3], 0);
    TextDrawSetProportional(Login[3], 1);
    TextDrawSetShadow(Login[3], 1);
    TextDrawSetSelectable(Login[3], 0);

    Login[4]= TextDrawCreate(144.000000, 343.000000, "GAMEMODE VERSION : GTA:SA v2.1.0");
    TextDrawBackgroundColor(Login[4], -16776961);
    TextDrawFont(Login[4], 3);
    TextDrawLetterSize(Login[4], 0.600000, 2.000000);
    TextDrawColor(Login[4], 16711935);
    TextDrawSetOutline(Login[4], 1);
    TextDrawSetProportional(Login[4], 1);
    TextDrawSetSelectable(Login[4], 0);

    Login[5] = TextDrawCreate(56.000000, 381.000000, "OWNER: GREENMINDED");
    TextDrawBackgroundColor(Login[5], -65281);
    TextDrawFont(Login[5], 2);
    TextDrawLetterSize(Login[5], 0.500000, 2.000000);
    TextDrawColor(Login[5], -16711681);
    TextDrawSetOutline(Login[5], 1);
    TextDrawSetProportional(Login[5], 1);
    TextDrawSetSelectable(Login[5], 0);

    Login[6] = TextDrawCreate(306.000000, 380.000000, "DEVELOPER: GREENMINDED");
    TextDrawBackgroundColor(Login[6], -65281);
    TextDrawFont(Login[6], 2);
    TextDrawLetterSize(Login[6], 0.500000, 2.000000);
    TextDrawColor(Login[6], -16711681);
    TextDrawSetOutline(Login[6], 1);
    TextDrawSetProportional(Login[6], 1);
    TextDrawSetSelectable(Login[6], 0);

    Login[7] = TextDrawCreate(640.000000, 123.000000, "_");
    TextDrawBackgroundColor(Login[7], 255);
    TextDrawFont(Login[7], 3);
    TextDrawLetterSize(Login[7], 1.000000, 1.000000);
    TextDrawColor(Login[7], -1);
    TextDrawSetOutline(Login[7], 0);
    TextDrawSetProportional(Login[7], 1);
    TextDrawSetShadow(Login[7], 1);
    TextDrawUseBox(Login[7], 1);
    TextDrawBoxColor(Login[7], -65281);
    TextDrawTextSize(Login[7], 0.000000, 0.000000);
    TextDrawSetSelectable(Login[7], 0);

    Login[8] = TextDrawCreate(640.000000, 323.000000, "_");
    TextDrawBackgroundColor(Login[8], 255);
    TextDrawFont(Login[8], 3);
    TextDrawLetterSize(Login[8], 1.000000, 1.000000);
    TextDrawColor(Login[8], -1);
    TextDrawSetOutline(Login[8], 0);
    TextDrawSetProportional(Login[8], 1);
    TextDrawSetShadow(Login[8], 1);
    TextDrawUseBox(Login[8], 1);
    TextDrawBoxColor(Login[8], -65281);
    TextDrawTextSize(Login[8], 0.000000, 0.000000);
    TextDrawSetSelectable(Login[8], 0);*/

/*	HTSTD[0] = TextDrawCreate(88.000000, 428.000000, "HUD:radar_burgershot");
	TextDrawFont(HTSTD[0], 4);
	TextDrawLetterSize(HTSTD[0], 0.600000, 2.000000);
	TextDrawTextSize(HTSTD[0], 13.500000, 12.500000);
	TextDrawSetOutline(HTSTD[0], 1);
	TextDrawSetShadow(HTSTD[0], 0);
	TextDrawAlignment(HTSTD[0], 1);
	TextDrawColor(HTSTD[0], -1);
	TextDrawBackgroundColor(HTSTD[0], 255);
	TextDrawBoxColor(HTSTD[0], 50);
	TextDrawUseBox(HTSTD[0], 1);
	TextDrawSetProportional(HTSTD[0], 1);
	TextDrawSetSelectable(HTSTD[0], 0);

	HTSTD[1] = TextDrawCreate(106.000000, 428.000000, "HUD:radar_datedrink");
	TextDrawFont(HTSTD[1], 4);
	TextDrawLetterSize(HTSTD[1], 0.600000, 2.000000);
	TextDrawTextSize(HTSTD[1], 12.500000, 13.500000);
	TextDrawSetOutline(HTSTD[1], 1);
	TextDrawSetShadow(HTSTD[1], 0);
	TextDrawAlignment(HTSTD[1], 1);
	TextDrawColor(HTSTD[1], -1);
	TextDrawBackgroundColor(HTSTD[1], 255);
	TextDrawBoxColor(HTSTD[1], 50);
	TextDrawUseBox(HTSTD[1], 1);
	TextDrawSetProportional(HTSTD[1], 1);
	TextDrawSetSelectable(HTSTD[1], 0);

	HTSTD[2] = TextDrawCreate(43.000000, 429.000000, "HUD:radar_police");
	TextDrawFont(HTSTD[2], 4);
	TextDrawLetterSize(HTSTD[2], 0.600000, 2.000000);
	TextDrawTextSize(HTSTD[2], 14.000000, 9.500000);
	TextDrawSetOutline(HTSTD[2], 1);
	TextDrawSetShadow(HTSTD[2], 0);
	TextDrawAlignment(HTSTD[2], 1);
	TextDrawColor(HTSTD[2], -1);
	TextDrawBackgroundColor(HTSTD[2], 255);
	TextDrawBoxColor(HTSTD[2], 50);
	TextDrawUseBox(HTSTD[2], 1);
	TextDrawSetProportional(HTSTD[2], 1);
	TextDrawSetSelectable(HTSTD[2], 0);

	HTSTD[3] = TextDrawCreate(-1.000000, 429.000000, "HUD:radar_girlfriend");
	TextDrawFont(HTSTD[3], 4);
	TextDrawLetterSize(HTSTD[3], 0.600000, 2.000000);
	TextDrawTextSize(HTSTD[3], 15.000000, 9.500000);
	TextDrawSetOutline(HTSTD[3], 1);
	TextDrawSetShadow(HTSTD[3], 0);
	TextDrawAlignment(HTSTD[3], 1);
	TextDrawColor(HTSTD[3], -16776961);
	TextDrawBackgroundColor(HTSTD[3], -16776961);
	TextDrawBoxColor(HTSTD[3], -16777166);
	TextDrawUseBox(HTSTD[3], 1);
	TextDrawSetProportional(HTSTD[3], 1);
	TextDrawSetSelectable(HTSTD[3], 0);*/

	InjuredText = TextDrawCreate(288.000000, 279.000000, "~r~You are injured.");
	TextDrawFont(InjuredText, 1);
	TextDrawLetterSize(InjuredText, 0.275000, 1.500000);
	TextDrawTextSize(InjuredText, 531.000000, -114.000000);
	TextDrawSetOutline(InjuredText, 1);
	TextDrawSetShadow(InjuredText, 0);
	TextDrawAlignment(InjuredText, 1);
	TextDrawColor(InjuredText, -1);
	TextDrawBackgroundColor(InjuredText, 255);
	TextDrawBoxColor(InjuredText, 50);
	TextDrawUseBox(InjuredText, 0);
	TextDrawSetProportional(InjuredText, 1);
	TextDrawSetSelectable(InjuredText, 0);

	DieText = TextDrawCreate(208.000000, 296.000000, "Type ~y~/phone~w~ to call a ~r~medic~w~ or ~y~/accept death~w~ to skip.");
	TextDrawFont(DieText, 1);
	TextDrawLetterSize(DieText, 0.233333, 1.800000);
	TextDrawTextSize(DieText, 831.500000, -379.500000);
	TextDrawSetOutline(DieText, 1);
	TextDrawSetShadow(DieText, 0);
	TextDrawAlignment(DieText, 1);
	TextDrawColor(DieText, -1);
	TextDrawBackgroundColor(DieText, 255);
	TextDrawBoxColor(DieText, 50);
	TextDrawUseBox(DieText, 0);
	TextDrawSetProportional(DieText, 1);
	TextDrawSetSelectable(DieText, 0);

	ReportTD = TextDrawCreate(261.000000, 372.000000, "~y~NEW ADMIN REPORT!");
	TextDrawFont(ReportTD, 2);
	TextDrawLetterSize(ReportTD, 0.404166, 2.199999);
	TextDrawTextSize(ReportTD, 630.000000, -213.000000);
	TextDrawSetOutline(ReportTD, 1);
	TextDrawSetShadow(ReportTD, 0);
	TextDrawAlignment(ReportTD, 1);
	TextDrawColor(ReportTD, -1);
	TextDrawBackgroundColor(ReportTD, 255);
	TextDrawBoxColor(ReportTD, 50);
	TextDrawUseBox(ReportTD, 0);
	TextDrawSetProportional(ReportTD, 1);
	TextDrawSetSelectable(ReportTD, 0);
	
	/*HTTD[0] = TextDrawCreate(545.000000, 145.000000, "HUD:radar_pizza");
	TextDrawFont(HTTD[0], 4);
	TextDrawLetterSize(HTTD[0], 0.600000, 2.000000);
	TextDrawTextSize(HTTD[0], 17.000000, 17.000000);
	TextDrawSetOutline(HTTD[0], 1);
	TextDrawSetShadow(HTTD[0], 0);
	TextDrawAlignment(HTTD[0], 1);
	TextDrawColor(HTTD[0], -1);
	TextDrawBackgroundColor(HTTD[0], 255);
	TextDrawBoxColor(HTTD[0], 50);
	TextDrawUseBox(HTTD[0], 1);
	TextDrawSetProportional(HTTD[0], 1);
	TextDrawSetSelectable(HTTD[0], 0);

	HTTD[1] = TextDrawCreate(545.000000, 168.000000, "HUD:radar_diner");
	TextDrawFont(HTTD[1], 4);
	TextDrawLetterSize(HTTD[1], 0.600000, 2.000000);
	TextDrawTextSize(HTTD[1], 17.000000, 17.000000);
	TextDrawSetOutline(HTTD[1], 1);
	TextDrawSetShadow(HTTD[1], 0);
	TextDrawAlignment(HTTD[1], 1);
	TextDrawColor(HTTD[1], -1);
	TextDrawBackgroundColor(HTTD[1], 255);
	TextDrawBoxColor(HTTD[1], 50);
	TextDrawUseBox(HTTD[1], 1);
	TextDrawSetProportional(HTTD[1], 1);
	TextDrawSetSelectable(HTTD[1], 0);*/

	TimeTD = TextDrawCreate(138.000000, 390.000000, "00:00");
	TextDrawFont(TimeTD, 2);
	TextDrawLetterSize(TimeTD, 0.287497, 1.149996);
	TextDrawTextSize(TimeTD, 400.000000, 17.000000);
	TextDrawSetOutline(TimeTD, 1);
	TextDrawSetShadow(TimeTD, 0);
	TextDrawAlignment(TimeTD, 1);
	TextDrawColor(TimeTD, -1);
	TextDrawBackgroundColor(TimeTD, 255);
	TextDrawBoxColor(TimeTD, 50);
	TextDrawUseBox(TimeTD, 0);
	TextDrawSetProportional(TimeTD, 1);
	TextDrawSetSelectable(TimeTD, 0);

	// Calling Textdraws
	CallingTD[0] = TextDrawCreate(375.000000, 170.000000, "ld_pool:ball");
	TextDrawFont(CallingTD[0], 4);
	TextDrawLetterSize(CallingTD[0], 0.600000, 2.000000);
	TextDrawTextSize(CallingTD[0], 17.000000, 17.000000);
	TextDrawSetOutline(CallingTD[0], 1);
	TextDrawSetShadow(CallingTD[0], 0);
	TextDrawAlignment(CallingTD[0], 1);
	TextDrawColor(CallingTD[0], 255);
	TextDrawBackgroundColor(CallingTD[0], 255);
	TextDrawBoxColor(CallingTD[0], 50);
	TextDrawUseBox(CallingTD[0], 1);
	TextDrawSetProportional(CallingTD[0], 1);
	TextDrawSetSelectable(CallingTD[0], 0);

	CallingTD[1] = TextDrawCreate(478.000000, 171.000000, "ld_pool:ball");
	TextDrawFont(CallingTD[1], 4);
	TextDrawLetterSize(CallingTD[1], 0.600000, 2.000000);
	TextDrawTextSize(CallingTD[1], 17.000000, 17.000000);
	TextDrawSetOutline(CallingTD[1], 1);
	TextDrawSetShadow(CallingTD[1], 0);
	TextDrawAlignment(CallingTD[1], 1);
	TextDrawColor(CallingTD[1], 255);
	TextDrawBackgroundColor(CallingTD[1], 255);
	TextDrawBoxColor(CallingTD[1], 50);
	TextDrawUseBox(CallingTD[1], 1);
	TextDrawSetProportional(CallingTD[1], 1);
	TextDrawSetSelectable(CallingTD[1], 0);

	CallingTD[2] = TextDrawCreate(435.000000, 178.000000, "_");
	TextDrawFont(CallingTD[2], 1);
	TextDrawLetterSize(CallingTD[2], 0.600000, 26.300064);
	TextDrawTextSize(CallingTD[2], 298.500000, 115.500000);
	TextDrawSetOutline(CallingTD[2], 1);
	TextDrawSetShadow(CallingTD[2], 0);
	TextDrawAlignment(CallingTD[2], 2);
	TextDrawColor(CallingTD[2], -1);
	TextDrawBackgroundColor(CallingTD[2], 255);
	TextDrawBoxColor(CallingTD[2], 255);
	TextDrawUseBox(CallingTD[2], 1);
	TextDrawSetProportional(CallingTD[2], 1);
	TextDrawSetSelectable(CallingTD[2], 0);

	CallingTD[3] = TextDrawCreate(435.000000, 173.000000, "_");
	TextDrawFont(CallingTD[3], 1);
	TextDrawLetterSize(CallingTD[3], 0.600000, 27.450054);
	TextDrawTextSize(CallingTD[3], 298.500000, 104.500000);
	TextDrawSetOutline(CallingTD[3], 1);
	TextDrawSetShadow(CallingTD[3], 0);
	TextDrawAlignment(CallingTD[3], 2);
	TextDrawColor(CallingTD[3], -1);
	TextDrawBackgroundColor(CallingTD[3], 255);
	TextDrawBoxColor(CallingTD[3], 255);
	TextDrawUseBox(CallingTD[3], 1);
	TextDrawSetProportional(CallingTD[3], 1);
	TextDrawSetSelectable(CallingTD[3], 0);

	CallingTD[4] = TextDrawCreate(435.000000, 188.000000, "_");
	TextDrawFont(CallingTD[4], 1);
	TextDrawLetterSize(CallingTD[4], 0.433333, 23.150011);
	TextDrawTextSize(CallingTD[4], 298.500000, 111.500000);
	TextDrawSetOutline(CallingTD[4], 1);
	TextDrawSetShadow(CallingTD[4], 0);
	TextDrawAlignment(CallingTD[4], 2);
	TextDrawColor(CallingTD[4], -1);
	TextDrawBackgroundColor(CallingTD[4], 255);
	TextDrawBoxColor(CallingTD[4], -1061109625);
	TextDrawUseBox(CallingTD[4], 1);
	TextDrawSetProportional(CallingTD[4], 1);
	TextDrawSetSelectable(CallingTD[4], 0);

	CallingTD[5] = TextDrawCreate(377.000000, 187.000000, "ld_bum:bum2");
	TextDrawFont(CallingTD[5], 4);
	TextDrawLetterSize(CallingTD[5], 0.600000, 2.000000);
	TextDrawTextSize(CallingTD[5], 115.500000, 189.000000);
	TextDrawSetOutline(CallingTD[5], 1);
	TextDrawSetShadow(CallingTD[5], 0);
	TextDrawAlignment(CallingTD[5], 1);
	TextDrawColor(CallingTD[5], 255);
	TextDrawBackgroundColor(CallingTD[5], 255);
	TextDrawBoxColor(CallingTD[5], 50);
	TextDrawUseBox(CallingTD[5], 1);
	TextDrawSetProportional(CallingTD[5], 1);
	TextDrawSetSelectable(CallingTD[5], 0);

	CallingTD[6] = TextDrawCreate(408.000000, 175.000000, "PHONE");
	TextDrawFont(CallingTD[6], 1);
	TextDrawLetterSize(CallingTD[6], 0.258332, 0.699998);
	TextDrawTextSize(CallingTD[6], 611.000000, -194.500000);
	TextDrawSetOutline(CallingTD[6], 1);
	TextDrawSetShadow(CallingTD[6], 0);
	TextDrawAlignment(CallingTD[6], 1);
	TextDrawColor(CallingTD[6], -1);
	TextDrawBackgroundColor(CallingTD[6], 255);
	TextDrawBoxColor(CallingTD[6], 50);
	TextDrawUseBox(CallingTD[6], 0);
	TextDrawSetProportional(CallingTD[6], 1);
	TextDrawSetSelectable(CallingTD[6], 0);

	CallingTD[7] = TextDrawCreate(480.000000, 176.000000, "ld_pool:ball");
	TextDrawFont(CallingTD[7], 4);
	TextDrawLetterSize(CallingTD[7], 0.600000, 2.000000);
	TextDrawTextSize(CallingTD[7], 4.000000, 5.500000);
	TextDrawSetOutline(CallingTD[7], 1);
	TextDrawSetShadow(CallingTD[7], 0);
	TextDrawAlignment(CallingTD[7], 1);
	TextDrawColor(CallingTD[7], 1296911871);
	TextDrawBackgroundColor(CallingTD[7], 255);
	TextDrawBoxColor(CallingTD[7], 1296911666);
	TextDrawUseBox(CallingTD[7], 1);
	TextDrawSetProportional(CallingTD[7], 1);
	TextDrawSetSelectable(CallingTD[7], 0);

	CallingTD[8] = TextDrawCreate(376.000000, 413.000000, "ld_pool:ball");
	TextDrawFont(CallingTD[8], 4);
	TextDrawLetterSize(CallingTD[8], 0.600000, 2.000000);
	TextDrawTextSize(CallingTD[8], 10.000000, 10.000000);
	TextDrawSetOutline(CallingTD[8], 1);
	TextDrawSetShadow(CallingTD[8], 0);
	TextDrawAlignment(CallingTD[8], 1);
	TextDrawColor(CallingTD[8], 255);
	TextDrawBackgroundColor(CallingTD[8], 255);
	TextDrawBoxColor(CallingTD[8], 50);
	TextDrawUseBox(CallingTD[8], 1);
	TextDrawSetProportional(CallingTD[8], 1);
	TextDrawSetSelectable(CallingTD[8], 0);

	CallingTD[9] = TextDrawCreate(484.000000, 413.000000, "ld_pool:ball");
	TextDrawFont(CallingTD[9], 4);
	TextDrawLetterSize(CallingTD[9], 0.600000, 2.000000);
	TextDrawTextSize(CallingTD[9], 10.000000, 10.000000);
	TextDrawSetOutline(CallingTD[9], 1);
	TextDrawSetShadow(CallingTD[9], 0);
	TextDrawAlignment(CallingTD[9], 1);
	TextDrawColor(CallingTD[9], 255);
	TextDrawBackgroundColor(CallingTD[9], 255);
	TextDrawBoxColor(CallingTD[9], 50);
	TextDrawUseBox(CallingTD[9], 1);
	TextDrawSetProportional(CallingTD[9], 1);
	TextDrawSetSelectable(CallingTD[9], 0);

	CallingTD[10] = TextDrawCreate(435.000000, 188.000000, "_");
	TextDrawFont(CallingTD[10], 1);
	TextDrawLetterSize(CallingTD[10], 0.600000, 0.650004);
	TextDrawTextSize(CallingTD[10], 298.500000, 111.500000);
	TextDrawSetOutline(CallingTD[10], 1);
	TextDrawSetShadow(CallingTD[10], 0);
	TextDrawAlignment(CallingTD[10], 2);
	TextDrawColor(CallingTD[10], -1);
	TextDrawBackgroundColor(CallingTD[10], 255);
	TextDrawBoxColor(CallingTD[10], 1296911871);
	TextDrawUseBox(CallingTD[10], 1);
	TextDrawSetProportional(CallingTD[10], 1);
	TextDrawSetSelectable(CallingTD[10], 0);

	CallingTD[11] = TextDrawCreate(380.000000, 185.000000, "5G____________00:00");
	TextDrawFont(CallingTD[11], 2);
	TextDrawLetterSize(CallingTD[11], 0.333332, 1.049998);
	TextDrawTextSize(CallingTD[11], 400.000000, 17.000000);
	TextDrawSetOutline(CallingTD[11], 1);
	TextDrawSetShadow(CallingTD[11], 0);
	TextDrawAlignment(CallingTD[11], 1);
	TextDrawColor(CallingTD[11], -1);
	TextDrawBackgroundColor(CallingTD[11], 255);
	TextDrawBoxColor(CallingTD[11], 50);
	TextDrawUseBox(CallingTD[11], 0);
	TextDrawSetProportional(CallingTD[11], 1);
	TextDrawSetSelectable(CallingTD[11], 0);

	CallingTD[12] = TextDrawCreate(435.000000, 378.000000, "_");
	TextDrawFont(CallingTD[12], 1);
	TextDrawLetterSize(CallingTD[12], 0.600000, 2.250004);
	TextDrawTextSize(CallingTD[12], 298.500000, 111.500000);
	TextDrawSetOutline(CallingTD[12], 1);
	TextDrawSetShadow(CallingTD[12], 0);
	TextDrawAlignment(CallingTD[12], 2);
	TextDrawColor(CallingTD[12], -1);
	TextDrawBackgroundColor(CallingTD[12], 255);
	TextDrawBoxColor(CallingTD[12], 1296911871);
	TextDrawUseBox(CallingTD[12], 1);
	TextDrawSetProportional(CallingTD[12], 1);
	TextDrawSetSelectable(CallingTD[12], 0);

	PICKUP = TextDrawCreate(380.000000, 375.000000, "ld_chat:thumbup");
	TextDrawFont(PICKUP, 4);
	TextDrawLetterSize(PICKUP, 0.600000, 2.000000);
	TextDrawTextSize(PICKUP, 19.500000, 26.000000);
	TextDrawSetOutline(PICKUP, 1);
	TextDrawSetShadow(PICKUP, 0);
	TextDrawAlignment(PICKUP, 1);
	TextDrawColor(PICKUP, -1);
	TextDrawBackgroundColor(PICKUP, 255);
	TextDrawBoxColor(PICKUP, 50);
	TextDrawUseBox(PICKUP, 1);
	TextDrawSetProportional(PICKUP, 1);
	TextDrawSetSelectable(PICKUP, 1);

	HANGUP = TextDrawCreate(471.000000, 375.000000, "ld_chat:thumbdn");
	TextDrawFont(HANGUP, 4);
	TextDrawLetterSize(HANGUP, 0.600000, 2.000000);
	TextDrawTextSize(HANGUP, 19.500000, 26.000000);
	TextDrawSetOutline(HANGUP, 1);
	TextDrawSetShadow(HANGUP, 0);
	TextDrawAlignment(HANGUP, 1);
	TextDrawColor(HANGUP, -1);
	TextDrawBackgroundColor(HANGUP, 255);
	TextDrawBoxColor(HANGUP, 50);
	TextDrawUseBox(HANGUP, 1);
	TextDrawSetProportional(HANGUP, 1);
	TextDrawSetSelectable(HANGUP, 1);

	CloseCallTD = TextDrawCreate(425.000000, 399.000000, "ld_pool:ball");
	TextDrawFont(CloseCallTD, 4);
	TextDrawLetterSize(CloseCallTD, 0.600000, 2.000000);
	TextDrawTextSize(CloseCallTD, 21.500000, 23.000000);
	TextDrawSetOutline(CloseCallTD, 1);
	TextDrawSetShadow(CloseCallTD, 0);
	TextDrawAlignment(CloseCallTD, 1);
	TextDrawColor(CloseCallTD, 1296911871);
	TextDrawBackgroundColor(CloseCallTD, 255);
	TextDrawBoxColor(CloseCallTD, 1296911666);
	TextDrawUseBox(CloseCallTD, 1);
	TextDrawSetProportional(CloseCallTD, 1);
	TextDrawSetSelectable(CloseCallTD, 1);

	TwitterApp[0] = TextDrawCreate(375.000000, 170.000000, "ld_pool:ball");
	TextDrawFont(TwitterApp[0], 4);
	TextDrawLetterSize(TwitterApp[0], 0.600000, 2.000000);
	TextDrawTextSize(TwitterApp[0], 17.000000, 17.000000);
	TextDrawSetOutline(TwitterApp[0], 1);
	TextDrawSetShadow(TwitterApp[0], 0);
	TextDrawAlignment(TwitterApp[0], 1);
	TextDrawColor(TwitterApp[0], 255);
	TextDrawBackgroundColor(TwitterApp[0], 255);
	TextDrawBoxColor(TwitterApp[0], 50);
	TextDrawUseBox(TwitterApp[0], 1);
	TextDrawSetProportional(TwitterApp[0], 1);
	TextDrawSetSelectable(TwitterApp[0], 0);

	TwitterApp[1] = TextDrawCreate(478.000000, 171.000000, "ld_pool:ball");
	TextDrawFont(TwitterApp[1], 4);
	TextDrawLetterSize(TwitterApp[1], 0.600000, 2.000000);
	TextDrawTextSize(TwitterApp[1], 17.000000, 17.000000);
	TextDrawSetOutline(TwitterApp[1], 1);
	TextDrawSetShadow(TwitterApp[1], 0);
	TextDrawAlignment(TwitterApp[1], 1);
	TextDrawColor(TwitterApp[1], 255);
	TextDrawBackgroundColor(TwitterApp[1], 255);
	TextDrawBoxColor(TwitterApp[1], 50);
	TextDrawUseBox(TwitterApp[1], 1);
	TextDrawSetProportional(TwitterApp[1], 1);
	TextDrawSetSelectable(TwitterApp[1], 0);

	TwitterApp[2] = TextDrawCreate(435.000000, 178.000000, "_");
	TextDrawFont(TwitterApp[2], 1);
	TextDrawLetterSize(TwitterApp[2], 0.600000, 26.300064);
	TextDrawTextSize(TwitterApp[2], 298.500000, 115.500000);
	TextDrawSetOutline(TwitterApp[2], 1);
	TextDrawSetShadow(TwitterApp[2], 0);
	TextDrawAlignment(TwitterApp[2], 2);
	TextDrawColor(TwitterApp[2], -1);
	TextDrawBackgroundColor(TwitterApp[2], 255);
	TextDrawBoxColor(TwitterApp[2], 255);
	TextDrawUseBox(TwitterApp[2], 1);
	TextDrawSetProportional(TwitterApp[2], 1);
	TextDrawSetSelectable(TwitterApp[2], 0);

	TwitterApp[0] = TextDrawCreate(435.000000, 178.000000, "_");
	TextDrawFont(TwitterApp[0], 1);
	TextDrawLetterSize(TwitterApp[0], 0.600000, 26.300064);
	TextDrawTextSize(TwitterApp[0], 298.500000, 115.500000);
	TextDrawSetOutline(TwitterApp[0], 1);
	TextDrawSetShadow(TwitterApp[0], 0);
	TextDrawAlignment(TwitterApp[0], 2);
	TextDrawColor(TwitterApp[0], -1);
	TextDrawBackgroundColor(TwitterApp[0], 255);
	TextDrawBoxColor(TwitterApp[0], 255);
	TextDrawUseBox(TwitterApp[0], 1);
	TextDrawSetProportional(TwitterApp[0], 1);
	TextDrawSetSelectable(TwitterApp[0], 0);

	TwitterApp[1] = TextDrawCreate(435.000000, 173.000000, "_");
	TextDrawFont(TwitterApp[1], 1);
	TextDrawLetterSize(TwitterApp[1], 0.600000, 27.450054);
	TextDrawTextSize(TwitterApp[1], 298.500000, 104.500000);
	TextDrawSetOutline(TwitterApp[1], 1);
	TextDrawSetShadow(TwitterApp[1], 0);
	TextDrawAlignment(TwitterApp[1], 2);
	TextDrawColor(TwitterApp[1], -1);
	TextDrawBackgroundColor(TwitterApp[1], 255);
	TextDrawBoxColor(TwitterApp[1], 255);
	TextDrawUseBox(TwitterApp[1], 1);
	TextDrawSetProportional(TwitterApp[1], 1);
	TextDrawSetSelectable(TwitterApp[1], 0);

	TwitterApp[2] = TextDrawCreate(435.000000, 188.000000, "_");
	TextDrawFont(TwitterApp[2], 1);
	TextDrawLetterSize(TwitterApp[2], 0.433333, 23.150011);
	TextDrawTextSize(TwitterApp[2], 298.500000, 111.500000);
	TextDrawSetOutline(TwitterApp[2], 1);
	TextDrawSetShadow(TwitterApp[2], 0);
	TextDrawAlignment(TwitterApp[2], 2);
	TextDrawColor(TwitterApp[2], -1);
	TextDrawBackgroundColor(TwitterApp[2], 255);
	TextDrawBoxColor(TwitterApp[2], -1061109625);
	TextDrawUseBox(TwitterApp[2], 1);
	TextDrawSetProportional(TwitterApp[2], 1);
	TextDrawSetSelectable(TwitterApp[2], 0);

	TwitterApp[3] = TextDrawCreate(435.000000, 188.000000, "_");
	TextDrawFont(TwitterApp[3], 1);
	TextDrawLetterSize(TwitterApp[3], 0.433333, 23.150011);
	TextDrawTextSize(TwitterApp[3], 298.500000, 111.500000);
	TextDrawSetOutline(TwitterApp[3], 1);
	TextDrawSetShadow(TwitterApp[3], 0);
	TextDrawAlignment(TwitterApp[3], 2);
	TextDrawColor(TwitterApp[3], -1);
	TextDrawBackgroundColor(TwitterApp[3], 255);
	TextDrawBoxColor(TwitterApp[3], 1687547271);
	TextDrawUseBox(TwitterApp[3], 1);
	TextDrawSetProportional(TwitterApp[3], 1);
	TextDrawSetSelectable(TwitterApp[3], 0);

	TwitterApp[4] = TextDrawCreate(408.000000, 175.000000, "PHONE");
	TextDrawFont(TwitterApp[4], 1);
	TextDrawLetterSize(TwitterApp[4], 0.258332, 0.699998);
	TextDrawTextSize(TwitterApp[4], 611.000000, -194.500000);
	TextDrawSetOutline(TwitterApp[4], 1);
	TextDrawSetShadow(TwitterApp[4], 0);
	TextDrawAlignment(TwitterApp[4], 1);
	TextDrawColor(TwitterApp[4], -1);
	TextDrawBackgroundColor(TwitterApp[4], 255);
	TextDrawBoxColor(TwitterApp[4], 50);
	TextDrawUseBox(TwitterApp[4], 0);
	TextDrawSetProportional(TwitterApp[4], 1);
	TextDrawSetSelectable(TwitterApp[4], 0);

	TwitterApp[5] = TextDrawCreate(480.000000, 176.000000, "ld_pool:ball");
	TextDrawFont(TwitterApp[5], 4);
	TextDrawLetterSize(TwitterApp[5], 0.600000, 2.000000);
	TextDrawTextSize(TwitterApp[5], 4.000000, 5.500000);
	TextDrawSetOutline(TwitterApp[5], 1);
	TextDrawSetShadow(TwitterApp[5], 0);
	TextDrawAlignment(TwitterApp[5], 1);
	TextDrawColor(TwitterApp[5], 1296911871);
	TextDrawBackgroundColor(TwitterApp[5], 255);
	TextDrawBoxColor(TwitterApp[5], 1296911666);
	TextDrawUseBox(TwitterApp[5], 1);
	TextDrawSetProportional(TwitterApp[5], 1);
	TextDrawSetSelectable(TwitterApp[5], 0);

	TwitterApp[6] = TextDrawCreate(376.000000, 413.000000, "ld_pool:ball");
	TextDrawFont(TwitterApp[6], 4);
	TextDrawLetterSize(TwitterApp[6], 0.600000, 2.000000);
	TextDrawTextSize(TwitterApp[6], 10.000000, 10.000000);
	TextDrawSetOutline(TwitterApp[6], 1);
	TextDrawSetShadow(TwitterApp[6], 0);
	TextDrawAlignment(TwitterApp[6], 1);
	TextDrawColor(TwitterApp[6], 255);
	TextDrawBackgroundColor(TwitterApp[6], 255);
	TextDrawBoxColor(TwitterApp[6], 50);
	TextDrawUseBox(TwitterApp[6], 1);
	TextDrawSetProportional(TwitterApp[6], 1);
	TextDrawSetSelectable(TwitterApp[6], 0);

	TwitterApp[7] = TextDrawCreate(484.000000, 413.000000, "ld_pool:ball");
	TextDrawFont(TwitterApp[7], 4);
	TextDrawLetterSize(TwitterApp[7], 0.600000, 2.000000);
	TextDrawTextSize(TwitterApp[7], 10.000000, 10.000000);
	TextDrawSetOutline(TwitterApp[7], 1);
	TextDrawSetShadow(TwitterApp[7], 0);
	TextDrawAlignment(TwitterApp[7], 1);
	TextDrawColor(TwitterApp[7], 255);
	TextDrawBackgroundColor(TwitterApp[7], 255);
	TextDrawBoxColor(TwitterApp[7], 50);
	TextDrawUseBox(TwitterApp[7], 1);
	TextDrawSetProportional(TwitterApp[7], 1);
	TextDrawSetSelectable(TwitterApp[7], 0);

	TwitterApp[8] = TextDrawCreate(399.000000, 195.000000, "_");
	TextDrawFont(TwitterApp[8], 1);
	TextDrawLetterSize(TwitterApp[8], 0.600000, 1.500003);
	TextDrawTextSize(TwitterApp[8], 298.500000, 40.000000);
	TextDrawSetOutline(TwitterApp[8], 1);
	TextDrawSetShadow(TwitterApp[8], 0);
	TextDrawAlignment(TwitterApp[8], 2);
	TextDrawColor(TwitterApp[8], -1);
	TextDrawBackgroundColor(TwitterApp[8], 255);
	TextDrawBoxColor(TwitterApp[8], 16777215);
	TextDrawUseBox(TwitterApp[8], 1);
	TextDrawSetProportional(TwitterApp[8], 1);
	TextDrawSetSelectable(TwitterApp[8], 0);

	TwitterApp[9] = TextDrawCreate(380.000000, 196.000000, "Twitter");
	TextDrawFont(TwitterApp[9], 1);
	TextDrawLetterSize(TwitterApp[9], 0.299999, 0.999999);
	TextDrawTextSize(TwitterApp[9], 400.000000, 17.000000);
	TextDrawSetOutline(TwitterApp[9], 1);
	TextDrawSetShadow(TwitterApp[9], 0);
	TextDrawAlignment(TwitterApp[9], 1);
	TextDrawColor(TwitterApp[9], -1);
	TextDrawBackgroundColor(TwitterApp[9], 255);
	TextDrawBoxColor(TwitterApp[9], 50);
	TextDrawUseBox(TwitterApp[9], 0);
	TextDrawSetProportional(TwitterApp[9], 1);
	TextDrawSetSelectable(TwitterApp[9], 0);

	TwitterApp[10] = TextDrawCreate(435.000000, 376.000000, "_");
	TextDrawFont(TwitterApp[10], 1);
	TextDrawLetterSize(TwitterApp[10], 0.600000, 2.250004);
	TextDrawTextSize(TwitterApp[10], 298.500000, 111.500000);
	TextDrawSetOutline(TwitterApp[10], 1);
	TextDrawSetShadow(TwitterApp[10], 0);
	TextDrawAlignment(TwitterApp[10], 2);
	TextDrawColor(TwitterApp[10], -1);
	TextDrawBackgroundColor(TwitterApp[10], 255);
	TextDrawBoxColor(TwitterApp[10], 1296911871);
	TextDrawUseBox(TwitterApp[10], 1);
	TextDrawSetProportional(TwitterApp[10], 1);
	TextDrawSetSelectable(TwitterApp[10], 0);

	TwitterApp[11] = TextDrawCreate(435.000000, 239.000000, "_");
	TextDrawFont(TwitterApp[11], 1);
	TextDrawLetterSize(TwitterApp[11], 0.600000, 7.800005);
	TextDrawTextSize(TwitterApp[11], 298.500000, 111.500000);
	TextDrawSetOutline(TwitterApp[11], 1);
	TextDrawSetShadow(TwitterApp[11], 0);
	TextDrawAlignment(TwitterApp[11], 2);
	TextDrawColor(TwitterApp[11], -1);
	TextDrawBackgroundColor(TwitterApp[11], 255);
	TextDrawBoxColor(TwitterApp[11], -1);
	TextDrawUseBox(TwitterApp[11], 1);
	TextDrawSetProportional(TwitterApp[11], 1);
	TextDrawSetSelectable(TwitterApp[11], 0);

	TwitterApp[12] = TextDrawCreate(378.000000, 225.000000, "What's happening?");
	TextDrawFont(TwitterApp[12], 2);
	TextDrawLetterSize(TwitterApp[12], 0.158332, 1.199998);
	TextDrawTextSize(TwitterApp[12], 620.000000, 17.000000);
	TextDrawSetOutline(TwitterApp[12], 1);
	TextDrawSetShadow(TwitterApp[12], 0);
	TextDrawAlignment(TwitterApp[12], 1);
	TextDrawColor(TwitterApp[12], -1);
	TextDrawBackgroundColor(TwitterApp[12], 255);
	TextDrawBoxColor(TwitterApp[12], 50);
	TextDrawUseBox(TwitterApp[12], 0);
	TextDrawSetProportional(TwitterApp[12], 1);
	TextDrawSetSelectable(TwitterApp[12], 0);

	TwitterApp[13] = TextDrawCreate(435.000000, 238.000000, "_");
	TextDrawFont(TwitterApp[13], 1);
	TextDrawLetterSize(TwitterApp[13], 0.600000, -0.399998);
	TextDrawTextSize(TwitterApp[13], 298.500000, 111.500000);
	TextDrawSetOutline(TwitterApp[13], 1);
	TextDrawSetShadow(TwitterApp[13], 0);
	TextDrawAlignment(TwitterApp[13], 2);
	TextDrawColor(TwitterApp[13], -1);
	TextDrawBackgroundColor(TwitterApp[13], 255);
	TextDrawBoxColor(TwitterApp[13], 16777215);
	TextDrawUseBox(TwitterApp[13], 1);
	TextDrawSetProportional(TwitterApp[13], 1);
	TextDrawSetSelectable(TwitterApp[13], 0);

	TwitterApp[14] = TextDrawCreate(435.000000, 315.000000, "_");
	TextDrawFont(TwitterApp[14], 1);
	TextDrawLetterSize(TwitterApp[14], 0.600000, -0.399998);
	TextDrawTextSize(TwitterApp[14], 298.500000, 111.500000);
	TextDrawSetOutline(TwitterApp[14], 1);
	TextDrawSetShadow(TwitterApp[14], 0);
	TextDrawAlignment(TwitterApp[14], 2);
	TextDrawColor(TwitterApp[14], -1);
	TextDrawBackgroundColor(TwitterApp[14], 255);
	TextDrawBoxColor(TwitterApp[14], 16777215);
	TextDrawUseBox(TwitterApp[14], 1);
	TextDrawSetProportional(TwitterApp[14], 1);
	TextDrawSetSelectable(TwitterApp[14], 0);

	TwitterApp[15] = TextDrawCreate(426.000000, 328.000000, "50 characters");
	TextDrawFont(TwitterApp[15], 2);
	TextDrawLetterSize(TwitterApp[15], 0.116665, 1.699998);
	TextDrawTextSize(TwitterApp[15], 620.000000, 17.000000);
	TextDrawSetOutline(TwitterApp[15], 1);
	TextDrawSetShadow(TwitterApp[15], 0);
	TextDrawAlignment(TwitterApp[15], 1);
	TextDrawColor(TwitterApp[15], -1);
	TextDrawBackgroundColor(TwitterApp[15], 255);
	TextDrawBoxColor(TwitterApp[15], 50);
	TextDrawUseBox(TwitterApp[15], 0);
	TextDrawSetProportional(TwitterApp[15], 1);
	TextDrawSetSelectable(TwitterApp[15], 0);

	TwitterApp[16] = TextDrawCreate(480.000000, 328.000000, "_");
	TextDrawFont(TwitterApp[16], 1);
	TextDrawLetterSize(TwitterApp[16], 0.600000, 1.350003);
	TextDrawTextSize(TwitterApp[16], 298.500000, 21.500000);
	TextDrawSetOutline(TwitterApp[16], 1);
	TextDrawSetShadow(TwitterApp[16], 0);
	TextDrawAlignment(TwitterApp[16], 2);
	TextDrawColor(TwitterApp[16], -1);
	TextDrawBackgroundColor(TwitterApp[16], 255);
	TextDrawBoxColor(TwitterApp[16], 1296911871);
	TextDrawUseBox(TwitterApp[16], 1);
	TextDrawSetProportional(TwitterApp[16], 1);
	TextDrawSetSelectable(TwitterApp[16], 0);

	TwitterApp[17] = TextDrawCreate(470.000000, 329.000000, "Tweet");
	TextDrawFont(TwitterApp[17], 2);
	TextDrawLetterSize(TwitterApp[17], 0.137499, 1.049999);
	TextDrawTextSize(TwitterApp[17], 620.000000, 17.000000);
	TextDrawSetOutline(TwitterApp[17], 1);
	TextDrawSetShadow(TwitterApp[17], 0);
	TextDrawAlignment(TwitterApp[17], 1);
	TextDrawColor(TwitterApp[17], -1);
	TextDrawBackgroundColor(TwitterApp[17], 255);
	TextDrawBoxColor(TwitterApp[17], 50);
	TextDrawUseBox(TwitterApp[17], 0);
	TextDrawSetProportional(TwitterApp[17], 1);
	TextDrawSetSelectable(TwitterApp[17], 0);

	TwitterApp[18] = TextDrawCreate(460.000000, 195.000000, "_");
	TextDrawFont(TwitterApp[18], 1);
	TextDrawLetterSize(TwitterApp[18], 0.600000, 1.500003);
	TextDrawTextSize(TwitterApp[18], 298.500000, 61.500000);
	TextDrawSetOutline(TwitterApp[18], 1);
	TextDrawSetShadow(TwitterApp[18], 0);
	TextDrawAlignment(TwitterApp[18], 2);
	TextDrawColor(TwitterApp[18], -1);
	TextDrawBackgroundColor(TwitterApp[18], 255);
	TextDrawBoxColor(TwitterApp[18], -1);
	TextDrawUseBox(TwitterApp[18], 1);
	TextDrawSetProportional(TwitterApp[18], 1);
	TextDrawSetSelectable(TwitterApp[18], 0);

	TwitterApp[19] = TextDrawCreate(429.000000, 197.000000, "Home    Profile    Find People");
	TextDrawFont(TwitterApp[19], 2);
	TextDrawLetterSize(TwitterApp[19], 0.091665, 1.049999);
	TextDrawTextSize(TwitterApp[19], 620.000000, 17.000000);
	TextDrawSetOutline(TwitterApp[19], 1);
	TextDrawSetShadow(TwitterApp[19], 0);
	TextDrawAlignment(TwitterApp[19], 1);
	TextDrawColor(TwitterApp[19], -1);
	TextDrawBackgroundColor(TwitterApp[19], 255);
	TextDrawBoxColor(TwitterApp[19], 50);
	TextDrawUseBox(TwitterApp[19], 0);
	TextDrawSetProportional(TwitterApp[19], 1);
	TextDrawSetSelectable(TwitterApp[19], 0);

	addtexttd = TextDrawCreate(402.000000, 263.000000, "CLICK TO ADD TEXT");
	TextDrawFont(addtexttd, 2);
	TextDrawLetterSize(addtexttd, 0.158332, 1.199998);
	TextDrawTextSize(addtexttd, 474.000000, 17.000000);
	TextDrawSetOutline(addtexttd, 1);
	TextDrawSetShadow(addtexttd, 0);
	TextDrawAlignment(addtexttd, 1);
	TextDrawColor(addtexttd, -1);
	TextDrawBackgroundColor(addtexttd, 255);
	TextDrawBoxColor(addtexttd, 50);
	TextDrawUseBox(addtexttd, 0);
	TextDrawSetProportional(addtexttd, 1);
	TextDrawSetSelectable(addtexttd, 1);
	
	TutorialNewbieTD[0] = TextDrawCreate(321.000000, 296.000000, "_");
	TextDrawFont(TutorialNewbieTD[0], 1);
	TextDrawLetterSize(TutorialNewbieTD[0], 0.600000, 15.150012);
	TextDrawTextSize(TutorialNewbieTD[0], 298.500000, 392.000000);
	TextDrawSetOutline(TutorialNewbieTD[0], 1);
	TextDrawSetShadow(TutorialNewbieTD[0], 0);
	TextDrawAlignment(TutorialNewbieTD[0], 2);
	TextDrawColor(TutorialNewbieTD[0], -1);
	TextDrawBackgroundColor(TutorialNewbieTD[0], 255);
	TextDrawBoxColor(TutorialNewbieTD[0], 135);
	TextDrawUseBox(TutorialNewbieTD[0], 1);
	TextDrawSetProportional(TutorialNewbieTD[0], 1);
	TextDrawSetSelectable(TutorialNewbieTD[0], 0);

	TutorialNewbieTD[1] = TextDrawCreate(126.000000, 294.000000, "Title");
	TextDrawFont(TutorialNewbieTD[1], 3);
	TextDrawLetterSize(TutorialNewbieTD[1], 0.600000, 2.000000);
	TextDrawTextSize(TutorialNewbieTD[1], 658.500000, 18.000000);
	TextDrawSetOutline(TutorialNewbieTD[1], 1);
	TextDrawSetShadow(TutorialNewbieTD[1], 0);
	TextDrawAlignment(TutorialNewbieTD[1], 1);
	TextDrawColor(TutorialNewbieTD[1], -1);
	TextDrawBackgroundColor(TutorialNewbieTD[1], 255);
	TextDrawBoxColor(TutorialNewbieTD[1], 50);
	TextDrawUseBox(TutorialNewbieTD[1], 0);
	TextDrawSetProportional(TutorialNewbieTD[1], 1);
	TextDrawSetSelectable(TutorialNewbieTD[1], 0);

	TutorialNewbieTD[2] = TextDrawCreate(129.000000, 353.000000, "Text");
	TextDrawFont(TutorialNewbieTD[2], 1);
	TextDrawLetterSize(TutorialNewbieTD[2], 0.291666, 1.250000);
	TextDrawTextSize(TutorialNewbieTD[2], 509.000000, 17.000000);
	TextDrawSetOutline(TutorialNewbieTD[2], 1);
	TextDrawSetShadow(TutorialNewbieTD[2], 0);
	TextDrawAlignment(TutorialNewbieTD[2], 1);
	TextDrawColor(TutorialNewbieTD[2], -1);
	TextDrawBackgroundColor(TutorialNewbieTD[2], 255);
	TextDrawBoxColor(TutorialNewbieTD[2], 50);
	TextDrawUseBox(TutorialNewbieTD[2], 1);
	TextDrawSetProportional(TutorialNewbieTD[2], 1);
	TextDrawSetSelectable(TutorialNewbieTD[2], 0);
	//Textdraws
	PhoneTD[0] = TextDrawCreate(375.000000, 170.000000, "ld_pool:ball");
	TextDrawFont(PhoneTD[0], 4);
	TextDrawLetterSize(PhoneTD[0], 0.600000, 2.000000);
	TextDrawTextSize(PhoneTD[0], 17.000000, 17.000000);
	TextDrawSetOutline(PhoneTD[0], 1);
	TextDrawSetShadow(PhoneTD[0], 0);
	TextDrawAlignment(PhoneTD[0], 1);
	TextDrawColor(PhoneTD[0], 255);
	TextDrawBackgroundColor(PhoneTD[0], 255);
	TextDrawBoxColor(PhoneTD[0], 50);
	TextDrawUseBox(PhoneTD[0], 1);
	TextDrawSetProportional(PhoneTD[0], 1);
	TextDrawSetSelectable(PhoneTD[0], 0);

	PhoneTD[1] = TextDrawCreate(478.000000, 171.000000, "ld_pool:ball");
	TextDrawFont(PhoneTD[1], 4);
	TextDrawLetterSize(PhoneTD[1], 0.600000, 2.000000);
	TextDrawTextSize(PhoneTD[1], 17.000000, 17.000000);
	TextDrawSetOutline(PhoneTD[1], 1);
	TextDrawSetShadow(PhoneTD[1], 0);
	TextDrawAlignment(PhoneTD[1], 1);
	TextDrawColor(PhoneTD[1], 255);
	TextDrawBackgroundColor(PhoneTD[1], 255);
	TextDrawBoxColor(PhoneTD[1], 50);
	TextDrawUseBox(PhoneTD[1], 1);
	TextDrawSetProportional(PhoneTD[1], 1);
	TextDrawSetSelectable(PhoneTD[1], 0);

	PhoneTD[2] = TextDrawCreate(435.000000, 178.000000, "_");
	TextDrawFont(PhoneTD[2], 1);
	TextDrawLetterSize(PhoneTD[2], 0.600000, 26.300064);
	TextDrawTextSize(PhoneTD[2], 298.500000, 115.500000);
	TextDrawSetOutline(PhoneTD[2], 1);
	TextDrawSetShadow(PhoneTD[2], 0);
	TextDrawAlignment(PhoneTD[2], 2);
	TextDrawColor(PhoneTD[2], -1);
	TextDrawBackgroundColor(PhoneTD[2], 255);
	TextDrawBoxColor(PhoneTD[2], 255);
	TextDrawUseBox(PhoneTD[2], 1);
	TextDrawSetProportional(PhoneTD[2], 1);
	TextDrawSetSelectable(PhoneTD[2], 0);

	PhoneTD[3] = TextDrawCreate(435.000000, 173.000000, "_");
	TextDrawFont(PhoneTD[3], 1);
	TextDrawLetterSize(PhoneTD[3], 0.600000, 27.450054);
	TextDrawTextSize(PhoneTD[3], 298.500000, 104.500000);
	TextDrawSetOutline(PhoneTD[3], 1);
	TextDrawSetShadow(PhoneTD[3], 0);
	TextDrawAlignment(PhoneTD[3], 2);
	TextDrawColor(PhoneTD[3], -1);
	TextDrawBackgroundColor(PhoneTD[3], 255);
	TextDrawBoxColor(PhoneTD[3], 255);
	TextDrawUseBox(PhoneTD[3], 1);
	TextDrawSetProportional(PhoneTD[3], 1);
	TextDrawSetSelectable(PhoneTD[3], 0);

	PhoneTD[4] = TextDrawCreate(435.000000, 188.000000, "_");
	TextDrawFont(PhoneTD[4], 1);
	TextDrawLetterSize(PhoneTD[4], 0.433333, 23.150011);
	TextDrawTextSize(PhoneTD[4], 298.500000, 111.500000);
	TextDrawSetOutline(PhoneTD[4], 1);
	TextDrawSetShadow(PhoneTD[4], 0);
	TextDrawAlignment(PhoneTD[4], 2);
	TextDrawColor(PhoneTD[4], -1);
	TextDrawBackgroundColor(PhoneTD[4], 255);
	TextDrawBoxColor(PhoneTD[4], -1061109625);
	TextDrawUseBox(PhoneTD[4], 1);
	TextDrawSetProportional(PhoneTD[4], 1);
	TextDrawSetSelectable(PhoneTD[4], 0);

	PhoneTD[19] = TextDrawCreate(386.000000, 340.000000, "Twitter");
	TextDrawFont(PhoneTD[19], 2);
	TextDrawLetterSize(PhoneTD[19], 0.145833, 1.149999);
	TextDrawTextSize(PhoneTD[19], 490.000000, 17.000000);
	TextDrawSetOutline(PhoneTD[19], 1);
	TextDrawSetShadow(PhoneTD[19], 0);
	TextDrawAlignment(PhoneTD[19], 1);
	TextDrawColor(PhoneTD[19], -1);
	TextDrawBackgroundColor(PhoneTD[19], 255);
	TextDrawBoxColor(PhoneTD[19], 50);
	TextDrawUseBox(PhoneTD[19], 0);
	TextDrawSetProportional(PhoneTD[19], 1);
	TextDrawSetSelectable(PhoneTD[19], 0);

	PhoneTD[5] = TextDrawCreate(378.000000, 187.000000, "ld_bum:bum2");
	TextDrawFont(PhoneTD[5], 4);
	TextDrawLetterSize(PhoneTD[5], 0.600000, 2.000000);
	TextDrawTextSize(PhoneTD[5], 114.500000, 189.000000);
	TextDrawSetOutline(PhoneTD[5], 1);
	TextDrawSetShadow(PhoneTD[5], 0);
	TextDrawAlignment(PhoneTD[5], 1);
	TextDrawColor(PhoneTD[5], -1);
	TextDrawBackgroundColor(PhoneTD[5], 255);
	TextDrawBoxColor(PhoneTD[5], 50);
	TextDrawUseBox(PhoneTD[5], 1);
	TextDrawSetProportional(PhoneTD[5], 1);
	TextDrawSetSelectable(PhoneTD[5], 0);

	phoneclosetd = TextDrawCreate(425.000000, 399.000000, "ld_pool:ball");
	TextDrawFont(phoneclosetd, 4);
	TextDrawLetterSize(phoneclosetd, 0.600000, 2.000000);
	TextDrawTextSize(phoneclosetd, 21.500000, 23.000000);
	TextDrawSetOutline(phoneclosetd, 1);
	TextDrawSetShadow(phoneclosetd, 0);
	TextDrawAlignment(phoneclosetd, 1);
	TextDrawColor(phoneclosetd, 1296911871);
	TextDrawBackgroundColor(phoneclosetd, 255);
	TextDrawBoxColor(phoneclosetd, 1296911666);
	TextDrawUseBox(phoneclosetd, 1);
	TextDrawSetProportional(phoneclosetd, 1);
	TextDrawSetSelectable(phoneclosetd, 1);

	PhoneTD[6] = TextDrawCreate(408.000000, 175.000000, "PHONE");
	TextDrawFont(PhoneTD[6], 1);
	TextDrawLetterSize(PhoneTD[6], 0.258332, 0.699998);
	TextDrawTextSize(PhoneTD[6], 611.000000, -194.500000);
	TextDrawSetOutline(PhoneTD[6], 1);
	TextDrawSetShadow(PhoneTD[6], 0);
	TextDrawAlignment(PhoneTD[6], 1);
	TextDrawColor(PhoneTD[6], -1);
	TextDrawBackgroundColor(PhoneTD[6], 255);
	TextDrawBoxColor(PhoneTD[6], 50);
	TextDrawUseBox(PhoneTD[6], 0);
	TextDrawSetProportional(PhoneTD[6], 1);
	TextDrawSetSelectable(PhoneTD[6], 0);

	PhoneTD[7] = TextDrawCreate(480.000000, 176.000000, "ld_pool:ball");
	TextDrawFont(PhoneTD[7], 4);
	TextDrawLetterSize(PhoneTD[7], 0.600000, 2.000000);
	TextDrawTextSize(PhoneTD[7], 4.000000, 5.500000);
	TextDrawSetOutline(PhoneTD[7], 1);
	TextDrawSetShadow(PhoneTD[7], 0);
	TextDrawAlignment(PhoneTD[7], 1);
	TextDrawColor(PhoneTD[7], 1296911871);
	TextDrawBackgroundColor(PhoneTD[7], 255);
	TextDrawBoxColor(PhoneTD[7], 1296911666);
	TextDrawUseBox(PhoneTD[7], 1);
	TextDrawSetProportional(PhoneTD[7], 1);
	TextDrawSetSelectable(PhoneTD[7], 0);

	PhoneTD[8] = TextDrawCreate(376.000000, 413.000000, "ld_pool:ball");
	TextDrawFont(PhoneTD[8], 4);
	TextDrawLetterSize(PhoneTD[8], 0.600000, 2.000000);
	TextDrawTextSize(PhoneTD[8], 10.000000, 10.000000);
	TextDrawSetOutline(PhoneTD[8], 1);
	TextDrawSetShadow(PhoneTD[8], 0);
	TextDrawAlignment(PhoneTD[8], 1);
	TextDrawColor(PhoneTD[8], 255);
	TextDrawBackgroundColor(PhoneTD[8], 255);
	TextDrawBoxColor(PhoneTD[8], 50);
	TextDrawUseBox(PhoneTD[8], 1);
	TextDrawSetProportional(PhoneTD[8], 1);
	TextDrawSetSelectable(PhoneTD[8], 0);

	PhoneTD[9] = TextDrawCreate(484.000000, 413.000000, "ld_pool:ball");
	TextDrawFont(PhoneTD[9], 4);
	TextDrawLetterSize(PhoneTD[9], 0.600000, 2.000000);
	TextDrawTextSize(PhoneTD[9], 10.000000, 10.000000);
	TextDrawSetOutline(PhoneTD[9], 1);
	TextDrawSetShadow(PhoneTD[9], 0);
	TextDrawAlignment(PhoneTD[9], 1);
	TextDrawColor(PhoneTD[9], 255);
	TextDrawBackgroundColor(PhoneTD[9], 255);
	TextDrawBoxColor(PhoneTD[9], 50);
	TextDrawUseBox(PhoneTD[9], 1);
	TextDrawSetProportional(PhoneTD[9], 1);
	TextDrawSetSelectable(PhoneTD[9], 0);

	PhoneTD[10] = TextDrawCreate(435.000000, 188.000000, "_");
	TextDrawFont(PhoneTD[10], 1);
	TextDrawLetterSize(PhoneTD[10], 0.600000, 0.650004);
	TextDrawTextSize(PhoneTD[10], 298.500000, 111.500000);
	TextDrawSetOutline(PhoneTD[10], 1);
	TextDrawSetShadow(PhoneTD[10], 0);
	TextDrawAlignment(PhoneTD[10], 2);
	TextDrawColor(PhoneTD[10], -1);
	TextDrawBackgroundColor(PhoneTD[10], 255);
	TextDrawBoxColor(PhoneTD[10], 1296911871);
	TextDrawUseBox(PhoneTD[10], 1);
	TextDrawSetProportional(PhoneTD[10], 1);
	TextDrawSetSelectable(PhoneTD[10], 0);

	PhoneTD[11] = TextDrawCreate(380.000000, 185.000000, "5G____________00:00");
	TextDrawFont(PhoneTD[11], 2);
	TextDrawLetterSize(PhoneTD[11], 0.333332, 1.049999);
	TextDrawTextSize(PhoneTD[11], 400.000000, 17.000000);
	TextDrawSetOutline(PhoneTD[11], 1);
	TextDrawSetShadow(PhoneTD[11], 0);
	TextDrawAlignment(PhoneTD[11], 1);
	TextDrawColor(PhoneTD[11], -1);
	TextDrawBackgroundColor(PhoneTD[11], 255);
	TextDrawBoxColor(PhoneTD[11], 50);
	TextDrawUseBox(PhoneTD[11], 0);
	TextDrawSetProportional(PhoneTD[11], 1);
	TextDrawSetSelectable(PhoneTD[11], 0);

	PhoneTD[12] = TextDrawCreate(435.000000, 378.000000, "_");
	TextDrawFont(PhoneTD[12], 1);
	TextDrawLetterSize(PhoneTD[12], 0.600000, 2.250004);
	TextDrawTextSize(PhoneTD[12], 298.500000, 111.500000);
	TextDrawSetOutline(PhoneTD[12], 1);
	TextDrawSetShadow(PhoneTD[12], 0);
	TextDrawAlignment(PhoneTD[12], 2);
	TextDrawColor(PhoneTD[12], -1);
	TextDrawBackgroundColor(PhoneTD[12], 255);
	TextDrawBoxColor(PhoneTD[12], 1296911871);
	TextDrawUseBox(PhoneTD[12], 1);
	TextDrawSetProportional(PhoneTD[12], 1);
	TextDrawSetSelectable(PhoneTD[12], 0);

	PhoneTD[13] = TextDrawCreate(428.000000, 376.000000, "...~n~...~n~...");
	TextDrawFont(PhoneTD[13], 2);
	TextDrawLetterSize(PhoneTD[13], 0.529165, 0.750000);
	TextDrawTextSize(PhoneTD[13], 400.000000, 17.000000);
	TextDrawSetOutline(PhoneTD[13], 1);
	TextDrawSetShadow(PhoneTD[13], 0);
	TextDrawAlignment(PhoneTD[13], 1);
	TextDrawColor(PhoneTD[13], -1);
	TextDrawBackgroundColor(PhoneTD[13], 255);
	TextDrawBoxColor(PhoneTD[13], 50);
	TextDrawUseBox(PhoneTD[13], 0);
	TextDrawSetProportional(PhoneTD[13], 1);
	TextDrawSetSelectable(PhoneTD[13], 0);

	mesaagetd = TextDrawCreate(389.000000, 208.000000, "ld_chat:goodcha");
	TextDrawFont(mesaagetd, 4);
	TextDrawLetterSize(mesaagetd, 0.600000, 2.000000);
	TextDrawTextSize(mesaagetd, 20.000000, 18.500000);
	TextDrawSetOutline(mesaagetd, 1);
	TextDrawSetShadow(mesaagetd, 0);
	TextDrawAlignment(mesaagetd, 1);
	TextDrawColor(mesaagetd, -1);
	TextDrawBackgroundColor(mesaagetd, 255);
	TextDrawBoxColor(mesaagetd, 50);
	TextDrawUseBox(mesaagetd, 1);
	TextDrawSetProportional(mesaagetd, 1);
	TextDrawSetSelectable(mesaagetd, 1);

	PhoneTD[14] = TextDrawCreate(381.000000, 228.000000, "send message");
	TextDrawFont(PhoneTD[14], 2);
	TextDrawLetterSize(PhoneTD[14], 0.112499, 0.800000);
	TextDrawTextSize(PhoneTD[14], 490.000000, 17.000000);
	TextDrawSetOutline(PhoneTD[14], 1);
	TextDrawSetShadow(PhoneTD[14], 0);
	TextDrawAlignment(PhoneTD[14], 1);
	TextDrawColor(PhoneTD[14], -1);
	TextDrawBackgroundColor(PhoneTD[14], 255);
	TextDrawBoxColor(PhoneTD[14], 50);
	TextDrawUseBox(PhoneTD[14], 0);
	TextDrawSetProportional(PhoneTD[14], 1);
	TextDrawSetSelectable(PhoneTD[14], 0);

	contactstd = TextDrawCreate(455.000000, 208.000000, "HUD:radar_gangy");
	TextDrawFont(contactstd, 4);
	TextDrawLetterSize(contactstd, 0.600000, 2.000000);
	TextDrawTextSize(contactstd, 20.000000, 18.500000);
	TextDrawSetOutline(contactstd, 1);
	TextDrawSetShadow(contactstd, 0);
	TextDrawAlignment(contactstd, 1);
	TextDrawColor(contactstd, -1);
	TextDrawBackgroundColor(contactstd, 255);
	TextDrawBoxColor(contactstd, 50);
	TextDrawUseBox(contactstd, 1);
	TextDrawSetProportional(contactstd, 1);
	TextDrawSetSelectable(contactstd, 1);

	PhoneTD[15] = TextDrawCreate(454.000000, 228.000000, "CONTACTS");
	TextDrawFont(PhoneTD[15], 2);
	TextDrawLetterSize(PhoneTD[15], 0.112499, 0.800000);
	TextDrawTextSize(PhoneTD[15], 490.000000, 17.000000);
	TextDrawSetOutline(PhoneTD[15], 1);
	TextDrawSetShadow(PhoneTD[15], 0);
	TextDrawAlignment(PhoneTD[15], 1);
	TextDrawColor(PhoneTD[15], -1);
	TextDrawBackgroundColor(PhoneTD[15], 255);
	TextDrawBoxColor(PhoneTD[15], 50);
	TextDrawUseBox(PhoneTD[15], 0);
	TextDrawSetProportional(PhoneTD[15], 1);
	TextDrawSetSelectable(PhoneTD[15], 0);

	calltd = TextDrawCreate(455.000000, 269.000000, "HUD:radar_catalinapink");
	TextDrawFont(calltd, 4);
	TextDrawLetterSize(calltd, 0.600000, 2.000000);
	TextDrawTextSize(calltd, 20.000000, 18.500000);
	TextDrawSetOutline(calltd, 1);
	TextDrawSetShadow(calltd, 0);
	TextDrawAlignment(calltd, 1);
	TextDrawColor(calltd, -1);
	TextDrawBackgroundColor(calltd, 255);
	TextDrawBoxColor(calltd, 50);
	TextDrawUseBox(calltd, 1);
	TextDrawSetProportional(calltd, 1);
	TextDrawSetSelectable(calltd, 1);

	PhoneTD[16] = TextDrawCreate(459.000000, 290.000000, "CALL");
	TextDrawFont(PhoneTD[16], 2);
	TextDrawLetterSize(PhoneTD[16], 0.145833, 1.149999);
	TextDrawTextSize(PhoneTD[16], 490.000000, 17.000000);
	TextDrawSetOutline(PhoneTD[16], 1);
	TextDrawSetShadow(PhoneTD[16], 0);
	TextDrawAlignment(PhoneTD[16], 1);
	TextDrawColor(PhoneTD[16], -1);
	TextDrawBackgroundColor(PhoneTD[16], 255);
	TextDrawBoxColor(PhoneTD[16], 50);
	TextDrawUseBox(PhoneTD[16], 0);
	TextDrawSetProportional(PhoneTD[16], 1);
	TextDrawSetSelectable(PhoneTD[16], 0);

	PhoneTD[17] = TextDrawCreate(391.000000, 290.000000, "BANK");
	TextDrawFont(PhoneTD[17], 2);
	TextDrawLetterSize(PhoneTD[17], 0.145833, 1.149999);
	TextDrawTextSize(PhoneTD[17], 490.000000, 17.000000);
	TextDrawSetOutline(PhoneTD[17], 1);
	TextDrawSetShadow(PhoneTD[17], 0);
	TextDrawAlignment(PhoneTD[17], 1);
	TextDrawColor(PhoneTD[17], -1);
	TextDrawBackgroundColor(PhoneTD[17], 255);
	TextDrawBoxColor(PhoneTD[17], 50);
	TextDrawUseBox(PhoneTD[17], 0);
	TextDrawSetProportional(PhoneTD[17], 1);
	TextDrawSetSelectable(PhoneTD[17], 0);

	PhoneTD[18] = TextDrawCreate(457.000000, 340.000000, "MUSIC");
	TextDrawFont(PhoneTD[18], 2);
	TextDrawLetterSize(PhoneTD[18], 0.145833, 1.149999);
	TextDrawTextSize(PhoneTD[18], 490.000000, 17.000000);
	TextDrawSetOutline(PhoneTD[18], 1);
	TextDrawSetShadow(PhoneTD[18], 0);
	TextDrawAlignment(PhoneTD[18], 1);
	TextDrawColor(PhoneTD[18], -1);
	TextDrawBackgroundColor(PhoneTD[18], 255);
	TextDrawBoxColor(PhoneTD[18], 50);
	TextDrawUseBox(PhoneTD[18], 0);
	TextDrawSetProportional(PhoneTD[18], 1);
	TextDrawSetSelectable(PhoneTD[18], 0);

	banktd = TextDrawCreate(389.000000, 269.000000, "HUD:radar_cash");
	TextDrawFont(banktd, 4);
	TextDrawLetterSize(banktd, 0.600000, 2.000000);
	TextDrawTextSize(banktd, 20.000000, 18.500000);
	TextDrawSetOutline(banktd, 1);
	TextDrawSetShadow(banktd, 0);
	TextDrawAlignment(banktd, 1);
	TextDrawColor(banktd, -1);
	TextDrawBackgroundColor(banktd, 255);
	TextDrawBoxColor(banktd, 50);
	TextDrawUseBox(banktd, 1);
	TextDrawSetProportional(banktd, 1);
	TextDrawSetSelectable(banktd, 1);

	musictd = TextDrawCreate(455.000000, 318.000000, "HUD:radar_datedisco");
	TextDrawFont(musictd, 4);
	TextDrawLetterSize(musictd, 0.600000, 2.000000);
	TextDrawTextSize(musictd, 20.000000, 18.500000);
	TextDrawSetOutline(musictd, 1);
	TextDrawSetShadow(musictd, 0);
	TextDrawAlignment(musictd, 1);
	TextDrawColor(musictd, -1);
	TextDrawBackgroundColor(musictd, 255);
	TextDrawBoxColor(musictd, 50);
	TextDrawUseBox(musictd, 1);
	TextDrawSetProportional(musictd, 1);
	TextDrawSetSelectable(musictd, 1);

	twittertd = TextDrawCreate(393.000000, 318.000000, "T");
	TextDrawFont(twittertd, 3);
	TextDrawLetterSize(twittertd, 0.454167, 1.999999);
	TextDrawTextSize(twittertd, 403.500000, 17.000000);
	TextDrawSetOutline(twittertd, 1);
	TextDrawSetShadow(twittertd, 0);
	TextDrawAlignment(twittertd, 1);
	TextDrawColor(twittertd, 16777215);
	TextDrawBackgroundColor(twittertd, -1);
	TextDrawBoxColor(twittertd, 50);
	TextDrawUseBox(twittertd, 0);
	TextDrawSetProportional(twittertd, 1);
	TextDrawSetSelectable(twittertd, 1);

	PhoneAtmTD[0] = TextDrawCreate(319.000000, 178.000000, "_");
	TextDrawFont(PhoneAtmTD[0], 1);
	TextDrawLetterSize(PhoneAtmTD[0], 0.566666, 14.550000);
	TextDrawTextSize(PhoneAtmTD[0], 298.500000, 225.000000);
	TextDrawSetOutline(PhoneAtmTD[0], 1);
	TextDrawSetShadow(PhoneAtmTD[0], 0);
	TextDrawAlignment(PhoneAtmTD[0], 2);
	TextDrawColor(PhoneAtmTD[0], -1);
	TextDrawBackgroundColor(PhoneAtmTD[0], 255);
	TextDrawBoxColor(PhoneAtmTD[0], -16776961);
	TextDrawUseBox(PhoneAtmTD[0], 1);
	TextDrawSetProportional(PhoneAtmTD[0], 1);
	TextDrawSetSelectable(PhoneAtmTD[0], 0);

	PhoneAtmTD[1] = TextDrawCreate(319.000000, 182.000000, "_");
	TextDrawFont(PhoneAtmTD[1], 1);
	TextDrawLetterSize(PhoneAtmTD[1], 0.566666, 13.749997);
	TextDrawTextSize(PhoneAtmTD[1], 298.500000, 225.000000);
	TextDrawSetOutline(PhoneAtmTD[1], 1);
	TextDrawSetShadow(PhoneAtmTD[1], 0);
	TextDrawAlignment(PhoneAtmTD[1], 2);
	TextDrawColor(PhoneAtmTD[1], -1);
	TextDrawBackgroundColor(PhoneAtmTD[1], 255);
	TextDrawBoxColor(PhoneAtmTD[1], 255);
	TextDrawUseBox(PhoneAtmTD[1], 1);
	TextDrawSetProportional(PhoneAtmTD[1], 1);
	TextDrawSetSelectable(PhoneAtmTD[1], 0);

	PhoneAtmTD[2] = TextDrawCreate(245.000000, 226.000000, "_");
	TextDrawFont(PhoneAtmTD[2], 1);
	TextDrawLetterSize(PhoneAtmTD[2], 0.600000, 3.500001);
	TextDrawTextSize(PhoneAtmTD[2], 298.500000, 76.000000);
	TextDrawSetOutline(PhoneAtmTD[2], 1);
	TextDrawSetShadow(PhoneAtmTD[2], 0);
	TextDrawAlignment(PhoneAtmTD[2], 2);
	TextDrawColor(PhoneAtmTD[2], -1);
	TextDrawBackgroundColor(PhoneAtmTD[2], 255);
	TextDrawBoxColor(PhoneAtmTD[2], -1);
	TextDrawUseBox(PhoneAtmTD[2], 1);
	TextDrawSetProportional(PhoneAtmTD[2], 1);
	TextDrawSetSelectable(PhoneAtmTD[2], 0);

	PhoneAtmTD[3] = TextDrawCreate(393.000000, 226.000000, "_");
	TextDrawFont(PhoneAtmTD[3], 1);
	TextDrawLetterSize(PhoneAtmTD[3], 0.600000, 3.500001);
	TextDrawTextSize(PhoneAtmTD[3], 298.500000, 76.000000);
	TextDrawSetOutline(PhoneAtmTD[3], 1);
	TextDrawSetShadow(PhoneAtmTD[3], 0);
	TextDrawAlignment(PhoneAtmTD[3], 2);
	TextDrawColor(PhoneAtmTD[3], -1);
	TextDrawBackgroundColor(PhoneAtmTD[3], 255);
	TextDrawBoxColor(PhoneAtmTD[3], -1);
	TextDrawUseBox(PhoneAtmTD[3], 1);
	TextDrawSetProportional(PhoneAtmTD[3], 1);
	TextDrawSetSelectable(PhoneAtmTD[3], 0);

	PhoneAtmTD[4] = TextDrawCreate(236.000000, 180.000000, "Bank");
	TextDrawFont(PhoneAtmTD[4], 3);
	TextDrawLetterSize(PhoneAtmTD[4], 0.600000, 2.000000);
	TextDrawTextSize(PhoneAtmTD[4], 455.000000, -13.000000);
	TextDrawSetOutline(PhoneAtmTD[4], 1);
	TextDrawSetShadow(PhoneAtmTD[4], 0);
	TextDrawAlignment(PhoneAtmTD[4], 1);
	TextDrawColor(PhoneAtmTD[4], -1);
	TextDrawBackgroundColor(PhoneAtmTD[4], 255);
	TextDrawBoxColor(PhoneAtmTD[4], 50);
	TextDrawUseBox(PhoneAtmTD[4], 0);
	TextDrawSetProportional(PhoneAtmTD[4], 1);
	TextDrawSetSelectable(PhoneAtmTD[4], 0);

	PhoneAtmTransfer = TextDrawCreate(211.000000, 235.000000, "TRANSFER");
	TextDrawFont(PhoneAtmTransfer, 1);
	TextDrawLetterSize(PhoneAtmTransfer, 0.391666, 1.400000);
	TextDrawTextSize(PhoneAtmTransfer, 348.500000, 5.000000);
	TextDrawSetOutline(PhoneAtmTransfer, 1);
	TextDrawSetShadow(PhoneAtmTransfer, 0);
	TextDrawAlignment(PhoneAtmTransfer, 1);
	TextDrawColor(PhoneAtmTransfer, -1);
	TextDrawBackgroundColor(PhoneAtmTransfer, 255);
	TextDrawBoxColor(PhoneAtmTransfer, 50);
	TextDrawUseBox(PhoneAtmTransfer, 0);
	TextDrawSetProportional(PhoneAtmTransfer, 1);
	TextDrawSetSelectable(PhoneAtmTransfer, 1);

	PhoneAtmExit = TextDrawCreate(378.000000, 235.000000, "EXIT");
	TextDrawFont(PhoneAtmExit, 1);
	TextDrawLetterSize(PhoneAtmExit, 0.391666, 1.400000);
	TextDrawTextSize(PhoneAtmExit, 393.500000, 9.500000);
	TextDrawSetOutline(PhoneAtmExit, 1);
	TextDrawSetShadow(PhoneAtmExit, 0);
	TextDrawAlignment(PhoneAtmExit, 1);
	TextDrawColor(PhoneAtmExit, -1);
	TextDrawBackgroundColor(PhoneAtmExit, 255);
	TextDrawBoxColor(PhoneAtmExit, 50);
	TextDrawUseBox(PhoneAtmExit, 0);
	TextDrawSetProportional(PhoneAtmExit, 1);
	TextDrawSetSelectable(PhoneAtmExit, 1);
	
	// ATM TEXTDRAWS
	ATMTD[0] = TextDrawCreate(311.000000, 150.000000, "_");
	TextDrawFont(ATMTD[0], 1);
	TextDrawLetterSize(ATMTD[0], 0.600000, 19.350002);
	TextDrawTextSize(ATMTD[0], 298.500000, 320.500000);
	TextDrawSetOutline(ATMTD[0], 1);
	TextDrawSetShadow(ATMTD[0], 0);
	TextDrawAlignment(ATMTD[0], 2);
	TextDrawColor(ATMTD[0], -1);
	TextDrawBackgroundColor(ATMTD[0], 255);
	TextDrawBoxColor(ATMTD[0], 255);
	TextDrawUseBox(ATMTD[0], 1);
	TextDrawSetProportional(ATMTD[0], 1);
	TextDrawSetSelectable(ATMTD[0], 0);

	ATMTD[1] = TextDrawCreate(311.000000, 156.000000, "_");
	TextDrawFont(ATMTD[1], 1);
	TextDrawLetterSize(ATMTD[1], 0.600000, 17.850002);
	TextDrawTextSize(ATMTD[1], 298.500000, 300.500000);
	TextDrawSetOutline(ATMTD[1], 1);
	TextDrawSetShadow(ATMTD[1], 0);
	TextDrawAlignment(ATMTD[1], 2);
	TextDrawColor(ATMTD[1], -1);
	TextDrawBackgroundColor(ATMTD[1], 255);
	TextDrawBoxColor(ATMTD[1], 1296911871);
	TextDrawUseBox(ATMTD[1], 1);
	TextDrawSetProportional(ATMTD[1], 1);
	TextDrawSetSelectable(ATMTD[1], 0);

	ATMTD[2] = TextDrawCreate(311.000000, 160.000000, "_");
	TextDrawFont(ATMTD[2], 1);
	TextDrawLetterSize(ATMTD[2], 0.600000, 1.750001);
	TextDrawTextSize(ATMTD[2], 298.500000, 303.500000);
	TextDrawSetOutline(ATMTD[2], 1);
	TextDrawSetShadow(ATMTD[2], 0);
	TextDrawAlignment(ATMTD[2], 2);
	TextDrawColor(ATMTD[2], -1);
	TextDrawBackgroundColor(ATMTD[2], 255);
	TextDrawBoxColor(ATMTD[2], 175);
	TextDrawUseBox(ATMTD[2], 1);
	TextDrawSetProportional(ATMTD[2], 1);
	TextDrawSetSelectable(ATMTD[2], 0);

	ATMTD[3] = TextDrawCreate(311.000000, 186.000000, "_");
	TextDrawFont(ATMTD[3], 1);
	TextDrawLetterSize(ATMTD[3], 0.600000, 1.750001);
	TextDrawTextSize(ATMTD[3], 298.500000, 303.500000);
	TextDrawSetOutline(ATMTD[3], 1);
	TextDrawSetShadow(ATMTD[3], 0);
	TextDrawAlignment(ATMTD[3], 2);
	TextDrawColor(ATMTD[3], -1);
	TextDrawBackgroundColor(ATMTD[3], 255);
	TextDrawBoxColor(ATMTD[3], 175);
	TextDrawUseBox(ATMTD[3], 1);
	TextDrawSetProportional(ATMTD[3], 1);
	TextDrawSetSelectable(ATMTD[3], 0);

	ATMTD[4] = TextDrawCreate(164.000000, 227.000000, "ld_pool:ball");
	TextDrawFont(ATMTD[4], 4);
	TextDrawLetterSize(ATMTD[4], 0.600000, 2.000000);
	TextDrawTextSize(ATMTD[4], 77.000000, 87.000000);
	TextDrawSetOutline(ATMTD[4], 1);
	TextDrawSetShadow(ATMTD[4], 0);
	TextDrawAlignment(ATMTD[4], 1);
	TextDrawColor(ATMTD[4], -1);
	TextDrawBackgroundColor(ATMTD[4], 255);
	TextDrawBoxColor(ATMTD[4], 50);
	TextDrawUseBox(ATMTD[4], 0);
	TextDrawSetProportional(ATMTD[4], 1);
	TextDrawSetSelectable(ATMTD[4], 0);

	ATMTD[5] = TextDrawCreate(273.000000, 227.000000, "ld_pool:ball");
	TextDrawFont(ATMTD[5], 4);
	TextDrawLetterSize(ATMTD[5], 0.600000, 2.000000);
	TextDrawTextSize(ATMTD[5], 77.000000, 87.000000);
	TextDrawSetOutline(ATMTD[5], 1);
	TextDrawSetShadow(ATMTD[5], 0);
	TextDrawAlignment(ATMTD[5], 1);
	TextDrawColor(ATMTD[5], -1);
	TextDrawBackgroundColor(ATMTD[5], 255);
	TextDrawBoxColor(ATMTD[5], 50);
	TextDrawUseBox(ATMTD[5], 1);
	TextDrawSetProportional(ATMTD[5], 1);
	TextDrawSetSelectable(ATMTD[5], 0);

	ATMTD[6] = TextDrawCreate(375.000000, 227.000000, "ld_pool:ball");
	TextDrawFont(ATMTD[6], 4);
	TextDrawLetterSize(ATMTD[6], 0.600000, 2.000000);
	TextDrawTextSize(ATMTD[6], 77.000000, 87.000000);
	TextDrawSetOutline(ATMTD[6], 1);
	TextDrawSetShadow(ATMTD[6], 0);
	TextDrawAlignment(ATMTD[6], 1);
	TextDrawColor(ATMTD[6], -1);
	TextDrawBackgroundColor(ATMTD[6], 255);
	TextDrawBoxColor(ATMTD[6], 50);
	TextDrawUseBox(ATMTD[6], 1);
	TextDrawSetProportional(ATMTD[6], 1);
	TextDrawSetSelectable(ATMTD[6], 0);

	withdrawtd = TextDrawCreate(169.000000, 260.000000, "WITHDRAW");
	TextDrawFont(withdrawtd, 1);
	TextDrawLetterSize(withdrawtd, 0.362500, 2.000000);
	TextDrawTextSize(withdrawtd, 242.500000, 32.000000);
	TextDrawSetOutline(withdrawtd, 1);
	TextDrawSetShadow(withdrawtd, 0);
	TextDrawAlignment(withdrawtd, 1);
	TextDrawColor(withdrawtd, -1);
	TextDrawBackgroundColor(withdrawtd, 255);
	TextDrawBoxColor(withdrawtd, 50);
	TextDrawUseBox(withdrawtd, 0);
	TextDrawSetProportional(withdrawtd, 1);
	TextDrawSetSelectable(withdrawtd, 1);

	deposittd = TextDrawCreate(286.000000, 260.000000, "DEPOSIT");
	TextDrawFont(deposittd, 1);
	TextDrawLetterSize(deposittd, 0.362500, 2.000000);
	TextDrawTextSize(deposittd, 338.500000, 122.500000);
	TextDrawSetOutline(deposittd, 1);
	TextDrawSetShadow(deposittd, 0);
	TextDrawAlignment(deposittd, 1);
	TextDrawColor(deposittd, -1);
	TextDrawBackgroundColor(deposittd, 255);
	TextDrawBoxColor(deposittd, 50);
	TextDrawUseBox(deposittd, 0);
	TextDrawSetProportional(deposittd, 1);
	TextDrawSetSelectable(deposittd, 1);

	transfertd = TextDrawCreate(383.000000, 260.000000, "TRANSFER");
	TextDrawFont(transfertd, 1);
	TextDrawLetterSize(transfertd, 0.362500, 2.000000);
	TextDrawTextSize(transfertd, 447.000000, 226.000000);
	TextDrawSetOutline(transfertd, 1);
	TextDrawSetShadow(transfertd, 0);
	TextDrawAlignment(transfertd, 1);
	TextDrawColor(transfertd, -1);
	TextDrawBackgroundColor(transfertd, 255);
	TextDrawBoxColor(transfertd, 50);
	TextDrawUseBox(transfertd, 0);
	TextDrawSetProportional(transfertd, 1);
	TextDrawSetSelectable(transfertd, 1);
	
	// Animation textdraw
	AnimationTD = TextDrawCreate(261.000000, 395.000000, "Press ~r~Y~w~ to stop animation");
	TextDrawFont(AnimationTD, 2);
	TextDrawLetterSize(AnimationTD, 0.199996, 1.649996);
	TextDrawTextSize(AnimationTD, 636.500000, -174.500000);
	TextDrawSetOutline(AnimationTD, 1);
	TextDrawSetShadow(AnimationTD, 0);
	TextDrawAlignment(AnimationTD, 1);
	TextDrawColor(AnimationTD, -1);
	TextDrawBackgroundColor(AnimationTD, 255);
	TextDrawBoxColor(AnimationTD, 50);
	TextDrawUseBox(AnimationTD, 0);
	TextDrawSetProportional(AnimationTD, 1);
	TextDrawSetSelectable(AnimationTD, 0);

	// Blood Effects
    Blood[0] = TextDrawCreate(86.666648, 121.814811, "particle:bloodpool_64");
    TextDrawLetterSize(Blood[0], 0.000000, 0.000000);
    TextDrawTextSize(Blood[0], 24.000000, 34.000000);
    TextDrawAlignment(Blood[0], 1);
    TextDrawColor(Blood[0], -1);
    TextDrawSetShadow(Blood[0], 0);
    TextDrawSetOutline(Blood[0], 0);
    TextDrawBackgroundColor(Blood[0], 255);
    TextDrawFont(Blood[0], 4);
    TextDrawSetProportional(Blood[0], 0);
    TextDrawSetShadow(Blood[0], 0);

    Blood[1] = TextDrawCreate(477.333312, 246.674102, "particle:bloodpool_64");
    TextDrawLetterSize(Blood[1], 0.000000, 0.000000);
    TextDrawTextSize(Blood[1], 36.000000, 41.000000);
    TextDrawAlignment(Blood[1], 1);
    TextDrawColor(Blood[1], -1);
    TextDrawSetShadow(Blood[1], 0);
    TextDrawSetOutline(Blood[1], 0);
    TextDrawBackgroundColor(Blood[1], 255);
    TextDrawFont(Blood[1], 4);
    TextDrawSetProportional(Blood[1], 0);
    TextDrawSetShadow(Blood[1], 0);

    Blood[2] = TextDrawCreate(24.000041, 249.992660, "particle:bloodpool_64");
    TextDrawLetterSize(Blood[2], 0.000000, 0.000000);
    TextDrawTextSize(Blood[2], 70.000000, 57.000000);
    TextDrawAlignment(Blood[2], 1);
    TextDrawColor(Blood[2], -1);
    TextDrawSetShadow(Blood[2], 0);
    TextDrawSetOutline(Blood[2], 0);
    TextDrawBackgroundColor(Blood[2], 255);
    TextDrawFont(Blood[2], 4);
    TextDrawSetProportional(Blood[2], 0);
    TextDrawSetShadow(Blood[2], 0);

    Blood[3] = TextDrawCreate(546.333374, 323.414916, "particle:bloodpool_64");
    TextDrawLetterSize(Blood[3], 0.000000, 0.000000);
    TextDrawTextSize(Blood[3], 70.000000, 57.000000);
    TextDrawAlignment(Blood[3], 1);
    TextDrawColor(Blood[3], -1);
    TextDrawSetShadow(Blood[3], 0);
    TextDrawSetOutline(Blood[3], 0);
    TextDrawBackgroundColor(Blood[3], 255);
    TextDrawFont(Blood[3], 4);
    TextDrawSetProportional(Blood[3], 0);
    TextDrawSetShadow(Blood[3], 0);

    Blood[4] = TextDrawCreate(276.666717, 340.007568, "particle:bloodpool_64");
    TextDrawLetterSize(Blood[4], 0.000000, 0.000000);
    TextDrawTextSize(Blood[4], 70.000000, 57.000000);
    TextDrawAlignment(Blood[4], 1);
    TextDrawColor(Blood[4], -1);
    TextDrawSetShadow(Blood[4], 0);
    TextDrawSetOutline(Blood[4], 0);
    TextDrawBackgroundColor(Blood[4], 255);
    TextDrawFont(Blood[4], 4);
    TextDrawSetProportional(Blood[4], 0);
    TextDrawSetShadow(Blood[4], 0);

    Blood[5] = TextDrawCreate(442.666748, 12.718672, "particle:bloodpool_64");
    TextDrawLetterSize(Blood[5], 0.000000, 0.000000);
    TextDrawTextSize(Blood[5], 17.000000, 25.000000);
    TextDrawAlignment(Blood[5], 1);
    TextDrawColor(Blood[5], -1);
    TextDrawSetShadow(Blood[5], 0);
    TextDrawSetOutline(Blood[5], 0);
    TextDrawBackgroundColor(Blood[5], 255);
    TextDrawFont(Blood[5], 4);
    TextDrawSetProportional(Blood[5], 0);
    TextDrawSetShadow(Blood[5], 0);

    Blood[6] = TextDrawCreate(201.666732, 16.866807, "particle:bloodpool_64");
    TextDrawLetterSize(Blood[6], 0.000000, 0.000000);
    TextDrawTextSize(Blood[6], 48.000000, 49.000000);
    TextDrawAlignment(Blood[6], 1);
    TextDrawColor(Blood[6], -1);
    TextDrawSetShadow(Blood[6], 0);
    TextDrawSetOutline(Blood[6], 0);
    TextDrawBackgroundColor(Blood[6], 255);
    TextDrawFont(Blood[6], 4);
    TextDrawSetProportional(Blood[6], 0);
    TextDrawSetShadow(Blood[6], 0);

    Blood[7] = TextDrawCreate(117.000106, 148.777893, "particle:bloodpool_64");
    TextDrawLetterSize(Blood[7], 0.000000, 0.000000);
    TextDrawTextSize(Blood[7], 127.000000, 70.000000);
    TextDrawAlignment(Blood[7], 1);
    TextDrawColor(Blood[7], -1);
    TextDrawSetShadow(Blood[7], 0);
    TextDrawSetOutline(Blood[7], 0);
    TextDrawBackgroundColor(Blood[7], 255);
    TextDrawFont(Blood[7], 4);
    TextDrawSetProportional(Blood[7], 0);
    TextDrawSetShadow(Blood[7], 0);

    Blood[8] = TextDrawCreate(428.666717, 118.911254, "particle:bloodpool_64");
    TextDrawLetterSize(Blood[8], 0.000000, 0.000000);
    TextDrawTextSize(Blood[8], 59.000000, 50.000000);
    TextDrawAlignment(Blood[8], 1);
    TextDrawColor(Blood[8], -1);
    TextDrawSetShadow(Blood[8], 0);
    TextDrawSetOutline(Blood[8], 0);
    TextDrawBackgroundColor(Blood[8], 255);
    TextDrawFont(Blood[8], 4);
    TextDrawSetProportional(Blood[8], 0);
    TextDrawSetShadow(Blood[8], 0);

	Border5 = CreateDynamicObject(968,51.067,-1286.589,13.659,0.000,-90.200,-54.806);
    Border6 = CreateDynamicObject(968,71.514,-1305.882,12.010,0.000,-89.399,-49.406);
    Border7 = CreateDynamicObject(968,514.546,468.370,18.759,0.000,90.000,38.485);
    Border8 = CreateDynamicObject(968,525.827,477.249,18.799,0.000,90.000,217.985);
    Border9 = CreateDynamicObject(968,-159.520,371.172,11.722,0.000,90.000,166.787);
    Border0 = CreateDynamicObject(968,-173.392,374.704,11.722,0.000,90.000,344.634);
    Border4 = CreateDynamicObject(968,55.194,-1522.403,4.809,0.000,-90.000,89.192);
    Border3 = CreateDynamicObject(968,53.587,-1541.730,4.809,0.000,-90.000,263.597);
	Border1 = CreateDynamicObject(968, 1813.34851, 813.63531, 10.66680,   0.00000, 270.00000, 0.00000);
	Border2 = CreateDynamicObject(968, 1780.06458, 802.22620, 10.66680,   0.00000, 270.00000, 900.00000);

    CreateDynamic3DTextLabel("Before you enter you need "GREEN"$500"GREY" to pass this gate\n"SVRCLR"(( Press 'Y' to open the toll gate. ))",COLOR_GREY, 52.789,-1538.231,5.003,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);
	CreateDynamic3DTextLabel("Before you enter you need "GREEN"$500"GREY" to pass this gate\n"SVRCLR"(( Press 'Y' to open the toll gate. ))",COLOR_GREY, 56.351,-1526.141,4.884,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);
	CreateDynamic3DTextLabel("Before you enter you need "GREEN"$500"GREY" to pass this gate\n"SVRCLR"(( Press 'Y' to open the toll gate. ))",COLOR_GREY, 1809.4454,811.5417,10.8997,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);
	CreateDynamic3DTextLabel("Before you enter you need "GREEN"$500"GREY" to pass this gate\n"SVRCLR"(( Press 'Y' to open the toll gate. ))",COLOR_GREY, 1783.6510,803.8441,11.0599,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);
	CreateDynamic3DTextLabel("Before you enter you need "GREEN"$500"GREY" to pass this gate\n"SVRCLR"(( Press 'Y' to open the toll gate. ))",COLOR_GREY, 50.1882,-1282.9015,14.0709,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);
	CreateDynamic3DTextLabel("Before you enter you need "GREEN"$500"GREY" to pass this gate\n"SVRCLR"(( Press 'Y' to open the toll gate. ))",COLOR_GREY, 68.1923,-1304.1959,12.4487,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);
	CreateDynamic3DTextLabel("Before you enter you need "GREEN"$500"GREY" to pass this gate\n"SVRCLR"(( Press 'Y' to open the toll gate. ))",COLOR_GREY, 517.2233,472.0292,18.9297,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);
	CreateDynamic3DTextLabel("Before you enter you need "GREEN"$500"GREY" to pass this gate\n"SVRCLR"(( Press 'Y' to open the toll gate. ))",COLOR_GREY, 523.5045,473.5910,18.9297,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);
	CreateDynamic3DTextLabel("Before you enter you need "GREEN"$500"GREY" to pass this gate\n"SVRCLR"(( Press 'Y' to open the toll gate. ))",COLOR_GREY, -169.2154,374.7297,12.0781,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);
	CreateDynamic3DTextLabel("Before you enter you need "GREEN"$500"GREY" to pass this gate\n"SVRCLR"(( Press 'Y' to open the toll gate. ))",COLOR_GREY, -163.9199,370.8330,12.0781,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);

    CreateDynamic3DTextLabel("Mechanic\n"SVRCLR"(( Type '/upgradevehicle' for car upgrades. ))",COLOR_GREY, 1002.9619,-1433.0162,14.7320,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);
	CreateDynamic3DTextLabel("Mechanic\n"SVRCLR"(( Type '/upgradevehicle' for car upgrades. ))",COLOR_GREY, 996.0955,-1432.9041,14.7320,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);
	CreateDynamic3DTextLabel("Mechanic\n"SVRCLR"(( Type '/tune' for tune upgrades. ))",COLOR_GREY, 989.3073,-1432.9618,14.7320,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);
	CreateDynamic3DTextLabel("Mechanic\n"SVRCLR"(( Type '/tune' for tune upgrades. ))",COLOR_GREY, 982.6109,-1433.0951,14.7320,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);

	CreateDynamic3DTextLabel("'/viplocker'\n"SVRCLR"(( To open the donator's locker. ))",COLOR_GREY,  2556.2113, 1403.7037, 7699.7641,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);

	gPrisonCells[0] = CreateDynamicObject(19302,1205.69995117,-1328.09997559,797.00000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[1] = CreateDynamicObject(19302,1205.69995117,-1331.30004883,797.00000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[2] = CreateDynamicObject(19302,1205.69995117,-1331.30004883,800.50000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[3] = CreateDynamicObject(19302,1205.69995117,-1328.09997559,800.50000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[4] = CreateDynamicObject(19302,1215.30004883,-1328.09997559,797.00000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[5] = CreateDynamicObject(19302,1215.30004883,-1331.30004883,797.00000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[6] = CreateDynamicObject(19302,1215.30004883,-1331.30004883,800.50000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[7] = CreateDynamicObject(19302,1215.30004883,-1328.09997559,800.50000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[8] = CreateDynamicObject(19302,1215.30004883,-1334.50000000,797.00000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[9] = CreateDynamicObject(19302,1215.29980469,-1337.69921875,797.00000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[10] = CreateDynamicObject(19302,1215.30004883,-1340.90002441,797.00000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[11] = CreateDynamicObject(19302,1215.30004883,-1340.90002441,800.50000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[12] = CreateDynamicObject(19302,1215.30004883,-1337.69995117,800.50000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[13] = CreateDynamicObject(19302,1215.30004883,-1334.50000000,800.50000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[14] = CreateDynamicObject(19302,1205.69995117,-1334.50000000,800.50000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[15] = CreateDynamicObject(19302,1205.69995117,-1337.69995117,800.50000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[16] = CreateDynamicObject(19302,1205.69995117,-1340.90002441,800.50000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[17] = CreateDynamicObject(19302,1205.69995117,-1334.50000000,797.00000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[18] = CreateDynamicObject(19302,1205.69995117,-1337.69995117,797.00000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[19] = CreateDynamicObject(19302,1205.69995117,-1340.90002441,797.00000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[20] = CreateDynamicObject(19302,1215.30004883,-1344.09997559,800.50000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[21] = CreateDynamicObject(19302,1215.30004883,-1344.09997559,797.00000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[22] = CreateDynamicObject(19302,1205.69995117,-1344.09997559,800.50000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[23] = CreateDynamicObject(19302,1205.69995117,-1344.09997559,797.00000000,0.00000000,0.00000000,90.00000000);

	for(new i = 0; i < 24; i ++)
	{
		SetDynamicObjectMaterial(gPrisonCells[i], 0, 19302, "pd_jail_door02", "pd_jail_door02", 0xFF000000);
	}
	// Hospital Garage Doors (Main)
	CreateDynamicObject(10149, 1150.004394, -1345.316284, 14.201147, 0.000000, 0.000000, 270.000000);
    CreateDynamicObject(10149, 2007.520874, -1408.116088, 16.992187, 0.000000, 0.000000, 0.000000);
    /*CreateDynamic3DTextLabel("/deliverpatient\nto drop off a patient.", COLOR_DOCTOR, 1141.6477, -1326.3889, 13.6398, 10.0);
    CreateDynamicPickup(1240, 1, 1141.6477, -1326.3889, 13.6398);
    CreateDynamic3DTextLabel("/deliverpatient\nto drop off a patient.", COLOR_DOCTOR, 2007.6256, -1410.2455, 16.9922, 10.0);
    CreateDynamicPickup(1240, 1, 2007.6256, -1410.2455, 16.9922);*/

	// Job Vehicles (Main)
	pizzaVehicles[0] = AddStaticVehicleEx(586, 978.7726, -1308.4243, 12.9222, 0.0000, 5, 1, 300); // bike 1
	pizzaVehicles[1] = AddStaticVehicleEx(586, 984.3414, -1308.1840, 12.9222, 0.0000, 5, 1, 300); // bike 2
	pizzaVehicles[2] = AddStaticVehicleEx(586, 1008.2693, -1308.2881, 12.9222, 0.0000, 5, 1, 300); // bike 3
	pizzaVehicles[3] = AddStaticVehicleEx(586, 1002.0175, -1308.2839, 12.9222, 0.0000, 5, 1, 300); // bike 4
	pizzaVehicles[4] = AddStaticVehicleEx(586, 989.5507, -1308.3434, 12.9222, 0.0000, 5, 1, 300); // bike 5
	pizzaVehicles[5] = AddStaticVehicleEx(586, 996.0358, -1308.3828, 12.9222, 3.0000, 5, 1, 300); // bike 6

	garbageVehicles[0] = AddStaticVehicleEx(408,2450.0818,-2117.0393,14.0948,359.3405,-1,-1,300); // Garbage 1
	garbageVehicles[1] = AddStaticVehicleEx(408,2456.0059,-2117.0317,14.0978,359.8398,-1,-1,300); // Garbage 2
	garbageVehicles[2] = AddStaticVehicleEx(408,2461.9404,-2116.9187,14.1033,1.3363,-1,-1,300); // Garbage 3
	garbageVehicles[3] = AddStaticVehicleEx(408,2467.7634,-2116.7227,14.1018,0.6403,-1,-1,300); // Garbage 4
	garbageVehicles[4] = AddStaticVehicleEx(408,2474.4385,-2116.6218,14.0943,2.2394,-1,-1,300); // Garbage 5
	garbageVehicles[5] = AddStaticVehicleEx(408,2480.3513,-2116.6707,14.0944,359.6030,-1,-1,300); // Garbage 6

    forkliftVehicles[0] = AddStaticVehicleEx(530, 2778.5310, -2425.0867, 13.3935, 0.0000, 6, 6, 600); // forklift 1
	forkliftVehicles[1] = AddStaticVehicleEx(530, 2778.6404, -2410.1257, 13.4024, 180.0000, 6, 6, 600); // forklift 2
	forkliftVehicles[2] = AddStaticVehicleEx(530, 2787.8252, -2425.3438, 13.3990, 0.0000, 6, 6, 600); // forklift 3
	forkliftVehicles[3] = AddStaticVehicleEx(530, 2788.1560, -2410.3755, 13.3962, 180.0000, 6, 6, 600); // forklift 4
	forkliftVehicles[4] = AddStaticVehicleEx(530, 2795.1589, -2425.3408, 13.3954, 0.0000, 6, 6, 600); // forklift 5
	forkliftVehicles[5] = AddStaticVehicleEx(530, 2795.1826, -2409.9617, 13.3972, 180.0000, 6, 6, 600); // forklift 6

	towtruck[0] = AddStaticVehicleEx(525,1927.4314,-1598.9816,13.4271,270.1710,0,3,300); // 1
	towtruck[1] = AddStaticVehicleEx(525,1927.5105,-1594.0903,13.4275,271.5917,0,3,300); // 2
	towtruck[2] = AddStaticVehicleEx(525,1927.3196,-1589.0690,13.4458,271.8348,0,3,300); // 3

	courierVehicles[0] = AddStaticVehicleEx(414, 2232.7761, -2642.7903, 13.5469, 91.7305, 11,11, 300); // mule
	courierVehicles[1] = AddStaticVehicleEx(414, 2232.9922, -2637.5408, 13.5469, 91.7305, 11,11, 300); // mule
	courierVehicles[2] = AddStaticVehicleEx(414, 2440.4299, -2079.9658, 13.6406, 180.0, 11,11, 300); // mule
	courierVehicles[3] = AddStaticVehicleEx(499, 2445.4907, -2079.4810, 13.6144, 180.0, 11,11, 300); // benson
	courierVehicles[4] = AddStaticVehicleEx(499, 2450.9763, -2079.6001, 13.6142, 180.0, 11,11, 300); // benson
	courierVehicles[5] = AddStaticVehicleEx(498, 2428.3293, -2102.2959, 13.6132, 270.0, 11,11, 300); // boxville
	courierVehicles[6] = AddStaticVehicleEx(498, 2428.3030, -2107.6719, 13.6155, 270.0, 11,11, 300); // boxville
    courierVehicles[7] = AddStaticVehicleEx(499, 2455.4595, -2079.3115, 13.6159, 180.0, 11,11, 300); // benson
    courierVehicles[8] = AddStaticVehicleEx(499, 2461.5056, -2079.6157, 13.6145, 180.0, 11,11, 300); // benson
    courierVehicles[9] = AddStaticVehicleEx(498, 2428.3015, -2112.9250, 13.6170, 270.0, 11,11, 300); // boxville
	courierVehicles[10] = AddStaticVehicleEx(514, 2211.1653, -2641.0049, 13.5469, 271.1338, 11, 11, 0); //Tanker
	courierVehicles[11] = AddStaticVehicleEx(514, 2178.0498, -2637.3147, 13.5469, 271.1338, 4, 4, 0); //Tanker

    taxiVehicles[0] = AddStaticVehicleEx(420, 1775.6141, -1860.0100, 13.2745, 269.2006, 6, 1, 300); // taxi 1
	taxiVehicles[1] = AddStaticVehicleEx(420, 1763.0121, -1860.0037, 13.2723, 271.2998, 6, 1, 300); // taxi 2
	taxiVehicles[2] = AddStaticVehicleEx(420, 1748.9358, -1859.9502, 13.2721, 270.3943, 6, 1, 300); // taxi 3
	taxiVehicles[3] = AddStaticVehicleEx(420, 1734.6754, -1859.9305, 13.2740, 270.5646, 6, 1, 300); // taxi 4

	// Driving Test (Main)
    testVehicles[0] = AddStaticVehicleEx(496, 1879.1343, -1839.9989, 13.2814, 0.0000, 1,1, 10); // test car 1
	testVehicles[1] = AddStaticVehicleEx(496, 1884.4059, -1841.6239, 13.2814, 0.0000, 1, 1, 10); // test car 2
	testVehicles[2] = AddStaticVehicleEx(496, 1889.4980, -1843.1404, 13.2814, 0.0000, 1, 1, 10); // test car 3
	testVehicles[3] = AddStaticVehicleEx(496, 1894.3280, -1844.4044, 13.2814, 0.0000, 1, 1, 10); // test car 4

	testVehicles[4] = AddStaticVehicleEx(496, 1888.7023, -1859.5636, 13.3022, 0.0000, 1, 1, 10); // test car 5
	testVehicles[5] = AddStaticVehicleEx(496, 1884.8505, -1859.3148, 13.3022, 0.0000, 1, 1, 10); // test car 6
	testVehicles[6] = AddStaticVehicleEx(496, 1880.9208, -1859.2782, 13.3022, 0.0000, 1, 1, 10); // test car 7
	testVehicles[7] = AddStaticVehicleEx(496, 1876.8717, -1859.2034, 13.3022, 0.0000, 1, 1, 10); // test car 8
	testVehicles[8] = AddStaticVehicleEx(496, 1898.3942, -1845.2045, 13.3022, 0.0000, 1, 1, 10); // test car 9

	GasolineBoyVehicles();

	new hour;
	gettime(.hour = gHour);
 	gettime(.hour = gWorldTime);
	SetWorldTime(hour+8);

	for(new i = 0; i < MAX_LANDS; i ++)
	{
	    ReloadAllLandObjects(i);
	    ReloadLand(i);
	}
	// Timers
	SetTimer("MinuteTimer", 60000, true);
	SetTimer("VehicleTimer", 100, true);
	SetTimer("HudTimer", 100, true);
	SetTimer("TDInfoTimer", 4000, true);
	SetTimer("SecondTimer", 1000, true);
	SetTimer("FuelTimer", 75000, true);
	SetTimer("InjuredTimer", 5000, true);
	SetTimerEx("RandomFire", 7200000, true, "i", 1);
	SetTimerEx("DespawnVehicle", 300000, true, "i", 1);
	gLottoTimer = SetTimer("PrepareLotto", 1000 * 60 * 5, true);

	// Misc
    LoadServerInfo();
    RefreshTime();
    ResetEvent();
    ResetRobbery();
    ResetChop();
    ResetRob();
	gLastSave = 0;

	SetGameModeText(REVISION);
	print("GTA: Alcazar Gaming");


	// Border BG-ZG 2
 	new tmpobjid;
	tmpobjid = CreateDynamicObject(18766,70.748,-1306.056,16.045,90.000,90.000,37.497);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18762,54.956,-1288.669,15.315,0.000,0.000,37.866);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,45.729,-1276.558,15.315,0.000,0.000,37.866);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18766,46.969,-1281.114,17.903,90.000,90.000,37.496);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18762,42.827,-1278.711,15.315,0.000,0.000,37.866);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,72.016,-1310.522,13.554,0.000,0.000,37.866);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,52.047,-1290.854,15.315,0.000,0.000,37.866);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18766,51.033,-1286.384,17.903,90.000,90.000,37.496);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18762,63.031,-1298.765,13.554,0.000,0.000,37.866);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18766,66.926,-1301.117,16.045,90.000,90.000,37.497);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18762,65.597,-1296.385,13.554,0.000,0.000,37.866);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,74.939,-1308.251,13.554,0.000,0.000,37.866);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(966,71.390,-1305.729,11.374,0.000,0.000,-49.339);
	tmpobjid = CreateDynamicObject(4642,45.687,-1279.371,14.450,0.000,0.000,306.604);
	tmpobjid = CreateDynamicObject(4642,72.817,-1307.641,12.724,0.000,0.000,306.604);
	tmpobjid = CreateDynamicObject(4642,52.394,-1288.195,14.450,0.000,0.000,306.604);
	tmpobjid = CreateDynamicObject(4642,65.381,-1298.697,12.724,0.000,0.000,306.604);
	tmpobjid = CreateDynamicObject(966,50.972,-1286.448,12.811,0.000,0.000,305.521);
	// Border BG-SA 2
	tmpobjid = CreateDynamicObject(18762,528.709,472.548,21.722,0.000,0.000,35.681);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18766,520.149,478.753,24.532,90.000,0.000,35.039);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18762,512.488,472.244,21.551,0.000,0.000,35.681);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18766,515.241,475.290,24.558,90.000,0.000,35.039);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,518.088,471.233,24.573,90.000,0.000,35.039);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18762,512.479,472.262,20.272,0.000,0.000,35.681);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18766,520.911,467.199,24.579,90.000,0.000,35.039);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18762,517.779,464.663,20.272,0.000,0.000,35.681);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,517.768,464.680,21.783,0.000,0.000,35.681);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,523.539,480.218,20.272,0.000,0.000,35.681);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,528.709,472.528,20.272,0.000,0.000,35.681);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,523.525,480.231,21.913,0.000,0.000,35.681);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18766,525.837,470.665,24.565,90.000,0.000,35.039);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,522.995,474.713,24.559,90.000,0.000,35.039);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(4642,526.546,475.264,19.328,0.000,0.000,127.839);
	tmpobjid = CreateDynamicObject(4642,513.856,470.669,19.328,0.000,0.000,307.676);
	tmpobjid = CreateDynamicObject(966,514.699,468.479,17.927,0.000,0.000,218.256);
	tmpobjid = CreateDynamicObject(966,525.697,477.131,17.927,0.000,0.000,38.170);
	tmpobjid = CreateDynamicObject(3785,529.058,472.096,20.172,0.000,0.000,311.995);
	tmpobjid = CreateDynamicObject(3785,518.181,464.204,20.172,0.000,0.000,314.744);
	tmpobjid = CreateDynamicObject(14699,527.491,469.917,22.644,0.000,0.000,31.781);
	tmpobjid = CreateDynamicObject(14699,519.045,471.209,22.644,0.000,0.000,29.281);
	tmpobjid = CreateDynamicObject(14699,521.971,466.295,22.644,0.000,0.000,29.281);
	tmpobjid = CreateDynamicObject(14699,523.986,475.240,22.644,0.000,0.000,29.281);
	tmpobjid = CreateDynamicObject(19121,524.896,478.571,18.432,0.000,0.000,0.000);
	tmpobjid = CreateDynamicObject(19121,516.247,466.653,18.432,0.000,0.000,0.000);
	// Border BG-SA 3
	tmpobjid = CreateDynamicObject(18762,-174.415,369.180,15.000,0.000,0.000,344.615);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18766,-162.478,368.772,17.086,90.000,0.000,73.950);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18762,-159.026,375.341,14.732,0.000,0.000,344.615);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,-174.413,369.160,13.607,0.000,0.000,344.615);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18766,-167.718,377.790,17.106,90.000,0.000,164.753);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,-167.272,370.147,17.086,90.000,0.000,73.950);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,-172.066,371.521,17.086,90.000,0.000,73.950);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,-162.906,376.464,17.086,90.000,0.000,164.753);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18762,-161.526,365.598,14.111,0.000,0.000,344.615);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,-161.545,365.605,13.607,0.000,0.000,344.615);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,-171.902,378.478,13.607,0.000,0.000,344.615);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,-159.028,375.315,13.607,0.000,0.000,344.615);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,-171.907,378.506,14.881,0.000,0.000,344.615);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(4642,-173.404,372.267,12.282,0.000,0.000,256.216);
	tmpobjid = CreateDynamicObject(966,-173.223,374.666,10.971,0.000,0.000,164.770);
	tmpobjid = CreateDynamicObject(4642,-160.784,369.254,12.282,0.000,0.000,74.593);
	tmpobjid = CreateDynamicObject(966,-159.701,371.221,10.971,0.000,0.000,346.603);
	tmpobjid = CreateDynamicObject(19121,-173.342,368.963,11.392,0.000,0.000,0.000);
	tmpobjid = CreateDynamicObject(19121,-162.446,366.341,11.392,0.000,0.000,0.000);
	tmpobjid = CreateDynamicObject(14680,-162.359,366.875,15.100,0.000,0.000,349.729);
	tmpobjid = CreateDynamicObject(14680,-168.301,367.673,15.100,0.000,0.000,349.729);
	tmpobjid = CreateDynamicObject(14680,-167.511,372.740,15.100,0.000,0.000,349.729);
	tmpobjid = CreateDynamicObject(14680,-160.851,371.996,15.100,0.000,0.000,349.729);
	// Border BG-ZG
	tmpobjid = CreateDynamicObject(18766,65.275,-1525.567,11.132,90.000,90.000,351.282);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,64.275,-1532.036,11.061,90.000,90.000,351.282);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,40.683,-1538.132,11.085,90.000,90.000,351.282);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,56.121,-1530.577,11.043,90.000,90.000,351.282);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,42.118,-1528.339,11.079,90.000,90.000,351.282);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,43.076,-1522.761,11.064,90.000,90.000,351.282);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,45.581,-1538.900,11.081,90.000,90.000,351.282);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,50.323,-1539.604,11.064,90.000,90.000,351.282);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,46.863,-1529.010,11.080,90.000,90.000,351.282);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,51.274,-1529.712,11.021,90.000,90.000,351.282);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,55.144,-1540.337,11.048,90.000,90.000,351.282);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,60.467,-1531.164,11.101,90.000,90.000,351.282);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,47.993,-1523.542,11.060,90.000,90.000,351.282);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,52.668,-1524.232,11.061,90.000,90.000,351.282);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,57.179,-1524.975,11.142,90.000,90.000,351.282);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,61.017,-1525.462,11.043,90.000,90.000,351.282);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18762,55.137,-1530.958,4.237,0.000,0.000,352.001);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(4638,55.337,-1521.070,5.615,0.000,0.000,171.834);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	SetDynamicObjectMaterial(tmpobjid, 2, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(4638,53.546,-1543.133,5.615,0.000,0.000,358.505);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	SetDynamicObjectMaterial(tmpobjid, 2, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18766,55.991,-1540.373,11.038,90.000,90.000,351.282);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,60.467,-1531.164,11.043,90.000,90.000,351.282);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,60.050,-1540.918,11.088,90.000,90.000,351.282);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,62.963,-1541.336,11.200,90.000,90.000,352.731);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18762,54.889,-1532.820,8.426,0.000,0.000,352.001);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,55.015,-1531.875,4.237,0.000,0.000,352.001);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,54.869,-1532.820,6.620,0.000,0.000,352.001);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,54.995,-1531.873,8.517,0.000,0.000,352.001);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,55.137,-1530.958,8.936,0.000,0.000,352.001);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(966,53.604,-1541.573,4.054,0.000,0.000,263.574);
	tmpobjid = CreateDynamicObject(966,55.162,-1522.364,4.054,0.000,0.000,90.000);
	tmpobjid = CreateDynamicObject(1237,55.022,-1529.924,4.251,0.000,0.000,0.000);
	tmpobjid = CreateDynamicObject(1237,54.654,-1534.033,4.251,0.000,0.000,0.000);
	
	//Near HP
	/*tmpobjid = CreateDynamicObject(19379, 1227.111816, -1326.681030, 10.931962, 0.000000, 0.000000, 90.000000, -1, -1, -1, 500.00, 500.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "shingles2", 0x00000000);
	tmpobjid = CreateDynamicObject(19379, 1241.801635, -1326.761108, 10.931962, 0.000000, 0.000000, 90.000000, -1, -1, -1, 500.00, 500.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "shingles2", 0x00000000);
	tmpobjid = CreateDynamicObject(19379, 1233.940917, -1326.751098, 10.931962, 0.000000, 0.000000, 90.000000, -1, -1, -1, 500.00, 500.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "shingles2", 0x00000000);
	tmpobjid = CreateDynamicObject(19379, 1220.323120, -1326.671020, 10.931962, 0.000000, 0.000000, 90.000000, -1, -1, -1, 500.00, 500.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "shingles2", 0x00000000);
	tmpobjid = CreateDynamicObject(8649, 1245.982788, -1326.279418, 13.770666, 0.000000, 0.000036, -0.100166, -1, -1, -1, 500.00, 500.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 9525, "boigas_sfw", "calfederal4", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 3820, "boxhses_sfsx", "stonewall_la", 0x00000000);
	tmpobjid = CreateDynamicObject(8649, 1245.982788, -1326.279418, 12.080633, 0.000000, 180.000000, -0.100166, -1, -1, -1, 500.00, 500.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3820, "boxhses_sfsx", "stonewall_la", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 3820, "boxhses_sfsx", "stonewall_la", 0x00000000);
	tmpobjid = CreateDynamicObject(8649, 1245.611694, -1370.465576, 13.770666, 0.000000, -0.000014, -0.100349, -1, -1, -1, 500.00, 500.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 9525, "boigas_sfw", "calfederal4", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 3820, "boxhses_sfsx", "stonewall_la", 0x00000000);
	tmpobjid = CreateDynamicObject(8649, 1245.611694, -1370.465576, 12.080633, 0.000000, 180.000000, -0.100349, -1, -1, -1, 500.00, 500.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3820, "boxhses_sfsx", "stonewall_la", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 3820, "boxhses_sfsx", "stonewall_la", 0x00000000);
	tmpobjid = CreateDynamicObject(8652, 1230.535644, -1385.151245, 13.776905, 0.000000, 0.000014, 0.000000, -1, -1, -1, 500.00, 500.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 9525, "boigas_sfw", "calfederal4", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 3820, "boxhses_sfsx", "stonewall_la", 0x00000000);
	tmpobjid = CreateDynamicObject(8652, 1230.525634, -1384.981079, 12.006876, 0.000000, 179.999984, -179.999938, -1, -1, -1, 500.00, 500.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3820, "boxhses_sfsx", "stonewall_la", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 3820, "boxhses_sfsx", "stonewall_la", 0x00000000);
	tmpobjid = CreateDynamicObject(8649, 1215.811157, -1326.279418, 13.770666, 0.000000, 0.000029, -0.100166, -1, -1, -1, 500.00, 500.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 9525, "boigas_sfw", "calfederal4", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 3820, "boxhses_sfsx", "stonewall_la", 0x00000000);
	tmpobjid = CreateDynamicObject(8649, 1215.811157, -1326.279418, 12.080633, 0.000000, 180.000000, -0.100166, -1, -1, -1, 500.00, 500.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3820, "boxhses_sfsx", "stonewall_la", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 3820, "boxhses_sfsx", "stonewall_la", 0x00000000);
	tmpobjid = CreateDynamicObject(8649, 1215.951293, -1369.996826, 13.770666, 0.000007, 0.000007, 179.899780, -1, -1, -1, 500.00, 500.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 9525, "boigas_sfw", "calfederal4", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 3820, "boxhses_sfsx", "stonewall_la", 0x00000000);
	tmpobjid = CreateDynamicObject(8649, 1215.951293, -1369.996826, 12.080633, 0.000007, 180.000000, 179.899780, -1, -1, -1, 500.00, 500.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3820, "boxhses_sfsx", "stonewall_la", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 3820, "boxhses_sfsx", "stonewall_la", 0x00000000);
	tmpobjid = CreateDynamicObject(19353, 1228.433959, -1333.619384, 10.458799, -0.000000, 0.000014, -10.300003, -1, -1, -1, 500.00, 500.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19353, 1232.138183, -1333.605590, 10.458799, -0.000000, 0.000014, -11.099982, -1, -1, -1, 500.00, 500.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19353, 1235.181884, -1333.578491, 10.458799, -0.000000, 0.000014, -13.600005, -1, -1, -1, 500.00, 500.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19353, 1221.819580, -1333.647216, 10.458799, 0.000000, 0.000022, -7.399998, -1, -1, -1, 500.00, 500.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19353, 1218.668823, -1333.647216, 10.458799, 0.000000, 0.000022, -6.699995, -1, -1, -1, 500.00, 500.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19353, 1238.108154, -1333.647216, 10.458799, -0.000003, 0.000022, -15.400008, -1, -1, -1, 500.00, 500.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19353, 1241.168457, -1333.647216, 10.458799, -0.000003, 0.000020, -13.999986, -1, -1, -1, 500.00, 500.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19353, 1225.313232, -1333.619384, 10.458799, -0.000000, 0.000014, -8.499994, -1, -1, -1, 500.00, 500.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19355, 1208.963500, -1349.505126, 10.687229, 0.000000, 0.000000, 0.000000, -1, -1, -1, 500.00, 500.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19355, 1207.632568, -1349.505126, 10.687229, 0.000000, 0.000007, 0.000000, -1, -1, -1, 500.00, 500.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19355, 1206.151000, -1349.505126, 10.687229, 0.000000, 0.000007, 0.000000, -1, -1, -1, 500.00, 500.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19355, 1204.769653, -1349.505126, 10.687229, 0.000000, 0.000007, 0.000000, -1, -1, -1, 500.00, 500.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19355, 1203.458740, -1349.505126, 10.687229, 0.000000, 0.000014, 0.000000, -1, -1, -1, 500.00, 500.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19355, 1202.250122, -1349.505126, 10.687229, 0.000000, 0.000022, 0.000000, -1, -1, -1, 500.00, 500.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19355, 1200.928833, -1349.505126, 10.687229, 0.000000, 0.000022, 0.000000, -1, -1, -1, 500.00, 500.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19355, 1199.547851, -1349.505126, 10.687229, 0.000000, 0.000029, 0.000000, -1, -1, -1, 500.00, 500.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19355, 1198.336791, -1349.505126, 10.687229, 0.000000, 0.000029, 0.000000, -1, -1, -1, 500.00, 500.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19355, 1197.015502, -1349.505126, 10.687229, 0.000000, 0.000029, 0.000000, -1, -1, -1, 500.00, 500.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19355, 1195.634521, -1349.505126, 10.687229, 0.000000, 0.000037, 0.000000, -1, -1, -1, 500.00, 500.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19355, 1194.263549, -1349.505126, 10.687229, 0.000000, 0.000045, 0.000000, -1, -1, -1, 500.00, 500.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19355, 1192.942260, -1349.505126, 10.687229, 0.000000, 0.000045, 0.000000, -1, -1, -1, 500.00, 500.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19355, 1191.561279, -1349.505126, 10.687229, 0.000000, 0.000052, 0.000000, -1, -1, -1, 500.00, 500.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19379, 1235.463989, -1362.296997, 12.140846, 0.000000, 90.000000, 0.000000, -1, -1, -1, 500.00, 500.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4835, "airoads_las", "grassdry_128HV", 0x00000000);
	tmpobjid = CreateDynamicObject(19379, 1231.230590, -1362.296997, 12.120844, 0.000000, 90.000000, 0.000000, -1, -1, -1, 500.00, 500.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4835, "airoads_las", "grassdry_128HV", 0x00000000);
	tmpobjid = CreateDynamicObject(1508, 1216.196655, -1307.900146, 13.498803, 0.000000, 0.000014, 0.000000, -1, -1, -1, 500.00, 500.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "Cabinet", 0x00000000);
	tmpobjid = CreateDynamicObject(1508, 1216.196655, -1314.200195, 13.498803, 0.000000, 0.000014, 0.000000, -1, -1, -1, 500.00, 500.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "Cabinet", 0x00000000);
	tmpobjid = CreateDynamicObject(1508, 1216.196655, -1301.599853, 13.498803, 0.000000, 0.000014, 0.000000, -1, -1, -1, 500.00, 500.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "Cabinet", 0x00000000);
	tmpobjid = CreateDynamicObject(3440, 1212.901123, -1313.286254, 14.408466, 0.000000, 0.000000, 0.000000, -1, -1, -1, 500.00, 500.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "ws_carpark2", 0x00000000);
	tmpobjid = CreateDynamicObject(3440, 1213.051269, -1302.673583, 14.408466, 0.000000, 0.000000, 0.000000, -1, -1, -1, 500.00, 500.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "ws_carpark2", 0x00000000);
	tmpobjid = CreateDynamicObject(19482, 1212.188476, -1316.982299, 13.205082, 0.000000, 0.000000, 163.599868, -1, -1, -1, 500.00, 500.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
	SetDynamicObjectMaterialText(tmpobjid, 0, "{ffffff}PH Medical", 40, "Fixedsys", 25, 0, 0x00000000, 0x00000000, 1);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObject(3515, 1238.838989, -1360.269897, 12.794643, 0.000000, 9.400017, 179.999908, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(8533, 1216.036254, -1356.696044, 12.188825, 0.000000, 0.000000, 0.000000, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(3749, 1245.984741, -1349.305175, 18.035495, 0.000000, 0.000000, 90.000000, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(1505, 1223.615722, -1326.786010, 12.175753, 0.000000, 0.000000, 0.000000, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(5762, 1234.797607, -1373.959472, 15.316074, 0.000000, 0.000000, 270.000000, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(3515, 1227.877319, -1360.269897, 12.774177, 0.000000, 12.500069, 0.000000, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(3749, 1215.612670, -1349.305175, 18.035495, 0.000000, 0.000000, 90.000000, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(1505, 1230.407836, -1326.826049, 12.175753, 0.000000, 0.000000, 0.000000, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(997, 1225.453125, -1330.742309, 12.248826, 0.000000, 0.000007, 0.000000, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(6100, 1234.053833, -1311.720581, 36.178073, 0.000000, 0.000000, 270.000000, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(997, 1218.661376, -1330.742309, 12.248826, 0.000000, 0.000007, 0.000000, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(994, 1244.715576, -1330.734375, 12.253328, 0.000000, -0.000051, 179.999679, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(997, 1232.335083, -1330.742309, 12.248826, 0.000000, 0.000007, 0.000000, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(18850, 1235.495239, -1371.312988, 6.718500, 0.000000, 0.000000, 0.000000, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(3505, 1216.251464, -1384.781860, 12.338829, 0.000000, 0.000000, 0.000000, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(3511, 1245.453979, -1384.781860, 12.338829, 0.000000, 0.000000, 0.000000, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(3511, 1245.805053, -1333.289550, 12.338829, 0.000000, 0.000000, 0.000000, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(3505, 1245.453979, -1369.721679, 12.338829, 0.000000, 0.000000, 0.000000, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(3505, 1231.275268, -1384.781860, 12.338829, 0.000000, 0.000000, 0.000000, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(3505, 1216.151367, -1370.520507, 12.338829, 0.000000, 0.000000, 0.000000, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(3511, 1215.951171, -1333.300903, 12.338829, 0.000000, 0.000000, 0.000000, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(1522, 1224.876586, -1374.813232, 12.104159, 0.000000, 0.000000, 90.000000, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(1505, 1237.228637, -1326.836059, 12.175753, 0.000000, 0.000000, 0.000000, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(1505, 1244.019653, -1326.836059, 12.175753, 0.000000, 0.000000, 0.000000, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(1505, 1216.766967, -1326.836059, 12.175753, 0.000000, 0.000000, 0.000000, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(9833, 1233.007080, -1359.581665, 15.287323, -0.000007, 0.000012, -34.000000, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(970, 1233.337524, -1357.461181, 12.734082, 0.000000, 0.000007, 0.000000, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(970, 1228.536621, -1357.461181, 12.734082, 0.000000, 0.000007, 0.000000, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(970, 1238.166625, -1357.461181, 12.734082, 0.000000, 0.000007, 0.000000, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(970, 1240.750732, -1360.052612, 12.734082, 0.000007, 0.000000, 89.999977, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(970, 1225.956665, -1360.052612, 12.734082, 0.000007, 0.000000, 89.999977, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(1256, 1228.559936, -1356.843139, 12.828840, 0.000000, 0.000000, 270.000000, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(1256, 1233.390869, -1356.843139, 12.828840, 0.000000, 0.000000, 270.000000, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(1256, 1238.233032, -1356.843139, 12.828840, 0.000000, 0.000000, 270.000000, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(1364, 1224.991333, -1360.023193, 12.938839, 0.000000, 0.000000, 270.000000, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(14657, 1224.737182, -1378.990112, 12.778818, 0.000000, 0.000000, 0.000000, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(14657, 1224.737182, -1367.660278, 12.778818, 0.000000, 0.000000, 0.000000, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(1364, 1243.035156, -1362.105224, 12.938839, 0.000000, 0.000000, 540.000000, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(809, 1233.962402, -1359.989257, 11.664482, 0.000000, 0.000000, 0.000000, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(862, 1235.734252, -1358.266357, 12.622817, 0.000000, 0.000000, 0.000000, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(862, 1235.734252, -1362.079711, 12.622817, 0.000000, 0.000000, 0.000000, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(862, 1235.734252, -1360.177856, 12.622817, 0.000000, 0.000000, 0.000000, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(862, 1230.863281, -1358.266357, 12.622817, 0.000000, 0.000007, 0.000000, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(862, 1230.863281, -1362.079711, 12.622817, 0.000000, 0.000007, 0.000000, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(862, 1230.863281, -1360.177856, 12.622817, 0.000000, 0.000007, 0.000000, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(862, 1227.850341, -1358.266357, 12.622817, 0.000000, 0.000014, 0.000000, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(862, 1227.850341, -1362.500122, 12.622817, 0.000000, 0.000014, 0.000000, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(862, 1238.524658, -1358.266357, 12.622817, 0.000000, 0.000022, 0.000000, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(8991, 1233.529541, -1360.534179, 12.901890, 0.000000, 0.000000, 0.000000, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(8991, 1233.529541, -1358.362060, 12.901890, 0.000000, 0.000000, 0.000000, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(9152, 1233.379760, -1361.426757, 12.863883, 0.000000, 0.000000, 0.000000, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(8991, 1233.529541, -1362.375976, 12.901890, 0.000000, 0.000000, 0.000000, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(8991, 1226.626708, -1364.777954, 12.901890, 0.000000, 0.000000, 90.000000, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(8991, 1240.100585, -1364.763305, 12.901890, 0.000000, 0.000000, 86.100059, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(1231, 1226.157348, -1357.666259, 13.318851, 0.000000, 0.000000, 12.099994, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(1231, 1230.954345, -1357.481445, 13.418814, 0.000000, 0.000000, 0.000000, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(1231, 1235.734008, -1357.481445, 13.418814, 0.000000, 0.000000, 0.000000, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(1232, 1226.057006, -1362.535400, 13.318851, 0.000000, 0.000000, 12.099994, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(1232, 1240.478149, -1357.666259, 13.318851, 0.000000, 0.000007, 12.099994, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(1232, 1240.377807, -1362.535400, 13.318851, 0.000000, 0.000007, 12.099994, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(1372, 1218.152587, -1357.945922, 12.318828, 0.000007, 0.000000, 89.999977, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(1339, 1218.112182, -1356.619018, 12.838834, 0.000007, 0.000000, 89.999977, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(1339, 1218.112182, -1355.928344, 12.838834, 0.000007, 0.000000, 89.999977, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(18762, 1213.526611, -1314.243652, 11.729402, 34.499996, 0.000025, -16.500009, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(18762, 1213.103515, -1315.691894, 11.569667, -0.200008, 0.000020, -16.100027, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(18762, 1212.827392, -1316.651611, 11.573166, -0.200008, 0.000020, -16.100027, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(18762, 1212.552612, -1317.609619, 11.576677, -0.200008, 0.000020, -16.100027, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(18762, 1211.855712, -1319.981201, 11.736194, 34.500011, -0.000025, 163.499938, -1, -1, -1, 500.00, 500.00);
	tmpobjid = CreateDynamicObject(18762, 1212.281860, -1318.543457, 11.580087, -0.200008, 0.000020, -16.100027, -1, -1, -1, 500.00, 500.00);*/

	// Border BG-SA
	CreateDynamicObject(1569, 1798.83069, 801.99518, 10.99730,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14411, 1799.51111, 799.42389, 7.84370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(957, 1801.28760, 799.66632, 10.89630,   0.00000, 900.00000, 0.00000);
	CreateDynamicObject(957, 1801.28760, 800.66632, 11.39630,   0.00000, 900.00000, 0.00000);
	CreateDynamicObject(957, 1801.28760, 801.66632, 11.89630,   0.00000, 900.00000, 0.00000);
	CreateDynamicObject(957, 1797.78760, 801.66632, 11.89630,   0.00000, 900.00000, 0.00000);
	CreateDynamicObject(957, 1797.78760, 800.66632, 11.39630,   0.00000, 900.00000, 0.00000);
	CreateDynamicObject(957, 1797.78760, 799.66632, 10.89630,   0.00000, 900.00000, 0.00000);
	CreateDynamicObject(1569, 1798.83069, 803.33319, 11.13330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1795.80859, 802.65051, 13.36218,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, 1801.32300, 803.58691, 13.90050,   0.00000, 0.00000, 358.01700);
	CreateDynamicObject(19466, 1801.39990, 805.82648, 13.90050,   0.00000, 0.00000, 358.01700);
	CreateDynamicObject(19466, 1801.32300, 803.58691, 11.96550,   0.00000, 0.00000, 358.01700);
	CreateDynamicObject(19466, 1801.47681, 808.06641, 13.90050,   0.00000, 0.00000, 358.01700);
	CreateDynamicObject(19466, 1801.39990, 805.82648, 11.96550,   0.00000, 0.00000, 358.01700);
	CreateDynamicObject(19466, 1801.55566, 810.30511, 13.90050,   0.00000, 0.00000, 358.01700);
	CreateDynamicObject(19466, 1801.63354, 812.54498, 13.90050,   0.00000, 0.00000, 358.01700);
	CreateDynamicObject(19466, 1801.55566, 810.30511, 11.96550,   0.00000, 0.00000, 358.01700);
	CreateDynamicObject(19466, 1801.63354, 812.54498, 11.96550,   0.00000, 0.00000, 358.01700);
	CreateDynamicObject(19325, 1797.14197, 813.66656, 13.36218,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, 1792.63354, 812.54498, 11.96550,   0.00000, 0.00000, 358.01700);
	CreateDynamicObject(19466, 1792.55652, 810.30713, 11.96550,   0.00000, 0.00000, 358.01700);
	CreateDynamicObject(19466, 1792.55652, 810.30713, 13.90050,   0.00000, 0.00000, 358.01700);
	CreateDynamicObject(19466, 1792.63354, 812.54498, 13.90050,   0.00000, 0.00000, 358.01700);
	CreateDynamicObject(19466, 1792.47852, 808.06842, 13.90050,   0.00000, 0.00000, 358.01700);
	CreateDynamicObject(19466, 1792.40051, 805.82849, 13.90050,   0.00000, 0.00000, 358.01700);
	CreateDynamicObject(19466, 1792.40051, 805.82849, 11.96550,   0.00000, 0.00000, 358.01700);
	CreateDynamicObject(19466, 1792.32251, 803.59088, 13.90050,   0.00000, 0.00000, 358.01700);
	CreateDynamicObject(19466, 1792.32251, 803.59088, 11.96550,   0.00000, 0.00000, 358.01700);
	CreateDynamicObject(2208, 1800.49890, 809.39258, 11.16090,   0.00000, 0.00000, -92.00000);
	CreateDynamicObject(1714, 1794.76489, 807.90405, 11.16100,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2208, 1793.50171, 809.28235, 11.16090,   0.00000, 0.00000, -92.00000);
	CreateDynamicObject(1714, 1799.16028, 808.10992, 11.16100,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2164, 1794.12524, 813.07373, 11.14740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2161, 1795.89136, 813.08191, 11.15520,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2161, 1797.22144, 813.08191, 11.15520,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2164, 1798.55725, 813.07172, 11.14740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2250, 1795.71606, 812.93738, 12.95650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2249, 1797.67432, 812.87671, 13.17230,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2196, 1800.72632, 808.66833, 12.02570,   0.00000, 0.00000, 234.06738);
	CreateDynamicObject(2167, 1800.32825, 813.07520, 11.16140,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2291, 1797.01111, 804.32043, 11.16080,   0.00000, 0.00000, 207.18959);
	CreateDynamicObject(2291, 1794.41711, 804.03638, 11.16080,   0.00000, 0.00000, 139.95801);
	CreateDynamicObject(1822, 1794.75635, 803.27527, 11.16040,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2690, 1797.86804, 803.28003, 13.02330,   0.00000, 0.00000, 900.00000);
	CreateDynamicObject(19893, 1793.61072, 807.93860, 12.02560,   0.00000, 0.00000, -268.15701);
	CreateDynamicObject(19893, 1800.46680, 808.13391, 12.02560,   0.00000, 0.00000, 268.15695);
	CreateDynamicObject(2261, 1793.54199, 812.59583, 13.11710,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2264, 1799.81006, 812.59583, 13.59590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2195, 1800.51172, 810.36987, 11.77330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2195, 1800.37708, 805.81140, 11.77330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19820, 1793.90881, 812.88220, 12.99409,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19821, 1794.59070, 812.90698, 12.99350,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19822, 1795.24365, 812.90179, 12.99350,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19624, 1793.60681, 809.12292, 12.11340,   90.00000, 90.00000, 0.00000);
	CreateDynamicObject(19786, 1796.78467, 813.14948, 14.70290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(957, 1793.74365, 808.18109, 14.77000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(957, 1795.74365, 808.18109, 14.77000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(957, 1796.74365, 808.18109, 14.77000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(957, 1797.74365, 808.18109, 14.77000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(957, 1799.74365, 808.18109, 14.77000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(957, 1788.29858, 797.43903, 18.45520,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(957, 1788.29858, 797.43903, 26.45520,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(957, 1788.29858, 797.43903, 22.45520,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(957, 1805.79858, 797.43903, 26.45520,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(957, 1797.29858, 797.43903, 26.45520,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(957, 1805.79858, 797.43903, 22.45520,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(957, 1805.79858, 797.43903, 18.45520,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(957, 1797.29858, 797.43903, 18.45520,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(957, 1801.87317, 805.07361, 11.02360,   0.00000, 90.00000, 900.00000);
	CreateDynamicObject(957, 1801.97119, 807.91559, 11.02360,   0.00000, 90.00000, 900.00000);
	CreateDynamicObject(957, 1802.08215, 811.07361, 11.02360,   0.00000, 90.00000, 900.00000);
	CreateDynamicObject(957, 1786.30493, 790.84229, 15.96940,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(957, 1803.30493, 790.84229, 15.96940,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(957, 1798.30493, 790.84229, 15.96940,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(957, 1791.30493, 790.84229, 15.96940,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(957, 1794.80493, 790.84229, 15.96940,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(2813, 1795.27014, 803.76202, 11.63821,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2824, 1800.36816, 806.95227, 12.02553,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2825, 1793.44287, 806.80835, 12.02590,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2966, 1793.53369, 808.50897, 12.05570,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(966, 1813.42493, 813.62769, 9.85020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(967, 1789.18030, 802.35437, 9.85930,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(966, 1780.07898, 802.22949, 9.85020,   0.00000, 0.00000, 900.00000);
	CreateDynamicObject(967, 1804.39075, 813.58795, 9.85930,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(957, 1818.43018, 820.81952, 16.85590,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(957, 1813.43018, 820.81952, 16.85590,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(957, 1808.43018, 820.81952, 16.85590,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(957, 1803.43018, 820.81952, 16.85590,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(957, 1798.43018, 820.81952, 16.85590,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(957, 1793.43018, 820.81952, 16.85590,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(957, 1788.43018, 820.81952, 16.85590,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(957, 1783.43018, 820.81952, 16.85590,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(957, 1778.43018, 820.81952, 16.85590,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(957, 1774.43018, 820.81952, 16.85590,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(957, 1794.17053, 802.16858, 10.93660,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(957, 1792.14331, 812.86047, 10.87000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(957, 1791.96130, 807.86047, 10.87000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(957, 1791.80127, 802.86047, 10.87000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(957, 1792.14331, 812.86047, 15.31560,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(957, 1791.97327, 807.86047, 15.31560,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(957, 1791.80127, 802.86047, 15.31560,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(957, 1801.87317, 805.07361, 15.31560,   0.00000, 90.00000, 900.00000);
	CreateDynamicObject(957, 1802.08215, 811.07361, 15.31560,   0.00000, 90.00000, 900.00000);
	CreateDynamicObject(957, 1801.97119, 807.91559, 15.31560,   0.00000, 90.00000, 900.00000);
	CreateDynamicObject(957, 1794.46436, 813.09723, 14.94110,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(957, 1798.96436, 813.09723, 14.94110,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(957, 1792.14331, 812.86047, 15.31560,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(957, 1791.97327, 807.86047, 15.31560,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(957, 1791.80127, 802.86047, 15.31560,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(957, 1808.30493, 790.84229, 15.96940,   0.00000, 90.00000, 90.00000);

	// Texture //
	new bsa = CreateDynamicObjectEx(4238, 1797.1707, 797.2317, 22.4085, 0.0000, 0.0000, 30.2910);
	SetObjectMaterialText(bsa, "LS - LV", 0, 140, "Arial Black", 65, 1, -16777216, 0, 1);
	new nagranicu = CreateDynamicObject(18981, 1796.92712, 806.85156, -1.49230,   -1.50000, 0.00000, 358.60599);
	SetDynamicObjectMaterial(nagranicu, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFD9D9D9);
	new nagranicu1 = CreateDynamicObject(18980, 1797.24255, 819.80359, 4.32060,   0.00000, 0.00000, 358.60599);
	SetDynamicObjectMaterial(nagranicu1, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFD9D9D9);
	new nagranicu2 = CreateDynamicObject(18980, 1796.63855, 795.05359, 4.32060,   0.00000, 0.00000, 358.60599);
	SetDynamicObjectMaterial(nagranicu2, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFD9D9D9);
	new nagranicu3 = CreateDynamicObject(18981, 1778.29114, 806.85162, -1.49230,   -1.50000, 0.00000, 358.66199);
	SetDynamicObjectMaterial(nagranicu3, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFD9D9D9);
	new nagranicu4 = CreateDynamicObject(18980, 1778.01648, 795.05359, 4.32060,   0.00000, 0.00000, 358.66199);
	SetDynamicObjectMaterial(nagranicu4, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFD9D9D9);
	new nagranicu5 = CreateDynamicObject(18980, 1778.59009, 819.59009, 4.32060,   0.00000, 0.00000, 358.66199);
	SetDynamicObjectMaterial(nagranicu5, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFD9D9D9);
	new nagranicu6 = CreateDynamicObject(18981, 1815.79114, 806.85162, -1.49230,   -1.50000, 0.00000, 358.66199);
	SetDynamicObjectMaterial(nagranicu6, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFD9D9D9);
	new nagranicu7 = CreateDynamicObject(18980, 1815.51648, 795.05359, 4.32060,   0.00000, 0.00000, 358.66199);
	SetDynamicObjectMaterial(nagranicu7, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFD9D9D9);
	new nagranicu8 = CreateDynamicObject(18980, 1816.08850, 819.59009, 4.32060,   0.00000, 0.00000, 358.66199);
	SetDynamicObjectMaterial(nagranicu8, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFD9D9D9);
	new nagranicu9 = CreateDynamicObject(18981, 1786.04749, 808.31702, 16.79760,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(nagranicu9, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFD9D9D9);
	new nagranicu10 = CreateDynamicObject(18981, 1808.04749, 808.31897, 16.79960,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(nagranicu10, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFD9D9D9);
	new nagranicu11 = CreateDynamicObject(18981, 1786.04956, 804.31702, 16.79560,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(nagranicu11, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFD9D9D9);
	new nagranicu12 = CreateDynamicObject(18981, 1808.04553, 804.31500, 16.79760,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(nagranicu12, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFD9D9D9);
	new nagranicu13 = CreateDynamicObject(18762, 1787.06384, 791.34332, 15.85530,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(nagranicu13, 0, 13066, "sw_fact01a", "corugwall1", 0xFFFFFFFF);
	new nagranicu14 = CreateDynamicObject(18762, 1792.06384, 791.34332, 15.85530,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(nagranicu14, 0, 13066, "sw_fact01a", "corugwall1", 0xFFFFFFFF);
	new nagranicu15 = CreateDynamicObject(18762, 1797.06384, 791.34332, 15.85530,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(nagranicu15, 0, 13066, "sw_fact01a", "corugwall1", 0xFFFFFFFF);
	new nagranicu16 = CreateDynamicObject(18762, 1802.06384, 791.34332, 15.85530,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(nagranicu16, 0, 13066, "sw_fact01a", "corugwall1", 0xFFFFFFFF);
	new nagranicu17 = CreateDynamicObject(18762, 1807.06384, 791.34332, 15.85530,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(nagranicu17, 0, 13066, "sw_fact01a", "corugwall1", 0xFFFFFFFF);
	new belatextura = CreateDynamicObject(18762, 1799.65405, 813.59711, 10.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura1 = CreateDynamicObject(18762, 1792.56580, 810.61511, 10.27150,   0.00000, 90.00000, -92.00000);
	SetDynamicObjectMaterial(belatextura1, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura2 = CreateDynamicObject(18762, 1794.65405, 813.59711, 10.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura2, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura3 = CreateDynamicObject(18762, 1794.30371, 802.66937, 10.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura3, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura4 = CreateDynamicObject(18762, 1799.30408, 802.67108, 10.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura4, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura5 = CreateDynamicObject(18762, 1792.39111, 805.61981, 10.27150,   0.00000, 90.00000, -92.00000);
	SetDynamicObjectMaterial(belatextura5, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura6 = CreateDynamicObject(18762, 1801.56628, 810.65088, 10.27150,   0.00000, 90.00000, -92.00000);
	SetDynamicObjectMaterial(belatextura6, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura7 = CreateDynamicObject(18762, 1801.39221, 805.65552, 10.27150,   0.00000, 90.00000, -92.00000);
	SetDynamicObjectMaterial(belatextura7, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura8 = CreateDynamicObject(18762, 1794.65405, 813.59711, 11.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura8, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura9 = CreateDynamicObject(18762, 1799.65405, 813.59711, 11.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura9, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura10 = CreateDynamicObject(18762, 1792.56580, 810.61511, 11.27150,   0.00000, 90.00000, -92.00000);
	SetDynamicObjectMaterial(belatextura10, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura11 = CreateDynamicObject(18762, 1792.39111, 805.61981, 11.27150,   0.00000, 90.00000, -92.00000);
	SetDynamicObjectMaterial(belatextura11, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura12 = CreateDynamicObject(18762, 1794.30371, 802.66937, 11.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura12, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura13 = CreateDynamicObject(18762, 1799.30408, 802.66913, 11.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura13, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura14 = CreateDynamicObject(18762, 1801.39221, 805.65552, 11.27150,   0.00000, 90.00000, -92.00000);
	SetDynamicObjectMaterial(belatextura14, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura15 = CreateDynamicObject(18762, 1799.30408, 802.66913, 12.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura15, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura16 = CreateDynamicObject(18762, 1799.30408, 802.66913, 13.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura16, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura17 = CreateDynamicObject(18762, 1799.30408, 802.66913, 14.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura17, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura18 = CreateDynamicObject(18762, 1799.30408, 802.66913, 15.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura18, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura19 = CreateDynamicObject(18762, 1792.30212, 802.66772, 13.27290,   0.00000, 0.00000, -90.00000);
	SetDynamicObjectMaterial(belatextura19, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura20 = CreateDynamicObject(18762, 1794.30371, 802.66913, 15.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura20, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura21 = CreateDynamicObject(18762, 1797.79712, 801.65271, 9.39690,   0.00000, 0.00000, 358.60599);
	SetDynamicObjectMaterial(belatextura21, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura22 = CreateDynamicObject(18762, 1801.30408, 801.68268, 9.39690,   0.00000, 0.00000, -90.00000);
	SetDynamicObjectMaterial(belatextura22, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura23 = CreateDynamicObject(14411, 1799.51111, 799.42389, 7.84370,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura23, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura24 = CreateDynamicObject(18762, 1801.30408, 800.68268, 8.89690,   0.00000, 0.00000, -90.00000);
	SetDynamicObjectMaterial(belatextura24, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura25 = CreateDynamicObject(18762, 1797.77112, 800.65271, 8.89690,   0.00000, 0.00000, 358.60599);
	SetDynamicObjectMaterial(belatextura25, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura26 = CreateDynamicObject(18762, 1797.74707, 799.65271, 8.39690,   0.00000, 0.00000, 358.60599);
	SetDynamicObjectMaterial(belatextura26, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura27 = CreateDynamicObject(18762, 1801.30408, 799.68268, 8.39690,   0.00000, 0.00000, -90.00000);
	SetDynamicObjectMaterial(belatextura27, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura28 = CreateDynamicObject(19325, 1797.14197, 813.66656, 13.36218,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(belatextura28, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura29 = CreateDynamicObject(18762, 1801.56628, 810.65088, 11.27150,   0.00000, 90.00000, -92.00000);
	SetDynamicObjectMaterial(belatextura29, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura30 = CreateDynamicObject(18762, 1799.65405, 813.59711, 12.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura30, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura31 = CreateDynamicObject(18762, 1799.65405, 813.59711, 13.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura31, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura32 = CreateDynamicObject(18762, 1799.65405, 813.59711, 14.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura32, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura33 = CreateDynamicObject(18762, 1799.65405, 813.59711, 15.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura33, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura34 = CreateDynamicObject(18762, 1794.65405, 813.59711, 12.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura34, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura35 = CreateDynamicObject(18762, 1794.65405, 813.59711, 13.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura35, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura36 = CreateDynamicObject(18762, 1794.65405, 813.59711, 14.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura36, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura37 = CreateDynamicObject(18762, 1794.65405, 813.59711, 15.27150,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura37, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura38 = CreateDynamicObject(18762, 1792.56580, 810.61511, 15.27150,   0.00000, 90.00000, -92.00000);
	SetDynamicObjectMaterial(belatextura38, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura39 = CreateDynamicObject(18762, 1792.39111, 805.61981, 15.27150,   0.00000, 90.00000, -92.00000);
	SetDynamicObjectMaterial(belatextura39, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura40 = CreateDynamicObject(18762, 1801.56628, 810.65088, 15.27150,   0.00000, 90.00000, -92.00000);
	SetDynamicObjectMaterial(belatextura40, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new belatextura41 = CreateDynamicObject(18762, 1794.57971, 808.16913, 15.27550,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura41, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFCCCCCC);
	new belatextura42 = CreateDynamicObject(18762, 1799.30371, 808.16913, 15.27350,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(belatextura42, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFCCCCCC);
	new belatextura43 = CreateDynamicObject(18762, 1801.39221, 805.65552, 15.27150,   0.00000, 90.00000, -92.00000);
	SetDynamicObjectMaterial(belatextura43, 0, 8399, "vgs_shops", "vgsclubwall05_128", 0xFFFFFFFF);
	new podunutra = CreateDynamicObject(19377, 1797.13623, 808.20093, 11.07260,   0.00000, 90.00000, -92.00000);
	SetDynamicObjectMaterial(podunutra, 0, 13007, "sw_bankint", "woodfloor1", 0xFFFFFFFF);
	new plafon = CreateDynamicObject(19377, 1797.13623, 808.20093, 15.64960,   0.00000, 90.00000, -92.00000);
	SetDynamicObjectMaterial(plafon, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFFAFAFA);
	new gorevelikozanatpis = CreateDynamicObject(19378, 1792.00879, 797.52972, 21.74050,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(gorevelikozanatpis, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFCCCCCC);
	new gorevelikozanatpis1 = CreateDynamicObject(19378, 1801.64282, 797.52972, 21.74050,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(gorevelikozanatpis1, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFCCCCCC);
	new ovdedrugaboja = CreateDynamicObject(19461, 1797.27893, 797.40369, 22.29540,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(ovdedrugaboja, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFFAFAFA);
	new okvirzavrataa = CreateDynamicObject(19429, 1799.57825, 802.12469, 11.79630,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(okvirzavrataa, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFCCCCCC);
	new okvirzavrataar = CreateDynamicObject(19429, 1799.57825, 803.19470, 11.89830,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(okvirzavrataar, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFCCCCCC);
	new nekimalinatpis = CreateDynamicObject(11737, 1798.97925, 802.16919, 14.34610,   90.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(nekimalinatpis, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFCCCCCC);
	new nekimalinatpis1 = CreateDynamicObject(11737, 1799.99622, 802.16919, 14.35010,   90.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(nekimalinatpis1, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFCCCCCC);
	new nzm = CreateDynamicObject(19366, 1801.57080, 810.76837, 10.08080,   0.00000, 0.00000, 358.01700);
	SetDynamicObjectMaterial(nzm, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFCCCCCC);
	new nzm1 = CreateDynamicObject(19366, 1801.63086, 812.45038, 10.08280,   0.00000, 0.00000, 358.01700);
	SetDynamicObjectMaterial(nzm1, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFCCCCCC);
	new nzm2 = CreateDynamicObject(19366, 1801.38440, 805.35760, 10.08080,   0.00000, 0.00000, 358.01700);
	SetDynamicObjectMaterial(nzm2, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFCCCCCC);
	new nzm3 = CreateDynamicObject(19366, 1801.35840, 804.66162, 10.08280,   0.00000, 0.00000, 358.01700);
	SetDynamicObjectMaterial(nzm3, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFCCCCCC);
	new nzm4 = CreateDynamicObject(19366, 1792.39514, 805.38019, 10.08280,   0.00000, 0.00000, 358.01700);
	SetDynamicObjectMaterial(nzm4, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFCCCCCC);
	new nzm5 = CreateDynamicObject(19366, 1792.36292, 804.41882, 10.08480,   0.00000, 0.00000, 358.01700);
	SetDynamicObjectMaterial(nzm5, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFCCCCCC);
	new nzm6 = CreateDynamicObject(19366, 1792.56824, 810.75220, 10.08480,   0.00000, 0.00000, 358.01700);
	SetDynamicObjectMaterial(nzm6, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFCCCCCC);
	new nzm7 = CreateDynamicObject(19366, 1792.60315, 811.81732, 10.08680,   0.00000, 0.00000, 358.01700);
	SetDynamicObjectMaterial(nzm7, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFCCCCCC);
	new dugackalinijag = CreateDynamicObject(19089, 1801.51819, 809.19092, 12.93160,   0.00000, 0.00000, 0.00000);
   	SetDynamicObjectMaterial(dugackalinijag, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFFAFAFA);
	new dugackalinijag1 = CreateDynamicObject(19089, 1801.43555, 806.93030, 12.93160,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(dugackalinijag1, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFFAFAFA);
	new dugackalinijag2 = CreateDynamicObject(19089, 1792.51770, 809.18988, 12.93160,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(dugackalinijag2, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFFAFAFA);
	new dugackalinijag3 = CreateDynamicObject(19089, 1792.43811, 806.95740, 12.93160,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(dugackalinijag3, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFFAFAFA);
	new dugackalinijag4 = CreateDynamicObject(19089, 1792.68616, 813.96399, 12.92180,   0.00000, 90.00000, 88.00000);
	SetDynamicObjectMaterial(dugackalinijag4, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFFAFAFA);
	new dugackalinijag5 = CreateDynamicObject(19089, 1801.54578, 810.16998, 12.92180,   0.00000, 90.00000, 88.00000);
	SetDynamicObjectMaterial(dugackalinijag5, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFFAFAFA);
	new dugackalinijag6 = CreateDynamicObject(19089, 1792.56226, 810.46399, 12.92180,   0.00000, 90.00000, 88.00000);
	SetDynamicObjectMaterial(dugackalinijag6, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFFAFAFA);
	new dugackalinijag7 = CreateDynamicObject(19089, 1801.66797, 813.66998, 12.92180,   0.00000, 90.00000, 88.00000);
	SetDynamicObjectMaterial(dugackalinijag7, 0, 8839, "vgsecarshow", "lightblue_64", 0xFFFAFAFA);

	// Small garage
	new objectid = CreateObjectEx(19377, 1517.224853, -1643.668823, 1123.418579, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19451, 1512.922851, -1643.237792, 1125.234863, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    objectid = CreateObjectEx(19451, 1512.932983, -1652.857666, 1125.234863, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    objectid = CreateObjectEx(19377, 1517.224853, -1654.129028, 1123.418579, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19377, 1517.224853, -1643.668823, 1127.009277, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateObjectEx(19451, 1517.271484, -1638.827636, 1125.234863, 0.000000, 0.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    CreateObjectEx(9093, 1516.615600, -1638.889160, 1125.194335, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(1498, 1520.439941, -1638.885986, 1123.454101, 0.000000, 0.000000, 0.000000);
    objectid = CreateObjectEx(19451, 1522.032226, -1643.237792, 1125.234863, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    objectid = CreateObjectEx(19451, 1522.032958, -1652.857666, 1125.234863, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    objectid = CreateObjectEx(19377, 1517.224853, -1654.149291, 1127.009277, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateObjectEx(19451, 1517.161743, -1649.707275, 1125.234863, 0.000000, 0.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    CreateObjectEx(19815, 1521.958862, -1644.184448, 1125.385009, 0.000000, 0.000000, 270.000000);
    CreateObjectEx(19929, 1521.474243, -1642.943847, 1123.494262, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(19929, 1521.474243, -1645.803222, 1123.494262, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(1328, 1521.372802, -1647.677978, 1123.984008, 0.000000, 0.000000, 270.000000);
    CreateObjectEx(19899, 1518.888671, -1649.152709, 1123.504028, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(19921, 1521.317626, -1644.767700, 1124.524536, 0.000000, 0.000000, -78.023918);
    CreateObjectEx(19903, 1517.034545, -1649.131347, 1123.533813, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(19917, 1521.330322, -1646.477294, 1124.424438, 0.000000, 0.000000, 174.000000);
    CreateObjectEx(1348, 1515.315185, -1649.160888, 1124.144897, 0.000000, 0.000000, 180.000000);
    CreateObjectEx(1098, 1521.330200, -1643.426879, 1124.914916, 0.000000, 0.000000, -17.151069);
    CreateObjectEx(19627, 1521.519287, -1644.724609, 1124.624633, 0.000000, 0.000000, 272.669464);
    CreateObjectEx(18634, 1521.386962, -1642.228393, 1124.434448, 0.000000, 90.000000, 155.093902);
    CreateObjectEx(16779, 1517.025878, -1644.597290, 1127.035156, 0.000000, 0.000000, 180.631195);
    CreateObjectEx(1738, 1513.752319, -1649.391357, 1124.094116, 0.000000, 0.000000, 180.000000);
    CreateObjectEx(1428, 1521.027343, -1649.170898, 1125.004516, 0.000000, 0.000000, 180.000000);
    CreateObjectEx(1098, 1513.130737, -1647.329101, 1125.744506, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(1098, 1513.130737, -1646.249023, 1125.744506, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(1098, 1513.130981, -1647.329101, 1124.714355, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(1098, 1513.130371, -1646.268554, 1124.714355, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(1185, 1513.152221, -1642.557250, 1125.574951, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(1010, 1513.028320, -1640.495727, 1124.564086, 0.000000, 90.000000, 0.000000);
    CreateObjectEx(2063, 1513.311157, -1643.594726, 1124.384521, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(1193, 1513.027954, -1639.594482, 1125.194580, 0.000000, 0.000000, 91.062004);

    // Medium garage
    objectid = CreateObjectEx(19377, 1517.224853, -1643.668823, 1373.418579, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19451, 1511.712158, -1643.237792, 1375.234863, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    objectid = CreateObjectEx(19451, 1511.712280, -1652.857666, 1375.234863, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    objectid = CreateObjectEx(19377, 1517.224853, -1654.129028, 1373.418579, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19377, 1517.224853, -1643.668823, 1377.009277, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateObjectEx(19451, 1517.271484, -1638.827636, 1375.234863, 0.000000, 0.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    CreateObjectEx(9093, 1515.464721, -1638.889160, 1375.194335, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(1498, 1519.789550, -1638.885986, 1373.454101, 0.000000, 0.000000, 0.000000);
    objectid = CreateObjectEx(19451, 1522.032226, -1643.237792, 1375.234863, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    objectid = CreateObjectEx(19451, 1522.032958, -1652.857666, 1375.234863, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    objectid = CreateObjectEx(19377, 1517.224853, -1654.149291, 1377.009277, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateObjectEx(19451, 1517.161743, -1651.258422, 1375.234863, 0.000000, 0.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    CreateObjectEx(19815, 1521.958862, -1644.184448, 1375.385009, 0.000000, 0.000000, 270.000000);
    CreateObjectEx(19929, 1521.474243, -1642.943847, 1373.494262, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(19929, 1521.474243, -1645.803222, 1373.494262, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(1328, 1521.372802, -1647.677978, 1373.984008, 0.000000, 0.000000, 270.000000);
    CreateObjectEx(19899, 1518.668579, -1650.662597, 1373.504028, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(19921, 1521.317626, -1644.767700, 1374.524536, 0.000000, 0.000000, -78.023918);
    CreateObjectEx(19903, 1516.784301, -1650.541381, 1373.533813, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(19917, 1521.330322, -1646.477294, 1374.424438, 0.000000, 0.000000, 174.000000);
    CreateObjectEx(1348, 1514.635620, -1650.671386, 1374.144897, 0.000000, 0.000000, 180.000000);
    CreateObjectEx(1098, 1521.330200, -1643.426879, 1374.914916, 0.000000, 0.000000, -17.151069);
    CreateObjectEx(19627, 1521.519287, -1644.724609, 1374.624633, 0.000000, 0.000000, 272.669464);
    CreateObjectEx(18634, 1521.386962, -1642.228393, 1374.434448, 0.000000, 90.000000, 155.093902);
    CreateObjectEx(16779, 1517.025878, -1644.597290, 1377.035156, 0.000000, 0.000000, 180.631195);
    CreateObjectEx(1738, 1512.762207, -1651.041992, 1374.094116, 0.000000, 0.000000, 180.000000);
    CreateObjectEx(1428, 1521.027343, -1650.722290, 1375.004516, 0.000000, 0.000000, 180.000000);
    CreateObjectEx(1098, 1511.920654, -1648.459716, 1375.744506, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(1098, 1511.920654, -1647.409667, 1375.744506, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(1098, 1511.920654, -1648.459716, 1374.724487, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(1098, 1511.920654, -1647.409667, 1374.724487, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(1185, 1512.062988, -1643.247314, 1375.574951, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(1010, 1511.827880, -1640.815917, 1374.564086, 0.000000, 90.000000, 0.000000);
    CreateObjectEx(2063, 1512.140991, -1644.314697, 1374.384521, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(1193, 1511.774658, -1639.957275, 1375.194580, 0.000000, 0.000000, 91.062004);
    objectid = CreateObjectEx(19377, 1507.614990, -1643.668823, 1373.418579, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19377, 1507.614990, -1654.158447, 1373.418579, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19377, 1507.604125, -1643.668823, 1377.009277, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateObjectEx(19377, 1507.604125, -1654.168457, 1377.009277, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateObjectEx(19451, 1507.531738, -1651.258422, 1375.234863, 0.000000, 0.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    objectid = CreateObjectEx(19451, 1507.661621, -1638.827636, 1375.234863, 0.000000, 0.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);

	// Large garage
	CreateObjectEx(11389, 1665.187500, -2352.026367, 1537.641723, 0.000000, 0.000000, 0.000000);
    objectid = CreateObjectEx(19377, 1668.767822, -2340.866943, 1534.396972, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19377, 1658.277832, -2340.866943, 1534.396972, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19377, 1668.767822, -2350.427001, 1534.396972, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19377, 1668.767822, -2360.037597, 1534.396972, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19377, 1668.767822, -2369.637939, 1534.396972, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19377, 1658.277832, -2350.467041, 1534.396972, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19377, 1658.277832, -2360.087646, 1534.396972, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19377, 1658.277832, -2369.697265, 1534.396972, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19377, 1661.437255, -2363.377929, 1540.185913, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateObjectEx(19377, 1671.937988, -2363.377929, 1540.185913, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateObjectEx(19377, 1671.937988, -2353.787353, 1540.185913, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateObjectEx(19377, 1671.937988, -2344.167480, 1540.185913, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateObjectEx(19377, 1671.937988, -2334.539306, 1540.185913, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateObjectEx(19377, 1661.437988, -2353.787353, 1540.185913, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateObjectEx(19377, 1661.527465, -2344.167480, 1540.185913, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateObjectEx(19377, 1661.509521, -2334.539306, 1540.185913, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    CreateObjectEx(2885, 1674.234375, -2340.028320, 1541.174072, 0.000000, 0.000000, 270.000000);
    CreateObjectEx(2885, 1674.234375, -2348.668212, 1541.174072, 0.000000, 0.000000, 270.000000);
    objectid = CreateObjectEx(19377, 1679.248168, -2340.866943, 1534.396972, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19377, 1679.248168, -2350.476562, 1534.396972, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    CreateObjectEx(2885, 1660.494262, -2368.226806, 1541.143798, 0.000000, 0.000000, 180.000000);
    CreateObjectEx(11390, 1665.046875, -2351.977050, 1538.903198, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(11391, 1657.228515, -2360.088378, 1535.773193, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(11393, 1669.819946, -2357.343994, 1536.022583, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(19817, 1662.070068, -2340.035888, 1533.891967, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(19872, 1659.912719, -2348.421630, 1533.882324, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(19903, 1658.435546, -2345.552978, 1534.542480, 0.000000, 0.000000, -47.000000);
    CreateObjectEx(19377, 1656.129028, -2362.886718, 1539.213256, 90.000000, 0.000000, 0.000000);
    CreateObjectEx(19377, 1656.129028, -2352.425048, 1539.213256, 90.000000, 0.000000, 0.000000);
    CreateObjectEx(19377, 1656.129028, -2341.955322, 1539.213256, 90.000000, 0.000000, 0.000000);
    CreateObjectEx(19377, 1656.129028, -2331.505126, 1539.213256, 90.000000, 0.000000, 0.000000);
    CreateObjectEx(19377, 1661.448364, -2335.926269, 1539.213256, 90.000000, 0.000000, 90.000000);
    CreateObjectEx(19377, 1671.927612, -2335.926269, 1539.213256, 90.000000, 0.000000, 90.000000);
    CreateObjectEx(19377, 1671.157470, -2368.107421, 1539.213256, 90.000000, 0.000000, 90.000000);
    CreateObjectEx(19377, 1674.139404, -2363.225585, 1539.213256, 90.000000, 0.000000, 0.000000);
    CreateObjectEx(19377, 1674.149414, -2359.344726, 1539.213256, 90.000000, 0.000000, 0.000000);
    CreateObjectEx(19437, 1666.590942, -2361.146240, 1535.482910, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(19437, 1666.300659, -2361.146240, 1535.482910, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(19437, 1666.350463, -2363.697021, 1534.622070, 90.000000, 0.000000, 0.000000);
    CreateObjectEx(19437, 1666.350463, -2367.177734, 1534.622070, 90.000000, 0.000000, 0.000000);
    CreateObjectEx(19437, 1667.490478, -2367.398193, 1535.482910, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(19437, 1669.050048, -2367.398193, 1535.482910, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(19437, 1670.640380, -2367.398193, 1535.482910, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(19437, 1672.190063, -2367.398193, 1535.482910, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(19437, 1674.090454, -2367.398193, 1535.482910, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(19377, 1674.367797, -2348.886474, 1539.123413, 90.000000, 0.000000, 0.000000);
    CreateObjectEx(19377, 1674.367797, -2338.387207, 1539.123413, 90.000000, 0.000000, 0.000000);
    CreateObjectEx(19377, 1660.698242, -2368.378906, 1539.123413, 90.000000, 0.000000, 90.000000);
    CreateObjectEx(19377, 1660.257812, -2368.418945, 1539.123413, 90.000000, 0.000000, 90.000000);
    objectid = CreateObjectEx(19369, 1666.348266, -2366.564208, 1537.142822, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);
    objectid = CreateObjectEx(19369, 1666.348266, -2363.353759, 1537.142822, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);
    objectid = CreateObjectEx(19369, 1666.348266, -2362.022460, 1537.142822, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);
    objectid = CreateObjectEx(19369, 1667.818969, -2357.771972, 1537.142822, 0.000000, 0.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);
    objectid = CreateObjectEx(19369, 1670.998901, -2357.771972, 1537.142822, 0.000000, 0.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);
    objectid = CreateObjectEx(19369, 1673.869873, -2357.771972, 1537.142822, 0.000000, 0.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);
    objectid = CreateObjectEx(19369, 1673.898559, -2359.502197, 1537.142822, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);
    objectid = CreateObjectEx(19369, 1673.878540, -2362.103515, 1537.142822, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);
    objectid = CreateObjectEx(19369, 1673.878540, -2365.273437, 1537.142822, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);
    objectid = CreateObjectEx(19369, 1673.878540, -2368.443115, 1537.142822, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);
    objectid = CreateObjectEx(19377, 1671.468505, -2363.267089, 1537.988037, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);
    objectid = CreateObjectEx(9131, 1666.443969, -2358.310058, 1535.482910, 0.000000, 0.000000, 270.520568);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);

    // Prison & SASD Interior (Main)
    CreateDynamicObject(8419,1219.29980469,-1342.50000000,784.02398682,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1200.89941406,-1331.29980469,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1205.69995117,-1328.09997559,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1200.89941406,-1326.50000000,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1200.90002441,-1329.69995117,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19385,1205.69995117,-1331.30004883,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1200.90002441,-1332.90002441,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(8419,1219.39941406,-1342.50000000,814.40002441,179.99450684,0.00000000,0.00000000);
	CreateDynamicObject(19377,1200.59997559,-1331.40002441,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(3280,1206.59997559,-1327.40002441,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1206.59997559,-1329.00000000,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1206.59997559,-1330.59997559,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1206.59997559,-1332.19995117,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1206.59997559,-1333.80004883,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1200.90002441,-1332.90002441,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19385,1205.69995117,-1331.30004883,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1205.69995117,-1328.09997559,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1200.90002441,-1329.69995117,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1200.90002441,-1326.50000000,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1200.90002441,-1331.30004883,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1220.09960938,-1326.50000000,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1220.09997559,-1326.50000000,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19377,1220.40002441,-1331.40002441,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(3280,1214.40002441,-1327.40002441,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1215.30004883,-1328.09997559,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1215.29980469,-1328.09960938,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1215.30004883,-1331.30004883,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1215.30004883,-1331.30004883,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1220.09997559,-1329.69995117,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1220.09997559,-1329.69995117,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1220.19921875,-1331.29980469,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1215.30004883,-1334.50000000,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1215.30004883,-1337.69995117,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1215.30004883,-1340.90002441,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19377,1220.39941406,-1341.00000000,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19385,1215.30004883,-1334.50000000,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1215.30004883,-1337.69995117,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1215.30004883,-1340.90002441,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1220.09997559,-1332.90002441,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1220.09997559,-1336.09997559,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1220.09997559,-1339.19995117,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1220.09997559,-1342.50000000,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1220.09997559,-1342.50000000,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1220.09997559,-1339.19995117,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1220.09997559,-1336.09997559,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1220.09997559,-1332.90002441,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1220.19921875,-1340.89941406,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1220.19921875,-1340.89941406,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1205.69995117,-1334.50000000,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1200.90002441,-1336.09997559,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19385,1205.69921875,-1337.69921875,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1200.90002441,-1339.30004883,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19385,1205.69995117,-1340.90002441,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1200.90002441,-1342.50000000,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19377,1200.59960938,-1341.00000000,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19447,1200.89941406,-1340.89941406,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1200.90002441,-1340.90002441,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1205.69995117,-1334.50000000,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1205.69995117,-1337.69995117,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1205.69995117,-1340.90002441,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1200.90002441,-1342.50000000,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1200.90002441,-1339.30004883,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1200.90002441,-1336.09997559,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(3280,1206.59997559,-1335.40002441,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1206.59997559,-1337.00000000,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1206.59997559,-1338.59997559,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1206.59997559,-1340.19995117,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1206.59997559,-1341.80004883,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1214.40002441,-1329.00000000,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1214.40002441,-1330.59997559,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1214.40002441,-1332.19995117,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1214.40002441,-1333.80004883,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1214.40002441,-1335.40002441,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1214.40002441,-1337.00000000,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1214.40002441,-1338.59997559,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1214.40002441,-1340.19995117,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1214.40002441,-1341.80004883,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1212.80004883,-1327.40002441,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1211.19995117,-1327.40002441,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1209.59997559,-1327.40002441,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1208.09997559,-1327.40002441,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1210.50000000,-1326.50000000,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1220.19995117,-1331.30004883,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19377,1209.89941406,-1321.89941406,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19377,1210.50000000,-1326.59997559,807.70001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19377,1215.19995117,-1331.40002441,807.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19377,1215.19995117,-1341.00000000,807.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19377,1205.80004883,-1331.40002441,807.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19377,1205.79980469,-1341.00000000,807.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1214.40002441,-1343.40002441,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1214.40002441,-1345.00000000,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1206.59997559,-1343.40002441,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3280,1206.59997559,-1345.00000000,799.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1215.30004883,-1344.09997559,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1220.09960938,-1345.69921875,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1220.09960938,-1345.69921875,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19385,1215.29980469,-1344.09960938,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1205.69995117,-1344.09997559,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1200.89941406,-1345.69921875,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19377,1210.50000000,-1326.59997559,790.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19377,1205.80004883,-1331.40002441,790.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19377,1205.79980469,-1341.00000000,790.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19377,1215.19995117,-1331.40002441,790.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19377,1215.19995117,-1341.00000000,790.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1200.89941406,-1345.69921875,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19385,1205.69995117,-1344.09997559,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(8572,1204.50000000,-1346.69995117,798.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1199.19921875,-1350.50000000,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1200.19921875,-1350.50000000,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19377,1195.09960938,-1350.59960938,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(16645,1198.09997559,-1328.40002441,799.09997559,0.00000000,0.00000000,180.00000000);
	CreateDynamicObject(16645,1198.09997559,-1331.69995117,799.09997559,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(16645,1198.09997559,-1334.90002441,799.09997559,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(16645,1198.09997559,-1338.09997559,799.09997559,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(16645,1198.09997559,-1341.30004883,799.09997559,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(16645,1198.09997559,-1344.50000000,799.09997559,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(16645,1198.09997559,-1344.50000000,802.70001221,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(16645,1198.09960938,-1341.29980469,802.70001221,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(16645,1198.09997559,-1338.09997559,802.70001221,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(16645,1198.09997559,-1334.90002441,802.70001221,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(16645,1198.09997559,-1331.69995117,802.70001221,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(16645,1198.09960938,-1328.50000000,802.70001221,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(16645,1222.90002441,-1343.80004883,802.67999268,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16645,1222.90002441,-1340.50000000,799.09997559,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16645,1222.90002441,-1337.30004883,799.09997559,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16645,1222.90002441,-1334.19995117,802.67999268,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16645,1222.90002441,-1331.00000000,799.09997559,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16645,1222.90002441,-1327.80004883,799.09997559,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16645,1222.89941406,-1331.00000000,799.09997559,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16645,1222.90002441,-1327.80004883,802.67999268,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16645,1222.90002441,-1331.00000000,802.67999268,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16645,1222.89941406,-1334.19921875,799.09997559,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16645,1222.90002441,-1337.30004883,802.67999268,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16645,1222.90002441,-1340.50000000,802.67999268,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16645,1222.89941406,-1343.79980469,799.09997559,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1205.69995117,-1321.59997559,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1215.30004883,-1321.80004883,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19450,1215.19921875,-1316.00000000,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19377,1209.89941406,-1312.29980469,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19447,1205.00000000,-1355.30004883,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1214.59960938,-1355.29980469,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19355,1219.39941406,-1353.69921875,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1219.39941406,-1350.50000000,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19355,1219.40002441,-1347.30004883,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1218.40002441,-1350.50000000,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1195.39941406,-1355.29980469,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19377,1205.59960938,-1359.09960938,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19377,1216.09997559,-1359.09997559,799.20300293,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19377,1223.50000000,-1350.59960938,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19355,1221.00000000,-1355.30004883,797.50000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19385,1224.19921875,-1355.29980469,797.50000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19355,1227.39941406,-1355.29980469,797.50000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19447,1229.00000000,-1350.50000000,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19450,1229.09960938,-1350.50000000,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19377,1230.89941406,-1341.00000000,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19377,1230.89941406,-1331.39941406,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19447,1224.89941406,-1340.89941406,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19388,1215.19921875,-1310.00000000,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19388,1230.59960938,-1355.19921875,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19385,1230.56250000,-1355.29980469,797.50000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19355,1233.69995117,-1355.30004883,797.50000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19447,1235.19995117,-1360.09997559,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1227.59997559,-1360.09997559,795.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1227.59960938,-1360.09960938,799.79998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19377,1226.59960938,-1360.19921875,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19385,1227.50000000,-1345.69995117,797.50000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19355,1224.30004883,-1345.70104980,797.50000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19388,1232.19921875,-1344.09960938,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19450,1237.09960938,-1350.39941406,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19450,1241.89941406,-1345.59960938,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19377,1237.59997559,-1347.30004883,799.09997559,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19377,1237.59960938,-1337.69921875,799.09997559,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19450,1232.19995117,-1337.69995117,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19450,1229.09997559,-1340.90002441,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19388,1230.59997559,-1345.40002441,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19358,1216.79980469,-1312.91210938,797.50000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19388,1220.00000000,-1312.91210938,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19358,1223.20104980,-1312.91296387,797.50000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19447,1229.00000000,-1340.90002441,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1229.00000000,-1331.30004883,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19358,1215.40002441,-1314.59997559,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19358,1215.40002441,-1317.80004883,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19358,1224.79980469,-1314.50000000,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19358,1224.79980469,-1317.69921875,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1229.00000000,-1321.69995117,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1227.39941406,-1326.50000000,797.50000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19355,1224.19995117,-1326.50097656,797.50000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19355,1224.90002441,-1318.50000000,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1227.40002441,-1316.90002441,797.50000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19428,1225.59997559,-1316.90100098,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19401,1216.89941406,-1319.59960938,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19401,1220.09960938,-1319.59960938,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19401,1223.30004883,-1319.59997559,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19404,1216.90100098,-1319.40100098,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19404,1220.10095215,-1319.40100098,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19404,1223.30102539,-1319.40100098,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19388,1227.43652344,-1316.80078125,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19431,1225.59997559,-1316.80004883,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19450,1229.09960938,-1331.29980469,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19450,1229.09997559,-1321.69995117,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19388,1232.19995117,-1331.30004883,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19450,1232.19921875,-1324.89941406,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19450,1232.19921875,-1312.09960938,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19388,1232.19995117,-1318.50000000,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16101,1229.09960938,-1316.79980469,795.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19450,1220.09960938,-1308.00000000,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19450,1229.69921875,-1308.00000000,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19388,1230.59960938,-1326.79980469,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19355,1224.90002441,-1321.69995117,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19385,1224.90002441,-1324.90002441,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19377,1230.90002441,-1321.80004883,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19377,1230.89941406,-1312.19921875,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19377,1220.40002441,-1321.80004883,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19377,1220.40002441,-1312.19995117,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19377,1237.09997559,-1360.09997559,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19447,1220.89941406,-1364.89941406,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1211.30004883,-1364.90002441,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1201.69921875,-1364.89941406,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19447,1204.59997559,-1360.09997559,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19377,1195.09997559,-1360.19995117,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19377,1205.59997559,-1368.69995117,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19377,1216.09960938,-1368.69921875,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19447,1210.40002441,-1326.50000000,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19450,1210.50000000,-1320.79980469,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19358,1233.90002441,-1355.19995117,801.00000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19358,1232.19995117,-1350.50000000,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19450,1237.00000000,-1355.19995117,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19450,1237.00000000,-1352.09997559,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19377,1227.09997559,-1350.59997559,799.20098877,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(14877,1236.30004883,-1353.59997559,797.09997559,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19377,1242.40002441,-1356.90002441,799.20098877,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19450,1237.00000000,-1352.09997559,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19358,1232.19921875,-1347.29980469,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19358,1237.09997559,-1355.19995117,801.00000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19388,1240.30004883,-1355.19995117,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19450,1241.80004883,-1356.90002441,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19450,1237.00000000,-1361.69921875,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19450,1227.40002441,-1361.69995117,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19450,1232.30004883,-1350.40002441,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19388,1230.69995117,-1355.19995117,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19450,1229.09997559,-1360.00000000,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19358,1227.50000000,-1355.19995117,801.00000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19388,1224.30004883,-1355.19995117,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19450,1227.40002441,-1352.09997559,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19450,1222.69995117,-1349.59997559,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19401,1208.09997559,-1354.40100098,801.00000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19401,1213.09997559,-1354.40100098,801.00000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19401,1210.59997559,-1354.40002441,801.00000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19355,1216.30004883,-1354.40002441,801.00000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19355,1219.50000000,-1354.40002441,801.00000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19447,1201.69995117,-1354.40002441,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19358,1221.09997559,-1357.59997559,801.00000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19358,1217.90002441,-1357.59997559,801.00000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19358,1216.30004883,-1356.00000000,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19358,1222.69995117,-1356.00000000,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19450,1217.80004883,-1361.69995117,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19450,1208.19995117,-1361.69995117,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19450,1198.59960938,-1361.69921875,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19450,1225.90002441,-1360.00000000,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19450,1200.30004883,-1359.19995117,801.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19404,1213.09960938,-1354.60058594,801.00000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19404,1210.59960938,-1354.59960938,801.00000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19404,1208.09997559,-1354.60095215,801.00000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19358,1216.30004883,-1354.59997559,801.00000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19450,1201.69995117,-1354.59997559,801.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19428,1205.69995117,-1346.80004883,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19428,1207.29980469,-1346.79980469,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19428,1206.50000000,-1345.69995117,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19428,1206.50000000,-1347.59997559,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19428,1205.70104980,-1346.50000000,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19428,1207.30102539,-1346.50000000,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19379,1234.39941406,-1350.39941406,795.70001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1234.40002441,-1340.80004883,795.70001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1234.39941406,-1331.19921875,795.70001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1234.40002441,-1321.59997559,795.70001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1244.90002441,-1350.40002441,795.70001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1244.90002441,-1340.80004883,795.70001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1244.90002441,-1331.19995117,795.70001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1244.89941406,-1321.59960938,795.70001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1244.90002441,-1312.00000000,795.70001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1234.40002441,-1312.00000000,795.70001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1223.90002441,-1312.00000000,795.70001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1213.40002441,-1312.00000000,795.70001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1202.89941406,-1312.00000000,795.70001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1219.59997559,-1314.50000000,795.70098877,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1210.00000000,-1316.00000000,795.70202637,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19450,1239.29980469,-1308.00000000,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19450,1241.90002441,-1336.00000000,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19450,1241.90002441,-1326.40002441,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19450,1241.89941406,-1316.79980469,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19450,1241.90002441,-1307.19995117,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19377,1237.59997559,-1328.09997559,799.09997559,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19377,1237.59997559,-1318.50000000,799.09997559,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19377,1237.59997559,-1308.90002441,799.09997559,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1242.40100098,-1357.00000000,799.29998779,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1227.09997559,-1357.00000000,799.29998779,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1223.59997559,-1357.00000000,799.30102539,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1213.09960938,-1359.50000000,799.29998779,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1202.59960938,-1359.50000000,799.29998779,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19379,1235.40002441,-1360.09997559,799.30200195,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19450,1205.79980469,-1315.89941406,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19450,1210.50000000,-1308.00000000,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19450,1205.79980469,-1306.29980469,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19466,1210.69995117,-1354.59997559,801.40002441,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19466,1213.09960938,-1354.59960938,801.40002441,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19466,1208.09997559,-1354.59997559,801.40002441,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(16644,1207.69921875,-1354.50000000,809.79998779,0.00000000,90.00000000,90.00000000);
	CreateDynamicObject(16644,1210.19995117,-1354.50000000,809.79998779,0.00000000,90.00000000,90.00000000);
	CreateDynamicObject(1892,1212.59997559,-1310.50000000,795.76000977,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1569,1205.83996582,-1315.80004883,795.79998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1569,1205.83996582,-1312.80004883,795.79998779,0.00000000,0.00000000,269.79992676);
	CreateDynamicObject(19379,1210.30004883,-1308.09997559,804.20001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19379,1210.30004883,-1309.90002441,804.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19379,1210.30004883,-1311.50000000,804.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19379,1210.30004883,-1313.30004883,804.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19379,1210.30004883,-1314.80004883,804.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19379,1210.30004883,-1316.30004883,804.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19379,1210.30004883,-1317.80004883,804.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19379,1210.30004883,-1319.30004883,804.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19379,1210.30004883,-1320.69995117,804.20001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19379,1205.80395508,-1315.90002441,804.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19379,1205.80297852,-1306.30004883,804.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19379,1215.09997559,-1315.80004883,804.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19379,1215.09997559,-1306.19995117,804.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19379,1210.30004883,-1308.02001953,790.65002441,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19379,1205.80297852,-1308.00000000,790.65002441,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19379,1205.80297852,-1316.00000000,790.65002441,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19379,1210.30004883,-1320.79003906,790.65002441,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19379,1215.18994141,-1315.90002441,790.65100098,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19379,1215.19201660,-1315.54199219,790.65002441,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19379,1215.18994141,-1304.42004395,790.65002441,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2310,1209.59997559,-1308.69995117,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(3657,1228.50000000,-1330.19995117,796.20001221,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(3657,1228.50000000,-1335.80004883,796.20001221,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(3657,1228.50000000,-1341.39941406,796.20001221,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(3055,1212.09997559,-1316.90002441,794.00097656,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(3055,1212.10058594,-1314.89941406,794.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(3055,1212.09997559,-1305.09997559,794.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2117,1212.59997559,-1312.50000000,796.04998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2117,1212.59997559,-1314.50000000,796.04998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2117,1212.59960938,-1316.50000000,796.04998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2117,1212.59997559,-1318.50000000,796.04998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2117,1212.59997559,-1320.50000000,796.04998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(3055,1213.00000000,-1314.90002441,794.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(3055,1213.00097656,-1317.00000000,794.00097656,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2117,1212.59997559,-1308.50000000,796.04998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(3055,1213.00000000,-1305.09997559,794.00000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2117,1212.59997559,-1308.18005371,795.40002441,0.00000000,270.00000000,90.00000000);
	CreateDynamicObject(2117,1212.59997559,-1311.77502441,796.40002441,0.00000000,90.00000000,90.00000000);
	CreateDynamicObject(19388,1215.19995117,-1306.80004883,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19379,1212.17004395,-1315.90002441,790.65002441,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19379,1212.17199707,-1315.79003906,790.65002441,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19379,1212.17004395,-1304.16894531,790.65002441,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2117,1212.59997559,-1313.79003906,796.40002441,0.00000000,90.00000000,90.00000000);
	CreateDynamicObject(2117,1212.59997559,-1315.79003906,796.40002441,0.00000000,90.00000000,90.00000000);
	CreateDynamicObject(2117,1212.59960938,-1317.79003906,796.40002441,0.00000000,90.00000000,90.00000000);
	CreateDynamicObject(2117,1212.59960938,-1319.79003906,796.40002441,0.00000000,90.00000000,90.00000000);
	CreateDynamicObject(2165,1212.61914062,-1314.59960938,796.05999756,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2165,1212.59997559,-1318.50000000,796.05999756,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1208.90002441,-1308.69995117,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1208.19995117,-1308.69995117,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1206.40002441,-1318.19995117,796.29998779,0.00000000,0.00000000,180.00000000);
	CreateDynamicObject(2111,1206.80004883,-1319.69995117,796.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2310,1206.40002441,-1317.50000000,796.29998779,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(2310,1206.40002441,-1316.80004883,796.29998779,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(2310,1208.69995117,-1320.30004883,796.29998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2310,1209.39941406,-1320.29980469,796.29998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2310,1210.09997559,-1320.30004883,796.29998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2186,1214.69995117,-1319.30004883,795.79998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2197,1214.00000000,-1315.69995117,795.79998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2197,1214.00000000,-1314.30004883,795.79998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2197,1214.00000000,-1315.00000000,795.79998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(948,1206.19995117,-1316.09997559,795.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(948,1206.19921875,-1312.50000000,795.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2852,1207.00000000,-1319.59997559,796.59997559,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19379,1201.09997559,-1315.80004883,793.09997559,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19379,1201.09997559,-1312.80004883,793.09997559,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(18613,1204.19995117,-1315.09997559,798.29998779,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(18613,1204.19995117,-1313.50000000,798.29998779,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19466,1223.50000000,-1319.50000000,797.90002441,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19466,1220.19995117,-1319.50000000,797.90002441,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19466,1217.00000000,-1319.50000000,797.90002441,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2117,1223.40002441,-1319.90002441,795.70098877,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2117,1221.50000000,-1319.90002441,795.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2117,1219.59997559,-1319.90002441,795.70098877,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2117,1217.69995117,-1319.90002441,795.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3055,1219.20104980,-1320.30004883,793.64001465,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2117,1215.80004883,-1319.90002441,795.70098877,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3055,1220.90002441,-1320.30102539,793.64001465,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2310,1216.80004883,-1321.00000000,796.20001221,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2310,1220.09997559,-1321.00000000,796.20001221,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2310,1223.40002441,-1321.00000000,796.20001221,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19428,1218.50000000,-1320.19995117,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19428,1221.69921875,-1320.19921875,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2117,1215.80004883,-1319.00000000,795.70098877,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2117,1217.69995117,-1319.00000000,795.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2117,1219.59997559,-1319.00000000,795.70098877,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2117,1221.50000000,-1319.00000000,795.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2117,1223.40002441,-1319.00000000,795.70098877,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3055,1220.90002441,-1318.50097656,793.64001465,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3055,1219.30004883,-1318.50000000,793.64001465,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19431,1221.69995117,-1318.80004883,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19431,1218.50000000,-1318.80004883,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2310,1223.40002441,-1317.90002441,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1220.09997559,-1317.90002441,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1216.90002441,-1317.90002441,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1269,1220.09997559,-1318.90002441,796.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1269,1220.09997559,-1320.00000000,796.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1269,1223.30004883,-1318.90002441,796.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1269,1216.90002441,-1318.90002441,796.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1269,1216.90002441,-1320.00000000,796.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1269,1223.30004883,-1320.00000000,796.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2230,1220.95996094,-1318.40002441,796.02001953,270.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2230,1217.76000977,-1318.40002441,796.02001953,270.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2230,1224.16003418,-1318.40002441,796.02001953,270.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2230,1224.15917969,-1319.90002441,796.02001953,270.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2230,1220.95996094,-1319.90002441,796.02001953,270.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2230,1217.75976562,-1319.90002441,796.02001953,270.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1216,1225.30004883,-1319.69995117,796.40002441,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1216,1225.30004883,-1322.19995117,796.40002441,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1216.40002441,-1313.40002441,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1217.09997559,-1313.40002441,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1217.80004883,-1313.40002441,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1222.90002441,-1313.40002441,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1222.19995117,-1313.40002441,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1223.59997559,-1313.40002441,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(948,1218.59997559,-1313.40002441,795.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(948,1221.30004883,-1313.40002441,795.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2007,1231.59997559,-1308.59997559,795.79998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3055,1228.19995117,-1310.19995117,793.84997559,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2007,1230.59997559,-1308.59997559,795.79998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2007,1229.59997559,-1308.59997559,795.79998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2007,1228.59997559,-1308.59997559,795.79998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2117,1224.80004883,-1310.69995117,795.90002441,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2117,1226.80004883,-1310.69995117,795.90002441,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2117,1228.80004883,-1310.69995117,795.90002441,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2117,1230.69995117,-1310.69995117,795.90002441,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3055,1228.19995117,-1311.09997559,793.84997559,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2117,1225.09997559,-1310.69995117,795.29998779,0.00000000,270.00000000,0.00000000);
	CreateDynamicObject(2007,1228.59960938,-1308.59960938,797.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2007,1229.59997559,-1308.59997559,797.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2007,1230.59997559,-1308.59997559,797.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2007,1231.59997559,-1308.59997559,797.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2186,1225.00000000,-1308.59960938,795.79998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2165,1231.59997559,-1310.69995117,795.90002441,0.00000000,0.00000000,180.00000000);
	CreateDynamicObject(2165,1227.79980469,-1310.69921875,795.90002441,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(2117,1227.09960938,-1310.69921875,795.29998779,0.00000000,270.00000000,0.00000000);
	CreateDynamicObject(2117,1229.09997559,-1310.69995117,795.29998779,0.00000000,270.00000000,0.00000000);
	CreateDynamicObject(2117,1231.09997559,-1310.69995117,795.29998779,0.00000000,270.00000000,0.00000000);
	CreateDynamicObject(16101,1224.80004883,-1312.90002441,795.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16101,1215.19921875,-1345.79980469,795.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16101,1215.19995117,-1345.80004883,800.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16101,1207.29980469,-1347.59960938,795.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16101,1207.30004883,-1347.59997559,800.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16101,1207.29980469,-1345.69921875,795.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16101,1207.30004883,-1345.69995117,800.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(16101,1207.40002441,-1328.09997559,799.20001221,0.00000000,180.00000000,0.00000000);
	CreateDynamicObject(16101,1213.59997559,-1328.09997559,799.20001221,0.00000000,179.99450684,0.00000000);
	CreateDynamicObject(16101,1213.69995117,-1345.59997559,799.20001221,0.00000000,179.99450684,0.00000000);
	CreateDynamicObject(16101,1205.79980469,-1345.79980469,797.79998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2310,1221.09960938,-1309.09960938,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2310,1219.00000000,-1309.30004883,796.29998779,0.00000000,0.00000000,180.00000000);
	CreateDynamicObject(2165,1220.09997559,-1309.69995117,795.79998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2137,1233.69995117,-1340.19995117,795.79998779,0.00000000,0.00000000,180.00000000);
	CreateDynamicObject(2138,1239.52929688,-1340.19921875,795.79998779,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(2140,1232.80004883,-1338.30004883,795.79998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2303,1229.50000000,-1323.09997559,795.79998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2305,1234.69995117,-1355.80004883,795.80102539,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2135,1238.56933594,-1340.20605469,795.79998779,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(2136,1234.60803223,-1362.31396484,795.79998779,0.00000000,0.00000000,269.98901367);
	CreateDynamicObject(2137,1232.79980469,-1339.29980469,795.79998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2137,1234.67968750,-1340.19921875,795.79998779,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(2139,1236.03198242,-1337.30004883,795.79998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2140,1232.80004883,-1337.32995605,795.79998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2138,1240.50000000,-1340.19995117,795.79998779,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(2139,1237.02197266,-1337.30004883,795.79998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2139,1238.00000000,-1337.30004883,795.79998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2139,1238.02734375,-1336.27636719,795.79998779,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(2139,1237.05004883,-1336.27636719,795.79998779,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(2139,1236.05859375,-1336.27539062,795.79998779,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(3383,1236.69995117,-1335.30004883,800.40002441,320.00000000,179.99450684,0.00000000);
	CreateDynamicObject(3383,1237.30004883,-1338.40002441,800.40002441,319.99877930,179.99450684,180.00000000);
	CreateDynamicObject(1723,1241.19995117,-1324.09997559,795.79998779,0.00000000,0.00000000,180.00000000);
	CreateDynamicObject(1724,1237.80004883,-1323.09997559,795.79998779,0.00000000,0.00000000,89.99572754);
	CreateDynamicObject(2357,1237.90002441,-1332.30004883,796.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2357,1237.90002441,-1328.69995117,796.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2310,1239.30004883,-1333.50000000,796.29998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2310,1238.59997559,-1333.50000000,796.29998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2310,1237.19995117,-1333.50000000,796.29998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2310,1236.50000000,-1333.50000000,796.29998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2310,1237.90002441,-1333.50000000,796.29998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2310,1239.30004883,-1329.80004883,796.29998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2310,1238.59997559,-1329.80004883,796.29998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2310,1237.90002441,-1329.80004883,796.29998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2310,1237.19995117,-1329.80004883,796.29998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2310,1236.50000000,-1329.80004883,796.29998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2310,1236.50000000,-1331.19995117,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1237.19995117,-1331.19995117,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1237.90002441,-1331.19995117,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1238.59997559,-1331.19995117,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1239.30004883,-1331.19995117,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1239.30004883,-1327.59997559,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1238.59997559,-1327.59997559,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1237.90002441,-1327.59997559,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1237.19995117,-1327.59997559,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2310,1236.50000000,-1327.59997559,796.29998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19358,1233.80004883,-1324.80004883,797.50000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19358,1240.19995117,-1324.80004883,797.50000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19358,1243.40002441,-1324.80004883,797.50000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2964,1236.79980469,-1311.59960938,795.79998779,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(1723,1239.19995117,-1320.90002441,795.79998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1737,1239.69995117,-1322.59997559,795.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2297,1241.50000000,-1315.50000000,795.79998779,0.00000000,0.00000000,225.00000000);
	CreateDynamicObject(1723,1237.90002441,-1317.30004883,795.79998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1737,1239.59997559,-1316.80004883,795.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2303,1229.50000000,-1324.09997559,795.79998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2303,1229.50000000,-1322.09997559,795.79998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2303,1229.50000000,-1322.09997559,796.79998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2303,1229.50000000,-1323.09997559,796.79998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2303,1229.50000000,-1324.09997559,796.79998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2303,1229.50000000,-1325.09997559,795.79998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19450,1237.09997559,-1340.80004883,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2138,1237.59960938,-1340.19921875,795.79998779,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(1502,1229.81494141,-1345.43005371,795.73999023,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1502,1229.81640625,-1326.81933594,795.73999023,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2007,1227.59997559,-1308.59997559,797.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2007,1227.59997559,-1308.59997559,795.79998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1502,1226.65002441,-1316.88000488,795.73999023,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2165,1232.80004883,-1346.00000000,795.79998779,0.00000000,0.00000000,359.99450684);
	CreateDynamicObject(2165,1236.69995117,-1346.00000000,795.79998779,0.00000000,0.00000000,359.99450684);
	CreateDynamicObject(2165,1240.30004883,-1346.00000000,795.79998779,0.00000000,0.00000000,359.98901367);
	CreateDynamicObject(2165,1236.69995117,-1348.69995117,795.79998779,0.00000000,0.00000000,359.98901367);
	CreateDynamicObject(2165,1232.80004883,-1348.69995117,795.79998779,0.00000000,0.00000000,359.98901367);
	CreateDynamicObject(2165,1240.30004883,-1348.69995117,795.79998779,0.00000000,0.00000000,359.98901367);
	CreateDynamicObject(2166,1241.30004883,-1341.90002441,795.79998779,0.00000000,0.00000000,180.00000000);
	CreateDynamicObject(2165,1239.30004883,-1342.90002441,795.79998779,0.00000000,0.00000000,180.00000000);
	CreateDynamicObject(2186,1234.90002441,-1341.50000000,795.79998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1671,1233.30004883,-1349.69995117,796.20001221,0.00000000,0.00000000,180.00000000);
	CreateDynamicObject(1671,1237.30004883,-1349.69995117,796.20001221,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(1671,1240.80004883,-1349.80004883,796.20001221,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(1671,1240.80004883,-1346.90002441,796.20001221,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(1671,1237.30004883,-1346.90002441,796.20001221,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(1671,1233.30004883,-1346.90002441,796.20001221,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(1671,1238.80004883,-1341.80004883,796.20001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2612,1237.30004883,-1341.00000000,797.79998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2611,1241.69995117,-1344.50000000,797.70001221,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2616,1235.09997559,-1350.19995117,797.70001221,0.00000000,0.00000000,180.00000000);
	CreateDynamicObject(2400,1232.30004883,-1355.30004883,799.59997559,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2400,1236.00000000,-1355.30004883,799.59997559,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(14401,1240.09997559,-1373.19995117,799.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(14401,1247.50000000,-1373.19921875,799.70001221,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(14782,1232.29980469,-1361.19921875,800.40002441,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(14782,1238.50000000,-1361.19995117,800.40002441,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(2689,1238.90002441,-1355.69995117,800.09997559,0.00000000,0.00000000,180.00000000);
	CreateDynamicObject(2704,1238.26000977,-1355.59997559,800.92999268,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2843,1236.50000000,-1360.69995117,799.40002441,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2846,1233.00000000,-1360.50000000,799.40002441,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2705,1236.50000000,-1355.80004883,800.09997559,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2706,1237.09997559,-1355.80004883,800.09997559,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2844,1235.59997559,-1355.30004883,799.40002441,0.00000000,0.00000000,250.00000000);
	CreateDynamicObject(2165,1220.19995117,-1358.30004883,799.40002441,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2166,1215.69995117,-1356.19995117,799.40002441,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(1671,1202.50000000,-1360.09997559,799.79998779,0.00000000,0.00000000,359.99450684);
	CreateDynamicObject(2166,1210.30004883,-1356.19995117,799.40002441,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(2165,1208.30004883,-1357.19995117,799.40002441,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(2166,1205.00000000,-1356.19995117,799.40002441,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(2165,1203.00000000,-1357.19995117,799.40002441,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(2166,1215.69995117,-1360.09997559,799.40002441,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(2165,1213.69995117,-1361.09997559,799.40002441,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(2166,1210.30004883,-1360.09997559,799.40002441,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(2166,1205.00000000,-1360.09997559,799.40002441,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(2165,1203.00000000,-1361.09997559,799.40002441,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(1671,1202.50000000,-1356.19995117,799.79998779,0.00000000,0.00000000,359.98901367);
	CreateDynamicObject(1671,1207.69995117,-1356.19995117,799.79998779,0.00000000,0.00000000,359.98901367);
	CreateDynamicObject(1671,1213.09997559,-1356.19995117,799.79998779,0.00000000,0.00000000,359.98901367);
	CreateDynamicObject(1671,1213.09997559,-1360.19995117,799.79998779,0.00000000,0.00000000,359.98901367);
	CreateDynamicObject(2165,1208.30004883,-1361.09997559,799.40002441,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(1671,1207.80004883,-1360.19995117,799.79998779,0.00000000,0.00000000,359.98901367);
	CreateDynamicObject(2186,1217.40002441,-1358.19995117,799.40002441,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2165,1213.69921875,-1357.19921875,799.40002441,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(1969,1220.80004883,-1364.30004883,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1968,1220.80004883,-1358.59997559,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1968,1220.80004883,-1361.59997559,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1969,1220.80004883,-1355.90002441,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1968,1217.00000000,-1358.59997559,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1968,1209.69995117,-1358.59997559,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1968,1205.90002441,-1358.59997559,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1968,1217.00000000,-1361.59997559,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1968,1213.40002441,-1361.59997559,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1968,1209.69995117,-1361.59997559,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1968,1205.90002441,-1361.59997559,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1969,1217.00000000,-1364.30004883,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1969,1213.40002441,-1364.30004883,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1969,1209.69995117,-1364.30004883,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1969,1205.90002441,-1364.30004883,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1969,1217.00000000,-1355.90002441,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1969,1213.30004883,-1355.90002441,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1969,1209.69995117,-1355.90002441,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1969,1205.90002441,-1355.90002441,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2441,1228.00000000,-1355.90002441,795.70001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2441,1228.00000000,-1356.90002441,795.70001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2441,1228.00000000,-1357.90002441,795.70001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2441,1228.00000000,-1358.90002441,795.70001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2441,1228.00000000,-1359.90002441,795.70001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2441,1228.00000000,-1360.90002441,795.70001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2441,1228.00000000,-1361.90002441,795.70001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2441,1228.00000000,-1362.90002441,795.70001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2441,1228.00000000,-1363.90002441,795.70001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2441,1228.00000000,-1364.90002441,795.70001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(16644,1212.69921875,-1354.50000000,809.79998779,0.00000000,90.00000000,90.00000000);
	CreateDynamicObject(16644,1227.59997559,-1365.30004883,798.79998779,90.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2136,1236.63964844,-1340.20703125,795.79998779,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(2135,1234.60900879,-1358.35705566,795.79998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2137,1234.59997559,-1364.30004883,795.79998779,0.00000000,0.00000000,269.98901367);
	CreateDynamicObject(2137,1234.59997559,-1361.32702637,795.79998779,0.00000000,0.00000000,269.98901367);
	CreateDynamicObject(2137,1234.59997559,-1360.33801270,795.79998779,0.00000000,0.00000000,269.98901367);
	CreateDynamicObject(2137,1234.59997559,-1359.33801270,795.79998779,0.00000000,0.00000000,269.98901367);
	CreateDynamicObject(2135,1234.60900879,-1357.36999512,795.79998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2137,1234.59997559,-1356.40002441,795.79998779,0.00000000,0.00000000,269.98901367);
	CreateDynamicObject(2305,1232.79980469,-1340.19921875,795.79998779,0.00000000,0.00000000,179.99450684);
	CreateDynamicObject(19447,1227.59997559,-1369.69995117,797.59997559,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19355,1227.30004883,-1364.90002441,797.50000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19385,1230.50000000,-1364.90002441,797.50000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19355,1233.69995117,-1364.90002441,797.50000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(19447,1228.40002441,-1369.80004883,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19447,1232.90002441,-1369.80004883,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19377,1227.90002441,-1369.69995117,799.20001221,0.00000000,90.00000000,0.00000000);
	CreateDynamicObject(19447,1230.09997559,-1372.09997559,797.50000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1847,1228.80004883,-1367.50000000,795.79998779,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1983,1229.00000000,-1370.50000000,795.90002441,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1983,1229.00000000,-1371.50000000,795.90002441,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2012,1232.19995117,-1366.50000000,795.79998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2012,1232.19995117,-1369.50000000,795.79998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(1983,1232.30004883,-1371.50000000,795.79998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(1983,1229.00000000,-1370.50000000,797.40002441,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1983,1229.00000000,-1371.50000000,797.40002441,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1523,1229.73999023,-1364.93005371,795.72998047,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2139,1232.02404785,-1361.62902832,795.79998779,0.00000000,0.00000000,89.99450684);
	CreateDynamicObject(2139,1232.02404785,-1360.66003418,795.80102539,0.00000000,0.00000000,89.99450684);
	CreateDynamicObject(2139,1232.02404785,-1359.68505859,795.79998779,0.00000000,0.00000000,89.99450684);
	CreateDynamicObject(2139,1232.02404785,-1358.72998047,795.80102539,0.00000000,0.00000000,89.99450684);
	CreateDynamicObject(2139,1231.00000000,-1361.59997559,795.79998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2139,1231.00000000,-1360.64001465,795.80102539,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2139,1231.00000000,-1359.67004395,795.79998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2139,1231.00000000,-1358.69995117,795.80102539,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2149,1231.19995117,-1361.80004883,797.00000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2149,1231.09997559,-1361.19995117,797.00000000,0.00000000,0.00000000,287.00000000);
	CreateDynamicObject(2866,1231.40002441,-1359.80004883,796.85998535,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2867,1234.69995117,-1362.19995117,796.84997559,0.00000000,0.00000000,60.00000000);
	CreateDynamicObject(19447,1224.90002441,-1331.30004883,797.50000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(1968,1213.39941406,-1358.59960938,796.29998779,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3657,1210.09997559,-1343.00000000,796.20001221,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(3657,1210.90002441,-1343.00000000,796.20001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(3657,1210.09997559,-1331.90002441,796.20001221,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(3657,1210.90002441,-1331.90002441,796.20001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1204.59997559,-1345.09997559,795.59997559,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1204.59997559,-1341.90002441,795.59997559,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1204.59997559,-1338.69995117,795.59997559,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1204.59997559,-1335.50000000,795.59997559,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1204.59997559,-1332.30004883,795.59997559,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1204.59997559,-1329.09997559,795.59997559,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1204.59997559,-1329.09997559,799.20001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1204.59997559,-1345.09997559,799.20001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1204.59997559,-1341.90002441,799.20001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1204.59997559,-1338.69995117,799.20001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1204.59997559,-1335.50000000,799.20001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1204.59997559,-1332.30004883,799.20001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1221.19995117,-1327.40002441,799.20001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1221.19995117,-1330.59997559,799.20001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1221.19995117,-1333.80004883,799.20001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1221.19995117,-1337.00000000,799.20001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1221.19995117,-1340.09997559,799.20001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1221.19995117,-1343.40002441,799.20001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1221.19995117,-1343.40002441,795.59997559,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1221.19995117,-1340.09997559,795.59997559,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1221.19995117,-1337.00000000,795.59997559,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1221.19995117,-1333.80004883,795.59997559,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1221.19995117,-1330.59997559,795.59997559,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(1800,1221.19995117,-1327.40002441,795.59997559,0.00000000,0.00000000,90.00000000);

    objectid = CreateDynamicObject(19304,1213.59997559,-1329.90002441,799.79998779,0.00000000,0.00000000,90.00000000);
    SetDynamicObjectMaterial(objectid, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
	objectid = CreateDynamicObject(19304,1213.59997559,-1333.40002441,799.79998779,0.00000000,0.00000000,90.00000000);
	SetDynamicObjectMaterial(objectid, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
	objectid = CreateDynamicObject(19304,1213.59997559,-1336.90002441,799.79998779,0.00000000,0.00000000,90.00000000);
	SetDynamicObjectMaterial(objectid, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
	objectid = CreateDynamicObject(19304,1213.59997559,-1340.40002441,799.79998779,0.00000000,0.00000000,90.00000000);
	SetDynamicObjectMaterial(objectid, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
	objectid = CreateDynamicObject(19304,1213.59997559,-1343.90002441,799.79998779,0.00000000,0.00000000,90.00000000);
	SetDynamicObjectMaterial(objectid, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
	objectid = CreateDynamicObject(19304,1211.90002441,-1328.09997559,799.79998779,0.00000000,0.00000000,0.00000000);
	SetDynamicObjectMaterial(objectid, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
	objectid = CreateDynamicObject(19304,1209.09997559,-1328.09997559,799.79998779,0.00000000,0.00000000,0.00000000);
	SetDynamicObjectMaterial(objectid, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
	objectid = CreateDynamicObject(19304,1207.40002441,-1329.90002441,799.79998779,0.00000000,0.00000000,90.00000000);
	SetDynamicObjectMaterial(objectid, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
	objectid = CreateDynamicObject(19304,1207.40002441,-1333.40002441,799.79998779,0.00000000,0.00000000,90.00000000);
	SetDynamicObjectMaterial(objectid, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
	objectid = CreateDynamicObject(19304,1207.40002441,-1336.90002441,799.79998779,0.00000000,0.00000000,90.00000000);
	SetDynamicObjectMaterial(objectid, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
	objectid = CreateDynamicObject(19304,1207.40002441,-1340.40002441,799.79998779,0.00000000,0.00000000,90.00000000);
	SetDynamicObjectMaterial(objectid, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
	objectid = CreateDynamicObject(19304,1207.40002441,-1343.90002441,799.79998779,0.00000000,0.00000000,90.00000000);
	SetDynamicObjectMaterial(objectid, 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
	objectid = CreateDynamicObject(19304,1215.30004883,-1345.69995117,799.79998779,0.00000000,0.00000000,0.00000000);

	// FMD HQ Interior (Main)
	CreateDynamicObject(19377,303.0083300,1734.1710200,2041.6202400,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,303.0080000,1724.5380900,2041.6202400,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,292.5455600,1724.5650600,2041.6202400,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,313.4708300,1724.5512700,2041.6202400,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,292.5817000,1715.0184300,2041.6202400,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,303.0470000,1715.0092800,2041.6202400,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,313.4521500,1714.9982900,2041.6202400,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,297.3785100,1729.4550800,2041.6130400,0.0000000,90.0000000,43.5000000); //
	CreateDynamicObject(19377,308.5267000,1728.9681400,2041.6130400,0.0000000,90.0000000,43.5000000); //
	CreateDynamicObject(19377,303.4111000,1705.4381100,2041.6202400,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,309.0299700,1710.0831300,2041.6130400,0.0000000,90.0000000,43.5000000); //
	CreateDynamicObject(19377,298.6503300,1710.3720700,2041.6130400,0.0000000,90.0000000,43.5000000); //
	CreateDynamicObject(19377,318.1890900,1718.8968500,2041.6130400,0.0000000,90.0000000,43.5000000); //
	CreateDynamicObject(19450,319.7799400,1713.8325200,2043.4499500,0.0000000,0.0000000,-47.1600000); //
	CreateDynamicObject(19450,316.9845300,1715.6378200,2043.4499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,320.0360100,1724.4752200,2043.4499500,0.0000000,0.0000000,43.8000100); //
	CreateDynamicObject(19450,312.7421900,1707.2959000,2043.4499500,0.0000000,0.0000000,-47.1600000); //
	CreateDynamicObject(19450,303.8535200,1700.6272000,2043.4499500,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(19450,294.3555900,1700.6307400,2043.4499500,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(19450,308.5528300,1698.6328100,2043.4499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,312.0556300,1706.6635700,2043.4499500,0.0000000,0.0000000,-47.1600000); //
	CreateDynamicObject(19450,313.6304900,1731.1495400,2043.4499500,0.0000000,0.0000000,43.8000100); //
	CreateDynamicObject(19377,305.1874400,1738.8909900,2041.6130400,0.0000000,90.0000000,43.5000000); //
	CreateDynamicObject(19450,311.5968900,1733.2728300,2043.4499500,0.0000000,0.0000000,43.8000100); //
	CreateDynamicObject(19450,308.2782600,1741.4941400,2043.4499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,302.6104100,1739.0069600,2043.4499500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,298.0647900,1741.1154800,2043.4499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,312.0326500,1739.0101300,2043.4499500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,298.0677800,1705.3768300,2043.4499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,298.0751600,1732.9126000,2043.4499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,298.0678100,1720.1391600,2041.1999500,0.0000000,180.0000000,0.0000000); //
	CreateDynamicObject(19450,297.9874900,1720.1200000,2045.9899900,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19388,298.0652800,1713.7240000,2043.4499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,298.0574600,1707.6444100,2043.4499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19388,298.0677200,1726.5491900,2043.4499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,294.5946700,1733.3363000,2043.4499500,0.0000000,0.0000000,-46.5000100); //
	CreateDynamicObject(19450,287.7799100,1726.8686500,2043.4499500,0.0000000,0.0000000,-46.5000100); //
	CreateDynamicObject(19450,294.7457600,1706.9888900,2043.4499500,0.0000000,0.0000000,-136.3800000); //
	CreateDynamicObject(19450,288.1676300,1713.8525400,2043.4499500,0.0000000,0.0000000,-136.3800000); //
	CreateDynamicObject(19377,282.1066300,1721.7541500,2041.6202400,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,282.0834000,1712.1453900,2041.6202400,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19388,284.8420100,1720.6792000,2043.4499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,284.8418300,1714.3811000,2043.4499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,284.8419200,1726.8408200,2043.4499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(14407,281.7731900,1720.7354700,2042.0200200,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(19377,279.6451400,1714.6911600,2045.1200000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,279.6397700,1726.6131600,2045.1200000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19450,280.0779100,1719.4262700,2043.4499500,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(19450,280.0210600,1721.8717000,2043.4499500,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1523,284.8919100,1719.9190700,2041.6678500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,284.8293500,1714.7106900,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,284.8281600,1723.9847400,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,277.3952000,1721.4533700,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,277.3851600,1712.4227300,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,277.3986800,1730.7562300,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,284.8342900,1733.5362500,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,281.2565600,1731.1449000,2046.9499500,0.0000000,0.0000000,-90.0800000); //
	CreateDynamicObject(19450,282.0049100,1709.9862100,2046.9499500,0.0000000,0.0000000,-90.0800000); //
	CreateDynamicObject(14407,275.6328100,1720.4567900,2042.0200200,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(14782,280.9892000,1710.3958700,2046.1999500,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(7666,280.9354900,1712.4360400,2045.2199700,30.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(7666,280.9292900,1716.9151600,2045.2199700,30.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(7666,280.9714100,1724.3070100,2045.2199700,30.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(7666,280.9681100,1728.7729500,2045.2199700,30.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(11713,277.5637800,1714.7343800,2047.0437000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(11713,277.5276200,1716.6062000,2047.0437000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(11713,284.6994600,1714.3702400,2047.0437000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(14657,278.1170300,1726.4295700,2046.0000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2125,279.1882600,1726.5440700,2045.5206300,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(14657,272.9628000,1729.6212200,2046.0000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19377,279.6451100,1714.6911600,2048.6298800,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,279.6086400,1724.2756300,2048.6298800,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,279.9444600,1733.7408400,2048.6298800,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(1523,298.1099900,1712.9699700,2041.6678500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1523,298.1211900,1725.7973600,2041.6678500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(10009,303.2358100,1705.9794900,2041.9799800,0.0000000,0.0000000,-540.0000000); //
	CreateDynamicObject(10009,303.5607000,1732.9459200,2041.9799800,0.0000000,0.0000000,360.0000000); //
	CreateDynamicObject(19450,312.0556300,1706.6635700,2043.4499500,0.0000000,0.0000000,-47.1600000); //
	CreateDynamicObject(19450,311.0549900,1710.1577100,2039.9599600,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(19450,302.8494600,1710.1633300,2039.9599600,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(19450,310.5050400,1729.3501000,2039.9599600,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(19450,302.7391700,1729.3544900,2039.9599600,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(19450,316.9876100,1725.2434100,2043.4499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,303.6236900,1716.8908700,2039.9599600,0.0000000,0.0000000,-130.0000000); //
	CreateDynamicObject(19450,310.9368000,1716.9149200,2039.9599600,0.0000000,0.0000000,130.0000000); //
	CreateDynamicObject(19450,303.6769100,1723.0781300,2039.9599600,0.0000000,0.0000000,130.0000000); //
	CreateDynamicObject(19450,310.9479100,1723.0629900,2039.9599600,0.0000000,0.0000000,-130.0000000); //
	CreateDynamicObject(19450,307.3017900,1709.1022900,2039.9599600,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,307.3015400,1700.4470200,2039.9599600,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,307.2967200,1730.8836700,2039.9599600,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,307.2979700,1740.0156300,2039.9599600,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19353,307.7066000,1719.7481700,2039.9599600,0.0000000,180.0000000,0.0000000); //
	CreateDynamicObject(19353,306.9244100,1719.7481700,2039.9599600,0.0000000,180.0000000,0.0000000); //
	CreateDynamicObject(19353,307.3072500,1720.2406000,2039.9599600,0.0000000,180.0000000,90.0000000); //
	CreateDynamicObject(19450,318.1711400,1723.0136700,2039.9599600,0.0000000,0.0000000,130.0000000); //
	CreateDynamicObject(19450,318.1921100,1716.9775400,2039.9599600,0.0000000,0.0000000,-130.0000000); //
	CreateDynamicObject(19450,296.3361500,1723.0107400,2039.9599600,0.0000000,0.0000000,-130.0000000); //
	CreateDynamicObject(19450,296.2648000,1716.8167700,2039.9599600,0.0000000,0.0000000,130.0000000); //
	CreateDynamicObject(19450,292.6272000,1709.0062300,2039.9599600,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(19450,292.7041300,1730.8332500,2039.9599600,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1723,308.6773100,1730.8216600,2041.7044700,0.0000000,0.0000000,41.9999900); //
	CreateDynamicObject(1723,313.7042200,1728.3630400,2041.7044700,0.0000000,0.0000000,220.7999600); //
	CreateDynamicObject(2311,310.7790200,1729.1409900,2041.6988500,0.0000000,0.0000000,41.5200000); //
	CreateDynamicObject(1723,313.0018900,1712.7968800,2041.7044700,0.0000000,0.0000000,309.6599700); //
	CreateDynamicObject(2311,311.1241500,1710.7445100,2041.6988500,0.0000000,0.0000000,-49.3800000); //
	CreateDynamicObject(1723,310.4335300,1708.0306400,2041.7044700,0.0000000,0.0000000,132.7200000); //
	CreateDynamicObject(640,298.4453400,1706.9301800,2042.3800000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(640,298.4982900,1736.0760500,2042.3800000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(640,303.3941700,1738.7117900,2042.3800000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(640,312.7133500,1731.4224900,2042.3800000,0.0000000,0.0000000,43.3800000); //
	CreateDynamicObject(640,312.7117900,1707.9856000,2042.3800000,0.0000000,0.0000000,132.0000200); //
	CreateDynamicObject(640,303.1869800,1701.0753200,2042.3800000,0.0000000,0.0000000,89.9399900); //
	CreateDynamicObject(644,314.9457100,1726.9716800,2041.9847400,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(644,315.3387800,1712.7454800,2041.9847400,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(644,299.3248300,1702.6160900,2041.9847400,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(644,299.7919000,1737.4272500,2041.5446800,0.0000000,0.0000000,-5.2800000); //
	CreateDynamicObject(1569,316.9355500,1718.5216100,2041.6999500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1569,316.9151300,1721.5231900,2041.6999500,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(19377,303.2263500,1712.0775100,2045.1200000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,313.6807900,1708.2077600,2045.1219500,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,311.0804400,1699.3798800,2045.1200000,0.0000000,90.0000000,-36.2400000); //
	CreateDynamicObject(19377,308.4107100,1697.4563000,2045.1230500,0.0000000,90.0000000,-59.1000000); //
	CreateDynamicObject(19377,302.8421000,1695.6449000,2045.1209700,0.0000000,90.0000000,-79.2600000); //
	CreateDynamicObject(19377,297.8151900,1697.5302700,2045.1212200,0.0000000,90.0000000,-114.2400000); //
	CreateDynamicObject(19377,296.8037100,1698.1572300,2045.1200000,0.0000000,90.0000000,-143.3999900); //
	CreateDynamicObject(19377,292.9220900,1708.3493700,2045.1209700,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,292.7083100,1698.5462600,2045.1230500,0.0000000,90.0000000,-87.4800000); //
	CreateDynamicObject(19377,313.6958300,1717.8597400,2045.1200000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,313.6943700,1727.4685100,2045.1200000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,313.6927800,1737.0770300,2045.1200000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,303.2968100,1721.6835900,2045.1200000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,303.3432000,1727.2338900,2045.1209700,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,302.0692100,1728.4289600,2045.1219500,0.0000000,90.0000000,28.8600000); //
	CreateDynamicObject(19377,295.0835000,1737.5714100,2045.1200000,0.0000000,90.0000000,-13.7400100); //
	CreateDynamicObject(19377,298.4128100,1741.1560100,2045.1221900,0.0000000,90.0000000,-50.2200000); //
	CreateDynamicObject(19377,305.4567900,1743.0904500,2045.1203600,0.0000000,90.0000000,-89.7000000); //
	CreateDynamicObject(19377,309.9078100,1740.4078400,2045.1219500,0.0000000,90.0000000,-129.6601000); //
	CreateDynamicObject(19377,292.9037500,1717.9871800,2045.1209700,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,292.8598000,1727.5999800,2045.1209700,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,292.6563100,1737.2166700,2045.1209700,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,289.8685900,1712.4522700,2045.1219500,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,289.9446100,1722.0578600,2045.1219500,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19450,305.4538900,1728.1084000,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,313.4736900,1726.3780500,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,313.1796300,1734.2570800,2046.9499500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,313.4704300,1721.9592300,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,313.4807400,1710.5251500,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,305.4460800,1721.4744900,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,308.7316000,1707.4411600,2046.9499500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,302.7797900,1707.4355500,2046.9499500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,293.8255900,1704.6713900,2046.9499500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,293.9139400,1709.3995400,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,300.7136200,1714.1364700,2046.9499500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,291.1931500,1714.1359900,2046.9499500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,318.2765200,1728.1485600,2046.9499500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,318.2850300,1713.7363300,2046.9499500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,318.1975100,1719.3842800,2046.9499500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,318.9658500,1716.0202600,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,318.9632000,1732.6717500,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,322.5897500,1734.2519500,2046.9499500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19388,305.4509900,1715.6485600,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,300.6244200,1723.7197300,2046.9499500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,299.9090000,1718.9587400,2046.9499500,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(19388,313.4637800,1716.2133800,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19388,313.4800100,1732.7696500,2046.9499500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(941,318.2278100,1716.5438200,2045.5439500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1369,316.9319800,1718.6926300,2045.7873500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2792,313.4563000,1715.7637900,2048.0700700,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2794,313.4670100,1732.3862300,2048.0700700,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(11709,316.3952300,1714.0858200,2045.8800000,0.0000000,0.0000000,-180.0000000); //
	CreateDynamicObject(11707,314.9844100,1713.8917200,2046.0000000,0.0000000,0.0000000,-180.0000000); //
	CreateDynamicObject(11738,318.2623300,1717.4075900,2046.0575000,0.0000000,0.0000000,-71.7600000); //
	CreateDynamicObject(11738,318.4575500,1716.3659700,2046.0575000,0.0000000,0.0000000,-88.3800000); //
	CreateDynamicObject(11738,318.1898200,1715.9495800,2046.0575000,0.0000000,0.0000000,-174.7199700); //
	CreateDynamicObject(11736,318.1078500,1716.9252900,2046.0178200,0.0000000,0.0000000,-129.8399800); //
	CreateDynamicObject(19339,318.3839100,1731.3282500,2046.3800000,0.0000000,0.0000000,89.2200000); //
	CreateDynamicObject(941,318.3655700,1731.0390600,2045.5439500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(941,316.1153000,1728.7944300,2045.5439500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(303,316.7699900,1728.6137700,2046.0169700,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2905,316.9830300,1728.8640100,2046.0177000,0.0000000,0.0000000,-30.1800000); //
	CreateDynamicObject(2906,316.5119600,1729.0598100,2046.0777600,0.0000000,84.0000000,-85.0000000); //
	CreateDynamicObject(2906,316.1318400,1728.6934800,2046.0777600,0.0000000,84.0000000,-48.6399900); //
	CreateDynamicObject(2907,315.5983900,1728.8242200,2046.0577400,0.0000000,0.0000000,-30.1800000); //
	CreateDynamicObject(2908,316.3945000,1728.5428500,2046.1176800,-76.0000000,48.0000000,-30.0000000); //
	CreateDynamicObject(2905,317.2831100,1728.6457500,2046.0777600,-11.0000000,178.0000000,-46.8000000); //
	CreateDynamicObject(1523,313.5266100,1732.0133100,2045.1800500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1523,313.4849900,1715.4639900,2045.1800500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1491,305.4775100,1714.9050300,2045.1800500,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2184,301.6876200,1720.8125000,2045.1866500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1714,302.7992600,1722.6538100,2045.1678500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1736,302.8185100,1723.3610800,2048.0793500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2025,300.4746400,1723.1483200,2045.2092300,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2025,303.9538300,1723.0762900,2045.2092300,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(11712,302.8305700,1723.6319600,2047.4000200,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19893,302.2153000,1721.3055400,2045.9595900,0.0000000,0.0000000,136.9200000); //
	CreateDynamicObject(19810,305.5448600,1716.7041000,2047.2331500,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(19810,305.5567300,1714.5617700,2047.2331500,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(19806,302.4137900,1718.9931600,2048.0346700,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19172,300.0974100,1718.6551500,2047.3912400,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1828,302.7713600,1718.1806600,2045.1829800,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2131,301.5134300,1714.6702900,2045.2066700,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2131,303.4942300,1714.6665000,2045.2066700,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(19431,307.9731400,1734.8695100,2046.9499500,0.0000000,0.0000000,34.6199700); //
	CreateDynamicObject(19431,306.9825400,1736.1022900,2046.9499500,0.0000000,0.0000000,43.5599700); //
	CreateDynamicObject(19431,305.7912600,1737.1112100,2046.9499500,0.0000000,0.0000000,55.6799800); //
	CreateDynamicObject(19431,304.3605300,1737.7225300,2046.9499500,0.0000000,0.0000000,79.0800000); //
	CreateDynamicObject(19431,303.0155300,1737.8642600,2046.9499500,0.0000000,0.0000000,90.0000200); //
	CreateDynamicObject(19431,302.0553900,1737.3988000,2046.9499500,0.0000000,0.0000000,131.5800000); //
	CreateDynamicObject(19431,300.8975200,1736.3724400,2046.9499500,0.0000000,0.0000000,131.5800000); //
	CreateDynamicObject(19431,299.9442100,1735.1096200,2046.9499500,0.0000000,0.0000000,157.5600000); //
	CreateDynamicObject(19431,299.4621300,1733.7148400,2046.9499500,0.0000000,0.0000000,163.9799300); //
	CreateDynamicObject(19431,299.2149400,1732.7229000,2046.9499500,0.0000000,0.0000000,171.5999500); //
	CreateDynamicObject(19450,298.9913900,1732.2845500,2046.9499500,0.0000000,0.0000000,117.5400200); //
	CreateDynamicObject(19431,303.9959700,1734.3811000,2046.9499500,0.0000000,0.0000000,261.0598400); //
	CreateDynamicObject(19431,305.0911300,1733.5955800,2046.9499500,0.0000000,0.0000000,207.4798700); //
	CreateDynamicObject(19431,298.9092100,1703.9245600,2046.9499500,0.0000000,0.0000000,28.9800300); //
	CreateDynamicObject(19431,299.7147800,1702.8237300,2046.9499500,0.0000000,0.0000000,41.9400300); //
	CreateDynamicObject(19431,300.8793300,1701.8411900,2046.9499500,0.0000000,0.0000000,58.3200300); //
	CreateDynamicObject(19431,302.2331800,1701.2249800,2046.9499500,0.0000000,0.0000000,73.3800300); //
	CreateDynamicObject(19431,303.7749300,1701.1378200,2046.9499500,0.0000000,0.0000000,99.3600500); //
	CreateDynamicObject(19431,305.2196000,1701.6594200,2046.9499500,0.0000000,0.0000000,120.8400300); //
	CreateDynamicObject(19431,306.5421100,1702.4554400,2046.9499500,0.0000000,0.0000000,120.8400300); //
	CreateDynamicObject(19431,307.6550300,1703.4969500,2046.9499500,0.0000000,0.0000000,145.3200700); //
	CreateDynamicObject(19431,308.4859900,1704.8344700,2046.9499500,0.0000000,0.0000000,150.6601100); //
	CreateDynamicObject(19431,308.4835500,1705.3800000,2046.9499500,0.0000000,0.0000000,178.1400500); //
	CreateDynamicObject(19431,308.4970400,1706.6167000,2046.9499500,0.0000000,0.0000000,181.7400700); //
	CreateDynamicObject(19353,307.5458100,1719.7481700,2039.9599600,0.0000000,180.0000000,0.0000000); //
	CreateDynamicObject(19353,307.4046000,1719.7481700,2039.9599600,0.0000000,180.0000000,0.0000000); //
	CreateDynamicObject(19353,307.2399000,1719.7481700,2039.9599600,0.0000000,180.0000000,0.0000000); //
	CreateDynamicObject(19353,307.0947900,1719.7481700,2039.9599600,0.0000000,180.0000000,0.0000000); //
	CreateDynamicObject(19353,307.3073100,1719.4580100,2039.9599600,0.0000000,180.0000000,90.0000000); //
	CreateDynamicObject(19353,307.3073100,1719.6187700,2039.9599600,0.0000000,180.0000000,90.0000000); //
	CreateDynamicObject(19353,307.3073100,1719.7796600,2039.9599600,0.0000000,180.0000000,90.0000000); //
	CreateDynamicObject(19353,307.3073100,1719.9500700,2039.9599600,0.0000000,180.0000000,90.0000000); //
	CreateDynamicObject(19353,307.3073100,1720.1167000,2039.9599600,0.0000000,180.0000000,90.0000000); //
	CreateDynamicObject(19353,307.3073100,1719.3175000,2039.9599600,0.0000000,180.0000000,90.0000000); //
	CreateDynamicObject(2008,297.5231900,1724.2286400,2041.7071500,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2008,297.5220300,1716.8732900,2041.7071500,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(3397,297.4426000,1719.0638400,2041.7071500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1937,270.6657700,1727.5871600,2048.6298800,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,303.2018100,1702.7998000,2048.6298800,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,292.8327900,1709.2722200,2048.6298800,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,303.3310500,1712.3391100,2048.6298800,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,313.6891800,1711.8839100,2048.6298800,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,313.7886700,1721.4311500,2048.6298800,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,303.3681900,1721.8647500,2048.6298800,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,314.2639500,1730.9770500,2048.6298800,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,303.9994500,1730.9475100,2048.6298800,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,303.1025400,1740.3638900,2048.6298800,0.0000000,90.0000000,0.0000000); //

	// Idlewood Gas Station (Main)
    CreateDynamicObject(970, 1942.256469, -1767.598266, 13.092811, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(970, 1942.256469, -1771.718627, 13.092811, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(970, 1942.256469, -1775.848876, 13.092811, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(970, 1942.256469, -1777.948974, 13.092811, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(970, 1941.095825, -1777.948974, 13.092811, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(970, 1941.096191, -1775.848876, 13.092811, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(970, 1941.096679, -1771.718627, 13.092811, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(970, 1941.095703, -1767.598266, 13.092811, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(1215, 1941.625610, -1780.841918, 13.160593, 0.000000, 0.000000, 95.991020);
    CreateDynamicObject(1215, 1941.636230, -1765.047241, 13.160593, 0.000000, 0.000000, 95.991020);
    CreateDynamicObject(1291, 1928.692382, -1767.511352, 13.032809, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(1287, 1928.503662, -1768.784423, 13.076869, 0.000000, 0.000000, -90.000000);
    CreateDynamicObject(1289, 1928.507202, -1769.368896, 13.092813, 0.000000, 0.000000, -90.228660);
    CreateDynamicObject(1250, 1908.817138, -1782.609863, 13.582806, 0.000000, 0.000000, 90.000000);

	// LSPD HQ
    CreateDynamicObject(19452,1578.2000000,-1713.0000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (1)
	CreateDynamicObject(19452,1578.2002000,-1722.5996000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1588.7000000,-1713.0000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (3)
	CreateDynamicObject(19452,1581.7002000,-1722.5996000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (4)
	CreateDynamicObject(19452,1581.7002000,-1713.0000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (5)
	CreateDynamicObject(19452,1585.2002000,-1722.5996000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (6)
	CreateDynamicObject(19452,1585.2002000,-1713.0000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (7)
	CreateDynamicObject(19452,1588.7002000,-1722.5996000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (8)
	CreateDynamicObject(19452,1592.2000000,-1713.0000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (9)
	CreateDynamicObject(19452,1592.2002000,-1722.5996000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (10)
	CreateDynamicObject(19452,1595.5996000,-1713.0000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (11)
	CreateDynamicObject(19452,1595.5898000,-1722.5996000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (12)
	CreateDynamicObject(19358,1576.5000000,-1709.7000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (1)
	CreateDynamicObject(19358,1595.5200000,-1708.2000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (2)
	CreateDynamicObject(19358,1592.4000000,-1708.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (3)
	CreateDynamicObject(19358,1589.2000000,-1708.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (4)
	CreateDynamicObject(19358,1586.0000000,-1708.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (5)
	CreateDynamicObject(19358,1583.0000000,-1708.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (6)
	CreateDynamicObject(19358,1579.8000000,-1708.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (7)
	CreateDynamicObject(19358,1577.0000000,-1708.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (8)
	CreateDynamicObject(19358,1597.2998000,-1709.7998000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (9)
	CreateDynamicObject(1536,1586.2998000,-1708.2568000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(gen_doorext15) (1)
	CreateDynamicObject(1536,1589.3199000,-1708.2300000,-37.7999990,0.0000000,0.0000000,180.0000000); //object(gen_doorext15) (2)
	CreateDynamicObject(19358,1576.5000000,-1712.7000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (10)
	CreateDynamicObject(19358,1576.5000000,-1715.9000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (11)
	CreateDynamicObject(19358,1576.5000000,-1719.1000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (12)
	CreateDynamicObject(19358,1576.5000000,-1721.8000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (13)
	CreateDynamicObject(19358,1576.5000000,-1725.0000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (14)
	CreateDynamicObject(19358,1597.3000000,-1712.6000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (15)
	CreateDynamicObject(19358,1595.9000000,-1708.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (16)
	CreateDynamicObject(19358,1597.3000000,-1715.8000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (17)
	CreateDynamicObject(19358,1597.2998000,-1719.0000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1597.2998000,-1722.2002000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (19)
	CreateDynamicObject(19358,1597.2998000,-1725.4004000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1584.4000000,-1709.4000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (21)
	CreateDynamicObject(19358,1595.8000000,-1717.4000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (22)
	CreateDynamicObject(19358,1593.0000000,-1717.4004000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (24)
	CreateDynamicObject(19404,1584.4004000,-1712.5996000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(boigagr_sfw) (1)
	CreateDynamicObject(19358,1584.4004000,-1715.7998000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (25)
	CreateDynamicObject(19358,1591.0000000,-1717.4004000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (26)
	CreateDynamicObject(19388,1586.0996000,-1717.4004000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(19358,1589.0000000,-1717.4004000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (27)
	CreateDynamicObject(1649,1584.4000000,-1712.5000000,-34.5000000,0.0000000,0.0000000,90.0000000); //object(wglasssmash) (1)
	CreateDynamicObject(1649,1584.4004000,-1712.5000000,-34.5000000,0.0000000,0.0000000,270.0000000); //object(wglasssmash) (2)
	//CreateDynamicObject(1495,1585.3101000,-1717.4000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(gen_doorext01) (1)
	CreateDynamicObject(1706,1590.4000000,-1708.8000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(kb_couch03) (1)
	CreateDynamicObject(1706,1592.5000000,-1708.8000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(kb_couch03) (2)
	CreateDynamicObject(1706,1594.6000000,-1708.8000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(kb_couch03) (4)
	CreateDynamicObject(1706,1596.7000000,-1709.9000000,-37.7999990,0.0000000,0.0000000,270.0000000); //object(kb_couch03) (5)
	CreateDynamicObject(949,1585.7998000,-1708.7002000,-37.2000010,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (1)
	CreateDynamicObject(949,1596.7000000,-1708.8000000,-37.2000010,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (2)
	CreateDynamicObject(1706,1596.7000000,-1712.1000000,-37.7999990,0.0000000,0.0000000,270.0000000); //object(kb_couch03) (6)
	CreateDynamicObject(1706,1596.7000000,-1714.3000000,-37.7999990,0.0000000,0.0000000,270.0000000); //object(kb_couch03) (7)
	CreateDynamicObject(1706,1595.5000000,-1716.8000000,-37.7999990,0.0000000,0.0000000,180.0000000); //object(kb_couch03) (8)
	CreateDynamicObject(949,1596.7000000,-1716.8000000,-37.2000010,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (3)
	CreateDynamicObject(1706,1593.3000000,-1716.8000000,-37.7999990,0.0000000,0.0000000,179.9945100); //object(kb_couch03) (9)
	CreateDynamicObject(1706,1591.1000000,-1716.8000000,-37.7999990,0.0000000,0.0000000,179.9945100); //object(kb_couch03) (10)
	CreateDynamicObject(1706,1588.9000000,-1716.8000000,-37.7999990,0.0000000,0.0000000,179.9945100); //object(kb_couch03) (11)
	CreateDynamicObject(2319,1592.5000000,-1712.6000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(cj_tv_table5) (1)
	CreateDynamicObject(2319,1590.1000000,-1712.6000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(cj_tv_table5) (2)
	CreateDynamicObject(2853,1590.2000000,-1712.5000000,-37.2999990,0.0000000,0.0000000,0.0000000); //object(gb_bedmags03) (1)
	CreateDynamicObject(2854,1591.1000000,-1712.6000000,-37.2999990,0.0000000,0.0000000,0.0000000); //object(gb_bedmags04) (1)
	CreateDynamicObject(2855,1592.6000000,-1712.6000000,-37.2999990,0.0000000,0.0000000,0.0000000); //object(gb_bedmags05) (1)
	CreateDynamicObject(2852,1593.4000000,-1712.6000000,-37.2999990,0.0000000,0.0000000,0.0000000); //object(gb_bedmags02) (1)
	CreateDynamicObject(2700,1597.2000000,-1708.4000000,-35.0999980,0.0000000,0.0000000,220.4877000); //object(cj_sex_tv2) (1)
	CreateDynamicObject(2202,1582.9000000,-1708.8000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(photocopier_2) (1)
	CreateDynamicObject(2198,1583.8000000,-1712.1000000,-37.7999990,0.0000000,0.0000000,270.0000000); //object(med_office2_desk_3) (1)
	CreateDynamicObject(1671,1578.3000000,-1718.9000000,-37.4000020,0.0000000,0.0000000,180.0000000); //object(swivelchair_a) (1)
	CreateDynamicObject(1742,1576.6000000,-1716.4000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(med_bookshelf) (1)
	CreateDynamicObject(1742,1576.5996000,-1709.4004000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(med_bookshelf) (2)
	CreateDynamicObject(1742,1576.6000000,-1710.8000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(med_bookshelf) (3)
	CreateDynamicObject(1742,1576.5996000,-1712.2002000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(med_bookshelf) (4)
	CreateDynamicObject(1742,1576.5996000,-1713.5996000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(med_bookshelf) (5)
	CreateDynamicObject(1742,1576.5996000,-1715.0000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(med_bookshelf) (6)
	CreateDynamicObject(19358,1578.0000000,-1717.4004000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (27)
	CreateDynamicObject(19358,1581.0000000,-1717.4004000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (27)
	CreateDynamicObject(19388,1583.6000000,-1717.4004000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(949,1589.5000000,-1708.7998000,-37.2000010,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (4)
	CreateDynamicObject(2161,1582.0000000,-1716.8000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(med_office_unit_4) (1)
	CreateDynamicObject(2164,1581.0000000,-1717.3000000,-37.7999990,0.0000000,0.0000000,180.0000000); //object(med_office_unit_5) (1)
	CreateDynamicObject(2167,1579.2000000,-1717.3000000,-37.7999990,0.0000000,0.0000000,180.0000000); //object(med_office_unit_7) (1)
	CreateDynamicObject(11631,1579.3000000,-1709.0000000,-36.5999980,0.0000000,0.0000000,0.0000000); //object(ranch_desk) (1)
	CreateDynamicObject(1671,1582.5000000,-1712.7002000,-37.4000020,0.0000000,0.0000000,87.6214600); //object(swivelchair_a) (2)
	CreateDynamicObject(19447,1596.1000000,-1712.9000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (1)
	CreateDynamicObject(19447,1592.6000000,-1712.9004000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (4)
	CreateDynamicObject(19447,1582.2000000,-1712.9000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (5)
	CreateDynamicObject(19447,1589.2002000,-1712.9004000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (6)
	CreateDynamicObject(19447,1585.7002000,-1712.9004000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (9)
	CreateDynamicObject(19447,1578.7600000,-1712.9000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (10)
	CreateDynamicObject(19447,1577.9000000,-1712.9000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (11)
	CreateDynamicObject(19452,1578.2002000,-1732.2000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1585.2002000,-1732.2002000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1581.7002000,-1732.2002000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1588.7002000,-1732.2000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1592.2002000,-1732.2000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1595.5898000,-1732.2002000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19358,1597.3000000,-1728.5000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1597.3000000,-1731.1000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1597.3000000,-1734.2000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1597.3000000,-1737.0000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1576.5000000,-1727.5000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (14)
	CreateDynamicObject(19358,1576.5000000,-1730.5996000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (14)
	CreateDynamicObject(19358,1576.5000000,-1733.7998000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (14)
	CreateDynamicObject(19358,1576.5000000,-1736.7000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (14)
	CreateDynamicObject(19358,1587.0000000,-1719.1000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1587.0000000,-1722.3000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1587.0000000,-1725.5000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1588.5000000,-1727.2000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1591.7000000,-1727.2000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19388,1595.6000000,-1727.2000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(19358,1592.4000000,-1727.2000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(2748,1592.9000000,-1718.1000000,-37.2000010,0.0000000,0.0000000,0.0000000); //object(cj_donut_chair2) (1)
	CreateDynamicObject(2747,1596.4000000,-1719.4000000,-37.4000020,0.0000000,0.0000000,0.0000000); //object(cj_donut_table) (1)
	CreateDynamicObject(2748,1593.1000000,-1724.3000000,-37.2000010,0.0000000,0.0000000,180.0000000); //object(cj_donut_chair2) (2)
	CreateDynamicObject(2748,1596.4004000,-1718.0996000,-37.2000010,0.0000000,0.0000000,0.0000000); //object(cj_donut_chair2) (3)
	CreateDynamicObject(2747,1592.8000000,-1719.5000000,-37.4000020,0.0000000,0.0000000,0.0000000); //object(cj_donut_table) (2)
	CreateDynamicObject(2748,1596.5000000,-1720.7002000,-37.2000010,0.0000000,0.0000000,179.9945100); //object(cj_donut_chair2) (4)
	CreateDynamicObject(2748,1596.5000000,-1721.9000000,-37.2000010,0.0000000,0.0000000,0.0000000); //object(cj_donut_chair2) (5)
	CreateDynamicObject(2748,1593.0000000,-1721.9000000,-37.2000010,0.0000000,0.0000000,0.0000000); //object(cj_donut_chair2) (6)
	CreateDynamicObject(2747,1593.0000000,-1723.2000000,-37.4000020,0.0000000,0.0000000,0.0000000); //object(cj_donut_table) (3)
	CreateDynamicObject(2747,1596.4000000,-1723.2000000,-37.4000020,0.0000000,0.0000000,0.0000000); //object(cj_donut_table) (4)
	CreateDynamicObject(2748,1593.0000000,-1720.7002000,-37.2000010,0.0000000,0.0000000,179.9945100); //object(cj_donut_chair2) (7)
	CreateDynamicObject(2748,1596.4000000,-1724.3000000,-37.2000010,0.0000000,0.0000000,179.9945100); //object(cj_donut_chair2) (8)
	CreateDynamicObject(2448,1589.0000000,-1721.7000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(cj_ff_conter_5d) (1)
	CreateDynamicObject(2448,1589.0000000,-1719.4004000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(cj_ff_conter_5d) (2)
	CreateDynamicObject(2450,1589.2000000,-1722.4000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(cj_ff_conter_5b) (1)
	CreateDynamicObject(1776,1587.5000000,-1726.5000000,-36.7000010,0.0000000,0.0000000,90.0000000); //object(cj_candyvendor) (1)
	CreateDynamicObject(1775,1587.6000000,-1725.3000000,-36.7000010,0.0000000,0.0000000,90.0000000); //object(cj_sprunk1) (1)
	CreateDynamicObject(1502,1594.8000000,-1727.2000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(gen_doorint04) (1)
	CreateDynamicObject(1502,1580.3000000,-1730.2000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(gen_doorint04) (2)
	CreateDynamicObject(19358,1582.7000000,-1719.1000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1582.7000000,-1722.3000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1582.7000000,-1725.5000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1582.7000000,-1728.7000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1578.0000000,-1730.2000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19388,1581.0996000,-1730.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(1502,1582.7998000,-1717.4399000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(gen_doorint04) (3)
	CreateDynamicObject(1998,1581.2000000,-1718.9000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(officedesk1l) (1)
	CreateDynamicObject(1998,1579.3000000,-1718.9000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(officedesk1l) (2)
	CreateDynamicObject(1998,1577.4000000,-1718.9000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(officedesk1l) (3)
	CreateDynamicObject(2008,1577.0996000,-1728.4004000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(officedesk1) (2)
	CreateDynamicObject(2008,1577.0996000,-1726.0996000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(officedesk1) (3)
	CreateDynamicObject(2008,1577.2002000,-1723.5996000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(officedesk1) (4)
	CreateDynamicObject(2008,1581.1000000,-1723.5996000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(officedesk1) (5)
	CreateDynamicObject(2008,1581.1000000,-1726.0996000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(officedesk1) (6)
	CreateDynamicObject(1671,1579.7002000,-1710.0996000,-37.4000020,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (3)
	CreateDynamicObject(1671,1580.3000000,-1719.0000000,-37.4000020,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (4)
	CreateDynamicObject(1671,1582.2000000,-1719.0000000,-37.4000020,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (5)
	CreateDynamicObject(1671,1578.0000000,-1724.8000000,-37.4000020,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (6)
	CreateDynamicObject(1671,1582.1000000,-1724.8000000,-37.4000020,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (7)
	CreateDynamicObject(1671,1578.0000000,-1727.2000000,-37.4000020,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (8)
	CreateDynamicObject(1671,1578.1000000,-1729.8000000,-37.4000020,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (9)
	CreateDynamicObject(1671,1582.0000000,-1727.5000000,-37.4000020,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (10)
	CreateDynamicObject(19452,1578.2002000,-1741.7998000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1581.7002000,-1741.7998000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1585.2002000,-1741.7998000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1588.7002000,-1741.8000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1592.2002000,-1741.8000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1595.5898000,-1741.8000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1578.2002000,-1751.4000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1581.7001953,-1751.4003906,-37.9000015,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1588.7002000,-1751.4004000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1585.2002000,-1751.4004000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1592.2002000,-1751.4004000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1595.5898000,-1751.4000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19358,1597.3000000,-1740.2000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1597.3000000,-1743.4000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1597.3000000,-1746.5000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1597.3000000,-1749.6000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1576.5000000,-1739.8000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1576.5000000,-1742.3000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1576.5000000,-1745.0000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1576.5000000,-1747.8000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1576.5000000,-1750.7000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1576.5000000,-1753.8000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1576.5000000,-1755.8000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1597.3000000,-1752.8000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1597.2998000,-1755.0996000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1593.0000000,-1756.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1590.2002000,-1756.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1587.5000000,-1756.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1584.4004000,-1756.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1581.5996000,-1756.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1578.0000000,-1756.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1578.5000000,-1756.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19447,1596.0996000,-1722.5000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1589.2002000,-1722.5000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (13)
	CreateDynamicObject(19447,1592.5996000,-1722.5000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (14)
	CreateDynamicObject(19447,1585.7002000,-1722.5000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (15)
	CreateDynamicObject(19447,1582.2002000,-1722.5000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (16)
	CreateDynamicObject(19447,1578.7598000,-1722.5000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (17)
	CreateDynamicObject(19447,1578.0996000,-1722.4004000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (18)
	CreateDynamicObject(18767,1574.5000000,-1735.6000000,-34.2999990,0.0000000,0.0000000,0.0000000); //object(stands) (1)
	CreateDynamicObject(18767,1574.1000000,-1735.6000000,-34.2999990,0.0000000,0.0000000,0.0000000); //object(stands) (2)
	CreateDynamicObject(19358,1578.1000000,-1731.7000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1578.0996000,-1736.7002000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1578.0996000,-1733.5000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1596.2002000,-1756.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1577.9004000,-1744.7998000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1581.0996000,-1744.7998000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19388,1582.7000000,-1731.9000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(1502,1582.7300000,-1732.6700000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(gen_doorint04) (4)
	CreateDynamicObject(19358,1582.7000000,-1735.1000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1582.7000000,-1738.3000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1582.7000000,-1741.5000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1582.7000000,-1743.2000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(2949,1576.5699000,-1744.0000000,-37.7999990,0.0000000,0.0000000,180.0000000); //object(kmb_lockeddoor) (1)
	CreateDynamicObject(19358,1592.9004000,-1744.7998000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1587.5000000,-1733.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1584.2998000,-1733.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19388,1590.7002000,-1733.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(1502,1589.9004000,-1733.0000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(gen_doorint04) (6)
	CreateDynamicObject(19358,1593.0000000,-1733.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1594.5000000,-1734.7000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1594.5000000,-1737.9000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1594.5000000,-1741.1000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1594.5000000,-1743.3000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1584.2998000,-1744.7998000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1587.5000000,-1744.7998000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1590.7002000,-1744.7998000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(14532,1583.5996000,-1733.7998000,-36.7999990,0.0000000,0.0000000,221.2097200); //object(tv_stand_driv) (1)
	CreateDynamicObject(14532,1593.4004000,-1743.5996000,-36.7999990,0.0000000,0.0000000,48.0596920); //object(tv_stand_driv) (2)
	CreateDynamicObject(3077,1584.5000000,-1743.0000000,-38.2000010,0.0000000,0.0000000,307.2500000); //object(nf_blackboard) (1)
	CreateDynamicObject(2606,1577.7000000,-1708.3000000,-35.1199990,0.0000000,0.0000000,0.0000000); //object(cj_police_counter2) (1)
	CreateDynamicObject(2606,1577.7002000,-1708.2998000,-34.7000010,0.0000000,0.0000000,0.0000000); //object(cj_police_counter2) (2)
	CreateDynamicObject(1721,1591.8000000,-1742.5000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (1)
	CreateDynamicObject(1721,1591.8000000,-1741.9000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (2)
	CreateDynamicObject(1721,1591.8000000,-1741.3000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (3)
	CreateDynamicObject(1721,1591.8000000,-1740.7000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (4)
	CreateDynamicObject(1721,1591.8000000,-1740.1000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (5)
	CreateDynamicObject(1721,1591.8000000,-1739.5000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (6)
	CreateDynamicObject(1721,1591.8000000,-1738.9000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (7)
	CreateDynamicObject(1721,1591.8000000,-1738.3000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (8)
	CreateDynamicObject(1721,1591.8000000,-1737.7000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (9)
	CreateDynamicObject(1721,1591.8000000,-1737.1000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (10)
	CreateDynamicObject(1721,1590.0000000,-1742.4000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (11)
	CreateDynamicObject(1721,1590.0000000,-1741.8000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (12)
	CreateDynamicObject(1721,1590.0000000,-1741.2000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (13)
	CreateDynamicObject(1721,1590.0000000,-1740.6000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (14)
	CreateDynamicObject(1721,1590.0000000,-1740.0000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (15)
	CreateDynamicObject(1721,1590.0000000,-1739.4000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (16)
	CreateDynamicObject(1721,1590.0000000,-1738.8000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (17)
	CreateDynamicObject(1721,1590.0000000,-1738.2000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (18)
	CreateDynamicObject(1721,1590.0000000,-1737.6000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (19)
	CreateDynamicObject(1721,1590.0000000,-1737.0000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (20)
	CreateDynamicObject(1721,1588.3000000,-1742.4000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (21)
	CreateDynamicObject(1721,1588.3000000,-1741.8000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (22)
	CreateDynamicObject(1721,1588.3000000,-1741.2000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (23)
	CreateDynamicObject(1721,1588.3000000,-1740.6000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (24)
	CreateDynamicObject(1721,1588.3000000,-1740.0000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (25)
	CreateDynamicObject(1721,1588.3000000,-1739.4000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (26)
	CreateDynamicObject(1721,1588.3000000,-1738.8000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (27)
	CreateDynamicObject(1721,1588.3000000,-1738.2000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (28)
	CreateDynamicObject(1721,1588.3000000,-1737.6000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (29)
	CreateDynamicObject(1721,1588.3000000,-1737.0000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (30)
	CreateDynamicObject(2614,1582.9000000,-1738.6000000,-35.5999980,0.0000000,0.0000000,90.5000000); //object(cj_us_flag) (1)
	CreateDynamicObject(2614,1591.8000000,-1717.2000000,-35.5999980,0.0000000,0.0000000,181.7500000); //object(cj_us_flag) (2)
	CreateDynamicObject(14532,1583.5996000,-1733.7998000,-36.7999990,0.0000000,0.0000000,221.2097200); //object(tv_stand_driv) (1)
	CreateDynamicObject(2491,1585.4000000,-1738.4000000,-38.2999990,0.0000000,0.0000000,0.0000000); //object(model_stand) (1)
	CreateDynamicObject(19447,1596.1000000,-1732.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1589.2002000,-1732.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1582.2002000,-1732.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1585.7002000,-1732.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1579.9000000,-1732.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1578.0996000,-1725.3000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (18)
	CreateDynamicObject(19358,1595.6000000,-1749.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19447,1592.5996000,-1732.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19388,1592.4000000,-1749.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(19358,1589.2000000,-1749.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19388,1586.0000000,-1749.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(19358,1582.8000000,-1749.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19388,1579.6000000,-1749.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(19358,1577.0000000,-1749.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(1502,1578.8000000,-1749.0000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(gen_doorint04) (6)
	CreateDynamicObject(1502,1591.5996000,-1749.0996000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(gen_doorint04) (6)
	CreateDynamicObject(1502,1585.2002000,-1749.0000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(gen_doorint04) (6)
	CreateDynamicObject(19358,1582.8000000,-1755.8000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1582.7998000,-1750.7002000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1582.7998000,-1753.9004000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1589.1000000,-1755.8000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1589.0996000,-1750.5000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1589.0996000,-1753.7002000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(1999,1593.8000000,-1754.0000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(officedesk2) (1)
	CreateDynamicObject(1742,1595.0000000,-1749.1000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(med_bookshelf) (7)
	CreateDynamicObject(1742,1593.5996000,-1749.0996000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(med_bookshelf) (8)
	CreateDynamicObject(1714,1594.7000000,-1755.4000000,-37.7999990,0.0000000,0.0000000,174.7500000); //object(kb_swivelchair1) (1)
	CreateDynamicObject(1721,1595.6000000,-1752.3000000,-37.7999990,0.0000000,0.0000000,142.7500000); //object(est_chair1) (31)
	CreateDynamicObject(1721,1593.3000000,-1752.2000000,-37.7999990,0.0000000,0.0000000,214.4953600); //object(est_chair1) (32)
	CreateDynamicObject(912,1589.6000000,-1754.3000000,-37.2999990,0.0000000,0.0000000,90.0000000); //object(bust_cabinet_2) (1)
	CreateDynamicObject(2614,1593.6000000,-1756.0000000,-35.5999980,0.0000000,0.0000000,177.7500000); //object(cj_us_flag) (3)
	CreateDynamicObject(1999,1580.6000000,-1754.6000000,-37.7999990,0.0000000,0.0000000,50.7500000); //object(officedesk2) (2)
	CreateDynamicObject(1999,1584.4000000,-1754.0000000,-37.7999990,0.0000000,0.0000000,304.7500000); //object(officedesk2) (3)
	CreateDynamicObject(1714,1583.6000000,-1755.3000000,-37.7999990,0.0000000,0.0000000,137.2485400); //object(kb_swivelchair1) (2)
	CreateDynamicObject(1714,1582.0000000,-1755.4000000,-37.7999990,0.0000000,0.0000000,220.2467000); //object(kb_swivelchair1) (3)
	CreateDynamicObject(1721,1580.4000000,-1752.5000000,-37.7999990,0.0000000,0.0000000,214.4915800); //object(est_chair1) (33)
	CreateDynamicObject(1721,1579.2000000,-1753.9000000,-37.7999990,0.0000000,0.0000000,251.5000000); //object(est_chair1) (34)
	CreateDynamicObject(1742,1577.8000000,-1749.0000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(med_bookshelf) (9)
	CreateDynamicObject(1742,1584.3000000,-1749.0000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(med_bookshelf) (10)
	CreateDynamicObject(1721,1586.6000000,-1754.3000000,-37.7999990,0.0000000,0.0000000,120.2415800); //object(est_chair1) (35)
	CreateDynamicObject(1721,1585.7000000,-1753.3000000,-37.7999990,0.0000000,0.0000000,120.2398700); //object(est_chair1) (36)
	CreateDynamicObject(2164,1587.0000000,-1756.1000000,-37.7999990,0.0000000,0.0000000,180.0000000); //object(med_office_unit_5) (2)
	CreateDynamicObject(2164,1576.6000000,-1753.6000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(med_office_unit_5) (3)
	CreateDynamicObject(2614,1584.5000000,-1756.0000000,-35.5999980,0.0000000,0.0000000,179.5000000); //object(cj_us_flag) (4)
	CreateDynamicObject(2614,1580.5000000,-1756.0000000,-35.7000010,0.0000000,0.0000000,178.7500000); //object(cj_us_flag) (5)
	CreateDynamicObject(1721,1579.2002000,-1753.9004000,-37.7999990,0.0000000,0.0000000,251.4990200); //object(est_chair1) (37)
	CreateDynamicObject(19447,1596.1000000,-1741.6000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1589.2002000,-1741.5996000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1592.5996000,-1741.5996000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1585.7002000,-1741.6000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1582.2002000,-1741.5996000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1579.9000000,-1741.6000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19358,1578.1000000,-1736.7000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1578.1000000,-1731.0000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1578.0996000,-1733.5000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(18767,1574.7000000,-1725.1000000,-34.2999990,0.0000000,0.0000000,180.0000000); //object(stands) (1)
	CreateDynamicObject(19358,1576.9004000,-1729.7000000,-32.5999980,0.0000000,0.0000000,74.9981690); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1575.0000000,-1731.2000000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19452,1575.0000000,-1729.4000000,-34.2099990,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19358,1574.2002000,-1729.4004000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1571.0000000,-1729.4000000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1576.5000000,-1732.8000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (14)
	CreateDynamicObject(19358,1576.5000000,-1736.0000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (14)
	CreateDynamicObject(19358,1576.5000000,-1739.2000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (14)
	CreateDynamicObject(19447,1578.2000000,-1743.1000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19358,1576.9000000,-1738.4000000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (14)
	CreateDynamicObject(19358,1571.9004000,-1731.2002000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1563.0000000,-1727.9000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1568.7000000,-1731.2000000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1565.5000000,-1731.2000000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19452,1566.0000000,-1729.4004000,-34.2099990,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19358,1567.7998000,-1729.4004000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1545.0000000,-1731.2000000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19452,1558.5000000,-1726.0000000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19358,1564.5996000,-1729.4004000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1563.0000000,-1725.0000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19452,1558.5000000,-1723.0000000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1558.5000000,-1729.4004000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1550.0000000,-1717.0000000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1558.5000000,-1720.0000000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19358,1563.0000000,-1721.9000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1563.0000000,-1718.8000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1563.0000000,-1715.9000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1564.5996000,-1731.2002000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1561.5000000,-1715.2998000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1558.5996000,-1715.2998000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1556.0000000,-1715.2998000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19452,1550.0000000,-1720.0000000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1550.0000000,-1723.0000000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1550.0000000,-1726.0000000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1550.0000000,-1729.4004000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19358,1553.9004000,-1715.2998000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1550.7998000,-1715.2998000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1548.2002000,-1715.2998000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1545.2998000,-1715.2998000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1545.2000000,-1716.7000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1545.2000000,-1719.7000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1545.2000000,-1722.7000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1545.2000000,-1725.9000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1545.2000000,-1729.1000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1545.2000000,-1731.0000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1561.4004000,-1731.2002000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1559.0000000,-1731.2002000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1556.0000000,-1731.2002000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1554.0000000,-1731.2002000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1551.0000000,-1731.2002000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1548.0000000,-1731.2002000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19447,1596.0996000,-1751.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1592.5996000,-1751.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1589.2002000,-1751.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1582.2002000,-1751.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1580.8000000,-1755.5000000,-34.2999990,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1578.8000000,-1751.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1578.0000000,-1751.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1585.7002000,-1751.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1590.4000000,-1755.3000000,-34.2999990,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1599.4000000,-1755.4000000,-34.2999990,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19302,1549.4000000,-1718.6000000,-32.9000020,0.0000000,0.0000000,0.0000000); //object(vgstwires21_lvs) (1)
	CreateDynamicObject(19388,1549.4000000,-1718.6000000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(19358,1546.2000000,-1718.6000000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1559.8000000,-1716.9000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19388,1562.2002000,-1718.5996000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(19302,1562.2998000,-1718.5996000,-32.9000020,0.0000000,0.0000000,0.0000000); //object(vgstwires21_lvs) (2)
	CreateDynamicObject(19358,1550.3000000,-1717.0000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1559.7998000,-1718.5996000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19388,1557.4004000,-1718.5996000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(19302,1557.5000000,-1718.5996000,-32.9000020,0.0000000,0.0000000,0.0000000); //object(vgstwires21_lvs) (3)
	CreateDynamicObject(19358,1555.7002000,-1717.0000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19388,1552.0000000,-1718.5996000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(19302,1552.0996000,-1718.5996000,-32.9000020,0.0000000,0.0000000,0.0000000); //object(vgstwires21_lvs) (4)
	CreateDynamicObject(19358,1554.2002000,-1718.5996000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(1771,1560.7000000,-1717.0000000,-33.5000000,0.0000000,0.0000000,0.0000000); //object(cj_bunk_bed1) (1)
	CreateDynamicObject(19452,1558.5000000,-1717.0000000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(1771,1559.0000000,-1716.9000000,-33.5000000,0.0000000,0.0000000,0.0000000); //object(cj_bunk_bed1) (2)
	CreateDynamicObject(1771,1554.8000000,-1717.0000000,-33.5000000,0.0000000,0.0000000,0.0000000); //object(cj_bunk_bed1) (3)
	CreateDynamicObject(1771,1545.9000000,-1717.0000000,-33.5000000,0.0000000,0.0000000,0.0000000); //object(cj_bunk_bed1) (4)
	CreateDynamicObject(2602,1549.8000000,-1715.8000000,-33.5999980,0.0000000,0.0000000,0.0000000); //object(police_cell_toilet) (1)
	CreateDynamicObject(2602,1551.2000000,-1715.8000000,-33.5999980,0.0000000,0.0000000,0.0000000); //object(police_cell_toilet) (2)
	CreateDynamicObject(2602,1556.4000000,-1715.8000000,-33.5999980,0.0000000,0.0000000,0.0000000); //object(police_cell_toilet) (3)
	CreateDynamicObject(2602,1562.4000000,-1715.8000000,-33.5999980,0.0000000,0.0000000,0.0000000); //object(police_cell_toilet) (4)
	CreateDynamicObject(2008,1552.0000000,-1727.9000000,-34.0999980,0.0000000,0.0000000,0.0000000); //object(officedesk1) (1)
	CreateDynamicObject(2008,1546.7998000,-1727.9004000,-34.0999980,0.0000000,0.0000000,0.0000000); //object(officedesk1) (7)
	CreateDynamicObject(2008,1556.2000000,-1727.8000000,-34.0999980,0.0000000,0.0000000,0.0000000); //object(officedesk1) (8)
	CreateDynamicObject(1671,1547.4000000,-1729.1000000,-33.7000010,0.0000000,0.0000000,180.0000000); //object(swivelchair_a) (2)
	CreateDynamicObject(1671,1557.1000000,-1729.0000000,-33.7000010,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (2)
	CreateDynamicObject(1671,1552.9004000,-1729.0996000,-33.7000010,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (2)
	CreateDynamicObject(949,1554.6000000,-1727.8000000,-33.5000000,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (1)
	CreateDynamicObject(949,1549.7998000,-1727.9004000,-33.5000000,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (1)
	CreateDynamicObject(949,1558.7000000,-1727.9000000,-33.5000000,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (1)
	CreateDynamicObject(1808,1545.5000000,-1724.3000000,-34.0999980,0.0000000,0.0000000,90.0000000); //object(cj_watercooler2) (1)
	CreateDynamicObject(1808,1545.5000000,-1724.7002000,-34.0999980,0.0000000,0.0000000,90.0000000); //object(cj_watercooler2) (2)
	CreateDynamicObject(2833,1557.4000000,-1724.5000000,-34.0999980,0.0000000,0.0000000,0.0000000); //object(gb_livingrug02) (1)
	CreateDynamicObject(2836,1550.4000000,-1724.6000000,-34.0999980,0.0000000,0.0000000,0.0000000); //object(gb_livingrug05) (1)
	CreateDynamicObject(19447,1573.9000000,-1729.8000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1578.0000000,-1734.7998000,-31.0000000,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1555.0000000,-1729.6000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1549.3000000,-1726.5000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1564.5000000,-1729.7998000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1547.5000000,-1729.5000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1559.0000000,-1726.5000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1559.0000000,-1723.2000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1559.0000000,-1719.8000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1559.0000000,-1717.0000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1549.3000000,-1723.2000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1549.2998000,-1717.0000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1559.0000000,-1717.0000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1549.2998000,-1719.8000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)

	// Hospital Interior (Main)
	CreateDynamicObject(10182, 1145.34534, -1326.43506, 14.29738,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1216, 1208.31482, -1415.53162, 13.08000,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1234, 1208.62732, -1415.70447, 13.94000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1234, 1110.42407, -1415.76099, 14.10000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1216, 1110.08032, -1415.63013, 13.28000,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(955, 1154.71997, -1460.89001, 15.15000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(19324, 1155.62354, -1464.91418, 15.44321,   0.00000, 0.00000, 290.21021);
	CreateDynamicObject(19380, 1081.96155, -1191.83630, 17.22300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19459, 196.01599, 1885.01917, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1557, 196.07529, 1883.52783, 368.21887,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1557, 196.07130, 1886.53674, 368.21890,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2597, 196.55498, 1882.81018, 369.15237,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19459, 196.01801, 1885.01917, 366.78271,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(932, 196.58226, 1887.87195, 368.29620,   0.00000, 0.00000, 82.26003);
	CreateDynamicObject(19380, 200.65219, 1885.63452, 371.79330,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1721, 196.51819, 1879.62952, 368.30020,   0.00000, 0.00000, -80.28001);
	CreateDynamicObject(646, 196.80682, 1878.76489, 369.67725,   0.00000, 0.00000, -57.90000);
	CreateDynamicObject(19447, 196.00020, 1891.42590, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3657, 196.57866, 1891.51343, 368.77164,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19459, 196.01401, 1891.51282, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2257, 196.13243, 1891.56458, 370.30396,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19459, 196.02000, 1891.61719, 366.78271,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19380, 190.17557, 1888.49121, 371.79330,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2603, 194.07831, 1893.45239, 368.67572,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2134, 192.47871, 1892.79895, 368.29449,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19459, 205.29829, 1883.48376, 367.59891,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 191.17670, 1892.22668, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19459, 205.29630, 1883.48779, 366.78271,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19459, 205.30029, 1883.48584, 366.78271,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3386, 190.85121, 1892.22180, 368.28775,   0.00000, 0.00000, 88.62000);
	CreateDynamicObject(19459, 196.01440, 1875.63379, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2008, 205.86061, 1883.60925, 368.30051,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1998, 205.80075, 1886.64502, 368.30276,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19459, 196.01640, 1875.63379, 366.78271,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1726, 196.77046, 1875.31677, 368.29749,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19459, 205.29829, 1883.48376, 373.19980,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(1302, 196.41394, 1894.84436, 368.29395,   0.00000, 0.00000, 90.12000);
	CreateDynamicObject(19380, 200.57330, 1876.14758, 371.79330,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2008, 205.87331, 1880.80054, 368.30051,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1671, 206.87636, 1884.60278, 368.77457,   0.00000, 0.00000, -90.71999);
	CreateDynamicObject(1671, 206.88962, 1886.52295, 368.77457,   0.00000, 0.00000, -172.68001);
	CreateDynamicObject(1671, 206.76559, 1881.62439, 368.77457,   0.00000, 0.00000, -93.05999);
	CreateDynamicObject(2146, 206.63840, 1888.72925, 368.77219,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19367, 206.81790, 1888.21204, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1808, 204.99335, 1878.11292, 368.30029,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1822, 198.01413, 1874.07507, 368.29385,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19395, 206.81790, 1888.20740, 366.78271,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19395, 206.81790, 1888.21338, 366.78271,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19380, 200.65666, 1895.21790, 371.79330,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1808, 204.99330, 1877.31873, 368.30029,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1742, 195.99496, 1873.47852, 368.29840,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1523, 196.10260, 1896.39221, 368.23489,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11743, 206.50000, 1878.99414, 369.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19367, 206.88969, 1879.19385, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2202, 207.18857, 1879.64795, 368.30829,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19367, 206.81171, 1879.19983, 366.78271,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19810, 208.15855, 1888.32471, 370.12463,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19395, 206.92821, 1879.17993, 366.78271,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2894, 207.17943, 1879.06763, 369.09995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19395, 196.01801, 1897.15344, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19385, 196.01199, 1897.15540, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1523, 208.38419, 1888.24854, 368.23486,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2146, 187.84018, 1893.82654, 368.77219,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1786, 205.00916, 1875.72278, 368.80246,   0.00000, 0.00000, -82.31999);
	CreateDynamicObject(19367, 207.53770, 1879.19775, 366.78271,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19395, 207.54660, 1879.18787, 366.78271,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1822, 202.20663, 1873.60754, 368.29385,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1726, 199.50908, 1872.48547, 368.29749,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2196, 207.68201, 1878.45105, 369.10001,   0.00000, 0.00000, -154.80003);
	CreateDynamicObject(646, 200.50079, 1872.58521, 369.67725,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19395, 209.18790, 1888.21143, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2258, 198.55948, 1871.91370, 370.22913,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19440, 205.59480, 1894.66174, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2311, 204.78058, 1874.43372, 368.30051,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19440, 205.59081, 1894.66174, 366.78271,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1594, 206.77914, 1875.93872, 368.78009,   0.00000, 0.00000, -7.44000);
	CreateDynamicObject(19459, 205.29630, 1874.46985, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19459, 205.30231, 1874.47375, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2850, 206.79919, 1875.88440, 369.17212,   0.00000, 0.00000, -27.30000);
	CreateDynamicObject(19459, 200.65961, 1871.82007, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19459, 205.29430, 1874.46985, 366.78271,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19459, 205.30630, 1874.47375, 366.78271,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 209.12630, 1879.19177, 368.19983,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1523, 205.55141, 1895.43396, 368.23489,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2261, 202.60854, 1872.45178, 370.11810,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(646, 204.50082, 1873.51270, 369.67725,   0.00000, 0.00000, -34.80000);
	CreateDynamicObject(19459, 200.66161, 1871.82214, 366.78271,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1726, 203.61143, 1872.47729, 368.29749,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19395, 205.59630, 1896.18140, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19385, 205.60030, 1896.18140, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2561, 188.57230, 1897.08313, 369.40839,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19395, 209.90910, 1879.19580, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3389, 186.38525, 1895.36121, 368.29141,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19380, 190.29060, 1898.14954, 371.79330,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2146, 196.59290, 1899.74829, 368.77219,   0.00000, 0.00000, -0.18000);
	CreateDynamicObject(3882, 209.15790, 1876.87158, 369.17361,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19380, 211.08391, 1888.27454, 371.79330,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2132, 195.37851, 1900.10754, 368.29800,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2259, 209.22929, 1893.38196, 369.62939,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 186.50381, 1897.05713, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2607, 211.60872, 1879.66370, 368.67267,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19380, 211.09489, 1878.68140, 371.79330,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(11729, 211.40744, 1878.85754, 368.30396,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3389, 186.50565, 1897.52527, 368.29141,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1997, 208.87405, 1895.41711, 368.29141,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2146, 188.20874, 1898.87451, 368.77219,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19378, 209.99030, 1875.72180, 368.21280,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2201, 212.07433, 1879.49500, 369.07382,   0.00000, 0.00000, 183.71992);
	CreateDynamicObject(19903, 209.75270, 1894.73901, 368.29459,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19459, 210.32750, 1893.94800, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2561, 184.55713, 1896.34900, 369.40839,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 210.38550, 1893.95813, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1671, 213.04358, 1886.87109, 368.77457,   0.00000, 0.00000, 67.62002);
	CreateDynamicObject(932, 192.97705, 1901.16406, 368.29083,   0.00000, 0.00000, -28.32001);
	CreateDynamicObject(19459, 210.32750, 1893.94604, 366.78271,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1998, 213.01755, 1887.67151, 368.30280,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2197, 213.32401, 1883.44739, 368.30411,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19395, 212.24110, 1879.19775, 366.78271,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19459, 209.67821, 1874.57458, 366.78271,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2197, 213.32440, 1882.78210, 368.30411,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(932, 191.34975, 1901.08228, 368.29083,   0.00000, 0.00000, -0.54001);
	CreateDynamicObject(1671, 213.07393, 1880.88269, 368.77457,   0.00000, 0.00000, 15.18001);
	CreateDynamicObject(2197, 213.32350, 1882.11218, 368.30411,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19459, 210.09641, 1874.57263, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11729, 212.46745, 1878.80469, 368.30396,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 191.20325, 1901.63098, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3392, 194.02856, 1902.27625, 368.29120,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2607, 214.21170, 1885.12952, 368.67270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1789, 189.21048, 1901.24597, 368.84256,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19459, 196.02400, 1902.72449, 366.78271,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2133, 187.47284, 1900.49976, 368.29034,   0.00000, 0.00000, 72.77999);
	CreateDynamicObject(1998, 214.10426, 1880.79614, 368.30280,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19459, 196.02000, 1902.99646, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 196.01801, 1903.06494, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3657, 212.54980, 1893.48926, 368.77161,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19459, 214.66360, 1883.41235, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2253, 214.24866, 1880.39905, 369.37256,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3657, 196.51878, 1903.21472, 368.77164,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19459, 214.66161, 1883.41235, 366.78271,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19459, 196.02400, 1903.23450, 366.78271,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11730, 213.60605, 1877.82214, 368.30389,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19459, 214.80231, 1888.21155, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19459, 215.10121, 1883.35132, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19459, 214.73430, 1888.20947, 366.78271,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19459, 214.73430, 1888.21350, 366.78271,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19459, 214.80830, 1888.20544, 366.78271,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19459, 214.80830, 1888.21338, 366.78271,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19459, 215.10519, 1883.35132, 366.78271,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3657, 205.14816, 1901.67627, 368.77161,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(11729, 213.55664, 1876.59766, 368.30399,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1302, 215.38023, 1882.35730, 368.29849,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 213.35609, 1893.95398, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1671, 193.52444, 1903.79736, 368.77457,   0.00000, 0.00000, 15.18001);
	CreateDynamicObject(19459, 205.59830, 1901.76868, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 205.60229, 1901.77588, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19459, 213.46280, 1893.94604, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19459, 205.59430, 1901.76575, 366.78271,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19459, 213.46280, 1893.94202, 366.78271,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19459, 205.59430, 1901.88269, 366.78271,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2134, 206.32304, 1901.67834, 368.29401,   0.00000, 0.00000, 93.47998);
	CreateDynamicObject(11730, 213.55295, 1875.38965, 368.30389,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19459, 213.73480, 1893.94202, 366.78271,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3393, 195.32048, 1904.53430, 368.29285,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19380, 211.16916, 1897.90234, 371.79330,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1671, 216.19833, 1887.49609, 368.74512,   0.00000, 0.00000, 61.80000);
	CreateDynamicObject(1671, 213.18814, 1895.80530, 368.77457,   0.00000, 0.00000, 15.18001);
	CreateDynamicObject(19459, 215.46730, 1879.17590, 366.78271,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 187.39645, 1902.70935, 368.30020,   0.00000, 0.00000, -80.28001);
	CreateDynamicObject(19459, 213.95320, 1874.38440, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19459, 216.08701, 1879.19775, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19380, 200.75323, 1904.77173, 371.79330,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19459, 213.94920, 1874.38440, 366.78271,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19459, 216.08701, 1879.20178, 366.78271,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19459, 216.08556, 1879.17993, 366.78271,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1998, 214.33766, 1895.85437, 368.30280,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2146, 207.47186, 1902.91553, 368.77219,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1997, 187.95015, 1904.15466, 368.29141,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2413, 217.59891, 1885.36523, 368.30179,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(932, 196.61816, 1906.03906, 368.29083,   0.00000, 0.00000, 98.03999);
	CreateDynamicObject(2413, 217.59694, 1886.98193, 368.30179,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1885, 217.73816, 1884.48230, 368.30112,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1959, 217.66637, 1887.28210, 369.32214,   0.00000, 0.00000, -89.87997);
	CreateDynamicObject(6205, 201.29570, 1897.56299, 352.12891,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(1844, 217.89931, 1879.75269, 368.30191,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(932, 209.68146, 1902.80225, 368.29083,   0.00000, 0.00000, -37.86001);
	CreateDynamicObject(2561, 188.90573, 1906.00525, 369.40839,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2146, 215.56683, 1897.19580, 368.77219,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2146, 216.91525, 1894.89673, 368.77219,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1997, 207.36562, 1904.86523, 368.29654,   0.00000, 0.00000, 180.06012);
	CreateDynamicObject(3468, 218.97867, 1888.66553, 368.89133,   0.00000, 0.00000, 16.02000);
	CreateDynamicObject(2700, 217.55830, 1894.31543, 370.50269,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1523, 196.10539, 1908.02490, 368.23489,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 215.08260, 1898.79456, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 210.43829, 1903.57617, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2561, 184.87965, 1905.27734, 369.40839,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1523, 205.53641, 1906.63110, 368.23489,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1997, 187.92365, 1906.83606, 368.29141,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19903, 211.55763, 1903.15076, 368.29459,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1997, 212.40398, 1902.42981, 368.29138,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 186.80367, 1906.53064, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1997, 209.33179, 1904.87878, 368.29654,   0.00000, 0.00000, 180.06012);
	CreateDynamicObject(19380, 190.37656, 1907.72266, 371.79330,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1523, 218.54050, 1893.85095, 368.23489,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14892, 195.57350, 1861.08447, 368.72702,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(19395, 196.02200, 1908.77600, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19385, 196.01601, 1908.77600, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19395, 205.59630, 1907.38599, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19385, 205.60629, 1907.38403, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19329, 220.53381, 1888.08398, 371.04309,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19329, 220.59680, 1888.30334, 371.04309,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1801, 216.69611, 1898.66187, 368.29691,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(6205, 208.70360, 1897.45764, 352.12491,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19395, 219.31889, 1893.94800, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19385, 219.31689, 1893.95605, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 213.80963, 1902.60608, 368.29907,   0.00000, 0.00000, 116.16000);
	CreateDynamicObject(2561, 188.90794, 1908.85229, 369.40839,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2197, 211.54201, 1905.08240, 368.29810,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(19459, 221.18320, 1888.21252, 373.19980,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(19380, 221.63876, 1888.38672, 371.79330,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2134, 215.75790, 1901.67639, 368.30951,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2197, 212.24136, 1905.08240, 368.29810,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(19380, 221.58789, 1878.77893, 371.79330,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1997, 187.92177, 1909.35437, 368.29141,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2561, 184.91331, 1908.11633, 369.40839,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19440, 222.37331, 1888.20947, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2146, 205.06331, 1909.55774, 368.77219,   0.00000, 0.00000, -0.18000);
	CreateDynamicObject(1884, 222.67500, 1883.73413, 368.29749,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(646, 197.61948, 1911.18884, 369.67725,   0.00000, 0.00000, -46.26000);
	CreateDynamicObject(19447, 215.07660, 1904.06445, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1888, 222.74800, 1879.82788, 368.30771,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3657, 200.72159, 1911.54395, 368.77161,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2700, 221.77631, 1894.30725, 370.50269,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19380, 211.31622, 1907.54333, 371.79330,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(646, 203.76534, 1911.16895, 369.67725,   0.00000, 0.00000, -45.48000);
	CreateDynamicObject(1789, 218.45190, 1901.18042, 368.86331,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19459, 200.81651, 1911.98901, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1789, 222.32030, 1894.42358, 368.86331,   0.00000, 0.00000, 178.62000);
	CreateDynamicObject(19459, 200.81650, 1911.98499, 366.78271,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 191.24544, 1911.95215, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2131, 188.82831, 1911.37366, 368.28625,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1801, 220.66580, 1898.65796, 368.29691,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2591, 218.86549, 1901.59351, 368.31021,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1846, 224.38701, 1889.20227, 369.73480,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2134, 219.60930, 1901.63525, 368.30951,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19380, 221.79994, 1898.08362, 371.79330,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(3388, 214.78935, 1907.28503, 368.29156,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 219.92860, 1902.29175, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1671, 213.00961, 1908.97009, 368.73752,   0.00000, 0.00000, -158.75998);
	CreateDynamicObject(1884, 225.65610, 1883.75073, 368.29749,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19459, 225.25180, 1879.19580, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19459, 225.25180, 1879.19983, 366.78271,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19459, 196.02600, 1914.33423, 366.78271,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19459, 205.59030, 1912.97388, 366.78271,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 205.60030, 1913.20325, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1884, 225.73930, 1879.59961, 368.29749,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(6205, 207.80894, 1906.40637, 352.12689,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19447, 196.01801, 1914.71350, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19380, 200.75624, 1914.35950, 371.79330,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19459, 224.86270, 1893.94604, 366.78271,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19459, 205.59430, 1913.39490, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19459, 225.05470, 1893.94995, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 186.80170, 1913.35999, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19440, 226.41170, 1888.20947, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3389, 214.75096, 1908.82361, 368.29092,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19459, 196.02400, 1915.01416, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 225.23849, 1893.95398, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19459, 226.38609, 1888.21057, 367.05600,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(19459, 226.38010, 1888.20654, 366.78271,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19459, 226.38210, 1888.21460, 366.78271,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19459, 226.38609, 1888.21057, 372.41568,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19459, 226.38609, 1888.20654, 373.19980,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(19459, 226.38609, 1888.21252, 373.19980,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(3393, 212.51695, 1910.73999, 368.27591,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1523, 209.92134, 1912.22681, 368.23489,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1801, 224.47411, 1897.59436, 368.29691,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2591, 222.36530, 1901.55627, 368.31021,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1649, 212.21034, 1911.47791, 370.34930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1801, 224.35680, 1898.69055, 368.29691,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19385, 209.95621, 1912.97766, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2591, 225.72820, 1895.61646, 368.31021,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2134, 223.25591, 1901.66052, 368.30951,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(6205, 223.28600, 1886.27063, 352.13089,   0.00000, -90.00000, 180.00000);
	CreateDynamicObject(2146, 208.97969, 1914.61133, 368.77219,   0.00000, 0.00000, -14.28000);
	CreateDynamicObject(19447, 214.69341, 1911.46350, 367.73737,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1846, 228.53172, 1889.20056, 369.73480,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 214.69341, 1911.46350, 373.24719,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(932, 207.16110, 1915.55249, 368.29620,   0.00000, 0.00000, 4.74003);
	CreateDynamicObject(19447, 215.07858, 1911.74377, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1844, 229.50075, 1885.52173, 368.30191,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1801, 226.63680, 1898.71240, 368.29691,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1216, 228.53140, 1893.55530, 368.96069,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1844, 229.59648, 1881.66260, 368.30191,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19459, 229.87379, 1883.47815, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19459, 229.86980, 1883.47815, 366.78271,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 225.30811, 1902.29370, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(932, 228.73680, 1894.65698, 368.31180,   0.00000, 0.00000, -174.96001);
	CreateDynamicObject(19459, 228.98280, 1893.94800, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14892, 177.01270, 1912.38892, 368.61057,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1997, 212.62189, 1914.57007, 368.29468,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19459, 228.98280, 1893.94604, 366.78271,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2591, 225.94510, 1901.49878, 368.31021,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1801, 227.97411, 1897.59436, 368.29691,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19440, 230.58760, 1888.20947, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3657, 230.28090, 1890.90735, 368.77161,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19447, 210.45029, 1916.27612, 369.96509,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(932, 229.01331, 1897.21216, 368.31180,   0.00000, 0.00000, -92.52000);
	CreateDynamicObject(19447, 219.13280, 1911.46765, 370.17731,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3389, 211.81590, 1916.42346, 366.68790,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19459, 230.86311, 1892.94604, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(932, 229.03551, 1898.74304, 368.31180,   0.00000, 0.00000, -84.12000);
	CreateDynamicObject(19459, 230.86110, 1892.94800, 366.78271,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19380, 211.01024, 1917.12415, 371.79330,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(3388, 212.76050, 1916.42004, 367.38879,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(6205, 218.01781, 1907.86279, 352.12891,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19447, 229.54710, 1898.85315, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19380, 232.22084, 1888.49719, 371.79330,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(3387, 213.67035, 1916.42969, 366.72577,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(6205, 193.72861, 1916.44543, 352.11691,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(14892, 161.42320, 1893.17493, 367.25504,   0.00000, 0.00000, 360.00000);
	CreateDynamicObject(19380, 232.06363, 1878.87390, 371.79330,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1789, 229.16460, 1900.44873, 368.86331,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2134, 228.70520, 1901.70776, 368.30951,   0.00000, 0.00000, 0.06000);
	CreateDynamicObject(19447, 209.95621, 1918.71411, 369.96509,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(6205, 201.30354, 1916.72375, 352.11890,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(6205, 229.33940, 1886.21716, 352.13489,   0.00000, -90.00000, 180.00000);
	CreateDynamicObject(6205, 186.43330, 1916.65857, 352.11090,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(6205, 208.56551, 1916.46228, 352.11691,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19380, 232.37122, 1898.09302, 371.79330,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(3865, 212.66454, 1919.69739, 368.72568,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(6205, 222.59293, 1907.76733, 352.12289,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(6205, 228.66490, 1907.42322, 352.13290,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(6205, 208.54552, 1926.46301, 352.12091,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(6205, 193.72861, 1928.44543, 352.11292,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(6205, 201.30350, 1928.72375, 352.11490,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(14892, 231.30730, 1917.94849, 368.69730,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(6205, 186.43330, 1928.65857, 352.11490,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(14892, 230.04500, 1925.03247, 373.13199,   0.00000, 0.00000, 90.00000);

	// Prison (Main)
	CreateDynamicObject(7191, 1759.3388671875, -1602.4755859375, 1734.9488525391, 0, 359.24743652344, 179.99450683594);
	CreateDynamicObject(14856, 1757.1634521484, -1588.1893310547, 1735.8120117188, 0, 0, 182);
	CreateDynamicObject(8661, 1775.4768066406, -1555.7030029297, 1733.9429931641, 0, 0, 0);
	CreateDynamicObject(8661, 1775.5107421875, -1575.599609375, 1733.9429931641, 0, 0, 0);
	CreateDynamicObject(8661, 1773.916015625, -1585.5395507813, 1743.4429931641, 271.99951171875, 179.99450683594, 179.99450683594);
	CreateDynamicObject(8661, 1769.3701171875, -1560.263671875, 1743.8931884766, 90, 179.99450683594, 179.99450683594);
	CreateDynamicObject(8661, 1755.54296875, -1565.8349609375, 1743.8681640625, 90, 164.49871826172, 285.49029541016);
	CreateDynamicObject(8661, 1780.4873046875, -1566.796875, 1743.9184570313, 271.99401855469, 179.99450683594, 270.74157714844);
	CreateDynamicObject(7191, 1763.6158447266, -1602.3254394531, 1734.9488525391, 0, 359.24743652344, 179.99450683594);
	CreateDynamicObject(7191, 1767.837890625, -1602.2255859375, 1734.9488525391, 0, 359.24743652344, 179.99450683594);
	CreateDynamicObject(14856, 1779.0579833984, -1587.5596923828, 1735.8120117188, 0, 0, 1.24951171875);
	CreateDynamicObject(7191, 1772.0864257813, -1602.0699462891, 1734.9488525391, 0, 359.24743652344, 179.99450683594);
	CreateDynamicObject(7191, 1776.3354492188, -1601.9881591797, 1734.9488525391, 0, 359.24743652344, 179.99450683594);
	CreateDynamicObject(7191, 1780.6092529297, -1601.9577636719, 1734.9488525391, 0, 359.24743652344, 179.99450683594);
	CreateDynamicObject(7191, 1780.6083984375, -1601.95703125, 1738.8985595703, 0, 359.24743652344, 179.99450683594);
	CreateDynamicObject(7191, 1776.3553466797, -1601.9653320313, 1738.8985595703, 0, 359.24743652344, 179.99450683594);
	CreateDynamicObject(7191, 1772.1040039063, -1602.0228271484, 1738.8985595703, 0, 359.24743652344, 179.99450683594);
	CreateDynamicObject(7191, 1767.8559570313, -1602.2055664063, 1738.8985595703, 0, 359.24743652344, 179.99450683594);
	CreateDynamicObject(7191, 1763.6304931641, -1602.2875976563, 1738.8985595703, 0, 359.24743652344, 179.99450683594);
	CreateDynamicObject(7191, 1759.3823242188, -1602.4952392578, 1738.8985595703, 0, 359.24743652344, 179.99450683594);
	CreateDynamicObject(8661, 1774.9119873047, -1585.8381347656, 1737.7172851563, 0, 0, 0);
	CreateDynamicObject(8661, 1774.90625, -1586.212890625, 1737.7172851563, 0, 179.99993896484, 0);
	CreateDynamicObject(14856, 1757.1630859375, -1588.1884765625, 1739.5620117188, 0, 0, 181.99951171875);
	CreateDynamicObject(14856, 1779.0576171875, -1587.5595703125, 1739.5625, 0, 0, 1.2469482421875);
	CreateDynamicObject(14856, 1756.6878662109, -1558.7972412109, 1735.8120117188, 0, 0, 181.49700927734);
	CreateDynamicObject(7191, 1759.470703125, -1544.4438476563, 1734.9488525391, 0, 359.24743652344, 359.99450683594);
	CreateDynamicObject(7191, 1763.7202148438, -1544.3764648438, 1734.9488525391, 0, 359.24194335938, 359.98901367188);
	CreateDynamicObject(7191, 1767.9682617188, -1544.2838134766, 1734.9488525391, 0, 359.24194335938, 359.98901367188);
	CreateDynamicObject(14856, 1778.7756347656, -1558.3518066406, 1735.8120117188, 0, 0, 1.2469482421875);
	CreateDynamicObject(7191, 1772.2685546875, -1544.3099365234, 1734.9488525391, 0, 359.24194335938, 359.98901367188);
	CreateDynamicObject(7191, 1776.5231933594, -1544.2121582031, 1734.9488525391, 0, 359.24194335938, 359.98901367188);
	CreateDynamicObject(7191, 1780.5192871094, -1544.1015625, 1734.9488525391, 0, 359.24194335938, 0.489013671875);
	CreateDynamicObject(8661, 1775.4921875, -1559.5787353516, 1737.6934814453, 0, 0, 0);
	CreateDynamicObject(7191, 1780.4685058594, -1544.1010742188, 1738.875, 0, 359.24194335938, 0.4888916015625);
	CreateDynamicObject(7191, 1776.2663574219, -1544.2237548828, 1738.875, 0, 359.24194335938, 0.4888916015625);
	CreateDynamicObject(7191, 1772.0139160156, -1544.3225097656, 1738.875, 0, 359.24194335938, 0.4888916015625);
	CreateDynamicObject(7191, 1767.7136230469, -1544.3187255859, 1738.875, 0, 359.24194335938, 0.4888916015625);
	CreateDynamicObject(7191, 1763.4619140625, -1544.3909912109, 1738.875, 0, 359.24194335938, 0.4888916015625);
	CreateDynamicObject(7191, 1759.2349853516, -1544.4659423828, 1738.875, 0, 359.24194335938, 0.4888916015625);
	CreateDynamicObject(14856, 1756.6875, -1558.796875, 1739.5617675781, 0, 0, 181.494140625);
	CreateDynamicObject(14856, 1778.775390625, -1558.3515625, 1739.5620117188, 0, 0, 1.2469482421875);
	CreateDynamicObject(8661, 1775.4921875, -1559.578125, 1737.6934814453, 0, 179.99450683594, 0);
	CreateDynamicObject(8661, 1758.60546875, -1576.8515625, 1741.3966064453, 0, 180.24719238281, 0);
	CreateDynamicObject(8661, 1796.8046875, -1573.798828125, 1737.6929931641, 0, 0, 0);
	CreateDynamicObject(8661, 1796.8046875, -1573.798828125, 1737.6929931641, 0, 180, 0);
	CreateDynamicObject(8614, 1759.4495849609, -1570.4389648438, 1736.4675292969, 0, 0, 0);
	CreateDynamicObject(970, 1774.7596435547, -1569.5825195313, 1738.2449951172, 0, 0, 0);
	CreateDynamicObject(970, 1770.6550292969, -1569.5819091797, 1738.2449951172, 0, 0, 0);
	CreateDynamicObject(970, 1766.5239257813, -1569.5954589844, 1738.2449951172, 0, 0, 0);
	CreateDynamicObject(970, 1764.4404296875, -1569.5966796875, 1738.2449951172, 0, 0, 0);
	CreateDynamicObject(970, 1760.3516845703, -1569.6000976563, 1738.2449951172, 0, 0, 0);
	CreateDynamicObject(970, 1776.8194580078, -1571.7288818359, 1738.26953125, 0, 0, 90.5);
	CreateDynamicObject(970, 1776.8634033203, -1573.791015625, 1738.2449951172, 0, 0, 90.499877929688);
	CreateDynamicObject(970, 1774.8477783203, -1575.8577880859, 1738.2449951172, 0, 0, 180.49987792969);
	CreateDynamicObject(970, 1770.7470703125, -1575.8815917969, 1738.2449951172, 0, 0, 180.49987792969);
	CreateDynamicObject(970, 1766.6242675781, -1575.9301757813, 1738.2449951172, 0, 0, 180.49987792969);
	CreateDynamicObject(970, 1762.4991455078, -1575.9755859375, 1738.2449951172, 0, 0, 180.49987792969);
	CreateDynamicObject(970, 1758.3935546875, -1576.0017089844, 1738.2449951172, 0, 0, 180.49987792969);
	CreateDynamicObject(970, 1754.2669677734, -1576.0084228516, 1738.2449951172, 0, 0, 180.49987792969);
	CreateDynamicObject(970, 1753.4927978516, -1576.0433349609, 1738.2449951172, 0, 0, 180.49987792969);
	CreateDynamicObject(8661, 1757.4633789063, -1557.0551757813, 1741.3966064453, 0, 180.24719238281, 0);
	CreateDynamicObject(8661, 1761.17578125, -1557.2333984375, 1741.4466552734, 0, 359.74182128906, 0);
	CreateDynamicObject(8661, 1760.8068847656, -1557.2219238281, 1741.3715820313, 0, 180.24169921875, 0);
	CreateDynamicObject(8661, 1758.5277099609, -1574.4494628906, 1741.5217285156, 0, 0.2471923828125, 0);
	CreateDynamicObject(8661, 1763.0654296875, -1589.0302734375, 1741.5217285156, 0, 0.2471923828125, 0);
	CreateDynamicObject(8661, 1761.8243408203, -1589.0578613281, 1741.3966064453, 0, 180.24719238281, 0);
	CreateDynamicObject(14387, 1780.9128417969, -1577.6300048828, 1740.5070800781, 0, 0, 92);
	CreateDynamicObject(14387, 1780.7963867188, -1574.7548828125, 1738.7320556641, 0, 0, 91.99951171875);
	CreateDynamicObject(14387, 1780.697265625, -1574.7872314453, 1738.7320556641, 0, 113.99996948242, 269.99963378906);
	CreateDynamicObject(14387, 1780.6909179688, -1577.2197265625, 1740.2563476563, 0, 113.99963378906, 269.99450683594);
	CreateDynamicObject(970, 1778.5164794922, -1577.0081787109, 1742.0205078125, 0, 0, 90.494384765625);
	CreateDynamicObject(8661, 1775.048828125, -1576.234375, 1744.9672851563, 0, 179.99450683594, 0);
	CreateDynamicObject(8661, 1775.404296875, -1562.490234375, 1746.9672851563, 0, 179.99450683594, 0);
	CreateDynamicObject(8614, 1754.3951416016, -1570.4387207031, 1732.7175292969, 0, 179.25, 0);
	CreateDynamicObject(2205, 1778.9362792969, -1571.5363769531, 1733.9429931641, 0, 0, 0);
	CreateDynamicObject(2205, 1778.0222167969, -1572.8785400391, 1733.9429931641, 0, 0, 89.5);
	CreateDynamicObject(2205, 1779.3442382813, -1573.8327636719, 1733.9429931641, 0, 0, 178.99462890625);
	CreateDynamicObject(2190, 1779.5219726563, -1571.4400634766, 1734.8795166016, 0, 0, 0);
	CreateDynamicObject(2190, 1777.921875, -1572.6606445313, 1734.8795166016, 0, 0, 89.25);
	CreateDynamicObject(2776, 1779.9310302734, -1572.2644042969, 1734.4404296875, 0, 0, 232);
	CreateDynamicObject(14819, 1780.7757568359, -1575.8271484375, 1735.0928955078, 358.25003051758, 0.2501220703125, 91.257659912109);
	CreateDynamicObject(14401, 1767.8037109375, -1573.5908203125, 1734.2686767578, 0, 0, 91.994018554688);
	CreateDynamicObject(3858, 1760.9343261719, -1571.0079345703, 1744.4094238281, 0, 0, 260);
	CreateDynamicObject(8661, 1778.7847900391, -1553.5157470703, 1751.2926025391, 90, 180.00549316406, 269.23352050781);
	CreateDynamicObject(8661, 1778.3208007813, -1567.1134033203, 1751.2425537109, 89.249816894531, 269.99981689453, 89.236633300781);
	CreateDynamicObject(970, 1778.4766845703, -1572.8826904297, 1742.0205078125, 0, 0, 90.994384765625);
	CreateDynamicObject(3858, 1760.93359375, -1571.0078125, 1744.4094238281, 0, 0, 79.996948242188);
	CreateDynamicObject(3089, 1764.1071777344, -1568.7672119141, 1742.8266601563, 0, 0, 34);
	CreateDynamicObject(2173, 1758.0897216797, -1572.2486572266, 1741.5235595703, 0, 0, 216);
	CreateDynamicObject(2173, 1760.3353271484, -1570.6602783203, 1741.5235595703, 0, 0, 215.99670410156);
	CreateDynamicObject(2173, 1762.6174316406, -1569.1575927734, 1741.5235595703, 0, 0, 215.24670410156);
	CreateDynamicObject(2173, 1762.4538574219, -1570.6696777344, 1741.5235595703, 0, 0, 35.494140625);
	CreateDynamicObject(2173, 1760.2321777344, -1572.2497558594, 1741.5235595703, 0, 0, 35.491333007813);
	CreateDynamicObject(2173, 1757.98828125, -1573.8432617188, 1741.5235595703, 0, 0, 35.491333007813);
	CreateDynamicObject(1671, 1763.5197753906, -1571.3277587891, 1741.9614257813, 0, 0, 218);
	CreateDynamicObject(1671, 1761.2962646484, -1572.9020996094, 1741.9614257813, 0, 0, 215.4962310791);
	CreateDynamicObject(1671, 1759.0114746094, -1574.51953125, 1741.9614257813, 0, 0, 215.49133300781);
	CreateDynamicObject(1671, 1757.0166015625, -1571.6016845703, 1741.9614257813, 0, 0, 31.491333007813);
	CreateDynamicObject(1671, 1759.2440185547, -1569.9787597656, 1741.9614257813, 0, 0, 35.48681640625);
	CreateDynamicObject(1671, 1761.5261230469, -1568.5364990234, 1741.9614257813, 0, 0, 35.48583984375);
	CreateDynamicObject(2187, 1760.5855712891, -1570.3542480469, 1741.5122070313, 0, 0, 214);
	CreateDynamicObject(2187, 1760.5849609375, -1570.353515625, 1742.2379150391, 0, 0, 213.99719238281);
	CreateDynamicObject(2187, 1760.8128662109, -1569.0754394531, 1742.2379150391, 0, 0, 36.497161865234);
	CreateDynamicObject(2187, 1760.8125, -1569.0751953125, 1741.4381103516, 0, 0, 36.49658203125);
	CreateDynamicObject(2187, 1758.2767333984, -1571.8021240234, 1742.2379150391, 0, 0, 213.99719238281);
	CreateDynamicObject(2187, 1758.2763671875, -1571.8017578125, 1741.412109375, 0, 0, 213.99719238281);
	CreateDynamicObject(2187, 1758.5090332031, -1570.4970703125, 1741.412109375, 0, 0, 34.247161865234);
	CreateDynamicObject(2187, 1758.5087890625, -1570.4970703125, 1742.2366943359, 0, 0, 34.244384765625);
	CreateDynamicObject(2187, 1762.1694335938, -1571.0229492188, 1741.5061035156, 0, 0, 34);
	CreateDynamicObject(2187, 1762.1689453125, -1571.0224609375, 1742.2318115234, 0, 0, 33.997192382813);
	CreateDynamicObject(2187, 1759.9272460938, -1572.5755615234, 1742.2318115234, 0, 0, 33.997192382813);
	CreateDynamicObject(2187, 1759.9267578125, -1572.5751953125, 1741.4060058594, 0, 0, 33.997192382813);
	CreateDynamicObject(2187, 1759.6702880859, -1573.84765625, 1742.2379150391, 0, 0, 213.99719238281);
	CreateDynamicObject(2187, 1759.669921875, -1573.84765625, 1741.4621582031, 0, 0, 213.99719238281);
	CreateDynamicObject(2187, 1761.9296875, -1572.3258056641, 1742.2379150391, 0, 0, 213.99719238281);
	CreateDynamicObject(2187, 1761.9296875, -1572.3251953125, 1741.412109375, 0, 0, 213.99719238281);
	CreateDynamicObject(8661, 1766.4588623047, -1559.2015380859, 1751.267578125, 271.26885986328, 168.62805175781, 259.37780761719);
	CreateDynamicObject(8661, 1766.9233398438, -1559.1123046875, 1751.267578125, 271.26345825195, 168.62365722656, 78.876129150391);
	CreateDynamicObject(2136, 1767.3325195313, -1569.9263916016, 1741.4822998047, 0, 0, 90);
	CreateDynamicObject(2135, 1767.3481445313, -1570.8608398438, 1741.4837646484, 0, 0, 90);
	CreateDynamicObject(2828, 1778.9792480469, -1573.7318115234, 1734.8795166016, 0, 0, 326);
	CreateDynamicObject(2139, 1767.3896484375, -1571.8475341797, 1741.4835205078, 0, 0, 90);
	CreateDynamicObject(2139, 1767.3603515625, -1567.9683837891, 1741.4835205078, 0, 0, 90);
	CreateDynamicObject(2140, 1767.4088134766, -1572.8157958984, 1741.4838867188, 0, 0, 87);
	CreateDynamicObject(2164, 1776.0461425781, -1567.0831298828, 1741.4696044922, 0, 0, 359.25);
	CreateDynamicObject(2163, 1774.255859375, -1567.1708984375, 1741.5002441406, 0, 0, 0);
	CreateDynamicObject(2208, 1767.0778808594, -1585.1064453125, 1741.5029296875, 0, 0, 91.5);
	CreateDynamicObject(2208, 1767.0032958984, -1582.4022216797, 1741.5029296875, 0, 0, 153.49963378906);
	CreateDynamicObject(2208, 1764.4655761719, -1581.1422119141, 1741.5029296875, 0, 0, 153.49548339844);
	CreateDynamicObject(2208, 1762.1202392578, -1579.9860839844, 1741.5029296875, 0, 0, 183.49548339844);
	CreateDynamicObject(2208, 1759.5886230469, -1580.1437988281, 1741.5029296875, 0, 0, 183.49365234375);
	CreateDynamicObject(2637, 1770.8051757813, -1570.4884033203, 1741.8735351563, 0, 0, 90);
	CreateDynamicObject(2637, 1770.8111572266, -1572.3884277344, 1741.8735351563, 0, 0, 90);
	CreateDynamicObject(2776, 1771.9637451172, -1572.65625, 1741.9592285156, 0, 0, 272);
	CreateDynamicObject(2776, 1771.9259033203, -1571.4854736328, 1741.9592285156, 0, 0, 271.99951171875);
	CreateDynamicObject(2776, 1771.9973144531, -1570.2535400391, 1741.9592285156, 0, 0, 271.99951171875);
	CreateDynamicObject(2776, 1770.2476806641, -1572.9060058594, 1741.9592285156, 0, 0, 91.99951171875);
	CreateDynamicObject(2776, 1769.6883544922, -1571.5091552734, 1741.9592285156, 0, 0, 91.994018554688);
	CreateDynamicObject(2776, 1769.7230224609, -1570.2498779297, 1741.9592285156, 0, 0, 91.994018554688);
	CreateDynamicObject(2776, 1770.0451660156, -1567.3060302734, 1741.9592285156, 0, 0, 1.7440185546875);
	CreateDynamicObject(2776, 1770.044921875, -1567.3056640625, 1742.109375, 0, 0, 1.7413330078125);
	CreateDynamicObject(2776, 1770.044921875, -1567.3056640625, 1742.2845458984, 0, 0, 1.7413330078125);
	CreateDynamicObject(1713, 1777.7474365234, -1571.4503173828, 1741.4388427734, 0, 0, 272);
	CreateDynamicObject(1713, 1776.7827148438, -1574.2749023438, 1741.4388427734, 0, 0, 178.99951171875);
	CreateDynamicObject(3962, 1775.3117675781, -1571.7060546875, 1741.5023193359, 0.03924560546875, 90.49853515625, 359.7497253418);
	CreateDynamicObject(8661, 1778.1085205078, -1554.0021972656, 1751.2926025391, 90, 179.99450683594, 90.991943359375);
	CreateDynamicObject(1429, 1774.6732177734, -1567.4151611328, 1742.6916503906, 0, 0, 0);
	CreateDynamicObject(2964, 1773.1020507813, -1578.4581298828, 1741.46484375, 0, 0, 180);
	CreateDynamicObject(2008, 1756.0985107422, -1583.4029541016, 1741.5482177734, 0, 0, 0);
	CreateDynamicObject(2008, 1759.1009521484, -1583.3901367188, 1741.5482177734, 0, 0, 0);
	CreateDynamicObject(2008, 1762.0266113281, -1583.3752441406, 1741.5482177734, 0, 0, 0);
	CreateDynamicObject(2190, 1760.8291015625, -1580.0938720703, 1742.3681640625, 0, 0, 342);
	CreateDynamicObject(2190, 1767.2740478516, -1584.0732421875, 1742.3681640625, 0, 0, 259.99890136719);
	CreateDynamicObject(2776, 1762.8975830078, -1584.4860839844, 1742.0198974609, 0, 0, 184);
	CreateDynamicObject(2776, 1759.9997558594, -1584.62109375, 1742.0198974609, 0, 0, 183.9990234375);
	CreateDynamicObject(2776, 1756.9647216797, -1584.6823730469, 1742.0198974609, 0, 0, 183.9990234375);
	CreateDynamicObject(2776, 1760.1267089844, -1581.2440185547, 1742.0198974609, 0, 0, 135.9990234375);
	CreateDynamicObject(2776, 1765.6030273438, -1584.4368896484, 1742.0198974609, 0, 0, 147.99426269531);
	CreateDynamicObject(2602, 1758.9934082031, -1561.9260253906, 1734.4664306641, 0, 0, 268);
	CreateDynamicObject(2602, 1763.2186279297, -1561.8996582031, 1734.4664306641, 0, 0, 267.99499511719);
	CreateDynamicObject(2602, 1767.5178222656, -1561.8721923828, 1734.4664306641, 0, 0, 267.99499511719);
	CreateDynamicObject(2602, 1771.8062744141, -1561.8575439453, 1734.4664306641, 0, 0, 267.99499511719);
	CreateDynamicObject(2602, 1776.0793457031, -1561.9962158203, 1734.4664306641, 0, 0, 267.99499511719);
	CreateDynamicObject(2602, 1780.0523681641, -1561.7204589844, 1734.4664306641, 0, 0, 267.99499511719);
	CreateDynamicObject(2602, 1780.1115722656, -1582.5888671875, 1734.4664306641, 0, 0, 267.99499511719);
	CreateDynamicObject(2602, 1775.8510742188, -1583.1767578125, 1734.4664306641, 0, 0, 267.99499511719);
	CreateDynamicObject(2602, 1771.5657958984, -1583.7680664063, 1734.4664306641, 0, 0, 267.99499511719);
	CreateDynamicObject(2602, 1767.330078125, -1584.3520507813, 1734.4664306641, 0, 0, 267.99499511719);
	CreateDynamicObject(2602, 1762.9997558594, -1584.0653076172, 1734.4664306641, 0, 0, 267.99499511719);
	CreateDynamicObject(2602, 1758.8037109375, -1584.3908691406, 1734.4664306641, 0, 0, 267.99499511719);
	CreateDynamicObject(1800, 1756.0372314453, -1585.6010742188, 1733.9429931641, 0, 0, 0);
	CreateDynamicObject(1800, 1759.9868164063, -1585.6198730469, 1733.9429931641, 0, 0, 0);
	CreateDynamicObject(1800, 1764.2355957031, -1585.6398925781, 1733.9429931641, 0, 0, 0);
	CreateDynamicObject(1800, 1768.4360351563, -1585.66015625, 1733.9429931641, 0, 0, 0);
	CreateDynamicObject(1800, 1772.6612548828, -1585.6807861328, 1733.9429931641, 0, 0, 0);
	CreateDynamicObject(1800, 1776.9354248047, -1585.7015380859, 1733.9429931641, 0, 0, 0);
	CreateDynamicObject(1800, 1777.1528320313, -1565.1075439453, 1733.9429931641, 0, 0, 0);
	CreateDynamicObject(1800, 1772.9020996094, -1565.1015625, 1733.9429931641, 0, 0, 0);
	CreateDynamicObject(1800, 1768.6270751953, -1565.1192626953, 1733.9429931641, 0, 0, 0);
	CreateDynamicObject(1800, 1764.3767089844, -1565.11328125, 1733.9429931641, 0, 0, 0);
	CreateDynamicObject(1800, 1760.1014404297, -1565.1063232422, 1733.9429931641, 0, 0, 0);
	CreateDynamicObject(1800, 1756.1010742188, -1565.0988769531, 1733.9429931641, 0, 0, 0);

	// Hitman HQ (Main)
	CreateDynamicObject(14597, 275.64441, 1826.99341, 628.99384,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1536, 288.81924, 1825.74548, 626.96436,   0.00000, 0.00000, 89.82001);
	CreateDynamicObject(1536, 288.80136, 1828.71216, 626.96436,   0.00000, 0.00000, -90.36001);
	CreateDynamicObject(19379, 288.86429, 1826.14209, 629.01538,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19379, 291.75934, 1830.28406, 629.01538,   0.00000, 0.00000, 89.52004);
	CreateDynamicObject(19379, 291.91187, 1823.81567, 629.01538,   0.00000, 0.00000, 90.18003);
	CreateDynamicObject(19379, 286.91748, 1835.06750, 629.01538,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19379, 286.93823, 1844.54004, 629.01538,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19379, 279.41287, 1835.07727, 629.01538,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19379, 279.41388, 1838.62573, 629.01538,   0.00000, 0.00000, 0.06000);
	CreateDynamicObject(19379, 282.36877, 1840.65002, 629.01538,   0.00000, 0.00000, 90.24000);
	CreateDynamicObject(19379, 283.33542, 1813.37573, 629.01538,   0.00000, 0.00000, 90.18003);
	CreateDynamicObject(19379, 286.93030, 1819.05054, 629.01538,   0.00000, 0.00000, 180.11987);
	CreateDynamicObject(19379, 286.93228, 1809.85938, 629.01538,   0.00000, 0.00000, 180.11987);
	CreateDynamicObject(19379, 279.43765, 1819.04675, 629.01538,   0.00000, 0.00000, 180.11987);
	CreateDynamicObject(19379, 279.41653, 1810.32458, 629.01538,   0.00000, 0.00000, 180.11987);
	CreateDynamicObject(19379, 274.22406, 1840.65576, 629.01538,   0.00000, 0.00000, 90.24000);
	CreateDynamicObject(19379, 279.14267, 1835.07861, 629.01538,   0.00000, 0.00000, 179.82008);
	CreateDynamicObject(19379, 271.61826, 1835.09875, 629.01538,   0.00000, 0.00000, 0.42002);
	CreateDynamicObject(19379, 271.60031, 1842.01025, 629.01538,   0.00000, 0.00000, 0.42002);
	CreateDynamicObject(19379, 279.17969, 1844.41699, 629.01538,   0.00000, 0.00000, 179.82008);
	CreateDynamicObject(19379, 279.13852, 1819.03809, 629.01538,   0.00000, 0.00000, 180.23990);
	CreateDynamicObject(19379, 279.17059, 1813.16370, 629.01538,   0.00000, 0.00000, 180.23990);
	CreateDynamicObject(19379, 271.63040, 1819.04517, 629.01538,   0.00000, 0.00000, 180.23990);
	CreateDynamicObject(19379, 271.65027, 1809.74463, 629.01538,   0.00000, 0.00000, 180.23990);
	CreateDynamicObject(19379, 275.84720, 1813.41479, 629.01538,   0.00000, 0.00000, 269.93973);
	CreateDynamicObject(19379, 262.44925, 1825.40088, 629.01538,   0.00000, 0.00000, 180.23990);
	CreateDynamicObject(19379, 266.61258, 1824.12939, 629.01538,   0.00000, 0.00000, 270.30005);
	CreateDynamicObject(19379, 266.59171, 1829.97729, 629.01538,   0.00000, 0.00000, 269.88007);
	CreateDynamicObject(1491, 283.21112, 1823.78418, 625.52020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1491, 273.84842, 1823.79272, 625.52020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1491, 271.31128, 1827.82324, 625.52020,   0.00000, 0.00000, -89.58004);
	CreateDynamicObject(1491, 275.37140, 1830.35193, 625.52020,   0.00000, 0.00000, -180.12007);
	CreateDynamicObject(1491, 284.73337, 1830.35266, 625.52020,   0.00000, 0.00000, -180.12007);
	CreateDynamicObject(19462, 285.09583, 1825.82971, 626.92224,   0.36000, 89.94003, 89.28001);
	CreateDynamicObject(19462, 287.73550, 1828.19556, 626.91974,   0.36000, 89.94003, 89.94000);
	CreateDynamicObject(19462, 276.50281, 1828.20459, 626.90900,   0.36000, 89.94003, 90.00002);
	CreateDynamicObject(19462, 276.50085, 1825.88928, 626.89667,   0.36000, 89.94003, 90.00002);
	CreateDynamicObject(19462, 280.89731, 1828.21509, 626.92352,   0.36000, 89.94003, 90.00002);
	CreateDynamicObject(19462, 280.73828, 1825.93396, 626.90900,   0.36000, 89.94003, 90.00002);
	CreateDynamicObject(19462, 277.57834, 1825.90930, 626.90900,   0.36000, 89.94003, 90.00002);
	CreateDynamicObject(19462, 291.66397, 1825.83826, 626.90472,   0.36000, 89.94003, 89.28001);
	CreateDynamicObject(19305, 288.78735, 1825.45801, 628.32080,   0.00000, 0.00000, -95.40001);
	CreateDynamicObject(2207, 266.32962, 1826.05859, 626.94104,   0.00000, 0.00000, 89.40002);
	CreateDynamicObject(1714, 264.16104, 1827.07581, 626.98358,   0.00000, 0.00000, 81.17999);
	CreateDynamicObject(1715, 266.85654, 1828.96912, 627.02209,   0.00000, 0.00000, -55.79997);
	CreateDynamicObject(1715, 267.69156, 1828.07922, 627.02209,   0.00000, 0.00000, -69.65997);
	CreateDynamicObject(1715, 267.94534, 1826.71545, 627.02209,   0.00000, 0.00000, -97.37999);
	CreateDynamicObject(1715, 267.54315, 1825.56836, 627.02209,   0.00000, 0.00000, -122.09998);
	CreateDynamicObject(1715, 266.51468, 1824.85925, 627.02209,   0.00000, 0.00000, -151.07993);
	CreateDynamicObject(11712, 266.77585, 1826.97229, 627.84235,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14455, 270.48907, 1829.81360, 628.66907,   0.00000, 0.00000, 180.06009);
	CreateDynamicObject(14455, 264.72067, 1829.81323, 628.66907,   0.00000, 0.00000, 180.06009);
	CreateDynamicObject(14455, 266.14948, 1824.36328, 628.66907,   0.00000, 0.00000, 359.76007);
	CreateDynamicObject(14455, 260.36832, 1824.32751, 628.66907,   0.00000, 0.00000, 359.76007);
	CreateDynamicObject(3017, 265.81439, 1826.19275, 627.73700,   1.26000, 0.60000, 35.87999);
	CreateDynamicObject(2257, 262.59427, 1827.12500, 629.11652,   0.00000, 0.00000, 91.32000);
	CreateDynamicObject(16780, 286.56949, 1826.89038, 631.20435,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16780, 279.50092, 1826.84827, 631.20984,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16780, 273.23172, 1826.90674, 631.18280,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(341, 265.88730, 1828.10400, 627.85144,   -87.12004, -33.29999, -102.24001);
	CreateDynamicObject(347, 265.95154, 1827.14893, 627.75305,   -76.79999, -103.68000, -112.74001);
	CreateDynamicObject(347, 265.99887, 1826.85461, 627.75305,   78.24003, 69.00000, -50.22001);
	CreateDynamicObject(19450, 266.59207, 1829.76587, 632.13080,   0.00000, 0.00000, 90.06004);
	CreateDynamicObject(19450, 266.65073, 1824.33875, 632.13080,   0.00000, 0.00000, 90.06004);
	CreateDynamicObject(2509, 284.80246, 1840.55920, 628.68848,   -1.32001, 89.87998, -0.18000);
	CreateDynamicObject(2509, 282.97931, 1840.53882, 628.68628,   -1.32001, 89.87998, 0.30000);
	CreateDynamicObject(2509, 281.29443, 1840.51746, 628.68848,   -1.32001, 89.87998, 0.30000);
	CreateDynamicObject(351, 280.59906, 1840.43591, 628.20160,   -11.03999, -14.16000, -5.94000);
	CreateDynamicObject(351, 280.57559, 1840.39575, 628.78198,   -11.03999, -14.16000, -5.94000);
	CreateDynamicObject(356, 282.17032, 1840.40027, 628.88879,   -10.97999, -24.96000, 0.12000);
	CreateDynamicObject(356, 282.11331, 1840.35693, 628.30231,   -10.97999, -24.96000, 0.12000);
	CreateDynamicObject(349, 283.77316, 1840.47314, 628.80200,   -15.66000, -21.90000, 0.00000);
	CreateDynamicObject(349, 283.86072, 1840.33728, 628.32251,   -15.66000, -21.90000, 0.00000);
	CreateDynamicObject(358, 285.21771, 1840.42090, 628.41858,   -6.90002, -68.69999, 1.74000);
	CreateDynamicObject(2475, 279.67560, 1838.40454, 626.95001,   0.00000, 0.00000, 88.14001);
	CreateDynamicObject(2475, 279.63931, 1836.94141, 626.95001,   0.00000, 0.00000, 88.14001);
	CreateDynamicObject(2475, 279.59842, 1835.44250, 626.95001,   0.00000, 0.00000, 88.14001);
	CreateDynamicObject(350, 279.72568, 1838.82483, 627.78546,   -74.52000, -9.00000, 32.22001);
	CreateDynamicObject(350, 279.72464, 1838.36121, 627.78546,   -74.52000, -9.00000, 32.22001);
	CreateDynamicObject(348, 279.71594, 1837.97144, 627.81323,   -84.78011, -36.30000, 0.00000);
	CreateDynamicObject(348, 279.71124, 1837.61096, 627.81323,   -83.22009, -31.91998, 0.00000);
	CreateDynamicObject(353, 279.77527, 1837.09546, 627.80121,   -90.71998, -36.53993, 0.00000);
	CreateDynamicObject(353, 279.73547, 1836.65857, 627.80121,   -90.71998, -36.53993, 0.00000);
	CreateDynamicObject(355, 279.74847, 1835.58032, 627.82135,   -95.39997, -68.16000, 9.36001);
	CreateDynamicObject(1279, 279.86230, 1838.77759, 627.08112,   0.00000, 0.00000, 88.62000);
	CreateDynamicObject(1580, 279.94742, 1837.89893, 627.08124,   0.00000, 0.00000, 87.18000);
	CreateDynamicObject(1579, 279.88538, 1837.22656, 627.05701,   0.00000, 0.00000, 91.97999);
	CreateDynamicObject(1576, 279.94363, 1836.55835, 627.11060,   0.00000, 0.00000, 92.63999);
	CreateDynamicObject(1577, 279.84671, 1835.84253, 627.08331,   0.00000, 0.00000, 90.35999);
	CreateDynamicObject(1578, 279.79156, 1835.21411, 627.05389,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19515, 279.91925, 1839.07544, 628.74335,   -2.52000, -90.41999, 270.78003);
	CreateDynamicObject(19515, 279.94498, 1838.63428, 628.74335,   -2.52000, -90.41999, 270.78003);
	CreateDynamicObject(19515, 279.93002, 1838.17432, 628.74335,   -2.52000, -90.41999, 270.78003);
	CreateDynamicObject(19515, 279.95566, 1837.73303, 628.74335,   -2.52000, -90.41999, 270.78003);
	CreateDynamicObject(19515, 279.97009, 1837.25146, 628.74335,   -2.52000, -90.41999, 270.78003);
	CreateDynamicObject(19515, 279.96347, 1836.77075, 628.74335,   -2.52000, -90.41999, 270.78003);
	CreateDynamicObject(19515, 279.91864, 1836.31274, 628.74335,   -2.52000, -90.41999, 270.78003);
	CreateDynamicObject(19515, 279.86850, 1835.79431, 628.74335,   -2.52000, -90.41999, 270.78003);
	CreateDynamicObject(19515, 279.87714, 1835.25232, 628.74335,   -2.52000, -90.41999, 270.78003);
	CreateDynamicObject(14455, 286.80310, 1831.14087, 628.66907,   0.00000, 0.00000, 90.06013);
	CreateDynamicObject(14455, 286.84018, 1836.94104, 628.66907,   0.00000, 0.00000, 90.06013);
	CreateDynamicObject(19450, 262.53137, 1829.18469, 632.13080,   0.00000, 0.00000, 1.56002);
	CreateDynamicObject(19450, 262.42844, 1830.82629, 628.40839,   -89.69999, 48.36001, 51.24001);
	CreateDynamicObject(19450, 262.56412, 1823.42273, 628.40839,   -90.66002, 228.48022, 51.24001);
	CreateDynamicObject(19450, 262.50177, 1828.81726, 625.43805,   0.00000, 0.00000, 0.42002);
	CreateDynamicObject(19450, 286.79767, 1835.04956, 632.13080,   0.00000, 0.00000, 0.66002);
	CreateDynamicObject(19450, 286.71075, 1844.44080, 632.13080,   0.00000, 0.00000, 0.66002);
	CreateDynamicObject(2357, 276.91580, 1820.17407, 627.39197,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2357, 273.93591, 1820.17859, 627.39197,   0.00000, 0.00000, -0.78000);
	CreateDynamicObject(19443, 274.08453, 1819.93799, 629.43561,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19443, 276.73926, 1819.93604, 629.43561,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19443, 273.30402, 1820.15967, 630.22101,   -89.75998, -90.54003, 2.70000);
	CreateDynamicObject(19443, 276.54266, 1820.34338, 630.22101,   -89.75998, -90.54003, 2.70000);
	CreateDynamicObject(19443, 277.12000, 1820.36536, 630.22101,   -89.75998, -90.54003, 2.70000);
	CreateDynamicObject(356, 272.28125, 1820.62097, 627.82898,   82.49999, -19.08000, -29.64000);
	CreateDynamicObject(356, 273.06094, 1820.58777, 627.82898,   82.49999, -19.08000, -29.64000);
	CreateDynamicObject(355, 274.59283, 1820.50684, 627.81659,   79.32003, -19.79999, -16.44000);
	CreateDynamicObject(355, 275.45190, 1820.58069, 627.81659,   79.32003, -19.79999, -16.44000);
	CreateDynamicObject(351, 277.04422, 1820.59619, 627.78522,   80.28001, -20.58001, -10.50000);
	CreateDynamicObject(351, 278.00427, 1820.58130, 627.78522,   80.28001, -20.58001, -10.50000);
	CreateDynamicObject(11729, 279.90778, 1834.39880, 626.96265,   0.00000, 0.00000, 86.93999);
	CreateDynamicObject(11729, 279.83923, 1833.74304, 626.96265,   0.00000, 0.00000, 86.93999);
	CreateDynamicObject(11730, 279.89355, 1833.13574, 626.97687,   0.00000, 0.00000, 89.22001);
	CreateDynamicObject(11729, 279.86880, 1832.48120, 626.96265,   0.00000, 0.00000, 86.93999);
	CreateDynamicObject(11729, 279.78595, 1831.81274, 626.96265,   0.00000, 0.00000, 86.93999);
	CreateDynamicObject(2049, 278.01779, 1814.59387, 628.32965,   0.00000, 0.00000, -180.72003);
	CreateDynamicObject(2049, 275.31180, 1814.51392, 628.32965,   0.00000, 0.00000, -180.72003);
	CreateDynamicObject(2049, 272.42874, 1814.45544, 628.32965,   0.00000, 0.00000, -180.72003);
	CreateDynamicObject(2492, 279.02441, 1822.89270, 627.62097,   0.00000, 0.00000, 85.92001);
	CreateDynamicObject(2496, 279.04617, 1822.33655, 627.61859,   0.00000, 0.00000, 87.65999);
	CreateDynamicObject(1584, 271.65628, 1823.02283, 626.97076,   0.00000, 0.00000, 89.04001);
	CreateDynamicObject(1586, 271.66867, 1821.62720, 627.02698,   0.00000, 0.00000, 91.02007);
	CreateDynamicObject(2614, 288.71237, 1827.24341, 629.95099,   5.22000, -1.08000, -90.05998);
	CreateDynamicObject(3041, 285.01663, 1840.02014, 626.81726,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2605, 286.44254, 1822.62744, 627.39087,   0.00000, 0.00000, -91.31998);
	CreateDynamicObject(2605, 286.40881, 1820.66394, 627.39087,   0.00000, 0.00000, -91.31998);
	CreateDynamicObject(2605, 286.35272, 1818.69165, 627.39087,   0.00000, 0.00000, -91.31998);
	CreateDynamicObject(2605, 286.30466, 1816.72205, 627.39087,   0.00000, 0.00000, -91.31998);
	CreateDynamicObject(9819, 282.84299, 1814.69299, 627.87048,   0.00000, 0.00000, -90.54003);
	CreateDynamicObject(3384, 280.26987, 1823.07727, 628.30347,   359.79831, -0.24000, -182.30157);
	CreateDynamicObject(3384, 280.22034, 1822.05127, 628.30347,   359.79831, -0.24000, -182.30157);
	CreateDynamicObject(16782, 283.22870, 1813.69727, 629.63525,   359.79831, -1.74000, 90.44164);
	CreateDynamicObject(3389, 279.92990, 1820.97363, 627.10297,   0.02159, -2.28000, -1.66918);
	CreateDynamicObject(3389, 279.93481, 1819.97095, 627.10297,   0.02159, -2.28000, -1.66918);
	CreateDynamicObject(3393, 280.20773, 1817.66760, 626.96606,   180.63899, 180.72025, -1.33073);
	CreateDynamicObject(1715, 285.32742, 1822.87622, 627.02209,   0.00000, 0.00000, 78.60000);
	CreateDynamicObject(1715, 285.25467, 1820.72791, 627.02209,   0.00000, 0.00000, 78.60000);
	CreateDynamicObject(1715, 285.18314, 1818.68127, 627.02209,   0.00000, 0.00000, 78.60000);
	CreateDynamicObject(1715, 285.22665, 1816.84045, 627.02209,   0.00000, 0.00000, 78.60000);
	CreateDynamicObject(1715, 285.15604, 1815.22534, 627.02209,   0.00000, 0.00000, 32.76000);
	CreateDynamicObject(1715, 281.81738, 1815.07031, 627.02209,   0.00000, 0.00000, -2.22000);
	CreateDynamicObject(1715, 281.60178, 1818.24536, 627.02209,   0.00000, 0.00000, -40.25999);
	CreateDynamicObject(2183, 274.15054, 1832.20190, 626.99762,   0.00000, 0.00000, 89.87997);
	CreateDynamicObject(2183, 277.79785, 1832.14087, 626.99762,   0.00000, 0.00000, 89.87997);
	CreateDynamicObject(2183, 277.80884, 1836.10291, 626.99762,   0.00000, 0.00000, 89.87997);
	CreateDynamicObject(2183, 274.16022, 1836.15601, 626.99762,   0.00000, 0.00000, 89.87997);
	CreateDynamicObject(1715, 271.91638, 1832.78735, 626.98901,   0.00000, 0.00000, -272.88004);
	CreateDynamicObject(1715, 271.89224, 1836.76465, 626.98901,   0.00000, 0.00000, -272.88004);
	CreateDynamicObject(1715, 271.90628, 1834.37329, 626.98901,   0.00000, 0.00000, -272.88004);
	CreateDynamicObject(1715, 271.93652, 1838.45679, 626.98901,   0.00000, 0.00000, -272.88004);
	CreateDynamicObject(1715, 275.13080, 1838.51025, 626.98901,   0.00000, 0.00000, -86.46001);
	CreateDynamicObject(1715, 275.21179, 1836.78259, 626.98901,   0.00000, 0.00000, -86.46001);
	CreateDynamicObject(1715, 275.03906, 1834.53723, 626.98901,   0.00000, 0.00000, -86.46001);
	CreateDynamicObject(1715, 275.10657, 1832.76453, 626.98901,   0.00000, 0.00000, -97.80000);
	CreateDynamicObject(1715, 275.56760, 1838.47485, 626.98901,   0.00000, 0.00000, 89.09998);
	CreateDynamicObject(1715, 275.63116, 1836.78271, 626.98901,   0.00000, 0.00000, 89.09998);
	CreateDynamicObject(1715, 275.55618, 1834.47998, 626.98901,   0.00000, 0.00000, 86.57998);
	CreateDynamicObject(1715, 275.63583, 1832.76062, 626.98901,   0.00000, 0.00000, 86.57998);
	CreateDynamicObject(1715, 278.81256, 1838.60022, 626.98901,   0.00000, 0.00000, 267.90002);
	CreateDynamicObject(1715, 278.80820, 1836.65076, 626.98901,   0.00000, 0.00000, 267.90002);
	CreateDynamicObject(1715, 278.81665, 1834.42883, 626.98901,   0.00000, 0.00000, 267.90002);
	CreateDynamicObject(1715, 278.68353, 1832.64136, 626.98901,   0.00000, 0.00000, 267.90002);
	CreateDynamicObject(626, 278.88507, 1831.08875, 628.99438,   0.00000, 0.00000, 29.16000);
	CreateDynamicObject(626, 272.25906, 1830.85364, 628.99438,   0.00000, 0.00000, 29.16000);
	CreateDynamicObject(2614, 275.44586, 1840.48157, 629.95099,   5.22000, -1.08000, 1.14002);
	CreateDynamicObject(2606, 286.98727, 1822.12085, 629.50287,   0.00000, 0.00000, -89.52000);
	CreateDynamicObject(2606, 286.99945, 1817.47034, 629.50287,   0.00000, 0.00000, -89.52000);
	CreateDynamicObject(2606, 279.44882, 1817.66797, 629.59949,   0.00000, 0.00000, 89.51999);
	CreateDynamicObject(1736, 275.47827, 1840.22925, 629.60272,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2190, 277.71344, 1833.34302, 627.80664,   0.00000, 0.00000, 23.28000);
	CreateDynamicObject(2190, 277.20346, 1834.27527, 627.80664,   0.00000, 0.00000, 101.70000);
	CreateDynamicObject(2190, 277.44531, 1837.54785, 627.80664,   0.00000, 0.00000, 59.52002);
	CreateDynamicObject(2190, 277.23032, 1838.18481, 627.80664,   0.00000, 0.00000, 101.22002);
	CreateDynamicObject(2190, 276.81677, 1837.67346, 627.80664,   0.00000, 0.00000, 232.98003);
	CreateDynamicObject(2190, 277.08719, 1837.09705, 627.80664,   0.00000, 0.00000, 288.36011);
	CreateDynamicObject(2190, 276.75189, 1833.68726, 627.80664,   0.00000, 0.00000, 217.92012);
	CreateDynamicObject(2190, 276.96661, 1833.05676, 627.80664,   0.00000, 0.00000, 274.14008);
	CreateDynamicObject(2190, 273.74396, 1833.59338, 627.80664,   0.00000, 0.00000, 422.22012);
	CreateDynamicObject(2190, 273.52472, 1833.10938, 627.80664,   0.00000, 0.00000, 634.68005);
	CreateDynamicObject(2190, 273.05789, 1833.82080, 627.80664,   0.00000, 0.00000, 570.66016);
	CreateDynamicObject(2190, 273.56238, 1834.27576, 627.80664,   0.00000, 0.00000, 449.34018);
	CreateDynamicObject(2190, 273.89996, 1837.54175, 627.80664,   0.00000, 0.00000, 397.86026);
	CreateDynamicObject(2190, 273.59732, 1838.17798, 627.80664,   0.00000, 0.00000, 453.72025);
	CreateDynamicObject(2190, 273.25378, 1837.75330, 627.80664,   0.00000, 0.00000, 604.62012);
	CreateDynamicObject(2190, 273.47760, 1837.20313, 627.80664,   0.00000, 0.00000, 642.59985);
	CreateDynamicObject(11705, 273.16312, 1836.14502, 627.75458,   0.00000, 0.00000, -96.89999);
	CreateDynamicObject(11705, 273.19928, 1835.20264, 627.75458,   0.00000, 0.00000, -84.35999);
	CreateDynamicObject(11705, 273.16156, 1831.93091, 627.75458,   0.00000, 0.00000, -84.35999);
	CreateDynamicObject(11705, 273.86328, 1831.95642, 627.75458,   0.00000, 0.00000, 103.92000);
	CreateDynamicObject(11705, 273.90021, 1835.38184, 627.75458,   0.00000, 0.00000, 69.60000);
	CreateDynamicObject(11705, 273.81116, 1836.09033, 627.75458,   0.00000, 0.00000, 108.42001);
	CreateDynamicObject(11705, 273.91794, 1839.36047, 627.75458,   0.00000, 0.00000, 67.68002);
	CreateDynamicObject(11705, 273.17206, 1839.46204, 627.75458,   0.00000, 0.00000, 273.60001);
	CreateDynamicObject(11705, 276.80173, 1839.32568, 627.75458,   0.00000, 0.00000, -69.89997);
	CreateDynamicObject(11705, 277.53796, 1839.33496, 627.75458,   0.00000, 0.00000, 67.50003);
	CreateDynamicObject(11705, 277.51724, 1836.02673, 627.75458,   0.00000, 0.00000, 111.54005);
	CreateDynamicObject(11705, 277.56387, 1835.24426, 627.75458,   0.00000, 0.00000, 68.70005);
	CreateDynamicObject(11705, 277.50598, 1831.95239, 627.75458,   0.00000, 0.00000, 112.08005);
	CreateDynamicObject(11705, 276.78943, 1835.92676, 627.75458,   0.00000, 0.00000, -103.49996);
	CreateDynamicObject(11705, 276.82678, 1835.20142, 627.75458,   0.00000, 0.00000, -66.17997);
	CreateDynamicObject(11705, 276.73422, 1831.87964, 627.75458,   0.00000, 0.00000, -129.23999);
	CreateDynamicObject(2168, 276.75681, 1835.17102, 627.23627,   0.00000, 0.00000, -91.14001);
	CreateDynamicObject(2168, 277.60321, 1836.06091, 627.23627,   0.00000, 0.00000, 88.92003);
	CreateDynamicObject(2168, 273.11954, 1835.23975, 627.23627,   0.00000, 0.00000, -90.30000);
	CreateDynamicObject(2168, 273.91693, 1836.15112, 627.23627,   0.00000, 0.00000, 89.28003);
	CreateDynamicObject(19379, 274.62427, 1814.24890, 629.01538,   0.00000, 0.00000, 272.51987);

	// Casino (Main)
	CreateDynamicObject(1557, 1049.28479, -76.50269, 1002.84723,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1557, 1049.27722, -73.47843, 1002.84723,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(11711, 1049.26843, -74.97846, 1005.84076,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19378, 1049.17200, -80.08165, 1005.09412,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(955, 1049.57031, -69.65048, 1003.22736,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19378, 1049.16455, -69.60130, 1005.09412,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2964, 1052.55493, -80.15146, 1002.84747,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2785, 1051.67957, -67.46523, 1003.66534,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1895, 1049.42346, -82.58302, 1006.00201,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1054.50073, -71.68658, 1009.81287,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 1052.54602, -66.83293, 1005.09412,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(2964, 1052.49121, -83.27089, 1002.84747,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1978, 1056.43115, -81.58074, 1003.88660,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(19943, 1059.17468, -75.06314, 1002.69934,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1054.38281, -81.30837, 1009.81287,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1895, 1055.28455, -67.05891, 1006.00195,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1053.00781, -85.42100, 1006.22748,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 1046.36499, -85.42690, 1006.22748,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19458, 1053.90857, -85.45072, 1002.51208,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2785, 1058.76489, -67.35265, 1003.66534,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1978, 1060.49585, -81.48005, 1003.88660,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(19325, 1053.00781, -85.42100, 1010.22748,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 1046.36499, -85.45952, 1010.22748,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18783, 1058.66992, -66.09094, 1000.35156,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(744, 1050.53711, -87.73021, 1000.20319,   0.00000, 0.00000, -88.02001);
	CreateDynamicObject(744, 1055.06592, -87.88472, 1000.20319,   0.00000, 0.00000, -123.06002);
	CreateDynamicObject(19325, 1059.56897, -85.42100, 1006.22748,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18783, 1058.65369, -86.06802, 1000.35156,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(824, 1052.91284, -89.64304, 1004.39825,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1895, 1062.63525, -67.08700, 1006.00195,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19378, 1049.17139, -90.54007, 1005.09412,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19378, 1063.00928, -66.82363, 1005.09412,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 1059.56775, -85.42100, 1010.22748,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(744, 1058.59192, -87.70292, 1000.20319,   0.00000, 0.00000, -163.74005);
	CreateDynamicObject(1978, 1064.40173, -81.47494, 1003.88660,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(19377, 1064.78821, -71.74110, 1009.81287,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(824, 1057.93359, -89.78098, 1004.39825,   0.00000, 0.00000, -41.46000);
	CreateDynamicObject(19458, 1063.48389, -85.45838, 1002.51208,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19377, 1064.78748, -81.32116, 1009.81287,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19842, 1056.09424, -91.35799, 1002.94366,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1054.36804, -90.94196, 1009.81287,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2785, 1066.15649, -67.35699, 1003.66534,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(744, 1062.71936, -88.59658, 1000.62305,   0.00000, 0.00000, -7.80000);
	CreateDynamicObject(19325, 1066.12891, -85.42100, 1006.22748,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19840, 1052.37085, -94.48434, 1006.55182,   0.00000, 0.00000, -214.97990);
	CreateDynamicObject(14394, 1069.94507, -75.97780, 1003.45190,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(824, 1059.96484, -92.44523, 1004.39825,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1066.12891, -85.42100, 1010.22748,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19943, 1069.43970, -69.47334, 1002.69934,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19378, 1052.67725, -95.81470, 1005.09412,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19842, 1050.95508, -95.68379, 1008.09662,   90.00000, 0.00000, 180.00000);
	CreateDynamicObject(19943, 1069.34216, -83.02602, 1002.69934,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19458, 1070.92676, -72.47041, 1002.51208,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(744, 1066.74768, -87.95781, 1000.95239,   0.00000, 0.00000, 57.18000);
	CreateDynamicObject(3461, 1071.02527, -71.86362, 1005.72974,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19304, 1070.94910, -70.23013, 1004.88147,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3461, 1071.04065, -80.04420, 1005.72974,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19304, 1070.92883, -81.81020, 1004.88147,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19458, 1070.94629, -82.09011, 1002.51208,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 1071.88232, -71.39160, 1004.28839,   0.00000, 0.00000, 89.64004);
	CreateDynamicObject(19377, 1064.77710, -90.93395, 1009.81287,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19304, 1070.95679, -66.76436, 1004.88147,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2811, 1071.84558, -67.76514, 1004.23444,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19304, 1070.92126, -85.31362, 1004.88147,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1819, 1073.55359, -70.93554, 1004.29602,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19458, 1073.67297, -71.88052, 1002.51208,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19378, 1068.41040, -90.65974, 1005.09412,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19840, 1065.40649, -93.70704, 1004.76331,   0.00000, 0.00000, -139.13992);
	CreateDynamicObject(19458, 1070.90747, -62.84904, 1002.51208,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19458, 1073.61438, -80.06390, 1002.51208,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1723, 1073.18176, -68.06664, 1004.28839,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1665, 1073.81592, -70.19453, 1004.80621,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1072.56494, -84.31914, 1004.23444,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1665, 1074.01709, -70.56737, 1004.80621,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19842, 1062.57043, -95.70599, 1008.09662,   90.00000, 0.00000, 180.00000);
	CreateDynamicObject(19378, 1063.15796, -95.81058, 1005.09412,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(1665, 1074.16980, -70.19215, 1004.80621,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19378, 1073.40186, -66.84618, 1005.09412,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19378, 1073.57214, -85.48295, 1005.09412,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1075.28967, -71.59889, 1009.81287,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2964, 1076.16064, -79.09118, 1004.28387,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1075.29041, -81.21085, 1009.81287,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1723, 1076.19983, -69.31850, 1004.28839,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2188, 1076.96106, -75.76588, 1005.15912,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1723, 1077.40503, -71.31926, 1004.28839,   0.00000, 0.00000, 89.64004);
	CreateDynamicObject(2811, 1076.91614, -67.76842, 1004.23444,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18783, 1078.38660, -75.62801, 1000.35156,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11706, 1076.78857, -85.19331, 1004.28461,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19943, 1078.75525, -75.90584, 1002.69934,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1819, 1079.08167, -70.75925, 1004.29602,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16151, 1077.90771, -84.48042, 1004.62244,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1723, 1078.63892, -67.94370, 1004.28839,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1665, 1079.46423, -70.17117, 1004.80621,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1665, 1079.58691, -70.56429, 1004.80621,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19897, 1079.85364, -70.23563, 1004.81073,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2188, 1080.50037, -75.72617, 1005.15912,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2964, 1080.68262, -79.02571, 1004.28387,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18783, 1080.88770, -75.67596, 1001.79138,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 1081.72754, -69.13873, 1004.28839,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2811, 1082.03308, -67.59252, 1004.23444,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 1082.96082, -71.13293, 1004.28839,   0.00000, 0.00000, 89.64004);
	CreateDynamicObject(1723, 1084.06470, -67.93970, 1004.28839,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19378, 1083.82178, -66.84474, 1005.09412,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(1819, 1084.61304, -70.55933, 1004.29602,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19897, 1084.95911, -69.98113, 1004.81073,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1557, 1083.99902, -85.26949, 1004.28571,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19378, 1084.00586, -85.47746, 1005.09412,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(1665, 1085.24097, -69.95586, 1004.80621,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1085.71973, -71.60077, 1009.81287,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1085.72229, -81.18897, 1009.81287,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1723, 1087.34619, -69.00988, 1004.28839,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1895, 1087.90710, -76.66120, 1007.54187,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1557, 1087.01648, -85.26563, 1004.28571,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19378, 1088.08508, -80.18764, 1005.09412,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19378, 1088.08765, -69.71519, 1005.09412,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2885, 968.70294, -56.50698, 1005.57806,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2714, 968.44470, -53.15002, 1003.11096,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2948, 968.48669, -53.18999, 1000.12457,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2948, 968.48633, -53.18945, 1000.12457,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2885, 963.42554, -56.52645, 1003.82831,   270.00000, 180.69543, 270.69543);
	CreateDynamicObject(1828, 961.39844, -54.04688, 1000.14844,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(2811, 1152.46912, -148.43152, 1060.89014,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19378, 1153.26563, -147.46700, 1062.36780,   90.00000, 0.00000, -90.00000);
	CreateDynamicObject(1723, 1153.86011, -148.27446, 1060.88989,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 1152.21411, -151.61507, 1060.88989,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1895, 1151.71851, -150.41545, 1064.10693,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19378, 1151.47559, -152.66190, 1062.36780,   90.00000, 0.00000, -180.00000);
	CreateDynamicObject(2811, 1152.41138, -152.83882, 1060.89014,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1819, 1154.27686, -151.04385, 1060.95313,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1665, 1154.59180, -150.60863, 1061.48999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1665, 1155.03674, -150.77731, 1061.48999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1152.31323, -155.28352, 1060.89014,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19324, 1157.67542, -147.91064, 1061.54370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 1153.76672, -155.33855, 1060.88989,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 1155.82874, -153.10989, 1060.88989,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2640, 1159.68567, -148.02785, 1061.69946,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 1152.28894, -158.99973, 1060.88989,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1895, 1151.65222, -158.20490, 1064.10693,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2640, 1160.82532, -148.06580, 1061.69946,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1152.16870, -160.42035, 1060.89014,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1819, 1154.25488, -158.55658, 1060.95313,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1665, 1154.49341, -158.05815, 1061.48999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1665, 1154.79346, -158.38660, 1061.48999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1557, 1163.03796, -147.62897, 1060.90613,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1156.77161, -152.37300, 1067.08423,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2964, 1160.25024, -152.34012, 1060.89282,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3461, 1162.61633, -147.87120, 1062.33289,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19378, 1151.47595, -163.11476, 1062.36780,   90.00000, 0.00000, -180.00000);
	CreateDynamicObject(1665, 1160.45410, -152.72057, 1061.80542,   0.00000, 0.00000, -203.03998);
	CreateDynamicObject(19378, 1163.75012, -147.46709, 1062.36780,   90.00000, 0.00000, -90.00000);
	CreateDynamicObject(19897, 1160.48279, -152.97374, 1061.80603,   0.00000, 0.00000, -45.42001);
	CreateDynamicObject(18783, 1159.24707, -157.10338, 1058.39575,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1153.00671, -163.66307, 1060.89014,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 1155.81384, -160.75337, 1060.88989,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(18655, 1153.40063, -163.88226, 1060.89111,   0.00000, 0.00000, -126.84000);
	CreateDynamicObject(11711, 1164.50049, -147.60214, 1063.77197,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1557, 1166.06104, -147.61790, 1060.90613,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19378, 1153.22485, -164.83400, 1062.36780,   90.00000, 0.00000, -90.00000);
	CreateDynamicObject(3461, 1166.33887, -148.01964, 1062.33289,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11706, 1167.30139, -147.98822, 1060.89282,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2964, 1160.27869, -158.50061, 1060.89282,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19377, 1156.77502, -161.96141, 1067.08423,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 1168.89551, -152.69249, 1062.36780,   90.00000, 0.00000, -180.00000);
	CreateDynamicObject(19842, 1160.07361, -164.63982, 1062.64233,   90.00000, 90.00000, 90.00000);
	CreateDynamicObject(19377, 1167.24097, -152.34738, 1067.08423,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(16151, 1167.90784, -156.78714, 1061.28101,   0.00000, 0.00000, -360.00000);
	CreateDynamicObject(19378, 1163.60840, -164.82945, 1062.36780,   90.00000, 0.00000, -90.00000);
	CreateDynamicObject(2811, 1167.44360, -163.91403, 1060.89014,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18655, 1168.12109, -163.84752, 1060.89111,   0.00000, 0.00000, -48.12000);
	CreateDynamicObject(19377, 1167.22681, -161.97363, 1067.08423,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 1168.89685, -163.11745, 1062.36780,   90.00000, 0.00000, -180.00000);
	CreateDynamicObject(14808, 1211.28125, -32.67188, 1001.37500,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(19324, 1212.77856, 2.45176, 1000.56476,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(0, 846.31873, -127.50880, 1006.30292,   0.00000, 0.00000, 0.00000);

	// Black Market (Main)
	CreateDynamicObject(3050, 2785.17896, -1420.67981, 17.50353,   0.00000, 0.00000, 92.93999);
	CreateDynamicObject(3050, 2785.38257, -1425.31738, 17.50353,   0.00000, 0.00000, 92.93999);
	CreateDynamicObject(941, 2784.54907, -1422.18640, 15.72698,   0.00000, 0.00000, 92.15999);
	CreateDynamicObject(941, 2784.68530, -1425.38696, 15.72698,   0.00000, 0.00000, 91.31999);
	CreateDynamicObject(14782, 2776.36450, -1421.06738, 16.19847,   0.00000, 0.00000, 0.90001);
	CreateDynamicObject(2068, 2775.30469, -1423.29199, 18.73224,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2845, 2774.43311, -1423.61218, 15.32481,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2846, 2775.42310, -1425.35010, 15.37114,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2843, 2777.74414, -1424.74170, 15.49002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2844, 2776.11279, -1422.61035, 15.55225,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3389, 2783.21973, -1420.21558, 15.24498,   0.00000, 0.00000, 88.91997);
	CreateDynamicObject(3386, 2782.23804, -1420.23340, 15.24243,   0.00000, 0.00000, 89.27999);
	CreateDynamicObject(3389, 2781.25098, -1420.24231, 15.24498,   0.00000, 0.00000, 89.81996);
	CreateDynamicObject(3384, 2780.31348, -1420.70850, 16.65611,   0.00000, 0.00000, 91.25999);
	CreateDynamicObject(14779, 2779.56616, -1428.45410, 17.95450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16782, 2780.96167, -1426.17175, 17.58850,   0.00000, 0.00000, 90.06001);
	CreateDynamicObject(941, 2781.27368, -1425.70081, 15.72698,   0.00000, 0.00000, 180.11987);
	CreateDynamicObject(941, 2778.51343, -1425.77747, 15.72698,   0.00000, 0.00000, 180.11987);
	CreateDynamicObject(2778, 2768.37524, -1420.99133, 15.24588,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2779, 2767.60352, -1421.03662, 15.25062,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1574, 2784.64819, -1423.56519, 15.25270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1766, 2770.01514, -1421.02344, 15.23388,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2769, 2771.76880, -1421.18457, 15.76980,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1421, 2775.85913, -1425.86621, 15.96340,   0.00000, 0.00000, -0.06000);
	CreateDynamicObject(4100, 2766.85449, -1417.02002, 16.43014,   0.00000, 0.00000, 54.30001);
	CreateDynamicObject(2928, 2773.53052, -1426.45825, 15.72148,   0.00000, 0.00000, 180.35999);
	CreateDynamicObject(2041, 2777.25464, -1426.00000, 16.39756,   0.00000, 0.00000, 179.63995);
	CreateDynamicObject(2041, 2777.55591, -1426.00903, 16.39756,   0.00000, 0.00000, 179.63995);
	CreateDynamicObject(2041, 2777.89429, -1426.00439, 16.39756,   0.00000, 0.00000, 179.63995);
	CreateDynamicObject(2041, 2778.21460, -1425.99426, 16.39756,   0.00000, 0.00000, 179.63995);
	CreateDynamicObject(3013, 2779.17383, -1425.99878, 16.40824,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3013, 2778.75391, -1425.99121, 16.40824,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2042, 2781.80396, -1425.82996, 16.28370,   0.00000, 0.00000, 102.83997);
	CreateDynamicObject(2358, 2780.16162, -1425.72729, 16.31567,   0.00000, 0.00000, 90.65997);
	CreateDynamicObject(2358, 2781.16016, -1425.74036, 16.31567,   0.00000, 0.00000, 90.65997);
	CreateDynamicObject(1575, 2780.61353, -1425.74365, 16.15221,   0.00000, 0.00000, 86.57999);
	CreateDynamicObject(2036, 2784.81958, -1422.04883, 16.23951,   0.00000, 0.00000, -88.38000);
	CreateDynamicObject(2036, 2784.24683, -1422.03345, 16.23951,   0.00000, 0.00000, -88.38000);
	CreateDynamicObject(2047, 2785.28198, -1423.45715, 17.65787,   0.00000, 0.00000, -87.65999);
	CreateDynamicObject(2044, 2784.90063, -1424.19385, 16.22000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2044, 2784.91455, -1424.49402, 16.22000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2035, 2784.74609, -1426.11743, 16.20586,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2035, 2784.74072, -1425.83655, 16.20586,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2619, 2783.16162, -1426.21814, 16.94985,   0.00000, 0.00000, -91.07999);
	CreateDynamicObject(964, 2771.59082, -1425.69568, 15.15549,   0.00000, 0.00000, 360.29990);
	CreateDynamicObject(1431, 2769.77979, -1425.92554, 15.77326,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2044, 2784.37158, -1424.51526, 16.22000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2044, 2784.38159, -1424.15662, 16.22000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2035, 2784.67651, -1425.04993, 16.20586,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2035, 2784.68896, -1425.43152, 16.20586,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2672, 2772.15161, -1422.83081, 15.54213,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2670, 2770.38525, -1422.73682, 15.35979,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2744, 2766.53540, -1421.53345, 17.08466,   0.00000, 0.00000, -88.31999);
	CreateDynamicObject(1413, 2655.89014, -1447.56409, 16.51389,   0.00000, 0.00000, -27.71999);
	CreateDynamicObject(1413, 2651.29199, -1445.01392, 16.51389,   0.00000, 0.00000, -27.71999);

	// Fixed Trailer (Main)
 	CreateDynamicObject(11015, 4.2412109375, -0.25, 1002.3616333008, 0, 90, 179.99450683594, .interiorid = 2);
    CreateDynamicObject(11015, -3.7464447021484, -0.46751827001572, 1002.3616333008, 0, 90, 0, .interiorid = 2);
    CreateDynamicObject(11015, -2.0341796875, -0.2255859375, 996.58734130859, 0, 0, 0, .interiorid = 2);
    CreateDynamicObject(11015, -1.7412109375, -8.029296875, 1002.3616333008, 0, 90, 89.994506835938, .interiorid = 2);
    CreateDynamicObject(11015, 2.349609375, 9.3095703125, 1002.3616333008, 0, 90, 270, .interiorid = 2);
    CreateDynamicObject(976, -8.3762712478638, 5.4238820075989, 998.02801513672, 0, 0, 0, .interiorid = 2);
    CreateDynamicObject(976, 10.326154708862, 5.4526047706604, 998.02801513672, 0, 0, 180, .interiorid = 2);
    CreateDynamicObject(976, -0.78860986232758, 4.5294494628906, 998.02801513672, 0, 0, 90, .interiorid = 2);
    CreateDynamicObject(976, -9.4923362731934, 2.8067343235016, 998.30328369141, 0, 0, 0, .interiorid = 2);
    CreateDynamicObject(968, -0.78987210988998, 3.085230588913, 996.65313720703, 0, 0, 88.375030517578, .interiorid = 2);
    CreateDynamicObject(2424, -1.1989899873734, 2.1414895057678, 998.20440673828, 0, 0, 270, .interiorid = 2);
    CreateDynamicObject(2424, -1.4444495439529, 1.2195072174072, 998.20440673828, 0, 0, 269.99450683594, .interiorid = 2);
    CreateDynamicObject(2424, -1.2420085668564, 0.15943863987923, 998.20440673828, 0, 0, 269.99450683594, .interiorid = 2);
    CreateDynamicObject(2424, -1.2046113014221, -0.27639570832253, 998.20440673828, 0, 0, 269.99450683594, .interiorid = 2);
    CreateDynamicObject(2424, -1.6594306230545, -1.5798351764679, 998.40460205078, 0, 0, 269.99450683594, .interiorid = 2);
    CreateDynamicObject(2424, -1.6048280000687, -3.7030065059662, 998.50469970703, 0, 0, 269.99450683594, .interiorid = 2);
    CreateDynamicObject(2424, -1.3431304693222, -4.7396554946899, 997.82904052734, 0, 0, 269.99450683594, .interiorid = 2);
    CreateDynamicObject(2424, -1.3272333145142, -5.6384997367859, 997.85406494141, 0, 0, 269.99450683594, .interiorid = 2);
    CreateDynamicObject(2424, -0.82665449380875, -5.819974899292, 997.82904052734, 0, 0, 0.07452392578125, .interiorid = 2);
    CreateDynamicObject(2424, 0.90103495121002, -5.7934393882751, 997.82904052734, 0, 0, 0.0714111328125, .interiorid = 2);
    CreateDynamicObject(2424, 1.8007507324219, -5.7772388458252, 997.82904052734, 0, 0, 0.0714111328125, .interiorid = 2);
    CreateDynamicObject(2424, 2.0067005157471, -4.656822681427, 997.82904052734, 0, 0, 90, .interiorid = 2);
    CreateDynamicObject(2424, 2.0016891956329, -5.5176014900208, 997.82904052734, 0, 0, 90, .interiorid = 2);
    CreateDynamicObject(2424, 0.095220312476158, -5.8064684867859, 997.85406494141, 0, 0, 0.0714111328125, .interiorid = 2);
    CreateDynamicObject(2424, 1.9964281320572, -1.4732304811478, 997.82904052734, 0, 0, 90, .interiorid = 2);
    CreateDynamicObject(2424, 2.0242736339569, -0.59229171276093, 997.82904052734, 0, 0, 90, .interiorid = 2);
    CreateDynamicObject(2424, 1.105211853981, -0.25799462199211, 997.82904052734, 0, 0, 180, .interiorid = 2);
    CreateDynamicObject(2424, 0.85449481010437, -0.25893545150757, 997.82904052734, 0, 0, 179.99450683594, .interiorid = 2);
    CreateDynamicObject(2424, 0.94933843612671, 0.93138349056244, 998.40460205078, 0, 0, 0, .interiorid = 2);
    CreateDynamicObject(2424, 1.9278947114944, 1.8640511035919, 998.40386962891, 0, 0, 90, .interiorid = 2);
    CreateDynamicObject(2424, 1.912776350975, 2.7815411090851, 998.40386962891, 0, 0, 90, .interiorid = 2);
    CreateDynamicObject(2424, 1.9282813072205, 3.7311086654663, 998.40386962891, 0, 0, 90, .interiorid = 2);
    CreateDynamicObject(2424, 0.94268548488617, 0.38233369588852, 998.40460205078, 0, 0, 0, .interiorid = 2);
    CreateDynamicObject(2424, 1.8336682319641, 0.42996874451637, 998.40460205078, 0, 0, 0, .interiorid = 2);
    CreateDynamicObject(1814, -0.070350080728531, -4.9489212036133, 998.45343017578, 0, 0, 0, .interiorid = 2);
    CreateDynamicObject(2108, 0.87250107526779, -1.5103777647018, 997.35357666016, 0, 0, 0, .interiorid = 2);
    CreateDynamicObject(2738, -1.3212617635727, 5.0136914253235, 998.98120117188, 0, 0, 0, .interiorid = 2);
    CreateDynamicObject(2558, -0.45861941576004, 3.3949182033539, 999.67913818359, 0, 0, 90, .interiorid = 2);
    CreateDynamicObject(2558, -1.1560896635056, 4.4181189537048, 999.70416259766, 0, 0, 270, .interiorid = 2);
    CreateDynamicObject(1745, 2.4512000083923, 6.3230948448181, 998.07806396484, 0, 0, 90, .interiorid = 2);
   
   //vipgarage
    tmpobjid = CreateDynamicObject(19372, -1707.835449, 981.938110, 17.934406, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "flatdoor01_law", 0x00000000);
    tmpobjid = CreateDynamicObject(19355, -1707.855834, 994.783081, 17.914062, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 16093, "a51_ext", "ws_trans_concr", 0x00000000);
    tmpobjid = CreateDynamicObject(19355, -1707.855834, 1029.592529, 17.914062, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0x00000000);
    tmpobjid = CreateDynamicObject(19355, -1707.855834, 1004.402587, 17.914062, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19355, -1707.855834, 1001.192749, 17.914062, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19355, -1707.855834, 1001.192749, 17.914062, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19355, -1707.855834, 997.992919, 17.914062, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19355, -1707.855834, 1058.572265, 17.914062, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19355, -1707.855834, 1055.352294, 17.914062, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19355, -1707.855834, 991.573120, 17.914062, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19355, -1707.855834, 1052.132324, 17.914062, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19355, -1707.855834, 1048.912353, 17.914062, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19355, -1707.855834, 1045.692382, 17.914062, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19355, -1707.855834, 988.363159, 17.914062, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19355, -1707.855834, 985.143188, 17.914062, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19355, -1707.855834, 975.523315, 17.914062, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19355, -1707.855834, 978.722167, 17.914062, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19355, -1707.855834, 997.992919, 21.414062, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19355, -1707.855834, 975.483154, 21.414062, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19355, -1707.855834, 978.692016, 21.414062, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19355, -1707.855834, 985.143188, 21.414062, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19355, -1707.855834, 988.363159, 21.414062, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19355, -1707.855834, 991.573120, 21.414062, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19355, -1707.855834, 994.783081, 21.414062, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19355, -1707.855834, 1001.192749, 21.414062, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19355, -1707.855834, 1004.402587, 21.414062, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19355, -1707.855834, 972.263183, 21.414062, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19355, -1707.855834, 981.913146, 21.414062, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19355, -1707.855834, 1061.802612, 21.414062, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19355, -1707.855834, 1058.592407, 21.414062, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19355, -1707.855834, 1055.352539, 21.414062, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19355, -1707.855834, 1052.142578, 21.414062, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19355, -1707.855834, 1048.922607, 21.414062, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19355, -1707.855834, 1045.702636, 21.414062, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19355, -1707.855834, 1042.482666, 21.414062, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19355, -1707.855834, 1029.622802, 21.414062, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19355, -1707.855834, 1036.062744, 21.414062, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19355, -1707.855834, 1039.282714, 21.414062, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19355, -1707.855834, 1032.842773, 21.414062, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19355, -1707.855834, 1042.472412, 17.914062, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19355, -1707.855834, 1039.252441, 17.914062, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19355, -1707.855834, 1036.032470, 17.914062, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19355, -1707.855834, 1032.812500, 17.914062, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19355, -1707.855834, 972.263305, 17.914062, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19355, -1707.855834, 1061.792236, 17.914062, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    
    // Church interior
	CreateDynamicObject(9931,1947.54003906,-368.51269531,1108.01086426,0.00000000,0.00000000,90.00000000, .interiorid = 40); //object(church_sfe) (1)
	CreateDynamicObject(3976,1970.65722656,-341.23883057,1100.22949219,0.00000000,0.00000000,0.00000000, .interiorid = 40); //object(policest02_lan) (1)
	CreateDynamicObject(9931,1980.55761719,-368.51562500,1108.01086426,0.00000000,0.00000000,90.00000000, .interiorid = 40); //object(church_sfe) (2)
	CreateDynamicObject(3976,1962.70117188,-400.46679688,1109.52941895,0.00000000,0.00000000,90.00000000, .interiorid = 40); //object(policest02_lan) (2)
	CreateDynamicObject(11472,1964.78710938,-372.02050781,1089.22351074,0.00000000,0.00000000,0.00000000, .interiorid = 40); //object(des_swtstairs1) (1)
	CreateDynamicObject(11472,1963.28967285,-372.02139282,1089.22351074,0.00000000,0.00000000,0.00000000, .interiorid = 40); //object(des_swtstairs1) (2)
	CreateDynamicObject(11472,1964.04479980,-372.98049927,1089.46386719,0.00000000,0.00000000,0.00000000, .interiorid = 40); //object(des_swtstairs1) (3)
	CreateDynamicObject(2896,1959.29248047,-370.91723633,1093.34313965,0.00000000,0.00000000,90.00000000, .interiorid = 40); //object(casket_law) (1)
	CreateDynamicObject(11472,1962.66918945,-373.82989502,1087.66955566,90.00000000,180.00000000,270.00000000, .interiorid = 40); //object(des_swtstairs1) (4)
	CreateDynamicObject(11472,1965.41259766,-373.81991577,1087.66992188,90.00000000,180.00000000,90.00000000, .interiorid = 40); //object(des_swtstairs1) (5)
	CreateDynamicObject(970,1970.61437988,-368.20404053,1093.28039551,0.00000000,0.00000000,0.00000000, .interiorid = 40); //object(fencesmallb) (1)
	CreateDynamicObject(970,1968.51074219,-368.20703125,1093.28039551,0.00000000,0.00000000,0.00000000, .interiorid = 40); //object(fencesmallb) (2)
	CreateDynamicObject(970,1957.52185059,-368.25833130,1093.28039551,0.00000000,0.00000000,0.00000000, .interiorid = 40); //object(fencesmallb) (3)
	CreateDynamicObject(970,1959.61914062,-368.25585938,1093.28039551,0.00000000,0.00000000,0.00000000, .interiorid = 40); //object(fencesmallb) (4)
	CreateDynamicObject(6959,1963.97839355,-368.12149048,1072.75439453,90.00000000,0.00000000,0.25000000, .interiorid = 40); //object(vegasnbball1) (2)
	CreateDynamicObject(2960,1964.05883789,-348.98986816,1101.36645508,0.00000000,90.00000000,89.99450684, .interiorid = 40); //object(kmb_beam) (1)
	CreateDynamicObject(2960,1963.98291016,-349.00000000,1101.70666504,90.00000000,0.00000000,179.99450684, .interiorid = 40); //object(kmb_beam) (2)
	CreateDynamicObject(2960,1964.05871582,-348.99044800,1100.00585938,0.00000000,90.00000000,90.00000000, .interiorid = 40); //object(kmb_beam) (3)
	CreateDynamicObject(3872,1964.02685547,-346.40850830,1102.33020020,0.00000000,155.25000000,90.27026367, .interiorid = 40); //object(ws_floodbeams) (1)
	CreateDynamicObject(1667,1962.98828125,-370.41271973,1093.62292480,0.00000000,0.00000000,0.00000000, .interiorid = 40); //object(propwineglass1) (1)
	CreateDynamicObject(1664,1962.83520508,-370.42520142,1093.70104980,0.00000000,0.00000000,0.00000000, .interiorid = 40); //object(propwinebotl2) (1)
	CreateDynamicObject(2868,1965.95605469,-370.30142212,1093.53430176,0.00000000,0.00000000,0.00000000, .interiorid = 40); //object(gb_ornament03) (1)
	CreateDynamicObject(2869,1964.02185059,-373.78527832,1093.66992188,0.00000000,0.00000000,323.75000000, .interiorid = 40); //object(gb_ornament04) (1)
	CreateDynamicObject(2870,1965.26269531,-373.64062500,1093.66992188,0.00000000,0.00000000,350.03002930, .interiorid = 40); //object(gb_ornament05) (1)
	CreateDynamicObject(2270,1965.47998047,-352.47622681,1093.48364258,0.00000000,0.00000000,270.00000000, .interiorid = 40); //object(frame_wood_6) (1)
	CreateDynamicObject(2257,1964.05615234,-373.94995117,1095.86132812,0.00000000,0.00000000,180.00000000, .interiorid = 40); //object(frame_clip_4) (1)
	CreateDynamicObject(2271,1962.60437012,-352.58059692,1093.48803711,0.00000000,0.00000000,90.00000000, .interiorid = 40); //object(frame_wood_1) (1)
	CreateDynamicObject(2357,1964.05090332,-370.68905640,1093.12402344,0.00000000,0.00000000,0.00000000, .interiorid = 40); //object(dunc_dinning) (1)
	CreateDynamicObject(2808,1957.51367188,-364.26171875,1092.59191895,0.00000000,0.00000000,179.99450684, .interiorid = 40); //object(cj_pizza_chair4) (1)
	CreateDynamicObject(2808,1959.68164062,-364.26171875,1092.59191895,0.00000000,0.00000000,179.99450684, .interiorid = 40); //object(cj_pizza_chair4) (2)
	CreateDynamicObject(2808,1970.61328125,-364.26171875,1092.59191895,0.00000000,0.00000000,179.99450684, .interiorid = 40); //object(cj_pizza_chair4) (3)
	CreateDynamicObject(2808,1968.44238281,-364.26171875,1092.59191895,0.00000000,0.00000000,179.99450684, .interiorid = 40); //object(cj_pizza_chair4) (4)
	CreateDynamicObject(2808,1961.85546875,-364.26171875,1092.59191895,0.00000000,0.00000000,179.99450684, .interiorid = 40); //object(cj_pizza_chair4) (5)
	CreateDynamicObject(2808,1966.27246094,-364.26171875,1092.59191895,0.00000000,0.00000000,179.99450684, .interiorid = 40); //object(cj_pizza_chair4) (6)
	CreateDynamicObject(2868,1962.14697266,-370.30624390,1093.53430176,0.00000000,0.00000000,0.00000000, .interiorid = 40); //object(gb_ornament03) (4)
	CreateDynamicObject(948,1966.09277344,-374.17285156,1092.72888184,0.00000000,0.00000000,0.00000000, .interiorid = 40); //object(plant_pot_10) (1)
	CreateDynamicObject(948,1961.96313477,-374.22888184,1092.72888184,0.00000000,0.00000000,0.00000000, .interiorid = 40); //object(plant_pot_10) (2)
	CreateDynamicObject(2894,1963.95080566,-370.94277954,1093.53430176,0.00000000,0.00000000,0.00000000, .interiorid = 40); //object(kmb_rhymesbook) (1)
	CreateDynamicObject(3462,1959.30407715,-374.06838989,1094.24255371,0.00000000,0.00000000,270.00000000, .interiorid = 40); //object(csrangel_lvs) (1)
	CreateDynamicObject(3462,1968.78125000,-374.06835938,1094.24255371,0.00000000,0.00000000,270.00000000, .interiorid = 40); //object(csrangel_lvs) (2)
	CreateDynamicObject(949,1956.02258301,-353.46194458,1095.83190918,0.00000000,0.00000000,0.00000000, .interiorid = 40); //object(plant_pot_4) (1)
	CreateDynamicObject(2946,1965.59985352,-349.21301270,1091.94543457,0.00000000,0.00000000,90.00000000, .interiorid = 40); //object(cr_door_03) (2)
	CreateDynamicObject(2946,1962.47033691,-349.19955444,1091.94543457,0.00000000,0.00000000,270.00000000, .interiorid = 40); //object(cr_door_03) (3)
	CreateDynamicObject(2808,1970.60681152,-360.67248535,1092.59191895,0.00000000,0.00000000,179.99450684, .interiorid = 40); //object(cj_pizza_chair4) (6)
	CreateDynamicObject(2808,1968.43054199,-360.67248535,1092.59191895,0.00000000,0.00000000,179.99450684, .interiorid = 40); //object(cj_pizza_chair4) (6)
	CreateDynamicObject(2808,1966.25378418,-360.67248535,1092.59191895,0.00000000,0.00000000,179.99450684, .interiorid = 40); //object(cj_pizza_chair4) (6)
	CreateDynamicObject(2808,1957.52233887,-360.67248535,1092.59191895,0.00000000,0.00000000,179.99450684, .interiorid = 40); //object(cj_pizza_chair4) (6)
	CreateDynamicObject(2808,1959.69580078,-360.67248535,1092.59191895,0.00000000,0.00000000,179.99450684, .interiorid = 40); //object(cj_pizza_chair4) (6)
	CreateDynamicObject(2808,1961.86865234,-360.67248535,1092.59191895,0.00000000,0.00000000,179.99450684, .interiorid = 40); //object(cj_pizza_chair4) (6)
	CreateDynamicObject(2808,1957.51660156,-357.18194580,1092.59191895,0.00000000,0.00000000,179.99450684, .interiorid = 40); //object(cj_pizza_chair4) (6)
	CreateDynamicObject(2808,1959.69250488,-357.18194580,1092.59191895,0.00000000,0.00000000,179.99450684, .interiorid = 40); //object(cj_pizza_chair4) (6)
	CreateDynamicObject(2808,1961.86779785,-357.18194580,1092.59191895,0.00000000,0.00000000,179.99450684, .interiorid = 40); //object(cj_pizza_chair4) (6)
	CreateDynamicObject(2808,1970.61279297,-357.18194580,1092.59191895,0.00000000,0.00000000,179.99450684, .interiorid = 40); //object(cj_pizza_chair4) (6)
	CreateDynamicObject(2808,1968.43701172,-357.18194580,1092.59191895,0.00000000,0.00000000,179.99450684, .interiorid = 40); //object(cj_pizza_chair4) (6)
	CreateDynamicObject(2808,1966.26782227,-357.18194580,1092.59191895,0.00000000,0.00000000,179.99450684, .interiorid = 40); //object(cj_pizza_chair4) (6)
	CreateDynamicObject(14705,1962.68139648,-373.67498779,1093.91894531,0.00000000,0.00000000,0.00000000, .interiorid = 40); //object(int2vase) (1)
	CreateDynamicObject(14410,1968.61401367,-349.16000366,1092.01757812,0.00000000,0.00000000,270.00000000, .interiorid = 40); //object(carter-stairs03) (1)
	CreateDynamicObject(11472,1971.98046875,-351.97091675,1092.19567871,0.00000000,0.00000000,90.00000000, .interiorid = 40); //object(des_swtstairs1) (6)
	CreateDynamicObject(11472,1971.98046875,-353.19616699,1092.19567871,0.00000000,0.00000000,90.00000000, .interiorid = 40); //object(des_swtstairs1) (7)
	CreateDynamicObject(14410,1959.47412109,-349.41287231,1092.01660156,0.00000000,0.00000000,90.00000000, .interiorid = 40); //object(carter-stairs03) (2)
	CreateDynamicObject(11472,1956.10046387,-351.96487427,1092.19567871,0.00000000,0.00000000,270.00000000, .interiorid = 40); //object(des_swtstairs1) (8)
	CreateDynamicObject(11472,1956.10046387,-353.19616699,1092.19567871,0.00000000,0.00000000,270.00000000, .interiorid = 40); //object(des_swtstairs1) (9)
	CreateDynamicObject(11472,1965.10974121,-347.94531250,1095.44091797,0.00000000,90.00000000,180.00000000, .interiorid = 40); //object(des_swtstairs1) (10)
	CreateDynamicObject(11472,1962.98315430,-347.94104004,1095.44018555,0.00000000,270.00000000,179.99450684, .interiorid = 40); //object(des_swtstairs1) (11)
	CreateDynamicObject(1698,1962.46606445,-352.53399658,1095.31420898,0.00000000,0.00000000,270.27026367, .interiorid = 40); //object(esc_step8) (1)
	CreateDynamicObject(1698,1962.87316895,-352.53399658,1095.53918457,0.00000000,0.00000000,270.26916504, .interiorid = 40); //object(esc_step8) (2)
	CreateDynamicObject(1698,1963.24682617,-352.53399658,1095.76416016,0.00000000,0.00000000,270.26916504, .interiorid = 40); //object(esc_step8) (3)
	CreateDynamicObject(1698,1965.60021973,-352.53399658,1095.31420898,0.00000000,0.00000000,90.00000000, .interiorid = 40); //object(esc_step8) (4)
	CreateDynamicObject(1698,1965.20434570,-352.53399658,1095.53918457,0.00000000,0.00000000,90.00000000, .interiorid = 40); //object(esc_step8) (5)
	CreateDynamicObject(1698,1964.72375488,-352.53399658,1095.76416016,0.00000000,0.00000000,270.26916504, .interiorid = 40); //object(esc_step8) (6)
	CreateDynamicObject(970,1964.05688477,-353.88497925,1096.74243164,0.00000000,0.00000000,0.00000000, .interiorid = 40); //object(fencesmallb) (4)
	CreateDynamicObject(970,1959.94470215,-353.88497925,1095.74719238,0.00000000,0.00000000,0.00000000, .interiorid = 40); //object(fencesmallb) (4)
	CreateDynamicObject(970,1955.77246094,-353.88589478,1095.74719238,0.00000000,0.00000000,0.00000000, .interiorid = 40); //object(fencesmallb) (4)
	CreateDynamicObject(970,1968.17297363,-353.88497925,1095.74719238,0.00000000,0.00000000,0.00000000, .interiorid = 40); //object(fencesmallb) (4)
	CreateDynamicObject(970,1972.25000000,-353.88589478,1095.74719238,0.00000000,0.00000000,0.00000000, .interiorid = 40); //object(fencesmallb) (4)
	CreateDynamicObject(970,1959.97607422,-351.29064941,1095.74719238,0.00000000,0.00000000,0.00000000, .interiorid = 40); //object(fencesmallb) (4)
	CreateDynamicObject(970,1968.10302734,-351.29064941,1095.74719238,0.00000000,0.00000000,0.00000000, .interiorid = 40); //object(fencesmallb) (4)
	CreateDynamicObject(970,1965.96203613,-349.21618652,1096.74169922,0.00000000,0.00000000,90.00000000, .interiorid = 40); //object(fencesmallb) (4)
	CreateDynamicObject(970,1962.13757324,-349.21618652,1096.74243164,0.00000000,0.00000000,90.00000000, .interiorid = 40); //object(fencesmallb) (4)
	CreateDynamicObject(2887,1964.04821777,-349.34906006,1094.78955078,90.00000000,0.00000000,0.00000000, .interiorid = 40); //object(a51_spotbulb) (1)
	CreateDynamicObject(949,1971.95068359,-353.46038818,1095.83190918,0.00000000,0.00000000,0.00000000, .interiorid = 40); //object(plant_pot_4) (2)
	CreateDynamicObject(948,1965.68554688,-352.45767212,1091.94543457,0.00000000,0.00000000,0.00000000, .interiorid = 40); //object(plant_pot_10) (1)
	CreateDynamicObject(948,1962.38427734,-352.45767212,1091.94543457,0.00000000,0.00000000,0.00000000, .interiorid = 40); //object(plant_pot_10) (1)
	CreateDynamicObject(1742,1955.84399414,-353.83831787,1091.94543457,0.00000000,0.00000000,0.00000000, .interiorid = 40); //object(med_bookshelf) (1)
	CreateDynamicObject(1742,1957.28173828,-353.83831787,1091.94543457,0.00000000,0.00000000,0.00000000, .interiorid = 40); //object(med_bookshelf) (2)
	CreateDynamicObject(1742,1958.71166992,-353.83831787,1091.94543457,0.00000000,0.00000000,0.00000000, .interiorid = 40); //object(med_bookshelf) (3)
	CreateDynamicObject(1742,1960.15112305,-353.83831787,1091.94543457,0.00000000,0.00000000,0.00000000, .interiorid = 40); //object(med_bookshelf) (4)
	CreateDynamicObject(1742,1971.77673340,-353.83831787,1091.94543457,0.00000000,0.00000000,0.00000000, .interiorid = 40); //object(med_bookshelf) (5)
	CreateDynamicObject(1742,1970.34277344,-353.83831787,1091.94543457,0.00000000,0.00000000,0.00000000, .interiorid = 40); //object(med_bookshelf) (6)
	CreateDynamicObject(1742,1968.90930176,-353.83831787,1091.94543457,0.00000000,0.00000000,0.00000000, .interiorid = 40); //object(med_bookshelf) (7)
	CreateDynamicObject(1742,1967.47534180,-353.83831787,1091.94543457,0.00000000,0.00000000,0.00000000, .interiorid = 40); //object(med_bookshelf) (8)
	CreateDynamicObject(949,1961.60729980,-354.34103394,1092.58166504,0.00000000,0.00000000,0.00000000, .interiorid = 40); //object(plant_pot_4) (3)
	CreateDynamicObject(949,1966.46325684,-354.34805298,1092.58166504,0.00000000,0.00000000,0.00000000, .interiorid = 40); //object(plant_pot_4) (4)
	CreateDynamicObject(1720,1970.09338379,-373.59497070,1092.72888184,0.00000000,0.00000000,180.00000000, .interiorid = 40); //object(rest_chair) (1)
	CreateDynamicObject(1720,1970.91198730,-373.58316040,1092.72888184,0.00000000,0.00000000,179.99450684, .interiorid = 40); //object(rest_chair) (2)
	CreateDynamicObject(741,1969.29675293,-369.22723389,1093.71252441,0.00000000,0.00000000,0.00000000, .interiorid = 40); //object(pot_01) (1)
	CreateDynamicObject(3440,1969.29125977,-370.86264038,1091.08007812,0.00000000,0.00000000,0.00000000, .interiorid = 40); //object(arptpillar01_lvs) (1)
	CreateDynamicObject(14455,1955.32812500,-348.54144287,1096.87585449,0.00000000,0.00000000,270.00000000, .interiorid = 40); //object(gs_bookcase) (1)
	CreateDynamicObject(14455,1972.78356934,-352.90487671,1096.86743164,0.00000000,0.00000000,90.00000000, .interiorid = 40); //object(gs_bookcase) (2)
	CreateDynamicObject(2842,1964.51916504,-365.60891724,1091.94543457,0.00000000,0.00000000,90.00000000, .interiorid = 40); //object(gb_bedrug04) (1)
	CreateDynamicObject(2842,1964.51843262,-363.77880859,1091.94543457,0.00000000,0.00000000,90.00000000, .interiorid = 40); //object(gb_bedrug04) (2)
	CreateDynamicObject(2842,1964.51867676,-361.94879150,1091.94543457,0.00000000,0.00000000,90.00000000, .interiorid = 40); //object(gb_bedrug04) (3)
	CreateDynamicObject(2842,1964.52172852,-360.12713623,1091.94543457,0.00000000,0.00000000,90.00000000, .interiorid = 40); //object(gb_bedrug04) (4)
	CreateDynamicObject(2842,1964.52636719,-358.30560303,1091.94543457,0.00000000,0.00000000,90.00000000, .interiorid = 40); //object(gb_bedrug04) (5)
	CreateDynamicObject(2842,1964.52600098,-356.47940063,1091.94543457,0.00000000,0.00000000,90.00000000, .interiorid = 40); //object(gb_bedrug04) (6)
	CreateDynamicObject(2842,1964.52343750,-354.64611816,1091.94543457,0.00000000,0.00000000,90.00000000, .interiorid = 40); //object(gb_bedrug04) (7)
	CreateDynamicObject(2842,1964.52136230,-352.82815552,1091.94543457,0.00000000,0.00000000,90.00000000, .interiorid = 40); //object(gb_bedrug04) (8)
	CreateDynamicObject(2842,1964.51867676,-350.99310303,1091.94543457,0.00000000,0.00000000,90.00000000, .interiorid = 40); //object(gb_bedrug04) (9)
	CreateDynamicObject(2842,1964.52026367,-349.16046143,1091.94543457,0.00000000,0.00000000,90.00000000, .interiorid = 40); //object(gb_bedrug04) (10)
	CreateDynamicObject(2833,1963.55749512,-369.65057373,1092.72888184,0.00000000,0.00000000,0.00000000, .interiorid = 40); //object(gb_livingrug02) (1)
	CreateDynamicObject(2834,1968.81579590,-372.52481079,1092.72888184,0.00000000,0.00000000,0.00000000, .interiorid = 40); //object(gb_livingrug03) (1)
	CreateDynamicObject(6959,1951.26586914,-360.22650146,1095.56030273,310.00000000,180.00000000,90.00000000, .interiorid = 40); //object(vegasnbball1) (1)
	CreateDynamicObject(6959,1976.87695312,-356.75421143,1095.51965332,310.00000000,180.00000000,270.00000000, .interiorid = 40); //object(vegasnbball1) (3)
	CreateDynamicObject(6959,1958.95715332,-378.23306274,1096.33813477,309.99572754,179.99450684,180.00000000, .interiorid = 40); //object(vegasnbball1) (4)
	
	//threehouses
    tmpobjid = CreateDynamicObject(3353, -1999.833984, 1375.585327, 7.185235, 0.000000, 0.000000, -0.170000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3351, -1978.893554, 1375.085449, 9.525237, 0.000000, 0.000000, -0.170000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3353, -1949.833984, 1375.435302, 7.185236, 0.000000, 0.000000, -0.170000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19313, -2009.465820, 1394.002685, 9.193050, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19313, -1995.465820, 1394.002685, 9.193050, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19313, -1981.465820, 1394.002685, 9.193050, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19313, -1967.465820, 1394.002685, 9.193050, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19313, -1953.465820, 1394.002685, 9.193050, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19313, -1948.465820, 1394.002685, 9.193050, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19313, -2016.465820, 1387.002685, 9.193050, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19313, -2016.465820, 1373.002685, 9.193050, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19313, -2016.465820, 1359.002685, 9.193050, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19313, -2016.465820, 1345.002685, 9.193050, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19313, -1991.465820, 1363.433715, 9.193050, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19313, -1991.465820, 1377.433715, 9.193050, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19313, -1991.465820, 1386.833862, 9.193050, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19313, -1966.395751, 1363.355590, 9.193050, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19313, -1966.395751, 1377.355590, 9.193050, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19313, -1966.395751, 1386.905517, 9.193050, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19313, -1941.515747, 1363.285522, 9.193050, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19313, -1941.515747, 1377.285522, 9.193050, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19313, -1941.515747, 1386.985595, 9.193050, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(1505, -2003.681884, 1370.799560, 7.867437, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(1506, -1953.659790, 1370.631469, 7.897436, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(1504, -1977.101928, 1373.366455, 7.897437, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    
    // 2GH Map
    tmpobjid = CreateDynamicObject(5820, -2061.692382, 1357.603271, 7.101562, 0.000000, 0.000000, -92.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar", 50, "Ariel", 20, 1, 0x00000000, 0x00000000, 1);
    tmpobjid = CreateDynamicObject(7605, 333333344.000000, 0.000000, 34.303165, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19543, -2164.039062, 249.405181, 34.320312, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(7605, -14124.644531, 210.019989, 36.171875, 1.000000, 1.000000, 904.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19543, -2164.039062, 279.405181, 34.320312, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19543, -2179.039062, 279.405181, 34.320312, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19543, -2194.039062, 279.405181, 34.320312, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19543, -2073.945068, 1406.152832, 6.101562, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19543, -2088.945068, 1406.152832, 6.101562, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19543, -2067.945068, 1406.152832, 6.101562, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(8210, -2095.678466, 1409.232788, 6.101562, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(8210, -2095.678466, 1381.232788, 6.101562, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(8210, -2060.678466, 1409.232788, 6.101562, 0.000000, 0.000000, 450.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19313, -2067.393798, 1437.229980, 8.101561, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19313, -2089.393798, 1437.229980, 8.101561, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19313, -2081.393798, 1437.229980, 8.101561, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(8210, -2060.678466, 1381.232788, 6.101562, 0.000000, 0.000000, 450.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19381, -2091.245605, 1353.742553, 5.601562, 0.000000, 0.000000, 96.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19381, -2064.947265, 1353.342895, 6.101562, 0.000000, 0.000000, 90.800003, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(10060, -1976.046264, 1256.710083, 27.339061, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19129, -2070.326171, 1426.847656, 6.101562, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3619, -2067.247314, 1400.786010, 9.101561, 0.000000, 0.000000, 810.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19608, -2065.426269, 1434.866577, 6.810566, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19608, -2065.426269, 1434.866577, 6.810566, 0.000000, 180.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(14394, -2065.167236, 1432.202514, 6.171875, 0.000000, 10.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(14394, -2065.616943, 1432.202514, 6.171875, 0.000000, 10.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3749, -2077.895751, 1353.159179, 11.186104, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(669, -2094.877929, 1354.725585, 6.101562, 0.000000, 0.000000, 86.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19543, -2067.945068, 1384.152832, 6.101562, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19543, -2089.945068, 1384.152832, 6.101562, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19543, -2081.945068, 1384.152832, 6.101562, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19543, -2208.039062, 279.405181, 34.320312, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19543, -2223.039062, 279.405181, 34.320312, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19543, -2235.039062, 279.405181, 34.320312, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19543, -2235.039062, 249.405181, 34.320312, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19543, -2221.039062, 249.405181, 34.320312, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19543, -2211.039062, 249.405181, 34.320312, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19543, -2196.039062, 249.405181, 34.320312, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19543, -2181.039062, 249.405181, 34.320312, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19543, -2179.039062, 249.405181, 34.320312, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(6522, -2208.853271, 264.972961, 42.320308, 0.000000, 0.000000, 720.099853, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(12950, -2161.956787, 310.083068, 34.320312, 0.000000, 0.000000, -90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3749, -2156.397949, 265.424102, 40.071891, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(16773, -2156.639648, 282.425598, 34.820308, 0.000000, 360.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(16773, -2156.639648, 296.825622, 34.820308, 0.000000, 360.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(16773, -2156.639648, 303.425598, 34.820308, 0.000000, 360.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(16773, -2163.859863, 310.825561, 34.820308, 0.000000, 360.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(16773, -2178.159179, 310.825561, 34.820308, 0.000000, 360.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(16773, -2192.658691, 310.825561, 34.820308, 0.000000, 360.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(16773, -2207.158447, 310.825561, 34.820308, 0.000000, 360.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(16773, -2221.658203, 310.825561, 34.820308, 0.000000, 360.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(16773, -2235.157714, 310.825561, 34.820308, 0.000000, 360.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(16773, -2235.157714, 218.225585, 34.820308, 0.000000, 360.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(16773, -2242.439453, 303.625640, 34.820308, 0.000000, 360.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(16773, -2242.439453, 289.125671, 34.820308, 0.000000, 360.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(16773, -2242.439453, 274.565673, 34.820308, 0.000000, 360.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(16773, -2242.439453, 260.165679, 34.820308, 0.000000, 360.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(16773, -2242.439453, 245.765701, 34.820308, 0.000000, 360.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(16773, -2242.439453, 231.365707, 34.820308, 0.000000, 360.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(16773, -2242.439453, 225.425704, 34.820308, 0.000000, 360.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(16773, -2220.657958, 218.225585, 34.820308, 0.000000, 360.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(16773, -2206.258300, 218.225585, 34.820308, 0.000000, 360.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(16773, -2191.858642, 218.225585, 34.820308, 0.000000, 360.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(16773, -2177.359863, 218.225585, 34.820308, 0.000000, 360.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(16773, -2163.960205, 218.225585, 34.820308, 0.000000, 360.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(16773, -2156.639648, 248.425598, 34.820308, 0.000000, 360.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(16773, -2156.639648, 234.025604, 34.820308, 0.000000, 360.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(16773, -2156.639648, 225.435577, 34.820308, 0.000000, 360.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(1557, -2194.280761, 263.869262, 38.062496, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(1557, -2186.781250, 264.019226, 34.282489, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(12950, -2161.956787, 218.983062, 34.320312, 0.000000, 0.000000, -90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19613, -2238.142822, 309.493408, 34.320312, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3604, -2161.902832, 301.663238, 36.720321, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19893, -2238.196533, 308.751861, 35.110324, 0.000000, 0.000000, 240.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19608, -2239.876953, 306.582000, 34.340309, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19613, -2241.782470, 302.793395, 34.320312, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19128, -2242.350830, 308.860229, 36.320312, 0.000000, -90.000000, 179.820007, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19129, -2232.393798, 300.893585, 34.320312, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(1432, -2240.500732, 292.633178, 34.390625, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(1432, -2240.500732, 296.633178, 34.390625, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(1432, -2240.500732, 300.633178, 34.390625, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19128, -2242.350830, 304.860229, 36.320312, 0.000000, -90.000000, 179.820007, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19128, -2242.350830, 300.860229, 36.320312, 0.000000, -90.000000, 179.820007, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19128, -2242.350830, 300.860229, 36.320312, 0.000000, -90.000000, 179.820007, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19128, -2242.350830, 296.860229, 36.320312, 0.000000, -90.000000, 179.820007, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19128, -2242.350830, 292.860229, 36.320312, 0.000000, -90.000000, 179.820007, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(1826, -2238.210449, 308.884277, 34.290622, 0.000000, 0.000000, 90.300010, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19893, -2238.196533, 309.451904, 35.110324, 0.000000, 0.000000, 303.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18654, -2242.058837, 302.406707, 35.190628, 0.000000, 0.000000, 141.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18655, -2222.458251, 310.636657, 34.390625, 0.000000, 0.000000, 52.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18653, -2237.759521, 302.436645, 35.190628, 0.000000, 0.000000, 220.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19143, -2220.880371, 290.240631, 37.490619, -39.000000, 181.000000, 50.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3934, -2086.361816, 1424.294677, 6.101562, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19124, -2089.824218, 1428.086425, 6.501562, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19124, -2089.764160, 1420.306274, 6.501562, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19124, -2082.824218, 1428.086425, 6.501562, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19124, -2082.764160, 1420.306274, 6.501562, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3934, -2171.470703, 231.685882, 34.320312, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19122, -2175.476806, 235.042541, 34.920314, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19122, -2175.476806, 228.132553, 34.920314, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19122, -2167.716796, 228.132553, 34.920314, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19122, -2167.716796, 235.082519, 34.920314, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(10060, -1977.246337, 1249.810058, 27.639060, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
 
    //Nick Mapping 
    tmpobjid = CreateDynamicObject(19543, -1536.434692, 1226.718017, 6.233789, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19543, -1549.134521, 1226.098022, 6.223790, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19543, -1549.134521, 1211.817993, 6.243790, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19543, -1537.134521, 1211.817993, 6.233789, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19543, -1512.934570, 1202.017944, 6.233789, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19543, -1512.934570, 1193.017944, 6.243790, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19543, -1549.134521, 1197.017944, 6.223790, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19129, -1491.110107, 1199.418823, 6.243790, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3607, -1523.892700, 1214.535888, 12.223791, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3578, -1510.831909, 1185.533203, 6.952787, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(987, -1517.027099, 1185.480957, 6.243790, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18850, -1564.684814, 1218.150024, -5.956206, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3749, -1524.901367, 1185.768188, 11.987499, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(987, -1505.027099, 1185.480957, 6.243790, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(987, -1493.027099, 1185.480957, 6.243790, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(987, -1481.327148, 1185.480957, 6.243790, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(987, -1481.327148, 1197.480957, 6.243790, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(987, -1481.327148, 1209.660156, 6.243790, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(987, -1492.327148, 1209.660156, 6.243790, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(987, -1493.737060, 1209.660156, 6.243790, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(987, -1505.347167, 1209.660156, 6.243790, 0.000000, 0.000000, 450.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(987, -1505.347167, 1221.660156, 6.243790, 0.000000, 0.000000, 450.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(987, -1505.347167, 1233.860351, 6.243790, 0.000000, 0.000000, 540.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19543, -1549.134521, 1193.017944, 6.223790, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(987, -1517.347167, 1233.860351, 6.243790, 0.000000, 0.000000, 540.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(987, -1529.347167, 1233.860351, 6.243790, 0.000000, 0.000000, 540.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(987, -1541.347167, 1233.860351, 6.243790, 0.000000, 0.000000, 540.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(987, -1553.347167, 1233.860351, 6.243790, 0.000000, 0.000000, 540.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(987, -1565.347167, 1233.860351, 6.243790, 0.000000, 0.000000, 540.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(987, -1568.160888, 1233.860351, 6.243790, 0.000000, 0.000000, 540.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(987, -1579.864990, 1233.970336, 6.243790, 0.000000, 0.000000, 630.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3578, -1539.831909, 1185.533203, 6.952787, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3578, -1548.831909, 1185.533203, 6.952787, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3578, -1556.831909, 1185.533203, 6.952787, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3578, -1565.831909, 1185.533203, 6.952787, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3578, -1574.831909, 1185.533203, 6.952787, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3578, -1579.798828, 1190.433593, 6.952787, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3578, -1579.798828, 1199.433593, 6.952787, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3578, -1579.798828, 1208.433593, 6.952787, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3578, -1579.798828, 1217.433593, 6.952787, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3578, -1579.798828, 1226.433593, 6.952787, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3578, -1579.798828, 1228.833496, 6.952787, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(987, -1579.864990, 1221.970336, 6.243790, 0.000000, 0.000000, 630.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(987, -1579.864990, 1185.500488, 6.243790, 0.000000, 0.000000, 720.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(987, -1579.864990, 1209.970336, 6.243790, 0.000000, 0.000000, 630.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(987, -1579.864990, 1197.970336, 6.243790, 0.000000, 0.000000, 630.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(987, -1579.864990, 1197.400634, 6.243790, 0.000000, 0.000000, 630.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(987, -1567.864990, 1185.500488, 6.243790, 0.000000, 0.000000, 720.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(987, -1555.864990, 1185.500488, 6.243790, 0.000000, 0.000000, 720.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(642, -1510.810424, 1223.963500, 7.842233, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(987, -1546.265136, 1185.500488, 6.243790, 0.000000, 0.000000, 720.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(625, -1504.687622, 1232.961059, 6.942234, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(625, -1504.687622, 1228.961059, 6.942234, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(1827, -1510.831298, 1223.931396, 6.942234, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(1720, -1510.690307, 1225.243041, 6.942234, 0.000000, 0.000000, -368.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(1720, -1509.810302, 1223.243041, 6.942234, 0.000000, 0.000000, -129.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(1720, -1512.110229, 1224.043090, 6.942234, 0.000000, 0.000000, -278.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3604, -1574.324584, 1193.517089, 8.777462, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3528, -1525.396728, 1182.197509, 13.387495, 0.000000, 21.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19128, -1483.878417, 1209.045166, 7.594100, 0.000000, 90.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3684, -1467.786254, 1144.367431, 9.187500, 0.000000, 0.000000, 176.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19129, -1491.110107, 1195.758911, 6.233788, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(985, -1505.299194, 1124.018676, 7.837499, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19609, -1511.759277, 1205.972412, 6.314103, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19608, -1486.037841, 1206.622680, 6.314103, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(985, -1505.299194, 1131.818359, 7.837499, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(985, -1505.299194, 1153.518676, 7.837499, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(985, -1505.299194, 1161.318603, 7.837499, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(985, -1505.299194, 1169.118652, 7.837499, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19128, -1487.878417, 1209.045166, 7.594100, 0.000000, 90.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19128, -1488.178344, 1209.045166, 7.594100, 0.000000, 89.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18649, -1482.265014, 1209.600463, 11.314103, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2125, -1491.832031, 1207.292968, 6.614101, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18649, -1484.265014, 1209.600463, 11.314103, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18649, -1489.764892, 1209.600463, 11.314103, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18649, -1485.364990, 1209.600463, 11.314103, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18649, -1486.464965, 1209.600463, 11.314103, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18649, -1487.564941, 1209.600463, 11.314103, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18649, -1491.964843, 1209.600463, 11.314103, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18649, -1490.864868, 1209.600463, 11.314103, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18649, -1498.364746, 1209.600463, 11.314103, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18649, -1493.064819, 1209.600463, 11.314103, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18649, -1494.164794, 1209.600463, 11.314103, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18649, -1495.264770, 1209.600463, 11.314103, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18649, -1496.364746, 1209.600463, 11.314103, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18649, -1500.364746, 1209.600463, 11.314103, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18649, -1502.364746, 1209.600463, 11.314103, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18649, -1504.364746, 1209.600463, 11.314103, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18650, -1481.275512, 1206.363037, 11.316916, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18650, -1481.275512, 1208.562988, 11.316916, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18650, -1481.275512, 1204.162963, 11.316916, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18650, -1481.275512, 1201.963012, 11.316916, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18650, -1481.275512, 1199.763061, 11.316916, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18650, -1481.275512, 1197.563110, 11.316916, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18650, -1481.275512, 1195.363159, 11.316916, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18650, -1481.275512, 1193.163208, 11.316916, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18650, -1481.275512, 1190.963256, 11.316916, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18650, -1481.275512, 1188.763305, 11.316916, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18650, -1481.275512, 1186.563354, 11.316916, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18647, -1482.291748, 1185.461425, 11.308917, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18647, -1484.491699, 1185.461425, 11.308917, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18647, -1486.691650, 1185.461425, 11.308917, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18647, -1488.891601, 1185.461425, 11.308917, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18647, -1491.091552, 1185.461425, 11.308917, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18647, -1493.291503, 1185.461425, 11.308917, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18647, -1495.491455, 1185.461425, 11.308917, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18647, -1497.691406, 1185.461425, 11.308917, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18647, -1497.691406, 1185.461425, 11.308917, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18647, -1499.891357, 1185.461425, 11.308917, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18647, -1502.091308, 1185.461425, 11.308917, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18647, -1504.291259, 1185.461425, 11.308917, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18647, -1506.491210, 1185.461425, 11.308917, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18647, -1508.691162, 1185.461425, 11.308917, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18647, -1510.891113, 1185.461425, 11.308917, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18647, -1513.091064, 1185.461425, 11.308917, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18647, -1515.291015, 1185.461425, 11.308917, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18647, -1515.291015, 1185.461425, 11.308917, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18647, -1513.091064, 1185.461425, 11.308917, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18647, -1510.891113, 1185.461425, 11.308917, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18647, -1508.691162, 1185.461425, 11.308917, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18647, -1506.491210, 1185.461425, 11.308917, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18647, -1504.291259, 1185.461425, 11.308917, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18647, -1502.091308, 1185.461425, 11.308917, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18647, -1499.891357, 1185.461425, 11.308917, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18647, -1497.691406, 1185.461425, 11.308917, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18647, -1495.491455, 1185.461425, 11.308917, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18647, -1493.291503, 1185.461425, 11.308917, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18647, -1491.091552, 1185.461425, 11.308917, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18647, -1488.891601, 1185.461425, 11.308917, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18647, -1486.691650, 1185.461425, 11.308917, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18647, -1482.291748, 1185.461425, 11.308917, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18647, -1482.291748, 1185.461425, 11.308917, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    
    //AlcazarCM
    tmpobjid = CreateDynamicObject(19357, -1817.272827, 20.538761, 14.860937, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "Bow_Abpave_Gen", 0x00000000);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar", 20, "Wingdings", 20, 1, 0xFFFC4900, 0x00000000, 0);
    tmpobjid = CreateDynamicObject(19357, -1817.272827, 43.538761, 14.860937, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "Bow_Abpave_Gen", 0x00000000);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar", 20, "Wingdings", 20, 1, 0xFFFC4900, 0x00000000, 0);
    tmpobjid = CreateDynamicObject(19357, -1817.272827, 61.538761, 14.860937, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "Bow_Abpave_Gen", 0x00000000);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar", 20, "Wingdings", 20, 1, 0xFFFC4900, 0x00000000, 0);
    tmpobjid = CreateDynamicObject(19357, -1817.272827, 79.538757, 14.860937, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "Bow_Abpave_Gen", 0x00000000);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar", 20, "Wingdings", 20, 1, 0xFFFC4900, 0x00000000, 0);
    tmpobjid = CreateDynamicObject(19357, -1817.272827, 79.538757, 14.860937, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "Bow_Abpave_Gen", 0x00000000);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar", 20, "Wingdings", 20, 1, 0xFFFC4900, 0x00000000, 0);
    tmpobjid = CreateDynamicObject(19357, -1817.272827, 79.538757, 14.860937, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "Bow_Abpave_Gen", 0x00000000);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar", 20, "Wingdings", 20, 1, 0xFFFC4900, 0x00000000, 0);
    tmpobjid = CreateDynamicObject(19357, -1817.272827, 61.538761, 14.860937, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "Bow_Abpave_Gen", 0x00000000);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar", 20, "Wingdings", 20, 1, 0xFFFC4900, 0x00000000, 0);
    tmpobjid = CreateDynamicObject(19357, -1817.272827, 61.538761, 14.860937, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "Bow_Abpave_Gen", 0x00000000);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar", 20, "Wingdings", 20, 1, 0xFFFC4900, 0x00000000, 0);
    tmpobjid = CreateDynamicObject(19357, -1817.272827, 43.538761, 14.860937, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "Bow_Abpave_Gen", 0x00000000);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar", 20, "Wingdings", 20, 1, 0xFFFC4900, 0x00000000, 0);
    tmpobjid = CreateDynamicObject(19357, -1817.272827, 43.538761, 14.860937, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "Bow_Abpave_Gen", 0x00000000);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar", 20, "Wingdings", 20, 1, 0xFFFC4900, 0x00000000, 0);
    tmpobjid = CreateDynamicObject(19357, -1817.272827, 20.538761, 14.860937, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "Bow_Abpave_Gen", 0x00000000);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar", 20, "Wingdings", 20, 1, 0xFFFC4900, 0x00000000, 0);
    tmpobjid = CreateDynamicObject(19357, -1817.272827, 20.538761, 14.860937, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "Bow_Abpave_Gen", 0x00000000);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar", 20, "Wingdings", 20, 1, 0xFFFC4900, 0x00000000, 0);
    tmpobjid = CreateDynamicObject(976, -1817.395141, 3.899771, 13.979374, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(976, -1817.395141, -4.970226, 13.979374, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(976, -1817.395141, -13.850228, 13.989374, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    
    //AlcazarPD
    tmpobjid = CreateDynamicObject(19843, -1632.324096, 688.048767, 11.387500, 90.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "Bow_Abpave_Gen", 0x00000000);
    SetDynamicObjectMaterialText(tmpobjid, 0, "GARAGE", 30, "Ariel", 44, 1, 0xFFFFFFFF, 0x00000000, 0);
    tmpobjid = CreateDynamicObject(19843, -1631.324096, 688.048767, 11.387500, 90.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "Bow_Abpave_Gen", 0x00000000);
    SetDynamicObjectMaterialText(tmpobjid, 0, "RA", 30, "Ariel", 44, 1, 0xFFFFFFFF, 0x00000000, 0);
    tmpobjid = CreateDynamicObject(19843, -1630.324096, 688.048767, 11.387500, 90.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "Bow_Abpave_Gen", 0x00000000);
    SetDynamicObjectMaterialText(tmpobjid, 0, "GE", 30, "Ariel", 44, 1, 0xFFFFFFFF, 0x00000000, 0);
    tmpobjid = CreateDynamicObject(19442, -1603.186157, 716.350891, 20.457359, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "Bow_Abpave_Gen", 0x00000000);
    SetDynamicObjectMaterialText(tmpobjid, 0, "POLICE", 80, "GTAWEAPON3", 36, 0, 0xFFFFFFFF, 0x00000000, 0);
    tmpobjid = CreateDynamicObject(19442, -1605.386108, 716.350891, 20.457359, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "Bow_Abpave_Gen", 0x00000000);
    SetDynamicObjectMaterialText(tmpobjid, 0, "DEPART", 80, "GTAWEAPON3", 36, 0, 0xFFFFFFFF, 0x00000000, 0);
    tmpobjid = CreateDynamicObject(19442, -1607.036010, 716.350830, 20.457359, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "Bow_Abpave_Gen", 0x00000000);
    SetDynamicObjectMaterialText(tmpobjid, 0, "MENT", 80, "GTAWEAPON3", 36, 0, 0xFFFFFFFF, 0x00000000, 0);
    tmpobjid = CreateDynamicObject(792, -1602.577270, 662.321716, 6.587500, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(792, -1594.577270, 662.321716, 6.587500, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(792, -1586.577270, 662.321716, 6.587500, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3439, -1586.958251, 679.346923, 10.187500, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(792, -1610.577270, 662.321716, 6.587500, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(640, -1580.425537, 679.910522, 6.887499, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(640, -1575.175537, 679.910583, 6.887499, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(640, -1584.375610, 679.110534, 6.887499, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3439, -1592.467895, 679.346923, 10.187500, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(640, -1589.755493, 679.110534, 6.887499, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2027, -1585.544067, 686.486083, 16.764060, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(640, -1595.115478, 679.110534, 6.887499, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(640, -1600.415527, 679.110534, 6.887499, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3439, -1597.797851, 679.346923, 10.187500, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3439, -1603.097900, 679.346923, 10.187500, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(640, -1605.715576, 679.110534, 6.887499, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3439, -1608.397949, 679.346923, 10.187500, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2027, -1590.544067, 686.486083, 16.764060, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(640, -1611.015625, 679.110534, 6.887499, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2027, -1595.544067, 686.486083, 16.764060, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19822, -1597.600219, 685.775085, 16.264062, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2027, -1600.544067, 681.486083, 16.764060, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2027, -1595.544067, 681.486083, 16.764060, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2027, -1590.544067, 681.486083, 16.764060, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2027, -1585.544067, 681.486083, 16.764060, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(1557, -1610.259521, 687.901977, 18.654056, 0.000000, 540.000000, 360.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(1557, -1613.259277, 687.901977, 16.164058, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3850, -1604.691894, 680.068725, 17.564060, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3850, -1608.161254, 680.068725, 17.564060, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3850, -1611.631469, 680.068725, 17.564060, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3850, -1615.101806, 680.068725, 17.564060, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3850, -1616.443481, 680.068725, 17.564060, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3850, -1601.213867, 680.068725, 17.564060, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3850, -1597.743408, 680.068725, 17.564060, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3850, -1594.272460, 680.068725, 17.564060, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3850, -1590.791992, 680.068725, 17.564060, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3850, -1587.322631, 680.068725, 17.564060, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3850, -1618.173583, 681.828552, 17.564060, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3850, -1583.852294, 680.068725, 17.564060, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19552, -1110.017578, 648.009155, 1.187500, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3850, -1618.173583, 685.309020, 17.564060, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3850, -1582.153564, 681.828552, 17.564060, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3850, -1582.153564, 685.298828, 17.564060, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3850, -1582.153564, 687.028869, 17.564060, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3850, -1618.173583, 687.018920, 17.564060, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(16151, -1602.516601, 686.985046, 16.494047, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19322, -1105.235351, 615.084350, 19.187500, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19820, -1600.892211, 686.133117, 17.114065, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(987, -1641.143188, 646.161437, 9.687500, 0.000000, 0.000000, 360.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(1484, -1601.806640, 685.948791, 17.164062, 0.000000, -53.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19823, -1599.651123, 686.018066, 17.164062, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(987, -1641.143188, 687.861511, 9.687500, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(987, -1641.143188, 675.361511, 9.687500, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(987, -1641.143188, 663.361511, 9.687500, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(987, -1641.143188, 658.361511, 9.687500, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19325, -1097.529418, 655.829223, 1.265625, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(987, -1629.143188, 646.161437, 9.687500, 0.000000, 0.000000, 360.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(987, -1618.143188, 646.161437, 9.687500, 0.000000, 0.000000, 360.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(987, -1607.143188, 646.161437, 9.687500, 0.000000, 0.000000, 360.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(987, -1596.143188, 646.161437, 9.687500, 0.000000, 0.000000, 360.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(987, -1585.143188, 646.161437, 9.687500, 0.000000, 0.000000, 360.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(987, -1584.143188, 646.161437, 9.687500, 0.000000, 0.000000, 360.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(9833, -1577.385131, 684.190307, 7.687499, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(14469, -1575.519287, 686.957580, 6.187500, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(14469, -1579.019287, 686.957580, 6.187500, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(14469, -1579.019287, 684.457580, 6.187500, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(14469, -1575.519287, 684.457580, 6.187500, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(14469, -1575.519287, 681.957580, 6.187500, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(14469, -1579.019287, 681.957580, 6.187500, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2008, -1614.335815, 680.098327, 6.187500, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2008, -1616.535888, 680.098327, 6.187500, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2008, -1618.035888, 685.998352, 6.187500, 0.000000, 0.000000, 450.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2008, -1618.035888, 683.798339, 6.187500, 0.000000, 0.000000, 450.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(1806, -1615.239990, 681.075073, 6.187500, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(1806, -1617.339965, 681.075073, 6.187500, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(1806, -1616.939941, 684.575073, 6.187500, 0.000000, 0.000000, 450.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(1806, -1616.939941, 686.775085, 6.187500, 0.000000, 0.000000, 450.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19302, -1617.186523, 679.466186, 8.287500, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19302, -1615.416381, 679.466186, 8.287500, 0.000000, 0.000000, 360.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19302, -1618.686401, 686.256225, 8.287500, 0.000000, 0.000000, 450.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19302, -1618.586425, 684.556213, 8.287500, 0.000000, 0.000000, 630.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(640, -1591.675415, 718.210998, 9.187493, 10.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(673, -1591.437500, 717.439758, 9.477712, -46.000000, 0.000000, 360.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(640, -1590.575439, 718.210998, 8.987496, 10.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(819, -1591.162475, 715.655700, 7.858781, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(819, -1594.162475, 715.655700, 7.858781, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(673, -1623.737670, 717.439758, 13.277712, -46.000000, 0.000000, 360.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(640, -1622.975097, 718.511169, 14.287489, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(640, -1619.975341, 716.211242, 14.287489, 0.400000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(819, -1624.162475, 716.455993, 12.858781, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19123, -1615.494750, 718.701843, 13.269384, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19123, -1612.494750, 718.701843, 12.669384, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19123, -1609.494750, 718.701843, 12.069383, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19123, -1606.494750, 718.701843, 11.469383, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19123, -1603.494750, 718.701843, 10.869382, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19123, -1600.494750, 718.701843, 10.269382, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19123, -1597.494750, 718.701843, 9.669382, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(983, -1690.689941, 688.089416, 24.557445, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(983, -1697.089965, 688.089416, 24.557445, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(983, -1687.440063, 691.339416, 24.557445, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    
    //SF Houses
    tmpobjid = CreateDynamicObject(3250, -1623.138793, 404.251434, 6.091393, 0.000000, 0.000000, -135.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3250, -1614.137817, 413.357849, 6.031250, 0.000000, 0.000000, 224.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3250, -1606.137817, 421.357849, 6.031250, 0.000000, 0.000000, 224.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3250, -1598.137817, 429.357849, 6.031250, 0.000000, 0.000000, 224.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3250, -1590.137817, 437.357849, 6.031250, 0.000000, 0.000000, 224.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3250, -1582.137817, 445.357849, 6.031250, 0.000000, 0.000000, 224.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3250, -1574.137817, 453.357849, 6.031250, 0.000000, 0.000000, 224.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3250, -1566.537841, 461.757873, 6.031250, 0.000000, 0.000000, 229.800033, -1, -1, -1, 300.00, 300.00);

    //Casino exterior (SF)
    tmpobjid = CreateDynamicObject(7288, -1943.640991, 560.783691, 41.165790, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19124, -1948.795043, 588.615905, 34.793975, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19125, -1942.729125, 588.693115, 34.771873, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19126, -1936.831176, 588.621582, 34.771877, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19127, -1930.771606, 588.634216, 34.765689, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19123, -1924.953613, 588.560852, 34.871875, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19122, -1954.836914, 588.635986, 34.870338, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19121, -1960.845458, 588.635253, 34.824069, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2631, -1942.896362, 555.693298, 34.152862, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2631, -1942.896362, 559.583312, 34.152862, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2773, -1944.091430, 555.952941, 34.701873, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2773, -1944.091430, 558.252990, 34.701873, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2773, -1944.091430, 560.583007, 34.701873, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2773, -1941.751342, 560.583007, 34.701873, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2773, -1941.751342, 558.263000, 34.701873, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2773, -1941.751342, 555.963012, 34.701873, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    
    //BANK SF
	tmpobjid = CreateObject(9918, -1600.147216, 885.607421, 26.843799, 0.000000, 0.000000, 0.000000, 500.00);
	SetObjectMaterial(tmpobjid, 0, 15041, "bigsfsave", "AH_flroortile5", 0x00000000);
	SetObjectMaterial(tmpobjid, 1, 3603, "bevmans01_la", "rooftiles1", 0x00000000);
	SetObjectMaterial(tmpobjid, 2, 15041, "bigsfsave", "AH_walltile6", 0x00000000);
	SetObjectMaterial(tmpobjid, 3, 3603, "bevmans01_la", "rooftiles1", 0x00000000);
	SetObjectMaterial(tmpobjid, 5, 3603, "bevmans01_la", "rooftiles1", 0x00000000);
	SetObjectMaterial(tmpobjid, 6, 13691, "bevcunto2_lahills", "stonewall3_la", 0x00000000);
	tmpobjid = CreateObject(9918, -1600.047119, 885.787536, 26.000000, 0.000000, 0.000000, 0.000000, 500.00);
	SetObjectMaterial(tmpobjid, 0, 15041, "bigsfsave", "AH_flroortile5", 0x00000000);
	SetObjectMaterial(tmpobjid, 1, 3603, "bevmans01_la", "rooftiles1", 0x00000000);
	SetObjectMaterial(tmpobjid, 2, 15041, "bigsfsave", "AH_walltile6", 0x00000000);
	SetObjectMaterial(tmpobjid, 5, 3603, "bevmans01_la", "rooftiles1", 0x00000000);
	tmpobjid = CreateObject(19480, -1609.563476, 867.039184, 33.539051, 0.000000, 0.000000, -90.000007, 500.00);
	SetObjectMaterialText(tmpobjid, "{000208} BANK", 0, 40, "Calibri", 40, 1, 0x00000000, 0x00000000, 1);
	tmpobjid = CreateObject(19480, -1594.842041, 867.029541, 28.209058, 0.000000, 0.000000, -90.000045, 500.00);
	SetObjectMaterialText(tmpobjid, "{000208} CENTRAL", 0, 40, "Ariel", 30, 1, 0x00000000, 0x00000000, 1);
	tmpobjid = CreateDynamicObject(19377, 1384.440551, -34.227512, 1005.872436, 0.000000, 90.000000, 90.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3979, "civic01_lan", "sl_laglasswall2", 0x00000000);
	tmpobjid = CreateDynamicObject(1649, 1387.198852, -21.505449, 999.872924, 270.000000, 0.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 18225, "cuntrockcs_t", "cliffmid4", 0xAAFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18225, "cuntrockcs_t", "cliffmid4", 0x00000000);
	tmpobjid = CreateDynamicObject(1649, 1387.198852, -24.835477, 999.872924, 270.000000, 0.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 18031, "cj_exp", "mp_furn_floor", 0xAAFFFFFF);
	tmpobjid = CreateDynamicObject(1649, 1387.198852, -28.165496, 999.872924, 270.000000, 0.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 18031, "cj_exp", "mp_furn_floor", 0xAAFFFFFF);
	tmpobjid = CreateDynamicObject(1649, 1387.198852, -31.495508, 999.872924, 270.000000, 0.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 18225, "cuntrockcs_t", "cliffmid4", 0xAAFFFFFF);
	tmpobjid = CreateDynamicObject(1649, 1382.759033, -31.495508, 999.872924, 270.000000, 0.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 18225, "cuntrockcs_t", "cliffmid4", 0xAAFFFFFF);
	tmpobjid = CreateDynamicObject(1649, 1382.759033, -28.165498, 999.872924, 270.000000, 0.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 18031, "cj_exp", "mp_furn_floor", 0xAAFFFFFF);
	tmpobjid = CreateDynamicObject(1649, 1382.759033, -24.835474, 999.872924, 270.000000, 0.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 18031, "cj_exp", "mp_furn_floor", 0xAAFFFFFF);
	tmpobjid = CreateDynamicObject(1649, 1382.759033, -21.505439, 999.872924, 270.000000, 0.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 18225, "cuntrockcs_t", "cliffmid4", 0xAAFFFFFF);
	tmpobjid = CreateDynamicObject(1649, 1378.319213, -31.495508, 999.872924, 270.000000, 0.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 18225, "cuntrockcs_t", "cliffmid4", 0xAAFFFFFF);
	tmpobjid = CreateDynamicObject(1649, 1373.877441, -31.495508, 999.872924, 270.000000, 0.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 18225, "cuntrockcs_t", "cliffmid4", 0xAAFFFFFF);
	tmpobjid = CreateDynamicObject(1649, 1378.317749, -28.165498, 999.872924, 270.000000, 0.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 18031, "cj_exp", "mp_furn_floor", 0xAAFFFFFF);
	tmpobjid = CreateDynamicObject(1649, 1373.876098, -28.165498, 999.872924, 270.000000, 0.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 18225, "cuntrockcs_t", "cliffmid4", 0xAAFFFFFF);
	tmpobjid = CreateDynamicObject(1649, 1378.318359, -24.835474, 999.872924, 270.000000, 0.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 18031, "cj_exp", "mp_furn_floor", 0xAAFFFFFF);
	tmpobjid = CreateDynamicObject(1649, 1373.876708, -24.835474, 999.872924, 270.000000, 0.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 18225, "cuntrockcs_t", "cliffmid4", 0xAAFFFFFF);
	tmpobjid = CreateDynamicObject(1649, 1378.319580, -21.505439, 999.872924, 270.000000, 0.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 18225, "cuntrockcs_t", "cliffmid4", 0xAAFFFFFF);
	tmpobjid = CreateDynamicObject(1649, 1373.878295, -21.505439, 999.872924, 270.000000, 0.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 18225, "cuntrockcs_t", "cliffmid4", 0xAAFFFFFF);
	tmpobjid = CreateDynamicObject(19377, 1389.302490, -28.397520, 1005.163146, 0.000000, 0.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1389.302490, -18.767522, 1005.163146, 0.000000, 0.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1384.462280, -20.077535, 1005.163146, 0.000000, 0.000000, 90.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1374.841674, -20.077535, 1005.163146, 0.000000, 0.000000, 90.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1384.462280, -33.107543, 1005.163146, 0.000000, 0.000000, 90.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1374.831298, -33.107543, 1005.163146, 0.000000, 0.000000, 90.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1372.030517, -30.447538, 1005.163146, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1372.030517, -18.247501, 1005.163146, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1372.020507, -25.417507, 1008.693664, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0x00000000);
	tmpobjid = CreateDynamicObject(19381, 1375.534179, -26.573587, 1006.703308, 0.000000, 90.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3980, "cityhall_lan", "LAcityhwal1", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1374.831298, -34.227512, 1005.872436, 0.000000, 90.000000, 90.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3979, "civic01_lan", "sl_laglasswall2", 0x00000000);
	tmpobjid = CreateDynamicObject(2610, 1387.413330, -20.547332, 1000.682922, 0.000000, 0.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18996, "mattextures", "sampblack", 0xFFFFFF33);
	SetDynamicObjectMaterial(tmpobjid, 2, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1374.831298, -18.827487, 1005.872436, 0.000000, 90.000000, 90.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3979, "civic01_lan", "sl_laglasswall2", 0x00000000);
	tmpobjid = CreateDynamicObject(2270, 1380.460693, -20.660913, 1001.912963, 0.000000, 0.000000, 360.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 18835, "mickytextures", "marb002", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1384.461181, -18.827487, 1005.872436, 0.000000, 90.000000, 90.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3979, "civic01_lan", "sl_laglasswall2", 0x00000000);
	tmpobjid = CreateDynamicObject(19381, 1386.023925, -26.573587, 1006.703308, 0.000000, 90.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3980, "cityhall_lan", "LAcityhwal1", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1374.831298, -29.057519, 1011.043457, 0.000000, 0.000000, 90.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3979, "civic01_lan", "sl_laglasswall2", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1384.460571, -29.057519, 1011.043457, 0.000000, 0.000000, 90.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3979, "civic01_lan", "sl_laglasswall2", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1384.460571, -23.997501, 1011.043457, 0.000000, 0.000000, 90.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3979, "civic01_lan", "sl_laglasswall2", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1374.840332, -23.997501, 1011.043457, 0.000000, 0.000000, 90.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3979, "civic01_lan", "sl_laglasswall2", 0x00000000);
	tmpobjid = CreateDynamicObject(19360, 1376.712524, -32.953826, 1001.272949, 0.000000, 0.000000, 90.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 15041, "bigsfsave", "windo_blinds", 0x00000000);
	tmpobjid = CreateDynamicObject(19360, 1376.712524, -32.953826, 1004.743225, 0.000000, 0.000000, 90.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 15041, "bigsfsave", "windo_blinds", 0x00000000);
	tmpobjid = CreateDynamicObject(2184, 1375.625976, -28.353559, 999.872924, 0.000000, 0.000000, 111.400001, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14786, "ab_sfgymbeams", "knot_wood128", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 3922, "bistro", "Marble2", 0xFFFFFFFF);
	tmpobjid = CreateDynamicObject(2184, 1374.832763, -31.183103, 999.872924, 0.000000, 0.000000, 68.400123, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14786, "ab_sfgymbeams", "knot_wood128", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 3922, "bistro", "Marble2", 0xFFFFFFFF);
	tmpobjid = CreateDynamicObject(19538, 1434.162109, -51.381210, 999.872924, 0.000000, 0.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0x00FFFFFF);
	tmpobjid = CreateDynamicObject(19443, 1390.841552, -25.131233, 1000.652099, 90.000000, 180.000000, 90.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19360, 1384.962280, -20.233667, 1004.742553, 0.000000, 0.000000, 90.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 15041, "bigsfsave", "windo_blinds", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1366.883911, -26.541532, 999.791687, 0.000000, 90.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14623, "mafcasmain", "casino_carp", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 14702, "masmall3int2", "HS3_wall6", 0x00000000);
	tmpobjid = CreateDynamicObject(1569, 1389.175903, -28.194805, 999.872924, 0.000000, 0.000000, 90.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 5986, "chateau_lawn", "doorkb_1_256", 0x00000000);
	tmpobjid = CreateDynamicObject(1569, 1389.165893, -25.204803, 999.872924, 0.000000, 0.000000, 270.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 5986, "chateau_lawn", "doorkb_1_256", 0x00000000);
	tmpobjid = CreateDynamicObject(19087, 1376.078369, -23.149948, 999.912536, 0.000000, 90.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14651, "ab_trukstpd", "Bow_bar_flooring", 0x00000000);
	tmpobjid = CreateDynamicObject(19360, 1384.962280, -32.953826, 1001.272949, 0.000000, 0.000000, 90.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 15041, "bigsfsave", "windo_blinds", 0x00000000);
	tmpobjid = CreateDynamicObject(2290, 1381.790893, -32.346427, 999.842895, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1730, "cj_furniture", "CJ-COUCHL2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 1730, "cj_furniture", "CJ_WOOD5", 0x00000000);
	tmpobjid = CreateDynamicObject(19360, 1384.962280, -32.953826, 1004.773071, 0.000000, 0.000000, 90.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 15041, "bigsfsave", "windo_blinds", 0x00000000);
	tmpobjid = CreateDynamicObject(19360, 1376.712524, -20.223873, 1004.743225, 0.000000, 0.000000, 90.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 15041, "bigsfsave", "windo_blinds", 0x00000000);
	tmpobjid = CreateDynamicObject(19360, 1376.712524, -20.223873, 1001.253356, 0.000000, 0.000000, 90.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 15041, "bigsfsave", "windo_blinds", 0x00000000);
	tmpobjid = CreateDynamicObject(19360, 1384.962280, -20.233667, 1001.272949, 0.000000, 0.000000, 90.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 15041, "bigsfsave", "windo_blinds", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1357.581054, -25.757453, 999.962524, 0.000000, 180.000000, 90.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3979, "civic01_lan", "airportwall_256128", 0x00000000);
	tmpobjid = CreateDynamicObject(19360, 1386.482299, -34.443832, 1001.653015, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	tmpobjid = CreateDynamicObject(2290, 1379.800415, -20.916454, 999.842895, 0.000000, 0.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 1730, "cj_furniture", "CJ-COUCHL2", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 1730, "cj_furniture", "CJ_WOOD5", 0x00000000);
	tmpobjid = CreateDynamicObject(19360, 1386.482299, -34.443832, 1005.123107, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	tmpobjid = CreateDynamicObject(19360, 1383.440795, -34.443832, 1005.103088, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	tmpobjid = CreateDynamicObject(19360, 1383.440795, -34.443832, 1001.612915, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	tmpobjid = CreateDynamicObject(19360, 1384.972167, -34.573833, 1005.703369, 0.000000, 90.000000, 270.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	tmpobjid = CreateDynamicObject(19360, 1384.972167, -34.573833, 999.952453, 0.000000, 90.000000, 270.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	tmpobjid = CreateDynamicObject(19360, 1390.835327, -26.643810, 1002.462341, 0.000000, 90.000000, 360.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19360, 1390.835327, -26.753812, 1002.462341, 0.000000, 90.000000, 360.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
    tmpobjid = CreateDynamicObject(19360, 1378.250732, -34.443832, 1001.612915, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
    SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	tmpobjid = CreateDynamicObject(19360, 1378.250122, -18.743850, 1001.612915, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	tmpobjid = CreateDynamicObject(19360, 1378.250732, -34.443832, 1005.113403, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	tmpobjid = CreateDynamicObject(19360, 1375.170166, -34.443832, 1001.612670, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	tmpobjid = CreateDynamicObject(19360, 1375.170166, -34.443832, 1005.112487, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	tmpobjid = CreateDynamicObject(19360, 1376.691528, -34.583847, 1005.702819, 0.000000, 90.000000, 270.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	tmpobjid = CreateDynamicObject(19360, 1378.250122, -18.743850, 1005.103027, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	tmpobjid = CreateDynamicObject(19360, 1376.691528, -34.583847, 999.952453, 0.000000, 90.000000, 270.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	tmpobjid = CreateDynamicObject(19360, 1375.179687, -18.743850, 1005.103027, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1394.452270, -28.397520, 999.962524, 0.000000, 90.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	tmpobjid = CreateDynamicObject(19360, 1375.178955, -18.743850, 1001.612915, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1384.022216, -37.817478, 999.962524, 0.000000, 90.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1373.541748, -37.817478, 999.962524, 0.000000, 90.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	tmpobjid = CreateDynamicObject(19360, 1376.699829, -18.643867, 999.992553, 0.000000, 90.000000, 270.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1366.921630, -30.437463, 999.962524, 0.000000, 90.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1366.921630, -18.257467, 999.962524, 0.000000, 90.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1377.411254, -15.367465, 999.962524, 0.000000, 90.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	tmpobjid = CreateDynamicObject(19360, 1376.699829, -18.643854, 1005.702392, 0.000000, 90.000000, 270.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1387.911376, -15.367465, 999.962524, 0.000000, 90.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1394.441162, -18.797468, 999.962524, 0.000000, 90.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	tmpobjid = CreateDynamicObject(19360, 1383.431152, -18.743850, 1001.612915, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	tmpobjid = CreateDynamicObject(19087, 1378.479125, -23.149948, 999.912536, 0.000000, 90.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14651, "ab_trukstpd", "Bow_bar_flooring", 0x00000000);
	tmpobjid = CreateDynamicObject(19087, 1380.749023, -23.149948, 999.912536, 0.000000, 90.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14651, "ab_trukstpd", "Bow_bar_flooring", 0x00000000);
	tmpobjid = CreateDynamicObject(19087, 1383.039306, -23.149948, 999.912536, 0.000000, 90.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14651, "ab_trukstpd", "Bow_bar_flooring", 0x00000000);
	tmpobjid = CreateDynamicObject(19087, 1385.319580, -23.149948, 999.912536, 0.000000, 90.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14651, "ab_trukstpd", "Bow_bar_flooring", 0x00000000);
	tmpobjid = CreateDynamicObject(19087, 1387.628540, -23.149948, 999.912536, 0.000000, 90.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14651, "ab_trukstpd", "Bow_bar_flooring", 0x00000000);
	tmpobjid = CreateDynamicObject(19087, 1387.628540, -29.849958, 999.912536, 0.000000, 90.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14651, "ab_trukstpd", "Bow_bar_flooring", 0x00000000);
	tmpobjid = CreateDynamicObject(19087, 1385.268310, -29.849958, 999.912536, 0.000000, 90.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14651, "ab_trukstpd", "Bow_bar_flooring", 0x00000000);
	tmpobjid = CreateDynamicObject(19087, 1382.858032, -29.849958, 999.912536, 0.000000, 90.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14651, "ab_trukstpd", "Bow_bar_flooring", 0x00000000);
	tmpobjid = CreateDynamicObject(19087, 1380.487670, -29.849958, 999.912536, 0.000000, 90.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14651, "ab_trukstpd", "Bow_bar_flooring", 0x00000000);
	tmpobjid = CreateDynamicObject(19087, 1378.087768, -29.849958, 999.912536, 0.000000, 90.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14651, "ab_trukstpd", "Bow_bar_flooring", 0x00000000);
	tmpobjid = CreateDynamicObject(19087, 1376.106445, -29.849958, 999.912536, 0.000000, 90.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14651, "ab_trukstpd", "Bow_bar_flooring", 0x00000000);
	tmpobjid = CreateDynamicObject(19087, 1376.106445, -29.849958, 999.912536, 0.000000, 90.000000, 270.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14651, "ab_trukstpd", "Bow_bar_flooring", 0x00000000);
	tmpobjid = CreateDynamicObject(19087, 1376.106445, -27.449970, 999.912536, 0.000000, 90.000000, 270.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14651, "ab_trukstpd", "Bow_bar_flooring", 0x00000000);
	tmpobjid = CreateDynamicObject(19087, 1376.106445, -25.599964, 999.912536, 0.000000, 90.000000, 270.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14651, "ab_trukstpd", "Bow_bar_flooring", 0x00000000);
	tmpobjid = CreateDynamicObject(19360, 1383.431152, -18.743850, 1005.112792, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	tmpobjid = CreateDynamicObject(19360, 1386.501098, -18.743850, 1005.112792, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	tmpobjid = CreateDynamicObject(19360, 1386.501098, -18.743850, 1001.602600, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	tmpobjid = CreateDynamicObject(19360, 1384.980468, -18.623851, 999.952087, 0.000000, 90.000000, 270.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	tmpobjid = CreateDynamicObject(19360, 1384.980468, -18.623851, 1005.702453, 0.000000, 90.000000, 270.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	tmpobjid = CreateDynamicObject(644, 1388.186889, -21.366914, 1000.262878, 0.000000, 0.000000, 42.199989, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 17958, "burnsalpha", "plantb256", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 2, 3603, "bevmans01_la", "hottop5d_law", 0x00000000);
	tmpobjid = CreateDynamicObject(644, 1388.107910, -32.223091, 1000.262878, 0.000000, 0.000000, 42.199989, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 17958, "burnsalpha", "plantb256", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 2, 3603, "bevmans01_la", "hottop5d_law", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1367.141845, -25.747459, 1005.213745, 0.000000, 180.000000, 90.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3979, "civic01_lan", "airportwall_256128", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1367.141845, -22.957437, 1005.213378, 0.000000, 180.000000, 90.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3979, "civic01_lan", "airportwall_256128", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1356.389404, -26.541532, 999.791687, 0.000000, 90.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14623, "mafcasmain", "casino_carp", 0x00000000);
	tmpobjid = CreateDynamicObject(2256, 1380.752685, -32.999336, 1003.032836, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14420, "dr_gsbits", "mp_apt1_pic2", 0x00000000);
	tmpobjid = CreateDynamicObject(2262, 1379.267456, -20.702116, 1001.763244, 0.000000, 0.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 2811, "gb_ornaments01", "GB_photo01", 0x00000000);
	tmpobjid = CreateDynamicObject(19443, 1390.841552, -28.271238, 1001.582946, 90.000000, 180.000000, 90.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(2264, 1381.574462, -20.670015, 1002.333129, 0.000000, 0.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 2266, "picture_frame", "CJ_PAINTING28", 0x00000000);
	tmpobjid = CreateDynamicObject(2264, 1382.484985, -20.670015, 1001.812988, 0.000000, 0.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 2254, "picture_frame_clip", "CJ_PAINTING15", 0x00000000);
	tmpobjid = CreateDynamicObject(2273, 1379.054077, -32.508701, 1002.063110, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 1, 2266, "picture_frame", "CJ_PAINTING34", 0x00000000);
	tmpobjid = CreateDynamicObject(2273, 1382.464355, -32.508701, 1002.063110, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 15040, "cuntcuts", "GB_canvas15", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 2254, "picture_frame_clip", "CJ_PAINTING24", 0x00000000);
	tmpobjid = CreateDynamicObject(19443, 1390.841552, -25.131233, 1001.582946, 90.000000, 180.000000, 90.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19443, 1390.841552, -28.271238, 1000.652282, 90.000000, 180.000000, 90.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1361.739135, -18.217447, 999.962524, 0.000000, 180.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3979, "civic01_lan", "airportwall_256128", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1356.389404, -16.921527, 999.791687, 0.000000, 90.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14623, "mafcasmain", "casino_carp", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1366.481201, -22.947437, 1005.213256, 0.000000, 180.000000, 90.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3979, "civic01_lan", "airportwall_256128", 0x00000000);
	tmpobjid = CreateDynamicObject(2356, 1373.321655, -29.486640, 999.872924, 0.000000, 0.000000, -56.999977, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 18081, "cj_barb", "ab_leather_strips", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 1560, "7_11_door", "cj_sheetmetal2", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1366.783813, -26.541532, 1004.432312, 0.000000, 90.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3979, "civic01_lan", "sl_laglasswall1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 14702, "masmall3int2", "HS3_wall6", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1356.304931, -26.541532, 1004.432312, 0.000000, 90.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3979, "civic01_lan", "sl_laglasswall1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 14702, "masmall3int2", "HS3_wall6", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1357.678710, -26.457462, 999.962524, 0.000000, 180.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3979, "civic01_lan", "airportwall_256128", 0x00000000);
	tmpobjid = CreateDynamicObject(2610, 1386.912841, -20.547332, 1000.682922, 0.000000, 0.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18996, "mattextures", "sampblack", 0xFFFFFF33);
	SetDynamicObjectMaterial(tmpobjid, 2, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObject(2610, 1386.992919, -32.657295, 1000.682922, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 2, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObject(2266, 1374.620971, -29.498609, 1000.763061, 0.000000, 0.000000, 270.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 19894, "laptopsamp1", "laptopscreen2", 0x00000000);
	tmpobjid = CreateDynamicObject(2610, 1373.563354, -32.597297, 1000.682922, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18996, "mattextures", "sampblack", 0xFFFFFF33);
	SetDynamicObjectMaterial(tmpobjid, 2, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObject(2610, 1374.083862, -32.597297, 1000.682922, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18996, "mattextures", "sampblack", 0xFFFFFF33);
	SetDynamicObjectMaterial(tmpobjid, 2, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObject(2266, 1375.601928, -29.518610, 1000.763061, 0.000000, 0.000000, 450.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = CreateDynamicObject(19874, 1375.087890, -29.512548, 1000.723510, 180.000000, 90.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = CreateDynamicObject(2356, 1373.174682, -21.864820, 999.872924, 0.000000, 0.000000, -86.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 18081, "cj_barb", "ab_leather_strips", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 1560, "7_11_door", "cj_sheetmetal2", 0x00000000);
	tmpobjid = CreateDynamicObject(2266, 1374.362182, -30.371349, 1000.763061, 0.000000, 0.000000, -125.699951, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 16640, "a51", "a51_monitors", 0x00000000);
	tmpobjid = CreateDynamicObject(2266, 1375.138549, -30.953622, 1000.763061, 0.000000, 0.000000, 54.300048, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = CreateDynamicObject(19874, 1374.756958, -30.647089, 1000.707824, -178.700012, 90.000000, -36.199981, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = CreateDynamicObject(1817, 1380.317138, -22.959974, 999.872924, 0.000000, 0.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 14389, "madpoolbit", "AH_flroortile4", 0x00000000);
	tmpobjid = CreateDynamicObject(1817, 1380.317138, -31.399976, 999.872924, 0.000000, 0.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14650, "ab_trukstpc", "mp_CJ_WOOD5", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 14389, "madpoolbit", "AH_flroortile4", 0x00000000);
	tmpobjid = CreateDynamicObject(2266, 1374.948364, -21.557851, 1000.763061, 0.000000, 0.000000, 95.700004, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = CreateDynamicObject(2266, 1373.961181, -21.636278, 1000.763061, 0.000000, 0.000000, 275.700012, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 14544, "ab_woozieb", "ap_screens1", 0x00000000);
	tmpobjid = CreateDynamicObject(19874, 1375.087890, -29.512548, 1000.643432, 180.000000, 180.000000, 87.799911, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = CreateDynamicObject(19874, 1374.764770, -30.646400, 1000.643432, 180.000000, 180.000000, 51.199901, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = CreateDynamicObject(631, 1372.543945, -20.710489, 1000.783447, 0.000000, 0.000000, -44.699996, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 4003, "cityhall_tr_lan", "foliage256", 0xFFFFFF33);
	tmpobjid = CreateDynamicObject(1897, 1372.015380, -25.696207, 1000.983886, 0.000000, 0.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 2755, "ab_dojowall", "mp_apt1_roomfloor", 0xFFFFFFFF);
	tmpobjid = CreateDynamicObject(1897, 1372.015380, -25.696207, 1003.194458, 0.000000, 0.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 2755, "ab_dojowall", "mp_apt1_roomfloor", 0xFFFFFFFF);
	tmpobjid = CreateDynamicObject(1897, 1372.015380, -23.016189, 1000.983703, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 2755, "ab_dojowall", "mp_apt1_roomfloor", 0xFFFFFFFF);
	tmpobjid = CreateDynamicObject(19874, 1374.519165, -21.563724, 1000.653442, 180.000000, 180.000000, 98.699928, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = CreateDynamicObject(1897, 1372.015380, -23.016189, 1003.183959, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 2755, "ab_dojowall", "mp_apt1_roomfloor", 0xFFFFFFFF);
	tmpobjid = CreateDynamicObject(1897, 1371.995361, -24.156192, 1003.494262, 270.000000, 270.000000, 270.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 2755, "ab_dojowall", "mp_apt1_roomfloor", 0xFFFFFFFF);
	tmpobjid = CreateDynamicObject(19874, 1374.507446, -21.572540, 1000.723510, 180.000000, 90.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = CreateDynamicObject(1897, 1371.995361, -26.326213, 1003.494262, 270.000000, 270.000000, 270.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 2755, "ab_dojowall", "mp_apt1_roomfloor", 0xFFFFFFFF);
	tmpobjid = CreateDynamicObject(1897, 1372.115478, -24.196207, 999.773681, 90.000000, 270.000000, 270.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 2755, "ab_dojowall", "mp_apt1_roomfloor", 0xFFFFFFFF);
	tmpobjid = CreateDynamicObject(1897, 1372.115478, -26.416213, 999.773681, 90.000000, 270.000000, 270.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 2755, "ab_dojowall", "mp_apt1_roomfloor", 0xFFFFFFFF);
	tmpobjid = CreateDynamicObject(1897, 1371.985351, -26.416213, 999.773681, 90.000000, 270.000000, 270.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 2755, "ab_dojowall", "mp_apt1_roomfloor", 0xFFFFFFFF);
	tmpobjid = CreateDynamicObject(1897, 1371.985351, -24.206209, 999.773681, 90.000000, 270.000000, 270.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 2755, "ab_dojowall", "mp_apt1_roomfloor", 0xFFFFFFFF);
	tmpobjid = CreateDynamicObject(2356, 1373.125732, -28.018836, 999.872924, 0.000000, 0.000000, -88.799972, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 18081, "cj_barb", "ab_leather_strips", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 1560, "7_11_door", "cj_sheetmetal2", 0x00000000);
	tmpobjid = CreateDynamicObject(2264, 1372.643798, -30.170032, 1002.593078, 0.000000, 0.000000, 90.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 2811, "gb_ornaments01", "GB_photo02", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 2811, "gb_ornaments01", "GB_photo02", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1352.940795, -21.727439, 999.962524, 0.000000, 180.000000, 90.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3979, "civic01_lan", "airportwall_256128", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1362.980957, -30.437463, 999.962524, 0.000000, 90.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1352.538818, -26.427425, 999.962524, 0.000000, 90.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1366.899169, -18.257415, 999.962524, 0.000000, 90.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1357.465820, -16.941532, 1004.432312, 0.000000, 90.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3979, "civic01_lan", "sl_laglasswall1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 14702, "masmall3int2", "HS3_wall6", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1351.518188, -18.217447, 999.962524, 0.000000, 180.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3979, "civic01_lan", "airportwall_256128", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1358.952026, -13.357445, 999.962524, 0.000000, 180.000000, 90.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3979, "civic01_lan", "airportwall_256128", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1349.311035, -13.357445, 999.962524, 0.000000, 180.000000, 90.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3979, "civic01_lan", "airportwall_256128", 0x00000000);
	tmpobjid = CreateDynamicObject(19843, 1359.815673, -24.384485, 1004.323059, 0.000000, 0.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "ventb64", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1346.398193, -16.827428, 999.962524, 0.000000, 90.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 14674, "civic02cj", "ab_hosWallUpr", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1356.890869, -8.667419, 999.962524, 0.000000, 90.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 8409, "gnhotel1", "gnhoteldoor05_128", 0xFFFFFFFF);
	tmpobjid = CreateDynamicObject(19843, 1365.669799, -24.384485, 1004.323059, 0.000000, 0.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "ventb64", 0x00000000);
	tmpobjid = CreateDynamicObject(2610, 1352.024169, -17.797256, 1002.333007, 0.000000, 0.000000, 450.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18996, "mattextures", "sampblack", 0xFFFFFF33);
	SetDynamicObjectMaterial(tmpobjid, 2, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObject(2610, 1352.024169, -16.267208, 1002.342895, 0.000000, 0.000000, 450.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18996, "mattextures", "sampblack", 0xFFFFFF33);
	SetDynamicObjectMaterial(tmpobjid, 2, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObject(2610, 1361.364868, -13.897294, 1000.682922, 0.000000, 0.000000, 360.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18996, "mattextures", "sampblack", 0xFFFFFF33);
	SetDynamicObjectMaterial(tmpobjid, 2, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObject(2610, 1360.854248, -13.897294, 1000.682922, 0.000000, 0.000000, 360.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18996, "mattextures", "sampblack", 0xFFFFFF33);
	SetDynamicObjectMaterial(tmpobjid, 2, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObject(2610, 1360.353881, -13.897294, 1000.682922, 0.000000, 0.000000, 360.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18996, "mattextures", "sampblack", 0xFFFFFF33);
	SetDynamicObjectMaterial(tmpobjid, 2, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObject(2610, 1359.853515, -13.897294, 1000.682922, 0.000000, 0.000000, 360.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18996, "mattextures", "sampblack", 0xFFFFFF33);
	SetDynamicObjectMaterial(tmpobjid, 2, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObject(2610, 1359.343139, -13.897294, 1000.682922, 0.000000, 0.000000, 360.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18996, "mattextures", "sampblack", 0xFFFFFF33);
	SetDynamicObjectMaterial(tmpobjid, 2, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObject(2610, 1358.832763, -13.897294, 1000.682922, 0.000000, 0.000000, 360.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18996, "mattextures", "sampblack", 0xFFFFFF33);
	SetDynamicObjectMaterial(tmpobjid, 2, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObject(2610, 1358.332275, -13.897294, 1000.682922, 0.000000, 0.000000, 360.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18996, "mattextures", "sampblack", 0xFFFFFF33);
	SetDynamicObjectMaterial(tmpobjid, 2, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1346.984985, -16.941532, 1004.432312, 0.000000, 90.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3979, "civic01_lan", "sl_laglasswall1", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 14702, "masmall3int2", "HS3_wall6", 0x00000000);
	tmpobjid = CreateDynamicObject(19087, 1357.792480, -22.331245, 1002.317687, 0.000000, 0.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = CreateDynamicObject(19087, 1357.792480, -22.331245, 1004.738037, 0.000000, 0.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = CreateDynamicObject(19087, 1361.634521, -22.331245, 1004.738037, 0.000000, 0.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = CreateDynamicObject(19087, 1361.634521, -22.331245, 1002.342468, 0.000000, 0.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = CreateDynamicObject(2610, 1357.825439, -13.897294, 1000.682922, 0.000000, 0.000000, 360.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18996, "mattextures", "sampblack", 0xFFFFFF33);
	SetDynamicObjectMaterial(tmpobjid, 2, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObject(2610, 1357.314941, -13.897294, 1000.682922, 0.000000, 0.000000, 360.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18996, "mattextures", "sampblack", 0xFFFFFF33);
	SetDynamicObjectMaterial(tmpobjid, 2, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObject(2610, 1356.814453, -13.897294, 1000.682922, 0.000000, 0.000000, 360.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18996, "mattextures", "sampblack", 0xFFFFFF33);
	SetDynamicObjectMaterial(tmpobjid, 2, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObject(2610, 1356.814453, -13.897294, 1002.343566, 0.000000, 0.000000, 360.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18996, "mattextures", "sampblack", 0xFFFFFF33);
	SetDynamicObjectMaterial(tmpobjid, 2, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObject(2610, 1357.315063, -13.897294, 1002.353149, 0.000000, 0.000000, 360.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18996, "mattextures", "sampblack", 0xFFFFFF33);
	SetDynamicObjectMaterial(tmpobjid, 2, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObject(2610, 1357.815551, -13.897294, 1002.353149, 0.000000, 0.000000, 360.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18996, "mattextures", "sampblack", 0xFFFFFF33);
	SetDynamicObjectMaterial(tmpobjid, 2, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObject(2610, 1358.326049, -13.897294, 1002.353149, 0.000000, 0.000000, 360.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18996, "mattextures", "sampblack", 0xFFFFFF33);
	SetDynamicObjectMaterial(tmpobjid, 2, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObject(2610, 1358.826538, -13.897294, 1002.353149, 0.000000, 0.000000, 360.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18996, "mattextures", "sampblack", 0xFFFFFF33);
	SetDynamicObjectMaterial(tmpobjid, 2, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObject(2610, 1359.337158, -13.897294, 1002.353149, 0.000000, 0.000000, 360.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18996, "mattextures", "sampblack", 0xFFFFFF33);
	SetDynamicObjectMaterial(tmpobjid, 2, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObject(2610, 1359.847412, -13.897294, 1002.353149, 0.000000, 0.000000, 360.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18996, "mattextures", "sampblack", 0xFFFFFF33);
	SetDynamicObjectMaterial(tmpobjid, 2, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObject(2610, 1360.357910, -13.897294, 1002.353149, 0.000000, 0.000000, 360.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18996, "mattextures", "sampblack", 0xFFFFFF33);
	SetDynamicObjectMaterial(tmpobjid, 2, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObject(2610, 1360.858398, -13.897294, 1002.353149, 0.000000, 0.000000, 360.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18996, "mattextures", "sampblack", 0xFFFFFF33);
	SetDynamicObjectMaterial(tmpobjid, 2, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObject(2610, 1361.368896, -13.897294, 1002.353149, 0.000000, 0.000000, 360.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18996, "mattextures", "sampblack", 0xFFFFFF33);
	SetDynamicObjectMaterial(tmpobjid, 2, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObject(2610, 1352.024169, -21.327301, 1000.682922, 0.000000, 0.000000, 450.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18996, "mattextures", "sampblack", 0xFFFFFF33);
	SetDynamicObjectMaterial(tmpobjid, 2, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObject(2610, 1352.024169, -20.817298, 1000.682922, 0.000000, 0.000000, 450.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18996, "mattextures", "sampblack", 0xFFFFFF33);
	SetDynamicObjectMaterial(tmpobjid, 2, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObject(2610, 1352.024169, -20.307287, 1000.682922, 0.000000, 0.000000, 450.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18996, "mattextures", "sampblack", 0xFFFFFF33);
	SetDynamicObjectMaterial(tmpobjid, 2, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObject(2610, 1352.024169, -19.797273, 1000.682922, 0.000000, 0.000000, 450.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18996, "mattextures", "sampblack", 0xFFFFFF33);
	SetDynamicObjectMaterial(tmpobjid, 2, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObject(2610, 1352.024169, -19.297262, 1000.682922, 0.000000, 0.000000, 450.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18996, "mattextures", "sampblack", 0xFFFFFF33);
	SetDynamicObjectMaterial(tmpobjid, 2, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObject(2610, 1352.024169, -21.327301, 1002.333007, 0.000000, 0.000000, 450.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18996, "mattextures", "sampblack", 0xFFFFFF33);
	SetDynamicObjectMaterial(tmpobjid, 2, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObject(2610, 1352.024169, -18.797254, 1000.682922, 0.000000, 0.000000, 450.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18996, "mattextures", "sampblack", 0xFFFFFF33);
	SetDynamicObjectMaterial(tmpobjid, 2, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObject(2610, 1352.024169, -18.297243, 1000.682922, 0.000000, 0.000000, 450.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18996, "mattextures", "sampblack", 0xFFFFFF33);
	SetDynamicObjectMaterial(tmpobjid, 2, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObject(2610, 1352.024169, -20.807292, 1002.333007, 0.000000, 0.000000, 450.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18996, "mattextures", "sampblack", 0xFFFFFF33);
	SetDynamicObjectMaterial(tmpobjid, 2, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObject(2610, 1352.024169, -17.797235, 1000.682922, 0.000000, 0.000000, 450.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18996, "mattextures", "sampblack", 0xFFFFFF33);
	SetDynamicObjectMaterial(tmpobjid, 2, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObject(2610, 1352.024169, -17.287227, 1000.682922, 0.000000, 0.000000, 450.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18996, "mattextures", "sampblack", 0xFFFFFF33);
	SetDynamicObjectMaterial(tmpobjid, 2, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObject(2610, 1352.024169, -20.307300, 1002.333007, 0.000000, 0.000000, 450.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18996, "mattextures", "sampblack", 0xFFFFFF33);
	SetDynamicObjectMaterial(tmpobjid, 2, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObject(2610, 1352.024169, -16.777217, 1000.682922, 0.000000, 0.000000, 450.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18996, "mattextures", "sampblack", 0xFFFFFF33);
	SetDynamicObjectMaterial(tmpobjid, 2, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObject(2610, 1352.024169, -19.817291, 1002.333007, 0.000000, 0.000000, 450.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18996, "mattextures", "sampblack", 0xFFFFFF33);
	SetDynamicObjectMaterial(tmpobjid, 2, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObject(2610, 1352.024169, -16.267208, 1000.682922, 0.000000, 0.000000, 450.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18996, "mattextures", "sampblack", 0xFFFFFF33);
	SetDynamicObjectMaterial(tmpobjid, 2, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObject(2610, 1352.024169, -19.297283, 1002.333007, 0.000000, 0.000000, 450.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18996, "mattextures", "sampblack", 0xFFFFFF33);
	SetDynamicObjectMaterial(tmpobjid, 2, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObject(2610, 1352.024169, -15.757205, 1000.682922, 0.000000, 0.000000, 450.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18996, "mattextures", "sampblack", 0xFFFFFF33);
	SetDynamicObjectMaterial(tmpobjid, 2, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObject(2610, 1352.024169, -18.787279, 1002.333007, 0.000000, 0.000000, 450.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18996, "mattextures", "sampblack", 0xFFFFFF33);
	SetDynamicObjectMaterial(tmpobjid, 2, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObject(2610, 1352.024169, -15.257202, 1000.682922, 0.000000, 0.000000, 450.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18996, "mattextures", "sampblack", 0xFFFFFF33);
	SetDynamicObjectMaterial(tmpobjid, 2, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObject(2610, 1352.024169, -18.297267, 1002.333007, 0.000000, 0.000000, 450.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18996, "mattextures", "sampblack", 0xFFFFFF33);
	SetDynamicObjectMaterial(tmpobjid, 2, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObject(2610, 1352.024169, -14.747198, 1000.682922, 0.000000, 0.000000, 450.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18996, "mattextures", "sampblack", 0xFFFFFF33);
	SetDynamicObjectMaterial(tmpobjid, 2, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObject(2610, 1352.024169, -14.237195, 1000.682922, 0.000000, 0.000000, 450.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18996, "mattextures", "sampblack", 0xFFFFFF33);
	SetDynamicObjectMaterial(tmpobjid, 2, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObject(2610, 1352.024169, -13.717189, 1000.682922, 0.000000, 0.000000, 450.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18996, "mattextures", "sampblack", 0xFFFFFF33);
	SetDynamicObjectMaterial(tmpobjid, 2, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObject(2610, 1352.024169, -17.297250, 1002.333007, 0.000000, 0.000000, 450.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18996, "mattextures", "sampblack", 0xFFFFFF33);
	SetDynamicObjectMaterial(tmpobjid, 2, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObject(2610, 1352.024169, -16.777248, 1002.333007, 0.000000, 0.000000, 450.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18996, "mattextures", "sampblack", 0xFFFFFF33);
	SetDynamicObjectMaterial(tmpobjid, 2, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObject(2610, 1352.024169, -15.757205, 1002.333007, 0.000000, 0.000000, 450.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18996, "mattextures", "sampblack", 0xFFFFFF33);
	SetDynamicObjectMaterial(tmpobjid, 2, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObject(2610, 1352.024169, -15.257202, 1002.342895, 0.000000, 0.000000, 450.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18996, "mattextures", "sampblack", 0xFFFFFF33);
	SetDynamicObjectMaterial(tmpobjid, 2, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObject(2610, 1352.024169, -14.747198, 1002.342773, 0.000000, 0.000000, 450.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18996, "mattextures", "sampblack", 0xFFFFFF33);
	SetDynamicObjectMaterial(tmpobjid, 2, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObject(2610, 1352.024169, -14.237195, 1002.343078, 0.000000, 0.000000, 450.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18996, "mattextures", "sampblack", 0xFFFFFF33);
	SetDynamicObjectMaterial(tmpobjid, 2, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObject(2610, 1352.024169, -13.717189, 1002.333007, 0.000000, 0.000000, 450.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "Alumox64", 0xFFFFFFFF);
	SetDynamicObjectMaterial(tmpobjid, 1, 18996, "mattextures", "sampblack", 0xFFFFFF33);
	SetDynamicObjectMaterial(tmpobjid, 2, 14581, "ab_mafiasuitea", "barbersmir1", 0x00000000);
	tmpobjid = CreateDynamicObject(2264, 1372.643798, -27.130033, 1002.483764, 0.000000, 0.000000, 90.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 19787, "samplcdtvs1", "samplcdtv1screen", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 19173, "samppictures", "samppicture3", 0x00000000);
	tmpobjid = CreateDynamicObject(2258, 1372.155761, -28.475849, 1002.312866, 0.000000, 0.000000, 90.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 15040, "cuntcuts", "GB_canvas06", 0x00000000);
	tmpobjid = CreateDynamicObject(2274, 1372.627563, -21.810142, 1002.057556, 0.000000, 0.000000, 90.000000, -1, -1, -1, 200.00, 200.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 2754, "otb_machine", "lift4", 0x00000000);
	SetDynamicObjectMaterial(tmpobjid, 1, 14593, "papaerchaseoffice", "sign_noCamera", 0x00000000);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObject(14793, 1380.443115, -23.033390, 1006.483459, 0.000000, 0.000000, 90.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(14793, 1379.912597, -23.033390, 1006.483459, 0.000000, 0.000000, 90.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(18075, 1380.804687, -33.796527, 1005.713989, 0.000000, 0.000000, 270.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(18075, 1380.804687, -19.516540, 1005.713989, 0.000000, 0.000000, 270.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(2811, 1382.804809, -20.585840, 999.872924, 0.000000, 0.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(2811, 1382.804809, -32.545852, 999.872924, 0.000000, 0.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(18084, 1384.962402, -21.226245, 1001.613586, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(18084, 1384.962402, -21.226245, 1004.053466, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(18084, 1384.962402, -21.226245, 1004.053466, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(18084, 1376.723510, -21.226245, 1004.034240, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(2811, 1378.824707, -20.585840, 999.872924, 0.000000, 0.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(2811, 1378.814697, -32.545852, 999.872924, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(18084, 1376.723510, -21.226245, 1004.034240, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(18084, 1384.962402, -31.896265, 1004.043945, 0.000000, 0.000000, 360.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(18084, 1384.962402, -31.896265, 1004.043945, 0.000000, 0.000000, 360.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(18084, 1384.962402, -31.896265, 1001.603637, 0.000000, 0.000000, 360.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(18084, 1376.702514, -31.896265, 1004.013854, 0.000000, 0.000000, 360.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(18084, 1376.702514, -31.896265, 1004.013854, 0.000000, 0.000000, 360.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(2167, 1372.731689, -32.939338, 999.872924, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(2164, 1373.765136, -20.290769, 999.872924, 0.000000, 0.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(2174, 1374.612426, -21.193359, 999.872924, 0.000000, 0.000000, -90.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(2855, 1374.363525, -20.518230, 1001.292602, 0.000000, 0.000000, -1.499999, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(19942, 1374.886840, -20.450483, 1001.402709, 0.000000, 0.000000, -46.799999, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(2342, 1373.929199, -20.305795, 1001.422851, 0.000000, 0.000000, 90.599975, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(1210, 1374.713989, -21.274929, 1000.013061, 0.000000, 0.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(19792, 1374.445190, -21.986116, 1000.673095, 0.000000, 0.000000, -11.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(2922, 1372.145751, -22.716487, 1001.582702, 0.000000, 0.000000, -90.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(19807, 1374.712646, -29.968292, 1000.722900, 0.000000, 0.000000, -104.300003, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(18643, 1362.105346, -22.327289, 1000.167480, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(18643, 1362.105346, -22.327289, 1000.327636, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(18643, 1362.105346, -22.327289, 1000.497802, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(18643, 1362.105346, -22.327289, 1000.657958, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(18643, 1362.105346, -22.327289, 1000.838134, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(18643, 1362.105346, -22.327289, 1001.018310, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(18643, 1362.105346, -22.327289, 1001.208496, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(18643, 1362.105346, -22.327289, 1001.398681, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(18643, 1362.105346, -22.327289, 1001.618835, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(18643, 1362.105346, -22.327289, 1001.618835, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(18643, 1362.105346, -22.327289, 1001.819030, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(18643, 1362.105346, -22.327289, 1002.019226, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(18643, 1362.105346, -22.327289, 1002.189392, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(18643, 1362.105346, -22.327289, 1002.379577, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(18643, 1362.105346, -22.327289, 1002.549743, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(18643, 1362.105346, -22.327289, 1002.719848, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(18643, 1362.105346, -22.327289, 1002.899963, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(18643, 1362.105346, -22.327289, 1003.080139, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(18643, 1362.105346, -22.327289, 1003.270324, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(18643, 1362.105346, -22.327289, 1003.480529, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(18643, 1362.105346, -22.327289, 1003.650695, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(18643, 1362.105346, -22.327289, 1003.830871, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(18643, 1362.105346, -22.327289, 1004.031066, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(18643, 1362.105346, -22.327289, 1004.251281, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(18643, 1362.105346, -22.327289, 999.960876, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(2332, 1355.782836, -13.954963, 1000.318054, 0.000000, 0.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(2332, 1354.912475, -13.954963, 1000.318054, 0.000000, 0.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(2332, 1354.051879, -13.954963, 1000.318054, 0.000000, 0.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(2332, 1354.051879, -13.954963, 1001.248596, 0.000000, 0.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(2332, 1355.773315, -13.954963, 1001.248596, 0.000000, 0.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(2332, 1354.922607, -13.954963, 1001.248596, 0.000000, 0.000000, 0.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(2886, 1362.083374, -23.031396, 1001.362731, 0.000000, 0.000000, 360.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(2332, 1361.192138, -16.254962, 1000.318054, 0.000000, 0.000000, 270.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(2332, 1361.192138, -17.114965, 1000.318054, 0.000000, 0.000000, 270.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(2332, 1361.192138, -17.994970, 1000.318054, 0.000000, 0.000000, 270.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(2332, 1361.192138, -18.864982, 1000.318054, 0.000000, 0.000000, 270.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(2332, 1361.192138, -16.254980, 1001.248657, 0.000000, 0.000000, 270.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(2332, 1361.192138, -17.134990, 1001.248657, 0.000000, 0.000000, 270.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(19808, 1374.707763, -29.470556, 1000.663024, 0.000000, 0.000000, -98.499984, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(19808, 1374.324951, -30.468904, 1000.663024, 0.000000, 0.000000, -132.400009, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(19623, 1357.483032, -21.696607, 1003.937988, 0.000000, 0.000000, 180.000000, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(19623, 1361.713012, -21.556610, 1003.937988, 0.000000, 0.000000, -97.100028, -1, -1, -1, 200.00, 200.00);
	tmpobjid = CreateDynamicObject(19623, 1352.112182, -13.379225, 1004.044372, 0.000000, 0.000000, 0.000000, -1, -1, -1, 200.00, 200.00); 
    
    //emshq ext
    tmpobjid = CreateDynamicObject(19313, -2016.992309, 47.661003, 32.771965, 0.000000, 0.000000, 628.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(18766, -2040.750366, 78.131332, 40.555702, 90.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(18766, -2040.750366, 73.631340, 40.555702, 90.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(3361, -2040.643066, 70.132995, 38.961265, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "shingles2", 0x00000000);
    tmpobjid = CreateDynamicObject(983, -2035.833618, 83.826660, 41.674270, 0.000000, 0.000000, 362.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(1472, -2043.174926, 69.891342, 36.825618, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "shingles2", 0x00000000);
    tmpobjid = CreateDynamicObject(983, -2035.763793, 77.416641, 41.674270, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
    tmpobjid = CreateDynamicObject(983, -2035.763793, 72.356643, 41.674270, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
    tmpobjid = CreateDynamicObject(983, -2048.663574, 80.696655, 41.674270, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(983, -2048.663574, 74.326637, 41.674270, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(983, -2045.453735, 71.136642, 41.674270, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
    tmpobjid = CreateDynamicObject(983, -2040.863769, 71.136642, 41.674270, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
    tmpobjid = CreateDynamicObject(19124, -2035.784912, 69.086570, 42.255699, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(19353, -2042.934936, 68.969413, 36.945343, 90.000000, 90.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "ws_carpark2", 0x00000000);
    tmpobjid = CreateDynamicObject(19353, -2048.096435, 70.721397, 36.845329, 90.000000, 90.000000, 266.599975, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "ws_carpark2", 0x00000000);
    tmpobjid = CreateDynamicObject(10183, -2065.191650, 69.342468, 27.600624, 0.000000, 0.000000, 136.110000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "dt_carpark_line_texture", 0x00000000);
    tmpobjid = CreateDynamicObject(18765, -2053.370361, 52.814350, 25.211624, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(18765, -2063.370361, 52.814350, 25.211624, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(18765, -2065.370361, 62.814350, 25.211624, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(19353, -2037.485107, 69.001396, 40.545349, 90.000000, 90.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "ws_carpark2", 0x00000000);
    tmpobjid = CreateDynamicObject(18765, -2065.370361, 72.814346, 25.211624, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(18765, -2065.370361, 82.814346, 25.211624, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(18765, -2065.370361, 52.814350, 25.211624, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(18765, -2065.370361, 92.814346, 25.211624, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(18765, -2065.370361, 94.814346, 25.211624, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(18765, -2053.370361, 62.814350, 25.211624, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(18765, -2053.370361, 72.814346, 25.211624, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(18765, -2053.370361, 82.814346, 25.211624, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(18765, -2053.370361, 93.814346, 25.211624, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(18765, -2032.370361, 93.314353, 25.211624, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(18765, -2044.370361, 93.314353, 25.211624, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(18765, -2042.370361, 93.314353, 25.211624, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(18765, -2056.370361, 93.814346, 25.211624, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(18765, -2056.370361, 91.814346, 25.211624, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(18765, -2053.370361, 83.814346, 25.211624, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(18765, -2052.370361, 84.814346, 25.211624, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(18765, -2052.370361, 75.814346, 25.211624, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(18765, -2063.370361, 81.814346, 25.211624, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(18765, -2063.370361, 71.814346, 25.211624, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(18765, -2063.370361, 61.814346, 25.211624, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(18765, -2052.370361, 67.514350, 25.211624, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(18765, -2051.370361, 67.514350, 25.211624, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(18766, -2043.630371, 78.131332, 40.555702, 90.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(18766, -2043.630493, 78.131332, 39.555702, 90.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(18766, -2043.630371, 83.131332, 40.555702, 90.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(18766, -2043.630493, 83.131332, 39.555702, 90.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(18766, -2043.630493, 88.131332, 39.555702, 90.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(18766, -2043.630371, 88.131332, 40.555702, 90.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(18766, -2043.630493, 73.631340, 39.555702, 90.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(18766, -2043.630371, 73.631340, 40.555702, 90.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(18766, -2040.750366, 83.131332, 40.555702, 90.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(18766, -2040.750366, 88.131332, 40.555702, 90.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(18766, -2040.750366, 93.131332, 40.555702, 90.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(18766, -2040.750366, 94.431335, 40.555702, 90.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(18766, -2043.750366, 94.431335, 40.555702, 90.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(18766, -2043.530517, 93.131332, 39.555702, 90.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(18766, -2043.630493, 94.431327, 39.555702, 90.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(18766, -2043.650390, 90.431335, 40.555702, 90.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(983, -2048.663574, 87.126655, 41.674270, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(983, -2048.663574, 93.526649, 41.674270, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(983, -2045.463623, 96.726646, 41.674270, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(983, -2039.063720, 96.726646, 41.674270, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(983, -2035.883666, 93.526649, 41.674270, 0.000000, 0.000000, 360.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(983, -2035.883666, 87.126655, 41.674270, 0.000000, 0.000000, 360.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(1472, -2043.174926, 71.391342, 36.825618, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "shingles2", 0x00000000);
    tmpobjid = CreateDynamicObject(1472, -2043.974975, 71.391342, 36.225616, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "shingles2", 0x00000000);
    tmpobjid = CreateDynamicObject(1472, -2043.974975, 69.871337, 36.225616, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "shingles2", 0x00000000);
    tmpobjid = CreateDynamicObject(1472, -2044.794799, 69.871337, 35.655605, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "shingles2", 0x00000000);
    tmpobjid = CreateDynamicObject(1472, -2044.794799, 71.371337, 35.655605, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "shingles2", 0x00000000);
    tmpobjid = CreateDynamicObject(19353, -2042.934936, 68.969413, 33.745349, 90.000000, 90.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "ws_carpark2", 0x00000000);
    tmpobjid = CreateDynamicObject(19353, -2046.434814, 68.969413, 33.745349, 90.000000, 90.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "ws_carpark2", 0x00000000);
    tmpobjid = CreateDynamicObject(19353, -2046.434814, 68.969413, 36.945343, 90.000000, 90.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "ws_carpark2", 0x00000000);
    tmpobjid = CreateDynamicObject(19353, -2037.485107, 69.001396, 37.315368, 90.000000, 90.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "ws_carpark2", 0x00000000);
    tmpobjid = CreateDynamicObject(19353, -2037.485107, 69.001396, 34.115375, 90.000000, 90.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "ws_carpark2", 0x00000000);
    tmpobjid = CreateDynamicObject(19353, -2039.485107, 68.999397, 34.115375, 90.000000, 90.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "ws_carpark2", 0x00000000);
    tmpobjid = CreateDynamicObject(19353, -2040.485107, 69.000396, 37.315368, 90.000000, 90.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "ws_carpark2", 0x00000000);
    tmpobjid = CreateDynamicObject(19353, -2040.485107, 68.998397, 40.545349, 90.000000, 90.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "ws_carpark2", 0x00000000);
    tmpobjid = CreateDynamicObject(19353, -2043.485107, 68.995399, 40.525348, 90.000000, 90.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "ws_carpark2", 0x00000000);
    tmpobjid = CreateDynamicObject(19353, -2043.485107, 69.000396, 37.315368, 90.000000, 90.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "ws_carpark2", 0x00000000);
    tmpobjid = CreateDynamicObject(19353, -2046.485107, 68.995399, 40.525348, 90.000000, 90.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "ws_carpark2", 0x00000000);
    tmpobjid = CreateDynamicObject(19353, -2046.485107, 68.992401, 39.525348, 90.000000, 90.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "ws_carpark2", 0x00000000);
    tmpobjid = CreateDynamicObject(19353, -2048.166503, 70.721397, 39.445331, 90.000000, 90.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "ws_carpark2", 0x00000000);
    tmpobjid = CreateDynamicObject(19353, -2035.776123, 70.721397, 37.245338, 90.000000, 90.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "ws_carpark2", 0x00000000);
    tmpobjid = CreateDynamicObject(19353, -2035.778076, 70.721397, 39.395336, 90.000000, 90.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "ws_carpark2", 0x00000000);
    tmpobjid = CreateDynamicObject(19353, -2035.778076, 70.721397, 36.245338, 90.000000, 90.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "ws_carpark2", 0x00000000);
    tmpobjid = CreateDynamicObject(987, -2075.533203, 52.192424, 32.196781, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(987, -2075.550781, 40.313255, 32.251884, 0.000000, 0.000000, 1.990000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(987, -2075.533203, 64.192428, 32.196781, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(987, -2075.533203, 76.192428, 32.196781, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(987, -2075.533203, 88.192428, 32.196781, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(987, -2075.533203, 100.142417, 32.196781, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19354, -2027.203735, 96.751808, 28.877433, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19313, -2023.702270, 62.581001, 28.971960, 0.000000, 0.000000, 539.729858, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(11243, -2056.874755, 69.337814, 31.898576, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3934, -2042.635742, 77.689987, 41.042644, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3934, -2042.635742, 90.689987, 41.042644, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19124, -2035.885375, 96.666580, 42.255699, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19124, -2048.680908, 96.716575, 42.255699, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19124, -2048.624755, 71.136573, 42.255699, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(1500, -2045.942138, 71.062614, 35.964962, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(10183, -2051.222900, 89.159561, 27.711624, 0.000000, 0.000000, -44.500003, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19467, -2048.405273, 60.477478, 27.068622, 206.000000, 360.000000, 630.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19467, -2048.405273, 56.235477, 27.068622, 206.000000, 360.000000, 630.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19467, -2048.405273, 52.005481, 27.068622, 206.000000, 360.000000, 630.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19467, -2048.405273, 47.775485, 27.068622, 206.000000, 360.000000, 630.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(10183, -2065.204589, 69.525566, 27.711624, 0.000000, 0.000000, 135.799987, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(10183, -2065.434814, 109.625564, 27.711624, 0.000000, 0.000000, 135.799987, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(1290, -2047.211181, 84.696197, 27.711624, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(1290, -2047.211181, 91.996192, 27.591621, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(1290, -2047.211181, 75.696197, 27.591621, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(1223, -2036.777343, 62.812683, 28.190624, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(1223, -2047.977416, 62.612678, 28.190624, 0.000000, 0.000000, 225.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(1223, -2026.777343, 62.812683, 28.190624, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(966, -2016.720825, 61.942173, 28.651857, 0.000000, 7.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    
    // mall (SF)
    tmpobjid = CreateDynamicObject(18754, -2045.764648, -842.586975, 30.428541, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 8486, "ballys02", "Grass_concpath_128HV", 0x00000000);
    tmpobjid = CreateDynamicObject(18754, -2045.764648, -882.586975, 30.426540, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 8486, "ballys02", "Grass_concpath_128HV", 0x00000000);
    tmpobjid = CreateDynamicObject(19176, -2001.023315, -786.962951, 30.883434, 90.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "ws_carpark2", 0x00000000);
    tmpobjid = CreateDynamicObject(19176, -2001.023315, -788.962951, 30.883434, 90.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "ws_carpark2", 0x00000000);
    tmpobjid = CreateDynamicObject(19176, -2001.023315, -790.962951, 30.883434, 90.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "ws_carpark2", 0x00000000);
    tmpobjid = CreateDynamicObject(19176, -2001.023315, -792.962951, 30.883434, 90.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "ws_carpark2", 0x00000000);
    tmpobjid = CreateDynamicObject(19176, -2001.023315, -794.962951, 30.883434, 90.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "ws_carpark2", 0x00000000);
    tmpobjid = CreateDynamicObject(19176, -2001.023315, -796.962951, 30.883434, 90.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "ws_carpark2", 0x00000000);
    tmpobjid = CreateDynamicObject(19176, -2001.023315, -798.962951, 30.883434, 90.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "ws_carpark2", 0x00000000);
    tmpobjid = CreateDynamicObject(19176, -2001.023315, -799.962951, 30.883434, 90.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "ws_carpark2", 0x00000000);
    tmpobjid = CreateDynamicObject(8650, -2009.129882, -801.142395, 31.023437, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "ws_carpark2", 0x00000000);
    tmpobjid = CreateDynamicObject(8650, -2009.169921, -785.172424, 31.023437, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "ws_carpark2", 0x00000000);
    tmpobjid = CreateDynamicObject(19176, -1998.023315, -799.962951, 30.883434, 90.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "ws_carpark2", 0x00000000);
    tmpobjid = CreateDynamicObject(19176, -1998.023315, -797.962951, 30.883434, 90.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "ws_carpark2", 0x00000000);
    tmpobjid = CreateDynamicObject(19176, -1998.023315, -795.962951, 30.883434, 90.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "ws_carpark2", 0x00000000);
    tmpobjid = CreateDynamicObject(19176, -1998.023315, -793.962951, 30.883434, 90.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "ws_carpark2", 0x00000000);
    tmpobjid = CreateDynamicObject(19176, -1998.023315, -791.962951, 30.883434, 90.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "ws_carpark2", 0x00000000);
    tmpobjid = CreateDynamicObject(19176, -1998.023315, -789.962951, 30.883434, 90.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "ws_carpark2", 0x00000000);
    tmpobjid = CreateDynamicObject(19176, -1998.023315, -787.962951, 30.883434, 90.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "ws_carpark2", 0x00000000);
    tmpobjid = CreateDynamicObject(19176, -1998.023315, -786.962951, 30.883434, 90.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "ws_carpark2", 0x00000000);
    tmpobjid = CreateDynamicObject(19176, -1995.023315, -786.962951, 30.883434, 90.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "ws_carpark2", 0x00000000);
    tmpobjid = CreateDynamicObject(19176, -1995.023315, -788.962951, 30.883434, 90.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "ws_carpark2", 0x00000000);
    tmpobjid = CreateDynamicObject(19176, -1995.023315, -790.962951, 30.883434, 90.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "ws_carpark2", 0x00000000);
    tmpobjid = CreateDynamicObject(19176, -1995.023315, -792.962951, 30.883434, 90.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "ws_carpark2", 0x00000000);
    tmpobjid = CreateDynamicObject(19176, -1995.023315, -794.962951, 30.883434, 90.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "ws_carpark2", 0x00000000);
    tmpobjid = CreateDynamicObject(19176, -1995.023315, -796.962951, 30.883434, 90.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "ws_carpark2", 0x00000000);
    tmpobjid = CreateDynamicObject(19176, -1995.023315, -798.962951, 30.883434, 90.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "ws_carpark2", 0x00000000);
    tmpobjid = CreateDynamicObject(19176, -1995.023315, -799.962951, 30.883434, 90.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "ws_carpark2", 0x00000000);
    tmpobjid = CreateDynamicObject(8661, -1996.581420, -726.876220, 31.019437, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "desgreengrass", 0x00000000);
    tmpobjid = CreateDynamicObject(8661, -1996.581420, -746.876220, 31.019437, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "desgreengrass", 0x00000000);
    tmpobjid = CreateDynamicObject(8661, -1996.581420, -766.876220, 31.019437, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "desgreengrass", 0x00000000);
    tmpobjid = CreateDynamicObject(8661, -1996.581420, -774.876220, 31.017438, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "desgreengrass", 0x00000000);
    tmpobjid = CreateDynamicObject(8661, -1996.581420, -810.876220, 31.017438, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "desgreengrass", 0x00000000);
    tmpobjid = CreateDynamicObject(8661, -1996.581420, -830.876220, 31.017438, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "desgreengrass", 0x00000000);
    tmpobjid = CreateDynamicObject(8661, -1996.581420, -850.876220, 31.017438, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "desgreengrass", 0x00000000);
    tmpobjid = CreateDynamicObject(8661, -1996.581420, -850.876220, 31.017438, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "desgreengrass", 0x00000000);
    tmpobjid = CreateDynamicObject(8661, -1996.581420, -870.876220, 31.017438, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "desgreengrass", 0x00000000);
    tmpobjid = CreateDynamicObject(19325, -2002.450561, -777.901123, 32.223434, 0.000000, 362.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(19325, -2002.450561, -767.901123, 32.223434, 0.000000, 362.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(19325, -2002.450561, -757.901123, 32.223434, 0.000000, 362.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(19325, -2002.450561, -747.901123, 32.223434, 0.000000, 362.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(19325, -2002.450561, -737.401123, 32.223434, 0.000000, 362.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
    tmpobjid = CreateDynamicObject(6048, -2070.745605, -793.635070, 51.123435, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(6130, -2070.750000, -793.624633, 51.130435, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19425, -2002.251098, -787.145263, 30.953746, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19425, -2002.251098, -790.255371, 30.953746, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19425, -2002.251098, -793.345397, 30.953746, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19425, -2002.251098, -796.435424, 30.953746, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19425, -2002.251098, -799.615478, 30.953746, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(638, -1995.966186, -785.187011, 32.823749, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(638, -2000.466308, -785.187011, 32.823749, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(1568, -1998.159545, -785.200988, 31.928541, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(638, -2000.466308, -801.156982, 32.823749, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(1568, -1998.159545, -801.121032, 31.928541, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(638, -1995.966186, -801.156982, 32.823749, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3586, -2059.354736, -780.207458, 36.645263, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3586, -2059.354736, -805.607360, 36.645263, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(6051, -2077.980712, -792.724914, 37.333129, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3509, -1997.645385, -729.640747, 30.023437, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3509, -1997.645385, -744.640747, 30.023437, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3509, -1997.645385, -759.640747, 30.023437, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3509, -1997.645385, -774.640747, 30.023437, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3509, -1997.645385, -809.640747, 30.023437, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3509, -1997.645385, -824.640747, 30.023437, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3509, -1997.645385, -839.640747, 30.023437, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3509, -1997.645385, -854.640747, 30.023437, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    
    //pizzavehicles ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObject(19310,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterial(tmpobjid, 0, 19063, "xmasorbs", "foil2-128x128", 0);
    SetDynamicObjectMaterial(tmpobjid, 1, 10101, "2notherbuildsfe", "ferry_build14", 0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "PIZZA", 20, "Ariel", 20, 0, -1, -4980736, 1);
    AttachDynamicObjectToVehicle(tmpobjid, pizzaVehicles[0], 0.000, 1.000, 1.170, 0.000, 0.000, 90.000);
    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar ", 20, "Ariel", 18, 1, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, pizzaVehicles[0], 0.909, -1.200, 0.650, 90.000, 0.000, 90.000);
    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar ", 20, "Ariel", 18, 1, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, pizzaVehicles[0], -0.905, -1.200, 0.650, 90.000, 0.000, 270.000);
    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Roleplay", 50, "Webdings", 18, 0, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, pizzaVehicles[0], 0.950, -0.400, 0.119, 90.000, 0.000, 90.000);
    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Roleplay", 50, "Webdings", 18, 0, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, pizzaVehicles[0], -0.969, -0.400, 0.119, 90.000, 0.000, 270.000);

    tmpobjid = CreateDynamicObject(19310,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterial(tmpobjid, 0, 19063, "xmasorbs", "foil2-128x128", 0);
    SetDynamicObjectMaterial(tmpobjid, 1, 10101, "2notherbuildsfe", "ferry_build14", 0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "PIZZA", 20, "Ariel", 20, 0, -1, -4980736, 1);
    AttachDynamicObjectToVehicle(tmpobjid, pizzaVehicles[1], 0.000, 1.000, 1.170, 0.000, 0.000, 90.000);
    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar ", 20, "Ariel", 18, 1, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, pizzaVehicles[1], 0.909, -1.200, 0.650, 90.000, 0.000, 90.000);
    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar ", 20, "Ariel", 18, 1, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, pizzaVehicles[1], -0.905, -1.200, 0.650, 90.000, 0.000, 270.000);
    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Roleplay", 50, "Webdings", 18, 0, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, pizzaVehicles[1], 0.950, -0.400, 0.119, 90.000, 0.000, 90.000);
    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Roleplay", 50, "Webdings", 18, 0, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, pizzaVehicles[1], -0.969, -0.400, 0.119, 90.000, 0.000, 270.000);

    tmpobjid = CreateDynamicObject(19310,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterial(tmpobjid, 0, 19063, "xmasorbs", "foil2-128x128", 0);
    SetDynamicObjectMaterial(tmpobjid, 1, 10101, "2notherbuildsfe", "ferry_build14", 0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "PIZZA", 20, "Ariel", 20, 0, -1, -4980736, 1);
    AttachDynamicObjectToVehicle(tmpobjid, pizzaVehicles[2], 0.000, 1.000, 1.170, 0.000, 0.000, 90.000);
    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar ", 20, "Ariel", 18, 1, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, pizzaVehicles[2], 0.909, -1.200, 0.650, 90.000, 0.000, 90.000);
    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar ", 20, "Ariel", 18, 1, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, pizzaVehicles[2], -0.905, -1.200, 0.650, 90.000, 0.000, 270.000);
    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Roleplay", 50, "Webdings", 18, 0, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, pizzaVehicles[2], 0.950, -0.400, 0.119, 90.000, 0.000, 90.000);
    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Roleplay", 50, "Webdings", 18, 0, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, pizzaVehicles[2], -0.969, -0.400, 0.119, 90.000, 0.000, 270.000);

    tmpobjid = CreateDynamicObject(19310,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterial(tmpobjid, 0, 19063, "xmasorbs", "foil2-128x128", 0);
    SetDynamicObjectMaterial(tmpobjid, 1, 10101, "2notherbuildsfe", "ferry_build14", 0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "PIZZA", 20, "Ariel", 20, 0, -1, -4980736, 1);
    AttachDynamicObjectToVehicle(tmpobjid, pizzaVehicles[3], 0.000, 1.000, 1.170, 0.000, 0.000, 90.000);
    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar ", 20, "Ariel", 18, 1, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, pizzaVehicles[3], 0.909, -1.200, 0.650, 90.000, 0.000, 90.000);
    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar ", 20, "Ariel", 18, 1, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, pizzaVehicles[3], -0.905, -1.200, 0.650, 90.000, 0.000, 270.000);
    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Roleplay", 50, "Webdings", 18, 0, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, pizzaVehicles[3], 0.950, -0.400, 0.119, 90.000, 0.000, 90.000);
    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Roleplay", 50, "Webdings", 18, 0, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, pizzaVehicles[3], -0.969, -0.400, 0.119, 90.000, 0.000, 270.000);

    tmpobjid = CreateDynamicObject(19310,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterial(tmpobjid, 0, 19063, "xmasorbs", "foil2-128x128", 0);
    SetDynamicObjectMaterial(tmpobjid, 1, 10101, "2notherbuildsfe", "ferry_build14", 0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "PIZZA", 20, "Ariel", 20, 0, -1, -4980736, 1);
    AttachDynamicObjectToVehicle(tmpobjid, pizzaVehicles[4], 0.000, 1.000, 1.170, 0.000, 0.000, 90.000);
    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar ", 20, "Ariel", 18, 1, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, pizzaVehicles[4], 0.909, -1.200, 0.650, 90.000, 0.000, 90.000);
    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar ", 20, "Ariel", 18, 1, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, pizzaVehicles[4], -0.905, -1.200, 0.650, 90.000, 0.000, 270.000);
    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Roleplay", 50, "Webdings", 18, 0, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, pizzaVehicles[4], 0.950, -0.400, 0.119, 90.000, 0.000, 90.000);
    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Roleplay", 50, "Webdings", 18, 0, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, pizzaVehicles[4], -0.969, -0.400, 0.119, 90.000, 0.000, 270.000);
    
    //taxivehicles
    tmpobjid = CreateDynamicObject(1100,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    AttachDynamicObjectToVehicle(tmpobjid, taxiVehicles[0], 0.000, -0.289, -0.700, 14.500, 0.000, 0.000);
    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "Bow_Abpave_Gen", 0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar RP", 50, "Ariel", 20, 0, -4980736, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, taxiVehicles[0], 0.000, 2.539, -0.109, 90.000, 0.000, 180.000);

    tmpobjid = CreateDynamicObject(1100,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    AttachDynamicObjectToVehicle(tmpobjid, taxiVehicles[1], 0.000, -0.289, -0.700, 14.500, 0.000, 0.000);
    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "Bow_Abpave_Gen", 0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar RP", 50, "Ariel", 20, 0, -4980736, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, taxiVehicles[1], 0.000, 2.539, -0.109, 90.000, 0.000, 180.000);

    tmpobjid = CreateDynamicObject(1100,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    AttachDynamicObjectToVehicle(tmpobjid, taxiVehicles[2], 0.000, -0.289, -0.700, 14.500, 0.000, 0.000);
    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "Bow_Abpave_Gen", 0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar RP", 50, "Ariel", 20, 0, -4980736, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, taxiVehicles[2], 0.000, 2.539, -0.109, 90.000, 0.000, 180.000);

    tmpobjid = CreateDynamicObject(1100,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    AttachDynamicObjectToVehicle(tmpobjid, taxiVehicles[3], 0.000, -0.289, -0.700, 14.500, 0.000, 0.000);
    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "Bow_Abpave_Gen", 0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar RP", 50, "Ariel", 20, 0, -4980736, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, taxiVehicles[3], 0.000, 2.539, -0.109, 90.000, 0.000, 180.000);
    
    /*tmpobjid = CreateDynamicObject(1100,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    AttachDynamicObjectToVehicle(tmpobjid, taxiVehicles[4], 0.000, -0.289, -0.700, 14.500, 0.000, 0.000);
    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "Bow_Abpave_Gen", 0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar RP", 50, "Ariel", 20, 0, -4980736, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, taxiVehicles[0], 0.000, 2.539, -0.109, 90.000, 0.000, 180.000);
    
    tmpobjid = CreateDynamicObject(1100,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    AttachDynamicObjectToVehicle(tmpobjid, taxiVehicles[5], 0.000, -0.289, -0.700, 14.500, 0.000, 0.000);
    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterial(tmpobjid, 0, 10101, "2notherbuildsfe", "Bow_Abpave_Gen", 0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar RP", 50, "Ariel", 20, 0, -4980736, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, taxiVehicles[0], 0.000, 2.539, -0.109, 90.000, 0.000, 180.000);*/
    //courierVehicles
    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar ", 40, "Calibri", 27, 1, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, courierVehicles[0], 1.159, -0.120, -0.200, 90.000, 0.000, 90.000);
    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar ", 40, "Calibri", 27, 1, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, courierVehicles[0], 0.000, 0.000, 0.000, 0.000, 0.000, 0.000);
    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar ", 40, "Calibri", 27, 1, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, courierVehicles[0], -1.340, -0.120, -0.200, 90.000, 0.000, 270.000);
    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "TRUCKER", 40, "Calibri", 24, 1, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, courierVehicles[0], 0.000, 2.320, 1.629, 90.000, 0.000, 180.000);

    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar ", 40, "Calibri", 27, 1, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, courierVehicles[1], 1.159, -0.120, -0.200, 90.000, 0.000, 90.000);
    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar ", 40, "Calibri", 27, 1, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, courierVehicles[1], 0.000, 0.000, 0.000, 0.000, 0.000, 0.000);
    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar ", 40, "Calibri", 27, 1, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, courierVehicles[1], -1.340, -0.120, -0.200, 90.000, 0.000, 270.000);
    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "TRUCKER", 40, "Calibri", 24, 1, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, courierVehicles[1], 0.000, 2.320, 1.629, 90.000, 0.000, 180.000);

    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar ", 40, "Calibri", 27, 1, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, courierVehicles[2], 1.159, -0.120, -0.200, 90.000, 0.000, 90.000);
    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar ", 40, "Calibri", 27, 1, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, courierVehicles[2], 0.000, 0.000, 0.000, 0.000, 0.000, 0.000);
    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar ", 40, "Calibri", 27, 1, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, courierVehicles[2], -1.340, -0.120, -0.200, 90.000, 0.000, 270.000);
    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "TRUCKER", 40, "Calibri", 24, 1, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, courierVehicles[2], 0.000, 2.320, 1.629, 90.000, 0.000, 180.000);

    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar ", 40, "Calibri", 27, 1, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, courierVehicles[3], 1.159, -0.120, -0.200, 90.000, 0.000, 90.000);
    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar ", 40, "Calibri", 27, 1, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, courierVehicles[3], 0.000, 0.000, 0.000, 0.000, 0.000, 0.000);
    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar ", 40, "Calibri", 27, 1, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, courierVehicles[3], -1.340, -0.120, -0.200, 90.000, 0.000, 270.000);
    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "TRUCKER", 40, "Calibri", 24, 1, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, courierVehicles[3], 0.000, 2.320, 1.629, 90.000, 0.000, 180.000);

    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar ", 40, "Calibri", 27, 1, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, courierVehicles[4], 1.159, -0.120, -0.200, 90.000, 0.000, 90.000);
    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar ", 40, "Calibri", 27, 1, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, courierVehicles[4], 0.000, 0.000, 0.000, 0.000, 0.000, 0.000);
    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar ", 40, "Calibri", 27, 1, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, courierVehicles[4], -1.340, -0.120, -0.200, 90.000, 0.000, 270.000);
    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "TRUCKER", 40, "Calibri", 24, 1, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, courierVehicles[4], 0.000, 2.320, 1.629, 90.000, 0.000, 180.000);

    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar ", 40, "Calibri", 27, 1, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, courierVehicles[5], 1.159, -0.120, -0.200, 90.000, 0.000, 90.000);
    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar ", 40, "Calibri", 27, 1, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, courierVehicles[5], 0.000, 0.000, 0.000, 0.000, 0.000, 0.000);
    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar ", 40, "Calibri", 27, 1, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, courierVehicles[5], -1.340, -0.120, -0.200, 90.000, 0.000, 270.000);
    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "TRUCKER", 40, "Calibri", 24, 1, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, courierVehicles[5], 0.000, 2.320, 1.629, 90.000, 0.000, 180.000);

    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar ", 40, "Calibri", 27, 1, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, courierVehicles[6], 1.159, -0.120, -0.200, 90.000, 0.000, 90.000);
    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar ", 40, "Calibri", 27, 1, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, courierVehicles[6], 0.000, 0.000, 0.000, 0.000, 0.000, 0.000);
    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar ", 40, "Calibri", 27, 1, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, courierVehicles[6], -1.340, -0.120, -0.200, 90.000, 0.000, 270.000);
    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "TRUCKER", 40, "Calibri", 24, 1, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, courierVehicles[6], 0.000, 2.320, 1.629, 90.000, 0.000, 180.000);

    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar ", 40, "Calibri", 27, 1, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, courierVehicles[7], 1.159, -0.120, -0.200, 90.000, 0.000, 90.000);
    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar ", 40, "Calibri", 27, 1, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, courierVehicles[7], 0.000, 0.000, 0.000, 0.000, 0.000, 0.000);
    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar ", 40, "Calibri", 27, 1, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, courierVehicles[7], -1.340, -0.120, -0.200, 90.000, 0.000, 270.000);
    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "TRUCKER", 40, "Calibri", 24, 1, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, courierVehicles[7], 0.000, 2.320, 1.629, 90.000, 0.000, 180.000);

    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar ", 40, "Calibri", 27, 1, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, courierVehicles[8], 1.159, -0.120, -0.200, 90.000, 0.000, 90.000);
    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar ", 40, "Calibri", 27, 1, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, courierVehicles[8], 0.000, 0.000, 0.000, 0.000, 0.000, 0.000);
    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar ", 40, "Calibri", 27, 1, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, courierVehicles[8], -1.340, -0.120, -0.200, 90.000, 0.000, 270.000);
    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "TRUCKER", 40, "Calibri", 24, 1, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, courierVehicles[8], 0.000, 2.320, 1.629, 90.000, 0.000, 180.000);

    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar ", 40, "Calibri", 27, 1, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, courierVehicles[9], 1.159, -0.120, -0.200, 90.000, 0.000, 90.000);
    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar ", 40, "Calibri", 27, 1, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, courierVehicles[9], 0.000, 0.000, 0.000, 0.000, 0.000, 0.000);
    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "Alcazar ", 40, "Calibri", 27, 1, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, courierVehicles[9], -1.340, -0.120, -0.200, 90.000, 0.000, 270.000);
    tmpobjid = CreateDynamicObject(19843,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
    SetDynamicObjectMaterialText(tmpobjid, 0, "TRUCKER", 40, "Calibri", 24, 1, -1, 0, 1);
    AttachDynamicObjectToVehicle(tmpobjid, courierVehicles[9], 0.000, 2.320, 1.629, 90.000, 0.000, 180.000);

	//Mech (SF)////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObjectEx(987, -1732.102539, -169.184204, 2.554687, 0.000000, 0.000000, 44.699947, 300.00, 300.00); 
    tmpobjid = CreateDynamicObjectEx(987, -1740.625122, -177.617980, 2.554687, 0.000000, 0.000000, 44.699947, 300.00, 300.00); 
    tmpobjid = CreateDynamicObjectEx(987, -1749.133789, -186.037780, 2.554687, 0.000000, 0.000000, 44.699947, 300.00, 300.00); 
    tmpobjid = CreateDynamicObjectEx(987, -1760.769042, -186.155059, 2.554687, 0.000000, 0.000000, 0.099941, 300.00, 300.00); 
    tmpobjid = CreateDynamicObjectEx(987, -1772.690917, -186.175628, 2.554687, 0.000000, 0.000000, 0.099941, 300.00, 300.00); 
    tmpobjid = CreateDynamicObjectEx(987, -1772.823730, -173.917922, 2.554687, 0.000000, 0.000000, -87.700057, 300.00, 300.00); 
    tmpobjid = CreateDynamicObjectEx(987, -1770.816284, -162.304046, 2.554687, 0.000000, 0.000000, -97.700057, 300.00, 300.00); 
    tmpobjid = CreateDynamicObjectEx(987, -1769.208984, -150.422134, 2.554687, 0.000000, 0.000000, -97.700057, 300.00, 300.00); 
    tmpobjid = CreateDynamicObjectEx(987, -1767.600463, -138.530303, 2.554687, 0.000000, 0.000000, -97.700057, 300.00, 300.00); 
    tmpobjid = CreateDynamicObjectEx(987, -1765.991333, -126.639503, 2.554687, 0.000000, 0.000000, -97.700057, 300.00, 300.00); 
    tmpobjid = CreateDynamicObjectEx(987, -1755.188842, -126.677009, 2.554687, 0.000000, 0.000000, 179.299972, 300.00, 300.00); 
    tmpobjid = CreateDynamicObjectEx(3749, -1756.518920, -116.453865, 8.414695, 0.000000, 0.000000, -90.299980, 300.00, 300.00); 
    tmpobjid = CreateDynamicObjectEx(987, -1754.270996, -94.855812, 2.554687, 0.000000, 0.000000, -89.900039, 300.00, 300.00); 
    tmpobjid = CreateDynamicObjectEx(987, -1754.291381, -82.865844, 2.554687, 0.000000, 0.000000, -89.900039, 300.00, 300.00); 
    tmpobjid = CreateDynamicObjectEx(987, -1754.312988, -70.905838, 2.554687, 0.000000, 0.000000, -89.900039, 300.00, 300.00); 
    tmpobjid = CreateDynamicObjectEx(987, -1742.333740, -70.716827, 2.554687, 0.000000, 0.000000, -178.800064, 300.00, 300.00); 
    tmpobjid = CreateDynamicObjectEx(987, -1731.139770, -75.253234, 2.554687, 0.000000, 0.000000, 160.599929, 300.00, 300.00); 
    tmpobjid = CreateDynamicObjectEx(987, -1721.800048, -82.612785, 2.554687, 0.000000, 0.000000, 141.499908, 300.00, 300.00); 
    tmpobjid = CreateDynamicObjectEx(987, -1712.401733, -90.089179, 2.554687, 0.000000, 0.000000, 141.499908, 300.00, 300.00); 
    tmpobjid = CreateDynamicObjectEx(987, -1703.018066, -97.553146, 2.554687, 0.000000, 0.000000, 141.499908, 300.00, 300.00); 
    tmpobjid = CreateDynamicObjectEx(987, -1694.261596, -105.684928, 2.554687, 0.000000, 0.000000, 137.599822, 300.00, 300.00); 
    tmpobjid = CreateDynamicObjectEx(987, -1685.761718, -114.196716, 2.554687, 0.000000, 0.000000, 135.299804, 300.00, 300.00); 
    tmpobjid = CreateDynamicObjectEx(987, -1681.520507, -118.396125, 2.554687, 0.000000, 0.000000, 135.299804, 300.00, 300.00); 
    tmpobjid = CreateDynamicObjectEx(987, -1689.338378, -126.722351, 2.554687, 0.000000, 0.000000, 47.899841, 300.00, 300.00); 
    //Alcazarmech////////////////////////////////////////////////////////////////////////////////////////////////////////
    tmpobjid = CreateDynamicObject(2948, -1742.372924, -171.852020, 2.704687, 0.000000, 0.000000, 28.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 9514, "711_sfw", "ws_carpark2", 0x00000000);
    tmpobjid = CreateDynamicObject(19907, -1746.160766, -166.220977, 2.554687, 0.000000, 0.000000, -60.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2948, -1742.872924, -171.052017, 2.704687, 0.000000, 0.000000, 28.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(4505, 14.460900, -1347.329956, 11.679697, 0.000000, 0.000000, 35.145923, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(4504, 56.382801, -1531.449951, 6.726560, 0.000000, 0.000000, -7.879539, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2948, -1756.134033, -177.315032, 2.734684, 0.000000, 0.000000, 30.900011, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19398, -1749.739990, -171.668060, 4.004685, 0.000000, 0.000000, 30.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(1557, -1750.114135, -170.980178, 2.704685, 0.000000, 0.000000, -60.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19817, -1747.259765, -161.591339, 1.754686, 0.000000, 0.000000, 210.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19817, -1742.259765, -158.591339, 1.754686, 0.000000, 0.000000, 210.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(10281, -1747.329956, -155.813796, 9.521455, 0.000000, 0.000000, 209.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2007, -1755.328979, -177.386032, 2.664685, 0.000000, 0.000000, 124.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2007, -1755.328979, -177.386032, 4.064686, 0.000000, 0.000000, 124.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2007, -1754.789062, -178.126068, 4.064686, 0.000000, 0.000000, 124.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2007, -1754.789062, -178.126068, 2.664686, 0.000000, 0.000000, 124.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(1998, -1760.215454, -166.308975, 2.704685, 0.000000, 0.000000, 120.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(1806, -1761.011474, -165.407852, 2.704685, 0.000000, 0.000000, 200.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2639, -1752.455322, -168.224868, 3.304688, 0.000000, 0.000000, 120.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2639, -1751.255371, -170.224807, 3.304688, 0.000000, 0.000000, 120.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2639, -1754.255371, -165.224792, 3.304688, 0.000000, 0.000000, 120.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(1516, -1754.388671, -167.380142, 2.704685, 0.000000, 0.000000, 30.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(14826, -1735.541015, -161.081344, 3.324685, 0.000000, 0.000000, -55.400016, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2991, -1738.124877, -166.680831, 3.264686, 0.000000, 0.000000, 30.399997, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(1334, -1756.939697, -161.555450, 3.644686, 0.000000, 0.000000, 29.500000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(12957, -1767.910156, -165.863815, 3.284687, 0.000000, 0.000000, -174.499969, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(1358, -1767.935668, -169.897888, 3.156538, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(1098, -1738.688232, -167.932647, 4.450261, -3.299998, -1.000000, -53.499988, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(1085, -1736.770507, -166.817504, 4.394683, 0.000000, 0.000000, 119.599952, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(1080, -1737.692016, -167.380645, 4.424684, 0.000000, 0.000000, 120.600044, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(1010, -1736.995117, -165.602539, 3.884680, 0.000000, 0.000000, -59.000003, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(1008, -1737.908203, -166.053924, 3.904685, 0.000000, 0.000000, -59.899997, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(1009, -1738.753540, -166.600631, 3.934684, 0.000000, 0.000000, -56.599987, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(1010, -1739.647338, -167.038116, 3.914685, 0.000000, 0.000000, -58.199977, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3594, -1765.393920, -166.120468, 3.164685, 0.000000, 0.000000, -166.499984, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(849, -1767.873291, -159.676361, 2.754687, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(849, -1768.006103, -161.556411, 2.654685, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19898, -1755.203613, -159.158691, 2.554687, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19898, -1757.135498, -160.412719, 2.554687, 0.000000, 0.000000, 181.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(11705, -1760.942626, -166.747299, 3.467073, 0.000000, 0.000000, 145.399993, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19815, -1742.592651, -170.490951, 5.704686, 0.000000, 0.000000, 210.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19899, -1750.943847, -168.030380, 2.704684, 0.000000, 0.000000, 30.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19903, -1743.867065, -161.061645, 2.704685, 0.000000, 0.000000, 120.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(12947, -1717.691772, -113.769935, 2.554687, 0.000000, 0.000000, 140.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(16781, -1724.517944, -145.201522, 2.554687, 0.000000, 0.000000, 220.000000, -1, -1, -1, 300.00, 300.00); 

	// CITY HALL INTERIOR
	new opstinaintathlonezidg =CreateDynamicObject(19377, 630.03021, -113.12850, -75.60600,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonezid = CreateDynamicObject(19377, 666.62512, -84.33140, -73.28210,   0.00000, 0.00000, 80.00000);
	new opstinaintathlonezid1 =CreateDynamicObject(19377, 661.90118, -87.12520, -73.28210,   0.00000, 0.00000, 0.00000);
	new opstinaintathlonezid2 =CreateDynamicObject(19377, 674.51343, -88.87746, -73.28210,   0.00000, 0.00000, 40.00000);
	new opstinaintathlonezid3 =CreateDynamicObject(19377, 677.41028, -95.12473, -73.28210,   0.00000, 0.00000, 0.00000);
	new opstinaintathlonezid4 =CreateDynamicObject(19377, 674.45599, -103.24913, -73.28210,   0.00000, 0.00000, -40.00000);
	new opstinaintathlonezid5 =CreateDynamicObject(19377, 666.62512, -107.76390, -73.28210,   0.00000, 0.00000, -80.00000);
	new opstinaintathlonezid6 =CreateDynamicObject(19377, 661.90118, -104.71550, -73.28210,   0.00000, 0.00000, 0.00000);
	new opstinaintathlonezid7 =CreateDynamicObject(19377, 661.89948, -104.47710, -83.67000,   0.00000, 0.00000, 0.00000);
	new opstinaintathlonezid8 =CreateDynamicObject(19377, 661.89948, -87.37440, -83.67000,   0.00000, 0.00000, 0.00000);
	new opstinaintathlonezid9 =CreateDynamicObject(19377, 665.36133, -82.62030, -75.60600,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonezid10 =CreateDynamicObject(19377, 658.46655, -82.61582, -71.57480,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonezid11 =CreateDynamicObject(19377, 648.95477, -82.61580, -71.57480,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonezid12 =CreateDynamicObject(19396, 652.40198, -82.66890, -78.29890,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonezid13 =CreateDynamicObject(19377, 660.61700, -77.86745, -75.60600,   0.00000, 0.00000, 0.00000);
	new opstinaintathlonezid14 =CreateDynamicObject(19377, 655.88336, -73.11671, -75.60600,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonezid15 =CreateDynamicObject(19377, 646.28180, -73.11590, -75.60600,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonezid16 =CreateDynamicObject(19377, 644.20990, -77.89880, -75.60600,   0.00000, 0.00000, 0.00000);
	new opstinaintathlonezid17 =CreateDynamicObject(19377, 636.65820, -73.11586, -75.60600,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonezid18 =CreateDynamicObject(19377, 628.73895, -76.77615, -75.60600,   0.00000, 0.00000, -40.00000);
	new opstinaintathlonezid19 =CreateDynamicObject(19377, 625.60681, -85.31715, -75.60600,   0.00000, 0.00000, 0.00000);
	new opstinaintathlonezid20 =CreateDynamicObject(19377, 625.60681, -94.92460, -75.60600,   0.00000, 0.00000, 0.00000);
	new opstinaintathlonezid21 =CreateDynamicObject(19377, 625.60681, -104.55610, -75.60600,   0.00000, 0.00000, 0.00000);
	new opstinaintathlonezid22 =CreateDynamicObject(19377, 626.04303, -105.89893, -80.77422,   0.00000, 0.00000, 312.04071);
	new opstinaintathlonezid23 =CreateDynamicObject(19377, 628.85492, -109.00580, -80.77420,   0.00000, 0.00000, 312.04071);
	new opstinaintathlonezid24 =CreateDynamicObject(19377, 627.27020, -109.58454, -75.60600,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonezid25 =CreateDynamicObject(19377, 632.03192, -114.32162, -75.60600,   0.00000, 0.00000, 0.00000);
	new opstinaintathlonezid26 =CreateDynamicObject(19377, 639.55231, -113.12850, -75.60600,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonezid27 =CreateDynamicObject(19377, 644.29022, -113.91904, -75.60600,   0.00000, 0.00000, 0.00000);
	new opstinaintathlonezid28 =CreateDynamicObject(19377, 649.18329, -109.13893, -71.57480,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonezid29 =CreateDynamicObject(19377, 658.81219, -109.13890, -71.57480,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonezid30 =CreateDynamicObject(19377, 665.36127, -109.15321, -75.60600,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonezid31 =CreateDynamicObject(19396, 652.41138, -109.11591, -78.29891,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonezid32 =CreateDynamicObject(19377, 660.59772, -113.88275, -75.60600,   0.00000, 0.00000, 0.00000);
	new opstinaintathlonezid33 =CreateDynamicObject(19377, 655.69916, -118.78771, -75.60600,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonezid34 =CreateDynamicObject(19377, 646.07312, -118.78770, -75.60600,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(opstinaintathlonezid, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid1, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid2, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid3, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid4, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid5, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid6, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid7, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid8, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid9, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid10, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid11, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid12, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid13, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid14, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid15, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid16, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid17, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid18, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid19, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid20, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid21, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid22, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid23, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid24, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid25, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid26, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid27, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid28, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid29, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid30, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid31, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid32, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid33, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezid34, 0, 3980, "cityhall_lan", "LAcityhwal1");
	SetDynamicObjectMaterial(opstinaintathlonezidg, 0, 3980, "cityhall_lan", "LAcityhwal1");
	new opstinaintathlonedrvo = CreateDynamicObject(19458, 666.77692, -85.29599, -79.12100,   -0.08000, 0.00000, 90.00000);
	new opstinaintathlonedrvo1 =CreateDynamicObject(19458, 666.68890, -83.63480, -77.44910,   0.00000, 90.00000, 90.00000);
	new opstinaintathlonedrvo2 =CreateDynamicObject(19461, 674.33673, -88.68752, -79.15932,   0.00000, 0.00000, 40.00000);
	new opstinaintathlonedrvo3 =CreateDynamicObject(19461, 661.90607, -87.11475, -79.15930,   0.00000, 0.00000, 0.00000);
	new opstinaintathlonedrvo4 =CreateDynamicObject(19461, 677.39032, -95.51983, -77.07301,   0.00000, 0.00000, 0.00000);
	new opstinaintathlonedrvo5 =CreateDynamicObject(19461, 674.41040, -103.29371, -79.15930,   0.00000, 0.00000, -40.00000);
	new opstinaintathlonedrvo6 =CreateDynamicObject(19458, 666.76172, -108.47266, -77.44910,   0.00000, 90.00000, 90.00000);
	new opstinaintathlonedrvo7 =CreateDynamicObject(19458, 666.74353, -106.80576, -79.12100,   -0.08000, 0.00000, 90.00000);
	new opstinaintathlonedrvo8 =CreateDynamicObject(19461, 661.91052, -104.72173, -79.15930,   0.00000, 0.00000, 0.00000);
	new opstinaintathlonedrvo9 =CreateDynamicObject(19461, 661.87378, -104.72050, -80.79680,   0.00000, 0.00000, 0.00000);
	new opstinaintathlonedrvo10 =CreateDynamicObject(19461, 665.29529, -109.14634, -80.79680,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonedrvo11 =CreateDynamicObject(19461, 665.34991, -82.66392, -80.79680,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonedrvo12 =CreateDynamicObject(19461, 661.87378, -87.16640, -80.79680,   0.00000, 0.00000, 0.00000);
	new opstinaintathlonedrvo13 =CreateDynamicObject(19461, 660.60931, -77.90871, -80.79680,   0.00000, 0.00000, 0.00000);
	new opstinaintathlonedrvo14 =CreateDynamicObject(19461, 658.58612, -73.13094, -80.79680,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonedrvo15 =CreateDynamicObject(19461, 649.06354, -73.14380, -80.79680,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonedrvo16 =CreateDynamicObject(19461, 644.21991, -77.98660, -80.79680,   0.00000, 0.00000, 0.00000);
	new opstinaintathlonedrvo17 =CreateDynamicObject(19461, 644.20142, -78.01320, -80.79680,   0.00000, 0.00000, 0.00000);
	new opstinaintathlonedrvo18 =CreateDynamicObject(19461, 639.38110, -73.12821, -80.79680,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonedrvo19 =CreateDynamicObject(19461, 629.78619, -73.12492, -80.79680,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonedrvo20 =CreateDynamicObject(19461, 628.74042, -76.78050, -80.79680,   0.00000, 0.00000, -40.00000);
	new opstinaintathlonedrvo21 =CreateDynamicObject(19461, 625.61047, -78.69132, -80.79680,   0.00000, 0.00000, 0.00000);
	new opstinaintathlonedrvo22 =CreateDynamicObject(19461, 625.63580, -88.31848, -80.79680,   0.00000, 0.00000, 0.00000);
	new opstinaintathlonedrvo23 =CreateDynamicObject(19461, 624.61279, -89.48550, -79.09740,   0.00000, 90.00000, 0.00000);
	new opstinaintathlonedrvo24 =CreateDynamicObject(19461, 626.26422, -89.49500, -80.75850,   0.00000, 0.00000, 0.00000);
	new opstinaintathlonedrvo25 =CreateDynamicObject(19461, 621.54028, -84.73660, -80.75850,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonedrvo26 =CreateDynamicObject(19461, 626.26416, -99.08847, -80.75850,   0.00000, 0.00000, 0.00000);
	new opstinaintathlonedrvo27 =CreateDynamicObject(19461, 624.61279, -99.11010, -79.09740,   0.00000, 90.00000, 0.00000);
	new opstinaintathlonedrvo28 =CreateDynamicObject(19461, 625.63300, -108.18704, -80.79680,   0.00000, 0.00000, 0.00000);
	new opstinaintathlonedrvo29 =CreateDynamicObject(19461, 621.54034, -103.85158, -80.75850,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonedrvo30 =CreateDynamicObject(19461, 627.30493, -109.56429, -80.79680,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonedrvo31 =CreateDynamicObject(19461, 632.03607, -114.44640, -80.79680,   -0.08000, 0.00000, 0.00000);
	new opstinaintathlonedrvo32 =CreateDynamicObject(19461, 629.74561, -113.11581, -80.79680,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonedrvo33 =CreateDynamicObject(19461, 639.37738, -113.11460, -80.79680,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonedrvo34 =CreateDynamicObject(19461, 644.28583, -115.09500, -80.79680,   -0.08000, 0.00000, 0.00000);
	new opstinaintathlonedrvo35 =CreateDynamicObject(18762, 641.87567, -109.79960, -79.55340,   0.00000, 90.00000, 0.00000);
	new opstinaintathlonedrvo36 =CreateDynamicObject(18762, 636.87628, -109.79960, -79.55340,   0.00000, 90.00000, 0.00000);
	new opstinaintathlonedrvo37 =CreateDynamicObject(19461, 644.29199, -113.93302, -80.79680,   0.00000, 0.00000, 0.00000);
	new opstinaintathlonedrvo38 =CreateDynamicObject(19461, 648.80786, -118.78540, -80.79680,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonedrvo39 =CreateDynamicObject(19461, 658.43280, -118.78391, -80.79680,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonedrvo40 =CreateDynamicObject(19461, 660.57996, -114.00549, -80.79680,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(opstinaintathlonedrvo, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo1, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo2, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo3, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo4, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo5, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo6, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo7, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo8, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo9, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo10, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo11, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo12, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo13, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo14, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo15, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo16, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo17, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo18, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo19, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo20, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo21, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo22, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo23, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo24, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo25, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo26, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo27, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo28, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo29, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo30, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo31, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo32, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo33, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo34, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo35, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo36, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo37, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo38, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo39, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonedrvo40, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	new opstinaintathlonezidb = CreateDynamicObject(19377, 628.68365, -109.85345, -75.60600,   0.00000, 0.00000, 40.00000);
	new opstinaintathlonezidb1 = CreateDynamicObject(19461, 625.61780, -94.48410, -79.24720,   0.00000, 0.00000, 0.00000);
	new opstinaintathlonezidb2 =CreateDynamicObject(19358, 640.21472, -83.54597, -78.33775,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonezidb3 =CreateDynamicObject(19358, 628.30621, -83.54600, -78.33780,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(opstinaintathlonezidb, 0, 9495, "vict_sfw", "newall10_seamless", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonezidb1, 0, 9495, "vict_sfw", "newall10_seamless", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonezidb2, 0, 9495, "vict_sfw", "newall10_seamless", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonezidb3, 0, 9495, "vict_sfw", "newall10_seamless", 0xFFFFFFFF);
	new athloneopstinaintstubovi = CreateDynamicObject(18980, 662.79163, -84.45060, -78.19510,   0.00000, 0.00000, 0.00000);
	new athloneopstinaintstubovi1 =CreateDynamicObject(18980, 650.32031, -95.88281, -78.19510,   0.00000, 0.00000, 0.00000);
	new athloneopstinaintstubovi2 =CreateDynamicObject(18980, 643.88342, -108.62588, -78.19510,   0.00000, 0.00000, 0.00000);
	new athloneopstinaintstubovi3 =CreateDynamicObject(18980, 643.30560, -104.42500, -78.19510,   0.00000, 0.00000, 0.00000);
	new athloneopstinaintstubovi4 =CreateDynamicObject(18980, 643.30560, -87.51801, -78.19510,   0.00000, 0.00000, 0.00000);
	new athloneopstinaintstubovi5 =CreateDynamicObject(18980, 643.81207, -83.19390, -78.19510,   0.00000, 0.00000, 0.00000);
	new athloneopstinaintstubovi6 =CreateDynamicObject(18980, 634.40680, -79.84310, -78.19510,   0.00000, 0.00000, 0.00000);
	new athloneopstinaintstubovi7 =CreateDynamicObject(18980, 662.73395, -107.59574, -78.19510,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(athloneopstinaintstubovi, 0,  6056, "venice_law", "stonewall_la", 0xFFFFFFFF);
	SetDynamicObjectMaterial(athloneopstinaintstubovi1, 0,  6056, "venice_law", "stonewall_la", 0xFFFFFFFF);
	SetDynamicObjectMaterial(athloneopstinaintstubovi2, 0,  6056, "venice_law", "stonewall_la", 0xFFFFFFFF);
	SetDynamicObjectMaterial(athloneopstinaintstubovi3, 0,  6056, "venice_law", "stonewall_la", 0xFFFFFFFF);
	SetDynamicObjectMaterial(athloneopstinaintstubovi4, 0,  6056, "venice_law", "stonewall_la", 0xFFFFFFFF);
	SetDynamicObjectMaterial(athloneopstinaintstubovi5, 0,  6056, "venice_law", "stonewall_la", 0xFFFFFFFF);
	SetDynamicObjectMaterial(athloneopstinaintstubovi6, 0,  6056, "venice_law", "stonewall_la", 0xFFFFFFFF);
	SetDynamicObjectMaterial(athloneopstinaintstubovi7, 0,  6056, "venice_law", "stonewall_la", 0xFFFFFFFF);
	new opstinaithloneintcrno = CreateDynamicObject(19089, 632.07318, -83.49660, -76.06700,   0.00000, 90.00000, 0.00000);
	new opstinaithloneintcrno1 =CreateDynamicObject(19089, 632.07690, -83.50200, -76.04700,   0.00000, 0.00000, 0.00000);
	new opstinaithloneintcrno2 =CreateDynamicObject(19089, 644.13342, -83.49210, -76.06700,   0.00000, 90.00000, 0.00000);
	new opstinaithloneintcrno3 =CreateDynamicObject(19089, 636.75488, -83.50200, -76.04700,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(opstinaithloneintcrno, 0, 2361, "shopping_freezers", "white", 0xFF000000);
	SetDynamicObjectMaterial(opstinaithloneintcrno1, 0, 2361, "shopping_freezers", "white", 0xFF000000);
	SetDynamicObjectMaterial(opstinaithloneintcrno2, 0, 2361, "shopping_freezers", "white", 0xFF000000);
	SetDynamicObjectMaterial(opstinaithloneintcrno3, 0, 2361, "shopping_freezers", "white", 0xFF000000);
	new opstinaathloneintpod = CreateDynamicObject(18981, 674.34088, -96.06480, -78.90170,   0.00000, 90.00000, 0.00000);
	new opstinaathloneintpod1 =CreateDynamicObject(18981, 649.38062, -96.06480, -80.41410,   0.00000, 90.00000, 0.00000);
	new opstinaathloneintpod2 =CreateDynamicObject(18981, 624.38440, -96.06480, -80.41410,   0.00000, 90.00000, 0.00000);
	new opstinaathloneintpod3 =CreateDynamicObject(18981, 649.41278, -71.05640, -80.41410,   0.00000, 90.00000, 0.00000);
	new opstinaathloneintpod4 =CreateDynamicObject(18981, 624.40436, -71.11646, -80.41410,   0.00000, 90.00000, 0.00000);
	new opstinaathloneintpod5 =CreateDynamicObject(18981, 624.38440, -121.02770, -80.41410,   0.00000, 90.00000, 0.00000);
	new opstinaathloneintpod6 =CreateDynamicObject(18981, 649.38062, -121.02770, -80.41410,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(opstinaathloneintpod, 0, 14594, "papaerchaseoffice", "ab_mottleGrey");
	SetDynamicObjectMaterial(opstinaathloneintpod1, 0, 14594, "papaerchaseoffice", "ab_mottleGrey");
	SetDynamicObjectMaterial(opstinaathloneintpod2, 0, 14594, "papaerchaseoffice", "ab_mottleGrey");
	SetDynamicObjectMaterial(opstinaathloneintpod3, 0, 14594, "papaerchaseoffice", "ab_mottleGrey");
	SetDynamicObjectMaterial(opstinaathloneintpod4, 0, 14594, "papaerchaseoffice", "ab_mottleGrey");
	SetDynamicObjectMaterial(opstinaathloneintpod5, 0, 14594, "papaerchaseoffice", "ab_mottleGrey");
	SetDynamicObjectMaterial(opstinaathloneintpod6, 0, 14594, "papaerchaseoffice", "ab_mottleGrey");
	new opstinaintathloneplafon = CreateDynamicObject(18981, 674.39478, -95.09790, -71.28810,   0.00000, 90.00000, 0.00000);
	new opstinaintathloneplafon1 =CreateDynamicObject(18981, 649.38062, -96.06480, -71.28810,   0.00000, 90.00000, 0.00000);
	new opstinaintathloneplafon2 =CreateDynamicObject(18981, 649.38062, -121.02770, -71.28810,   0.00000, 90.00000, 0.00000);
	new opstinaintathloneplafon3 =CreateDynamicObject(18981, 624.38440, -121.02770, -71.28810,   0.00000, 90.00000, 0.00000);
	new opstinaintathloneplafon4 =CreateDynamicObject(18981, 624.38440, -96.06480, -71.28810,   0.00000, 90.00000, 0.00000);
	new opstinaintathloneplafon5 =CreateDynamicObject(18981, 649.39362, -71.11540, -71.28810,   0.00000, 90.00000, 0.00000);
	new opstinaintathloneplafon6 =CreateDynamicObject(18981, 624.40442, -71.11650, -71.28810,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(opstinaintathloneplafon, 0, 10926, "shops_sfse", "bathtile01_int", 0xFF8B4C39);
	SetDynamicObjectMaterial(opstinaintathloneplafon1, 0, 10926, "shops_sfse", "bathtile01_int", 0xFF8B4C39);
	SetDynamicObjectMaterial(opstinaintathloneplafon2, 0, 10926, "shops_sfse", "bathtile01_int", 0xFF8B4C39);
	SetDynamicObjectMaterial(opstinaintathloneplafon3, 0, 10926, "shops_sfse", "bathtile01_int", 0xFF8B4C39);
	SetDynamicObjectMaterial(opstinaintathloneplafon4, 0, 10926, "shops_sfse", "bathtile01_int", 0xFF8B4C39);
	SetDynamicObjectMaterial(opstinaintathloneplafon5, 0, 10926, "shops_sfse", "bathtile01_int", 0xFF8B4C39);
	SetDynamicObjectMaterial(opstinaintathloneplafon6, 0, 10926, "shops_sfse", "bathtile01_int", 0xFF8B4C39);
	new opstinaathlonekancelarijep = CreateDynamicObject(19377, 649.02307, -77.40660, -76.02560,   0.00000, 90.00000, 90.00000);
	new opstinaathlonekancelarijep1 = CreateDynamicObject(19377, 658.60931, -77.40660, -76.02560,   0.00000, 90.00000, 90.00000);
	new opstinaathlonekancelarijep2 = CreateDynamicObject(19377, 649.26868, -114.41124, -76.02560,   0.00000, 90.00000, 90.00000);
	new opstinaathlonekancelarijep3 = CreateDynamicObject(19377, 658.90045, -114.43725, -76.02560,   0.00000, 90.00000, 90.00000);
	SetDynamicObjectMaterial(opstinaathlonekancelarijep, 0, 10926, "shops_sfse", "bathtile01_int", 0xFF8B4C39);
	SetDynamicObjectMaterial(opstinaathlonekancelarijep1, 0, 10926, "shops_sfse", "bathtile01_int", 0xFF8B4C39);
	SetDynamicObjectMaterial(opstinaathlonekancelarijep2, 0, 10926, "shops_sfse", "bathtile01_int", 0xFF8B4C39);
	SetDynamicObjectMaterial(opstinaathlonekancelarijep3, 0, 10926, "shops_sfse", "bathtile01_int", 0xFF8B4C39);
	new opstinaintathloneprozori = CreateDynamicObject(19466, 625.70062, -85.94160, -78.46710,   0.00000, 0.00000, 0.00000);
	new opstinaintathloneprozori1 =CreateDynamicObject(19358, 625.62653, -90.83600, -80.11360,   45.00000, 0.00000, 0.00000);
	new opstinaintathloneprozori2 =CreateDynamicObject(19358, 625.62653, -97.96420, -80.11360,   45.00000, 0.00000, 0.00000);
	new opstinaintathloneprozori3 =CreateDynamicObject(19466, 625.69885, -102.38997, -78.46712,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(opstinaintathloneprozori, 0, 3979, "civic01_lan", "sl_laglasswall2", 0xFF1E90FF);
	SetDynamicObjectMaterial(opstinaintathloneprozori1, 0, 3979, "civic01_lan", "sl_laglasswall2", 0xFF1E90FF);
	SetDynamicObjectMaterial(opstinaintathloneprozori2, 0, 3979, "civic01_lan", "sl_laglasswall2", 0xFF1E90FF);
	SetDynamicObjectMaterial(opstinaintathloneprozori3, 0, 3979, "civic01_lan", "sl_laglasswall2", 0xFF1E90FF);
	new opstinaintathlonestakla = CreateDynamicObject(19325, 628.75568, -83.49660, -78.12170,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonestakla1 =CreateDynamicObject(19325, 640.07196, -83.49660, -78.12170,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonestakla2 =CreateDynamicObject(19325, 647.57391, -82.70230, -78.12170,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonestakla3 =CreateDynamicObject(19325, 657.24365, -82.70232, -78.12170,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonestakla4 =CreateDynamicObject(19325, 657.31396, -109.11961, -78.12171,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonestakla5 =CreateDynamicObject(19325, 647.57391, -109.11960, -78.12170,   0.00000, 0.00000, 90.00000);
	new opstinaintathlonestakla6 =CreateDynamicObject(19325, 629.93542, -108.01970, -73.54840,   0.00000, 0.00000, 312.00000);
	new opstinaintathlonestakla7 =CreateDynamicObject(19325, 627.08929, -104.96125, -73.54842,   0.00000, 0.00000, 312.00000);
	new opstinaintathlonestakla8 =CreateDynamicObject(19325, 643.72156, -85.57745, -78.66464,   80.00000, 0.00000, 0.00000);
	new opstinaintathlonestakla9 =CreateDynamicObject(19325, 643.69373, -106.29720, -78.66460,   -80.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(opstinaintathlonestakla, 0, 2361, "lsmall_shops", "lsmall_window01", 0xFF1E90FF);
	SetDynamicObjectMaterial(opstinaintathlonestakla1, 0, 2361, "lsmall_shops", "lsmall_window01", 0xFF1E90FF);
	SetDynamicObjectMaterial(opstinaintathlonestakla2, 0, 2361, "lsmall_shops", "lsmall_window01", 0xFF1E90FF);
	SetDynamicObjectMaterial(opstinaintathlonestakla3, 0, 2361, "lsmall_shops", "lsmall_window01", 0xFF1E90FF);
	SetDynamicObjectMaterial(opstinaintathlonestakla4, 0, 2361, "lsmall_shops", "lsmall_window01", 0xFF1E90FF);
	SetDynamicObjectMaterial(opstinaintathlonestakla5, 0, 2361, "lsmall_shops", "lsmall_window01", 0xFF1E90FF);
	SetDynamicObjectMaterial(opstinaintathlonestakla6, 0, 2361, "lsmall_shops", "lsmall_window01", 0xFF1E90FF);
	SetDynamicObjectMaterial(opstinaintathlonestakla7, 0, 2361, "lsmall_shops", "lsmall_window01", 0xFF1E90FF);
	SetDynamicObjectMaterial(opstinaintathlonestakla8, 0, 2361, "lsmall_shops", "lsmall_window01", 0xFF1E90FF);
	SetDynamicObjectMaterial(opstinaintathlonestakla9, 0, 2361, "lsmall_shops", "lsmall_window01", 0xFF1E90FF);
	new opstinaintathloneplazma = CreateDynamicObject(2267, 628.30969, -83.41081, -77.97473,   0.00000, 0.00000, 180.00000);
	new opstinaintathloneplazma1 =CreateDynamicObject(2267, 640.22369, -83.43540, -77.97470,   0.00000, 0.00000, 180.00000);
	SetDynamicObjectMaterial(opstinaintathloneplazma, 1, 2361, "shopping_freezers", "white", 0xFF5B5959);
	SetDynamicObjectMaterial(opstinaintathloneplazma, 0, 2361, "shopping_freezers", "white", 0xFF000000);
	SetDynamicObjectMaterial(opstinaintathloneplazma1, 1, 2361, "shopping_freezers", "white", 0xFF5B5959);
	SetDynamicObjectMaterial(opstinaintathloneplazma1, 0, 2361, "shopping_freezers", "white", 0xFF000000);
	new opstinaintathlonezast = CreateDynamicObject(19458, 659.00098, -99.97622, -82.33400,   -40.00000, 0.00000, 90.00000);
	new opstinaintathlonezast1 =CreateDynamicObject(19458, 659.00098, -91.86590, -82.33400,   -40.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(opstinaintathlonezast, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	SetDynamicObjectMaterial(opstinaintathlonezast1, 0, 12954, "sw_furniture", "CJ_WOOD5", 0xFFFFFFFF);
	new opstinaintathlonevrata = CreateDynamicObject(1491, 651.63452, -109.10800, -79.97020,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(opstinaintathlonevrata, 0, 1569, "adam_v_doort", "ws_guardhousedoor", 0xFFFFFFFF);
	new dodatakplafon = CreateDynamicObject(18981, 675.47900, -120.01958, -71.28810,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(dodatakplafon, 0, 3979, "civic01_lan", "sl_laglasswall2", 0xFF1E90FF);

	//Nexarp Party
    tmpobjid = CreateDynamicObject(19375, -2939.000976, 48.680534, 1.406983, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    SetDynamicObjectMaterial(tmpobjid, 0, 1564, "ab_jetlite", "bathwin01_int", 0x00000000);
    tmpobjid = CreateDynamicObject(3648, 2458.625488, 2744.601318, 12.820312, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19355, -2923.621337, 43.883342, -0.260182, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3615, -2902.339843, -1.317253, 5.074690, 0.000000, 0.000000, -88.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19355, -2923.321289, 55.683341, -0.260182, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19355, -2923.821289, 63.023338, -0.260182, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(1280, -2895.462646, 28.390844, 4.399931, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(647, -2881.581787, 58.818996, 3.724176, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(712, -2876.507568, 51.666263, 11.823379, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19375, -2928.500976, 48.680534, 1.406983, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(14407, -2921.419189, 57.079666, -1.689193, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(1419, -2925.309814, 43.857761, 1.981467, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(642, -2893.521972, 72.895446, 5.757666, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(643, -2893.489501, 73.016723, 4.315847, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(14407, -2921.419189, 53.139659, -1.689193, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(14407, -2921.419189, 61.039657, -1.689193, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19355, -2923.321289, 52.683341, -0.260182, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19375, -2949.500488, 48.680534, 1.406983, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19375, -2949.500488, 58.280540, 1.406983, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19375, -2938.900634, 58.280540, 1.406983, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(14407, -2921.419189, 49.239658, -1.689193, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19375, -2928.500488, 58.280540, 1.406983, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(14407, -2921.419189, 45.939659, -1.689193, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(1419, -2929.409912, 43.857761, 1.981467, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(1419, -2933.510009, 43.857761, 1.981467, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(1419, -2937.610107, 43.857761, 1.981467, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(1419, -2941.710205, 43.857761, 1.981467, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(1419, -2945.810302, 43.857761, 1.981467, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(1419, -2949.910400, 43.857761, 1.981467, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(1419, -2952.710693, 43.857761, 1.981467, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(3615, -2902.439208, 88.682746, 5.074690, 0.000000, 0.000000, -88.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2909, -2927.300048, 63.155803, 2.492921, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2909, -2935.720458, 63.155803, 2.492921, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2909, -2950.560058, 63.155803, 2.492921, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2909, -2944.160400, 63.155803, 2.492921, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19363, -2954.711669, 48.766391, 3.092921, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19363, -2954.711669, 45.566398, 3.092921, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19363, -2954.711669, 51.766387, 3.092921, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19363, -2954.711669, 54.966392, 3.092921, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19363, -2954.711669, 58.166389, 3.092921, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19363, -2954.711669, 61.366390, 3.092921, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19608, -2951.676757, 53.015819, 1.492921, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19609, -2950.615234, 53.139297, 1.492921, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19611, -2950.271240, 55.806785, 1.492921, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19610, -2950.364257, 55.806743, 3.139796, 12.000000, 7.099999, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19129, -2944.548828, 53.843460, 1.492921, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18655, -2948.109375, 56.986686, 1.492921, 0.000000, 0.000000, 44.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(18655, -2948.109375, 48.986686, 1.492921, 0.000000, 0.000000, -48.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2232, -2953.951171, 62.588737, 2.163233, 0.000000, 0.000000, 60.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(1753, -2931.131103, 62.245124, 1.492921, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(1753, -2929.231201, 59.045124, 1.492921, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2232, -2953.951171, 44.388736, 2.163233, 0.000000, 0.000000, 130.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19611, -2950.271240, 50.306785, 1.492921, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19610, -2950.364257, 50.306743, 3.139796, 12.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2311, -2930.907226, 60.592586, 1.492921, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19820, -2930.197753, 60.592102, 1.982921, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19835, -2929.544677, 60.189670, 2.092921, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19835, -2930.044677, 60.189670, 2.092921, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19835, -2930.544677, 60.189670, 2.092921, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19835, -2931.044677, 60.189670, 2.092921, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19835, -2931.044677, 60.889671, 2.092921, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19835, -2930.544677, 60.889671, 2.092921, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19835, -2930.044677, 60.889671, 2.092921, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19835, -2929.544677, 60.889671, 2.092921, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19611, -2934.271240, 44.306785, 1.492921, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2232, -2934.350585, 44.488739, 3.563233, 0.000000, 0.000000, 225.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19611, -2934.271240, 62.306785, 1.492921, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2232, -2934.350585, 62.188732, 3.563233, 0.000000, 0.000000, 305.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2631, -2932.611328, 52.073471, 1.455412, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(19318, -2953.593017, 50.781311, 2.292921, -18.000000, 0.000000, 80.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2631, -2928.711425, 52.073471, 1.455412, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(2631, -2925.211425, 52.073471, 1.455412, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00); 
    tmpobjid = CreateDynamicObject(16151, -2929.712402, 45.144672, 1.927490, 0.000000, 0.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
    //ostaloopstinaint
	CreateDynamicObject(14394, 660.80750, -95.93260, -79.21160,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2030, 626.27869, -85.95230, -79.64500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2030, 626.22418, -90.97360, -79.64500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2030, 626.22418, -98.08510, -79.64500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2030, 626.27875, -102.44759, -79.64500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14409, 629.51630, -105.59517, -80.34965,   0.00000, 0.00000, 312.04074);
	CreateDynamicObject(2209, 642.74908, -109.54320, -79.95400,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2209, 640.54437, -109.54320, -79.95400,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2209, 638.32220, -109.54320, -79.95400,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2209, 636.17377, -109.54321, -79.95400,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19089, 636.75488, -83.50200, -76.04700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1897, 625.62518, -84.89540, -78.60280,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1897, 625.56738, -85.95110, -77.55540,   0.00000, -90.00000, -90.00000);
	CreateDynamicObject(1897, 625.62451, -103.59120, -78.60280,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1897, 625.57739, -102.36510, -77.55540,   0.00000, -90.00000, -90.00000);
	CreateDynamicObject(1897, 625.57739, -102.36510, -78.98882,   0.00000, -90.00000, -90.00000);
	CreateDynamicObject(1897, 625.63733, -101.36090, -78.60280,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1897, 625.63275, -87.19853, -78.60280,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1897, 625.56738, -85.95112, -78.98882,   0.00000, -90.00000, -90.00000);
	CreateDynamicObject(1897, 625.64496, -89.77599, -78.60280,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1897, 625.64124, -99.41479, -78.60280,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1897, 625.58588, -98.18000, -77.55680,   0.00000, -90.00000, -90.00000);
	CreateDynamicObject(1897, 625.58588, -95.95420, -77.55680,   0.00000, -90.00000, -90.00000);
	CreateDynamicObject(1897, 625.58588, -93.72840, -77.55680,   0.00000, -90.00000, -90.00000);
	CreateDynamicObject(1897, 625.58588, -91.52940, -77.55680,   0.00000, -90.00000, -90.00000);
	CreateDynamicObject(1897, 625.58588, -90.80700, -77.55680,   0.00000, -90.00000, -90.00000);
	CreateDynamicObject(957, 625.97467, -100.38590, -78.97880,   0.00000, 180.00000, 180.00000);
	CreateDynamicObject(957, 625.87830, -88.32170, -78.97880,   0.00000, 180.00000, 180.00000);
	CreateDynamicObject(957, 625.97467, -96.46550, -78.97880,   0.00000, 180.00000, 180.00000);
	CreateDynamicObject(957, 625.97467, -94.32830, -78.97880,   0.00000, 180.00000, 180.00000);
	CreateDynamicObject(957, 625.97467, -92.21470, -78.97880,   0.00000, 180.00000, 180.00000);
	CreateDynamicObject(970, 660.09564, -91.88626, -79.45350,   0.00000, -40.00000, 0.00000);
	CreateDynamicObject(970, 660.12927, -99.98650, -79.45350,   0.00000, -40.00000, 0.00000);
	CreateDynamicObject(2315, 650.34064, -95.89874, -78.09620,   -0.08000, 90.00000, 0.00000);
	CreateDynamicObject(2315, 650.30090, -95.89836, -79.51530,   -0.08000, -90.00000, 0.00000);
	CreateDynamicObject(2315, 643.34088, -87.54068, -78.09620,   -0.08000, 90.00000, 0.00000);
	CreateDynamicObject(2315, 643.29565, -87.54087, -79.51530,   -0.08000, -90.00000, 0.00000);
	CreateDynamicObject(2315, 643.28198, -104.42378, -79.51530,   -0.08000, -90.00000, 0.00000);
	CreateDynamicObject(2315, 643.33002, -104.44360, -78.09620,   -0.08000, 90.00000, 0.00000);
	CreateDynamicObject(2030, 643.32550, -104.08462, -79.64500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2030, 643.35559, -87.94286, -79.64500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1811, 644.71716, -88.77499, -79.34870,   0.00000, 0.00000, 313.66730);
	CreateDynamicObject(1811, 642.44525, -89.24929, -79.34870,   0.00000, 0.00000, 254.05786);
	CreateDynamicObject(1811, 642.44653, -102.88531, -79.34870,   0.00000, 0.00000, 130.13995);
	CreateDynamicObject(1811, 644.31219, -103.08139, -79.34870,   0.00000, 0.00000, 63.86169);
	CreateDynamicObject(1811, 627.92981, -86.01850, -79.34870,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1811, 627.92981, -90.93860, -79.34870,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1811, 627.92981, -98.07280, -79.34870,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1811, 627.92981, -102.46020, -79.34870,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1811, 635.49139, -107.87420, -79.34870,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1811, 637.77881, -107.87420, -79.34870,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1811, 639.93292, -107.87420, -79.34870,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1811, 642.19196, -107.87415, -79.34870,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1806, 642.20758, -111.45820, -79.94030,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1806, 658.63849, -74.89175, -79.94030,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1806, 637.77881, -111.45820, -79.94030,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1806, 635.49139, -111.45820, -79.94030,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 661.47388, -85.19040, -79.41490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 666.01703, -84.66341, -76.98325,   0.00000, 0.00000, 86.70212);
	CreateDynamicObject(640, 661.47388, -102.50950, -79.41490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 661.47388, -107.88960, -79.41490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2816, 643.31097, -103.64680, -79.24140,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2816, 643.43970, -88.44480, -79.24140,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2253, 625.88348, -87.58610, -78.76670,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2253, 625.88348, -89.08930, -78.76670,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2253, 625.88348, -99.73520, -78.76670,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2253, 625.88348, -101.00310, -78.76670,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1817, 628.73590, -81.18795, -79.95783,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1817, 639.59589, -80.68150, -79.95780,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1817, 633.93317, -77.46697, -79.95783,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2290, 639.02917, -78.06230, -79.97610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2290, 628.21399, -78.64378, -79.97610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2290, 633.54919, -74.91982, -79.97610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2252, 640.47894, -80.21136, -79.20330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2252, 634.89307, -76.97001, -79.20330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2252, 629.71106, -80.72469, -79.20330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(948, 635.11871, -80.05130, -80.16160,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(948, 633.70306, -80.05126, -80.16164,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14455, 643.42993, -73.22305, -78.47224,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(640, 661.47388, -90.55080, -79.41490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 665.81433, -107.35336, -76.98325,   0.00000, 0.00000, 95.41958);
	CreateDynamicObject(948, 650.32709, -95.17343, -80.16160,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(948, 650.32709, -96.63380, -80.16160,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(948, 625.94635, -104.19146, -80.16160,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(948, 625.94598, -84.48155, -80.16160,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2894, 639.77661, -80.11692, -79.49731,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1533, 628.09088, -108.87543, -77.27138,   0.00000, 0.00000, 131.41745);
	CreateDynamicObject(1533, 627.10388, -107.73789, -77.27138,   0.00000, 0.00000, 130.70224);
	CreateDynamicObject(1533, 677.27008, -96.03189, -78.45134,   0.00000, 0.00000, 270.31757);
	CreateDynamicObject(1533, 677.26648, -94.53089, -78.45134,   0.00000, 0.00000, 270.31757);
	CreateDynamicObject(10932, 663.30194, -84.45351, -87.21690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19893, 635.49139, -110.13210, -79.04570,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19893, 637.77881, -110.13210, -79.04570,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19893, 639.93292, -110.13210, -79.04570,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19893, 642.20758, -110.13210, -79.04570,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2161, 643.73938, -112.89420, -79.95420,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2163, 642.43500, -112.89024, -79.94180,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2167, 640.67438, -112.90337, -79.91360,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2164, 639.76129, -112.93200, -79.91360,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2164, 638.00177, -112.93200, -79.91360,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2164, 636.23688, -112.93200, -79.91360,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2894, 635.50372, -109.62946, -79.02720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2690, 650.27289, -96.42448, -77.90593,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2690, 650.35260, -95.35569, -77.90590,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11710, 627.05072, -107.76850, -74.53440,   0.00000, 0.00000, 311.42770);
	CreateDynamicObject(19787, 632.13702, -111.41712, -76.54530,   10.00000, 0.00000, 90.00000);
	CreateDynamicObject(2207, 653.07501, -116.12050, -79.93630,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1714, 652.13806, -117.80235, -79.96360,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1727, 653.59235, -114.47710, -79.93870,   0.00000, 0.00000, -40.00000);
	CreateDynamicObject(1727, 650.25983, -114.90266, -79.93870,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(2164, 645.68073, -118.63110, -79.96960,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2164, 647.46039, -118.60310, -79.96960,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(14455, 655.47131, -118.72634, -78.47220,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2163, 649.20062, -118.63110, -79.03260,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2162, 649.22919, -118.63110, -79.94440,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1726, 645.00787, -111.66827, -79.88450,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1726, 647.96295, -109.71831, -79.88450,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(14455, 660.54919, -117.95032, -78.47220,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19787, 644.38165, -114.48017, -76.94630,   10.00000, 0.00000, 90.00000);
	CreateDynamicObject(1817, 646.96698, -111.21815, -79.95780,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2253, 651.13812, -116.80521, -78.92980,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19893, 652.12128, -116.42018, -79.16170,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2894, 651.55731, -116.14957, -79.13648,   0.00000, 0.00000, 34.48423);
	CreateDynamicObject(2252, 646.42346, -110.77756, -79.20530,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14834, 660.15924, -109.59376, -79.66059,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2260, 650.11292, -118.20687, -78.18145,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2265, 650.80261, -118.13276, -78.72180,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2262, 654.21777, -118.19831, -78.38730,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(18084, 652.33887, -117.73293, -78.05145,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18084, 659.55408, -111.44402, -78.05140,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2828, 653.05249, -116.69225, -79.17720,   0.00000, 0.00000, 125.71690);
	CreateDynamicObject(2239, 644.72064, -112.29126, -79.86860,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1569, 651.62665, -82.71125, -79.97024,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2181, 644.87842, -73.66960, -79.95080,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2181, 649.31622, -73.66960, -79.95080,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2181, 653.84491, -73.66960, -79.95080,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2181, 658.16254, -73.66959, -79.95080,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1806, 639.93292, -111.45820, -79.94030,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1806, 654.34387, -74.89170, -79.94030,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1806, 649.80573, -74.89170, -79.94030,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1806, 645.43958, -74.89170, -79.94030,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2164, 647.23346, -73.20974, -79.94410,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2164, 651.63318, -73.20970, -79.94410,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2164, 656.09192, -73.20970, -79.94410,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2181, 656.09192, -77.26020, -79.95080,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2181, 651.63318, -77.26020, -79.95080,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2181, 647.23352, -77.26020, -79.95080,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1806, 656.58954, -78.36084, -79.94030,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1806, 652.16882, -78.36080, -79.94030,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1806, 647.68329, -78.36080, -79.94030,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2200, 644.01807, -117.68100, -79.94760,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2241, 632.39355, -112.72945, -79.46980,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14439, 643.75452, -95.91390, -69.81030,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14439, 663.96240, -95.91393, -69.81030,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14439, 633.82617, 80.82190, -69.81030,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19158, 631.93738, -95.46360, -83.49860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19158, 652.39771, -95.46357, -83.49860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2613, 650.15491, -117.48537, -79.91563,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2257, 661.79547, -103.99761, -76.41720,   0.00000, 40.00000, -90.00000);
	CreateDynamicObject(2257, 661.80475, -86.74609, -76.41720,   0.00000, -40.00000, -90.00000);
	CreateDynamicObject(2258, 635.58722, -73.23920, -76.56381,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2256, 644.01782, -77.68080, -76.56380,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2010, 629.73047, -109.00214, -79.91438,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2010, 626.11053, -80.70605, -79.91438,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2010, 643.97717, -82.38253, -79.91438,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2010, 662.51752, -106.49671, -78.38544,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2010, 662.41052, -85.78848, -78.38544,   0.00000, 0.00000, 0.00000); 
    
    //island (sf)
    tmpobjid = CreateDynamicObject(980,2044.333,1372.768,12.451,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
    tmpobjid = CreateDynamicObject(18802,-2828.222,-70.500,7.746,0.000,0.000,179.700,-1,-1,-1,300.000,300.000);
    tmpobjid = CreateDynamicObject(18788,-2857.918,-70.448,9.271,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
    tmpobjid = CreateDynamicObject(18788,-2897.849,-70.447,9.264,0.000,0.000,0.000,-1,-1,-1,300.000,300.000);
    
    //Mt.Chiliad
    tmpobjid = CreateDynamicObjectEx(6959,-2328.126,-1590.806,483.534,0.000,0.000,0.000,300.000,300.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "concretemanky", 0);
    tmpobjid = CreateDynamicObjectEx(6959,-2328.127,-1630.788,483.534,0.000,0.000,0.000,300.000,300.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "concretemanky", 0);
    tmpobjid = CreateDynamicObjectEx(19377,-2315.369,-1656.928,482.517,0.000,80.000,90.000,300.000,300.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "concretemanky", 0);
    tmpobjid = CreateDynamicObjectEx(18981,-2344.037,-1570.303,471.028,0.000,0.000,90.000,300.000,300.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "ahoodfence2", 0);
    tmpobjid = CreateDynamicObjectEx(19377,-2317.380,-1656.929,482.517,0.000,80.000,90.000,300.000,300.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "concretemanky", 0);
    tmpobjid = CreateDynamicObjectEx(18981,-2319.031,-1651.277,471.028,0.000,0.000,90.000,300.000,300.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "ahoodfence2", 0);
    tmpobjid = CreateDynamicObjectEx(18981,-2307.037,-1638.284,471.028,0.000,0.000,0.000,300.000,300.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "ahoodfence2", 0);
    tmpobjid = CreateDynamicObjectEx(18981,-2307.037,-1613.287,471.028,0.000,0.000,0.000,300.000,300.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "ahoodfence2", 0);
    tmpobjid = CreateDynamicObjectEx(18981,-2307.043,-1588.294,471.028,0.000,0.000,0.000,300.000,300.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "ahoodfence2", 0);
    tmpobjid = CreateDynamicObjectEx(18981,-2307.041,-1583.300,471.028,0.000,0.000,0.000,300.000,300.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "ahoodfence2", 0);
    tmpobjid = CreateDynamicObjectEx(18981,-2319.041,-1570.308,471.028,0.000,0.000,90.000,300.000,300.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "ahoodfence2", 0);
    tmpobjid = CreateDynamicObjectEx(18981,-2336.312,-1651.269,471.014,0.000,0.000,90.000,300.000,300.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "ahoodfence2", 0);
    tmpobjid = CreateDynamicObjectEx(18981,-2349.289,-1639.271,471.014,0.000,0.000,0.000,300.000,300.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "ahoodfence2", 0);
    tmpobjid = CreateDynamicObjectEx(14411,-2352.104,-1609.529,489.212,0.000,0.000,90.000,300.000,300.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "adeta", 0);
    SetDynamicObjectMaterial(tmpobjid, 1, 16640, "a51", "concretemanky", 0);
    tmpobjid = CreateDynamicObjectEx(14411,-2352.110,-1606.766,489.212,0.000,0.000,90.000,300.000,300.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "adeta", 0);
    SetDynamicObjectMaterial(tmpobjid, 1, 16640, "a51", "concretemanky", 0);
    tmpobjid = CreateDynamicObjectEx(19377,-2353.336,-1604.653,487.147,0.000,0.000,90.000,300.000,300.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "adeta", 0);
    tmpobjid = CreateDynamicObjectEx(19377,-2353.324,-1611.503,487.147,0.000,0.000,90.000,300.000,300.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "adeta", 0);
    tmpobjid = CreateDynamicObjectEx(18762,-2350.935,-1604.902,493.295,0.000,0.000,0.000,300.000,300.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "ahoodfence2", 0);
    tmpobjid = CreateDynamicObjectEx(18762,-2350.924,-1611.104,493.321,0.000,0.000,0.000,300.000,300.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "ahoodfence2", 0);
    tmpobjid = CreateDynamicObjectEx(18762,-2350.924,-1611.104,488.322,0.000,0.000,0.000,300.000,300.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "ahoodfence2", 0);
    tmpobjid = CreateDynamicObjectEx(18762,-2350.931,-1604.902,488.322,0.000,0.000,0.000,300.000,300.000);
    SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "ahoodfence2", 0);
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    tmpobjid = CreateDynamicObjectEx(3749,-2316.339,-1649.672,489.363,0.000,0.000,0.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(18981,-2349.271,-1589.286,471.014,0.000,0.000,0.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(987,-2337.996,-1651.421,483.486,0.000,0.000,0.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(987,-2306.831,-1647.510,483.486,0.000,0.000,90.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(987,-2306.840,-1635.528,483.486,0.000,0.000,90.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(987,-2306.856,-1623.552,483.486,0.000,0.000,90.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(987,-2306.873,-1611.572,483.486,0.000,0.000,90.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(987,-2306.880,-1599.580,483.486,0.000,0.000,90.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(987,-2306.866,-1587.631,483.486,0.000,0.000,90.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(987,-2306.856,-1581.746,483.486,0.000,0.000,90.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(987,-2306.788,-1570.060,483.486,0.000,0.000,180.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(987,-2318.750,-1570.054,483.486,0.000,0.000,180.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(987,-2324.630,-1569.946,483.486,0.000,0.000,180.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(987,-2344.035,-1651.479,483.486,0.000,0.000,0.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(4824,-2344.631,-1608.099,487.303,0.000,0.000,0.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(6522,-2381.096,-1607.767,500.553,0.000,0.000,0.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(896,-2359.721,-1639.181,486.203,0.000,0.000,110.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(896,-2392.092,-1607.185,501.124,0.000,0.000,180.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(896,-2359.813,-1644.839,483.188,0.000,0.000,1110.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(896,-2379.887,-1636.797,485.597,0.000,0.000,0.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(896,-2371.960,-1635.818,485.900,0.000,0.000,180.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(896,-2344.965,-1570.996,479.505,0.000,0.000,881.099,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(896,-2365.147,-1633.629,485.900,0.000,0.000,180.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(896,-2359.268,-1632.426,485.494,0.000,0.000,110.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(896,-2346.584,-1645.526,483.188,0.000,0.000,35.037,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(896,-2359.214,-1629.181,485.481,0.000,0.000,111.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(868,-2359.036,-1591.133,491.957,0.000,0.000,90.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(868,-2358.792,-1586.258,491.957,0.000,0.000,90.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(868,-2359.100,-1587.839,491.957,0.000,0.000,90.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(868,-2359.081,-1589.481,491.957,0.000,0.000,90.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(896,-2361.142,-1583.398,486.888,0.000,0.000,111.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(896,-2355.726,-1570.691,483.275,0.000,0.000,111.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(9833,-2340.074,-1602.659,483.923,0.000,0.000,0.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(9833,-2344.379,-1613.409,486.033,0.000,0.000,0.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(9833,-2344.304,-1602.816,486.033,0.000,0.000,0.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(9833,-2333.321,-1602.593,482.111,0.000,0.000,0.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(9833,-2333.338,-1613.330,482.111,0.000,0.000,0.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(9833,-2340.094,-1613.388,483.923,0.000,0.000,0.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(1232,-2337.563,-1604.481,488.992,0.000,0.000,0.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(1232,-2330.451,-1604.819,486.039,0.000,0.000,0.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(1232,-2333.481,-1575.352,486.815,0.000,0.000,0.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(1232,-2348.420,-1604.665,491.126,0.000,0.000,0.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(1232,-2337.523,-1611.730,488.992,0.000,0.000,0.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(1232,-2342.216,-1611.719,491.126,0.000,0.000,0.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(1232,-2342.197,-1604.456,491.126,0.000,0.000,0.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(1232,-2348.395,-1611.490,491.126,0.000,0.000,0.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(1232,-2330.571,-1611.320,486.039,0.000,0.000,0.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(1232,-2333.509,-1640.446,486.784,0.000,0.000,0.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(1232,-2340.306,-1640.450,488.864,0.000,0.000,0.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(1232,-2346.818,-1640.494,490.981,0.000,0.000,0.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(1232,-2353.474,-1640.535,494.772,0.000,0.000,0.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(1232,-2353.475,-1575.400,494.772,0.000,0.000,0.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(1232,-2346.885,-1575.352,491.020,0.000,0.000,0.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(1232,-2340.297,-1575.324,488.866,0.000,0.000,0.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(1569,-2366.414,-1606.651,496.372,0.000,0.000,-90.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(1569,-2366.408,-1609.646,496.372,0.000,0.000,90.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(2229,-2359.172,-1611.410,496.386,0.000,0.000,-90.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(2229,-2359.378,-1597.859,496.386,0.000,0.000,90.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(2229,-2358.978,-1598.038,496.386,0.000,0.000,0.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(2229,-2359.593,-1598.308,496.386,0.000,0.000,180.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(2229,-2359.181,-1598.482,496.386,0.000,0.000,-90.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(2229,-2359.178,-1605.213,496.386,0.000,0.000,-90.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(2229,-2358.982,-1604.780,496.386,0.000,0.000,0.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(2229,-2359.583,-1605.036,496.386,0.000,0.000,180.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(2229,-2359.348,-1604.599,496.386,0.000,0.000,90.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(2229,-2359.160,-1618.134,496.386,0.000,0.000,-90.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(2229,-2358.966,-1610.974,496.386,0.000,0.000,0.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(2229,-2359.583,-1611.235,496.386,0.000,0.000,180.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(2229,-2359.355,-1610.790,496.386,0.000,0.000,90.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(2229,-2359.377,-1617.533,496.386,0.000,0.000,90.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(2229,-2358.962,-1617.711,496.386,0.000,0.000,0.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(2229,-2359.582,-1617.980,496.386,0.000,0.000,180.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(1723,-2350.731,-1606.956,496.389,0.000,0.000,-90.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(1723,-2354.208,-1605.614,496.389,0.000,0.000,0.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(1723,-2359.758,-1593.735,496.389,0.000,0.000,-90.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(1819,-2361.990,-1621.235,496.389,0.000,0.000,0.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(1819,-2352.959,-1608.509,496.389,0.000,0.000,0.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(1819,-2353.717,-1607.710,496.389,0.000,0.000,0.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(1723,-2352.099,-1610.551,496.389,0.000,0.000,180.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(1723,-2358.746,-1595.759,496.389,0.000,0.000,90.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(1723,-2358.703,-1621.722,496.389,0.000,0.000,90.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(1723,-2359.710,-1619.702,496.389,0.000,0.000,-90.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(1723,-2359.652,-1607.020,496.389,0.000,0.000,-90.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(1723,-2358.641,-1609.039,496.389,0.000,0.000,90.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(1723,-2358.693,-1615.570,496.389,0.000,0.000,90.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(1723,-2359.697,-1613.555,496.389,0.000,0.000,-90.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(1819,-2353.662,-1609.338,496.389,0.000,0.000,0.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(1819,-2357.348,-1615.128,496.389,0.000,0.000,0.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(1819,-2357.408,-1621.187,496.389,0.000,0.000,0.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(1819,-2357.426,-1608.532,496.389,0.000,0.000,0.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(1723,-2358.686,-1602.511,496.389,0.000,0.000,90.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(1723,-2359.696,-1600.496,496.389,0.000,0.000,-90.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(1819,-2357.457,-1601.987,496.389,0.000,0.000,0.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(1819,-2357.447,-1595.228,496.389,0.000,0.000,0.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(1819,-2362.065,-1595.258,496.389,0.000,0.000,0.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(1819,-2362.082,-1602.021,496.389,0.000,0.000,0.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(1819,-2361.956,-1608.592,496.389,0.000,0.000,0.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(1819,-2361.986,-1615.073,496.389,0.000,0.000,0.000,300.000,300.000);
    tmpobjid = CreateDynamicObjectEx(3928,-2317.318,-1581.543,483.500,0.000,0.000,90.000,300.000,300.000);
    
    //test A:RP
    CreateDynamicObject(9237, 693.26129, -1908.64380, 2.11156,   0.00000, 0.00000, 0.00000);

	// FBI HQ Interior (Main)
    objectid = CreateDynamicObject(19377,-501.250,300.000,2000.000,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19377,-511.745,299.998,2000.000,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19461,-505.165,306.329,1999.339,324.000,0.000,180.000);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19397,-495.646,309.271,2001.836,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19377,-490.750,300.000,2000.000,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19461,-489.238,309.261,2001.836,0.000,0.000,89.994);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19377,-501.250,314.014,2003.411,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19377,-490.750,314.013,2003.499,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19377,-490.750,290.365,2000.000,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19377,-501.250,290.366,2000.000,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19377,-511.746,290.365,2000.000,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19380,-511.746,314.016,2008.671,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(18762,-496.893,309.690,2006.087,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-505.575,309.691,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(19377,-511.745,309.628,2000.000,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19461,-497.308,306.327,1999.340,323.992,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19461,-505.167,314.022,2001.836,0.000,0.000,359.989);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19397,-506.836,309.271,2001.836,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19377,-501.250,314.011,2003.500,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19377,-511.745,314.014,2003.499,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19377,-490.750,309.628,2000.000,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19377,-501.250,309.628,2000.000,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19461,-513.241,309.271,2001.836,0.000,0.000,89.994);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(18762,-521.362,309.688,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-485.183,309.696,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(19461,-513.241,309.281,2010.333,0.000,179.994,89.994);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19380,-501.244,314.016,2008.671,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19461,-503.610,309.284,2010.332,0.000,179.994,89.994);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19461,-493.979,309.285,2010.332,0.000,179.994,89.994);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19461,-484.352,309.285,2010.332,0.000,179.994,89.994);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19380,-511.745,299.998,2012.168,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-511.746,290.365,2012.168,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-511.745,309.628,2012.168,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-501.250,290.365,2012.168,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-501.250,299.998,2012.168,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-501.250,309.628,2012.168,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-490.750,299.998,2012.168,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-490.750,290.365,2012.168,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-490.750,309.628,2012.168,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19379,-516.906,290.367,2015.834,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19379,-516.906,299.998,2015.834,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19379,-516.906,309.628,2015.834,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19379,-485.587,300.000,2015.834,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19379,-485.587,290.368,2015.834,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19379,-485.587,309.628,2015.834,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19379,-512.177,285.639,2005.337,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19379,-502.547,285.638,2005.337,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19379,-492.917,285.637,2005.337,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19379,-483.285,285.636,2005.337,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19379,-512.177,285.639,2015.834,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19379,-502.547,285.638,2015.834,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19379,-492.917,285.637,2015.834,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19379,-483.285,285.636,2015.834,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19465,-501.250,331.913,2006.139,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(18762,-521.362,313.771,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-505.575,313.771,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-505.575,313.771,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-496.894,313.771,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-485.183,313.771,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(19464,-505.205,317.205,2006.136,0.000,0.000,180.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-497.265,317.200,2006.136,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-513.122,331.913,2006.136,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-495.324,331.917,2006.136,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-515.969,314.357,2006.136,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19377,-501.244,323.640,2003.500,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19377,-511.745,323.640,2003.500,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19377,-490.750,323.640,2003.500,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19465,-497.265,323.135,2006.139,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19465,-505.205,323.138,2006.139,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-497.265,329.071,2006.136,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-505.204,329.062,2006.136,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19377,-490.750,327.220,2003.498,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19377,-501.244,327.220,2003.498,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19377,-511.745,327.220,2003.498,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19465,-501.250,314.357,2006.139,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-495.313,314.357,2006.136,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-507.186,314.358,2006.136,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-492.471,334.757,2006.136,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-510.026,334.755,2001.041,0.000,180.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-492.470,340.690,2006.136,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-510.026,334.755,2006.136,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-507.186,331.913,2006.136,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19380,-490.750,314.016,2008.668,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-490.750,323.640,2008.668,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-501.244,323.640,2008.671,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-511.745,323.640,2008.671,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-490.750,333.265,2008.668,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-501.244,333.265,2008.671,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-511.745,333.265,2008.671,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-511.745,342.893,2008.671,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-501.244,342.893,2008.671,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-490.750,342.893,2008.668,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19461,-516.892,314.175,2001.836,0.000,0.000,359.994);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19377,-511.745,319.259,2000.000,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19377,-501.250,319.260,2000.000,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19377,-490.750,319.260,2000.000,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19461,-512.164,318.903,2001.836,0.000,0.000,89.994);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19461,-502.536,318.903,2001.836,0.000,0.000,89.994);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19461,-492.907,318.902,2001.836,0.000,0.000,89.994);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19461,-483.278,318.903,2001.836,0.000,0.000,89.994);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19461,-497.298,314.188,2001.836,0.000,0.000,359.989);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19461,-485.596,314.180,2001.836,0.000,0.000,359.989);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19380,-510.503,314.175,2003.411,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-520.994,314.024,2003.411,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-491.967,314.178,2003.411,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-481.475,314.173,2003.411,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19464,-489.377,331.913,2006.136,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-515.969,329.071,2006.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-486.535,329.070,2006.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-486.535,323.135,2006.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-486.535,317.200,2006.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-515.969,317.200,2006.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-489.376,314.357,2006.136,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-515.969,323.135,2006.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-513.122,314.358,2006.136,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19446,-496.398,333.779,2003.498,0.000,90.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-506.028,333.778,2003.498,0.000,90.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-498.790,338.506,1999.418,325.500,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-503.687,338.506,1999.418,325.497,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-496.397,336.329,2002.829,0.000,90.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-506.028,336.329,2002.829,0.000,90.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-498.790,341.059,1998.749,325.497,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-503.690,341.059,1998.750,325.497,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-496.398,338.877,2002.162,0.000,90.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-506.028,338.876,2002.162,0.000,90.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-503.690,343.605,1998.082,325.497,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-498.789,343.605,1998.082,325.497,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-496.398,341.429,2001.498,0.000,90.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-506.028,341.429,2001.498,0.000,90.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-498.789,346.162,1997.425,325.497,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-503.690,346.162,1997.425,325.497,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-496.398,344.040,2000.836,0.000,90.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-506.028,344.039,2000.836,0.000,90.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-496.400,347.537,2000.836,0.000,90.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-506.033,347.538,2000.836,0.000,90.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-493.884,335.441,2001.837,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-508.586,335.442,2001.837,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-508.592,337.993,2001.167,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-493.888,337.991,2001.167,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-493.891,340.540,2000.500,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-508.596,340.541,2000.500,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-493.885,343.092,1999.836,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-508.591,343.092,1999.836,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-501.235,349.196,1999.836,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-506.036,351.035,2000.836,0.000,90.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-496.401,351.034,2000.836,0.000,90.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-501.235,350.863,2001.498,0.000,90.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-509.028,349.196,1997.425,325.497,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19446,-493.437,349.196,1997.425,325.491,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 14710, "vgshm3int2", "HSV_3carpet2", -1);
	objectid = CreateDynamicObject(19464,-510.026,340.690,2006.136,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-492.470,340.689,2001.041,0.000,179.994,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-510.025,340.689,2001.041,0.000,179.994,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-492.470,334.755,2001.041,0.000,179.994,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-492.470,346.622,2001.041,0.000,179.994,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-510.023,346.626,2001.041,0.000,179.994,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-510.023,352.559,2001.041,0.000,179.994,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-492.468,352.557,2001.041,0.000,179.994,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-492.470,346.622,2006.136,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-492.470,352.557,2006.136,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-510.023,352.556,2006.136,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-510.023,346.622,2006.136,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-495.313,352.738,2001.041,0.000,179.994,269.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-501.250,352.737,2001.041,0.000,179.994,269.989);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-507.186,352.737,2001.041,0.000,179.994,269.989);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-507.186,352.737,2006.136,0.000,0.000,89.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-501.250,352.737,2006.136,0.000,0.000,89.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-495.313,352.737,2006.136,0.000,0.000,89.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19380,-490.748,352.529,2008.668,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-501.244,352.529,2008.671,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-511.745,352.529,2008.671,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(18762,-510.929,299.998,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-510.929,299.998,2001.087,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-510.929,299.998,2011.078,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-510.929,290.367,2001.087,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-510.929,290.367,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-510.929,290.367,2011.078,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-491.435,299.998,2001.087,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-491.435,299.998,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-491.435,299.998,2011.078,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-491.435,290.367,2001.087,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-491.436,290.367,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-491.435,290.367,2011.078,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(19359,-488.410,285.642,2002.609,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(19359,-488.409,285.642,2006.104,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(19359,-488.408,285.643,2009.598,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(19359,-494.394,285.643,2009.598,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(19359,-494.393,285.642,2002.609,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(19359,-494.393,285.643,2006.104,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(19359,-513.984,285.643,2009.598,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(19359,-513.983,285.643,2002.609,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(19359,-513.983,285.643,2006.104,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(19359,-507.854,285.643,2009.598,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(19359,-507.853,285.643,2002.609,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(19359,-507.852,285.643,2006.104,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(19359,-501.251,285.643,2006.104,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(19359,-501.250,285.642,2009.598,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(18762,-504.367,295.658,2011.078,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-497.747,295.658,2001.087,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-504.366,295.658,2001.087,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-497.747,295.658,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-497.747,295.658,2011.078,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-504.366,295.658,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(970,-508.135,309.213,2004.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 3820, "boxhses_sfsx", "ws_ irongate_white", 0);
	objectid = CreateDynamicObject(970,-512.234,309.216,2004.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 3820, "boxhses_sfsx", "ws_ irongate_white", 0);
	objectid = CreateDynamicObject(970,-515.630,309.231,2004.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 3820, "boxhses_sfsx", "ws_ irongate_white", 0);
	objectid = CreateDynamicObject(970,-494.348,309.209,2004.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 3820, "boxhses_sfsx", "ws_ irongate_white", 0);
	objectid = CreateDynamicObject(970,-490.190,309.212,2004.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 3820, "boxhses_sfsx", "ws_ irongate_white", 0);
	objectid = CreateDynamicObject(970,-487.759,309.209,2004.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 3820, "boxhses_sfsx", "ws_ irongate_white", 0);
	objectid = CreateDynamicObject(19461,-485.595,300.000,2001.836,0.000,0.000,359.983);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19461,-485.595,290.368,2001.836,0.000,0.000,359.983);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19461,-485.595,309.628,2010.332,0.000,179.994,359.983);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19461,-485.595,290.368,2010.332,0.000,179.994,359.983);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19461,-485.595,300.000,2010.332,0.000,179.994,359.978);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19461,-485.595,309.628,2001.836,0.000,0.000,359.983);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19461,-516.888,309.628,2001.836,0.000,0.000,359.983);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19461,-516.888,300.000,2001.836,0.000,0.000,359.989);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19461,-516.888,290.368,2001.836,0.000,0.000,359.989);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19461,-516.888,290.368,2010.332,0.000,179.994,359.983);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19461,-516.888,300.000,2010.332,0.000,179.994,359.983);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19461,-516.888,309.628,2010.332,0.000,179.994,359.983);
	SetDynamicObjectMaterial(objectid, 0, 7420, "vgnglfcrse1", "hotel2base2_256", -1);
	objectid = CreateDynamicObject(19377,-480.429,309.628,2003.499,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19377,-480.429,300.000,2003.499,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19377,-480.429,290.368,2003.499,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19464,-483.450,314.358,2006.136,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(18762,-485.183,299.998,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-485.182,290.367,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-480.985,313.734,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-480.985,309.695,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-480.985,299.998,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-480.985,290.367,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(19464,-521.981,301.203,2006.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19465,-521.981,295.270,2006.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-521.980,289.337,2006.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-521.981,283.406,2006.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19380,-480.429,309.628,2008.667,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-480.429,300.000,2008.668,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-480.429,290.368,2008.668,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19377,-469.927,290.367,2003.499,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19464,-521.981,307.136,2006.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-521.981,313.062,2006.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19377,-469.927,300.000,2003.499,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19464,-468.744,295.270,2006.136,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-468.744,289.337,2006.136,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-471.581,286.497,2006.136,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-477.519,286.497,2006.136,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19380,-469.927,290.368,2008.668,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-469.927,300.000,2008.668,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(970,-516.818,307.128,2004.136,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 3820, "boxhses_sfsx", "ws_ irongate_white", 0);
	objectid = CreateDynamicObject(970,-516.818,302.960,2004.136,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 3820, "boxhses_sfsx", "ws_ irongate_white", 0);
	objectid = CreateDynamicObject(970,-516.818,298.783,2004.136,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 3820, "boxhses_sfsx", "ws_ irongate_white", 0);
	objectid = CreateDynamicObject(970,-516.818,294.606,2004.136,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 3820, "boxhses_sfsx", "ws_ irongate_white", 0);
	objectid = CreateDynamicObject(970,-516.818,290.430,2004.136,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 3820, "boxhses_sfsx", "ws_ irongate_white", 0);
	objectid = CreateDynamicObject(970,-516.818,286.253,2004.136,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 3820, "boxhses_sfsx", "ws_ irongate_white", 0);
	objectid = CreateDynamicObject(19359,-471.091,286.545,2006.104,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(19359,-478.390,286.542,2006.104,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(19359,-474.742,286.538,2006.104,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(19377,-522.054,309.628,2003.503,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19377,-522.054,300.000,2003.499,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19377,-522.054,290.368,2003.499,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19379,-521.804,285.638,2005.337,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19380,-522.054,309.628,2008.667,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-522.054,300.000,2008.668,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-522.054,290.368,2008.668,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(18762,-521.362,299.998,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-521.362,290.367,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(19464,-521.903,314.358,2006.136,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(18762,-517.299,313.771,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-517.299,309.688,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-517.299,299.998,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-517.299,290.367,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(19464,-480.611,313.062,2006.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-480.611,307.136,2006.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-480.611,301.202,2006.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19465,-480.610,295.270,2006.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-480.610,289.337,2006.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-480.610,283.405,2006.136,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19377,-532.554,300.000,2003.499,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19377,-532.554,290.368,2003.499,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 16640, "a51", "ws_stationfloor", -1);
	objectid = CreateDynamicObject(19464,-525.072,286.497,2006.136,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-531.002,297.161,2006.136,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-533.844,289.337,2006.136,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-533.844,295.270,2006.136,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-525.072,297.161,2006.136,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19464,-531.002,286.496,2006.136,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ab_kitchunit2", -1);
	objectid = CreateDynamicObject(19380,-532.554,300.000,2008.668,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19380,-532.554,290.368,2008.668,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14526, "sweetsmain", "ah_whitpanelceil", -1);
	objectid = CreateDynamicObject(19359,-524.174,286.545,2006.104,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(19359,-531.679,286.537,2006.104,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(19359,-527.971,286.536,2006.104,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 10041, "archybuild10", "bank_sfe2", -1);
	objectid = CreateDynamicObject(19395,-506.837,309.284,2001.836,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 8486, "ballys02", "walltiles_128", -1);
	objectid = CreateDynamicObject(19459,-513.254,309.284,2001.836,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 8486, "ballys02", "walltiles_128", -1);
	objectid = CreateDynamicObject(19459,-513.545,314.021,2001.836,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 8486, "ballys02", "walltiles_128", -1);
	objectid = CreateDynamicObject(19459,-505.176,314.189,2001.836,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 8486, "ballys02", "walltiles_128", -1);
	objectid = CreateDynamicObject(19459,-510.075,318.891,2001.836,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 8486, "ballys02", "walltiles_128", -1);
	objectid = CreateDynamicObject(970,-485.663,307.128,2004.136,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 3820, "boxhses_sfsx", "ws_ irongate_white", 0);
	objectid = CreateDynamicObject(970,-485.665,302.960,2004.136,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 3820, "boxhses_sfsx", "ws_ irongate_white", 0);
	objectid = CreateDynamicObject(970,-485.665,298.783,2004.136,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 3820, "boxhses_sfsx", "ws_ irongate_white", 0);
	objectid = CreateDynamicObject(970,-485.665,294.606,2004.136,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 3820, "boxhses_sfsx", "ws_ irongate_white", 0);
	objectid = CreateDynamicObject(970,-485.664,290.430,2004.136,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 3820, "boxhses_sfsx", "ws_ irongate_white", 0);
	objectid = CreateDynamicObject(970,-485.664,286.253,2004.136,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 3820, "boxhses_sfsx", "ws_ irongate_white", 0);
	objectid = CreateDynamicObject(1502,-521.905,294.505,2003.579,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 1, 3603, "bevmans01_la", "lasbevcit7", 0);
	objectid = CreateDynamicObject(1502,-480.641,294.502,2003.578,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 1, 3603, "bevmans01_la", "lasbevcit7", 0);
	objectid = CreateDynamicObject(1502,-500.484,314.325,2003.583,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 1, 3603, "bevmans01_la", "lasbevcit7", 0);
	objectid = CreateDynamicObject(1502,-506.050,309.289,2000.079,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 1, 3603, "bevmans01_la", "lasbevcit7", 0);
	objectid = CreateDynamicObject(1502,-494.860,309.286,2000.079,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 1, 3603, "bevmans01_la", "lasbevcit7", 0);
	objectid = CreateDynamicObject(19172,-513.949,314.229,2005.329,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 2266, "picture_frame", "CJ_PAINTING14", -1);
	objectid = CreateDynamicObject(19172,-508.878,314.239,2005.329,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 2266, "picture_frame", "CJ_PAINTING11", -1);
	objectid = CreateDynamicObject(19172,-493.697,314.230,2005.329,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 2266, "picture_frame", "CJ_PAINTING28", -1);
	objectid = CreateDynamicObject(19172,-488.295,314.232,2005.329,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 2266, "picture_frame", "CJ_PAINTING30", -1);
	objectid = CreateDynamicObject(19459,-506.851,318.292,2001.836,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 8486, "ballys02", "walltiles_128", -1);
	objectid = CreateDynamicObject(1492,-506.777,313.790,2000.162,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 1, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 2, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 3, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 4, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	objectid = CreateDynamicObject(1492,-508.450,313.790,2000.162,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 1, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 2, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 3, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 4, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	objectid = CreateDynamicObject(19459,-508.526,318.292,2001.836,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 8486, "ballys02", "walltiles_128", -1);
	objectid = CreateDynamicObject(1492,-510.123,313.790,2000.162,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 1, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 2, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 3, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 4, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	objectid = CreateDynamicObject(19459,-510.199,318.292,2001.836,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 8486, "ballys02", "walltiles_128", -1);
	objectid = CreateDynamicObject(1492,-511.795,313.790,2000.162,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 1, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 2, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 3, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 4, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	objectid = CreateDynamicObject(19459,-511.869,318.292,2001.836,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 8486, "ballys02", "walltiles_128", -1);
	objectid = CreateDynamicObject(1492,-513.469,313.790,2000.162,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 1, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 2, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 3, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 4, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	objectid = CreateDynamicObject(19452,-501.222,290.527,2000.009,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14534, "ab_wooziea", "ab_tileDiamond", -1);
	objectid = CreateDynamicObject(19452,-501.222,300.160,2000.009,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14534, "ab_wooziea", "ab_tileDiamond", -1);
	objectid = CreateDynamicObject(19452,-501.190,314.020,2003.505,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14534, "ab_wooziea", "ab_tileDiamond", -1);
	objectid = CreateDynamicObject(19452,-501.190,323.650,2003.505,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14534, "ab_wooziea", "ab_tileDiamond", -1);
	objectid = CreateDynamicObject(19452,-501.184,327.217,2003.501,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14534, "ab_wooziea", "ab_tileDiamond", -1);
	objectid = CreateDynamicObject(1492,-495.692,313.790,2000.162,0.000,0.000,180.000);
	SetDynamicObjectMaterial(objectid, 0, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 1, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 2, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 3, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 4, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	objectid = CreateDynamicObject(19459,-497.287,314.184,2001.836,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 8486, "ballys02", "walltiles_128", -1);
	objectid = CreateDynamicObject(19459,-492.385,318.899,2001.836,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 8486, "ballys02", "walltiles_128", -1);
	objectid = CreateDynamicObject(19459,-495.619,318.292,2001.836,0.000,0.000,180.000);
	SetDynamicObjectMaterial(objectid, 0, 8486, "ballys02", "walltiles_128", -1);
	objectid = CreateDynamicObject(1492,-494.018,313.790,2000.162,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 1, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 2, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 3, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 4, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	objectid = CreateDynamicObject(19459,-493.944,318.292,2001.836,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 8486, "ballys02", "walltiles_128", -1);
	objectid = CreateDynamicObject(1492,-492.346,313.790,2000.162,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 1, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 2, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 3, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 4, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	objectid = CreateDynamicObject(19459,-492.270,318.292,2001.836,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 8486, "ballys02", "walltiles_128", -1);
	objectid = CreateDynamicObject(1492,-490.671,313.790,2000.162,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 1, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 2, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 3, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 4, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	objectid = CreateDynamicObject(19459,-490.596,318.292,2001.836,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 8486, "ballys02", "walltiles_128", -1);
	objectid = CreateDynamicObject(1492,-488.997,313.790,2000.162,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 1, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 2, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 3, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	SetDynamicObjectMaterial(objectid, 4, 14789, "ab_sfgymmain", "ab_panelWall1", 0);
	objectid = CreateDynamicObject(19459,-488.929,314.179,2001.836,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 8486, "ballys02", "walltiles_128", -1);
	objectid = CreateDynamicObject(19459,-489.222,309.282,2001.836,0.000,0.000,89.994);
	SetDynamicObjectMaterial(objectid, 0, 8486, "ballys02", "walltiles_128", -1);
	objectid = CreateDynamicObject(19395,-495.645,309.282,2001.836,0.000,0.000,270.000);
	SetDynamicObjectMaterial(objectid, 0, 8486, "ballys02", "walltiles_128", -1);
	objectid = CreateDynamicObject(18762,-505.825,319.372,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-513.284,326.922,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-505.833,326.923,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(18762,-513.284,319.434,2006.084,0.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 15048, "labigsave", "AH_fancyceil", -1);
	objectid = CreateDynamicObject(1502,-505.127,322.368,2003.578,0.000,0.000,89.994);
	SetDynamicObjectMaterial(objectid, 1, 3603, "bevmans01_la", "lasbevcit7", 0);
	objectid = CreateDynamicObject(19353,-491.762,331.872,2006.168,90.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 12853, "cunte_gas01", "starspangban1_256", -1);
	objectid = CreateDynamicObject(1502,-497.295,322.369,2003.578,0.000,0.000,89.994);
	SetDynamicObjectMaterial(objectid, 0, 3603, "bevmans01_la", "lasbevcit7", 0);
	SetDynamicObjectMaterial(objectid, 1, 3603, "bevmans01_la", "lasbevcit7", 0);
	objectid = CreateDynamicObject(1502,-500.485,331.878,2003.583,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 1, 3603, "bevmans01_la", "lasbevcit7", 0);
	objectid = CreateDynamicObject(19445,-475.669,297.016,2002.682,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14788, "ab_sfgymbits01", "lockers", 0);
	objectid = CreateDynamicObject(19445,-466.037,297.016,2002.682,0.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14788, "ab_sfgymbits01", "lockers", 0);
	objectid = CreateDynamicObject(19445,-475.669,297.016,2009.530,0.000,180.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14581, "ab_mafiasuitea", "ab_wood01", 0);
	objectid = CreateDynamicObject(19445,-466.044,297.016,2009.530,0.000,179.994,90.000);
	SetDynamicObjectMaterial(objectid, 0, 14581, "ab_mafiasuitea", "ab_wood01", 0);
	objectid = CreateDynamicObject(19445,-480.397,301.742,2005.334,0.000,0.000,180.000);
	SetDynamicObjectMaterial(objectid, 0, 14788, "ab_sfgymbits01", "lockers", 0);
	objectid = CreateDynamicObject(19445,-480.399,301.740,2006.837,0.000,180.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14581, "ab_mafiasuitea", "ab_wood01", 0);
	objectid = CreateDynamicObject(19445,-468.960,301.743,2005.334,0.000,0.000,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14788, "ab_sfgymbits01", "lockers", 0);
	objectid = CreateDynamicObject(19445,-468.957,301.743,2006.837,0.000,179.994,179.994);
	SetDynamicObjectMaterial(objectid, 0, 14788, "ab_sfgymbits01", "lockers", 0);
	objectid = CreateDynamicObject(19445,-475.697,301.890,2005.334,0.000,0.000,269.994);
	SetDynamicObjectMaterial(objectid, 0, 3925, "weemap", "skyclouds", 0);
	objectid = CreateDynamicObject(19445,-466.069,301.889,2005.334,0.000,0.000,269.989);
	SetDynamicObjectMaterial(objectid, 0, 14581, "ab_mafiasuitea", "ab_wood01", 0);
	objectid = CreateDynamicObject(19445,-475.490,301.894,2006.837,0.000,179.994,269.994);
	SetDynamicObjectMaterial(objectid, 0, 3925, "weemap", "skyclouds", 0);
	objectid = CreateDynamicObject(19445,-465.865,301.894,2006.837,0.000,179.994,269.989);
	SetDynamicObjectMaterial(objectid, 0, 3925, "weemap", "skyclouds", 0);
	objectid = CreateDynamicObject(19375,-475.283,301.747,2004.340,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14788, "ab_sfgymbits01", "lockers", 0);
	objectid = CreateDynamicObject(19375,-464.786,301.917,2004.340,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14788, "ab_sfgymbits01", "lockers", 0);
	objectid = CreateDynamicObject(19375,-464.785,301.917,2007.869,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14788, "ab_sfgymbits01", "lockers", 0);
	objectid = CreateDynamicObject(19375,-475.283,301.746,2007.869,0.000,90.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14788, "ab_sfgymbits01", "lockers", 0);
	objectid = CreateDynamicObject(953,-474.304,300.665,2005.326,8.000,0.000,0.000);
	SetDynamicObjectMaterial(objectid, 0, 14788, "ab_sfgymbits01", "lockers", 0);
	objectid = CreateDynamicObject(19353,-531.632,297.121,2005.936,90.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 12853, "cunte_gas01", "starspangban1_256", -1);
	objectid = CreateDynamicObject(19353,-524.247,297.117,2005.936,90.000,0.000,90.000);
	SetDynamicObjectMaterial(objectid, 0, 12853, "cunte_gas01", "starspangban1_256", -1);
	objectid = CreateDynamicObject(19360,-501.199,285.668,2001.835,0.000,0.000,-90.199);
	SetDynamicObjectMaterial(objectid, 0, 9524, "blokmodb", "lombard_build5_3", -1);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	CreateDynamicObject(14394,-501.250,305.927,2000.889,0.000,0.000,90.000);
	CreateDynamicObject(14394,-501.250,308.159,2002.509,0.000,0.000,90.000);
	CreateDynamicObject(14387,-501.235,336.647,2002.593,0.000,0.000,90.000);
	CreateDynamicObject(14387,-501.235,339.197,2001.926,0.000,0.000,90.000);
	CreateDynamicObject(14387,-501.235,341.742,2001.256,0.000,0.000,90.000);
	CreateDynamicObject(14387,-501.235,344.316,2000.593,0.000,0.000,90.000);
	CreateDynamicObject(14387,-507.170,351.622,2000.587,0.000,0.000,180.000);
	CreateDynamicObject(14387,-495.300,351.640,2000.587,0.000,0.000,359.994);
	CreateDynamicObject(2173,-496.055,342.658,2001.583,0.000,0.000,0.000);
	CreateDynamicObject(2173,-509.424,342.660,2001.583,0.000,0.000,0.000);
	CreateDynamicObject(2173,-494.095,342.658,2001.583,0.000,0.000,0.000);
	CreateDynamicObject(2173,-509.424,334.957,2003.583,0.000,0.000,0.000);
	CreateDynamicObject(2173,-498.019,340.078,2002.249,0.000,0.000,0.000);
	CreateDynamicObject(2173,-498.019,337.529,2002.916,0.000,0.000,0.000);
	CreateDynamicObject(2173,-496.055,340.078,2002.249,0.000,0.000,0.000);
	CreateDynamicObject(2173,-496.055,337.529,2002.916,0.000,0.000,0.000);
	CreateDynamicObject(2173,-496.055,334.956,2003.583,0.000,0.000,0.000);
	CreateDynamicObject(2173,-494.095,340.078,2002.249,0.000,0.000,0.000);
	CreateDynamicObject(2173,-494.095,334.956,2003.583,0.000,0.000,0.000);
	CreateDynamicObject(2173,-498.018,342.657,2001.583,0.000,0.000,0.000);
	CreateDynamicObject(2173,-507.460,342.658,2001.583,0.000,0.000,0.000);
	CreateDynamicObject(2173,-505.497,342.658,2001.583,0.000,0.000,0.000);
	CreateDynamicObject(2173,-505.497,340.078,2002.249,0.000,0.000,0.000);
	CreateDynamicObject(2173,-505.497,337.529,2002.916,0.000,0.000,0.000);
	CreateDynamicObject(2173,-498.018,334.956,2003.583,0.000,0.000,0.000);
	CreateDynamicObject(2173,-507.460,340.078,2002.249,0.000,0.000,0.000);
	CreateDynamicObject(2173,-507.460,337.529,2002.916,0.000,0.000,0.000);
	CreateDynamicObject(2173,-505.496,334.956,2003.583,0.000,0.000,0.000);
	CreateDynamicObject(2173,-509.424,340.078,2002.249,0.000,0.000,0.000);
	CreateDynamicObject(2173,-509.424,337.529,2002.916,0.000,0.000,0.000);
	CreateDynamicObject(2173,-507.460,334.956,2003.583,0.000,0.000,0.000);
	CreateDynamicObject(2173,-502.898,349.690,2001.583,0.000,0.000,180.000);
	CreateDynamicObject(1722,-497.350,340.934,2001.583,0.000,0.000,0.000);
	CreateDynamicObject(2205,-500.601,349.696,2001.583,0.000,0.000,179.994);
	CreateDynamicObject(2173,-498.647,349.679,2001.583,0.000,0.000,179.994);
	CreateDynamicObject(11245,-505.993,351.096,2006.917,0.000,0.000,270.000);
	CreateDynamicObject(11245,-502.833,351.096,2006.917,0.000,0.000,270.000);
	CreateDynamicObject(11245,-500.005,351.096,2006.917,0.000,0.000,270.000);
	CreateDynamicObject(11245,-496.872,351.096,2006.917,0.000,0.000,270.000);
	CreateDynamicObject(1722,-495.657,340.899,2001.583,0.000,0.000,0.000);
	CreateDynamicObject(1722,-493.691,338.308,2002.249,0.000,0.000,0.000);
	CreateDynamicObject(1722,-493.663,341.013,2001.583,0.000,0.000,0.000);
	CreateDynamicObject(2173,-494.094,337.529,2002.916,0.000,0.000,0.000);
	CreateDynamicObject(1722,-495.647,338.295,2002.249,0.000,0.000,0.000);
	CreateDynamicObject(1722,-497.572,338.325,2002.249,0.000,0.000,0.000);
	CreateDynamicObject(1722,-505.158,338.226,2002.249,0.000,0.000,0.000);
	CreateDynamicObject(1722,-506.966,338.216,2002.249,0.000,0.000,0.000);
	CreateDynamicObject(1722,-508.876,338.238,2002.249,0.000,0.000,0.000);
	CreateDynamicObject(1722,-508.858,335.632,2002.916,0.000,0.000,0.000);
	CreateDynamicObject(1722,-507.046,335.575,2002.916,0.000,0.000,0.000);
	CreateDynamicObject(1722,-505.011,335.623,2002.916,0.000,0.000,0.000);
	CreateDynamicObject(1722,-504.949,332.985,2003.583,0.000,0.000,0.000);
	CreateDynamicObject(1722,-507.118,332.958,2003.583,0.000,0.000,0.000);
	CreateDynamicObject(1722,-497.503,332.859,2003.583,0.000,0.000,0.000);
	CreateDynamicObject(1722,-509.057,332.876,2003.583,0.000,0.000,0.000);
	CreateDynamicObject(1722,-497.505,335.625,2002.916,0.000,0.000,0.000);
	CreateDynamicObject(1722,-495.518,332.871,2003.583,0.000,0.000,0.000);
	CreateDynamicObject(1722,-493.611,332.895,2003.583,0.000,0.000,0.000);
	CreateDynamicObject(1722,-495.479,335.597,2002.916,0.000,0.000,0.000);
	CreateDynamicObject(1722,-493.690,335.589,2002.916,0.000,0.000,0.000);
	CreateDynamicObject(1722,-507.079,340.735,2001.583,0.000,0.000,0.000);
	CreateDynamicObject(1722,-505.014,340.826,2001.583,0.000,0.000,0.000);
	CreateDynamicObject(1722,-508.930,340.778,2001.583,0.000,0.000,0.000);
	CreateDynamicObject(1715,-503.514,351.144,2001.583,0.000,0.000,0.000);
	CreateDynamicObject(1714,-501.346,351.187,2001.583,0.000,0.000,0.000);
	CreateDynamicObject(1722,-501.292,296.928,2000.094,0.000,0.000,189.997);
	CreateDynamicObject(2008,-505.821,325.097,2003.587,0.000,0.000,179.994);
	CreateDynamicObject(2207,-502.128,295.188,2000.086,0.000,0.000,0.000);
	CreateDynamicObject(1239,-501.190,295.062,2000.477,0.000,0.000,0.000);
	CreateDynamicObject(1726,-509.894,291.384,2000.086,0.000,0.000,180.000);
	CreateDynamicObject(1726,-511.944,298.979,2000.086,0.000,0.000,0.000);
	CreateDynamicObject(1726,-509.924,301.009,2000.086,0.000,0.000,179.994);
	CreateDynamicObject(1726,-511.902,289.332,2000.086,0.000,0.000,0.000);
	CreateDynamicObject(1726,-492.449,289.346,2000.086,0.000,0.000,0.000);
	CreateDynamicObject(1726,-492.454,298.984,2000.086,0.000,0.000,0.000);
	CreateDynamicObject(1726,-490.440,301.019,2000.086,0.000,0.000,179.994);
	CreateDynamicObject(1726,-490.416,291.381,2000.086,0.000,0.000,179.994);
	CreateDynamicObject(1808,-510.232,299.927,2000.086,0.000,0.000,90.000);
	CreateDynamicObject(1808,-510.252,290.338,2000.086,0.000,0.000,90.000);
	CreateDynamicObject(1808,-490.769,290.341,2000.086,0.000,0.000,90.000);
	CreateDynamicObject(1808,-490.752,299.972,2000.086,0.000,0.000,90.000);
	CreateDynamicObject(1808,-511.598,300.029,2000.086,0.000,0.000,270.000);
	CreateDynamicObject(1808,-511.592,290.369,2000.086,0.000,0.000,270.000);
	CreateDynamicObject(1808,-492.049,290.372,2000.086,0.000,0.000,270.000);
	CreateDynamicObject(1808,-492.131,300.027,2000.086,0.000,0.000,270.000);
	CreateDynamicObject(11245,-505.480,308.692,2010.516,0.000,0.000,270.000);
	CreateDynamicObject(11245,-502.476,308.692,2010.516,0.000,0.000,270.000);
	CreateDynamicObject(11245,-499.639,308.692,2010.516,0.000,0.000,270.000);
	CreateDynamicObject(11245,-496.802,308.692,2010.516,0.000,0.000,270.000);
	CreateDynamicObject(2206,-475.517,288.815,2003.584,0.000,0.000,359.989);
	CreateDynamicObject(1714,-474.475,287.171,2003.584,0.000,0.000,200.000);
	CreateDynamicObject(14455,-469.067,287.296,2005.256,0.000,0.000,90.000);
	CreateDynamicObject(14455,-533.556,291.635,2005.256,0.000,0.000,270.000);
	CreateDynamicObject(1763,-472.888,291.811,2003.584,0.000,0.000,270.000);
	CreateDynamicObject(1763,-475.950,290.536,2003.584,0.000,0.000,90.000);
	CreateDynamicObject(1763,-475.067,293.049,2003.584,0.000,0.000,0.000);
	CreateDynamicObject(2614,-468.920,289.483,2007.767,0.000,0.000,270.000);
	CreateDynamicObject(2614,-480.441,289.441,2007.767,0.000,0.000,90.000);
	CreateDynamicObject(2206,-528.786,288.816,2003.584,0.000,0.000,359.989);
	CreateDynamicObject(2828,-475.322,288.976,2004.519,0.000,0.000,209.998);
	CreateDynamicObject(2357,-527.883,291.408,2003.979,0.000,0.000,90.000);
	CreateDynamicObject(1714,-527.895,287.085,2003.584,0.000,0.000,199.995);
	CreateDynamicObject(14455,-480.341,291.641,2005.256,0.000,0.000,270.000);
	CreateDynamicObject(14455,-522.257,287.295,2005.256,0.000,0.000,90.000);
	CreateDynamicObject(1715,-498.954,351.036,2001.583,0.000,0.000,0.000);
	CreateDynamicObject(1715,-526.072,289.988,2003.584,0.000,0.000,270.000);
	CreateDynamicObject(1715,-525.940,291.398,2003.584,0.000,0.000,270.000);
	CreateDynamicObject(1715,-526.010,292.669,2003.584,0.000,0.000,270.000);
	CreateDynamicObject(1715,-529.577,292.638,2003.584,0.000,0.000,90.000);
	CreateDynamicObject(1715,-529.580,291.351,2003.584,0.000,0.000,90.000);
	CreateDynamicObject(1715,-529.591,289.975,2003.584,0.000,0.000,90.000);
	CreateDynamicObject(1715,-527.818,294.717,2003.584,0.000,0.000,0.000);
	CreateDynamicObject(14662,-510.126,311.131,2001.984,0.000,0.000,0.000);
	CreateDynamicObject(14662,-514.033,311.130,2001.985,0.000,0.000,0.000);
	CreateDynamicObject(14629,-509.615,302.830,2011.079,0.000,0.000,90.000);
	CreateDynamicObject(1999,-506.763,314.989,2003.584,0.000,0.000,180.000);
	CreateDynamicObject(2009,-507.825,317.864,2003.584,0.000,0.000,0.000);
	CreateDynamicObject(2183,-510.899,328.456,2003.587,0.000,0.000,0.000);
	CreateDynamicObject(2207,-492.803,326.635,2003.587,0.000,0.000,0.000);
	CreateDynamicObject(2207,-490.949,328.561,2003.587,0.000,0.000,180.000);
	CreateDynamicObject(2608,-505.558,317.914,2004.296,0.000,0.000,270.000);
	CreateDynamicObject(2161,-515.356,331.790,2003.587,0.000,0.000,0.000);
	CreateDynamicObject(2162,-512.247,331.799,2003.587,0.000,0.000,0.000);
	CreateDynamicObject(2163,-510.473,331.782,2003.587,0.000,0.000,0.000);
	CreateDynamicObject(2164,-514.021,331.776,2003.587,0.000,0.000,0.000);
	CreateDynamicObject(2167,-513.372,314.407,2003.584,0.000,0.000,180.000);
	CreateDynamicObject(2197,-514.127,315.799,2003.584,0.000,0.000,180.000);
	CreateDynamicObject(1715,-493.541,325.932,2003.587,0.000,0.000,132.000);
	CreateDynamicObject(2008,-506.838,321.281,2003.587,0.000,0.000,359.994);
	CreateDynamicObject(3857,-509.070,319.359,2006.499,0.000,0.000,45.000);
	CreateDynamicObject(3857,-509.069,319.358,2006.499,0.000,0.000,44.994);
	CreateDynamicObject(3857,-516.778,319.446,2008.837,0.000,0.000,44.989);
	CreateDynamicObject(3857,-516.778,319.446,2008.837,0.000,0.000,44.989);
	CreateDynamicObject(3857,-509.069,319.358,2006.499,0.000,0.000,224.994);
	CreateDynamicObject(3857,-509.069,319.358,2006.499,0.000,0.000,224.989);
	CreateDynamicObject(1722,-506.522,317.743,2003.584,0.000,0.000,50.000);
	CreateDynamicObject(1722,-507.459,315.569,2003.586,0.000,0.000,159.998);
	CreateDynamicObject(2009,-510.092,317.863,2003.584,0.000,0.000,0.000);
	CreateDynamicObject(2009,-512.293,317.863,2003.584,0.000,0.000,0.000);
	CreateDynamicObject(1999,-509.031,314.998,2003.584,0.000,0.000,179.994);
	CreateDynamicObject(1999,-511.317,314.997,2003.584,0.000,0.000,179.994);
	CreateDynamicObject(1722,-509.278,318.411,2003.584,0.000,0.000,359.998);
	CreateDynamicObject(1722,-511.592,317.627,2003.584,0.000,0.000,349.994);
	CreateDynamicObject(2608,-505.559,316.032,2004.296,0.000,0.000,270.000);
	CreateDynamicObject(3857,-509.222,326.920,2006.499,0.000,0.000,44.994);
	CreateDynamicObject(3857,-509.222,326.919,2006.499,0.000,0.000,44.994);
	CreateDynamicObject(3857,-509.222,326.919,2006.499,0.000,0.000,44.994);
	CreateDynamicObject(3857,-509.222,326.919,2006.499,0.000,0.000,224.994);
	CreateDynamicObject(3857,-509.222,326.919,2006.499,0.000,0.000,224.989);
	CreateDynamicObject(3857,-517.054,326.933,2008.837,0.000,0.000,44.994);
	CreateDynamicObject(3857,-517.054,326.932,2008.837,0.000,0.000,44.989);
	CreateDynamicObject(2197,-514.815,315.803,2003.584,0.000,0.000,179.994);
	CreateDynamicObject(2197,-515.495,315.803,2003.584,0.000,0.000,179.994);
	CreateDynamicObject(1722,-510.372,327.773,2003.584,0.000,0.000,349.991);
	CreateDynamicObject(1722,-508.373,327.274,2003.584,0.000,0.000,19.991);
	CreateDynamicObject(1722,-508.255,330.319,2003.584,0.000,0.000,149.989);
	CreateDynamicObject(1722,-510.285,330.260,2003.584,0.000,0.000,189.985);
	CreateDynamicObject(2162,-508.696,331.799,2003.587,0.000,0.000,0.000);
	CreateDynamicObject(2167,-506.924,331.783,2003.584,0.000,0.000,359.994);
	CreateDynamicObject(2167,-506.005,331.782,2003.584,0.000,0.000,359.989);
	CreateDynamicObject(2737,-505.368,328.770,2004.922,0.000,0.000,270.000);
	CreateDynamicObject(2008,-508.200,325.098,2003.587,0.000,0.000,179.994);
	CreateDynamicObject(2008,-510.575,325.101,2003.587,0.000,0.000,179.994);
	CreateDynamicObject(1722,-506.582,326.195,2003.584,0.000,0.000,169.989);
	CreateDynamicObject(1722,-508.925,326.795,2003.584,0.000,0.000,179.985);
	CreateDynamicObject(1722,-510.858,325.773,2003.584,0.000,0.000,199.983);
	CreateDynamicObject(2008,-509.216,321.290,2003.587,0.000,0.000,359.989);
	CreateDynamicObject(2008,-511.651,321.295,2003.587,0.000,0.000,359.989);
	CreateDynamicObject(1722,-511.217,320.765,2003.584,0.000,0.000,349.978);
	CreateDynamicObject(1722,-508.540,320.782,2003.584,0.000,0.000,9.974);
	CreateDynamicObject(1722,-505.908,319.966,2003.584,0.000,0.000,9.970);
	CreateDynamicObject(1715,-491.830,325.175,2003.587,0.000,0.000,183.997);
	CreateDynamicObject(1715,-489.360,327.700,2003.587,0.000,0.000,273.990);
	CreateDynamicObject(1715,-490.335,329.455,2003.587,0.000,0.000,321.988);
	CreateDynamicObject(1715,-491.915,329.925,2003.587,0.000,0.000,1.987);
	CreateDynamicObject(1715,-493.561,329.118,2003.587,0.000,0.000,49.983);
	CreateDynamicObject(1715,-494.268,327.569,2003.587,0.000,0.000,91.982);
	CreateDynamicObject(14455,-486.839,326.770,2005.256,0.000,0.000,90.000);
	CreateDynamicObject(14455,-497.005,331.117,2005.256,0.000,0.000,270.000);
	CreateDynamicObject(2332,-468.703,287.350,2004.047,0.000,0.000,270.000);
	CreateDynamicObject(2518,-507.915,309.865,2000.086,0.000,0.000,180.000);
	CreateDynamicObject(2518,-509.937,309.868,2000.086,0.000,0.000,179.994);
	CreateDynamicObject(2518,-511.819,309.868,2000.086,0.000,0.000,179.994);
	CreateDynamicObject(14662,-493.548,311.131,2001.985,0.000,0.000,0.000);
	CreateDynamicObject(14662,-489.589,311.131,2001.985,0.000,0.000,0.000);
	CreateDynamicObject(2518,-493.351,309.868,2000.086,0.000,0.000,179.994);
	CreateDynamicObject(2518,-491.321,309.867,2000.086,0.000,0.000,179.994);
	CreateDynamicObject(2518,-489.342,309.868,2000.086,0.000,0.000,179.994);
	CreateDynamicObject(2528,-512.723,318.299,2000.086,0.000,0.000,0.000);
	CreateDynamicObject(2528,-511.057,318.303,2000.086,0.000,0.000,0.000);
	CreateDynamicObject(2528,-509.382,318.315,2000.086,0.000,0.000,0.000);
	CreateDynamicObject(2528,-507.736,318.329,2000.086,0.000,0.000,0.000);
	CreateDynamicObject(2528,-506.044,318.338,2000.086,0.000,0.000,0.000);
	CreateDynamicObject(2528,-496.430,318.316,2000.086,0.000,0.000,0.000);
	CreateDynamicObject(2528,-494.751,318.324,2000.086,0.000,0.000,0.000);
	CreateDynamicObject(2528,-493.079,318.320,2000.086,0.000,0.000,0.000);
	CreateDynamicObject(2528,-491.421,318.313,2000.086,0.000,0.000,0.000);
	CreateDynamicObject(2528,-489.777,318.307,2000.086,0.000,0.000,0.000);
	CreateDynamicObject(18075,-501.157,323.420,2008.584,0.000,0.000,0.000);
	CreateDynamicObject(18075,-497.575,341.566,2008.584,0.000,0.000,0.000);
	CreateDynamicObject(18075,-504.621,341.554,2008.584,0.000,0.000,0.000);
	CreateDynamicObject(18075,-492.025,323.225,2008.584,0.000,0.000,0.000);
	CreateDynamicObject(18075,-512.109,323.089,2008.584,0.000,0.000,90.000);
	CreateDynamicObject(19171,-527.179,297.050,2005.137,90.000,0.000,0.000);
	CreateDynamicObject(19170,-528.677,297.050,2005.136,90.000,0.000,0.000);
	CreateDynamicObject(19169,-527.179,297.050,2006.635,90.000,0.000,0.000);
	CreateDynamicObject(19168,-528.677,297.050,2006.635,90.000,0.000,0.000);
	CreateDynamicObject(3858,-473.204,296.937,2007.251,0.000,0.000,225.000);
	CreateDynamicObject(3858,-473.204,296.936,2007.251,0.000,0.000,225.000);
	CreateDynamicObject(7616,-410.319,364.022,2003.693,0.000,0.000,0.000);
	CreateDynamicObject(758,-477.954,300.295,2004.840,0.000,0.000,260.000);
	CreateDynamicObject(746,-470.444,300.428,2004.855,346.000,0.000,210.000);
	CreateDynamicObject(953,-472.639,300.774,2005.411,8.998,0.000,340.000);
	CreateDynamicObject(1600,-478.188,299.345,2006.069,0.000,0.000,270.000);
	CreateDynamicObject(1600,-470.191,298.837,2005.401,0.000,0.000,110.000);
	CreateDynamicObject(1599,-475.460,300.450,2005.854,0.000,0.000,280.000);
	CreateDynamicObject(1599,-471.358,301.214,2006.522,0.000,0.000,109.997);
	CreateDynamicObject(1601,-474.458,298.011,2005.208,0.000,0.000,270.000);
	CreateDynamicObject(1601,-477.457,299.380,2005.208,0.000,0.000,110.000);
	CreateDynamicObject(1605,-474.368,300.782,2006.095,0.000,0.000,270.000);
	CreateDynamicObject(1606,-475.851,298.334,2006.951,0.000,0.000,90.000);
	CreateDynamicObject(10444,-473.067,301.691,2005.250,90.000,90.000,271.500);
	CreateDynamicObject(3858,-473.204,296.936,2007.251,0.000,0.000,225.000);
	CreateDynamicObject(19166,-468.877,294.637,2005.412,0.000,270.000,0.000);
	CreateDynamicObject(2894,-474.508,288.769,2004.521,0.000,0.000,209.998);
	CreateDynamicObject(14455,-533.559,296.354,2005.256,0.000,0.000,270.000);
	CreateDynamicObject(14455,-496.961,320.560,2005.256,0.000,0.000,270.000);
	CreateDynamicObject(14455,-494.109,314.687,2005.256,0.000,0.000,0.000);
	CreateDynamicObject(14455,-486.799,316.217,2005.256,0.000,0.000,90.000);
	CreateDynamicObject(19166,-486.665,323.611,2005.256,0.000,270.000,0.000);
	CreateDynamicObject(1704,-487.421,314.985,2003.584,0.000,0.000,180.000);
	CreateDynamicObject(1723,-492.858,317.161,2003.584,0.000,0.000,0.000);
	CreateDynamicObject(1704,-495.410,314.950,2003.584,0.000,0.000,179.994);
	CreateDynamicObject(1723,-490.826,318.122,2003.584,0.000,0.000,90.000);
	CreateDynamicObject(1723,-492.871,320.134,2003.584,0.000,0.000,270.000);
	CreateDynamicObject(2001,-491.850,320.303,2003.587,0.000,0.000,0.000);
	CreateDynamicObject(2001,-522.320,293.429,2003.587,0.000,0.000,0.000);
	CreateDynamicObject(2010,-476.157,292.867,2003.578,0.000,0.000,0.000);
	CreateDynamicObject(2001,-479.968,293.325,2003.587,0.000,0.000,0.000);
	CreateDynamicObject(2010,-472.820,292.955,2003.578,0.000,0.000,0.000);
	CreateDynamicObject(1726,-504.550,317.268,2003.592,0.000,0.000,90.000);
	CreateDynamicObject(1726,-504.566,326.921,2003.592,0.000,0.000,90.000);
	CreateDynamicObject(1726,-497.916,328.834,2003.592,0.000,0.000,270.000);
	CreateDynamicObject(1726,-497.910,319.334,2003.592,0.000,0.000,270.000);

	// Crack Lab Fixes (Main)
    CreateDynamicObject(7191,2338.39135742,-1182.56323242,1032.95129395,90.00000000,0.00000000,90.00000000, -1, 5); //object(vegasnnewfence2b)(1)
	CreateDynamicObject(13656,2292.93872070,-1132.04724121,1017.29772949,0.00000000,0.00000000,0.00000000, -1, 5); //object(fuckknows)(1)
	CreateDynamicObject(7191,2337.95458984,-1182.54309082,1032.95129395,90.00000000,0.00000000,90.00000000, -1, 5); //object(vegasnnewfence2b)(2)
	CreateDynamicObject(7191,2338.43408203,-1182.39440918,1032.95129395,90.00000000,180.00000000,90.24850464, -1, 5); //object(vegasnnewfence2b)(3)
	CreateDynamicObject(7191,2337.97314453,-1182.39111328,1032.95129395,90.00000000,179.99450684,90.24719238, -1, 5); //object(vegasnnewfence2b)(4)
	CreateDynamicObject(7191,2328.80346680,-1180.43066406,1034.70544434,0.00000000,270.00000000,88.50006104, -1, 5); //object(vegasnnewfence2b)(5)
	CreateDynamicObject(3055,2319.78198242,-1184.82641602,1032.36450195,63.75003052,269.99996948,178.5001220, -1, 5); //object(kmb_shutter)(1)
	CreateDynamicObject(7191,2328.83715820,-1186.81262207,1030.70446777,0.00000000,90.74990845,359.99481201, -1, 5); //object(vegasnnewfence2b)(6)
	CreateDynamicObject(7191,2326.84863281,-1187.03125000,1030.70446777,0.00000000,90.74707031,359.99450684, -1, 5); //object(vegasnnewfence2b)(8)
	CreateDynamicObject(7191,2337.31689453,-1186.55639648,1030.70446777,0.00000000,90.74707031,359.99450684, -1, 5); //object(vegasnnewfence2b)(9)
	CreateDynamicObject(7191,2339.06689453,-1186.13159180,1030.70446777,0.00000000,91.24694824,359.99453735, -1, 5); //object(vegasnnewfence2b)(10)
	CreateDynamicObject(7191,2338.39062500,-1182.56250000,1032.95129395,90.00000000,0.00000000,90.00000000, -1, 5); //object(vegasnnewfence2b)(11)
	CreateDynamicObject(7191,2337.95947266,-1179.38879395,1032.95129395,90.00000000,180.00000000,270.00000000, -1, 5); //object(vegasnnewfence2b)(12)
	CreateDynamicObject(7191,2338.38476562,-1179.43066406,1032.95129395,90.00000000,0.00000000,90.00000000, -1, 5); //object(vegasnnewfence2b)(13)
	CreateDynamicObject(7191,2337.96630859,-1179.23559570,1032.95129395,90.00000000,179.99450684,90.24719238, -1, 5); //object(vegasnnewfence2b)(14)

	// Hospital Interior (Main)
    CreateDynamicObject(19449,-207.3999939,-1739.6999512,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(17038,-205.8994141,-1747.6992188,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-204.3994141,-1747.6992188,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-202.8999939,-1747.6999512,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-201.3994141,-1747.6992188,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(19460,-207.3990021,-1739.6999512,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19449,-202.6000061,-1734.8000488,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19460,-206.1999969,-1734.8010254,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(1569,-206.0000000,-1734.9000244,674.7999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(1569,-203.0000000,-1734.9000244,674.7999878,0.0000000,0.0000000,180.0000000);
	CreateDynamicObject(19387,-196.6992188,-1744.5000000,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19357,-201.3994141,-1736.5000000,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-201.4003906,-1736.5000000,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2885,-211.7998047,-1734.7998047,678.4000244,270.0000000,180.0000000,180.0000000);
	CreateDynamicObject(17038,-199.8994141,-1747.6992188,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-198.3999939,-1747.6999512,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-196.8994141,-1747.6992188,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(19449,-196.6000061,-1738.0159912,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19460,-196.6719971,-1738.0169678,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19449,-195.3994141,-1742.8994141,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(17038,-195.3994141,-1747.6992188,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(19460,-195.4010010,-1742.9000244,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19449,-201.1000061,-1739.6999512,674.0999756,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-201.1005859,-1739.6992188,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19357,-199.8837891,-1744.5000000,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19460,-191.1503906,-1744.4990234,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19460,-191.1503906,-1744.5009766,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-199.0749969,-1744.4990234,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-199.0749969,-1744.5009766,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-199.8849945,-1744.4980469,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19460,-201.0989990,-1739.5999756,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19357,-201.3994141,-1746.0996094,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19387,-201.3994141,-1749.2998047,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19357,-201.3999939,-1752.5000000,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19387,-201.3999939,-1755.6999512,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19357,-201.3999939,-1758.9000244,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(17038,-205.8994141,-1768.3994141,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-204.3999939,-1768.4000244,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-202.8999939,-1768.4000244,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-201.3999939,-1768.4000244,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-199.8994141,-1768.3994141,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-198.3994141,-1768.3994141,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-196.8999939,-1768.4000244,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-195.3994141,-1768.3994141,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(19368,-201.4019928,-1746.0999756,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-201.4010010,-1746.9250488,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19387,-201.3994141,-1762.0996094,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19449,-206.1999969,-1763.6999512,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-201.4010010,-1751.6369629,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-201.4019928,-1753.3249512,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-201.4010010,-1758.0369873,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-201.4019928,-1759.7249756,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-201.4010010,-1764.4370117,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-206.3000031,-1763.6989746,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19387,-207.3994141,-1746.0996094,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19387,-207.3994141,-1758.8994141,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19357,-207.3999939,-1762.0999756,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19449,-195.3994141,-1752.5000000,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19449,-195.3994141,-1762.0996094,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19449,-196.5996094,-1758.7998047,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19460,-206.0000000,-1733.2998047,672.5999756,270.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-203.0000000,-1733.3000488,672.5999756,270.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19441,-203.7140045,-1733.3010254,677.3980244,0.0000000,270.0000000,90.0000000);
	CreateDynamicObject(19441,-205.2870026,-1733.3010254,677.3970244,0.0000000,270.0000000,90.0000000);
	CreateDynamicObject(2885,-200.8994141,-1734.7998047,678.4000244,270.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2885,-200.8994141,-1741.5000000,678.4000244,270.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2885,-211.7998047,-1741.5000000,678.4000244,270.0000000,179.9945068,179.9945068);
	CreateDynamicObject(2885,-211.7998047,-1748.1992188,678.4000244,270.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2885,-200.8999939,-1748.1999512,678.4000244,270.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2885,-200.8994141,-1754.8994141,678.4000244,270.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2885,-200.8994141,-1761.5996094,678.4000244,270.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2885,-211.7998047,-1761.5996094,678.4000244,270.0000000,0.0000000,0.0000000);
	CreateDynamicObject(17038,-207.3994141,-1747.6992188,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-208.8994141,-1747.6992188,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-210.3999939,-1747.6999512,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-211.8999939,-1747.6999512,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-213.3994141,-1747.6992188,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-213.3994141,-1768.3994141,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-211.8999939,-1768.4000244,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-210.3994141,-1768.3994141,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-208.8994141,-1768.3994141,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-207.3999939,-1768.4000244,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(19449,-214.6000061,-1758.9000244,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19449,-214.5996094,-1749.2998047,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19449,-214.6000061,-1739.6999512,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19449,-212.1992188,-1734.7998047,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-199.8000031,-1744.5010986,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-201.3979950,-1746.0999756,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-201.3990021,-1746.9250488,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-201.3990021,-1751.6369629,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-201.3970032,-1753.3242188,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-201.3990021,-1758.0369873,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-201.3979950,-1759.7249756,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-195.4010010,-1752.5000000,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-195.4003906,-1762.0996094,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-196.6494141,-1758.7988281,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19460,-196.6494141,-1758.8007812,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19460,-207.3979950,-1740.5140381,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-207.3990021,-1761.2370605,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-207.3979950,-1764.4000244,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-214.5989990,-1758.8000488,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-214.5980072,-1749.1999512,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-214.5989990,-1739.5999756,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-215.8000031,-1734.8011475,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19460,-207.4010010,-1739.6999512,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-207.4013672,-1740.5136719,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-207.4011993,-1761.2370605,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-207.4010010,-1764.3994141,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(3034,-204.3994141,-1763.5996094,676.7000122,0.0000000,0.0000000,179.9945068);
	CreateDynamicObject(1523,-201.3699951,-1756.4499512,674.7399902,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(1523,-201.3691406,-1750.0498047,674.7399902,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(1523,-201.3699951,-1762.8499756,674.7399902,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(2686,-201.5130005,-1744.9000244,676.4000244,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(2685,-201.5130005,-1745.4000244,676.4000244,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(2688,-207.2998047,-1747.5996094,676.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(16101,-201.5000000,-1748.5000000,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-201.5000000,-1750.0000000,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-201.5000000,-1754.9000244,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-201.5000000,-1756.4000244,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-201.5000000,-1761.3000488,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-201.5000000,-1762.8000488,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-201.3291016,-1748.5000000,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-201.3300018,-1750.0000000,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-201.3300018,-1754.9000244,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-201.3300018,-1756.4000244,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-201.3300018,-1761.3000488,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-201.3300018,-1762.8000488,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(14487,-211.8000031,-1751.5000000,678.0999756,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(14487,-211.7998047,-1729.5996094,678.0999756,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(14487,-218.5996094,-1729.5996094,678.0999756,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(14487,-218.6000061,-1754.3000488,678.0999756,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(14487,-190.8994141,-1753.5996094,678.0999756,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(14487,-190.8999939,-1735.1999512,678.0999756,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(14487,-190.8994141,-1731.6992188,678.0999756,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(1523,-207.3691406,-1746.8496094,674.7399902,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(1523,-207.3699951,-1759.6500244,674.7399902,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(16101,-207.3291016,-1745.2998047,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-207.3300018,-1746.8199463,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-207.3300018,-1758.0999756,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-207.3300018,-1759.6199951,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-207.5000000,-1759.5999756,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-207.5000000,-1758.0999756,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-207.5000000,-1746.8000488,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-207.5000000,-1745.2998047,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(1999,-200.5000000,-1740.3994141,674.7999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(2009,-199.5000000,-1743.7998047,674.7999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(1671,-199.5000000,-1739.3000488,675.2000122,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(1671,-199.2998047,-1743.0000000,675.2000122,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(19387,-213.0000000,-1742.6992188,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19357,-209.7998047,-1742.6992188,673.9010010,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19357,-209.0000000,-1742.7001953,673.9000244,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19449,-212.1999969,-1742.6989746,679.0000000,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19466,-208.5000000,-1742.6999512,676.4000244,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19466,-210.7402344,-1742.6992188,676.4000244,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-209.0000000,-1742.6989746,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-210.6640015,-1742.6979980,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-215.3739929,-1742.6989746,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-215.3750000,-1742.7001953,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-209.0000000,-1742.7011719,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-210.6640015,-1742.7021484,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(1523,-213.7890625,-1742.7294922,674.7399902,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-212.2998047,-1742.7998047,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-213.8000031,-1742.8000488,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-213.8000031,-1742.5999756,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-212.3000031,-1742.5999756,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-207.5000000,-1742.6992188,666.9000244,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(3657,-213.8999939,-1745.6999512,675.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(3394,-213.7998047,-1739.0000000,674.7999878,0.0000000,0.0000000,179.9945068);
	CreateDynamicObject(3396,-208.1992188,-1737.0000000,674.7999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(3397,-208.1992188,-1740.8994141,674.7999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(14487,-218.6000061,-1731.8000488,678.0999756,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2007,-213.6992188,-1735.3994141,674.7999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2007,-212.6992188,-1735.3994141,674.7999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2132,-211.0996094,-1735.3994141,674.7999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(14532,-211.3994141,-1737.0996094,675.7800293,0.0000000,0.0000000,194.7491455);
	CreateDynamicObject(2146,-211.0996094,-1738.7998047,675.2700195,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(3657,-206.8999939,-1754.5999756,675.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(2811,-201.8994141,-1735.3994141,674.7999878,0.0000000,0.0000000,139.9932861);
	CreateDynamicObject(2811,-201.8999939,-1763.1999512,674.7999878,0.0000000,0.0000000,219.9957275);
	CreateDynamicObject(2811,-206.8999939,-1763.1999512,674.7999878,0.0000000,0.0000000,149.9957275);
	CreateDynamicObject(3657,-206.8999939,-1739.5999756,675.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(2811,-206.8994141,-1735.3994141,674.7999878,0.0000000,0.0000000,221.9897461);
	CreateDynamicObject(2688,-201.5000000,-1760.5000000,676.4000244,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(19460,-201.5000000,-1739.6999512,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-207.3000031,-1739.6999512,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-207.3000031,-1749.3000488,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-207.3000031,-1758.9000244,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-201.5000000,-1749.3000488,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-201.5000000,-1758.9000244,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-204.8000031,-1734.9000244,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(19460,-206.3999939,-1763.5999756,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(19460,-214.5000000,-1758.9000244,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-214.5000000,-1749.3000488,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-214.5000000,-1739.6999512,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-207.5000000,-1758.9000244,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-207.5000000,-1749.3000488,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-207.5000000,-1739.6999512,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-214.3999939,-1734.9000244,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(19460,-212.1999969,-1742.8000488,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(19460,-212.1999969,-1742.5999756,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(19460,-196.6000061,-1744.4000244,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(19460,-196.6000061,-1738.0999756,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(19460,-196.6000061,-1744.5999756,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(19460,-196.6000061,-1758.6999512,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(19460,-196.6000061,-1758.9000244,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(19460,-195.5000000,-1758.9000244,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-195.5000000,-1749.3000488,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-195.5000000,-1739.6999512,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19357,-209.0000000,-1748.8010254,673.9010010,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19449,-207.3999939,-1752.5000000,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-207.4010010,-1751.5999756,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-207.3990021,-1751.5999756,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-207.4019928,-1753.3000488,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-207.3979950,-1753.3000488,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(3657,-206.8999939,-1750.4000244,675.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19387,-213.0000000,-1748.8000488,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19449,-212.1999969,-1748.8010254,679.0000000,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19357,-209.8000031,-1748.8000488,673.9000244,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19466,-208.6000061,-1748.8000488,676.4000244,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19466,-210.8404999,-1748.8000488,676.4000244,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19449,-212.1999969,-1756.1999512,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(1523,-213.7890015,-1748.8299561,674.7399902,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-212.1999969,-1748.6999512,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(19460,-212.1999969,-1748.9000244,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(19460,-212.1999969,-1756.0999756,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(19460,-212.3000031,-1756.1989746,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-209.0000000,-1748.7990000,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-210.6629944,-1748.7980000,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-210.6621094,-1748.8027344,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-209.0000000,-1748.8017578,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-215.3750000,-1748.7989502,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-215.3750000,-1748.8007812,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(3397,-208.1999969,-1750.8000488,674.7999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(3396,-208.1999969,-1754.4000244,674.7999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-212.1999969,-1756.3000488,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(2132,-209.8999939,-1755.5999756,674.7999878,0.0000000,0.0000000,180.0000000);
	CreateDynamicObject(2007,-212.3000031,-1755.5999756,674.7999878,0.0000000,0.0000000,180.0000000);
	CreateDynamicObject(2007,-213.3000031,-1755.5999756,674.7999878,0.0000000,0.0000000,179.9945068);
	CreateDynamicObject(3394,-213.8000031,-1752.1999512,674.7999878,0.0000000,0.0000000,179.9945068);
	CreateDynamicObject(2146,-211.1000061,-1751.9000244,675.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(14532,-210.6999969,-1753.5000000,675.7999878,0.0000000,0.0000000,14.0000000);
	CreateDynamicObject(19460,-212.2998047,-1756.2001953,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(3657,-201.8994141,-1746.5000000,675.2999878,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(2811,-214.0000000,-1743.4000244,674.7999878,0.0000000,0.0000000,251.9897461);
	CreateDynamicObject(2811,-214.0000000,-1748.0999756,674.7999878,0.0000000,0.0000000,295.9879761);
	CreateDynamicObject(16101,-207.5000000,-1748.8000488,666.9000244,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(3394,-213.8000031,-1761.5000000,674.7999878,0.0000000,0.0000000,179.9945068);
	CreateDynamicObject(2007,-214.0000000,-1758.5999756,674.7999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(2007,-214.0000000,-1757.5999756,674.7999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(2132,-210.1000061,-1763.0999756,674.7999878,0.0000000,0.0000000,179.9945068);
	CreateDynamicObject(3396,-208.1999969,-1761.6999512,674.7999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(3397,-210.8000031,-1756.6999512,674.7999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(2146,-211.1999969,-1759.9000244,675.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(11237,-230.0000000,-1760.4000244,698.9000244,0.0000000,180.0000000,180.0000000);
	CreateDynamicObject(3053,-211.1999969,-1760.4000244,678.4000244,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-211.1999969,-1760.4000244,688.0999756,0.0000000,180.0000000,0.0000000);
	CreateDynamicObject(2596,-214.3000031,-1760.0999756,676.7000122,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(2885,-211.8000031,-1754.9000244,678.4000244,270.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2596,-214.3000031,-1760.8000488,676.7000122,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(2596,-214.3000031,-1760.8000488,677.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(2596,-214.3000031,-1760.0999756,677.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(16101,-222.6000061,-1760.4000244,677.9000244,0.0000000,90.0000000,0.0000000);
	CreateDynamicObject(16101,-214.5000000,-1760.4000244,666.19387220,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(3808,-207.2500000,-1757.8000488,676.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(3808,-212.0000000,-1742.8499756,676.2999878,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(3808,-212.0000000,-1748.6600342,676.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19460,-201.3000031,-1749.5000000,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-201.3000031,-1759.0999756,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(2009,-199.5000000,-1747.8000488,674.7999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(1999,-200.5000000,-1746.0999756,674.8010254,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(1671,-199.3999939,-1746.9000244,675.2000122,0.0000000,0.0000000,264.0000000);
	CreateDynamicObject(1671,-199.3999939,-1745.0999756,675.2000122,0.0000000,0.0000000,278.0000000);
	CreateDynamicObject(2009,-196.8000031,-1753.8000488,674.8010254,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(1999,-197.8000031,-1752.0999756,674.7999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(1999,-198.6999969,-1752.8000488,674.7999878,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(2009,-199.6999969,-1751.0999756,674.8010254,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(1671,-197.6000061,-1753.0000000,675.2000122,0.0000000,0.0000000,282.0000000);
	CreateDynamicObject(1671,-196.8000031,-1751.3000488,675.2000122,0.0000000,0.0000000,260.0000000);
	CreateDynamicObject(1671,-199.8000031,-1752.0999756,675.2000122,0.0000000,0.0000000,84.0000000);
	CreateDynamicObject(1671,-199.8000031,-1753.8000488,675.2000122,0.0000000,0.0000000,104.0000000);
	CreateDynamicObject(2009,-196.0000000,-1757.1999512,674.7999878,0.0000000,0.0000000,180.0000000);
	CreateDynamicObject(1999,-197.6999969,-1758.1999512,674.8010254,0.0000000,0.0000000,180.0000000);
	CreateDynamicObject(1671,-196.8999939,-1757.3000488,675.2000122,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(1671,-198.6999969,-1758.0000000,675.2000122,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2202,-196.0000000,-1746.1999512,674.7800293,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(2811,-195.8999939,-1745.0999756,674.7999878,0.0000000,0.0000000,115.9932861);
	CreateDynamicObject(2007,-196.0000000,-1748.3000488,674.7999878,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(2007,-196.0000000,-1749.3000488,674.7999878,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(2811,-200.8999939,-1758.3000488,674.7999878,0.0000000,0.0000000,141.9881592);
	CreateDynamicObject(2611,-198.1999969,-1758.6700439,676.7999878,0.0000000,0.0000000,180.0000000);
	CreateDynamicObject(2611,-201.2700043,-1746.4000244,676.5999756,0.0000000,0.0000000,89.9945068);
	CreateDynamicObject(19449,-215.8000031,-1763.6999512,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19449,-201.3999939,-1768.5000000,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19449,-195.3999939,-1771.6999512,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2885,-200.8999939,-1768.3000488,678.4000244,270.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-201.3990021,-1767.5799561,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-195.4010010,-1771.6999512,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-195.5000000,-1768.5000000,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-201.3000031,-1768.6999512,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19449,-196.6000061,-1772.4000244,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19460,-196.6000061,-1772.3990479,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19460,-196.6000061,-1772.3000488,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(14487,-190.8999939,-1778.1999512,678.0999756,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(1789,-211.8000031,-1753.0999756,675.2999878,0.0000000,0.0000000,290.0000000);
	CreateDynamicObject(1789,-211.8994141,-1759.1992188,675.2999878,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(1789,-210.1999969,-1737.6999512,675.2999878,0.0000000,0.0000000,99.9951172);
	CreateDynamicObject(1800,-199.0000000,-1759.5000000,674.7000122,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(1800,-199.0000000,-1771.5000000,674.7000122,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(1800,-199.0000000,-1767.5999756,674.7000122,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(1800,-199.0000000,-1763.6999512,674.7000122,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(1800,-200.6999969,-1766.9000244,674.7000122,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(1800,-200.6999969,-1773.3000488,674.7000122,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(1789,-196.1999969,-1770.6999512,675.2999878,0.0000000,0.0000000,180.0000000);
	CreateDynamicObject(1789,-196.1999969,-1766.6999512,675.2999878,0.0000000,0.0000000,179.9945068);
	CreateDynamicObject(1789,-196.1999969,-1762.9000244,675.2999878,0.0000000,0.0000000,179.9945068);
	CreateDynamicObject(1789,-196.3000031,-1760.6999512,675.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(1789,-200.5000000,-1766.1999512,675.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(1789,-200.5000000,-1769.4000244,675.2999878,0.0000000,0.0000000,180.0000000);
	CreateDynamicObject(19460,-216.0000000,-1763.5999756,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(1999,-197.5000000,-1740.4000244,674.7999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(1671,-196.5000000,-1739.3000488,675.2000122,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(19460,-215.8999939,-1763.6989746,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(16101,-212.3000031,-1748.6999512,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-213.8000031,-1748.6999512,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-213.8000031,-1748.9000244,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-212.3000031,-1748.9000244,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2852,-206.8000031,-1742.8000488,675.2800293,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2315,-206.8000031,-1742.4000244,674.7999878,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(2855,-206.6999969,-1743.6999512,675.2999878,0.0000000,0.0000000,0.0000000);
	//
	SetDynamicObjectMaterial(CreateDynamicObject(11435,-204.3999939,-1745.0999756,679.4000244,0.0000000,0.0000000,270.0000000), 1, 14532, "drivingbit", "blak_1");
	SetDynamicObjectMaterial(CreateDynamicObject(11435,-204.3999939,-1752.0000000,679.4000244,0.0000000,0.0000000,270.0000000), 1, 14532, "drivingbit", "blak_1");
	SetDynamicObjectMaterial(CreateDynamicObject(11435,-204.3999939,-1758.8000488,679.4000244,0.0000000,0.0000000,270.0000000), 1, 14532, "drivingbit", "blak_1");
	SetDynamicObjectMaterial(CreateDynamicObject(11435,-198.6000061,-1764.0000000,679.4000244,0.0000000,0.0000000,270.0000000), 1, 14532, "drivingbit", "blak_1");
	SetDynamicObjectMaterial(CreateDynamicObject(11435,-198.6000061,-1769.1999512,679.4000244,0.0000000,0.0000000,270.0000000), 1, 14532, "drivingbit", "blak_1");
	SetDynamicObjectMaterial(CreateDynamicObject(11435,-198.6000061,-1756.3000488,679.4000244,0.0000000,0.0000000,270.0000000), 1, 14532, "drivingbit", "blak_1");
	SetDynamicObjectMaterial(CreateDynamicObject(11435,-198.6000061,-1749.9000244,679.4000244,0.0000000,0.0000000,270.0000000), 1, 14532, "drivingbit", "blak_1");
    SetDynamicObjectMaterialText(CreateDynamicObject(19353, -195.4142, -1741.4693, 676.4188, 0.0000, 0.0000, 180.0), 0, "HOSPITAL", 140, "Cambria", 130, 1, -1, 0, 1);
	SetDynamicObjectMaterialText(CreateDynamicObject(19353, -195.4142, -1741.4362, 676.8190, 0.0000, 0.0000, 180), 0, "SAN ANDREAS COUNTY", 140, "Cambria", 55, 1, -584707328, 0, 1);
	SetDynamicObjectMaterialText(CreateDynamicObject(19353, -195.4142, -1739.7816, 676.8000, 0.0000, 0.0000, 180), 0, "|", 140, "Arial", 200, 1, -13750738, 0, 1);
	SetDynamicObjectMaterialText(CreateDynamicObject(19353, -195.4142, -1743.1800, 676.8000, 0.0000, 0.0000, 180), 0, "|", 140, "Arial", 200, 1, -13750738, 0, 1);

    // House Objects (Main)
	CreateDynamicObject(14707, 911.334106, -484.425170, 847.481384, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(14711, 1312.136840, -175.075073, 1088.675659, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(1506, 1321.403198, -166.876174, 1087.131591, 0.000000, 0.000000, 270.000000);
	CreateDynamicObject(14700, 1437.169189, -1832.845703, 1314.057250, 0.000000, 0.000000, 270.000000);
	CreateDynamicObject(1506, 1433.098266, -1833.567993, 1312.596801, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(14748, 1365.361694, -2141.651611, 1051.588623, 0.000000, 0.000000, 270.000000);
	CreateDynamicObject(1506, 1364.546875, -2146.731689, 1049.618652, 0.000000, 0.000000, 180.000000);
    CreateDynamicObject(14718, 2005.202270, -1701.831054, 1164.692260, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(1506, 2010.115234, -1698.054321, 1164.701660, 0.000000, 0.000000, -90.000000);
	CreateDynamicObject(14754, 1284.700317, -1132.096679, 982.990844, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(1506, 1282.763061, -1141.286621, 979.051940, 0.000000, 0.000000, 180.000000);
    CreateDynamicObject(14713, 1183.433837, -422.981140, 1235.509155, 0.000000, 0.000000, 180.000000);
	CreateDynamicObject(1506, 1177.512084, -418.100250, 1233.734375, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(14750, 1752.987548, -1814.000000, 1005.840515, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(1506, 1750.443969, -1823.364013, 999.340454, 0.000000, 0.000000, 180.000000);
    CreateDynamicObject(14712, 2190.703125, -1127.359619, 1129.335815, 0.000000, 0.000000, 270.000000);
	CreateDynamicObject(1506, 2183.202392, -1131.089599, 1127.785400, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(14701, 2654.076171, -1032.999389, 930.996948, 0.000000, 0.000000, 180.000000);
	CreateDynamicObject(1506, 2653.683593, -1022.535644, 928.926269, 0.000000, 0.000000, 0.000000);
    CreateDynamicObject(14710, 836.976257, -1017.067077, 800.481994, 0.000000, 0.000000, 180.000000);
	CreateDynamicObject(1506, 827.483337, -1014.606506, 798.996154, 0.000000, 0.000000, 90.000000);
	CreateDynamicObject(14706, 1834.514404, -1290.143066, 834.363037, 0.000000, 0.000000, 180.000000);
    CreateDynamicObject(19359, 2262.502929, -1143.025146, 1051.293334, 0.000000, 0.000000, 90.000000);

	// Bank Interior (Main)
	CreateDynamicObject(19380, 1662.48743, -971.75378, 706.51898,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 1656.65344, -971.62341, 701.63678,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 1658.31506, -973.28998, 701.63879,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1656.65259, -974.96600, 701.63678,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 1666.42468, -973.18341, 701.63678,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1668.09167, -971.52069, 701.63879,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 1668.08789, -974.84570, 701.63879,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 1667.57214, -974.94922, 701.63678,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1657.16797, -974.99103, 701.63678,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1278, 1663.16296, -976.64099, 700.80029,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1278, 1663.16296, -976.64099, 703.67731,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1278, 1663.16296, -976.64099, 706.39130,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 1662.84253, -976.63281, 699.00177,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 1660.28625, -976.63782, 699.00378,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1278, 1664.43274, -976.71887, 706.34930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1666.65210, -976.65454, 702.11121,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1662.18835, -976.64697, 702.11121,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1657.94739, -976.62915, 702.11121,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1278, 1660.03259, -976.68048, 706.34930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1662.18835, -976.64697, 705.37720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1666.59045, -976.64697, 705.37720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1657.94824, -976.64899, 705.37720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1667.55725, -969.82300, 701.63678,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1657.22937, -969.77875, 701.63678,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1656.33521, -968.05743, 701.63678,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 1668.52039, -968.11981, 701.63678,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 1665.40320, -967.14172, 701.63678,   90.00000, 0.00000, 55.00000);
	CreateDynamicObject(19454, 1659.46021, -967.08081, 701.63678,   90.00000, 0.00000, -55.00000);
	CreateDynamicObject(19380, 1662.42456, -962.27173, 706.51703,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19391, 1662.37244, -966.14618, 701.82550,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 1662.29138, -966.14740, 707.60278,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19375, 1662.37500, -971.72113, 700.00342,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19375, 1662.43970, -963.05243, 700.00140,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 1665.55212, -966.13098, 701.63678,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 1667.22107, -964.33282, 701.63678,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1667.22095, -960.95282, 701.63678,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1660.89551, -964.39307, 701.63678,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19380, 1663.72046, -961.21100, 703.62903,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 1659.23047, -962.72852, 701.63678,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19370, 1664.28015, -971.68073, 707.10889,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19370, 1662.76160, -973.19739, 707.10687,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19370, 1661.23926, -971.67780, 707.10889,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19370, 1662.76013, -970.15582, 707.10687,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19443, 1663.48096, -971.70142, 706.37988,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19443, 1662.75806, -972.42108, 706.38190,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19443, 1662.04016, -971.69843, 706.37988,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19443, 1662.76147, -970.98419, 706.38190,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18075, 1662.37048, -970.06836, 706.46777,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2207, 1663.03015, -971.79346, 700.09070,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1727, 1663.31348, -970.20789, 699.95898,   0.00000, 0.00000, -40.00000);
	CreateDynamicObject(1727, 1659.96106, -970.93146, 699.95898,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(1727, 1661.50989, -969.53607, 699.95898,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, 1662.10669, -973.59125, 700.05157,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2811, 1661.05359, -973.11829, 699.97162,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1663.09033, -973.12018, 699.97162,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2200, 1657.44141, -970.53723, 700.08978,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19375, 1653.66931, -972.24451, 701.72339,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19375, 1653.64197, -974.36877, 701.72339,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19375, 1653.65918, -973.32990, 701.72339,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19375, 1671.06738, -972.08447, 701.72339,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19375, 1671.04700, -973.17102, 701.72339,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19375, 1671.07214, -974.26880, 701.72339,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2230, 1661.15503, -966.06073, 705.13647,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2230, 1664.17798, -966.06073, 705.12848,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19370, 1662.27222, -964.76300, 705.05292,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19370, 1662.46216, -964.76501, 705.05090,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19370, 1662.46216, -964.76501, 706.45093,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(1649, 1662.36194, -966.43878, 707.24719,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2614, 1662.38245, -966.27612, 703.86688,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2200, 1667.24573, -969.26605, 700.08978,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2811, 1663.83496, -966.64502, 699.97162,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1660.88159, -966.68427, 699.97162,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 1661.58777, -966.17401, 700.06921,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1662.35779, -966.45477, 707.24719,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1649, 1662.35779, -966.48077, 707.24719,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1734, 1662.79236, -971.69281, 706.42902,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1667.21094, -957.63080, 701.63678,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19375, 1662.45776, -953.80481, 700.00342,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19391, 1658.35205, -961.25458, 701.81750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 1658.35767, -962.00018, 700.06921,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 1659.23047, -959.72552, 701.63678,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 1660.90051, -958.06427, 701.63678,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1662.50964, -956.62701, 701.63678,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 1665.89014, -956.62653, 701.63678,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(1726, 1666.37830, -962.08569, 700.08868,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1726, 1666.34082, -958.71960, 700.08868,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1727, 1664.09412, -957.83966, 700.08765,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1727, 1664.97131, -964.99353, 700.08759,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2811, 1666.50635, -965.32239, 699.97162,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1666.49377, -957.60059, 699.97162,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2126, 1665.15479, -960.55115, 700.08881,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2126, 1665.19629, -963.32709, 700.08881,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2614, 1667.07581, -961.43964, 702.49182,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19375, 1671.89587, -965.46210, 701.72339,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19375, 1671.90527, -964.59674, 701.72339,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19375, 1671.89502, -958.07025, 701.72339,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19375, 1671.90881, -957.41803, 701.72339,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19375, 1671.90002, -961.44330, 704.69342,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19375, 1671.90002, -961.44330, 705.48541,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(2200, 1661.01624, -959.01569, 700.08978,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14596, 1652.60913, -957.46368, 693.38580,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19375, 1662.70935, -963.04932, 688.40442,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 1658.96338, -967.07098, 690.17383,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19375, 1662.71594, -970.60370, 688.41443,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 1658.95447, -955.35168, 690.21381,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1663.30591, -958.41248, 690.21381,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 1665.79163, -962.90070, 690.17383,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1661.68274, -971.20868, 690.17383,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 1665.79285, -967.26093, 690.17578,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2206, 1663.32397, -960.97894, 688.45349,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2206, 1661.45435, -961.97198, 688.45148,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2206, 1661.45630, -962.95599, 688.45349,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2206, 1661.45630, -963.92999, 688.45148,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2206, 1661.45630, -964.90399, 688.45349,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2206, 1661.45630, -965.87799, 688.45148,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, 1664.47815, -964.20013, 688.49377,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1714, 1664.46436, -962.77960, 688.49377,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1714, 1664.43201, -961.27374, 688.49377,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1714, 1664.47046, -965.76575, 688.49377,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1714, 1660.37378, -961.13538, 688.49377,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1714, 1660.36292, -962.68683, 688.49377,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1714, 1660.31726, -964.14752, 688.49377,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1714, 1660.34314, -965.74756, 688.49377,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1714, 1662.39783, -959.87054, 688.49377,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1662.91016, -956.80499, 689.27472,   -0.05300, 90.00000, 90.00000);
	CreateDynamicObject(19448, 1662.68140, -956.75812, 690.17572,   -0.05300, 90.00000, 90.00000);
	CreateDynamicObject(19448, 1667.42212, -963.23273, 690.17572,   -0.05300, 90.00000, 0.00000);
	CreateDynamicObject(19448, 1667.40771, -963.19348, 689.27472,   -0.05300, 90.00000, 0.00000);
	CreateDynamicObject(19448, 1667.42908, -971.07928, 690.17572,   -0.05300, 90.00000, 0.00000);
	CreateDynamicObject(19448, 1667.40833, -968.83728, 689.27472,   -0.05300, 90.00000, 0.00000);
	CreateDynamicObject(19448, 1661.87451, -972.81970, 689.27472,   -0.05300, 90.00000, 90.00000);
	CreateDynamicObject(19448, 1657.31396, -969.12482, 690.17572,   -0.05300, 90.00000, 0.00000);
	CreateDynamicObject(19448, 1657.32751, -969.12482, 689.27472,   -0.05300, 90.00000, 0.00000);
	CreateDynamicObject(2230, 1663.76355, -971.30103, 688.35822,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19448, 1659.08435, -975.93622, 690.17572,   -0.05300, 90.00000, 0.00000);
	CreateDynamicObject(19448, 1665.84216, -975.93213, 690.17572,   -0.05300, 90.00000, 0.00000);
	CreateDynamicObject(2230, 1660.47583, -971.26636, 688.35822,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2811, 1661.30225, -970.88525, 688.45660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1663.53259, -970.78687, 688.45660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1664.15002, -975.86359, 690.17572,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1660.68494, -975.89722, 690.17572,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(1828, 1662.12476, -968.67163, 688.49323,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1734, 1662.24158, -967.92981, 691.94348,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1734, 1662.28015, -962.10773, 691.98151,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 1657.56604, -961.96283, 688.48071,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19448, 1657.30774, -969.11176, 691.09570,   -0.05300, 90.00000, 0.00000);
	CreateDynamicObject(19448, 1659.04810, -975.93469, 691.09570,   -0.05300, 90.00000, 0.00000);
	CreateDynamicObject(19448, 1665.78918, -975.92078, 691.09570,   -0.05300, 90.00000, 0.00000);
	CreateDynamicObject(19448, 1662.42566, -975.91620, 691.89569,   -0.05300, 90.00000, 0.00000);
	CreateDynamicObject(19448, 1667.43506, -966.83893, 691.09570,   -0.05300, 90.00000, 0.00000);
	CreateDynamicObject(19448, 1667.44019, -957.22589, 691.09570,   -0.05300, 90.00000, 0.00000);
	CreateDynamicObject(19448, 1662.97778, -956.75787, 691.09570,   -0.05300, 90.00000, 90.00000);
	CreateDynamicObject(19380, 1663.13403, -961.99518, 691.84302,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1663.08032, -967.48743, 691.84497,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19174, 1659.05225, -967.67047, 690.17877,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19175, 1665.68555, -968.27643, 690.17792,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19172, 1665.68494, -961.49689, 690.19287,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2491, 1663.91870, -968.71417, 687.72620,   0.00000, 0.00000, -47.00000);
	CreateDynamicObject(1952, 1663.73193, -968.88348, 689.70990,   55.00000, 91.00000, -149.00000);
	CreateDynamicObject(3077, 1662.46704, -971.14868, 692.41919,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(2227, 1662.71179, -966.43073, 688.49408,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3077, 1662.48022, -958.49329, 692.41919,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19448, 1660.61646, -956.79962, 694.01569,   -90.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1664.19775, -956.79871, 694.01569,   -90.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1659.23938, -965.45404, 699.93073,   -90.05300, 90.00000, 0.00000);
	CreateDynamicObject(19448, 1659.23938, -964.85797, 699.93073,   -90.05300, 90.00000, 0.00000);
	CreateDynamicObject(19448, 1659.23938, -964.26202, 699.93073,   -90.05300, 90.00000, 0.00000);
	CreateDynamicObject(19448, 1659.23938, -963.66602, 699.93073,   -90.05300, 90.00000, 0.00000);
	CreateDynamicObject(19448, 1659.23938, -963.07001, 699.93073,   -90.05300, 90.00000, 0.00000);
	CreateDynamicObject(19448, 1657.34546, -964.39307, 691.09570,   -90.05300, 90.00000, 0.00000);
	CreateDynamicObject(1536, 1658.40564, -962.00049, 694.28979,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19391, 1658.35205, -961.25458, 696.00647,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1653.07410, -963.40411, 684.22479,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1650.81616, -964.45227, 684.22479,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 1656.31763, -956.78729, 684.22479,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1661.04724, -961.51617, 684.22479,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 1662.65161, -961.14771, 684.22479,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19375, 1657.63232, -961.26575, 682.60437,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 1655.57104, -969.17828, 684.22479,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1655.57104, -965.98853, 684.23877,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19391, 1661.24683, -965.98999, 684.43079,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19172, 1658.17444, -965.90759, 684.55719,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1726, 1660.10291, -965.30756, 682.63391,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1727, 1656.93030, -965.29083, 682.63568,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2811, 1657.45129, -965.35327, 682.69244,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2126, 1657.67688, -964.35883, 682.58270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2614, 1653.20264, -961.37762, 684.42200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19174, 1659.57642, -961.59302, 684.41058,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1667.40674, -965.99768, 684.43280,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19391, 1673.69470, -966.00177, 684.43481,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19379, 1660.32056, -970.69043, 682.59747,   -0.00400, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1670.82617, -970.70868, 682.59949,   -0.00400, 90.00000, 0.06000);
	CreateDynamicObject(19454, 1679.53491, -966.00079, 684.31482,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1655.57483, -970.78229, 684.20892,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1662.68152, -967.01599, 681.80890,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19450, 1667.44470, -971.74622, 681.80890,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(19450, 1679.07483, -970.76233, 684.20892,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1667.44470, -971.24622, 681.80890,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(19450, 1667.44250, -971.36652, 681.81091,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(19450, 1667.41479, -971.46899, 681.80890,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(19450, 1667.44470, -971.45221, 681.80688,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(19450, 1667.41272, -971.63385, 681.80688,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(19450, 1662.78552, -966.65765, 681.81091,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19450, 1662.87305, -966.41022, 681.80890,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19450, 1663.04565, -966.99860, 681.81091,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19450, 1663.04565, -966.99860, 681.81091,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19450, 1663.14392, -966.97192, 681.81293,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19450, 1657.16846, -976.89392, 684.20892,   0.00000, 0.00000, 48.00000);
	CreateDynamicObject(19450, 1677.52844, -976.71588, 684.20892,   0.00000, 0.00000, -48.00000);
	CreateDynamicObject(19450, 1660.71936, -984.86407, 684.20892,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1673.97595, -984.69043, 684.20892,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19379, 1678.49524, -970.70831, 682.60150,   -0.00400, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1673.69922, -978.93152, 682.59747,   -0.00400, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1663.19775, -978.88202, 682.59747,   -0.00400, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1659.90479, -978.85461, 682.59351,   -0.00400, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1672.02271, -987.53003, 682.60748,   -0.00400, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1662.30005, -987.55170, 682.60553,   -0.00400, 90.00000, 0.00000);
	CreateDynamicObject(14413, 1660.40491, -980.61688, 680.50598,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1655.99084, -989.59222, 684.20892,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1678.70947, -989.42102, 684.20490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1672.42834, -996.52631, 684.20490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1665.20630, -996.52954, 684.20490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1679.14075, -996.31305, 684.20490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1680.95544, -992.56982, 684.20490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1655.19873, -996.27271, 684.20490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1653.71216, -993.49536, 684.20490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19379, 1655.92603, -992.17084, 682.60150,   -0.00400, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1678.53967, -993.41864, 682.60150,   -0.00400, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1670.27588, -991.98706, 682.59949,   -0.00400, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1663.10400, -991.85168, 682.60352,   -0.00400, 90.00000, 0.00000);
	CreateDynamicObject(19358, 1672.17358, -970.22870, 681.80890,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19358, 1672.03430, -970.23053, 681.81091,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19358, 1671.94434, -970.22852, 681.80688,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19358, 1671.86829, -970.22650, 681.80890,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19358, 1671.74036, -970.23053, 681.80292,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19358, 1672.17566, -967.54669, 681.80890,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19358, 1671.92444, -967.54138, 681.80688,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19358, 1672.03430, -967.54150, 681.81091,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19358, 1671.74036, -967.58447, 681.80292,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19358, 1671.86829, -967.54248, 681.80890,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19358, 1671.57642, -970.21252, 681.80090,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19358, 1671.57642, -967.54248, 681.80090,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(1536, 1670.57324, -964.19226, 682.51721,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1536, 1666.59705, -966.03491, 682.51721,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19176, 1667.35913, -996.42566, 683.93018,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1665.52271, -1001.17371, 683.64270,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1669.21240, -1001.15674, 683.65869,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1668.90662, -998.10468, 685.32269,   -0.05300, 90.00000, 90.00000);
	CreateDynamicObject(19448, 1665.97058, -998.10272, 685.33069,   -0.05300, 90.00000, 90.00000);
	CreateDynamicObject(19448, 1673.25439, -998.16711, 682.72272,   33.00000, 90.00000, 90.00000);
	CreateDynamicObject(19448, 1661.49133, -998.13934, 682.72272,   -33.00000, 90.00000, 90.00000);
	CreateDynamicObject(19448, 1669.65576, -1001.24042, 683.33868,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1670.11609, -1001.24353, 683.02368,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1670.57666, -1001.25226, 682.69373,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1671.03662, -1001.24109, 682.36371,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1671.45862, -1001.24512, 682.18372,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1671.90051, -1001.25153, 681.89868,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1672.30273, -1001.25348, 681.62872,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1672.72717, -1001.24298, 681.35870,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1665.09607, -1001.22498, 683.33868,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1664.65222, -1001.23010, 683.06873,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1664.20837, -1001.23523, 682.76868,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1663.80115, -1001.22870, 682.51367,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1663.37744, -1001.22302, 682.24969,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1662.99268, -1001.23077, 681.99768,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1662.61279, -1001.22302, 681.75171,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1662.18933, -1001.24329, 681.47968,   -0.05300, 0.00000, 0.00000);
	CreateDynamicObject(19435, 1670.59705, -975.74170, 684.39459,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 1670.84668, -976.46210, 684.39661,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 1670.84668, -975.02710, 684.39661,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 1671.22705, -975.74170, 684.39459,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 1663.99280, -976.46210, 684.39661,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 1664.24304, -975.74170, 684.39459,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 1663.64502, -975.74170, 684.39459,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 1663.99268, -975.02710, 684.39661,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1216, 1664.60999, -975.73181, 683.34930,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1216, 1670.24316, -975.72345, 683.34930,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19435, 1663.99280, -990.46210, 684.39661,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 1663.99268, -989.02710, 684.39661,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 1664.24304, -989.74170, 684.39459,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 1663.64502, -989.74170, 684.39459,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 1670.84668, -990.46210, 684.39661,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 1670.84668, -989.02710, 684.39661,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 1670.59705, -989.74170, 684.39459,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 1671.22705, -989.74170, 684.39459,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1662.80054, -971.60742, 683.55664,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1662.80249, -971.60938, 685.22662,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1671.95862, -971.66241, 683.55664,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1671.96082, -971.66351, 685.22662,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1668.88403, -971.64197, 683.55664,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1665.77905, -971.68475, 683.55664,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1668.88599, -971.64398, 685.42963,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1665.78113, -971.68683, 685.40161,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1671.99792, -966.36957, 683.55664,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1671.99988, -966.36761, 685.56262,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1662.74365, -966.35168, 683.55664,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1662.74573, -966.34967, 685.32458,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19381, 1667.31580, -982.70880, 682.61493,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19373, 1677.32422, -992.69708, 682.60938,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19373, 1673.82422, -992.69708, 682.60938,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19373, 1670.32422, -992.69708, 682.60938,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19373, 1666.82422, -992.69708, 682.60938,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19373, 1663.32422, -992.69708, 682.60742,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19373, 1659.82422, -992.69708, 682.60742,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19373, 1657.32422, -992.69708, 682.60938,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19373, 1667.32007, -989.64728, 682.61139,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19373, 1667.31274, -987.56097, 682.61340,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19373, 1667.44006, -976.51031, 682.59943,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19373, 1667.43689, -974.11902, 682.60138,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19373, 1675.15894, -968.47070, 682.60541,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19373, 1675.15552, -971.62988, 682.60339,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19373, 1675.14941, -974.82123, 682.60541,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19373, 1659.02771, -968.61041, 682.59943,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19373, 1659.02771, -971.61041, 682.60138,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19373, 1659.02771, -974.61041, 682.59943,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19373, 1667.31506, -994.88812, 682.60541,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1216, 1664.62183, -989.77948, 683.34930,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1216, 1670.23364, -989.68671, 683.34930,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19372, 1665.55750, -984.24152, 682.61731,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1669.06519, -981.03992, 682.61731,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1502, 1672.91052, -965.99878, 682.66650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 1660.46240, -966.02490, 682.66650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19373, 1660.72278, -973.38147, 700.00690,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19373, 1664.19324, -970.30255, 700.00690,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1660.73840, -970.30151, 700.00629,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1664.19141, -973.38068, 700.00629,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1726, 1654.57568, -993.88953, 682.60760,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1726, 1656.18237, -990.42102, 682.60760,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1726, 1658.12073, -995.30109, 682.60760,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(2126, 1656.79932, -993.20648, 682.59167,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1654.74890, -990.55658, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1654.64624, -995.29932, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1660.18701, -991.68616, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1660.21997, -993.80585, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19174, 1653.83386, -992.88977, 684.66608,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2126, 1676.75720, -993.20923, 682.59167,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1726, 1678.39221, -995.32458, 682.60760,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1726, 1676.31909, -990.28052, 682.60760,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1726, 1680.03442, -991.83075, 682.60760,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2811, 1679.71533, -995.15234, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1679.85291, -990.56287, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1674.32520, -991.69720, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1674.31262, -993.74756, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19175, 1680.88062, -992.88879, 684.73419,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1727, 1659.82190, -992.22430, 682.69482,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1727, 1674.90588, -993.20551, 682.69482,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2811, 1669.43213, -990.82062, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1665.22046, -990.83411, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1669.40662, -994.72894, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1665.17786, -994.67572, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1664.38135, -971.64264, 686.28632,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1649, 1667.46509, -971.67499, 686.28632,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1649, 1670.43530, -971.72980, 686.28632,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(9131, 1671.99182, -968.97778, 683.55664,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1671.99268, -968.98340, 685.22662,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1672.07544, -970.30029, 686.36530,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(9131, 1671.99268, -968.98340, 685.22662,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1672.16272, -967.69873, 686.36530,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(1649, 1662.68506, -970.26831, 686.28632,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(9131, 1662.74438, -968.89624, 683.55664,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1662.74194, -968.89771, 685.22662,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1662.74121, -967.32971, 686.28632,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(2200, 1669.07825, -966.22864, 682.68683,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2200, 1664.39514, -966.23621, 682.68683,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1828, 1667.77917, -968.79425, 682.66248,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, 1670.26538, -970.00128, 682.68542,   0.00000, 0.00000, 62.00000);
	CreateDynamicObject(1714, 1664.33838, -970.21857, 682.68542,   0.00000, 0.00000, -62.00000);
	CreateDynamicObject(1714, 1667.39148, -970.04071, 682.68542,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, 1670.32922, -967.69934, 682.68542,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1714, 1664.26782, -967.65887, 682.68542,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2811, 1669.55005, -977.65448, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1665.26160, -977.63495, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1808, 1670.90918, -988.73779, 682.69318,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2606, 1669.72595, -966.20422, 685.30310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2606, 1669.72595, -966.20422, 684.84308,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19380, 1677.75940, -993.34680, 685.94501,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1667.43481, -993.30182, 685.96503,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1657.26416, -993.34833, 685.94501,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1664.09070, -983.83752, 685.97498,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1672.86572, -983.84723, 685.97900,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1674.54370, -974.38708, 685.94501,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1674.64111, -970.71228, 685.96503,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1664.31567, -974.47052, 685.98499,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1657.26782, -974.66217, 685.96503,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1657.41858, -965.23651, 686.00500,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1665.27612, -968.87659, 686.02502,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1654.17944, -961.91632, 685.98499,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19443, 1654.88867, -958.56860, 686.58557,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(4595, 1812.95972, -1071.76428, 686.49622,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4702, 1825.28564, -990.24133, 686.35730,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4650, 1662.22815, -976.74054, 710.07861,   0.00000, -90.00000, 90.00000);
	CreateDynamicObject(14576, 1677.25659, -980.76630, 678.18488,   0.00000, 0.00000, 180.00000);
	//CreateDynamicObject(2634, 1677.76440, -987.50836, 671.68329,   0.00000, 0.00000, -55.00000);
	CreateDynamicObject(1726, 1668.31262, -981.95514, 682.60760,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1726, 1666.28406, -983.28662, 682.60760,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1665.64502, -982.69666, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1668.86804, -982.63745, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19443, 1665.71082, -987.56238, 686.06207,   90.00000, 90.00000, 90.00000);
	CreateDynamicObject(19443, 1665.71082, -981.06238, 686.06207,   90.00000, 90.00000, 90.00000);
	CreateDynamicObject(19443, 1665.71277, -984.27441, 686.06012,   90.00000, 90.00000, 90.00000);
	CreateDynamicObject(19443, 1667.36914, -989.22498, 686.06012,   90.00000, 90.00000, 0.00000);
	CreateDynamicObject(19443, 1665.71277, -977.56238, 686.06409,   90.00000, 90.00000, 90.00000);
	CreateDynamicObject(19443, 1669.03259, -987.56348, 686.06207,   90.00000, 90.00000, 90.00000);
	CreateDynamicObject(19443, 1669.03223, -984.16211, 686.06012,   90.00000, 90.00000, 90.00000);
	CreateDynamicObject(19443, 1669.03125, -980.87512, 686.05811,   90.00000, 90.00000, 90.00000);
	CreateDynamicObject(19443, 1669.03784, -977.56500, 686.05609,   90.00000, 90.00000, 90.00000);
	CreateDynamicObject(19443, 1667.37561, -975.89868, 686.06012,   90.00000, 90.00000, 0.00000);
	CreateDynamicObject(2434, 1677.79968, -999.17450, 669.99207,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2434, 1676.67566, -999.00781, 669.99408,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2435, 1677.96814, -998.04462, 669.99261,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2435, 1676.67773, -998.07520, 669.99261,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2434, 1677.97009, -997.13013, 669.99408,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2434, 1676.84619, -996.95288, 669.99213,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2000, 1674.19604, -989.16309, 669.99103,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2000, 1674.69397, -989.16107, 669.99103,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2000, 1675.19397, -989.16107, 669.99103,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2000, 1675.69397, -989.16107, 669.99103,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2000, 1678.69397, -989.16107, 669.99103,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2000, 1679.19397, -989.16107, 669.99103,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2000, 1679.69397, -989.16107, 669.99103,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2000, 1680.19397, -989.16107, 669.99103,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2000, 1680.32227, -1003.89697, 669.99237,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2000, 1679.82227, -1003.89697, 669.99237,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2000, 1679.32227, -1003.89697, 669.99237,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2000, 1678.82227, -1003.89697, 669.99237,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2000, 1678.32227, -1003.89697, 669.99237,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2000, 1677.82227, -1003.89697, 669.99237,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2000, 1677.32227, -1003.89697, 669.99237,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2000, 1676.82227, -1003.89697, 669.99237,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2000, 1676.32227, -1003.89697, 669.99237,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2000, 1675.82227, -1003.89697, 669.99237,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2000, 1675.32227, -1003.89697, 669.99237,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2000, 1674.82227, -1003.89697, 669.99237,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2000, 1674.32227, -1003.89697, 669.99237,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1550, 1674.38489, -1003.73480, 670.24860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1550, 1674.75854, -1003.40149, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1674.24988, -1003.33649, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1674.41284, -1002.94733, 670.12360,   69.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1674.23401, -1002.45795, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1675.05933, -1002.70532, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1678.09033, -999.48700, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1678.35583, -999.07501, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1678.58569, -999.58228, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1674.20776, -989.49445, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1674.75024, -989.43054, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1674.48401, -989.88702, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1674.98157, -989.83002, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1674.27588, -990.34778, 670.05060,   -105.00000, 0.00000, 287.00000);
	CreateDynamicObject(1550, 1675.00476, -1001.74683, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1676.12549, -998.38446, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1675.97021, -997.99341, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1675.61206, -998.46313, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1678.05933, -996.55249, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1677.51147, -996.45801, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1677.94556, -996.01849, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1677.39294, -995.96844, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1676.98633, -996.65375, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1680.32813, -992.60712, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1680.28064, -993.05798, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1679.88989, -992.82013, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1679.92578, -993.28516, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(1550, 1680.38379, -993.54877, 670.24860,   0.00000, 0.00000, 33.00000);
	CreateDynamicObject(19358, 1671.52832, -964.88507, 680.12793,   0.00000, 180.00000, -0.10000);
	CreateDynamicObject(19358, 1672.83105, -966.02869, 680.12793,   0.00000, 180.00000, -90.10000);
	CreateDynamicObject(18757, 1662.66113, -986.51813, 684.55219,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18757, 1662.66309, -984.56311, 684.55219,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1661.19666, -982.16919, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1661.23230, -987.33252, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18757, 1675.89514, -984.62836, 684.55219,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18757, 1675.89709, -986.50043, 684.55219,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1673.35864, -981.99762, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1673.48254, -987.14429, 682.68890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1557, 1655.64185, -972.38470, 682.58893,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1557, 1679.05115, -972.45654, 682.58893,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19464, 1685.72986, -987.53156, 672.48907,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, 1685.71204, -981.58417, 672.48907,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, 1685.73914, -976.21100, 672.48907,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, 1685.75281, -970.91187, 672.48907,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, 1670.69458, -971.08954, 672.48907,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, 1670.62061, -976.40570, 672.48907,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, 1670.48389, -981.24969, 672.48907,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, 1670.47412, -986.92102, 672.48907,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1734, 1684.81921, -973.82593, 675.49249,   0.00000, 30.00000, 30.00000);
	CreateDynamicObject(1734, 1684.89453, -978.63745, 675.49249,   0.00000, 30.00000, 30.00000);
	CreateDynamicObject(1734, 1684.82043, -983.63324, 675.49249,   0.00000, 30.00000, 30.00000);
	CreateDynamicObject(1734, 1671.46765, -974.24066, 675.49249,   0.00000, -30.00000, 30.00000);
	CreateDynamicObject(1734, 1671.31140, -978.95215, 675.49249,   0.00000, -30.00000, 30.00000);
	CreateDynamicObject(1734, 1671.28943, -984.09473, 675.49249,   0.00000, -30.00000, 30.00000);
	CreateDynamicObject(1808, 1663.93970, -988.78314, 682.69318,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1734, 1667.30676, -977.16321, 686.48077,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1734, 1667.30676, -980.16321, 686.48077,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1734, 1667.30676, -982.66321, 686.48077,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1734, 1667.30676, -984.66321, 686.48077,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1734, 1667.30676, -987.16321, 686.48077,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2108, 1670.81714, -976.99768, 682.66882,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2108, 1663.92041, -976.95392, 682.66882,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18075, 1667.43665, -982.60559, 685.90179,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 1664.73279, -976.47131, 683.17090,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 1664.72839, -975.08966, 683.17090,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 1670.14978, -975.04382, 683.17090,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 1670.14978, -976.44196, 683.17090,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 1670.02148, -989.06970, 683.17090,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 1670.00928, -990.43817, 683.17090,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 1664.61499, -990.44031, 683.17090,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 1664.63940, -989.05945, 683.17090,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 1660.72534, -992.72321, 683.17090,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 1673.82996, -992.72601, 683.17090,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1734, 1677.05408, -992.97064, 686.48077,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1734, 1656.62134, -992.63593, 686.48077,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19458, 1676.31287, -958.97858, 680.32001,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19458, 1676.38159, -964.48083, 682.59680,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19458, 1676.21570, -964.50897, 678.32642,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19458, 1674.84692, -958.82312, 676.11920,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19458, 1676.46021, -964.52179, 674.11139,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19458, 1675.06433, -958.81409, 671.91522,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(1886, 1662.88867, -972.32507, 685.98969,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(1886, 1671.76123, -972.41028, 685.98969,   0.00000, 0.00000, -33.00000);

	// SAN Interior (Main)
	CreateDynamicObject(19376, 247.74, 1783.13, 700.00,   0.00, 90.00, 0.00);
	CreateDynamicObject(19376, 258.24, 1783.14, 700.00,   0.00, 90.00, 0.00);
	CreateDynamicObject(19376, 247.74, 1773.55, 700.00,   0.00, 90.00, 0.00);
	CreateDynamicObject(19376, 258.23, 1773.55, 700.00,   0.00, 90.00, 0.00);
	CreateDynamicObject(19450, 250.44, 1784.44, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(19450, 245.63, 1779.94, 701.65,   0.00, 0.00, 0.00);
	CreateDynamicObject(19450, 253.91, 1780.12, 701.65,   0.00, 0.00, 0.00);
	CreateDynamicObject(19450, 253.03, 1775.84, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(19404, 252.33, 1778.41, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(19388, 249.65, 1777.30, 701.65,   0.00, 0.00, -45.00);
	CreateDynamicObject(19388, 246.66, 1775.84, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(19466, 252.38, 1778.39, 702.43,   0.00, 0.00, 90.00);
	CreateDynamicObject(1502, 249.13, 1776.76, 699.95,   0.00, 0.00, 45.00);
	CreateDynamicObject(2165, 251.81, 1777.85, 700.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(19358, 248.54, 1774.62, 701.65,   0.00, 0.00, 0.00);
	CreateDynamicObject(1714, 252.63, 1777.00, 700.09,   0.00, 0.00, 230.00);
	CreateDynamicObject(2007, 253.70, 1776.70, 700.01,   0.00, 0.00, -90.00);
	CreateDynamicObject(1961, 250.82, 1775.97, 701.86,   0.00, 0.00, 0.00);
	CreateDynamicObject(1962, 251.55, 1775.97, 701.86,   0.00, 0.00, 0.00);
	CreateDynamicObject(1960, 252.27, 1775.97, 701.86,   0.00, 0.00, 0.00);
	CreateDynamicObject(1569, 247.05, 1784.39, 700.02,   0.00, 0.00, 0.00);
	CreateDynamicObject(1569, 250.03, 1784.39, 700.02,   0.00, 0.00, 180.00);
	CreateDynamicObject(1703, 251.10, 1783.84, 700.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(1703, 246.23, 1779.16, 700.09,   0.00, 0.00, 90.00);
	CreateDynamicObject(2315, 247.52, 1779.46, 700.09,   0.00, 0.00, 90.00);
	CreateDynamicObject(2315, 251.39, 1782.50, 700.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(2250, 251.42, 1782.51, 701.03,   0.00, 0.00, 0.00);
	CreateDynamicObject(2250, 247.52, 1780.31, 701.03,   0.00, 0.00, 90.00);
	CreateDynamicObject(2852, 252.61, 1782.49, 700.58,   0.00, 0.00, 90.00);
	CreateDynamicObject(2894, 247.42, 1779.67, 700.58,   0.00, 0.00, 39.00);
	CreateDynamicObject(2011, 246.21, 1783.97, 700.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(2011, 253.24, 1779.07, 700.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(1502, 245.88, 1775.81, 699.95,   0.00, 0.00, 0.00);
	CreateDynamicObject(19450, 245.63, 1770.30, 701.65,   0.00, 0.00, 0.00);
	CreateDynamicObject(19358, 250.13, 1773.12, 701.65,   0.00, 0.00, 90.40);
	CreateDynamicObject(19388, 252.80, 1774.23, 701.65,   0.00, 0.00, -45.00);
	CreateDynamicObject(1502, 252.29, 1773.69, 699.95,   0.00, 0.00, 45.00);
	CreateDynamicObject(1265, 250.63, 1775.49, 700.16,   0.00, 0.00, 0.00);
	CreateDynamicObject(1265, 250.35, 1774.87, 700.16,   0.00, 0.00, 0.00);
	CreateDynamicObject(1778, 253.53, 1775.81, 700.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(2712, 253.57, 1775.32, 700.68,   0.00, 0.00, 0.00);
	CreateDynamicObject(1221, 249.31, 1773.68, 700.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(1221, 250.27, 1773.94, 700.38,   0.00, 0.00, 0.00);
	CreateDynamicObject(1221, 249.56, 1775.12, 700.38,   0.00, 0.00, 0.00);
	CreateDynamicObject(1265, 249.18, 1774.36, 700.16,   0.00, 0.00, 0.00);
	CreateDynamicObject(19450, 249.18, 1768.98, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(1705, 246.30, 1770.17, 700.09,   0.00, 0.00, 90.00);
	CreateDynamicObject(1705, 247.85, 1769.63, 700.09,   0.00, 0.00, 180.00);
	CreateDynamicObject(1705, 251.83, 1769.63, 700.09,   0.00, 0.00, 180.00);
	CreateDynamicObject(2315, 248.60, 1769.55, 700.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(2855, 248.78, 1769.55, 700.58,   0.00, 0.00, 0.00);
	CreateDynamicObject(2251, 249.67, 1769.36, 701.41,   0.00, 0.00, 0.00);
	CreateDynamicObject(1667, 249.91, 1769.75, 700.69,   0.00, 0.00, 0.00);
	CreateDynamicObject(1667, 250.08, 1769.65, 700.69,   0.00, 0.00, 0.00);
	CreateDynamicObject(2817, 248.02, 1783.18, 700.08,   0.00, 0.00, 0.00);
	CreateDynamicObject(19450, 254.81, 1780.65, 701.65,   0.00, 0.00, 0.00);
	CreateDynamicObject(14393, 255.23, 1759.95, 702.32,   0.00, 0.00, 90.00);
	CreateDynamicObject(19450, 261.73, 1768.98, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(19450, 249.19, 1768.83, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(19388, 255.31, 1768.98, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(19388, 255.31, 1768.83, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(19450, 261.73, 1768.83, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(14391, 256.13, 1760.86, 701.05,   0.00, 0.00, 90.00);
	CreateDynamicObject(1705, 257.11, 1767.64, 700.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(1705, 258.68, 1767.02, 700.09,   0.00, 0.00, -90.00);
	CreateDynamicObject(2332, 259.63, 1764.36, 700.38,   0.00, 0.00, -90.00);
	CreateDynamicObject(638, 254.72, 1765.20, 701.43,   0.00, 0.00, 90.00);
	CreateDynamicObject(638, 258.07, 1765.20, 701.43,   0.00, 0.00, 90.00);
	CreateDynamicObject(2894, 256.40, 1765.18, 701.10,   0.00, 0.00, 80.00);
	CreateDynamicObject(1714, 257.11, 1762.81, 700.10,   0.00, 0.00, -45.00);
	CreateDynamicObject(1714, 254.18, 1762.77, 700.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(1502, 251.40, 1759.68, 699.95,   0.00, 0.00, 0.00);
	CreateDynamicObject(2395, 250.95, 1759.82, 700.10,   0.00, 0.00, 180.00);
	CreateDynamicObject(2395, 252.48, 1759.82, 702.46,   0.00, 0.00, 180.00);
	CreateDynamicObject(2395, 249.79, 1759.59, 702.46,   0.00, 0.00, 0.00);
	CreateDynamicObject(2395, 248.19, 1759.58, 700.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(1704, 254.31, 1753.90, 700.09,   0.00, 0.00, 135.00);
	CreateDynamicObject(1704, 256.22, 1754.49, 700.09,   0.00, 0.00, -135.00);
	CreateDynamicObject(1815, 254.42, 1754.73, 700.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(2247, 254.89, 1755.32, 700.99,   0.00, 0.00, 0.00);
	CreateDynamicObject(2010, 253.33, 1754.95, 700.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(2010, 256.59, 1754.91, 700.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(19466, 253.95, 1759.95, 701.92,   0.00, 0.00, 90.00);
	CreateDynamicObject(19466, 256.17, 1759.95, 701.92,   0.00, 0.00, 90.00);
	CreateDynamicObject(19466, 258.40, 1759.95, 701.92,   0.00, 0.00, 90.00);
	CreateDynamicObject(19376, 259.00, 1763.90, 699.99,   0.00, 90.00, 0.00);
	CreateDynamicObject(1502, 254.53, 1768.96, 699.95,   0.00, 0.00, 0.00);
	CreateDynamicObject(19450, 262.61, 1772.18, 701.65,   0.00, 0.00, -45.00);
	CreateDynamicObject(19450, 263.67, 1770.76, 701.65,   0.00, 0.00, 0.00);
	CreateDynamicObject(19450, 257.75, 1783.82, 701.65,   0.00, 0.00, 0.00);
	CreateDynamicObject(19388, 257.75, 1777.43, 701.65,   0.00, 0.00, 0.00);
	CreateDynamicObject(19388, 259.37, 1782.08, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(19388, 265.76, 1782.08, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(19450, 268.40, 1775.63, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(19358, 256.17, 1781.31, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(2606, 256.21, 1781.15, 702.56,   13.50, 0.00, 0.00);
	CreateDynamicObject(2165, 255.78, 1780.60, 700.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(1806, 256.45, 1779.59, 700.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(2078, 255.16, 1777.82, 700.11,   0.00, 0.00, 90.00);
	CreateDynamicObject(2462, 257.00, 1776.04, 700.26,   0.00, 0.00, 180.00);
	CreateDynamicObject(19418, 257.25, 1776.20, 701.06,   90.00, 90.00, 90.00);
	CreateDynamicObject(19418, 256.93, 1776.10, 701.06,   90.00, 90.00, 324233.00);
	CreateDynamicObject(19418, 257.04, 1776.30, 701.06,   90.00, 90.00, 342.00);
	CreateDynamicObject(334, 257.00, 1776.08, 701.41,   90.00, 0.00, 90.00);
	CreateDynamicObject(2037, 257.28, 1776.14, 701.81,   0.00, 0.00, 180.00);
	CreateDynamicObject(348, 256.86, 1776.16, 701.77,   90.00, 0.00, 45.00);
	CreateDynamicObject(19376, 268.68, 1783.12, 700.00,   0.00, 90.00, 0.00);
	CreateDynamicObject(19376, 268.71, 1773.53, 700.00,   0.00, 90.00, 0.00);
	CreateDynamicObject(19450, 262.09, 1787.45, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(19450, 269.72, 1784.41, 701.65,   0.00, 0.00, 45.00);
	CreateDynamicObject(19450, 269.61, 1780.36, 701.65,   0.00, 0.00, 0.00);
	CreateDynamicObject(19450, 272.15, 1782.08, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(19358, 262.57, 1782.08, 701.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(19450, 262.68, 1786.88, 701.65,   0.00, 0.00, 0.00);
	CreateDynamicObject(1702, 261.93, 1772.37, 700.08,   0.00, 0.00, 225.00);
	CreateDynamicObject(2315, 259.75, 1772.14, 700.09,   0.00, 0.00, 45.00);
	CreateDynamicObject(2315, 266.10, 1777.95, 700.09,   0.00, 0.00, 45.00);
	CreateDynamicObject(1702, 268.89, 1779.58, 700.08,   0.00, 0.00, 270.00);
	CreateDynamicObject(1702, 267.63, 1776.33, 700.08,   0.00, 0.00, 180.00);
	CreateDynamicObject(2251, 260.10, 1772.71, 701.41,   0.00, 0.00, 0.00);
	CreateDynamicObject(2251, 266.94, 1779.01, 701.41,   0.00, 0.00, 0.00);
	CreateDynamicObject(1667, 260.76, 1772.73, 700.69,   0.00, 0.00, 0.00);
	CreateDynamicObject(1667, 266.26, 1777.77, 700.69,   0.00, 0.00, 0.00);
	CreateDynamicObject(1667, 266.34, 1777.86, 700.69,   0.00, 0.00, 0.00);
	CreateDynamicObject(1667, 266.20, 1777.88, 700.69,   0.00, 0.00, 0.00);
	CreateDynamicObject(1502, 258.59, 1782.06, 699.95,   0.00, 0.00, 0.00);
	CreateDynamicObject(1502, 264.98, 1782.06, 699.95,   0.00, 0.00, 0.00);
	CreateDynamicObject(2207, 265.49, 1785.14, 700.09,   0.00, 0.00, -45.00);
	CreateDynamicObject(1714, 267.29, 1785.67, 700.10,   0.00, 0.00, -45.00);
	CreateDynamicObject(330, 266.98, 1784.24, 700.86,   90.00, 0.00, 90.00);
	CreateDynamicObject(2894, 265.87, 1785.33, 700.86,   0.00, 0.00, 0.00);
	CreateDynamicObject(2608, 263.00, 1785.07, 701.21,   0.00, 0.00, 90.00);
	CreateDynamicObject(1962, 267.85, 1786.13, 701.86,   0.00, 0.00, -45.00);
	CreateDynamicObject(2185, 258.67, 1785.35, 700.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(1714, 260.03, 1786.60, 700.10,   0.00, 0.00, -45.00);
	CreateDynamicObject(1704, 260.02, 1783.92, 700.09,   0.00, 0.00, 180.00);
	CreateDynamicObject(2078, 262.38, 1784.88, 700.11,   0.00, 0.00, -90.00);
	CreateDynamicObject(2007, 257.95, 1786.74, 700.01,   0.00, 0.00, 90.00);
	CreateDynamicObject(1569, 257.81, 1776.73, 700.02,   0.00, 0.00, 45.00);
	CreateDynamicObject(2886, 257.82, 1778.48, 701.44,   0.00, 0.00, 90.00);
	CreateDynamicObject(2886, 257.82, 1778.51, 701.44,   0.00, 0.00, -90.00);
	CreateDynamicObject(2886, 257.71, 1778.48, 701.44,   0.00, 0.00, -90.00);
	CreateDynamicObject(19378, 247.74, 1783.13, 703.43,   0.00, 90.00, 0.00);
	CreateDynamicObject(19378, 247.74, 1773.55, 703.43,   0.00, 90.00, 0.00);
	CreateDynamicObject(19378, 258.23, 1773.55, 703.43,   0.00, 90.00, 0.00);
	CreateDynamicObject(19378, 268.68, 1783.12, 703.43,   0.00, 90.00, 0.00);
	CreateDynamicObject(19378, 268.71, 1773.53, 703.43,   0.00, 90.00, 0.00);
	CreateDynamicObject(19378, 258.24, 1783.14, 703.43,   0.00, 90.00, 0.00);

	new count;
	for(new i = 0; i < MAX_OBJECTS; i ++)
	{
	    if(IsValidObject(i)) count++;
	}

	printf("%i objects loaded.", count);
	return 1;
}

public OnGameModeExit()
{
	VC_OnGameModeExit();
	for(new i = 0; i < MAX_OBJECTS; i ++)
	{
	    if(IsValidObject(i) && gScriptObject{i})
	    {
	        DestroyObject(i);
		}
	}

	KillTimer(FlashTimer);

	StopGamemode();

	// CCTV
	TextDrawHideForAll(TD);
	TextDrawDestroy(TD);
	for(new i; i<TotalMenus; i++)
	{
		DestroyMenu(CCTVMenu[i]);
	}
	/*--------------------*/

	if(gDoubleXP)
	{
	    gDoubleXP = 0;
	}

	return 1;
}

forward Introduction(playerid);
public Introduction(playerid)
{
    switch(random(8))
	{
		case 0: // Non Interpolate Cam
		{
			SetPlayerCameraPos(playerid, 2019.1145, 1202.9185, 42.3246);
			SetPlayerCameraLookAt(playerid, 2019.9889, 1202.4272, 42.2945);
		}
	    case 1:
	    {
	        //Allsaints
            InterpolateCameraPos(playerid, 1234.653930, -1414.318725, 39.644763, 1236.645263, -1258.656738, 42.832675, 10000);
			InterpolateCameraLookAt(playerid, 1231.584594, -1410.752929, 37.952308, 1233.951782, -1262.467651, 41.037715, 10000);
		}
  		case 2:
	    {
	        //PD
            InterpolateCameraPos(playerid, 1489.362792, -1583.028686, 44.194358, 1508.287231, -1728.068603, 34.431514, 10000);
			InterpolateCameraLookAt(playerid, 1492.246826, -1586.841186, 42.729114, 1511.477050, -1724.447021, 33.123889, 10000);
		}
		case 3:
		{
		    //Mall
            InterpolateCameraPos(playerid, 1086.390380, -1386.045166, 23.513315, 1164.687744, -1390.294799, 23.960275, 10000);
			InterpolateCameraLookAt(playerid, 1089.244384, -1390.083496, 22.773849, 1161.344360, -1393.948852, 23.274938, 10000);
		}
		case 4:
		{
		    //Vinewood
            InterpolateCameraPos(playerid, 1348.675170, -955.284179, 36.144062, 1478.017578, -875.497802, 84.223823, 10000);
			InterpolateCameraLookAt(playerid, 1351.362182, -951.230590, 37.305236, 1474.737182, -871.728759, 84.407691, 10000);
		}
		case 5:
  		{
            InterpolateCameraPos(playerid, 1703.823730, -1859.832763, 18.384685, 1810.310302, -1847.576904, 22.806613, 10000);
			InterpolateCameraLookAt(playerid, 1699.486328, -1862.178466, 17.557682, 1805.682983, -1848.947387, 21.498987, 10000);
		}
		case 6: // Non Interpolate Cam
		{
   			SetPlayerCameraPos(playerid, 1701.8396, -1572.9250, 26.6298);
			SetPlayerCameraLookAt(playerid, 1701.2588, -1572.1072, 27.1848);
		}
		case 7: // Non Interpolate Cam
		{
   			SetPlayerCameraPos(playerid, -2619.1006, 2202.6091, 49.9144);
			SetPlayerCameraLookAt(playerid, -2619.2512, 2201.6155, 50.1043);
		}
	}
	return 1;
}

forward PrepareLotto();
public PrepareLotto()
{
	if(!LottoStarted)
	{
		LottoStarted = 1;
		SetTimerEx("StartLotto", 1000 * 60 * 30, false, "d", 1);
		foreach(new i : Player) SCM(i, COLOR_WHITE, "Lottery: A Lottery Number Selection is about to start, please get a lottery ticket at any 24/7. "WHITE"60 minutes left.");
	}
	return 1;
}

forward StartLotto(stage);
public StartLotto(stage)
{
	if(stage == 1)
	{
		foreach(new i : Player) SCM(i, COLOR_YELLOW, "Lottery: A Lottery Number Selection is about to start, please get a lottery ticket at any 24/7. "WHITE"30 minutes left.");
		SetTimerEx("StartLotto", 1000 * 60 * 30, false, "d", 2);
	}
	else if(stage == 2)
	{
	    SetTimerEx("EndLotto", 1000, false, "d", 3);
	}
	else
	{
		foreach(new i : Player) SCMf(i, COLOR_YELLOW, "Lottery: A Lottery Number Selection is about to start, please get a lottery ticket at any 24/7. "WHITE"%d minutes left.", stage);
		SetTimerEx("StartLotto", 1000 * 60 * stage, false, "d", 2);
	}
	return 1;
}

forward EndLotto(second);
public EndLotto(second)
{
	if(second != 0)
	{
		foreach(new i : Player) SCMf(i, COLOR_WHITE, "LOTTERY COUNTDOWN: %d.", second);
		SetTimerEx("EndLotto", 1000, false, "d", second-1);
	}
	else
	{
		foreach(new i : Player) SCM(i, COLOR_YELLOW, "Lottery: We have announced the Lottery Number Selection.");

		if(!gDrawNumber)
		{
			gDrawNumber = random(99);
			if(gDrawNumber < 77) { gDrawNumber += 3; }
		}

		Lotto(gDrawNumber);
		LottoStarted = 0;
	}
	return 1;
}
stock Lotto(number)
{
	new JackpotFallen = 0, number_winner = 0, rand;

	foreach(new i : Player)
	{
		SCMf(i, COLOR_YELLOW, "[Lottery]: Today the winning number has fallen on... "WHITE"%d!.", number);

		if(pData[i][pLottery] == number && pData[i][pLottery] > 0)
		{
			number_winner ++;

			if(number_winner <= 1)
			{
				JackpotFallen = 1;
				foreach(new x : Player) SCMf(x, COLOR_YELLOW, "Lottery: %s has won the jackpot of "WHITE"$%d"YELLOW" with their lottery ticket.", GetRPName(i), gLotto);
				SCMf(i, COLOR_YELLOW, "* You have won $%d with your lottery ticket - congratulations!", gLotto);
				GivePlayerCash(i, gLotto);
			} else {
				JackpotFallen = 1;
				foreach(new x : Player)
				{
					SCMf(x, COLOR_TEAL, "[Lottery]: There are "WHITE"(%d)"TEAL" jackpot winners for this draw, the jackpot prize was split to "WHITE"%d"TEAL". "WHITE"($%d)", number_winner, number_winner, floatround(gLotto / number_winner));
					SCMf(x, COLOR_TEAL, "[Lottery]: "WHITE"%s"TEAL" has won the jackpot of "WHITE"$%d"TEAL" with their lottery ticket.", GetRPName(i), floatround(gLotto / number_winner));
				}
				SCMf(i, COLOR_TEAL, "* You have won "WHITE"$%d"TEAL" with your lottery ticket - congratulations!", floatround(gLotto / number_winner));
				GivePlayerCash(i, floatround(gLotto / number_winner));
			}
		}

		pData[i][pLottery] = 0;
	}

	if(JackpotFallen) // change lotto price here (CTRL + F to find me)
	{
		rand = random(50000); rand += 25000;
		gLotto = rand;
		foreach(new i : Player) SCMf(i, COLOR_TEAL, "[Lottery]: The new jackpot has been started with "WHITE"$%d.", gLotto);
	}
	else
	{
		rand = random(10000);
		gLotto += rand;
		foreach(new i : Player) SCMf(i, COLOR_TEAL, "[Lottery]: The jackpot has been raised to "WHITE"$%d.", gLotto);
	}

	gDrawNumber = 0;
	SaveServerInfo();
	return 1;
}

public OnClientCheckResponse(playerid, type, arg, response)
{
    switch(type)
    {
        case 0x48:
        {
            SetPVarInt(playerid, "NotAndroid", 1);
        }
    }
    return 1;
}

// Tune system
static pvehicleid[MAX_PLAYERS];
static pmodelid[MAX_PLAYERS];

public OnPlayerConnect(playerid)
{
	SetPlayerWorldBounds(playerid, 20000.0000, -20000.0000, 20000.0000, -20000.0000);
	VC_OnPlayerConnect(playerid);
	GPS_OnPlayerConnect(playerid);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT discordid FROM users WHERE username = '%e'", GetPlayerNameEx(playerid));
	mysql_tquery(connectionID, queryBuffer, "CheckPlayerName", "i", playerid);

	// SPEEDO //
	SpeedoTextdraw(playerid);
	// HUNGER //
	HungerTD(playerid);
	// POPUP TD //
	DefineTextDraws(playerid);

	//Sabong
/*	PlayerBetRed[playerid] = 0;
    PlayerBetBlue[playerid] = 0;
    PlayerJoinedBetting[playerid] = false;
    CreateBettingPTD(playerid);*/
	//--------------------------------------------
    TextDrawHideForPlayer(playerid, TutorialNewbieTD[0]);
    TextDrawHideForPlayer(playerid, TutorialNewbieTD[1]);
    TextDrawHideForPlayer(playerid, TutorialNewbieTD[2]);
    
    SendClientCheck(playerid, 0x48, 0, 0, 2);
	if(IsPlayerNPC(playerid)) return 1;
	PlayAudioStreamForPlayer(playerid, "https://www.mboxdrive.com/kai-kassi-feat-melt-100-karat.mp3");
	SCM(playerid, COLOR_SAMP, "Establishing connection to the "SVRCLR""SERVER_NAME" {A9C4E4}database.");


    ExBJck[playerid] = 0;
    pBlind[playerid] = 0;
    Maskara[playerid] = 0;
    ShowingBounds[playerid] = 0;
	Sliding[playerid] = 0;
    CurrentCCTV[playerid] = -1;
	pvehicleid[playerid] = GetPlayerVehicleID(playerid);
	pvehicleid[playerid] = 0;
    pmodelid[playerid] = 0;
	pData[playerid][pPaintball] = 0;
	pData[playerid][pPaintball2] = 0;
	pData[playerid][pCarrying] = false;
	pData[playerid][pCarry] = 0;
	PayCheckCode[playerid] = 0;

	pData[playerid][pSkates] = 0;
	pData[playerid][pSkateObj] = 0;
	pData[playerid][pSkating] = false;
	pData[playerid][pCrowbar] = 0;
	pData[playerid][pHelmet] = 0;
	pData[playerid][pUseHelmet] = 0;

	// Default values are handled via MySQL/PhpMyAdmin. Don't assign default values here.
	pData[playerid][pRobbingHouse] = -1;
	pData[playerid][pToolkit] = 0;
    pData[playerid][pGraffiti] = -1;
    pData[playerid][pChatAnim] = 0;
    pData[playerid][pGraffitiTime] = 0;
    pData[playerid][pGraffitiColor] = 0;
    pData[playerid][pEditGraffiti] = -1;
	pData[playerid][pEditGate] = -1;
	pData[playerid][pEditmObject] = -1;
	pData[playerid][pRobbingBiz] = -1;
	pData[playerid][pProductChoose] = -1;
	pData[playerid][pAcceptedEMS] = INVALID_PLAYER_ID;
	pData[playerid][pDiamonds] = 0;
	pData[playerid][pEngine] = 0;
	pData[playerid][pID] = 0;
	pData[playerid][pLogged] = 0;
	pData[playerid][pKicked] = 0;
	pData[playerid][pLoginTries] = 0;
	pData[playerid][pSetup] = 0;
	pData[playerid][pGender] = 0;
	pData[playerid][pAge] = 0;
	pData[playerid][pSkin] = 0;
	pData[playerid][pCameraX] = 0;
	pData[playerid][pFormerAdmin] = 0;
	pData[playerid][pBindtype] = 0;
	pData[playerid][pBindtype2] = 0;
	pData[playerid][pBindtype3] = 0;
	pData[playerid][pBindtype4] = 0;
	pData[playerid][pBindtype5] = 0;
	pData[playerid][pCameraY] = 0;
	pData[playerid][pCameraZ] = 0;
	pData[playerid][pPosX] = 0;
	pData[playerid][pPosY] = 0;
	pData[playerid][pPosZ] = 0;
	pData[playerid][pPosA] = 0;
	pData[playerid][pInterior] = 0;
	pData[playerid][pWorld] = 0;
	pData[playerid][pCash] = 100;
	pData[playerid][pBank] = 500;
	pData[playerid][pPaycheck] = 0;
	pData[playerid][pLevel] = 1;
	pData[playerid][pFirework] = 0;
	//RocketExplosions[playerid] = -1;

	pData[playerid][pAdvertWarnings] = 0;
	pData[playerid][pEXP] = 0;
	pData[playerid][pMinutes] = 0;
	pData[playerid][pHours] = 0;
	pData[playerid][pSeconds] = 0;
	pData[playerid][pPlayingHours] = 0;
	pData[playerid][pAdmin] = 0;
	pData[playerid][pAdminName] = 0;
	pData[playerid][pHelper] = 0;
	pData[playerid][pHealth] = 100.0;
	pData[playerid][pArmor] = 0.0;
	pData[playerid][pWarnings] = 0;
	pData[playerid][pInjured] = 0;
	pData[playerid][pBrokenLeg] = 0;
	pData[playerid][pHospital] = 0;
	pData[playerid][pSpawnHealth] = 50.0;
	pData[playerid][pSpawnArmor] = 0;
	pData[playerid][pJailType] = 0;
	pData[playerid][pJailTime] = 0;
	pData[playerid][pBedType] = 0;
	pData[playerid][pBedTime] = 0;
	pData[playerid][pNewbieMuted] = 0;
	pData[playerid][pHelpMuted] = 0;
	pData[playerid][pAdMuted] = 0;
	pData[playerid][pLiveMuted] = 0;
	pData[playerid][pGlobalMuted] = 0;
	pData[playerid][pReportMuted] = 0;
	pData[playerid][pReportWarns] = 0;
	pData[playerid][pFightStyle] = 0;
	pData[playerid][pAccent] = 0;
	pData[playerid][pDirtyCash] = 0;

	/*#if defined Christmas
	#else
		pData[playerid][pCandy] = 0;
	#endif*/

	pData[playerid][pPhone] = 0;
	pData[playerid][pLottery] = 0;
	pData[playerid][pJob] = JOB_NONE;
	pData[playerid][pSecondJob] = JOB_NONE;
	pData[playerid][pCrimes] = 0;
	pData[playerid][pArrested] = 0;
	pData[playerid][pWantedLevel] = 0;
	pData[playerid][pMaterials] = 0;
	pData[playerid][pPot] = 0;
	pData[playerid][pCrack] = 0;
	pData[playerid][pMeth] = 0;
	pData[playerid][pPainkillers] = 0;
	pData[playerid][pSeeds] = 0;
	pData[playerid][pEphedrine] = 0;
	pData[playerid][pMuriaticAcid] = 0;
	pData[playerid][pBakingSoda] = 0;
	pData[playerid][pCigars] = 0;
	pData[playerid][pFood] = 0;
	pData[playerid][pDrink] = 0;
	pData[playerid][pVest] = 0;

	pData[playerid][pEquipVest] = false;
	KillTimer(pData[playerid][pEquipTimer]);
	pData[playerid][pEquipTimer] = -1;
	
	pData[playerid][pWalkieTalkie] = 0;
	pData[playerid][pChannel] = 0;
	pData[playerid][pRentingHouse] = 0;
	pData[playerid][pSpraycans] = 0;
	pData[playerid][pBoombox] = 0;
	pData[playerid][pVerified] = 0;
	pData[playerid][pMask] = 0;
	
  	pData[playerid][pDrivingTime] = 0;
	pData[playerid][pDrivingFail] = 0;
	pData[playerid][pDrivingWait] = 0;
	pData[playerid][pDrivingTest] = 0;
	pData[playerid][pDrivingCP] = 0;
	pData[playerid][pDrivingScore] = 0;
	pData[playerid][pDrivingStart] = 0;
	
	pData[playerid][pBlindfold] = 0;
	pData[playerid][pMP3Player] = 0;
	pData[playerid][pPhonebook] = 0;
	pData[playerid][pFishingRod] = 0;
	pData[playerid][pFishingBait] = 0;
	pData[playerid][pFishWeight] = 0;
	pData[playerid][pFishingSkill] = 0;
	pData[playerid][pGuardSkill] = 0;
	pData[playerid][pWeaponSkill] = 0;
	pData[playerid][pLawyerSkill] = 0;
	pData[playerid][pSmugglerSkill] = 0;
	pData[playerid][pToggleTextdraws] = 0;
	pData[playerid][pToggleAtm] = 0;
	pData[playerid][pToggleOOC] = 0;
	pData[playerid][pTogglePhone] = 0;
	pData[playerid][pToggleAdmin] = 0;
	pData[playerid][pToggleHelper] = 0;
	pData[playerid][pToggleNewbie] = 0;
	pData[playerid][pToggleWT] = 0;
	pData[playerid][pToggleRadio] = 0;
	pData[playerid][pToggleVIP] = 0;
	pData[playerid][pToggleMusic] = 0;
	pData[playerid][pToggleFaction] = 0;
	pData[playerid][pToggleGang] = 0;
	pData[playerid][pToggleNews] = 0;
	pData[playerid][pToggleGlobal] = 1;
	pData[playerid][pToggleCam] = 0;
	pData[playerid][pCarLicense] = 0;
	pData[playerid][pWeaponLicense] = 0;
	pData[playerid][pDonator] = 0;
	pData[playerid][pVIPTime] = 14;
	pData[playerid][pVIPCooldown] = 0;
	pData[playerid][pWeapons] = 0;
	pData[playerid][pAmmo] = 0;
	pData[playerid][pFaction] = 0;
	pData[playerid][pFactionRank] = 0;
	pData[playerid][pGang] = 0;
	pData[playerid][pGangRank] = 0;
	pData[playerid][pDivision] = 0;
	pData[playerid][pContracted] = 0;
	pData[playerid][pContractBy] = 0;
	pData[playerid][pBombs] = 0;
	pData[playerid][pCompletedHits] = 0;
	pData[playerid][pFailedHits] = 0;
	pData[playerid][pReports] = 0;
	pData[playerid][pNewbies] = 0;
	pData[playerid][pHelpRequests] = 0;
	pData[playerid][pSpeedometer] = 0;

	pData[playerid][pStaffLeader] = 0;

	pData[playerid][pDeveloper] = 0;
	pData[playerid][pDynamicAdmin] = 0;
	pData[playerid][pFactionMod] = 0;
	pData[playerid][pAdminPersonnel] = 0;
	pData[playerid][pGangMod] = 0;
	pData[playerid][pBanAppealer] = 0;
	pData[playerid][pEventMod] = 0;
	pData[playerid][pPotPlanted] = 0;
	pData[playerid][pPotTime] = 0;
	pData[playerid][pPotGrams] = 0;
	pData[playerid][pPotX] = 0;
	pData[playerid][pPotY] = 0;
	pData[playerid][pPotZ] = 0;
	pData[playerid][pPotA] = 0;
	pData[playerid][pInventoryUpgrade] = 0;
	pData[playerid][pAddictUpgrade] = 0;
	pData[playerid][pTraderUpgrade] = 0;
	pData[playerid][pAssetUpgrade] = 0;
	pData[playerid][pHPAmmo] = 0;
	pData[playerid][pPoisonAmmo] = 0;
	pData[playerid][pFMJAmmo] = 0;
	pData[playerid][pAmmoType] = 0;
	pData[playerid][pAmmoWeapon] = 0;
	pData[playerid][pLastReport] = 0;
	pData[playerid][pLastAM] = 0;
	pData[playerid][pLastChop] = 0;
	pData[playerid][pLastCharity] = 0;
	pData[playerid][pLastDamage] = 0;
	pData[playerid][pFirstSpawn] = 1; 
	pData[playerid][pLastNewbie] = 0;
	pData[playerid][pLastRequest] = 0;
	pData[playerid][pLastPay] = 0;
	pData[playerid][pLastRepair] = 0;
	pData[playerid][pLastRefuel] = 0;
	pData[playerid][pLastDrug] = 0;
	pData[playerid][pLastSell] = 0;
	pData[playerid][pLastEnter] = 0;
	pData[playerid][pLastPress] = 0;
	pData[playerid][pLastDeath] = 0;
	pData[playerid][pLastDesync] = 0;
	pData[playerid][pLastGlobal] = 0;
	pData[playerid][pLastShoutout] = 0;
	pData[playerid][pSpectating] = INVALID_PLAYER_ID;
	pData[playerid][pAdminDuty] = 0;
	pData[playerid][pActiveReport] = -1;
	pData[playerid][pHospitalTime] = 0;
	pData[playerid][pListen] = 0;
	pData[playerid][pPMListen] = 0;
	pData[playerid][pJoinedEvent] = 0;
	pData[playerid][pDueling] = INVALID_PLAYER_ID;
	pData[playerid][pEventTeam] = 0;
	pData[playerid][pAwaitingClothing] = 0;
	pData[playerid][pFreezeTimer] = -1;
	pData[playerid][pNameChange][0] = 0;
	pData[playerid][pHelpRequest][0] = 0;
	pData[playerid][pAcceptedHelp] = 0;
	pData[playerid][pHouseOffer] = INVALID_PLAYER_ID;
	pData[playerid][pGarageOffer] = INVALID_PLAYER_ID;
	pData[playerid][pBizOffer] = INVALID_PLAYER_ID;
	pData[playerid][pMarriageOffer] = INVALID_PLAYER_ID;
	pData[playerid][pVestOffer] = INVALID_PLAYER_ID;
	pData[playerid][pCarOffer] = INVALID_PLAYER_ID;
	pData[playerid][pFactionOffer] = INVALID_PLAYER_ID;
	pData[playerid][pGangOffer] = INVALID_PLAYER_ID;
	pData[playerid][pFriskOffer] = INVALID_PLAYER_ID;
	pData[playerid][pTicketOffer] = INVALID_PLAYER_ID;
	pData[playerid][pLiveOffer] = INVALID_PLAYER_ID;
	pData[playerid][pLiveBroadcast] = INVALID_PLAYER_ID;
	pData[playerid][pLandOffer] = INVALID_PLAYER_ID;
	pData[playerid][pShakeOffer] = INVALID_PLAYER_ID;
	pData[playerid][pSellOffer] = INVALID_PLAYER_ID;
	pData[playerid][pAllianceOffer] = INVALID_PLAYER_ID;
	pData[playerid][pDefendOffer] = INVALID_PLAYER_ID;
	pData[playerid][pDiceOffer] = INVALID_PLAYER_ID;
	pData[playerid][pSendRob] = INVALID_PLAYER_ID;
	pData[playerid][pInviteOffer] = INVALID_PLAYER_ID;
	pData[playerid][pRobberyOffer] = INVALID_PLAYER_ID;
	pData[playerid][pEditType] = 0;
    pData[playerid][pEditObject] = INVALID_OBJECT_ID;
    pData[playerid][pFurniturePerms] = -1;
	pData[playerid][pLandPerms] = -1;
	pData[playerid][pPizzas] = 0;
	pData[playerid][pLastPizza] = 0;
	pData[playerid][pLastStuck] = 0;
	pData[playerid][pLastUpdate] = 0;
	pData[playerid][pLastLoad] = 0;
	pData[playerid][pLastBet] = 0;
	pData[playerid][pLastClean] = 0;
	pData[playerid][pCP] = CHECKPOINT_NONE;
	pData[playerid][pShipment] = -1;
	pData[playerid][pIllegalCargo] = -1;
	pData[playerid][pFishTime] = 0;
	pData[playerid][pUsedBait] = 0;
	pData[playerid][pSmuggleMats] = 0;
	pData[playerid][pSmuggleTime] = 0;
	pData[playerid][pSmuggleDrugs] = 0;
	pData[playerid][pRefuel] = INVALID_VEHICLE_ID;
	pData[playerid][pCallLine] = INVALID_PLAYER_ID;
    pData[playerid][pAFK] = 0;
    pData[playerid][pAFKTime] = 0;
	pData[playerid][pLoopAnim] = 0;
	pData[playerid][pMiningTime] = 0;
	pData[playerid][pMiningRock] = 0;
	pData[playerid][pConstructionTime] = 0;
	pData[playerid][pConstruction] = 0;
	pData[playerid][pDrivingTest] = 0;
	pData[playerid][pSpecialTag] = Text3D:INVALID_3DTEXT_ID;
	pData[playerid][pTagType] = TAG_NORMAL;
	pData[playerid][pVIPColor] = 0;
	pData[playerid][pAdminColor] = 0;
    pData[playerid][pTaxiFare] = 0;
    pData[playerid][pTaxiPassenger] = INVALID_PLAYER_ID;
    pData[playerid][pTaxiBill] = 0;
    pData[playerid][pTaxiTime] = 0;
    pData[playerid][pFaction] = -1;
    pData[playerid][pFactionRank] = 0;
    pData[playerid][pGang] = -1;
    pData[playerid][pGangRank] = 0;
	pData[playerid][pDuty] = 0;
	pData[playerid][pBackup] = 0;
	pData[playerid][pTazer] = 0;
	pData[playerid][pTazedTime] = 0;
	pData[playerid][pBeanbag] = 0;
	pData[playerid][pBeanbagTime] = 0;
	pData[playerid][pCuffed] = 0;
	pData[playerid][pTied] = 0;
	pData[playerid][pDraggedBy] = INVALID_PLAYER_ID;
	pData[playerid][pSkinSelected] = -1;
	pData[playerid][pChatstyle] = 0;

	pData[playerid][pBandage] = 0;
	pData[playerid][pRepairKit] = 0;
	pData[playerid][pParts] = 0;
	pData[playerid][pMedkit] = 0;
    pData[playerid][pDelivered] = 0;
    pData[playerid][pPlantedBomb] = 0;
    pData[playerid][pBombObject] = INVALID_OBJECT_ID;
    pData[playerid][pContractTaken] = INVALID_PLAYER_ID;
	pData[playerid][pSpamTime] = 0;
	pData[playerid][pVendorTime] = 0;
	pData[playerid][pBarTime] = 0;
    pData[playerid][pMuted] = 0;
    pData[playerid][pBoomboxPlaced] = 0;
    pData[playerid][pBoomboxObject] = INVALID_OBJECT_ID;
	pData[playerid][pBoomboxListen] = INVALID_PLAYER_ID;
    pData[playerid][pZonePickups][0] = -1;
    pData[playerid][pZonePickups][1] = -1;
    pData[playerid][pZonePickups][2] = -1;
    pData[playerid][pZonePickups][3] = -1;
    pData[playerid][pZoneID] = -1;
    pData[playerid][pZoneCreation] = 0;
	pData[playerid][pShowLands] = 0;
    pData[playerid][pShowTurfs] = true;
    pData[playerid][pStreamType] = MUSIC_NONE;
    pData[playerid][pFreeNamechange] = 0;
	pData[playerid][pVehicleKeys] = INVALID_VEHICLE_ID;
    pData[playerid][pCurrentWeapon] = 0;
    pData[playerid][pCurrentAmmo] = 0;
    pData[playerid][pCurrentVehicle] = 0;
    pData[playerid][pVehicleCount] = 0;
    pData[playerid][pACWarns] = 0;
    pData[playerid][pACTime] = 0;
    pData[playerid][pArmorTime] = 0;
    pData[playerid][pACFired] = 0;
    pData[playerid][pPotObject] = INVALID_OBJECT_ID;
    pData[playerid][pPickPlant] = INVALID_PLAYER_ID;
    pData[playerid][pPickTime] = 0;
    pData[playerid][pCookMeth] = 0;
    pData[playerid][pCookTime] = 0;
    pData[playerid][pCookGrams] = 0;
    pData[playerid][pDrugsUsed] = 0;
    pData[playerid][pDrugsTime] = 0;
    pData[playerid][pBandana] = 0;
	pData[playerid][pCapturingPoint] = -1;
	pData[playerid][pCaptureTime] = 0;
	pData[playerid][pWatchingIntro] = 0;
	pData[playerid][pLoginCamera] = 0;
	pData[playerid][pPoisonTime] = 0;
	pData[playerid][pJetpack] = 0;
    pData[playerid][pWatchOn] = 0;
    pData[playerid][pGPSOn] = 0;
    pData[playerid][pTextFrom] = INVALID_PLAYER_ID;
    pData[playerid][pWhisperFrom] = INVALID_PLAYER_ID;
    pData[playerid][pMechanicCall] = 0;
	pData[playerid][pTaxiCall] = 0;
    pData[playerid][pEmergencyCall] = 0;
	pData[playerid][pClip] = 0;
	pData[playerid][pReloading] = 0;
    pData[playerid][pFindTime] = 0;
    pData[playerid][pFindPlayer] = INVALID_PLAYER_ID;
    pData[playerid][pRobCash] = 0;
	pData[playerid][pLootTime] = 0;
	pData[playerid][pToggleWhisper] = 0;
	pData[playerid][pRareTime] = 0;
	pData[playerid][pBL] = 0;
	pData[playerid][pBackpack] = 0;
	pData[playerid][bpWearing] = 0;
	pData[playerid][bpCash] = 0;
	pData[playerid][bpMaterials] = 0;
	pData[playerid][bpPot] = 0;
	pData[playerid][bpCrack] = 0;
	pData[playerid][bpMeth] = 0;
	pData[playerid][bpPainkillers] = 0;
	pData[playerid][bpWeapons] = 0;
	pData[playerid][bpHPAmmo] = 0;
	pData[playerid][bpPoisonAmmo] = 0;
	pData[playerid][bpFMJAmmo] = 0;
	pData[playerid][pMarriedTo] = -1;
	pData[playerid][pHunger] = 100;
	pData[playerid][pHungerTimer] = 0;
	pData[playerid][pThirst] = 100;
	pData[playerid][pThirstTimer] = 0;
    for(new i = 0; i < MAX_PLAYERS; i ++)
	{
	    chattingWith[playerid]{i} = false;
	}

	for(new i = 0; i < 13; i ++)
	{
	    pData[playerid][pWeapons][i] = 0;
	    pData[playerid][pTempWeapons][i] = 0;
	}

	for(new i = 0; i < 3; i ++)
	{
	    MarkedPositions[playerid][i][mPosX] = 0.0;
	    MarkedPositions[playerid][i][mPosY] = 0.0;
	    MarkedPositions[playerid][i][mPosZ] = 0.0;
	}

	for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
	{
	    ClothingInfo[playerid][i][cExists] = 0;
	    ClothingInfo[playerid][i][cID] = 0;
	    ClothingInfo[playerid][i][cName] = 0;
	    ClothingInfo[playerid][i][cModel] = 0;
	    ClothingInfo[playerid][i][cBone] = 0;
	    ClothingInfo[playerid][i][cAttached] = 0;
	    ClothingInfo[playerid][i][cAttachedIndex] = -1;
	}

	// Reset the player's client attributes.
	for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i ++)
	{
	    if(IsPlayerAttachedObjectSlotUsed(playerid, i))
	    {
	        RemovePlayerAttachedObject(playerid, i);
		}
	}

	ResetPlayerWeapons(playerid);
	StopAudioStreamForPlayer(playerid);
	SetPlayerColor(playerid, 0xFFFFFF00);
	
	PlayerTextDrawShow(playerid, PlayerStatsTD[playerid]);

	RegisterLoginTD[playerid][0] = CreatePlayerTextDraw(playerid, 57.000000, 350.000000, "_");
	PlayerTextDrawFont(playerid, RegisterLoginTD[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid, RegisterLoginTD[playerid][0], 0.600000, 1.500004);
	PlayerTextDrawTextSize(playerid, RegisterLoginTD[playerid][0], 339.000000, 91.000000);
	PlayerTextDrawSetOutline(playerid, RegisterLoginTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, RegisterLoginTD[playerid][0], 0);
	PlayerTextDrawAlignment(playerid, RegisterLoginTD[playerid][0], 2);
	PlayerTextDrawColor(playerid, RegisterLoginTD[playerid][0], -1);
	PlayerTextDrawBackgroundColor(playerid, RegisterLoginTD[playerid][0], 255);
	PlayerTextDrawBoxColor(playerid, RegisterLoginTD[playerid][0], 1114092287);
	PlayerTextDrawUseBox(playerid, RegisterLoginTD[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, RegisterLoginTD[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, RegisterLoginTD[playerid][0], 0);

	RegisterLoginTD[playerid][1] = CreatePlayerTextDraw(playerid, 12.000000, 350.000000, "f");
	PlayerTextDrawFont(playerid, RegisterLoginTD[playerid][1], 3);
	PlayerTextDrawLetterSize(playerid, RegisterLoginTD[playerid][1], 0.362499, 1.650000);
	PlayerTextDrawTextSize(playerid, RegisterLoginTD[playerid][1], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, RegisterLoginTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, RegisterLoginTD[playerid][1], 0);
	PlayerTextDrawAlignment(playerid, RegisterLoginTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, RegisterLoginTD[playerid][1], -1);
	PlayerTextDrawBackgroundColor(playerid, RegisterLoginTD[playerid][1], 255);
	PlayerTextDrawBoxColor(playerid, RegisterLoginTD[playerid][1], 50);
	PlayerTextDrawUseBox(playerid, RegisterLoginTD[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid, RegisterLoginTD[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, RegisterLoginTD[playerid][1], 0);

	RegisterLoginTD[playerid][2] = CreatePlayerTextDraw(playerid, 23.000000, 351.000000, "facebook.com/arpnumba1");
	PlayerTextDrawFont(playerid, RegisterLoginTD[playerid][2], 1);
	PlayerTextDrawLetterSize(playerid, RegisterLoginTD[playerid][2], 0.216666, 1.500000);
	PlayerTextDrawTextSize(playerid, RegisterLoginTD[playerid][2], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, RegisterLoginTD[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, RegisterLoginTD[playerid][2], 0);
	PlayerTextDrawAlignment(playerid, RegisterLoginTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, RegisterLoginTD[playerid][2], -1);
	PlayerTextDrawBackgroundColor(playerid, RegisterLoginTD[playerid][2], 255);
	PlayerTextDrawBoxColor(playerid, RegisterLoginTD[playerid][2], 50);
	PlayerTextDrawUseBox(playerid, RegisterLoginTD[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid, RegisterLoginTD[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, RegisterLoginTD[playerid][2], 0);

	RegisterLoginTD[playerid][3] = CreatePlayerTextDraw(playerid, 57.000000, 319.000000, "_");
	PlayerTextDrawFont(playerid, RegisterLoginTD[playerid][3], 1);
	PlayerTextDrawLetterSize(playerid, RegisterLoginTD[playerid][3], 0.600000, 1.500004);
	PlayerTextDrawTextSize(playerid, RegisterLoginTD[playerid][3], 339.000000, 91.000000);
	PlayerTextDrawSetOutline(playerid, RegisterLoginTD[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, RegisterLoginTD[playerid][3], 0);
	PlayerTextDrawAlignment(playerid, RegisterLoginTD[playerid][3], 2);
	PlayerTextDrawColor(playerid, RegisterLoginTD[playerid][3], -1);
	PlayerTextDrawBackgroundColor(playerid, RegisterLoginTD[playerid][3], 255);
	PlayerTextDrawBoxColor(playerid, RegisterLoginTD[playerid][3], 741291007);
	PlayerTextDrawUseBox(playerid, RegisterLoginTD[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, RegisterLoginTD[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, RegisterLoginTD[playerid][3], 0);

	RegisterLoginTD[playerid][4] = CreatePlayerTextDraw(playerid, 12.000000, 320.000000, "D");
	PlayerTextDrawFont(playerid, RegisterLoginTD[playerid][4], 0);
	PlayerTextDrawLetterSize(playerid, RegisterLoginTD[playerid][4], 0.362499, 1.650000);
	PlayerTextDrawTextSize(playerid, RegisterLoginTD[playerid][4], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, RegisterLoginTD[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, RegisterLoginTD[playerid][4], 0);
	PlayerTextDrawAlignment(playerid, RegisterLoginTD[playerid][4], 1);
	PlayerTextDrawColor(playerid, RegisterLoginTD[playerid][4], -1);
	PlayerTextDrawBackgroundColor(playerid, RegisterLoginTD[playerid][4], 255);
	PlayerTextDrawBoxColor(playerid, RegisterLoginTD[playerid][4], 50);
	PlayerTextDrawUseBox(playerid, RegisterLoginTD[playerid][4], 0);
	PlayerTextDrawSetProportional(playerid, RegisterLoginTD[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, RegisterLoginTD[playerid][4], 0);

	RegisterLoginTD[playerid][5] = CreatePlayerTextDraw(playerid, 33.000000, 319.000000, "dsc.gg/arpnumba1");
	PlayerTextDrawFont(playerid, RegisterLoginTD[playerid][5], 1);
	PlayerTextDrawLetterSize(playerid, RegisterLoginTD[playerid][5], 0.216666, 1.500000);
	PlayerTextDrawTextSize(playerid, RegisterLoginTD[playerid][5], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, RegisterLoginTD[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, RegisterLoginTD[playerid][5], 0);
	PlayerTextDrawAlignment(playerid, RegisterLoginTD[playerid][5], 1);
	PlayerTextDrawColor(playerid, RegisterLoginTD[playerid][5], -1);
	PlayerTextDrawBackgroundColor(playerid, RegisterLoginTD[playerid][5], 255);
	PlayerTextDrawBoxColor(playerid, RegisterLoginTD[playerid][5], 50);
	PlayerTextDrawUseBox(playerid, RegisterLoginTD[playerid][5], 0);
	PlayerTextDrawSetProportional(playerid, RegisterLoginTD[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, RegisterLoginTD[playerid][5], 0);

	RegisterLoginTD[playerid][6] = CreatePlayerTextDraw(playerid, 324.000000, -2.000000, "_");
	PlayerTextDrawFont(playerid, RegisterLoginTD[playerid][6], 1);
	PlayerTextDrawLetterSize(playerid, RegisterLoginTD[playerid][6], 0.600000, 5.399999);
	PlayerTextDrawTextSize(playerid, RegisterLoginTD[playerid][6], 298.500000, 700.500000);
	PlayerTextDrawSetOutline(playerid, RegisterLoginTD[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, RegisterLoginTD[playerid][6], 0);
	PlayerTextDrawAlignment(playerid, RegisterLoginTD[playerid][6], 2);
	PlayerTextDrawColor(playerid, RegisterLoginTD[playerid][6], -1);
	PlayerTextDrawBackgroundColor(playerid, RegisterLoginTD[playerid][6], 255);
	PlayerTextDrawBoxColor(playerid, RegisterLoginTD[playerid][6], 135);
	PlayerTextDrawUseBox(playerid, RegisterLoginTD[playerid][6], 1);
	PlayerTextDrawSetProportional(playerid, RegisterLoginTD[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid, RegisterLoginTD[playerid][6], 0);

	RegisterLoginTD[playerid][7] = CreatePlayerTextDraw(playerid, 257.000000, 12.000000, "Alcazar Roleplay");
	PlayerTextDrawFont(playerid, RegisterLoginTD[playerid][7], 0);
	PlayerTextDrawLetterSize(playerid, RegisterLoginTD[playerid][7], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, RegisterLoginTD[playerid][7], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, RegisterLoginTD[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, RegisterLoginTD[playerid][7], 0);
	PlayerTextDrawAlignment(playerid, RegisterLoginTD[playerid][7], 1);
	PlayerTextDrawColor(playerid, RegisterLoginTD[playerid][7], -1);
	PlayerTextDrawBackgroundColor(playerid, RegisterLoginTD[playerid][7], 255);
	PlayerTextDrawBoxColor(playerid, RegisterLoginTD[playerid][7], 50);
	PlayerTextDrawUseBox(playerid, RegisterLoginTD[playerid][7], 0);
	PlayerTextDrawSetProportional(playerid, RegisterLoginTD[playerid][7], 1);
	PlayerTextDrawSetSelectable(playerid, RegisterLoginTD[playerid][7], 0);

	RegisterLoginTD[playerid][8] = CreatePlayerTextDraw(playerid, 308.000000, 33.000000, "v0.1.795");
	PlayerTextDrawFont(playerid, RegisterLoginTD[playerid][8], 2);
	PlayerTextDrawLetterSize(playerid, RegisterLoginTD[playerid][8], 0.283333, 1.300000);
	PlayerTextDrawTextSize(playerid, RegisterLoginTD[playerid][8], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, RegisterLoginTD[playerid][8], 1);
	PlayerTextDrawSetShadow(playerid, RegisterLoginTD[playerid][8], 0);
	PlayerTextDrawAlignment(playerid, RegisterLoginTD[playerid][8], 1);
	PlayerTextDrawColor(playerid, RegisterLoginTD[playerid][8], -1);
	PlayerTextDrawBackgroundColor(playerid, RegisterLoginTD[playerid][8], 255);
	PlayerTextDrawBoxColor(playerid, RegisterLoginTD[playerid][8], 50);
	PlayerTextDrawUseBox(playerid, RegisterLoginTD[playerid][8], 0);
	PlayerTextDrawSetProportional(playerid, RegisterLoginTD[playerid][8], 1);
	PlayerTextDrawSetSelectable(playerid, RegisterLoginTD[playerid][8], 0);

	RegisterLoginTD[playerid][9] = CreatePlayerTextDraw(playerid, 324.000000, 410.000000, "_");
	PlayerTextDrawFont(playerid, RegisterLoginTD[playerid][9], 1);
	PlayerTextDrawLetterSize(playerid, RegisterLoginTD[playerid][9], 0.600000, 5.399999);
	PlayerTextDrawTextSize(playerid, RegisterLoginTD[playerid][9], 298.500000, 700.500000);
	PlayerTextDrawSetOutline(playerid, RegisterLoginTD[playerid][9], 1);
	PlayerTextDrawSetShadow(playerid, RegisterLoginTD[playerid][9], 0);
	PlayerTextDrawAlignment(playerid, RegisterLoginTD[playerid][9], 2);
	PlayerTextDrawColor(playerid, RegisterLoginTD[playerid][9], -1);
	PlayerTextDrawBackgroundColor(playerid, RegisterLoginTD[playerid][9], 255);
	PlayerTextDrawBoxColor(playerid, RegisterLoginTD[playerid][9], 135);
	PlayerTextDrawUseBox(playerid, RegisterLoginTD[playerid][9], 1);
	PlayerTextDrawSetProportional(playerid, RegisterLoginTD[playerid][9], 1);
	PlayerTextDrawSetSelectable(playerid, RegisterLoginTD[playerid][9], 0);

	RegisterLoginTD[playerid][10] = CreatePlayerTextDraw(playerid, 253.000000, 419.000000, "MOTD: Happy Gaming Everyone");
	PlayerTextDrawFont(playerid, RegisterLoginTD[playerid][10], 1);
	PlayerTextDrawLetterSize(playerid, RegisterLoginTD[playerid][10], 0.229167, 1.100000);
	PlayerTextDrawTextSize(playerid, RegisterLoginTD[playerid][10], 655.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, RegisterLoginTD[playerid][10], 1);
	PlayerTextDrawSetShadow(playerid, RegisterLoginTD[playerid][10], 0);
	PlayerTextDrawAlignment(playerid, RegisterLoginTD[playerid][10], 1);
	PlayerTextDrawColor(playerid, RegisterLoginTD[playerid][10], -1);
	PlayerTextDrawBackgroundColor(playerid, RegisterLoginTD[playerid][10], 255);
	PlayerTextDrawBoxColor(playerid, RegisterLoginTD[playerid][10], 50);
	PlayerTextDrawUseBox(playerid, RegisterLoginTD[playerid][10], 0);
	PlayerTextDrawSetProportional(playerid, RegisterLoginTD[playerid][10], 1);
	PlayerTextDrawSetSelectable(playerid, RegisterLoginTD[playerid][10], 0);

	RegisterLoginTD[playerid][11] = CreatePlayerTextDraw(playerid, 58.000000, 200.000000, "_");
	PlayerTextDrawFont(playerid, RegisterLoginTD[playerid][11], 1);
	PlayerTextDrawLetterSize(playerid, RegisterLoginTD[playerid][11], 0.600000, 7.249991);
	PlayerTextDrawTextSize(playerid, RegisterLoginTD[playerid][11], 298.500000, 95.000000);
	PlayerTextDrawSetOutline(playerid, RegisterLoginTD[playerid][11], 1);
	PlayerTextDrawSetShadow(playerid, RegisterLoginTD[playerid][11], 0);
	PlayerTextDrawAlignment(playerid, RegisterLoginTD[playerid][11], 2);
	PlayerTextDrawColor(playerid, RegisterLoginTD[playerid][11], -1);
	PlayerTextDrawBackgroundColor(playerid, RegisterLoginTD[playerid][11], 255);
	PlayerTextDrawBoxColor(playerid, RegisterLoginTD[playerid][11], 135);
	PlayerTextDrawUseBox(playerid, RegisterLoginTD[playerid][11], 1);
	PlayerTextDrawSetProportional(playerid, RegisterLoginTD[playerid][11], 1);
	PlayerTextDrawSetSelectable(playerid, RegisterLoginTD[playerid][11], 0);

	RegisterLoginTD[playerid][12] = CreatePlayerTextDraw(playerid, 14.000000, 229.000000, "Online Players:               110");
	PlayerTextDrawFont(playerid, RegisterLoginTD[playerid][12], 1);
	PlayerTextDrawLetterSize(playerid, RegisterLoginTD[playerid][12], 0.200000, 1.050000);
	PlayerTextDrawTextSize(playerid, RegisterLoginTD[playerid][12], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, RegisterLoginTD[playerid][12], 1);
	PlayerTextDrawSetShadow(playerid, RegisterLoginTD[playerid][12], 0);
	PlayerTextDrawAlignment(playerid, RegisterLoginTD[playerid][12], 1);
	PlayerTextDrawColor(playerid, RegisterLoginTD[playerid][12], -1);
	PlayerTextDrawBackgroundColor(playerid, RegisterLoginTD[playerid][12], 255);
	PlayerTextDrawBoxColor(playerid, RegisterLoginTD[playerid][12], 50);
	PlayerTextDrawUseBox(playerid, RegisterLoginTD[playerid][12], 0);
	PlayerTextDrawSetProportional(playerid, RegisterLoginTD[playerid][12], 1);
	PlayerTextDrawSetSelectable(playerid, RegisterLoginTD[playerid][12], 0);

	RegisterLoginTD[playerid][13] = CreatePlayerTextDraw(playerid, 14.000000, 212.000000, "Online Admins:               100");
	PlayerTextDrawFont(playerid, RegisterLoginTD[playerid][13], 1);
	PlayerTextDrawLetterSize(playerid, RegisterLoginTD[playerid][13], 0.200000, 1.050000);
	PlayerTextDrawTextSize(playerid, RegisterLoginTD[playerid][13], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, RegisterLoginTD[playerid][13], 1);
	PlayerTextDrawSetShadow(playerid, RegisterLoginTD[playerid][13], 0);
	PlayerTextDrawAlignment(playerid, RegisterLoginTD[playerid][13], 1);
	PlayerTextDrawColor(playerid, RegisterLoginTD[playerid][13], -1);
	PlayerTextDrawBackgroundColor(playerid, RegisterLoginTD[playerid][13], 255);
	PlayerTextDrawBoxColor(playerid, RegisterLoginTD[playerid][13], 50);
	PlayerTextDrawUseBox(playerid, RegisterLoginTD[playerid][13], 0);
	PlayerTextDrawSetProportional(playerid, RegisterLoginTD[playerid][13], 1);
	PlayerTextDrawSetSelectable(playerid, RegisterLoginTD[playerid][13], 0);

	RegisterLoginTD[playerid][14] = CreatePlayerTextDraw(playerid, 14.000000, 247.000000, "Player Record:               120");
	PlayerTextDrawFont(playerid, RegisterLoginTD[playerid][14], 1);
	PlayerTextDrawLetterSize(playerid, RegisterLoginTD[playerid][14], 0.200000, 1.050000);
	PlayerTextDrawTextSize(playerid, RegisterLoginTD[playerid][14], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, RegisterLoginTD[playerid][14], 1);
	PlayerTextDrawSetShadow(playerid, RegisterLoginTD[playerid][14], 0);
	PlayerTextDrawAlignment(playerid, RegisterLoginTD[playerid][14], 1);
	PlayerTextDrawColor(playerid, RegisterLoginTD[playerid][14], -1);
	PlayerTextDrawBackgroundColor(playerid, RegisterLoginTD[playerid][14], 255);
	PlayerTextDrawBoxColor(playerid, RegisterLoginTD[playerid][14], 50);
	PlayerTextDrawUseBox(playerid, RegisterLoginTD[playerid][14], 0);
	PlayerTextDrawSetProportional(playerid, RegisterLoginTD[playerid][14], 1);
	PlayerTextDrawSetSelectable(playerid, RegisterLoginTD[playerid][14], 0);

	
	/*TextDrawShowForPlayer(playerid, LoginTD[0]);
    TextDrawShowForPlayer(playerid, LoginTD[1]);*/
	
    /*TextDrawShowForPlayer(playerid, Login[0]);
    TextDrawShowForPlayer(playerid, Login[1]);
    TextDrawShowForPlayer(playerid, Login[2]);
    TextDrawShowForPlayer(playerid, Login[3]);
    TextDrawShowForPlayer(playerid, Login[4]);
    TextDrawShowForPlayer(playerid, Login[5]);
    TextDrawShowForPlayer(playerid, Login[6]);
    TextDrawShowForPlayer(playerid, Login[7]);
    TextDrawShowForPlayer(playerid, Login[8]);*/

	/*#if defined Christmas
	#else
		EventTextdraw[playerid] = CreatePlayerTextDraw(playerid, 608.000000, 97.000000, "C0");
		PlayerTextDrawFont(playerid, EventTextdraw[playerid], 3);
		PlayerTextDrawLetterSize(playerid, EventTextdraw[playerid], 0.541665, 2.299998);
		PlayerTextDrawTextSize(playerid, EventTextdraw[playerid], 400.000000, 17.000000);
		PlayerTextDrawSetOutline(playerid, EventTextdraw[playerid], 2);
		PlayerTextDrawSetShadow(playerid, EventTextdraw[playerid], 0);
		PlayerTextDrawAlignment(playerid, EventTextdraw[playerid], 3);
		PlayerTextDrawColor(playerid, EventTextdraw[playerid], SERVER_COLOR);
		PlayerTextDrawBackgroundColor(playerid, EventTextdraw[playerid], 255);
		PlayerTextDrawBoxColor(playerid, EventTextdraw[playerid], 50);
		PlayerTextDrawUseBox(playerid, EventTextdraw[playerid], 0);
		PlayerTextDrawSetProportional(playerid, EventTextdraw[playerid], 1);
		PlayerTextDrawSetSelectable(playerid, EventTextdraw[playerid], 0);
	#endif*/
	/*ModernPlayerText[playerid][0] = CreatePlayerTextDraw(playerid, 329.000000, 167.000000, "Payday~n~_");
    PlayerTextDrawFont(playerid, ModernPlayerText[playerid][0], 3);
    PlayerTextDrawLetterSize(playerid, ModernPlayerText[playerid][0], 0.633333, 2.949999);
    PlayerTextDrawTextSize(playerid, ModernPlayerText[playerid][0], 400.000000, 797.000000);
    PlayerTextDrawSetOutline(playerid, ModernPlayerText[playerid][0], 1);
    PlayerTextDrawSetShadow(playerid, ModernPlayerText[playerid][0], 0);
    PlayerTextDrawAlignment(playerid, ModernPlayerText[playerid][0], 2);
    PlayerTextDrawColor(playerid, ModernPlayerText[playerid][0], SERVER_COLOR);
    PlayerTextDrawBackgroundColor(playerid, ModernPlayerText[playerid][0], 100);
    PlayerTextDrawBoxColor(playerid, ModernPlayerText[playerid][0], 85);
    PlayerTextDrawUseBox(playerid, ModernPlayerText[playerid][0], 1);
    PlayerTextDrawSetProportional(playerid, ModernPlayerText[playerid][0], 1);
    PlayerTextDrawSetSelectable(playerid, ModernPlayerText[playerid][0], 0);

    ModernPlayerText[playerid][1] = CreatePlayerTextDraw(playerid, 328.000000, 199.000000, "You recieved $500.");
    PlayerTextDrawFont(playerid, ModernPlayerText[playerid][1], 1);
    PlayerTextDrawLetterSize(playerid, ModernPlayerText[playerid][1], 0.245833, 1.599999);
    PlayerTextDrawTextSize(playerid, ModernPlayerText[playerid][1], 400.000000, 557.000000);
    PlayerTextDrawSetOutline(playerid, ModernPlayerText[playerid][1], 1);
    PlayerTextDrawSetShadow(playerid, ModernPlayerText[playerid][1], 0);
    PlayerTextDrawAlignment(playerid, ModernPlayerText[playerid][1], 2);
    PlayerTextDrawColor(playerid, ModernPlayerText[playerid][1], -1);
    PlayerTextDrawBackgroundColor(playerid, ModernPlayerText[playerid][1], 100);
    PlayerTextDrawBoxColor(playerid, ModernPlayerText[playerid][1], 50);
    PlayerTextDrawUseBox(playerid, ModernPlayerText[playerid][1], 0);
    PlayerTextDrawSetProportional(playerid, ModernPlayerText[playerid][1], 1);
    PlayerTextDrawSetSelectable(playerid, ModernPlayerText[playerid][1], 0);*/
    
    DyuzeeeTD[playerid][0] = CreatePlayerTextDraw(playerid, 191.000000, 365.000000, "test");
	PlayerTextDrawFont(playerid, DyuzeeeTD[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid, DyuzeeeTD[playerid][0], 0.245831, 1.599999);
	PlayerTextDrawTextSize(playerid, DyuzeeeTD[playerid][0], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, DyuzeeeTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, DyuzeeeTD[playerid][0], 0);
	PlayerTextDrawAlignment(playerid, DyuzeeeTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, DyuzeeeTD[playerid][0], -1);
	PlayerTextDrawBackgroundColor(playerid, DyuzeeeTD[playerid][0], 255);
	PlayerTextDrawBoxColor(playerid, DyuzeeeTD[playerid][0], 50);
	PlayerTextDrawUseBox(playerid, DyuzeeeTD[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid, DyuzeeeTD[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, DyuzeeeTD[playerid][0], 0);

	DyuzeeeTD[playerid][1] = CreatePlayerTextDraw(playerid, 270.000000, 331.000000, "TextDraw");
	PlayerTextDrawFont(playerid, DyuzeeeTD[playerid][1], 1);
	PlayerTextDrawLetterSize(playerid, DyuzeeeTD[playerid][1], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, DyuzeeeTD[playerid][1], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, DyuzeeeTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, DyuzeeeTD[playerid][1], 0);
	PlayerTextDrawAlignment(playerid, DyuzeeeTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, DyuzeeeTD[playerid][1], -1);
	PlayerTextDrawBackgroundColor(playerid, DyuzeeeTD[playerid][1], 255);
	PlayerTextDrawBoxColor(playerid, DyuzeeeTD[playerid][1], 50);
	PlayerTextDrawUseBox(playerid, DyuzeeeTD[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid, DyuzeeeTD[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, DyuzeeeTD[playerid][1], 0);
    
    SigncheckTD[playerid][0] = CreatePlayerTextDraw(playerid, 318.000000, 195.000000, "_");
	PlayerTextDrawFont(playerid, SigncheckTD[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid, SigncheckTD[playerid][0], 0.637498, 5.749985);
	PlayerTextDrawTextSize(playerid, SigncheckTD[playerid][0], 298.500000, 143.500000);
	PlayerTextDrawSetOutline(playerid, SigncheckTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, SigncheckTD[playerid][0], 0);
	PlayerTextDrawAlignment(playerid, SigncheckTD[playerid][0], 2);
	PlayerTextDrawColor(playerid, SigncheckTD[playerid][0], -3841);
	PlayerTextDrawBackgroundColor(playerid, SigncheckTD[playerid][0], 255);
	PlayerTextDrawBoxColor(playerid, SigncheckTD[playerid][0], -3961);
	PlayerTextDrawUseBox(playerid, SigncheckTD[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, SigncheckTD[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, SigncheckTD[playerid][0], 0);

	SigncheckTD[playerid][1] = CreatePlayerTextDraw(playerid, 319.000000, 200.000000, "_");
	PlayerTextDrawFont(playerid, SigncheckTD[playerid][1], 1);
	PlayerTextDrawLetterSize(playerid, SigncheckTD[playerid][1], 0.600000, 4.749995);
	PlayerTextDrawTextSize(playerid, SigncheckTD[playerid][1], 298.500000, 130.000000);
	PlayerTextDrawSetOutline(playerid, SigncheckTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, SigncheckTD[playerid][1], 0);
	PlayerTextDrawAlignment(playerid, SigncheckTD[playerid][1], 2);
	PlayerTextDrawColor(playerid, SigncheckTD[playerid][1], -764862721);
	PlayerTextDrawBackgroundColor(playerid, SigncheckTD[playerid][1], 255);
	PlayerTextDrawBoxColor(playerid, SigncheckTD[playerid][1], 1687547271);
	PlayerTextDrawUseBox(playerid, SigncheckTD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, SigncheckTD[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, SigncheckTD[playerid][1], 0);

	SigncheckTD[playerid][2] = CreatePlayerTextDraw(playerid, 320.000000, 235.000000, "SIGNCHECK");
	PlayerTextDrawFont(playerid, SigncheckTD[playerid][2], 2);
	PlayerTextDrawLetterSize(playerid, SigncheckTD[playerid][2], 0.137500, 0.899999);
	PlayerTextDrawTextSize(playerid, SigncheckTD[playerid][2], 400.000000, 44.500000);
	PlayerTextDrawSetOutline(playerid, SigncheckTD[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, SigncheckTD[playerid][2], 0);
	PlayerTextDrawAlignment(playerid, SigncheckTD[playerid][2], 2);
	PlayerTextDrawColor(playerid, SigncheckTD[playerid][2], -1);
	PlayerTextDrawBackgroundColor(playerid, SigncheckTD[playerid][2], 255);
	PlayerTextDrawBoxColor(playerid, SigncheckTD[playerid][2], -206);
	PlayerTextDrawUseBox(playerid, SigncheckTD[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, SigncheckTD[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, SigncheckTD[playerid][2], 1);

	SigncheckTD[playerid][3] = CreatePlayerTextDraw(playerid, 267.000000, 203.000000, "Please press the signcheck button to proceed.");
	PlayerTextDrawFont(playerid, SigncheckTD[playerid][3], 2);
	PlayerTextDrawLetterSize(playerid, SigncheckTD[playerid][3], 0.166666, 1.299998);
	PlayerTextDrawTextSize(playerid, SigncheckTD[playerid][3], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, SigncheckTD[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, SigncheckTD[playerid][3], 0);
	PlayerTextDrawAlignment(playerid, SigncheckTD[playerid][3], 1);
	PlayerTextDrawColor(playerid, SigncheckTD[playerid][3], -1);
	PlayerTextDrawBackgroundColor(playerid, SigncheckTD[playerid][3], 255);
	PlayerTextDrawBoxColor(playerid, SigncheckTD[playerid][3], 50);
	PlayerTextDrawUseBox(playerid, SigncheckTD[playerid][3], 0);
	PlayerTextDrawSetProportional(playerid, SigncheckTD[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, SigncheckTD[playerid][3], 0);

	SigncheckTD[playerid][4] = CreatePlayerTextDraw(playerid, 391.000000, 188.000000, "_");
	PlayerTextDrawFont(playerid, SigncheckTD[playerid][4], 1);
	PlayerTextDrawLetterSize(playerid, SigncheckTD[playerid][4], 0.600000, 0.750001);
	PlayerTextDrawTextSize(playerid, SigncheckTD[playerid][4], 298.500000, 8.500000);
	PlayerTextDrawSetOutline(playerid, SigncheckTD[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, SigncheckTD[playerid][4], 0);
	PlayerTextDrawAlignment(playerid, SigncheckTD[playerid][4], 2);
	PlayerTextDrawColor(playerid, SigncheckTD[playerid][4], -1);
	PlayerTextDrawBackgroundColor(playerid, SigncheckTD[playerid][4], 255);
	PlayerTextDrawBoxColor(playerid, SigncheckTD[playerid][4], -1962934137);
	PlayerTextDrawUseBox(playerid, SigncheckTD[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, SigncheckTD[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, SigncheckTD[playerid][4], 0);

	SigncheckTD[playerid][5] = CreatePlayerTextDraw(playerid, 387.000000, 186.000000, "X");
	PlayerTextDrawFont(playerid, SigncheckTD[playerid][5], 1);
	PlayerTextDrawLetterSize(playerid, SigncheckTD[playerid][5], 0.308333, 1.050001);
	PlayerTextDrawTextSize(playerid, SigncheckTD[playerid][5], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, SigncheckTD[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, SigncheckTD[playerid][5], 0);
	PlayerTextDrawAlignment(playerid, SigncheckTD[playerid][5], 1);
	PlayerTextDrawColor(playerid, SigncheckTD[playerid][5], -1);
	PlayerTextDrawBackgroundColor(playerid, SigncheckTD[playerid][5], 255);
	PlayerTextDrawBoxColor(playerid, SigncheckTD[playerid][5], 50);
	PlayerTextDrawUseBox(playerid, SigncheckTD[playerid][5], 0);
	PlayerTextDrawSetProportional(playerid, SigncheckTD[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, SigncheckTD[playerid][5], 0);
    
    PlayerStatsTD[playerid] = CreatePlayerTextDraw(playerid, 342.000000, 414.000000, "_");
    PlayerTextDrawFont(playerid, PlayerStatsTD[playerid], 2);
    PlayerTextDrawLetterSize(playerid, PlayerStatsTD[playerid], 0.229166, 1.450000);
    PlayerTextDrawTextSize(playerid, PlayerStatsTD[playerid], 400.000000, 267.500000);
    PlayerTextDrawSetOutline(playerid, PlayerStatsTD[playerid], 1);
    PlayerTextDrawSetShadow(playerid, PlayerStatsTD[playerid], 0);
    PlayerTextDrawAlignment(playerid, PlayerStatsTD[playerid], 2);
    PlayerTextDrawColor(playerid, PlayerStatsTD[playerid], -2686721);
    PlayerTextDrawBackgroundColor(playerid, PlayerStatsTD[playerid], 100);
    PlayerTextDrawBoxColor(playerid, PlayerStatsTD[playerid], 50);
    PlayerTextDrawUseBox(playerid, PlayerStatsTD[playerid], 0);
    PlayerTextDrawSetProportional(playerid, PlayerStatsTD[playerid], 1);
    PlayerTextDrawSetSelectable(playerid, PlayerStatsTD[playerid], 0);

	customHUD[playerid][1] = CreatePlayerTextDraw(playerid, 499.000000, 111.000000, "_");
	PlayerTextDrawFont(playerid, customHUD[playerid][1], 1);
	PlayerTextDrawLetterSize(playerid, customHUD[playerid][1], 0.312498, 1.399999);
	PlayerTextDrawTextSize(playerid, customHUD[playerid][1], 810.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, customHUD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, customHUD[playerid][1], 0);
	PlayerTextDrawAlignment(playerid, customHUD[playerid][1], 1);
	PlayerTextDrawColor(playerid, customHUD[playerid][1], COLOR_TEAL	);
	PlayerTextDrawBackgroundColor(playerid, customHUD[playerid][1], 255);
	PlayerTextDrawBoxColor(playerid, customHUD[playerid][1], 50);
	PlayerTextDrawUseBox(playerid, customHUD[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid, customHUD[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, customHUD[playerid][1], 0);

	// Earned
	customHUD[playerid][2] = CreatePlayerTextDraw(playerid, 499.000000, 125.000000, "_");
	PlayerTextDrawFont(playerid, customHUD[playerid][2], 1);
	PlayerTextDrawLetterSize(playerid, customHUD[playerid][2], 0.312498, 1.399999);
	PlayerTextDrawTextSize(playerid, customHUD[playerid][2], 810.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, customHUD[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, customHUD[playerid][2], 0);
	PlayerTextDrawAlignment(playerid, customHUD[playerid][2], 1);
	PlayerTextDrawColor(playerid, customHUD[playerid][2], -1);
	PlayerTextDrawBackgroundColor(playerid, customHUD[playerid][2], 255);
	PlayerTextDrawBoxColor(playerid, customHUD[playerid][2], 50);
	PlayerTextDrawUseBox(playerid, customHUD[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid, customHUD[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, customHUD[playerid][2], 0);

//Player Textdraws
	SHOWID[playerid][0] = CreatePlayerTextDraw(playerid, 511.000000, 126.000000, "_");
	PlayerTextDrawFont(playerid, SHOWID[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][0], 1.141666, 16.350002);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][0], 298.500000, 250.000000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][0], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][0], 2);
	PlayerTextDrawColor(playerid, SHOWID[playerid][0], -1);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][0], 255);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][0], 1296911871);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][0], 0);

	SHOWID[playerid][1] = CreatePlayerTextDraw(playerid, 564.000000, 126.000000, "_");
	PlayerTextDrawFont(playerid, SHOWID[playerid][1], 1);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][1], 1.433333, 2.250002);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][1], 298.500000, 143.500000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][1], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][1], 2);
	PlayerTextDrawColor(playerid, SHOWID[playerid][1], -1);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][1], 255);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][1], 255);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][1], 0);

	SHOWID[playerid][2] = CreatePlayerTextDraw(playerid, 491.000000, 122.000000, "GOVERNMENT OF LOS SANTOS");
	PlayerTextDrawFont(playerid, SHOWID[playerid][2], 2);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][2], 0.125000, 1.050001);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][2], 680.000000, -258.000000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][2], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][2], 1);
	PlayerTextDrawColor(playerid, SHOWID[playerid][2], -8433409);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][2], 255);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][2], 50);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][2], 0);

	SHOWID[playerid][3] = CreatePlayerTextDraw(playerid, 502.000000, 128.000000, "LOS SANTOS IDENTIFICATION CARD");
	PlayerTextDrawFont(playerid, SHOWID[playerid][3], 2);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][3], 0.166666, 2.150002);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][3], 680.000000, -258.000000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][3], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][3], 1);
	PlayerTextDrawColor(playerid, SHOWID[playerid][3], -1);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][3], 255);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][3], 50);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][3], 0);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][3], 0);

	SHOWID[playerid][4] = CreatePlayerTextDraw(playerid, 492.000000, 161.000000, "JAHSEH PASCUAL");
	PlayerTextDrawFont(playerid, SHOWID[playerid][4], 2);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][4], 0.333333, 1.700001);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][4], 900.500000, -473.500000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][4], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][4], 1);
	PlayerTextDrawColor(playerid, SHOWID[playerid][4], -1);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][4], 255);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][4], 50);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][4], 0);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][4], 0);

	SHOWID[playerid][5] = CreatePlayerTextDraw(playerid, 564.000000, 195.000000, "_");
	PlayerTextDrawFont(playerid, SHOWID[playerid][5], 1);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][5], 1.433333, 8.750003);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][5], 298.500000, 143.500000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][5], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][5], 2);
	PlayerTextDrawColor(playerid, SHOWID[playerid][5], -1);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][5], 255);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][5], 255);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][5], 0);

	SHOWID[playerid][6] = CreatePlayerTextDraw(playerid, 497.000000, 202.000000, "AGE");
	PlayerTextDrawFont(playerid, SHOWID[playerid][6], 2);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][6], 0.141666, 1.250001);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][6], 680.000000, -258.000000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][6], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][6], 1);
	PlayerTextDrawColor(playerid, SHOWID[playerid][6], -1);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][6], 255);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][6], 50);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][6], 0);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][6], 0);

	SHOWID[playerid][7] = CreatePlayerTextDraw(playerid, 498.000000, 212.000000, "12-14-2003");
	PlayerTextDrawFont(playerid, SHOWID[playerid][7], 2);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][7], 0.141666, 1.250001);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][7], 680.000000, -258.000000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][7], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][7], 1);
	PlayerTextDrawColor(playerid, SHOWID[playerid][7], -1);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][7], 255);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][7], 50);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][7], 0);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][7], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][7], 0);

	SHOWID[playerid][8] = CreatePlayerTextDraw(playerid, 591.000000, 202.000000, "GENDER");
	PlayerTextDrawFont(playerid, SHOWID[playerid][8], 2);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][8], 0.141666, 1.250001);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][8], 680.000000, -258.000000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][8], 1);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][8], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][8], 1);
	PlayerTextDrawColor(playerid, SHOWID[playerid][8], -1);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][8], 255);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][8], 50);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][8], 0);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][8], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][8], 0);

	SHOWID[playerid][9] = CreatePlayerTextDraw(playerid, 591.000000, 210.000000, "MALE");
	PlayerTextDrawFont(playerid, SHOWID[playerid][9], 2);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][9], 0.141666, 1.250001);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][9], 680.000000, -258.000000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][9], 1);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][9], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][9], 1);
	PlayerTextDrawColor(playerid, SHOWID[playerid][9], -1);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][9], 255);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][9], 50);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][9], 0);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][9], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][9], 0);

	SHOWID[playerid][10] = CreatePlayerTextDraw(playerid, 491.000000, 233.000000, "EXPIRES FEB 2030");
	PlayerTextDrawFont(playerid, SHOWID[playerid][10], 2);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][10], 0.187500, 1.350001);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][10], 680.000000, -258.000000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][10], 1);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][10], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][10], 1);
	PlayerTextDrawColor(playerid, SHOWID[playerid][10], -1);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][10], 255);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][10], 50);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][10], 0);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][10], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][10], 0);

	SHOWID[playerid][11] = CreatePlayerTextDraw(playerid, 491.000000, 248.000000, "THIS IDENTIFICATION CARD HAS BEEN ISSUED BY THE LOS SANTOS GOVERNMENT");
	PlayerTextDrawFont(playerid, SHOWID[playerid][11], 2);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][11], 0.087500, 1.000001);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][11], 768.000000, -341.000000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][11], 1);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][11], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][11], 1);
	PlayerTextDrawColor(playerid, SHOWID[playerid][11], -1);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][11], 255);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][11], 50);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][11], 0);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][11], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][11], 0);

	SHOWID[playerid][12] = CreatePlayerTextDraw(playerid, 491.000000, 257.000000, "IF YOU'RE NOT THE OWNER OF THIS CARD PLEASE OUT IT IN HALF OR RETURN IT AT THE");
	PlayerTextDrawFont(playerid, SHOWID[playerid][12], 2);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][12], 0.079166, 1.000001);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][12], 768.000000, -341.000000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][12], 1);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][12], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][12], 1);
	PlayerTextDrawColor(playerid, SHOWID[playerid][12], -1);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][12], 255);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][12], 50);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][12], 0);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][12], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][12], 0);

	SHOWID[playerid][13] = CreatePlayerTextDraw(playerid, 491.000000, 265.000000, "NEAREST POLICE STATIONAL THIS IS JUST A RANDOM TEXT THAT NO ONE WILL READ.");
	PlayerTextDrawFont(playerid, SHOWID[playerid][13], 2);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][13], 0.079166, 1.000001);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][13], 768.000000, -341.000000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][13], 1);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][13], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][13], 1);
	PlayerTextDrawColor(playerid, SHOWID[playerid][13], -1);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][13], 255);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][13], 50);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][13], 0);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][13], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][13], 0);

	SHOWID[playerid][14] = CreatePlayerTextDraw(playerid, 374.000000, 115.000000, "ld_drv:goboat");
	PlayerTextDrawFont(playerid, SHOWID[playerid][14], 4);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][14], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][14], 46.000000, 38.000000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][14], 1);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][14], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][14], 1);
	PlayerTextDrawColor(playerid, SHOWID[playerid][14], -1);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][14], 255);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][14], 50);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][14], 1);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][14], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][14], 0);

	SHOWID[playerid][15] = CreatePlayerTextDraw(playerid, 378.000000, 131.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, SHOWID[playerid][15], 5);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][15], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][15], 112.500000, 150.000000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][15], 0);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][15], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][15], 1);
	PlayerTextDrawColor(playerid, SHOWID[playerid][15], -1);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][15], 0);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][15], 0);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][15], 0);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][15], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][15], 0);
	PlayerTextDrawSetPreviewModel(playerid, SHOWID[playerid][15], 0);
	PlayerTextDrawSetPreviewRot(playerid, SHOWID[playerid][15], -10.000000, 0.000000, -20.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, SHOWID[playerid][15], 1, 1);

	//Vehicle Panel - Stewart
	VehiclePanelTD[playerid][0] = CreatePlayerTextDraw(playerid, 536.000000, 175.000000, "_");
	PlayerTextDrawFont(playerid, VehiclePanelTD[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid, VehiclePanelTD[playerid][0], 0.600000, 20.250007);
	PlayerTextDrawTextSize(playerid, VehiclePanelTD[playerid][0], 298.500000, 115.000000);
	PlayerTextDrawSetOutline(playerid, VehiclePanelTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, VehiclePanelTD[playerid][0], 0);
	PlayerTextDrawAlignment(playerid, VehiclePanelTD[playerid][0], 2);
	PlayerTextDrawColor(playerid, VehiclePanelTD[playerid][0], -1);
	PlayerTextDrawBackgroundColor(playerid, VehiclePanelTD[playerid][0], 255);
	PlayerTextDrawBoxColor(playerid, VehiclePanelTD[playerid][0], 135);
	PlayerTextDrawUseBox(playerid, VehiclePanelTD[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, VehiclePanelTD[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, VehiclePanelTD[playerid][0], 0);

	VehiclePanelTD[playerid][1] = CreatePlayerTextDraw(playerid, 536.000000, 175.000000, "_");
	PlayerTextDrawFont(playerid, VehiclePanelTD[playerid][1], 1);
	PlayerTextDrawLetterSize(playerid, VehiclePanelTD[playerid][1], 0.600000, 1.799998);
	PlayerTextDrawTextSize(playerid, VehiclePanelTD[playerid][1], 328.500000, 115.000000);
	PlayerTextDrawSetOutline(playerid, VehiclePanelTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, VehiclePanelTD[playerid][1], 0);
	PlayerTextDrawAlignment(playerid, VehiclePanelTD[playerid][1], 2);
	PlayerTextDrawColor(playerid, VehiclePanelTD[playerid][1], -1);
	PlayerTextDrawBackgroundColor(playerid, VehiclePanelTD[playerid][1], 255);
	PlayerTextDrawBoxColor(playerid, VehiclePanelTD[playerid][1], 16777095);
	PlayerTextDrawUseBox(playerid, VehiclePanelTD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, VehiclePanelTD[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, VehiclePanelTD[playerid][1], 0);

	VehiclePanelTD[playerid][2] = CreatePlayerTextDraw(playerid, 490.000000, 176.000000, "Vehicle Panel");
	PlayerTextDrawFont(playerid, VehiclePanelTD[playerid][2], 2);
	PlayerTextDrawLetterSize(playerid, VehiclePanelTD[playerid][2], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, VehiclePanelTD[playerid][2], 655.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, VehiclePanelTD[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, VehiclePanelTD[playerid][2], 0);
	PlayerTextDrawAlignment(playerid, VehiclePanelTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, VehiclePanelTD[playerid][2], -1);
	PlayerTextDrawBackgroundColor(playerid, VehiclePanelTD[playerid][2], 255);
	PlayerTextDrawBoxColor(playerid, VehiclePanelTD[playerid][2], 50);
	PlayerTextDrawUseBox(playerid, VehiclePanelTD[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid, VehiclePanelTD[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, VehiclePanelTD[playerid][2], 0);

	VehiclePanelTD[playerid][3] = CreatePlayerTextDraw(playerid, 483.000000, 203.000000, "Engine On");
	PlayerTextDrawFont(playerid, VehiclePanelTD[playerid][3], 1);
	PlayerTextDrawLetterSize(playerid, VehiclePanelTD[playerid][3], 0.229166, 1.149999);
	PlayerTextDrawTextSize(playerid, VehiclePanelTD[playerid][3], 665.000000, 20.000000);
	PlayerTextDrawSetOutline(playerid, VehiclePanelTD[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, VehiclePanelTD[playerid][3], 0);
	PlayerTextDrawAlignment(playerid, VehiclePanelTD[playerid][3], 1);
	PlayerTextDrawColor(playerid, VehiclePanelTD[playerid][3], -1);
	PlayerTextDrawBackgroundColor(playerid, VehiclePanelTD[playerid][3], 255);
	PlayerTextDrawBoxColor(playerid, VehiclePanelTD[playerid][3], 50);
	PlayerTextDrawUseBox(playerid, VehiclePanelTD[playerid][3], 0);
	PlayerTextDrawSetProportional(playerid, VehiclePanelTD[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, VehiclePanelTD[playerid][3], 1);

	VehiclePanelTD[playerid][4] = CreatePlayerTextDraw(playerid, 546.000000, 204.000000, "Lock Yes");
	PlayerTextDrawFont(playerid, VehiclePanelTD[playerid][4], 1);
	PlayerTextDrawLetterSize(playerid, VehiclePanelTD[playerid][4], 0.229166, 1.149999);
	PlayerTextDrawTextSize(playerid, VehiclePanelTD[playerid][4], 665.000000, 20.000000);
	PlayerTextDrawSetOutline(playerid, VehiclePanelTD[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, VehiclePanelTD[playerid][4], 0);
	PlayerTextDrawAlignment(playerid, VehiclePanelTD[playerid][4], 1);
	PlayerTextDrawColor(playerid, VehiclePanelTD[playerid][4], -1);
	PlayerTextDrawBackgroundColor(playerid, VehiclePanelTD[playerid][4], 255);
	PlayerTextDrawBoxColor(playerid, VehiclePanelTD[playerid][4], 50);
	PlayerTextDrawUseBox(playerid, VehiclePanelTD[playerid][4], 0);
	PlayerTextDrawSetProportional(playerid, VehiclePanelTD[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, VehiclePanelTD[playerid][4], 1);

	VehiclePanelTD[playerid][5] = CreatePlayerTextDraw(playerid, 482.000000, 348.000000, "Gasoline: 100");
	PlayerTextDrawFont(playerid, VehiclePanelTD[playerid][5], 2);
	PlayerTextDrawLetterSize(playerid, VehiclePanelTD[playerid][5], 0.229166, 1.149999);
	PlayerTextDrawTextSize(playerid, VehiclePanelTD[playerid][5], 665.000000, 20.000000);
	PlayerTextDrawSetOutline(playerid, VehiclePanelTD[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, VehiclePanelTD[playerid][5], 0);
	PlayerTextDrawAlignment(playerid, VehiclePanelTD[playerid][5], 1);
	PlayerTextDrawColor(playerid, VehiclePanelTD[playerid][5], -1);
	PlayerTextDrawBackgroundColor(playerid, VehiclePanelTD[playerid][5], 255);
	PlayerTextDrawBoxColor(playerid, VehiclePanelTD[playerid][5], 50);
	PlayerTextDrawUseBox(playerid, VehiclePanelTD[playerid][5], 0);
	PlayerTextDrawSetProportional(playerid, VehiclePanelTD[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, VehiclePanelTD[playerid][5], 0);

	VehiclePanelTD[playerid][6] = CreatePlayerTextDraw(playerid, 521.000000, 348.000000, "Tickets: 100$");
	PlayerTextDrawFont(playerid, VehiclePanelTD[playerid][6], 2);
	PlayerTextDrawLetterSize(playerid, VehiclePanelTD[playerid][6], 0.229166, 1.149999);
	PlayerTextDrawTextSize(playerid, VehiclePanelTD[playerid][6], 665.000000, 20.000000);
	PlayerTextDrawSetOutline(playerid, VehiclePanelTD[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, VehiclePanelTD[playerid][6], 0);
	PlayerTextDrawAlignment(playerid, VehiclePanelTD[playerid][6], 1);
	PlayerTextDrawColor(playerid, VehiclePanelTD[playerid][6], -1);
	PlayerTextDrawBackgroundColor(playerid, VehiclePanelTD[playerid][6], 255);
	PlayerTextDrawBoxColor(playerid, VehiclePanelTD[playerid][6], 50);
	PlayerTextDrawUseBox(playerid, VehiclePanelTD[playerid][6], 0);
	PlayerTextDrawSetProportional(playerid, VehiclePanelTD[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid, VehiclePanelTD[playerid][6], 0);

	VehiclePanelTD[playerid][7] = CreatePlayerTextDraw(playerid, 483.000000, 229.000000, "Hood Open");
	PlayerTextDrawFont(playerid, VehiclePanelTD[playerid][7], 1);
	PlayerTextDrawLetterSize(playerid, VehiclePanelTD[playerid][7], 0.229166, 1.149999);
	PlayerTextDrawTextSize(playerid, VehiclePanelTD[playerid][7], 665.000000, 20.000000);
	PlayerTextDrawSetOutline(playerid, VehiclePanelTD[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, VehiclePanelTD[playerid][7], 0);
	PlayerTextDrawAlignment(playerid, VehiclePanelTD[playerid][7], 1);
	PlayerTextDrawColor(playerid, VehiclePanelTD[playerid][7], -1);
	PlayerTextDrawBackgroundColor(playerid, VehiclePanelTD[playerid][7], 255);
	PlayerTextDrawBoxColor(playerid, VehiclePanelTD[playerid][7], 50);
	PlayerTextDrawUseBox(playerid, VehiclePanelTD[playerid][7], 0);
	PlayerTextDrawSetProportional(playerid, VehiclePanelTD[playerid][7], 1);
	PlayerTextDrawSetSelectable(playerid, VehiclePanelTD[playerid][7], 1);

	VehiclePanelTD[playerid][8] = CreatePlayerTextDraw(playerid, 547.000000, 229.000000, "Trunk Open");
	PlayerTextDrawFont(playerid, VehiclePanelTD[playerid][8], 1);
	PlayerTextDrawLetterSize(playerid, VehiclePanelTD[playerid][8], 0.229166, 1.149999);
	PlayerTextDrawTextSize(playerid, VehiclePanelTD[playerid][8], 665.000000, 20.000000);
	PlayerTextDrawSetOutline(playerid, VehiclePanelTD[playerid][8], 1);
	PlayerTextDrawSetShadow(playerid, VehiclePanelTD[playerid][8], 0);
	PlayerTextDrawAlignment(playerid, VehiclePanelTD[playerid][8], 1);
	PlayerTextDrawColor(playerid, VehiclePanelTD[playerid][8], -1);
	PlayerTextDrawBackgroundColor(playerid, VehiclePanelTD[playerid][8], 255);
	PlayerTextDrawBoxColor(playerid, VehiclePanelTD[playerid][8], 50);
	PlayerTextDrawUseBox(playerid, VehiclePanelTD[playerid][8], 0);
	PlayerTextDrawSetProportional(playerid, VehiclePanelTD[playerid][8], 1);
	PlayerTextDrawSetSelectable(playerid, VehiclePanelTD[playerid][8], 1);

	VehiclePanelTD[playerid][9] = CreatePlayerTextDraw(playerid, 483.000000, 257.000000, "Lights Open");
	PlayerTextDrawFont(playerid, VehiclePanelTD[playerid][9], 1);
	PlayerTextDrawLetterSize(playerid, VehiclePanelTD[playerid][9], 0.229166, 1.149999);
	PlayerTextDrawTextSize(playerid, VehiclePanelTD[playerid][9], 665.000000, 20.000000);
	PlayerTextDrawSetOutline(playerid, VehiclePanelTD[playerid][9], 1);
	PlayerTextDrawSetShadow(playerid, VehiclePanelTD[playerid][9], 0);
	PlayerTextDrawAlignment(playerid, VehiclePanelTD[playerid][9], 1);
	PlayerTextDrawColor(playerid, VehiclePanelTD[playerid][9], -1);
	PlayerTextDrawBackgroundColor(playerid, VehiclePanelTD[playerid][9], 255);
	PlayerTextDrawBoxColor(playerid, VehiclePanelTD[playerid][9], 50);
	PlayerTextDrawUseBox(playerid, VehiclePanelTD[playerid][9], 0);
	PlayerTextDrawSetProportional(playerid, VehiclePanelTD[playerid][9], 1);
	PlayerTextDrawSetSelectable(playerid, VehiclePanelTD[playerid][9], 1);

	VehiclePanelTD[playerid][10] = CreatePlayerTextDraw(playerid, 543.000000, 257.000000, "Windows Open");
	PlayerTextDrawFont(playerid, VehiclePanelTD[playerid][10], 1);
	PlayerTextDrawLetterSize(playerid, VehiclePanelTD[playerid][10], 0.229166, 1.149999);
	PlayerTextDrawTextSize(playerid, VehiclePanelTD[playerid][10], 665.000000, 20.000000);
	PlayerTextDrawSetOutline(playerid, VehiclePanelTD[playerid][10], 1);
	PlayerTextDrawSetShadow(playerid, VehiclePanelTD[playerid][10], 0);
	PlayerTextDrawAlignment(playerid, VehiclePanelTD[playerid][10], 1);
	PlayerTextDrawColor(playerid, VehiclePanelTD[playerid][10], -1);
	PlayerTextDrawBackgroundColor(playerid, VehiclePanelTD[playerid][10], 255);
	PlayerTextDrawBoxColor(playerid, VehiclePanelTD[playerid][10], 50);
	PlayerTextDrawUseBox(playerid, VehiclePanelTD[playerid][10], 0);
	PlayerTextDrawSetProportional(playerid, VehiclePanelTD[playerid][10], 1);
	PlayerTextDrawSetSelectable(playerid, VehiclePanelTD[playerid][10], 1);


	CallingPlayerTD[playerid][0] = CreatePlayerTextDraw(playerid, 377.000000, 254.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, CallingPlayerTD[playerid][0], 5);
	PlayerTextDrawLetterSize(playerid, CallingPlayerTD[playerid][0], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, CallingPlayerTD[playerid][0], 112.500000, 95.000000);
	PlayerTextDrawSetOutline(playerid, CallingPlayerTD[playerid][0], 0);
	PlayerTextDrawSetShadow(playerid, CallingPlayerTD[playerid][0], 0);
	PlayerTextDrawAlignment(playerid, CallingPlayerTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, CallingPlayerTD[playerid][0], -1);
	PlayerTextDrawBackgroundColor(playerid, CallingPlayerTD[playerid][0], 0);
	PlayerTextDrawBoxColor(playerid, CallingPlayerTD[playerid][0], 255);
	PlayerTextDrawUseBox(playerid, CallingPlayerTD[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid, CallingPlayerTD[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, CallingPlayerTD[playerid][0], 0);
	PlayerTextDrawSetPreviewModel(playerid, CallingPlayerTD[playerid][0], 299);
	PlayerTextDrawSetPreviewRot(playerid, CallingPlayerTD[playerid][0], -10.000000, 0.000000, -20.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, CallingPlayerTD[playerid][0], 1, 1);

	CallingPlayerTD[playerid][1] = CreatePlayerTextDraw(playerid, 435.000000, 196.000000, "Jahseh_Pascual");
	PlayerTextDrawFont(playerid, CallingPlayerTD[playerid][1], 2);
	PlayerTextDrawLetterSize(playerid, CallingPlayerTD[playerid][1], 0.200000, 1.750000);
	PlayerTextDrawTextSize(playerid, CallingPlayerTD[playerid][1], 452.000000, 161.000000);
	PlayerTextDrawSetOutline(playerid, CallingPlayerTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, CallingPlayerTD[playerid][1], 0);
	PlayerTextDrawAlignment(playerid, CallingPlayerTD[playerid][1], 2);
	PlayerTextDrawColor(playerid, CallingPlayerTD[playerid][1], -1);
	PlayerTextDrawBackgroundColor(playerid, CallingPlayerTD[playerid][1], 255);
	PlayerTextDrawBoxColor(playerid, CallingPlayerTD[playerid][1], 50);
	PlayerTextDrawUseBox(playerid, CallingPlayerTD[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid, CallingPlayerTD[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, CallingPlayerTD[playerid][1], 0);

	CallingPlayerTD[playerid][2] = CreatePlayerTextDraw(playerid, 435.000000, 209.000000, "(666666)");
	PlayerTextDrawFont(playerid, CallingPlayerTD[playerid][2], 2);
	PlayerTextDrawLetterSize(playerid, CallingPlayerTD[playerid][2], 0.200000, 1.750000);
	PlayerTextDrawTextSize(playerid, CallingPlayerTD[playerid][2], 452.000000, 161.000000);
	PlayerTextDrawSetOutline(playerid, CallingPlayerTD[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, CallingPlayerTD[playerid][2], 0);
	PlayerTextDrawAlignment(playerid, CallingPlayerTD[playerid][2], 2);
	PlayerTextDrawColor(playerid, CallingPlayerTD[playerid][2], -1);
	PlayerTextDrawBackgroundColor(playerid, CallingPlayerTD[playerid][2], 255);
	PlayerTextDrawBoxColor(playerid, CallingPlayerTD[playerid][2], 50);
	PlayerTextDrawUseBox(playerid, CallingPlayerTD[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid, CallingPlayerTD[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, CallingPlayerTD[playerid][2], 0);

	CallingPlayerTD[playerid][3] = CreatePlayerTextDraw(playerid, 437.000000, 230.000000, "Is calling you...");
	PlayerTextDrawFont(playerid, CallingPlayerTD[playerid][3], 2);
	PlayerTextDrawLetterSize(playerid, CallingPlayerTD[playerid][3], 0.200000, 1.750000);
	PlayerTextDrawTextSize(playerid, CallingPlayerTD[playerid][3], 452.000000, 161.000000);
	PlayerTextDrawSetOutline(playerid, CallingPlayerTD[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, CallingPlayerTD[playerid][3], 0);
	PlayerTextDrawAlignment(playerid, CallingPlayerTD[playerid][3], 2);
	PlayerTextDrawColor(playerid, CallingPlayerTD[playerid][3], -1);
	PlayerTextDrawBackgroundColor(playerid, CallingPlayerTD[playerid][3], 255);
	PlayerTextDrawBoxColor(playerid, CallingPlayerTD[playerid][3], 50);
	PlayerTextDrawUseBox(playerid, CallingPlayerTD[playerid][3], 0);
	PlayerTextDrawSetProportional(playerid, CallingPlayerTD[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, CallingPlayerTD[playerid][3], 0);

	CallingPlayerTD[playerid][4] = CreatePlayerTextDraw(playerid, 437.000000, 230.000000, "Dialing...");
	PlayerTextDrawFont(playerid, CallingPlayerTD[playerid][4], 2);
	PlayerTextDrawLetterSize(playerid, CallingPlayerTD[playerid][4], 0.200000, 1.750000);
	PlayerTextDrawTextSize(playerid, CallingPlayerTD[playerid][4], 452.000000, 161.000000);
	PlayerTextDrawSetOutline(playerid, CallingPlayerTD[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, CallingPlayerTD[playerid][4], 0);
	PlayerTextDrawAlignment(playerid, CallingPlayerTD[playerid][4], 2);
	PlayerTextDrawColor(playerid, CallingPlayerTD[playerid][4], -1);
	PlayerTextDrawBackgroundColor(playerid, CallingPlayerTD[playerid][4], 255);
	PlayerTextDrawBoxColor(playerid, CallingPlayerTD[playerid][4], 50);
	PlayerTextDrawUseBox(playerid, CallingPlayerTD[playerid][4], 0);
	PlayerTextDrawSetProportional(playerid, CallingPlayerTD[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, CallingPlayerTD[playerid][4], 0);

	ATMTD2[playerid][0] = CreatePlayerTextDraw(playerid, 162.000000, 159.000000, "ACCOUNT NAME: JAHSEH PASCUAL");
	PlayerTextDrawFont(playerid, ATMTD2[playerid][0], 2);
	PlayerTextDrawLetterSize(playerid, ATMTD2[playerid][0], 0.229166, 1.700001);
	PlayerTextDrawTextSize(playerid, ATMTD2[playerid][0], 675.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, ATMTD2[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, ATMTD2[playerid][0], 0);
	PlayerTextDrawAlignment(playerid, ATMTD2[playerid][0], 1);
	PlayerTextDrawColor(playerid, ATMTD2[playerid][0], -1);
	PlayerTextDrawBackgroundColor(playerid, ATMTD2[playerid][0], 255);
	PlayerTextDrawBoxColor(playerid, ATMTD2[playerid][0], 50);
	PlayerTextDrawUseBox(playerid, ATMTD2[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid, ATMTD2[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, ATMTD2[playerid][0], 0);

	ATMTD2[playerid][1] = CreatePlayerTextDraw(playerid, 162.000000, 185.000000, "BALANCE:");
	PlayerTextDrawFont(playerid, ATMTD2[playerid][1], 2);
	PlayerTextDrawLetterSize(playerid, ATMTD2[playerid][1], 0.229166, 1.700001);
	PlayerTextDrawTextSize(playerid, ATMTD2[playerid][1], 675.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, ATMTD2[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, ATMTD2[playerid][1], 0);
	PlayerTextDrawAlignment(playerid, ATMTD2[playerid][1], 1);
	PlayerTextDrawColor(playerid, ATMTD2[playerid][1], -1);
	PlayerTextDrawBackgroundColor(playerid, ATMTD2[playerid][1], 255);
	PlayerTextDrawBoxColor(playerid, ATMTD2[playerid][1], 50);
	PlayerTextDrawUseBox(playerid, ATMTD2[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid, ATMTD2[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, ATMTD2[playerid][1], 0);

	PhoneAtmPlayer[playerid] = CreatePlayerTextDraw(playerid, 205.000000, 299.000000, "BALANCE:1,000,000,000");
	PlayerTextDrawFont(playerid, PhoneAtmPlayer[playerid], 3);
	PlayerTextDrawLetterSize(playerid, PhoneAtmPlayer[playerid], 0.250000, 1.050000);
	PlayerTextDrawTextSize(playerid, PhoneAtmPlayer[playerid], 455.000000, -13.000000);
	PlayerTextDrawSetOutline(playerid, PhoneAtmPlayer[playerid], 1);
	PlayerTextDrawSetShadow(playerid, PhoneAtmPlayer[playerid], 0);
	PlayerTextDrawAlignment(playerid, PhoneAtmPlayer[playerid], 1);
	PlayerTextDrawColor(playerid, PhoneAtmPlayer[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, PhoneAtmPlayer[playerid], 255);
	PlayerTextDrawBoxColor(playerid, PhoneAtmPlayer[playerid], 50);
	PlayerTextDrawUseBox(playerid, PhoneAtmPlayer[playerid], 0);
	PlayerTextDrawSetProportional(playerid, PhoneAtmPlayer[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, PhoneAtmPlayer[playerid], 0);
	
	//Sampvoice
	/*SampvoiceTD[playerid][0] = CreatePlayerTextDraw(playerid, 273.000000, 328.000000, "Voice: Shout");
	PlayerTextDrawFont(playerid, SampvoiceTD[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid, SampvoiceTD[playerid][0], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, SampvoiceTD[playerid][0], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, SampvoiceTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, SampvoiceTD[playerid][0], 0);
	PlayerTextDrawAlignment(playerid, SampvoiceTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, SampvoiceTD[playerid][0], -1);
	PlayerTextDrawBackgroundColor(playerid, SampvoiceTD[playerid][0], 255);
	PlayerTextDrawBoxColor(playerid, SampvoiceTD[playerid][0], 50);
	PlayerTextDrawUseBox(playerid, SampvoiceTD[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid, SampvoiceTD[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, SampvoiceTD[playerid][0], 0);*/

	/*CCRPMENU[playerid][0] = CreatePlayerTextDraw(playerid, 607.000000, 2.000000, "_");
	PlayerTextDrawFont(playerid, CCRPMENU[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid, CCRPMENU[playerid][0], 0.579165, 2.749999);
	PlayerTextDrawTextSize(playerid, CCRPMENU[playerid][0], 303.500000, 63.500000);
	PlayerTextDrawSetOutline(playerid, CCRPMENU[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, CCRPMENU[playerid][0], 0);
	PlayerTextDrawAlignment(playerid, CCRPMENU[playerid][0], 2);
	PlayerTextDrawColor(playerid, CCRPMENU[playerid][0], -1);
	PlayerTextDrawBackgroundColor(playerid, CCRPMENU[playerid][0], 255);
	PlayerTextDrawBoxColor(playerid, CCRPMENU[playerid][0], -8433409);
	PlayerTextDrawUseBox(playerid, CCRPMENU[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, CCRPMENU[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, CCRPMENU[playerid][0], 0);

	CCRPMENU[playerid][1] = CreatePlayerTextDraw(playerid, 574.000000, 2.000000, "ONLINE:100");
	PlayerTextDrawFont(playerid, CCRPMENU[playerid][1], 2);
	PlayerTextDrawLetterSize(playerid, CCRPMENU[playerid][1], 0.233333, 1.299998);
	PlayerTextDrawTextSize(playerid, CCRPMENU[playerid][1], 885.000000, -88.000000);
	PlayerTextDrawSetOutline(playerid, CCRPMENU[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, CCRPMENU[playerid][1], 0);
	PlayerTextDrawAlignment(playerid, CCRPMENU[playerid][1], 1);
	PlayerTextDrawColor(playerid, CCRPMENU[playerid][1], -1);
	PlayerTextDrawBackgroundColor(playerid, CCRPMENU[playerid][1], 255);
	PlayerTextDrawBoxColor(playerid, CCRPMENU[playerid][1], 50);
	PlayerTextDrawUseBox(playerid, CCRPMENU[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid, CCRPMENU[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, CCRPMENU[playerid][1], 0);

	CCRPMENU[playerid][2] = CreatePlayerTextDraw(playerid, 574.000000, 15.000000, "YOUR ID:100");
	PlayerTextDrawFont(playerid, CCRPMENU[playerid][2], 2);
	PlayerTextDrawLetterSize(playerid, CCRPMENU[playerid][2], 0.233333, 1.299998);
	PlayerTextDrawTextSize(playerid, CCRPMENU[playerid][2], 885.000000, -88.000000);
	PlayerTextDrawSetOutline(playerid, CCRPMENU[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, CCRPMENU[playerid][2], 0);
	PlayerTextDrawAlignment(playerid, CCRPMENU[playerid][2], 1);
	PlayerTextDrawColor(playerid, CCRPMENU[playerid][2], -1);
	PlayerTextDrawBackgroundColor(playerid, CCRPMENU[playerid][2], 255);
	PlayerTextDrawBoxColor(playerid, CCRPMENU[playerid][2], 50);
	PlayerTextDrawUseBox(playerid, CCRPMENU[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid, CCRPMENU[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, CCRPMENU[playerid][2], 0);

	CCRPMENU[playerid][3] = CreatePlayerTextDraw(playerid, 557.000000, 2.000000, "_");
	PlayerTextDrawFont(playerid, CCRPMENU[playerid][3], 1);
	PlayerTextDrawLetterSize(playerid, CCRPMENU[playerid][3], 0.579165, 2.749999);
	PlayerTextDrawTextSize(playerid, CCRPMENU[playerid][3], 303.500000, 28.500000);
	PlayerTextDrawSetOutline(playerid, CCRPMENU[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, CCRPMENU[playerid][3], 0);
	PlayerTextDrawAlignment(playerid, CCRPMENU[playerid][3], 2);
	PlayerTextDrawColor(playerid, CCRPMENU[playerid][3], -1);
	PlayerTextDrawBackgroundColor(playerid, CCRPMENU[playerid][3], 255);
	PlayerTextDrawBoxColor(playerid, CCRPMENU[playerid][3], 255);
	PlayerTextDrawUseBox(playerid, CCRPMENU[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, CCRPMENU[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, CCRPMENU[playerid][3], 0);

	CCRPMENU[playerid][4] = CreatePlayerTextDraw(playerid, 535.000000, -8.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, CCRPMENU[playerid][4], 5);
	PlayerTextDrawLetterSize(playerid, CCRPMENU[playerid][4], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, CCRPMENU[playerid][4], 44.500000, 40.000000);
	PlayerTextDrawSetOutline(playerid, CCRPMENU[playerid][4], 0);
	PlayerTextDrawSetShadow(playerid, CCRPMENU[playerid][4], 0);
	PlayerTextDrawAlignment(playerid, CCRPMENU[playerid][4], 1);
	PlayerTextDrawColor(playerid, CCRPMENU[playerid][4], -1);
	PlayerTextDrawBackgroundColor(playerid, CCRPMENU[playerid][4], 0);
	PlayerTextDrawBoxColor(playerid, CCRPMENU[playerid][4], 255);
	PlayerTextDrawUseBox(playerid, CCRPMENU[playerid][4], 0);
	PlayerTextDrawSetProportional(playerid, CCRPMENU[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, CCRPMENU[playerid][4], 0);
	PlayerTextDrawSetPreviewModel(playerid, CCRPMENU[playerid][4], 4002);
	PlayerTextDrawSetPreviewRot(playerid, CCRPMENU[playerid][4], -10.000000, 0.000000, -3.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, CCRPMENU[playerid][4], 1, 1);*/
	
	//Player Textdraws
	Speeddraw[playerid][0] = CreatePlayerTextDraw(playerid, 193.000000, 372.000000, "152");
	PlayerTextDrawFont(playerid, Speeddraw[playerid][0], 2);
	PlayerTextDrawLetterSize(playerid, Speeddraw[playerid][0], 0.433333, 2.099997);
	PlayerTextDrawTextSize(playerid, Speeddraw[playerid][0], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, Speeddraw[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, Speeddraw[playerid][0], 0);
	PlayerTextDrawAlignment(playerid, Speeddraw[playerid][0], 1);
	PlayerTextDrawColor(playerid, Speeddraw[playerid][0], -1);
	PlayerTextDrawBackgroundColor(playerid, Speeddraw[playerid][0], 255);
	PlayerTextDrawBoxColor(playerid, Speeddraw[playerid][0], 50);
	PlayerTextDrawUseBox(playerid, Speeddraw[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid, Speeddraw[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, Speeddraw[playerid][0], 0);

	Speeddraw[playerid][1] = CreatePlayerTextDraw(playerid, 135.000000, 372.000000, "152");
	PlayerTextDrawFont(playerid, Speeddraw[playerid][1], 2);
	PlayerTextDrawLetterSize(playerid, Speeddraw[playerid][1], 0.433333, 2.099997);
	PlayerTextDrawTextSize(playerid, Speeddraw[playerid][1], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, Speeddraw[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, Speeddraw[playerid][1], 0);
	PlayerTextDrawAlignment(playerid, Speeddraw[playerid][1], 1);
	PlayerTextDrawColor(playerid, Speeddraw[playerid][1], -1);
	PlayerTextDrawBackgroundColor(playerid, Speeddraw[playerid][1], 255);
	PlayerTextDrawBoxColor(playerid, Speeddraw[playerid][1], 50);
	PlayerTextDrawUseBox(playerid, Speeddraw[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid, Speeddraw[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, Speeddraw[playerid][1], 0);

	Speeddraw[playerid][2] = CreatePlayerTextDraw(playerid, 170.000000, 377.000000, "KMH");
	PlayerTextDrawFont(playerid, Speeddraw[playerid][2], 2);
	PlayerTextDrawLetterSize(playerid, Speeddraw[playerid][2], 0.183331, 1.249997);
	PlayerTextDrawTextSize(playerid, Speeddraw[playerid][2], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, Speeddraw[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, Speeddraw[playerid][2], 0);
	PlayerTextDrawAlignment(playerid, Speeddraw[playerid][2], 1);
	PlayerTextDrawColor(playerid, Speeddraw[playerid][2], -1);
	PlayerTextDrawBackgroundColor(playerid, Speeddraw[playerid][2], 255);
	PlayerTextDrawBoxColor(playerid, Speeddraw[playerid][2], 50);
	PlayerTextDrawUseBox(playerid, Speeddraw[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid, Speeddraw[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, Speeddraw[playerid][2], 0);

	Speeddraw[playerid][3] = CreatePlayerTextDraw(playerid, 229.000000, 377.000000, "FUEL");
	PlayerTextDrawFont(playerid, Speeddraw[playerid][3], 2);
	PlayerTextDrawLetterSize(playerid, Speeddraw[playerid][3], 0.183331, 1.249997);
	PlayerTextDrawTextSize(playerid, Speeddraw[playerid][3], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, Speeddraw[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, Speeddraw[playerid][3], 0);
	PlayerTextDrawAlignment(playerid, Speeddraw[playerid][3], 1);
	PlayerTextDrawColor(playerid, Speeddraw[playerid][3], -1);
	PlayerTextDrawBackgroundColor(playerid, Speeddraw[playerid][3], 255);
	PlayerTextDrawBoxColor(playerid, Speeddraw[playerid][3], 50);
	PlayerTextDrawUseBox(playerid, Speeddraw[playerid][3], 0);
	PlayerTextDrawSetProportional(playerid, Speeddraw[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, Speeddraw[playerid][3], 0);

	Speeddraw[playerid][4] = CreatePlayerTextDraw(playerid, 222.000000, 391.000000, "belt");
	PlayerTextDrawFont(playerid, Speeddraw[playerid][4], 2);
	PlayerTextDrawLetterSize(playerid, Speeddraw[playerid][4], 0.170828, 0.999997);
	PlayerTextDrawTextSize(playerid, Speeddraw[playerid][4], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, Speeddraw[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, Speeddraw[playerid][4], 0);
	PlayerTextDrawAlignment(playerid, Speeddraw[playerid][4], 1);
	PlayerTextDrawColor(playerid, Speeddraw[playerid][4], -1);
	PlayerTextDrawBackgroundColor(playerid, Speeddraw[playerid][4], 255);
	PlayerTextDrawBoxColor(playerid, Speeddraw[playerid][4], 50);
	PlayerTextDrawUseBox(playerid, Speeddraw[playerid][4], 0);
	PlayerTextDrawSetProportional(playerid, Speeddraw[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, Speeddraw[playerid][4], 0);

	Speeddraw[playerid][5] = CreatePlayerTextDraw(playerid, 177.000000, 391.000000, "UNLOCKED");
	PlayerTextDrawFont(playerid, Speeddraw[playerid][5], 2);
	PlayerTextDrawLetterSize(playerid, Speeddraw[playerid][5], 0.170828, 0.999997);
	PlayerTextDrawTextSize(playerid, Speeddraw[playerid][5], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, Speeddraw[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, Speeddraw[playerid][5], 0);
	PlayerTextDrawAlignment(playerid, Speeddraw[playerid][5], 1);
	PlayerTextDrawColor(playerid, Speeddraw[playerid][5], -1);
	PlayerTextDrawBackgroundColor(playerid, Speeddraw[playerid][5], 255);
	PlayerTextDrawBoxColor(playerid, Speeddraw[playerid][5], 50);
	PlayerTextDrawUseBox(playerid, Speeddraw[playerid][5], 0);
	PlayerTextDrawSetProportional(playerid, Speeddraw[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, Speeddraw[playerid][5], 0);

	// GPS
	pData[playerid][pText][0] = CreatePlayerTextDraw(playerid, 170.000000, 403.000000, "Los Santos");
	PlayerTextDrawFont(playerid, pData[playerid][pText][0], 2);
	PlayerTextDrawLetterSize(playerid, pData[playerid][pText][0], 0.254164, 1.599997);
	PlayerTextDrawTextSize(playerid, pData[playerid][pText][0], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, pData[playerid][pText][0], 1);
	PlayerTextDrawSetShadow(playerid, pData[playerid][pText][0], 0);
	PlayerTextDrawAlignment(playerid, pData[playerid][pText][0], 1);
	PlayerTextDrawColor(playerid, pData[playerid][pText][0], -1);
	PlayerTextDrawBackgroundColor(playerid, pData[playerid][pText][0], 255);
	PlayerTextDrawBoxColor(playerid, pData[playerid][pText][0], 50);
	PlayerTextDrawUseBox(playerid, pData[playerid][pText][0], 0);
	PlayerTextDrawSetProportional(playerid, pData[playerid][pText][0], 1);
	PlayerTextDrawSetSelectable(playerid, pData[playerid][pText][0], 0);

	pData[playerid][pText][1] = CreatePlayerTextDraw(playerid, 138.000000, 403.000000, "S");
	PlayerTextDrawFont(playerid, pData[playerid][pText][1], 2);
	PlayerTextDrawLetterSize(playerid, pData[playerid][pText][1], 0.254164, 1.599997);
	PlayerTextDrawTextSize(playerid, pData[playerid][pText][1], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, pData[playerid][pText][1], 1);
	PlayerTextDrawSetShadow(playerid, pData[playerid][pText][1], 0);
	PlayerTextDrawAlignment(playerid, pData[playerid][pText][1], 1);
	PlayerTextDrawColor(playerid, pData[playerid][pText][1], -1);
	PlayerTextDrawBackgroundColor(playerid, pData[playerid][pText][1], 255);
	PlayerTextDrawBoxColor(playerid, pData[playerid][pText][1], 50);
	PlayerTextDrawUseBox(playerid, pData[playerid][pText][1], 0);
	PlayerTextDrawSetProportional(playerid, pData[playerid][pText][1], 1);
	PlayerTextDrawSetSelectable(playerid, pData[playerid][pText][1], 0);

    pData[playerid][pText][6] = CreatePlayerTextDraw(playerid, 162.000000, 403.000000, "I");
    PlayerTextDrawFont(playerid, pData[playerid][pText][6], 2);
    PlayerTextDrawLetterSize(playerid, pData[playerid][pText][6], 0.254164, 1.599997);
    PlayerTextDrawTextSize(playerid, pData[playerid][pText][6], 400.000000, 17.000000);
    PlayerTextDrawSetOutline(playerid, pData[playerid][pText][6], 1);
    PlayerTextDrawSetShadow(playerid, pData[playerid][pText][6], 0);
    PlayerTextDrawAlignment(playerid, pData[playerid][pText][6], 1);
    PlayerTextDrawColor(playerid, pData[playerid][pText][6], -1	);
    PlayerTextDrawBackgroundColor(playerid, pData[playerid][pText][6], 255);
    PlayerTextDrawBoxColor(playerid, pData[playerid][pText][6], 50);
    PlayerTextDrawUseBox(playerid, pData[playerid][pText][6], 0);
    PlayerTextDrawSetProportional(playerid, pData[playerid][pText][6], 1);
    PlayerTextDrawSetSelectable(playerid, pData[playerid][pText][6], 0);

    /*pData[playerid][pText][7] = CreatePlayerTextDraw(playerid, 146.000000, 423.000000, "I");
    PlayerTextDrawFont(playerid, pData[playerid][pText][7], 2);
    PlayerTextDrawLetterSize(playerid, pData[playerid][pText][7], 0.287499, 2.649996);
    PlayerTextDrawTextSize(playerid, pData[playerid][pText][7], 400.000000, 17.000000);
    PlayerTextDrawSetOutline(playerid, pData[playerid][pText][7], 1);
    PlayerTextDrawSetShadow(playerid, pData[playerid][pText][7], 0);
    PlayerTextDrawAlignment(playerid, pData[playerid][pText][7], 2);
    PlayerTextDrawColor(playerid, pData[playerid][pText][7], -16776961);
    PlayerTextDrawBackgroundColor(playerid, pData[playerid][pText][7], 100);
    PlayerTextDrawBoxColor(playerid, pData[playerid][pText][7], 50);
    PlayerTextDrawUseBox(playerid, pData[playerid][pText][7], 0);
    PlayerTextDrawSetProportional(playerid, pData[playerid][pText][7], 1);
    PlayerTextDrawSetSelectable(playerid, pData[playerid][pText][7], 0);*/
	// End

	// HP & armor
	pData[playerid][pText][3] = CreatePlayerTextDraw(playerid, 577.000000, 43.500000, "100");
	PlayerTextDrawAlignment(playerid, pData[playerid][pText][3], 2);
	PlayerTextDrawBackgroundColor(playerid, pData[playerid][pText][3], 255);
	PlayerTextDrawFont(playerid, pData[playerid][pText][3], 2);
	PlayerTextDrawLetterSize(playerid, pData[playerid][pText][3], 0.220000, 1.100000);
	PlayerTextDrawColor(playerid, pData[playerid][pText][3], -1);
	PlayerTextDrawSetOutline(playerid, pData[playerid][pText][3], 1);
	PlayerTextDrawSetProportional(playerid, pData[playerid][pText][3], 1);

	pData[playerid][pText][4] = CreatePlayerTextDraw(playerid, 577.000000, 65.500000, "100");
	PlayerTextDrawAlignment(playerid, pData[playerid][pText][4], 2);
	PlayerTextDrawBackgroundColor(playerid, pData[playerid][pText][4], 255);
	PlayerTextDrawFont(playerid, pData[playerid][pText][4], 2);
	PlayerTextDrawLetterSize(playerid, pData[playerid][pText][4], 0.220000, 1.100000);
	PlayerTextDrawColor(playerid, pData[playerid][pText][4], -1);
	PlayerTextDrawSetOutline(playerid, pData[playerid][pText][4], 1);
	PlayerTextDrawSetProportional(playerid, pData[playerid][pText][4], 1);

	// Ammo notification
	pData[playerid][pText][5] = CreatePlayerTextDraw(playerid, 521.000000, 63.000000, "30");
	PlayerTextDrawAlignment(playerid, pData[playerid][pText][5], 2);
	PlayerTextDrawBackgroundColor(playerid, pData[playerid][pText][5], 255);
	PlayerTextDrawFont(playerid, pData[playerid][pText][5], 1);
	PlayerTextDrawLetterSize(playerid, pData[playerid][pText][5], 0.270000, 1.300000);
	PlayerTextDrawColor(playerid, pData[playerid][pText][5], -1446714113);
	PlayerTextDrawSetOutline(playerid, pData[playerid][pText][5], 1);
	PlayerTextDrawSetProportional(playerid, pData[playerid][pText][5], 1);
	Streamer_ToggleIdleUpdate(playerid, true);

	GetPlayerName(playerid, pData[playerid][pUsername], MAX_PLAYER_NAME);

	/*new nametag[128];
	format(nametag, sizeof(nametag), "%s", GetRPName(playerid));
  	pData[playerid][pSpecialTag] = CreateDynamic3DTextLabel(nametag, COLOR_WHITE, 0.0, 0.0, 0.1, 25.0, .attachedplayer = playerid, .testlos = 1);*/

	PlayerLabel[playerid] = CreateDynamic3DTextLabel("", -1, 0.0, 0.0, -1.5, 10, .attachedplayer = playerid, .testlos = 1);
	InjuredLabel[playerid] = CreateDynamic3DTextLabel("", COLOR_DOCTOR, 0.0, 0.0, -0.3, 10, .attachedplayer = playerid, .testlos = 1);

	new string[128];
    format(string, sizeof(string), ""GREEN"[Connected]:"WHITE" [%d]"YELLOW"%s"WHITE" has joined. IP: "GREEN"%s"WHITE" "YELLOW"(%s)", playerid, GetRPName(playerid), GetPlayerIP(playerid), IsPlayerAndroid(playerid) ? ("Mobile") : ("PC/Desktop"));
	SendAdminMessage(COLOR_WHITE, string);

	gConnections++;
    SaveServerInfo();
	return 1;
}

IsOnlineAdmin()
{
    new count;
    foreach(new i : Player)
	{
	    if(pData[i][pAdmin] > 0)
		{
            count++;
        }
    }
    return count;
}

ShowLoginRegister(playerid)
{
	for(new i = 0; i < 15; i ++)
	{
		new motd[128], oa[128], op[64], pr[128];
		PlayerTextDrawShow(playerid, RegisterLoginTD[playerid][i]);
		PlayerTextDrawSetString(playerid, RegisterLoginTD[playerid][7], SERVER_NAME);
		PlayerTextDrawSetString(playerid, RegisterLoginTD[playerid][8], VERSION);
		format(motd, sizeof(motd), "MOTD: %s", gMOTD);
		PlayerTextDrawSetString(playerid, RegisterLoginTD[playerid][10], motd);
		format(oa, sizeof(oa), "Online Admins:               %i", IsOnlineAdmin());
		PlayerTextDrawSetString(playerid, RegisterLoginTD[playerid][13], op); // Online Admins
		format(op, sizeof(op), "Online Players:               %i", Iter_Count(Player));
		PlayerTextDrawSetString(playerid, RegisterLoginTD[playerid][12], op); // Online Players
		format(pr, sizeof(pr), "Player Record:               %i", gPlayerRecord);
		PlayerTextDrawSetString(playerid, RegisterLoginTD[playerid][14], pr); // Player Record
	}
}

HideLoginRegister(playerid)
{
	for(new i = 0; i < 15; i ++)
	{
		PlayerTextDrawHide(playerid, RegisterLoginTD[playerid][i]);
	}
}

public OnPlayerDisconnect(playerid, reason)
{
	VC_OnPlayerDisconnect(playerid);
	GPS_OnPlayerDisconnect(playerid);

	new string[256];
	format(string, sizeof(string), "**[DISCONNECTION] <@%s> has disconnected to the server.**", pData[playerid][pDiscordID]);
	DCC_SendChannelMessage(commandChannel, string);

	SavePlayerVariables(playerid);
	ResetPlayerVariables(playerid);
    return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
	new rows = cache_get_row_count(connectionID);
    if(pData[playerid][pKicked]) return 0;
    if(IsPlayerNPC(playerid)) return 1;

	if(!pData[playerid][pLogged])
	{
	    ClearChat(playerid);
    	for(new i = 0; i < 5; i ++)
		{
		    SCM(playerid, -1, " ");
		}

		TogglePlayerSpectating(playerid, 1);
		SetPlayerColor(playerid, 0xFFFFFF00);

		// Due to a SA-MP bug, you can't apply camera coordinates directly after enabling spectator mode (to hide HUD).
		// In this case we'll use a timer to defer this action.
  		SetTimerEx("ShowMainMenuCamera", 2000, false, "i", playerid);
		if(rows)
		{
			ShowNoticeGUIFrame(playerid, 3);
		}
		else
		{
			ShowNoticeGUIFrame(playerid, 1);
		}
	}

	return 1;
}
public OnPlayerSpawn(playerid)
{
	new string[256];

    TextDrawShowForPlayer(playerid, Textdraw2);
    TextDrawHideForPlayer(playerid, TutorialNewbieTD[0]);
    TextDrawHideForPlayer(playerid, TutorialNewbieTD[1]);
    TextDrawHideForPlayer(playerid, TutorialNewbieTD[2]);
    if(pData[playerid][pKicked]) return 0;
	PreloadAnims(playerid);
	
	PlayerTextDrawHide(playerid, DyuzeeeTD[playerid][0]);

	if(pData[playerid][pPaintball])
	{
	    SetPlayerInPaintball(playerid);
	}
	else if(pData[playerid][pPaintball2])
	{
	    SetPlayerInPaintball2(playerid);
	}
    else if(pData[playerid][pJailType] == 3)
    {
        new index = random(sizeof(cellSpawns));
		TeleportToCoords(playerid, cellSpawns[index][0], cellSpawns[index][1], cellSpawns[index][2],cellSpawns[index][3], 2,5);
		SetCameraBehindPlayer(playerid);
		SetPlayerArmedWeapon(playerid, 0);
		TogglePlayerControllable(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid, 0);
	}
    else if(pData[playerid][pBedType] == 1)
    {
		new rand = random(sizeof(hospitalspawns));
		SetFreezePos(playerid, hospitalspawns[rand][0], hospitalspawns[rand][1], hospitalspawns[rand][2]);
		SetCameraBehindPlayer(playerid);
		SetPlayerArmedWeapon(playerid, 0);
		TogglePlayerControllable(playerid, 0);
		SetPlayerVirtualWorld(playerid, 2);
		SetPlayerInterior(playerid, 2);
		SetCameraBehindPlayer(playerid);
	}
	else if(pData[playerid][pJailTime] > 0)
	{
	    SetPlayerInJail(playerid);
	    if(pData[playerid][pJailType] == 2)
	    {
	        SM(playerid, COLOR_LIGHTRED, "** You were placed in admin prison by %s, reason: %s", pData[playerid][pPrisonedBy], pData[playerid][pPrisonReason]);
		}
		else
		{
			SCM(playerid, COLOR_LIGHTRED, "** You haven't completed your jail sentence yet.");
		}
	}
	else
	{
	    pData[playerid][pJoinedEvent] = 0;

	    if(pData[playerid][pInjured])
	    {
	        SetPlayerHealth(playerid, 100.0);
	        SetPlayerArmour(playerid, 0.0);
            ApplyAnimation(playerid, "SWEET", "Sweet_injuredloop", 4.1, 0, 0, 0, 1, 0, 1);

	        TextDrawShowForPlayer(playerid, Text:DieText);
	        TextDrawShowForPlayer(playerid, Text:InjuredText);
	        
	        SCM(playerid, COLOR_DOCTOR, "You are wounded and losing blood. /phone for medical attention.");
	        SCM(playerid, COLOR_DOCTOR, "If you wish to accept your death and go to hospital use /accept death.");

			format(string, sizeof(string), "(( Has been injured ))");
			UpdateDynamic3DTextLabelText(InjuredLabel[playerid], COLOR_DOCTOR, string);

			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayerEx", 5000, false, "i", playerid);

            Maskara[playerid] = 0;
	        pData[playerid][pDeathCooldown] = 10;
	    }
	    else if(pData[playerid][pHospital])
	    {
	        if(pData[playerid][pInsurance] == 0)
     	   		SetPlayerInHospital(playerid);
	        else
				SetPlayerInHospital(playerid, .type = pData[playerid][pInsurance]);

			ResetPlayerWeaponsEx(playerid);
	    }
	    else
		{
		    SetPlayerHealth(playerid, pData[playerid][pHealth]);
		    SetScriptArmour(playerid, pData[playerid][pArmor]);
		}

		if(!pData[playerid][pHospital])
		{
		    if(pData[playerid][pDueling] != INVALID_PLAYER_ID)
			{
				pData[pData[playerid][pDueling]][pDueling] = INVALID_PLAYER_ID;
				pData[playerid][pDueling] = INVALID_PLAYER_ID;
			}

			SetPlayerPos(playerid, pData[playerid][pPosX], pData[playerid][pPosY], pData[playerid][pPosZ]);
			SetPlayerFacingAngle(playerid, pData[playerid][pPosA]);
			SetPlayerInterior(playerid, pData[playerid][pInterior]);
	 		SetPlayerVirtualWorld(playerid, pData[playerid][pWorld]);
			SetPlayerWeapons(playerid);

			SetPlayerPos(playerid, pData[playerid][pPosX], pData[playerid][pPosY], pData[playerid][pPosZ]);
			SetPlayerFacingAngle(playerid, pData[playerid][pPosA]);
			SetPlayerInterior(playerid, pData[playerid][pInterior]);
	 		SetPlayerVirtualWorld(playerid, pData[playerid][pWorld]);
			SetPlayerWeapons(playerid);
		}
	}
	SetPlayerSkin(playerid, pData[playerid][pSkin]);
	SetPlayerFightingStyle(playerid, pData[playerid][pFightStyle]);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 998);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 998);
 	SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 998);
	SetPlayerClothing(playerid);
 	///////////////////////////////////////////////////////////////////////
	/*for(new i = 0; i < 2; i++) {
		TextDrawShowForPlayer(playerid, HTTD[i]);
	}*/

	/*for(new i = 0; i < 5; i++) {
		PlayerTextDrawShow(playerid, CCRPMENU[playerid][i]);
	}*/

    PlayerTextDrawShow(playerid, customHUD[playerid][1]);
	/*format(string, sizeof(string), "~y~YOUR ID:~w~%d", playerid);
	PlayerTextDrawSetString(playerid, CCRPMENU[playerid][2], string);*/
	// ATM
	format(string, sizeof(string), "ACCOUNT NAME: %s", GetRPName(playerid));
	PlayerTextDrawSetString(playerid, ATMTD2[playerid][0], string);
	/*#if defined Christmas
	#else
    	PlayerTextDrawShow(playerid, EventTextdraw[playerid]);
	#endif*/
 	/*for(new i = 0; i < 4; i ++)
 	{
 	    TextDrawShowForPlayer(playerid, HTSTD[i]);
    }*/
	
	TextDrawHideForPlayer(playerid, LoginTD[0]);
    TextDrawHideForPlayer(playerid, LoginTD[1]);
	for(new i = 0; i < 6; i ++)
	{
		PlayerTextDrawShow(playerid, HungerandThirstTD[playerid][i]);
	}
	
	/*TextDrawHideForPlayer(playerid, Login[0]);
    TextDrawHideForPlayer(playerid, Login[1]);
    TextDrawHideForPlayer(playerid, Login[2]);
    TextDrawHideForPlayer(playerid, Login[3]);
    TextDrawHideForPlayer(playerid, Login[4]);
    TextDrawHideForPlayer(playerid, Login[5]);
    TextDrawHideForPlayer(playerid, Login[6]);
    TextDrawHideForPlayer(playerid, Login[7]);
    TextDrawHideForPlayer(playerid, Login[8]);*/
	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	if(gettime() - pData[playerid][pLastDeath] < 2)
	{
	    return 1;
	}
	if(pData[playerid][pLogged])
	{
		DesiciveSabong(playerid, killerid);
		if(pData[playerid][pJoinedEvent])
		{
		    foreach(new i : Player)
			{
			    if(pData[i][pJoinedEvent])
			    {
			        if(killerid == INVALID_PLAYER_ID)
			            SM(i, COLOR_LIGHTORANGE, "(( %s died. ))", GetRPName(playerid));
			        else
						SM(i, COLOR_LIGHTORANGE, "(( %s was killed by %s. ))", GetRPName(playerid), GetRPName(killerid));
				}
			}
		}
 		else if(pData[playerid][pPaintball])
		{
		    pbscore1[playerid] -= 5;
		    if(killerid != INVALID_PLAYER_ID && killerid != playerid) pbscore1[killerid] += 5;
		    foreach(new i : Player)
			{
			    if(pData[i][pPaintball])
			    {
			        if(killerid == INVALID_PLAYER_ID)
			            SM(i, COLOR_LIGHTORANGE, "(( %s died. ))", GetRPName(playerid));
			        else
						SM(i, COLOR_LIGHTORANGE, "(( %s was killed by %s. ))", GetRPName(playerid), GetRPName(killerid));
				}
			}
		}
 		else if(pData[playerid][pPaintball2])
		{
		    pbscore2[playerid] -= 5;
		    if(killerid != INVALID_PLAYER_ID && killerid != playerid) pbscore2[killerid] += 5;
		    foreach(new i : Player)
			{
			    if(pData[i][pPaintball2])
			    {
			        if(killerid == INVALID_PLAYER_ID)
			            SM(i, COLOR_LIGHTORANGE, "(( %s died. ))", GetRPName(playerid));
			        else
						SM(i, COLOR_LIGHTORANGE, "(( %s was killed by %s. ))", GetRPName(playerid), GetRPName(killerid));
				}
			}
		}
		else if(pData[playerid][pDueling] != INVALID_PLAYER_ID)
		{
			SM(playerid, COLOR_LIGHTORANGE, "(( You lost your fight against %s! ))", GetRPName(pData[playerid][pDueling]));

			if(killerid != INVALID_PLAYER_ID)
		    {
				SM(killerid, COLOR_LIGHTORANGE, "(( You won the fight against %s! ))", GetRPName(playerid));
				SAM(COLOR_LIGHTRED, "AdmCmd: %s has won their fight against %s.", GetRPName(killerid), GetRPName(playerid));
				SetPlayerToSpawn(killerid);
			}
		}
		else
		{
		    if(killerid != INVALID_PLAYER_ID)
			{
			    HandleContract(playerid, killerid);
			}
		    if(!pData[playerid][pAdminDuty] && pData[playerid][pJailType] == 0)
		    {
			    if(pData[playerid][pInjured] == 0)
				{
				    ResetPlayer(playerid);
				    pData[playerid][pInjured] = 1;
					foreach(new i : Player)
					{
					    if(GetFactionType(i) == FACTION_MEDIC)
					    {
					    	SM(i, COLOR_DISPATCH, "Beacon %s (%i) is in need of immediate medical assistance.", GetRPName(playerid), playerid);
						}
					}
				}
				else
				{
					//Dyuze(playerid, "Wasted", "You died.");


					pData[playerid][pInjured] = 0;
					pData[playerid][pHospital] = 1;
					if(pData[playerid][pAcceptedEMS] != INVALID_PLAYER_ID)
					{
						SM(pData[playerid][pAcceptedEMS], COLOR_YELLOW, "Your patient %s has bled out.", GetRPName(playerid));
                        pData[playerid][pAcceptedEMS] = INVALID_PLAYER_ID;
					}
				}
			}
			else
			{
			    pData[playerid][pHealth] = 32767.0;
			}

			if(killerid != INVALID_PLAYER_ID)
			{
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO kills VALUES(null, %i, %i, '%s', '%s', '%s', NOW())", pData[killerid][pID], pData[playerid][pID], GetPlayerNameEx(killerid), GetPlayerNameEx(playerid), GetDeathReason(reason));
			    mysql_tquery(connectionID, queryBuffer);
			}

			GetPlayerPos(playerid, pData[playerid][pPosX], pData[playerid][pPosY], pData[playerid][pPosZ]);
	        GetPlayerFacingAngle(playerid, pData[playerid][pPosA]);

	        pData[playerid][pInterior] = GetPlayerInterior(playerid);
	        pData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
		}
	}

	if(pData[playerid][pCallLine] != INVALID_PLAYER_ID)
	{
	    HangupCall(pData[playerid][pCallLine], HANGUP_DROPPED);
	}

	if(reason == 50 && killerid != INVALID_PLAYER_ID)
	{
	    SAM(COLOR_YELLOW, "AdmWarning: %s[%i] was helibladed by %s[%i].", GetRPName(playerid), playerid, GetRPName(killerid), killerid);
	}
	pData[playerid][pLastDeath] = gettime();
 	foreach(new i : Player)
	{
  		if(pData[i][pAdmin])
		{
    		SendDeathMessageToPlayer(i, killerid, playerid, reason);
    	}
    	if(pData[i][pAdmin] && !pData[playerid][pPaintball] && !pData[playerid][pPaintball2])
		{
    		SendDeathMessageToPlayer(i, killerid, playerid, reason);
    	}
	}
	if(killerid != INVALID_PLAYER_ID)
	{
	    gTotalKills++;
	}

	gTotalDeaths++;
	SaveServerInfo();
	return 1;
}

forward NewRegister(playerid);
public NewRegister(playerid)
{
    if(pData[playerid][pFirstSpawn]) {
		ClearChat(playerid);

		if(!isnull(gServerMOTD))
    	{
    		new string[64];
    		format(string, sizeof(string), "%s", gServerMOTD);
    		Dyuze(playerid, "", string, 5000);
    	}
		// Scripted
		SCM(playerid, COLOR_WHITE, "The Los Santos Government would like to give you a starting funds of $100 in cash. [/redeem refund] to redeem our freebies.");
		SCM(playerid, COLOR_WHITE, "We do highly suggest you purchase a personal vehicle from a local dealer, If you wish to save up cash you may rent a car for a day.");

		// Refund
		SCM(playerid, COLOR_WHITE, "(( Welcome to "SERVER_NAME". Use the {FFFF90}/guide{FFFFFF} command to guide you around the server. ))");
		SCM(playerid, COLOR_WHITE, "(( Use the {FFFF90}/locate{FFFFFF} command to point to locations of jobs, businesses, and common places. ))");
		SCM(playerid, COLOR_WHITE, "(( We are well aware of the script in use, please get to know our community before you pass on any judgement. ))");
		SCM(playerid, COLOR_WHITE, "Welcome to "SVRCLR""SERVER_NAME""WHITE". Make sure to visit our discord for news and updates.");
	
	    StopAudioStreamForPlayer(playerid);
		SetPlayerFacingAngle(playerid, 359.0366);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);

		pData[playerid][pFirstSpawn] = 0;
		//Verification - Stewart
		new code = Random(100000, 999999);
		pData[playerid][pCode] = code;
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET code = %i WHERE uid = %i", code, pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET setup = 0, firstspawn = 0 WHERE uid = %d", pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
    if(ExBJck[playerid] == 1)
	{
	    RemovePlayerAttachedObject(playerid, 7);
        SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "* %s reaches for their seatbelt, and unbuckles it.", GetRPName(playerid));
		SCM(playerid, COLOR_WHITE, "You have taken off your seatbelt.");
	}
	return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
	{
	    new
	        Float:x,
	        Float:y,
	        Float:z;
	    GetPlayerPos(playerid, x, y, z);
	    SetPlayerPos(playerid, x, y, z + 0.5);
	    ClearAnimations(playerid);
	}
	if((!ispassenger) && (pData[playerid][pCuffed] || pData[playerid][pTied] || pData[playerid][pInjured]))
	{
	    new
	        Float:x,
	        Float:y,
	        Float:z;
	    GetPlayerPos(playerid, x, y, z);
	    SetPlayerPos(playerid, x, y, z + 0.5);
	    ClearAnimations(playerid);
	}
	if(!ispassenger)
	{
	    if((courierVehicles[0] <= vehicleid <= courierVehicles[6]) && !PlayerHasJob(playerid, JOB_COURIER))
	    {
	        SCM(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as you are not a Trucker.");
	        ClearAnimations(playerid);
	    }
	    if((pizzaVehicles[0] <= vehicleid <= pizzaVehicles[5]) && !PlayerHasJob(playerid, JOB_FOODPANDA))
	    {
	        SCM(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as you are not a Foodpanda Deliver.");
	        ClearAnimations(playerid);
	    }
		if((towtruck[0] <= vehicleid <= towtruck[2]) && (FactionInfo[pData[playerid][pFaction]][fType] != FACTION_MECHANIC))
	    {
	        SCM(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as you are not a Mechianic.");
	        ClearAnimations(playerid);
	    }
   	    if(IsAGarbageCar(vehicleid) && !PlayerHasJob(playerid, JOB_GARBAGEMAN))
	    {
     		SCM(playerid, COLOR_ERROR, "You cannot operate this vehicle as you are not a Garbage Man.");
	        ClearAnimations(playerid);
		}
	    if((taxiVehicles[0] <= vehicleid <= taxiVehicles[3]) && !PlayerHasJob(playerid, JOB_TAXIDRIVER))
	    {
	        SCM(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as you are not a Taxi Driver.");
	        ClearAnimations(playerid);
	    }
    	if((forkliftVehicles[0] <= vehicleid <= forkliftVehicles[5]) && !PlayerHasJob(playerid, JOB_FORKLIFTER))
	    {
	        SendClientMessage(playerid, COLOR_GREY, "You cannot operate this vehicle as you are not a Forklifter.");
	        ClearAnimations(playerid);
	    }
	    if((testVehicles[0] <= vehicleid <= testVehicles[8]) && !pData[playerid][pDrivingTest])
	    {
	        SCM(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as you are not taking your drivers test.");
	        ClearAnimations(playerid);
	    }
	    /*if(VehicleInfo[vehicleid][vFactionType] != FACTION_NONE && GetFactionType(playerid) != VehicleInfo[vehicleid][vFactionType])
	    {
	        SendClientMessage(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as it doesn't belong to your faction.");
			if(pData[playerid][pDuty] == 0)
            {
 	        	SendClientMessage(playerid, COLOR_SYNTAX, "You're off duty therefore you can't use this vehicle!");
			}   
	        ClearAnimations(playerid);
	    }
     	if(VehicleInfo[vehicleid][vGang] >= 0 && pData[playerid][pGang] != VehicleInfo[vehicleid][vGang])
	    {
	        SendClientMessage(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as it doesn't belong to your gang.");
	        ClearAnimations(playerid);
	    }*/
	    if(VehicleInfo[vehicleid][vJob] >= 0 && pData[playerid][pJob] != VehicleInfo[vehicleid][vJob])
	    {
	        SM(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as you are not a %s.", GetJobName(VehicleInfo[vehicleid][vJob]));
	        ClearAnimations(playerid);
	    }
	}
	ExBJck[playerid] = 0;
	return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{
	GAS_Checkpoints(playerid);
	switch(pData[playerid][pCP])
	{
	    case CHECKPOINT_FOODPANDA:
	    {	
			//new string[32], amount = ((8500 - pData[playerid][pPizzaTime])), tip = 500 + random(50);

            if(gettime() - pData[playerid][pLastPizza] < 15 && pData[playerid][pAdmin] < 2 && !pData[playerid][pKicked])
		    {
		        pData[playerid][pACWarns]++;

		        if(pData[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
		        {
		            SAM(SERVER_COLOR, "AdmWarning: %s[%i] is possibly teleport foodpannda delivering (time: %i).", GetRPName(playerid), playerid, gettime() - pData[playerid][pLastPizza]);
				}
				else
				{
				    SMA(SERVER_COLOR, "AdmCmd: %s was auto-kicked by %s, reason: Teleport foodpannda runs", GetRPName(playerid), SERVER_BOT);
				    Kick(playerid);
				}
		    }
		    
			if(pData[playerid][pCarry] != 2)
				return SCM(playerid, SERVER_COLOR, "Grab the meal from the Wayfarer using "WHITE"'/graborder'"SVRCLR" before entering this checkpoint.");
	       	new string[128];

			new payment = 1000 + random(250);
	        if(DoubleSalary)
	        {
	            new double_pay = payment * Salary;
	            format(string, sizeof(string), "[DOUBLE-SALARY] You earned $%s instead of $%s since the Double Salary is turned on.", number_format(double_pay), number_format(payment));
	            SendClientMessageEx(playerid, COLOR_YELLOW, string);
	            //AddToPaycheck(playerid, double_pay);
				AddToPaycheck(playerid, double_pay);
	        }
	        else
	        {
				AddToPaycheck(playerid, payment);
			}
			//GivePlayerCash(playerid, amount);
			//GivePlayerCash(playerid, tip);

			pData[playerid][pCarrying] = false;
			pData[playerid][pCarry] = 0;
			RemovePlayerAttachedObject(playerid, 1);
			
			pData[playerid][pPizzas] = 0;
			pData[playerid][pPizzaTime] = 0;
			pData[playerid][pCP] = CHECKPOINT_NONE;

			DisablePlayerCheckpoint(playerid);
	    }
   		case CHECKPOINT_FORKLIFTER:
		{
	        if (pData[playerid][pJob] == JOB_FORKLIFTER)
		    {
		        switch (pData[playerid][pJobStage])
				{
				    case 0:
				    {
				        if (IsAForkliftVehicle(GetPlayerVehicleID(playerid)) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				        {
				            new vehicleid = GetPlayerVehicleID(playerid);
							pData[playerid][pJobStage] = 1;
							pData[playerid][pCP] = CHECKPOINT_FORKLIFTER;
				        	SendInfoMessage(playerid, "You have picked up the crate. Drive to the {FF0000}checkpoint{FFFFFF} for further instructions.");
		        			SetPlayerCheckpoint(playerid, 2783.6682, -2417.8679, 13.6347, 3.0);

					        VehicleObject[vehicleid] = CreateDynamicObject(1220, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
							AttachDynamicObjectToVehicle(VehicleObject[vehicleid], vehicleid, 0.0, 0.6, 0.28, 0.0, 0.0, 0.0);
						}
					}
				    case 1:
				    {
				        if (IsAForkliftVehicle(GetPlayerVehicleID(playerid)) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				        {
				            new vehicleid = GetPlayerVehicleID(playerid);
				            switch (random(2))
						    {
		    	                case 0: SetPlayerCheckpoint(playerid, 2790.8264, -2410.4639, 13.6329, 3.0);
		    	                case 1: SetPlayerCheckpoint(playerid, 2790.8264, -2410.4639, 13.6329, 3.0);
							}
							pData[playerid][pCP] = CHECKPOINT_FORKLIFTER;
		                    pData[playerid][pJobStage] = 2;
							SendInfoMessage(playerid, "Stack the cargo on the shelf.");
						    RemovePlayerFromVehicle(playerid);
						    DestroyDynamicObject(VehicleObject[vehicleid]);
						    VehicleObject[vehicleid] = INVALID_OBJECT_ID;
						    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
							SetPlayerAttachedObject(playerid, 5, 1220, 5, 0.184000, 0.330999, 0.112999, -84.099983, -9.500001, 20.700000);
						}
					}
					case 2:
					{
						/*new price = Random(1000, 5000);
						GivePlayerCash(playerid, price);
					    SendInfoMessage(playerid, "You have received {33CC33}$%i{FFFFFF}.", price);*/
					    new string[128];
      					new payment = 350 + random(250);
				        if(DoubleSalary)
				        {
				            new double_pay = payment * Salary;
				            format(string, sizeof(string), "[DOUBLE-SALARY] You earned $%s instead of $%s since the Double Salary is turned on.", number_format(double_pay), number_format(payment));
				            SendClientMessageEx(playerid, COLOR_YELLOW, string);
				            //AddToPaycheck(playerid, double_pay);
							AddToPaycheck(playerid, double_pay);
				        }
				        else
				        {
							AddToPaycheck(playerid, payment);
						}
						SendInfoMessage(playerid, "Get back in your vehicle if you'd like to start working again.");
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
						RemovePlayerAttachedObject(playerid, 5);
						pData[playerid][pJobStage] = 0;
						pData[playerid][pCP] = CHECKPOINT_NONE;
						DisablePlayerCheckpoint(playerid);
						ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 0, 0, 0, 0, 1);
					}
				}
			}
		}
		case CHECKPOINT_LUMBERJACKRUN:
		{
		    if(!IsPlayerInRangeOfPoint(playerid, 6, 2351.5188,-653.9022,128.0547))
		    {// In the case the player finds a way to exploit the checkpoint to different location
                if(IsPlayerAttachedObjectSlotUsed(playerid, 8)) RemovePlayerAttachedObject(playerid, 8);//
				Lumber1[playerid] = 0;
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				DisablePlayerCheckpoint(playerid);
				lumberman[playerid] = false;
				Lumbered[playerid] = 0;
				pData[playerid][pCP] = CHECKPOINT_NONE;
                SendClientMessage(playerid, COLOR_RED, "ERROR: Wrong checkpoint entered. the Lumberjack delivery canceled completely.");
				return 1;
		    }
			new string[128];
			if(GetPVarInt(playerid, "tpLumberJackRunTimer") != 0)
   			{
	    		SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s (ID %d) is possibly teleport Lumber Jack Delivery.", GetPlayerNameEx(playerid), playerid);


				//format(string, sizeof(string), "%s was possibly teleport LumberJack Running.", GetPlayerNameEx(playerid));
   				//AddAutomatedFlag(playerid, string);
		    	// format(string, sizeof(string), "%s (ID %d) is possibly teleport matrunning.", GetPlayerNameEx(playerid), playerid);
		    	// //////////Log("logs/hack.log", string);
		    	//new cutrands;
				//cutrands = random(sizeof(randomcut));
   				if(IsPlayerAttachedObjectSlotUsed(playerid, 8)) RemovePlayerAttachedObject(playerid, 8);//
				Lumber1[playerid] = 0;
				ClearAnimations(playerid);
			 	SetPlayerSkin(playerid, GetPlayerSkin(playerid));
				DisablePlayerCheckpoint(playerid);
				lumberman[playerid] = false;
				Lumbered[playerid] = 0;
				pData[playerid][pCP] = CHECKPOINT_NONE;
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				format(string, sizeof(string), "* Warning! You're marked as Teleport Lumber Jack Delivery!");
				SendClientMessage(playerid, COLOR_RED, string);
			    return 1;
			}
			/*new cutrands;
			cutrands = Random(1000, 4000);
			GivePlayerCash(playerid, cutrands);
			format(string, sizeof(string), "+%d", cutrands);
			GameTextForPlayer(playerid, string, 5000, 1);*/
			new payment = 50 + random(50);
	        if(DoubleSalary)
	        {
	            new double_pay = payment * Salary;
	            format(string, sizeof(string), "[DOUBLE-SALARY] You earned $%s instead of $%s since the Double Salary is turned on.", number_format(double_pay), number_format(payment));
	            SendClientMessageEx(playerid, COLOR_YELLOW, string);
	            //AddToPaycheck(playerid, double_pay);
				AddToPaycheck(playerid, double_pay);
	        }
	        else
	        {
				AddToPaycheck(playerid, payment);
			}
			if(IsPlayerAttachedObjectSlotUsed(playerid, 8)) RemovePlayerAttachedObject(playerid, 8);//
			//pData[playerid][pPaycheckcash] += randomcut[cutrands][0];
			Lumber1[playerid] = 0;
			DisablePlayerCheckpoint(playerid);
			lumberman[playerid] = false;
			Lumbered[playerid] = 0;
			pData[playerid][pCP] = CHECKPOINT_NONE;
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
            ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0, 1);
			return 1;
		}
   		case CHECKPOINT_GARBAGE:
		{
 			if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 408 && GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
			{
			    return SendClientMessage(playerid, COLOR_GREY, "You need to be driving a Trashmaster.");
			}
		    if(pData[playerid][pGarbage] == 1)
		    {
                GameTextForPlayer(playerid, "Loading Garbage....~n~Please wait.", 5000, 3);
                TogglePlayerControllable(playerid, 0);
                SetTimerEx("garbagewait", 5000, false, "i", playerid);
				DisablePlayerCheckpoint(playerid);

				pData[playerid][pGarbage] = 2;
				SetPlayerCheckpoint(playerid, 1138.8413,-1333.5553,13.6871, 5.0);
			}
			if(pData[playerid][pGarbage] == 2)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 5.0, 1138.8413,-1333.5553,13.6871))
			    {
	   				GameTextForPlayer(playerid, "Loading Garbage....~n~Please wait.", 5000, 3);
	                TogglePlayerControllable(playerid, 0);
	                SetTimerEx("garbagewait", 5000, false, "i", playerid);
					DisablePlayerCheckpoint(playerid);

					pData[playerid][pGarbage] = 3;
					SetPlayerCheckpoint(playerid, 2121.7314,-1342.7231,23.9844, 5.0);
				}

			}
			if(pData[playerid][pGarbage] == 3)
			{
   				if(IsPlayerInRangeOfPoint(playerid, 5.0, 2121.7314,-1342.7231,23.9844))
			    {
	                GameTextForPlayer(playerid, "Loading Garbage....~n~Please wait..", 5000, 3);
	                TogglePlayerControllable(playerid, 0);
	                SetTimerEx("garbagewait", 5000, false, "i", playerid);
					DisablePlayerCheckpoint(playerid);

					pData[playerid][pGarbage] = 4;
					SetPlayerCheckpoint(playerid, 1920.7303,-1791.3890,13.3828, 5.0);
				}
			}
			if(pData[playerid][pGarbage] == 4)
			{
   				if(IsPlayerInRangeOfPoint(playerid, 5.0, 1920.7303,-1791.3890,13.3828))
			    {
	                GameTextForPlayer(playerid, "Loading Garbage....~n~Please wait.", 5000, 3);
	                TogglePlayerControllable(playerid, 0);
	                SetTimerEx("garbagewait", 5000, false, "i", playerid);
					DisablePlayerCheckpoint(playerid);

					pData[playerid][pGarbage] = 5;
					SetPlayerCheckpoint(playerid, 2444.9341,-2090.0244,13.5469, 5.0);
				}

			}
			if(pData[playerid][pGarbage] == 5)
			{
   				if(IsPlayerInRangeOfPoint(playerid, 5.0, 2444.9341,-2090.0244,13.5469))
			    {
					GameTextForPlayer(playerid, "Unloading Garbage....~n~Please wait.", 5000, 3);
					pData[playerid][pGarbage] = 0;
					DisablePlayerCheckpoint(playerid);

					/*new amount = 5500 + random(500);
					pData[playerid][pCash] = pData[playerid][pCash] + amount;
					SendClientMessageEx(playerid, COLOR_AQUA, "Paycheck: You've earned $%i for your time working as a garbage man.", amount);*/
					
					new string[128];
					new payment = 750 + random(300);
			        if(DoubleSalary)
			        {
			            new double_pay = payment * Salary;
			            format(string, sizeof(string), "[DOUBLE-SALARY] You earned $%s instead of $%s since the Double Salary is turned on.", number_format(double_pay), number_format(payment));
			            SendClientMessageEx(playerid, COLOR_YELLOW, string);
			            AddToPaycheck(playerid, double_pay);
			        }
			        else
			        {
						AddToPaycheck(playerid, payment);
					}

					pData[playerid][pCP] = CHECKPOINT_NONE;

	   				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cash = %i WHERE uid = %i", pData[playerid][pCash], pData[playerid][pID]);
					mysql_tquery(connectionID, queryBuffer);
				}
			}
		}
	    case CHECKPOINT_TEST:
	    {
	        pData[playerid][pTestCP]++;

	        if(pData[playerid][pTestCP] < sizeof(drivingTestCPs))
	        {
	            if(!(testVehicles[0] <= GetPlayerVehicleID(playerid) <= testVehicles[8]))
	            {
					SCM(playerid, COLOR_LIGHTRED, "** You failed the test as you exited your vehicle.");
	                DisablePlayerCheckpoint(playerid);
		    		SetVehicleToRespawn(pData[playerid][pTestVehicle]);

				    pData[playerid][pCP] = CHECKPOINT_NONE;
		            pData[playerid][pDrivingTest] = 0;
				}
				else
				{
		            SetPlayerCheckpoint(playerid, drivingTestCPs[pData[playerid][pTestCP]][0], drivingTestCPs[pData[playerid][pTestCP]][1], drivingTestCPs[pData[playerid][pTestCP]][2], 3.0);
				}
			}
			else
			{
			    new
			        Float:health;

				GetVehicleHealth(pData[playerid][pTestVehicle], health);

			    if(health < 900.0)
			    {
					SCM(playerid, COLOR_SYNTAX, "Failed.");
			        SCM(playerid, COLOR_LIGHTRED, "** You brought back the vehicle damaged and therefore failed your test.");
			    }
			    else
			    {
                   	SCM(playerid, COLOR_SYNTAX, "Passed.");
			        SCM(playerid, COLOR_AQUA, "You successfully passed your drivers test and received your license!");

			        GivePlayerCash(playerid, -2500);
			        pData[playerid][pCarLicense] = 1;
					pData[playerid][pCarLicenseTime] = gettime() + 1209600;

			        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET carlicense = 1, carlicensetime = 1209600 WHERE uid = %i", pData[playerid][pID]);
			        mysql_tquery(connectionID, queryBuffer);
			    }

	    		DisablePlayerCheckpoint(playerid);
	    		SetVehicleToRespawn(pData[playerid][pTestVehicle]);

			    pData[playerid][pCP] = CHECKPOINT_NONE;
	            pData[playerid][pDrivingTest] = 0;
	        }
		}
		case CHECKPOINT_PACKAGE:
		{
			new string[128];
			new amount = random(50) + 50;
			GivePlayerCash(playerid, amount);
			format(string, sizeof(string), "You have earned $%i by packaging.", amount);
			SendClientMessageEx(playerid, COLOR_YELLOW, string);

			ApplyAnimation(playerid, "CARRY", "putdwn", 3.0, 0, 0, 0, 0, 0);
			RemovePlayerAttachedObject(playerid, 9);
			ClearAnimations(playerid, 1);
			DisablePlayerCheckpoint(playerid);
		}
	    case CHECKPOINT_MINING:
	    {
	        new cost, string[128];

	        if(pData[playerid][pMiningRock] == 1)
			{
	            cost = 200 + random(200);
			}
			else if(pData[playerid][pMiningRock] == 2)
			{
			    cost = 320 + random(300);
			}
			else if(pData[playerid][pMiningRock] == 3) // Musgravite
			{
			    cost = 400 + random(100);
			}
			else if(pData[playerid][pMiningRock] == 4) // Gold
			{
			    cost = 500 + random(100);
			}
			else if(pData[playerid][pMiningRock] == 5) // Diamond
			{
			    cost = 10000 + random(200);
			    pData[playerid][pDiamonds] ++;
   				pData[playerid][pRareTime] = 3600;
				SCM(playerid, COLOR_WHITE, "BINGO!, It's a freakin' diamond, we're going to be damn rich!");
				SCM(playerid, COLOR_WHITE, "Boss: You know what? since you found it, you should get to keep it.");
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i WHERE uid = %i", pData[playerid][pDiamonds], pData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);
			}

			/*GivePlayerCash(playerid, cost);

			SM(playerid, COLOR_AQUA, "You have earned $%i  for your mined rock.", cost);*/
			if(DoubleSalary)
			{
				new double_pay = cost * Salary;
				format(string, sizeof(string), "[DOUBLE-SALARY] You earned $%s instead of $%s since the Double Salary is turned on.", number_format(double_pay), number_format(cost));
				SendClientMessageEx(playerid, COLOR_YELLOW, string);
				AddToPaycheck(playerid, double_pay);
				format(string, sizeof(string), "~g~+$%i", double_pay);
				GameTextForPlayer(playerid, string, 5000, 1);
			}
			else
			{
				format(string, sizeof(string), "  You have earned $%i for mining rocks.", cost);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				GivePlayerCash(playerid, cost);
			}
			ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 0, 0, 0, 0, 1);

			format(string, sizeof(string), "~g~+$%i", cost);
			GameTextForPlayer(playerid, string, 5000, 1);

			pData[playerid][pMiningRock] = 0;
			pData[playerid][pCP] = CHECKPOINT_NONE;

			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			RemovePlayerAttachedObject(playerid, 9);

			DisablePlayerCheckpoint(playerid);
	    }
   	    case CHECKPOINT_CONSTRUCTION:
	    {
	        new cost, string[128];

	        if(pData[playerid][pConstruction] == 1)
			{
	            cost = 50 + random(100);
			}
			else if(pData[playerid][pConstruction] == 2)
			{
			    cost = 50 + random(100);
			}
			else if(pData[playerid][pConstruction] == 3) // Musgravite
			{
			    cost = 1000 + random(100);
			}
			else if(pData[playerid][pConstruction] == 4) // Gold
			{
			    cost = 150 + random(100);
			}
			else if(pData[playerid][pConstruction] == 5) // Diamond
			{
			    cost = 150 + random(100);
			}
			/*GivePlayerCash(playerid, cost);

			SM(playerid, COLOR_AQUA, "You have earned $%i  for your mined rock.", cost);*/
			if(DoubleSalary)
			{
				new double_pay = cost * Salary;
				format(string, sizeof(string), "[DOUBLE-SALARY] You earned $%s instead of $%s since the Double Salary is turned on.", number_format(double_pay), number_format(cost));
				SendClientMessageEx(playerid, COLOR_YELLOW, string);
				AddToPaycheck(playerid, double_pay);
				format(string, sizeof(string), "~g~+$%i", double_pay);
				GameTextForPlayer(playerid, string, 5000, 1);
			}
			else
			{
				format(string, sizeof(string), "  You have earned $%i.", cost);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				GivePlayerCash(playerid, cost);
			}
			ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 0, 0, 0, 0, 1);

			format(string, sizeof(string), "~g~+$%i", cost);
			GameTextForPlayer(playerid, string, 5000, 1);

			pData[playerid][pConstruction] = 0;
			pData[playerid][pCP] = CHECKPOINT_NONE;

			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			RemovePlayerAttachedObject(playerid, 9);

			DisablePlayerCheckpoint(playerid);
	    }
	    case CHECKPOINT_MATS:
	    {
	        if((pData[playerid][pSmuggleMats] == 1 && IsPlayerInRangeOfPoint(playerid, 3.0, 2173.2129, -2264.1548, 13.3467)) || (pData[playerid][pSmuggleMats] == 2 && IsPlayerInRangeOfPoint(playerid, 3.0, 2288.0918, -1105.6555, 37.9766)))
			{
			    if(gettime() - pData[playerid][pSmuggleTime] < 20 && pData[playerid][pAdmin] < 2 && !pData[playerid][pKicked])
			    {
			        pData[playerid][pACWarns]++;

			        if(pData[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
			        {
			            SAM(COLOR_YELLOW, "AdmWarning: %s[%i] is possibly teleport matrunning (time: %i).", GetRPName(playerid), playerid, gettime() - pData[playerid][pSmuggleTime]);
					}
					else
					{
					    SMA(COLOR_LIGHTRED, "AdmCmd: %s was auto-kicked by %s, reason: Teleport matrun", GetRPName(playerid), SERVER_BOT);
					    //BanPlayer(playerid, SERVER_BOT, "Teleport matrun");
					    Kick(playerid);
					}
			    }

                if(pData[playerid][pMaterials] + 150 > GetPlayerCapacity(CAPACITY_MATERIALS))
				{
	    			return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i materials. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pMaterials], GetPlayerCapacity(CAPACITY_MATERIALS));
				}

			    if(pData[playerid][pSmuggleMats] == 1) {
			        AddPointMoney(POINT_MATFACTORY1, 75);
			    } else {
			        AddPointMoney(POINT_MATFACTORY2, 75);
			    }

			    if(pData[playerid][pGang] >= 0)
			    {
			        GiveGangPoints(pData[playerid][pGang], 1);
				}

		 	   	pData[playerid][pMaterials] += 150;
		    	pData[playerid][pSmuggleMats] = 0;
		    	pData[playerid][pCP] = CHECKPOINT_NONE;

			    SCM(playerid, COLOR_AQUA, "You have dropped off your load and collected 150 materials from the depot.");
		    	DisablePlayerCheckpoint(playerid);

		    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", pData[playerid][pMaterials], pData[playerid][pID]);
		    	mysql_tquery(connectionID, queryBuffer);
			}
	    }
	    case CHECKPOINT_DRUGS:
	    {
	        new amount = 105 + (GetJobLevel(playerid, JOB_DRUGDEALER) * 10);

			switch(pData[playerid][pSmuggleDrugs])
			{
				case 1:
				{
				    if(!IsPlayerInRangeOfPoint(playerid, 5.0, 2167.7371, -1670.6298, 15.0804))
				    {
			    	    return SCM(playerid, COLOR_SYNTAX, "You aren't at the correct dropoff spot.");
					}
					if(gSeedsStock >= 1000)
					{
					    return SCM(playerid, COLOR_SYNTAX, "The drug den does not need anymore seeds.");
					}

					gSeedsStock += 10;

					GivePlayerCash(playerid, amount);
				    SM(playerid, COLOR_AQUA, "You have earned $%i for your delivery of marijuana seeds.", amount);
				}
				/*case 2:
				{
				    if(!IsPlayerInRangeOfPoint(playerid, 5.0, 2349.7727, -1169.6304, 28.0243))
				    {
			    	    return SCM(playerid, COLOR_SYNTAX, "You aren't at the correct dropoff spot.");
					}
					if(gCrackStock >= 1000)
					{
					    return SCM(playerid, COLOR_SYNTAX, "The crack house does not need anymore Crack.");
					}

					gCrackStock += 10;

					GivePlayerCash(playerid, amount);
				    SM(playerid, COLOR_AQUA, "You have earned $%i for your delivery of Crack.", amount);
				}*/
				case 3:
				{
				    if(!IsPlayerInRangeOfPoint(playerid, 5.0, 2167.7371, -1670.6298, 15.0804))
				    {
			    	    return SCM(playerid, COLOR_SYNTAX, "You aren't at the correct dropoff spot.");
					}
					if(gEphedrineStock >= 1000)
					{
					    return SCM(playerid, COLOR_SYNTAX, "The drug den does not need anymore ephedrine.");
					}

					gEphedrineStock += 10;

					GivePlayerCash(playerid, amount);
				    SM(playerid, COLOR_AQUA, "You have earned $%i for your delivery of raw ephedrine.", amount);
				}
			}

			if(gettime() - pData[playerid][pSmuggleTime] < 30 && pData[playerid][pAdmin] < 2)
		    {
		        pData[playerid][pACWarns]++;

		        if(pData[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
		        {
		            SAM(COLOR_YELLOW, "AdmWarning: %s[%i] is possibly teleport drug smuggling (time: %i).", GetRPName(playerid), playerid, gettime() - pData[playerid][pSmuggleTime]);
				}
				else if(!pData[playerid][pKicked])
				{
				    SMA(COLOR_LIGHTRED, "AdmCmd: %s was auto-kicked by %s, reason: Teleport drug smuggling", GetRPName(playerid), SERVER_BOT);
				    //BanPlayer(playerid, SERVER_BOT, "Teleport drug smuggling");
				    Kick(playerid);
				}
		    }
		    else
		    {
		        if(pData[playerid][pGang] >= 0)
		    	{
		     		GiveGangPoints(pData[playerid][pGang], 1);
				}
			}

			pData[playerid][pSmuggleDrugs] = 0;
			pData[playerid][pCP] = CHECKPOINT_NONE;

			DisablePlayerCheckpoint(playerid);
			IncreaseJobSkill(playerid, JOB_DRUGDEALER);

	    	if(GetJobLevel(playerid, JOB_DRUGDEALER) < 5)
	    	{
	        	if(pData[playerid][pSmugglerSkill] < 25) {
	        		SM(playerid, COLOR_YELLOW, "You need to smuggle %i more packages in order to level up.", 25 - pData[playerid][pSmugglerSkill]);
	        	} else if(pData[playerid][pSmugglerSkill] < 50) {
	        		SM(playerid, COLOR_YELLOW, "You need to smuggle %i more packages in order to level up.", 50 - pData[playerid][pSmugglerSkill]);
	       		} else if(pData[playerid][pSmugglerSkill] < 75) {
	        		SM(playerid, COLOR_YELLOW, "You need to smuggle %i more packages in order to level up.", 75 - pData[playerid][pSmugglerSkill]);
            	} else if(pData[playerid][pSmugglerSkill] < 100) {
	        		SM(playerid, COLOR_YELLOW, "You need to smuggle %i more packages in order to level up.", 100 - pData[playerid][pSmugglerSkill]);
				}
			}
			else
			{
				//
			}
	    }
	    case CHECKPOINT_HOUSE:
	    {
            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has entered the house.", GetRPName(playerid));
			SetPlayerPos(playerid, HouseInfo[pData[playerid][pInviteHouse]][hIntX], HouseInfo[pData[playerid][pInviteHouse]][hIntY], HouseInfo[pData[playerid][pInviteHouse]][hIntZ]);
			SetPlayerFacingAngle(playerid, HouseInfo[pData[playerid][pInviteHouse]][hIntA]);
			SetPlayerInterior(playerid, HouseInfo[pData[playerid][pInviteHouse]][hInterior]);
			SetPlayerVirtualWorld(playerid, HouseInfo[pData[playerid][pInviteHouse]][hWorld]);
			SetCameraBehindPlayer(playerid);

			pData[playerid][pCP] = CHECKPOINT_NONE;
	        DisablePlayerCheckpoint(playerid);
	    }
	    case CHECKPOINT_ROBBERY:
	    {
	        if(IsPlayerInBankRobbery(playerid) && pData[playerid][pRobCash] > 0)
	        {
				if(pData[playerid][pGang] >= 0)
				{
					GiveGangPoints(pData[playerid][pGang], 50);
				}
				RobberyInfo[rStolen] += pData[playerid][pRobCash];
				pData[playerid][pDirtyCash] += pData[playerid][pRobCash];
				gVault -= pData[playerid][pRobCash];
				SaveServerInfo();

				SM(playerid, COLOR_AQUA, "You have earned $%i dirty cash for successfully completing the bank robbery.", pData[playerid][pRobCash]);
				SCM(playerid, COLOR_SYNTAX, "You must wash your dirty money to convert it into real cash.");
				RemoveFromBankRobbery(playerid);
			}

			pData[playerid][pCP] = CHECKPOINT_NONE;
			DisablePlayerCheckpoint(playerid);
	    }
   	    case CHECKPOINT_ROBBERYBIZ:
	    {
			new businessid = pData[playerid][pRobbingBiz];

			if(pData[playerid][pGang] >= 0)
			{
				GiveGangPoints(pData[playerid][pGang], 50);
			}

			pData[playerid][pDirtyCash] += pData[playerid][pRobCash];
			BusinessInfo[businessid][bCash] -= pData[playerid][pRobCash];

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
			mysql_tquery(connectionID, queryBuffer);

			SM(playerid, COLOR_AQUA, "You have earned $%i dirty cash for successfully completing the business robbery.", pData[playerid][pRobCash]);

			BusinessInfo[businessid][bRobbed] = 3;
			BusinessInfo[businessid][bRobbing] = 0;
			ReloadBusiness(businessid);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET robbed = %i, robbing = %i WHERE id = %i", BusinessInfo[businessid][bRobbed], BusinessInfo[businessid][bRobbing], BusinessInfo[businessid][bID]);
 			mysql_tquery(connectionID, queryBuffer);

			pData[playerid][pRobCash] = 0;
			pData[playerid][pRobbingBiz] = -1;
			pData[playerid][pCP] = CHECKPOINT_NONE;
			DisablePlayerCheckpoint(playerid);
			SavePlayerVariables(playerid);
		}
   	    case CHECKPOINT_ROBBERYHOUSE:
	    {
			new houseid = pData[playerid][pRobbingHouse];

			if(pData[playerid][pGang] >= 0)
			{
				GiveGangPoints(pData[playerid][pGang], 50);
			}

			pData[playerid][pDirtyCash] += pData[playerid][pRobCash];
			HouseInfo[houseid][hCash] -= pData[playerid][pRobCash];

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET cash = %i WHERE id = %i", HouseInfo[houseid][hCash], HouseInfo[houseid][hID]);
			mysql_tquery(connectionID, queryBuffer);

			SM(playerid, COLOR_AQUA, "You have earned $%i dirty cash for successfully completing the house robbery.", pData[playerid][pRobCash]);

			HouseInfo[houseid][hRobbed] = 3;
			HouseInfo[houseid][hRobbing] = 0;
			ReloadHouse(houseid);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET robbed = %i, robbing = %i WHERE id = %i", HouseInfo[houseid][hRobbed], HouseInfo[houseid][hRobbing], HouseInfo[houseid][hID]);
 			mysql_tquery(connectionID, queryBuffer);

			pData[playerid][pRobCash] = 0;
			pData[playerid][pRobbingHouse] = -1;
			pData[playerid][pCP] = CHECKPOINT_NONE;
			DisablePlayerCheckpoint(playerid);
			SavePlayerVariables(playerid);
		}

	    default:
	    {
	        pData[playerid][pCP] = CHECKPOINT_NONE;
	        DisablePlayerCheckpoint(playerid);
	    }
	}

	return 1;
}

public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{

	if(gParachutes[0] <= pickupid <= gParachutes[1]) {
	    GiveWeapon(playerid, 46);
	}

	return 1;
}

/*ProcessDamage(playerid, issuerid, weaponid, Float:amount, bool:fmj = false)
{
	new
		Float:health,
		Float:armour;

	GetPlayerHealth(playerid, health);
	GetPlayerArmour(playerid, armour);

	if(armour > 0.0)
	{
	    if(armour >= amount)
	    {
	        armour -= amount;
		}
		else
		{
		    health -= amount - armour;
		    armour = 0;
	    }
	}
	else if(health > 0.0)
	{
	    if(health >= amount)
	    {
	        health -= amount;
		}
		else
		{
		    health = 0;
	    }
	}

	if((fmj) && health >= amount / 2)
	{
	    health -= amount / 2;
	}

	SetPlayerHealth(playerid, health < 0.0 ? 0.0 : health);
	SetPlayerArmour(playerid, armour < 0.0 ? 0.0 : armour);

	if(health <= 0.0)
	{
	    CallLocalFunction("OnPlayerDeath", "iii", playerid, issuerid, weaponid);
	}
}*/
public OnPlayerDamage(&playerid, &Float:amount, &issuerid, &weapon, &bodypart)
{
	if(playerid != INVALID_PLAYER_ID && issuerid != INVALID_PLAYER_ID)
	{
		if((22 <= weapon <= 36) && !PlayerHasWeapon(issuerid, weapon, true) && pData[issuerid][pAdmin] < 2 && !pData[issuerid][pKicked])
		{
		    new
		        string[48];

			format(string, sizeof(string), "Weapon hacks (%s)", GetWeaponNameEx(weapon));

			SMA(COLOR_LIGHTRED, "AdmCmd: %s was auto-kicked by %s, reason: %s", GetRPName(issuerid), SERVER_BOT, string);
			//BanPlayer(issuerid, SERVER_BOT, string);
			Kick(playerid);
		    return 0;
		}
		if((weapon == 23) && ((IsLawEnforcement(issuerid) || GetFactionType(issuerid) == FACTION_GOVERNMENT) && pData[issuerid][pTazer] && GetPlayerState(issuerid) == PLAYER_STATE_ONFOOT) && amount > 5.0)
		{
			if(pData[playerid][pAdminDuty])
			{
			    SCM(issuerid, COLOR_SYNTAX, "You can't taze an administrator currently on duty.");
				return 0;
			}
			if(pData[playerid][pTazedTime])
			{
			    SCM(issuerid, COLOR_SYNTAX, "This player has already been tazed.");
			    return 0;
			}
			if(!IsPlayerInRangeOfPlayer(issuerid, playerid, 10.0))
			{
			    SCM(issuerid, COLOR_SYNTAX, "You can't taze that player. They are too far from you.");
			    return 0;
			}
			if((22 <= GetPlayerWeapon(playerid) <= 38) && IsPlayerAimingEx(playerid))
			{
	  			SCM(issuerid, COLOR_SYNTAX, "Rush-tazing is forbidden. This means tazing a player who is aiming a gun at you.");
	  			return 0;
			}
			if(IsPlayerInAnyVehicle(playerid))
			{
			    SCM(issuerid, COLOR_SYNTAX, "You can't taze a player who is in a vehicle.");
			    return 0;
			}

			pData[playerid][pTazedTime] = 10;
			TogglePlayerControllable(playerid, 0);

			ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.1, 0, 0, 0, 1, 0, 1);
            PlayerPlaySound(playerid, 6003, 0.0, 0.0, 0.0);
			GameTextForPlayer(playerid, "~r~Tazed", 5000, 3);

			SendProximityMessage(issuerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s aims their tazer full of electricity at %s and stuns them.", GetRPName(issuerid), GetRPName(playerid));
			SM(playerid, COLOR_AQUA, "You've been {0080FF}stunned{CCFFFF} with electricity by %s's tazer.", GetRPName(issuerid));
			SM(issuerid, COLOR_AQUA, "You have stunned %s with electricity. They are disabled for 10 seconds.", GetRPName(playerid));
			return 0;
		}
		if((weapon == 25) && ((IsLawEnforcement(issuerid) || GetFactionType(issuerid) == FACTION_GOVERNMENT) && pData[issuerid][pBeanbag] && GetPlayerState(issuerid) == PLAYER_STATE_ONFOOT) && amount > 5.0)
		{
			if(pData[playerid][pAdminDuty])
			{
			    SCM(issuerid, COLOR_SYNTAX, "You can't taze an administrator currently on duty.");
				return 0;
			}
			if(pData[playerid][pBeanbagTime])
			{
			    SCM(issuerid, COLOR_SYNTAX, "This player has already been stunned.");
			    return 0;
			}
			if(!IsPlayerInRangeOfPlayer(issuerid, playerid, 10.0))
			{
			    SCM(issuerid, COLOR_SYNTAX, "You can't stunned that player. They are too far from you.");
			    return 0;
			}
			if((22 <= GetPlayerWeapon(playerid) <= 38) && IsPlayerAimingEx(playerid))
			{
	  			SCM(issuerid, COLOR_SYNTAX, "Rush-tazing is forbidden. This means tazing a player who is aiming a gun at you.");
	  			return 0;
			}

			pData[playerid][pBeanbagTime] = 10;
			TogglePlayerControllable(playerid, 0);

			ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.1, 0, 0, 0, 1, 0, 1);
            PlayerPlaySound(playerid, 6003, 0.0, 0.0, 0.0);
			GameTextForPlayer(playerid, "~r~Stunned!", 5000, 3);

			SendProximityMessage(issuerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s aims their rubber bullets at %s and stuns them.", GetRPName(issuerid), GetRPName(playerid));
			SM(playerid, COLOR_AQUA, "You've been {0080FF}stunned{CCFFFF} with rubber bullets by %s.", GetRPName(issuerid));
			SM(issuerid, COLOR_AQUA, "You have stunned %s with electricity. They are disabled for 10 seconds.", GetRPName(playerid));
			return 0;
		}

		PlayerPlaySound(issuerid, 17802, 0.0, 0.0, 0.0);
		if(pData[playerid][pAFK])
		{
		    GameTextForPlayer(issuerid, "That player is AFK!", 5000, 3);
		    return 0;
		}
		if(pData[issuerid][pFreezeTimer] != -1)
		{
		    pData[issuerid][pFreezeTimer] = -1;
		}
		if(IsPlayerInRangeOfPoint(playerid, 150.0, 1144.7922, 2620.3928, 1049.8481) && !IsLawEnforcement(issuerid))
		{
		    new Float:iPos[3];
		    GameTextForPlayer(issuerid, "~r~Shooting ~w~inside the ~g~Casino ~w~is ~r~prohibited.", 5000, 3);
			GetPlayerPos(playerid, iPos[0], iPos[1], iPos[2]);
      		pData[issuerid][pFreezeTimer] = SetTimerEx("UnfreezePlayer", 3000, false, "ifff", issuerid, iPos[0], iPos[1], iPos[2]);
    		TogglePlayerControllable(issuerid, false);

		    return 0;
  		}
	}
	if(GetHealth(playerid) < 49.0 && !IsPlayerNPC(playerid) && !pBlood[playerid])
	{
    	ShowBlood(playerid, 2);
    	pBlood[playerid] = true;
    }
  	if(issuerid != INVALID_PLAYER_ID)
    {
		if(HeadShotSystem && bodypart == 9 && GetPlayerState(playerid) != PLAYER_STATE_WASTED) {
			/*if(IsPlayerInRangeOfPoint(issuerid, SafezoneInfo[Sz][szSize], SafezoneInfo[Sz][szPosX], SafezoneInfo[Sz][szPosY], SafezoneInfo[Sz][szPosZ]))
			{
				Dyuze(issuerid, "", "You are in the ~r~parameter~w~ of the ~g~Safezone", 5000);
				return 0;
			}
			else
			{*/
			SendProximityMessage(issuerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s was strucked to the head by a bullet.", GetRPName(playerid));
			SCMf(playerid, SERVER_COLOR, "You have been struck to the head by %s.", GetRPName(issuerid));
			SCMf(issuerid, COLOR_ERROR, "You have struck %s in the head with a bullet.", GetRPName(playerid));

			SetPlayerHealth(playerid, 0.0);
		}
		if(bodypart == 7 || bodypart == 8)
		{
			new string[128];
			if(!pData[playerid][pBrokenLeg])
			{
				/*if(IsPlayerInRangeOfPoint(issuerid, SafezoneInfo[Sz][szSize], SafezoneInfo[Sz][szPosX], SafezoneInfo[Sz][szPosY], SafezoneInfo[Sz][szPosZ]))
				{
					Dyuze(issuerid, "", "You are in the ~r~parameter~w~ of the ~g~Safezone", 5000);
					return 0;
				}*/
				ApplyAnimation(playerid, "ped", "FALL_collapse", 4.1, 0, 1, 1, 0, 0);

				//SetPlayerSpecialTag(playerid, TAG_BROKEN_LEG);

				pData[playerid][pBrokenLeg] = 1;

				SendProximityMessage(issuerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s was shot in the leg, their leg is now broken.", GetRPName(playerid));
				format(string, sizeof(string), "You have been ~b~shot in the legs by ~y~%s~w~.", GetRPName(issuerid));
				Dyuze(playerid, "", "", 3000);
				SCM(playerid, COLOR_ERROR, "You cannot sprint or jump while you have a broken leg.");
				SCM(playerid, COLOR_YELLOW, "Prevent from running or jumping as your health goes down.");
				format(string, sizeof(string), "You have ~r~shot %s in the ~b~legs~w~.", GetRPName(playerid));
				Dyuze(issuerid, "", "", 3000);
			}
		}
			/*else if(IsPlayerInRangeOfPoint(issuerid, SafezoneInfo[Sz][szSize], SafezoneInfo[Sz][szPosX], SafezoneInfo[Sz][szPosY], SafezoneInfo[Sz][szPosZ]))
			{
				Dyuze(issuerid, "", "You are in the ~r~parameter~w~ of the ~g~Safezone", 5000);
				return 0;
			}*/
    }
	if(issuerid != INVALID_PLAYER_ID)
	{
		for(new Sz; Sz < MAX_SAFEZONES; Sz++)
		{
			if(IsPlayerInRangeOfPoint(playerid, SafezoneInfo[Sz][szSize], SafezoneInfo[Sz][szPosX], SafezoneInfo[Sz][szPosY], SafezoneInfo[Sz][szPosZ]) && !IsPlayerInRangeOfPoint(issuerid, SafezoneInfo[Sz][szSize], SafezoneInfo[Sz][szPosX], SafezoneInfo[Sz][szPosY], SafezoneInfo[Sz][szPosZ]))
			{
				Dyuze(issuerid, "", "That Player is in the ~r~parameter~w~ of the ~g~Safezone", 5000);
				return 0;
			}
			else if(IsPlayerInRangeOfPoint(issuerid, SafezoneInfo[Sz][szSize], SafezoneInfo[Sz][szPosX], SafezoneInfo[Sz][szPosY], SafezoneInfo[Sz][szPosZ]))
			{
				Dyuze(issuerid, "", "You are in the ~r~parameter~w~ of the ~g~Safezone", 5000);
				return 0;
			}
		}
	}
	return 1;
}
public OnPlayerDamageDone(playerid, Float:amount, issuerid, weapon, bodypart)
{
	if(playerid != INVALID_PLAYER_ID && issuerid != INVALID_PLAYER_ID) // motherfucker caused us to start out with bed rep BIATCH
	{
		if(IsPlayerConnected(issuerid))
		{
		    if(weapon == 4 && PlayerHasWeapon(issuerid, 4) && IsPlayerInRangeOfPlayer(playerid, issuerid, 20.0) && amount > 100.0)
		    {
		        DamagePlayer(playerid, 300, issuerid, WEAPON_EXPLOSION, BODY_PART_UNKNOWN, false);
		        HandleContract(playerid, issuerid);
		    }
		}
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO shots VALUES(null, %i, %i, %i, %i, '%s', '0.0', '0.0', '0.0', %i)", issuerid, weapon, BULLET_HIT_TYPE_PLAYER, playerid, GetPlayerNameEx(playerid), gettime());
		mysql_tquery(connectionID, queryBuffer);
	}
	return 1;
}

public OnPlayerShootDynamicObject(playerid, weaponid, objectid, Float:x, Float:y, Float:z)
{
	if(RobberyInfo[rPlanning] && objectid == RobberyInfo[rObjects][1])
	{
		for(new i = 0; i < MAX_BANK_ROBBERS; i ++)
		{
		    if(RobberyInfo[rRobbers][i] != INVALID_PLAYER_ID)
		    {
			    PlayerPlaySound(RobberyInfo[rRobbers][i], 3401, 0.0, 0.0, 0.0);
			    GameTextForPlayer(RobberyInfo[rRobbers][i], "~w~Heist started", 5000, 1);
			    SetPlayerAttachedObject(RobberyInfo[rRobbers][i], 8, 19801, 2, 0.091000, 0.012000, -0.000000, 0.099999, 87.799957, 179.500015, 1.345999, 1.523000, 1.270001, 0, 0);
				SetPlayerAttachedObject(RobberyInfo[rRobbers][i], 9, 1550, 1, 0.116999, -0.170999, -0.016000, -3.099997, 87.800018, -179.400009, 0.602000, 0.640000, 0.625000, 0, 0);
				ApplyAnimation(RobberyInfo[rRobbers][i], "GOGGLES", "goggles_put_on", 4.1, 0, 0, 0, 0, 0, 1);

				if(!Maskara[playerid]) {
					pData[RobberyInfo[rRobbers][i]][pWantedLevel] = 6;
				}

				pData[RobberyInfo[rRobbers][i]][pCrimes]++;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO charges VALUES(null, %i, 'The State', NOW(), 'Bank Robbery')", pData[RobberyInfo[rRobbers][i]][pID]);
				mysql_tquery(connectionID, queryBuffer);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = 6, crimes = crimes + 1 WHERE uid = %i", pData[RobberyInfo[rRobbers][i]][pID]);
				mysql_tquery(connectionID, queryBuffer);
			}
		}

		foreach(new i : Player)
		{
		    if(IsLawEnforcement(i))
		    {
				SM(i, COLOR_ROYALBLUE, "============================BANK ROBBERY============================");
		        SM(i, COLOR_ROYALBLUE, "HQ: A bank robbery is currently occurring.");
				SM(i, COLOR_ROYALBLUE, "Confirmed Robber Count: %i", GetBankRobbers());
				SM(i, COLOR_ROYALBLUE, "Location: Mulholland City Bank (marked on your radar");
			}
		}

        GetDynamicObjectPos(RobberyInfo[rObjects][1], x, y, z);
	    MoveDynamicObject(RobberyInfo[rObjects][0], 1678.248901, -988.181152, 670.224853, 5.0, 90.000000, 0.000000, 0.000000);
		DestroyDynamicObject(RobberyInfo[rObjects][1]);

	    CreateExplosion(x, y, z, 12, 6.0);
		SCMA(COLOR_LIGHTGREEN, "Breaking News"WHITE": A bank robbery is currently taking place at the Mulholland Bank! All civilians are advised to stay at their home until further announcement!!!");

		RobberyInfo[rText][0] = CreateDynamic3DTextLabel("[Bank]\n/"YELLOW"'lootbox'to loot deposit box.", COLOR_TEAL, 1680.2344, -994.6146, 671.0032, 10.0);
		RobberyInfo[rText][1] = CreateDynamic3DTextLabel("[Bank]\n/"YELLOW"'lootbox'to loot deposit box.", COLOR_TEAL, 1680.2335, -998.6115, 671.0032, 10.0);
		RobberyInfo[rText][2] = CreateDynamic3DTextLabel("[Bank]\n/"YELLOW"'lootbox'to loot deposit box.", COLOR_TEAL, 1680.2344, -1002.5356, 671.0032, 10.0);
		RobberyInfo[rText][3] = CreateDynamic3DTextLabel("[Bank]\n/"YELLOW"'lootbox'to loot deposit box.", COLOR_TEAL, 1674.2708, -998.4954, 671.0032, 10.0);
		RobberyInfo[rText][4] = CreateDynamic3DTextLabel("[Bank]\n/"YELLOW"'lootbox'to loot deposit box.", COLOR_TEAL, 1674.2708, -994.5173, 671.0032, 10.0);

		RobberyInfo[rStarted] = 1;
		RobberyInfo[rStolen] = 0;
		RobberyInfo[rPlanning] = 0;
	}

	return 1;
}
forward OnTaserShoot(playerid);
public OnTaserShoot(playerid)
{
	SetPlayerArmedWeapon(playerid, WEAPON_SILENCED);
	return ClearAnimations(playerid);
}

forward RechargeTazer(playerid);
public RechargeTazer(playerid)
{
	if (pData[playerid][pTazer])
	{
		GivePlayerWeapon(playerid, 23, 1);
	}
}

forward OnbeanBagShoot(playerid);
public OnbeanBagShoot(playerid)
{
	SetPlayerArmedWeapon(playerid, WEAPON_SHOTGUN);
	return ClearAnimations(playerid);
}

forward RechargeBeanBag(playerid);
public RechargeBeanBag(playerid)
{
	if (pData[playerid][pBeanbag])
	{
		GivePlayerWeapon(playerid, 25, 1);
	}
}
public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{

	if(hittype == BULLET_HIT_TYPE_PLAYER && hitid != INVALID_PLAYER_ID)
	{
		if((1 <= EventInfo[eType] <= 2) && pData[playerid][pJoinedEvent])
		{
		    if(!EventInfo[eStarted])
		    {
		     	GameTextForPlayer(playerid, "~r~Don't shoot until the event starts!", 2000, 3);
			    return 0;
			}
			else if(EventInfo[eType] == 2 && pData[hitid][pEventTeam] == pData[playerid][pEventTeam])
			{
	            GameTextForPlayer(playerid, "~r~Do not teamkill!", 2000, 3);
			    return 0;
			}
		}
		if(pData[playerid][pAcceptedHelp])
		{
		    GameTextForPlayer(playerid, "~r~Don't shoot at newbies!", 2000, 3);
		    return 0;
		}
	}
	if (weaponid == 23 && pData[playerid][pTazer] && GetFactionType(playerid) == FACTION_POLICE && GetFactionType(playerid) == FACTION_DOC && GetFactionType(playerid) == FACTION_SHERIFF) {
		ApplyAnimation(playerid, "COLT45", "colt45_reload", 4.1, 0, 0, 0, 0, 0);
		SetTimerEx("OnTaserShoot", 1100, false, "i", playerid);
	    PlayerPlaySound(playerid, 6003, 0.0, 0.0, 0.0);
		SetTimerEx("RechargeTazer", 2000, false, "i", playerid);
		SCM(playerid, COLOR_SYNTAX, "Recharging tazer, please wait...");
	}
	else if (weaponid == 25 && pData[playerid][pBeanbag] && GetFactionType(playerid) == FACTION_POLICE && GetFactionType(playerid) == FACTION_DOC && GetFactionType(playerid) == FACTION_SHERIFF) {
		ApplyAnimation(playerid, "COLT45", "colt45_reload", 4.1, 0, 0, 0, 0, 0);
		SetTimerEx("onBeanBagShoot", 1100, false, "i", playerid);
	    PlayerPlaySound(playerid, 6003, 0.0, 0.0, 0.0);
		SetTimerEx("ReachargeBeanBag", 2000, false, "i", playerid);
		SCM(playerid, COLOR_SYNTAX, "Refilling Bullets, please wait...");
	}
    if(weaponid != 22 && weaponid != 26 && weaponid != 28 && weaponid != 32)
	{
		if(pData[playerid][pClip] > 0)
		{
		    new
				string[12];

		    pData[playerid][pCurrentAmmo] = GetPlayerAmmo(playerid);
		    pData[playerid][pClip]--;

		    format(string, sizeof(string), "%i", pData[playerid][pClip]);
		    PlayerTextDrawSetString(playerid, pData[playerid][pText][5], string);
		}
	}


	if(!PlayerHasWeapon(playerid, weaponid, true) && pData[playerid][pAdmin] < 2 && !pData[playerid][pKicked] && gettime() > pData[playerid][pACTime])
	{
	    new
	        string[48];

		format(string, sizeof(string), "Weapon hacks (%s)", GetWeaponNameEx(weaponid));

		SMA(COLOR_LIGHTRED, "AdmCmd: %s was banned by %s, reason: %s", GetRPName(playerid), SERVER_BOT, string);
		BanPlayer(playerid, SERVER_BOT, string);
		//Kick(playerid);
	    return 0;
	}

	if(hittype == BULLET_HIT_TYPE_PLAYER && hitid != INVALID_PLAYER_ID)
	{
	    if(!pData[hitid][pJoinedEvent] && pData[hitid][pDueling] == INVALID_PLAYER_ID)
		{
	    	GetPlayerArmour(hitid, pData[hitid][pArmor]);
		}
	}
	if(hittype == BULLET_HIT_TYPE_PLAYER && hitid != INVALID_PLAYER_ID)
	{
	    if(!pData[hitid][pJoinedEvent] && !pData[hitid][pPaintball] && pData[hitid][pDueling] == INVALID_PLAYER_ID && !pData[hitid][pPaintball2])
		{
	    	GetPlayerArmour(hitid, pData[hitid][pArmor]);
		}
	}
    /*if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		if(22 <= GetPlayerWeapon(playerid) <= 36)
		{
	  		if(pData[playerid][pACAmmo] == GetPlayerAmmo(playerid))
			{
	  			pData[playerid][pACFired]++;
			}

		    if(!pData[playerid][pReloading] && pData[playerid][pACFired] >= 20)
    		{
		        if((gAnticheat) && pData[playerid][pAdmin] < 2 && !pData[playerid][pKicked])
    		    {
					SAM(COLOR_YELLOW, "AdmWarning: %s was automatically kicked for infinite ammo.", GetRPName(playerid));
					Log_Write("log_cheat", "%s (uid: %i) was automatically kicked for infinite ammo.", GetPlayerNameEx(playerid), pData[playerid][pID]);
					KickPlayer(playerid);
				}
			}

			pData[playerid][pACAmmo] = GetPlayerAmmo(playerid);
		}
	}*/
	return 1;
}
public OnPlayerModelSelectionEx(playerid, response, extraid, modelid)
{
	if(extraid == MODEL_SELECTION_NEWBIE)
	{
		if(response) {
			SCM(playerid, COLOR_YELLOW, "You have set your own clothes.");
			SetScriptSkin(playerid, modelid);
		}  else {
			if(pData[playerid][pGender] == 1)
				ShowModelSelectionMenuEx(playerid, clothesShopSkinsMale, sizeof(clothesShopSkinsMale), "Select your Skin", MODEL_SELECTION_NEWBIE);
			else 
				ShowModelSelectionMenuEx(playerid, clothesShopSkinsFemale, sizeof(clothesShopSkinsFemale), "Select your Skin", MODEL_SELECTION_NEWBIE);	
		}
	}		
    return 1;
}
public OnPlayerSelectionMenuResponse(playerid, extraid, response, listitem, modelid)
{
	switch(extraid)
	{
		case MODEL_SELECTION_FURNITURE:
	    {
	        if(response)
	        {
	            new houseid = GetInsideHouse(playerid);

	            if(houseid >= 0 && HasFurniturePerms(playerid, houseid))
	            {
		            PurchaseFurniture(playerid, listitem + pData[playerid][pFurnitureIndex]);
				}
	        }
	        else
	        {
	            ShowDialogToPlayer(playerid, DIALOG_BUYFURNITURE1);
			}
	    }
   	    case MODEL_SELECTION_CLOTHES:
	    {
	        if(response)
	        {
		        new
					businessid = GetInsideBusiness(playerid);

		        if(businessid >= 0 && BusinessInfo[businessid][bType] == BUSINESS_CLOTHES)
		        {
		            if(BusinessInfo[businessid][bProducts] <= 0)
		            {
		                return SCM(playerid, COLOR_SYNTAX, "This business is out of stock.");
		            }
		            if(pData[playerid][pDonator] == 0 && pData[playerid][pCash] < 50)
	                {
	                    return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy new clothes.");
	                }
					if((pData[playerid][pDonator] == 0 && GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_MEDIC) && (!(0 <= modelid <= 311) || (265 <= modelid <= 267) || (274 <= modelid <= 288) || (300 <= modelid <= 302) || (306 <= modelid <= 311)))
					{
					    return SCM(playerid, COLOR_SYNTAX, "You are not allowed to use that skin as it is either invalid or faction reserved.");
					}

				    new price = BusinessInfo[businessid][bPrices][0];

					GivePlayerCash(playerid, -price);

					BusinessInfo[businessid][bCash] += price;
                	BusinessInfo[businessid][bProducts]--;

                	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
                	mysql_tquery(connectionID, queryBuffer);

                	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid %s to the shopkeeper and received a new set of clothes.", GetRPName(playerid), FormatNumber(price));
             		SM(playerid, COLOR_WHITE, "You've changed your clothes for $%i.", price);
					SetScriptSkin(playerid, modelid);
		        }
			}
	    }
   	    case MODEL_SELECTION_CLOTHING:
	    {
	        if(response)
	        {
	            new businessid = GetInsideBusiness(playerid);

	            if(businessid >= 0 && BusinessInfo[businessid][bType] == BUSINESS_CLOTHES)
	            {
					PreviewClothing(playerid, listitem + pData[playerid][pClothingIndex]);
				}
	        }
	        else
	        {
	            ShowDialogToPlayer(playerid, DIALOG_BUYCLOTHINGTYPE);
			}
 	 	}
      	case MODEL_SELECTION_COPCLOTHING:
	    {
	        if((response))
	        {
	            SetPlayerAttachedObject(playerid, 9, modelid, copClothing[listitem][cBone]);

				pData[playerid][pEditType] = EDIT_COP_CLOTHING;
		        pData[playerid][pSelected] = listitem;

				SCMf(playerid, COLOR_WHITE, "You have selected {FF6347}%s{FFFFFF}. Use the editor to arrange your clothing and click the disk icon to save.", copClothing[listitem][cName]);
        		EditAttachedObject(playerid, 9);
	        }
	    }
		case MODEL_SELECTION_LANDOBJECTS:
	    {
	        if(response)
	        {
	            new landid = GetNearbyLand(playerid);

		    	if(landid >= 0 && HasLandPerms(playerid, landid))
				{
					PurchaseLandObject(playerid, landid, listitem + pData[playerid][pFurnitureIndex]);
				}
			}
	        else
	        {
	            ShowDialogToPlayer(playerid, DIALOG_LANDBUILD1);
			}
	    }
    	case MODEL_SELECTION_VEHICLES:
		{
			if(response)
			{
			    pData[playerid][pSelected] = listitem;
			    PurchaseVehicle(playerid);
			}
		}
	}

	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	// Finally... an end to that ANNOYING spectate bug!

	foreach(new i : Player)
	{
	    if(pData[i][pSpectating] == playerid)
	    {
	        SetTimerEx("SpectateUpdate", 500, false, "ii", i, playerid);
	    }
	}

	if((newinteriorid == 0) && IsPlayerInBankRobbery(playerid))
	{
	    PlayerPlaySound(playerid, 3402, 0.0, 0.0, 0.0);
	}

	return 1;
}

stock IsPlayerRunning(playerid)
{
    if(!IsPlayerConnected(playerid) || IsPlayerInAnyVehicle(playerid)) return 0;
    new keys, updown, leftright;
    GetPlayerKeys(playerid, keys, updown, leftright);
    if(keys & KEY_SPRINT && GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_USEJETPACK) return 1;
    if(GetPlayerAnimationIndex(playerid))
    {
        new animlib[32], animname[32];
        GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,animname,32);
        if(!strcmp(animlib, "PED"))
        {
			new const names[8][] = { "run_fat", "run_fatold", "run_old", "swat_run", "woman_run", "WOMAN_runbusy", "woman_runpanic", "WOMAN_runsexy" };
			for(new i; i < sizeof(names); i++)
			{
			    if(!strcmp(animname, names[i])) return 1;
			}
        }
    }
    return 0;
}

forward Mileage(playerid);
public Mileage(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);
	VehicleInfo[vehicleid][vMileage] += 0.1;
}

public OnPlayerUpdate(playerid)
{	
    if(pData[playerid][pKicked]) return 0;
	if(!pData[playerid][pLogged]) return 1;
	static id;
	new vehicled = GetPlayerVehicleID(playerid);
	if ((id = Speed_Nearest(playerid)) != -1 && GetPlayerSpeed(playerid) > SpeedData[id][speedLimit] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsVehicleOwner(playerid, vehicled) && IsEngineVehicle(vehicled) && !pData[playerid][pSpeedTime])
	{
	    if (!IsACruiser(vehicled) && !IsABoat(vehicled) && !IsAPlane(vehicled) && !IsAHelicopter(vehicled))
	    {
	 		new price = 100 + floatround(GetPlayerSpeed(playerid) - SpeedData[id][speedLimit]);
			new str[500];
	   		format(str, sizeof(str), "Speeding (%.0f/%.0f mph)", GetPlayerSpeed(playerid), SpeedData[id][speedLimit]);
	        SetTimerEx("HidePlayerBox", 500, false, "dd", playerid, _:ShowPlayerBox(playerid, 0xFFFFFF66));
    		format(str, sizeof(str), "You have received a %s speeding ticket.", FormatNumber(price));
     		SendClientMessage(playerid, COLOR_SYNTAX, str);
			VehicleInfo[vehicled][vTickets] += price;

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET tickets = %i WHERE id = %i", VehicleInfo[vehicled][vTickets], VehicleInfo[vehicled][vID]);
			mysql_tquery(connectionID, queryBuffer);
			pData[playerid][pSpeedTime] = 5;
		}
	}
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		if(GetPlayerSpeed(playerid) > 10 || GetPlayerSpeed(playerid) > 30 || GetPlayerSpeed(playerid) > 50)
		{
			SetTimerEx("Mileage", 2500, true, "i", playerid);
		}
	}
	if(pData[playerid][pBrokenLeg] && IsPlayerRunning(playerid)) {
		ApplyAnimation(playerid, "ped", "FALL_collapse",4.1,0,1,1,0,0);
		if((gettime() - pData[playerid][pLastDamage]) < 3) {
			SetPlayerHealth(playerid, GetHealth(playerid) - 1.0);
			pData[playerid][pLastDamage] = gettime();
		}
	}
	new keys, ud, lr, string[128];
	GetPlayerKeys(playerid, keys, ud, lr);
	if(pData[playerid][pHospital] && GetPlayerAnimationIndex(playerid) != 385) ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0, 1);
	if(GetPlayerMoney(playerid) != pData[playerid][pCash])
	{
	    ResetPlayerMoney(playerid);
	    GivePlayerMoney(playerid, pData[playerid][pCash]);
	}
	if(GetPlayerScore(playerid) != pData[playerid][pLevel])
	{
	    SetPlayerScore(playerid, pData[playerid][pLevel]);
	}
	/*if(GetPlayerWantedLevel(playerid) != pData[playerid][pWantedLevel])
	{
	    SetPlayerWantedLevel(playerid, pData[playerid][pWantedLevel]);
	}*/
	if((GetPlayerAnimationIndex(playerid) != 1209) && ((pData[playerid][pInjured] && GetVehicleModel(GetPlayerVehicleID(playerid)) != 416) || (pData[playerid][pTazedTime] > 0 && pData[playerid][pDraggedBy] == INVALID_PLAYER_ID)))
	{
	    ApplyAnimation(playerid, "SWEET", "Sweet_injuredloop", 4.1, 0, 0, 0, 1, 0, 1);
	}
	if(GetPlayerWeapon(playerid) > 1 && pData[playerid][pInjured])
	{
		SetPlayerArmedWeapon(playerid, 0);
	}
    if(!GetPlayerInterior(playerid))
	{
     	SetPlayerTime(playerid, gWorldTime, 0);
	}
	else
	{
	    new garageid;

		if((garageid = GetInsideGarage(playerid)) >= 0 && GarageInfo[garageid][gType] == 2)
		    SetPlayerTime(playerid, 0, 0);
	    else
          	SetPlayerTime(playerid, 12, 0);
	}
	if((keys & KEY_FIRE) && IsFireActive() && GetFactionType(playerid) == FACTION_MEDIC)
	{
	    new
	        Float:x,
	        Float:y,
	        Float:z,
	        Float:vx,
	        Float:vy,
	        Float:vz,
	        Float:cx,
	        Float:cy,
	        Float:cz;

	    if(GetPlayerWeapon(playerid) == 42 && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
		    for(new i = 0; i < MAX_FIRES; i ++)
		    {
		        if(IsPlayerInRangeOfDynamicObject(playerid, gFireObjects[i], 4.0))
		        {
		            gFireHealth[i] = gFireHealth[i] - 1.0;

		            if(gFireHealth[i] <= 0.0)
		            {
		                pData[playerid][pTotalFires]++;
			            GetDynamicObjectPos(gFireObjects[i], x, y, z);
			            GameTextForPlayer(playerid, "~r~Fire extinguished", 2000, 3);

			            SetTimerEx("DestroyWater", 2000, false, "i", CreateDynamicObject(18744, x, y, z - 0.2, 0.0, 0.0, 0.0));
						DestroyDynamicObject(gFireObjects[i]);

						gFireObjects[i] = INVALID_OBJECT_ID;
						gFireHealth[i] = 0.0;
					}
		        }
			}
		}
		else if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && (GetVehicleModel(GetPlayerVehicleID(playerid)) == 407 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 544))
		{
		    GetPlayerCameraFrontVector(playerid, vx, vy, vz);
		    GetPlayerCameraPos(playerid, cx, cy, cz);

		    for(new i = 0; i < MAX_FIRES; i ++)
		    {
		        if(IsPlayerInRangeOfDynamicObject(playerid, gFireObjects[i], 12.0))
		        {
		            GetDynamicObjectPos(gFireObjects[i], x, y, z);

					if(DistanceCameraTargetToLocation(cx, cy, cz, x, y, z + 2.5, vx, vy, vz) < 12.0)
	   				{
	   				    gFireHealth[i] = gFireHealth[i] - 0.5;

	   				    if(gFireHealth[i] <= 0.0)
		            	{
		   			    	GetDynamicObjectPos(gFireObjects[i], x, y, z);
		   			    	GameTextForPlayer(playerid, "~r~Fire extinguished", 2000, 3);

				            SetTimerEx("DestroyWater", 2000, false, "i", CreateDynamicObject(18744, x, y, z - 0.2, 0.0, 0.0, 0.0));
							DestroyDynamicObject(gFireObjects[i]);

							gFireObjects[i] = INVALID_OBJECT_ID;
							gFireHealth[i] = 0.0;
						}
					}
			  	}
		    }
		}

		if(!IsFireActive())
		{
		    new amount = 250;
		    foreach(new i : Player)
		    {
		        if(GetFactionType(i) == FACTION_MEDIC && IsPlayerInRangeOfPoint(playerid, 20.0, x, y, z))
		        {
		            SM(i, COLOR_AQUA, "Well done! You helped put out the fire and received $%i .", amount);
		            GivePlayerCash(i, amount);
		        }
			}
			gFires = 0;
		}
	}

	if(pData[playerid][pCurrentWeapon] != GetPlayerWeapon(playerid))
	{
	    pData[playerid][pCurrentWeapon] = GetPlayerWeapon(playerid);
	    pData[playerid][pCurrentAmmo] = GetPlayerAmmo(playerid);

	    pData[playerid][pACAmmo] = pData[playerid][pCurrentAmmo];
	    pData[playerid][pACFired] = 0;
		pData[playerid][pClip] = GetWeaponClipSize(pData[playerid][pCurrentWeapon]);

		// Weapon hacks
		if((gAnticheat) && pData[playerid][pAdmin] < 2)
		{
			if(pData[playerid][pCurrentWeapon] > 1 && !PlayerHasWeapon(playerid, pData[playerid][pCurrentWeapon], true) && !pData[playerid][pKicked])
			{
			    pData[playerid][pACWarns]++;

			    if(pData[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
				{
				    SAM(COLOR_YELLOW, "AdmWarning: %s[%i] has a desynced %s.", GetRPName(playerid), playerid, GetWeaponNameEx(pData[playerid][pCurrentWeapon]));
				    Log_Write("log_cheat", "%s (uid: %i) had a desynced %s with %i ammunition.", GetPlayerNameEx(playerid), pData[playerid][pID], GetWeaponNameEx(pData[playerid][pCurrentWeapon]), GetPlayerAmmo(playerid));
				}
				else
				{
					format(string, sizeof(string), "Weapon hacks (%s)", GetWeaponNameEx(pData[playerid][pCurrentWeapon]));

					SMA(COLOR_LIGHTRED, "AdmCmd: %s was banned by %s, reason: %s", GetRPName(playerid), SERVER_BOT, string);
					BanPlayer(playerid, SERVER_BOT, string);
					//Kick(playerid);
				}
			}
		}
	}
	
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && GetPlayerWeaponState(playerid))
	{
		/*if(IsPlayerInRangeOfPoint(playerid, SafezoneInfo[Sz][szSize], SafezoneInfo[Sz][szPosX], SafezoneInfo[Sz][szPosY], SafezoneInfo[Sz][szPosZ]))
		{
			SetPlayerArmedWeapon(playerid, 0); // disables weapon
		}
		if(pData[playerid][pTazer] == 1)
		{
			SetPlayerArmedWeapon(playerid, 23);
		}*/
	}

	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && pData[playerid][pCurrentWeapon] > 0 && GetWeaponClipSize(pData[playerid][pCurrentWeapon]) > 0 && !pData[playerid][pToggleHUD] && !pData[playerid][pToggleTextdraws] && pData[playerid][pAmmoWeapon] != pData[playerid][pCurrentWeapon])
    {
        PlayerTextDrawShow(playerid, pData[playerid][pText][5]);
    }
    else
    {
        PlayerTextDrawHide(playerid, pData[playerid][pText][5]);
	}

	if(pData[playerid][pCurrentAmmo] != GetPlayerAmmo(playerid))
	{
	    if(pData[playerid][pCurrentAmmo] > GetPlayerAmmo(playerid))
	    {
	        switch(GetPlayerWeapon(playerid))
	        {
	            case 22, 26, 28, 32:
	            {
			        pData[playerid][pClip] -= pData[playerid][pCurrentAmmo] - GetPlayerAmmo(playerid);
				}
			}

	   		if(pData[playerid][pClip] < 0)
      		{
       			pData[playerid][pClip] = 0;
			}
		}

	    pData[playerid][pCurrentAmmo] = GetPlayerAmmo(playerid);

		if(!pData[playerid][pJoinedEvent] && pData[playerid][pDueling] == INVALID_PLAYER_ID && !(pData[playerid][pTazer] && GetPlayerWeapon(playerid) == 23))
		{
		    if((22 <= pData[playerid][pCurrentWeapon] <= 34) && pData[playerid][pAmmoType] != AMMOTYPE_NORMAL && pData[playerid][pAmmoWeapon] == pData[playerid][pCurrentWeapon] && 0 <= pData[playerid][pCurrentAmmo] <= 9999)
		    {
		        // Ammo hack detection.
		        if(pData[playerid][pAmmoType] != AMMOTYPE_NORMAL && PlayerHasWeapon(playerid, pData[playerid][pAmmoWeapon]))
				{
				    new weapon, ammo;

				    GetPlayerWeaponData(playerid, weaponSlotIDs[pData[playerid][pAmmoWeapon]], weapon, ammo);

				    if((ammo > 0) && (pData[playerid][pAmmoType] == AMMOTYPE_HP && ammo > pData[playerid][pHPAmmo]) || (pData[playerid][pAmmoType] == AMMOTYPE_POISON && ammo > pData[playerid][pPoisonAmmo]) || (pData[playerid][pAmmoType] == AMMOTYPE_FMJ && ammo > pData[playerid][pFMJAmmo]))
				    {
				        new oldammo;

				        if(pData[playerid][pAmmoType] == AMMOTYPE_HP) {
				            oldammo = pData[playerid][pHPAmmo];
				        } else if(pData[playerid][pAmmoType] == AMMOTYPE_POISON) {
				            oldammo = pData[playerid][pPoisonAmmo];
				        } else if(pData[playerid][pAmmoType] == AMMOTYPE_FMJ) {
				            oldammo = pData[playerid][pFMJAmmo];
				        }

						if(gAnticheat && !pData[playerid][pKicked])
						{
					        pData[playerid][pACWarns]++;

						    if(pData[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
						    {
						        SAM(COLOR_YELLOW, "AdmWarning: %s[%i] may be hacking ammo. (old: %i, new: %i)", GetRPName(playerid), playerid, oldammo, ammo);
						        Log_Write("log_cheat", "%s (uid: %i) possibly hacked ammo. (old: %i, new: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], oldammo, ammo);
							}
							else
							{
						    	SMA(COLOR_LIGHTRED, "AdmCmd: %s was auto-kicked by %s, reason: Ammo hacking", GetRPName(playerid), SERVER_BOT);
						    	//BanPlayer(playerid, SERVER_BOT, "Ammo hacking");
						    	Kick(playerid);
							}

							pData[playerid][pCurrentAmmo] = oldammo;
					        SetPlayerAmmo(playerid, pData[playerid][pAmmoWeapon], oldammo);
						}
				    }
				}

		        if(pData[playerid][pAmmoType] != AMMOTYPE_NORMAL)
		        {
			        if(IsPlayerInAnyVehicle(playerid))
			        {
			            new weaponid;
			            GetPlayerWeaponData(playerid, weaponSlotIDs[pData[playerid][pCurrentWeapon]], weaponid, pData[playerid][pCurrentAmmo]);
			        }

			        switch(pData[playerid][pAmmoType])
			        {
			            case AMMOTYPE_HP:
   	           				pData[playerid][pHPAmmo] = pData[playerid][pCurrentAmmo];
		        	    case AMMOTYPE_POISON:
		                	pData[playerid][pPoisonAmmo] = pData[playerid][pCurrentAmmo];
						case AMMOTYPE_FMJ:
					    	pData[playerid][pFMJAmmo] = pData[playerid][pCurrentAmmo];
		        	}
		        }

		        if(pData[playerid][pCurrentAmmo] == 0 && pData[playerid][pAmmoType] != AMMOTYPE_NORMAL)
		        {
		            pData[playerid][pAmmoType] = AMMOTYPE_NORMAL;
				    pData[playerid][pAmmoWeapon] = 0;

		        	SM(playerid, COLOR_WHITE, "** Your %s is now using normal ammunition again as you ran out of special ammo.", GetWeaponNameEx(pData[playerid][pCurrentWeapon]));
		        	SetPlayerWeapons(playerid);
				}
			}
		}
	}

	if(GetPlayerWeaponState(playerid) == WEAPONSTATE_RELOADING)
	{
	    if(GetPlayerWeapon(playerid) != 25 && GetPlayerWeapon(playerid) != 33 && GetPlayerWeapon(playerid) != 34)
	    {
		    pData[playerid][pReloading] = 1;
		}

	    pData[playerid][pACFired] = 0;
	}

	if(pData[playerid][pReloading] && GetPlayerWeaponState(playerid) != WEAPONSTATE_RELOADING)
	{
		pData[playerid][pClip] = GetWeaponClipSize(GetPlayerWeapon(playerid));
		pData[playerid][pReloading] = 0;
	}

	new vehicleid = GetPlayerVehicleID(playerid);

	if(pData[playerid][pCurrentVehicle] != vehicleid)
	{
	    pData[playerid][pCurrentVehicle] = vehicleid;
	    pData[playerid][pVehicleCount]++;

	    if((!IsABoat(vehicleid) && GetVehicleModel(vehicleid) != 539) && pData[playerid][pVehicleCount] >= 4 && pData[playerid][pAdmin] < 2 && !pData[playerid][pKicked])
	    {
	        SMA(COLOR_LIGHTRED, "AdmCmd: %s was auto-kicked by %s, reason: Car warping", GetRPName(playerid), SERVER_BOT);
	        //BanPlayer(playerid, SERVER_BOT, "Car warping");
	        Kick(playerid);
	        return 0;
		}
	}

	if((44 <= GetPlayerWeapon(playerid) <= 45) && keys & KEY_FIRE)
	{
	    return 0;
	}

	// Armor hacking
	if(!pData[playerid][pJoinedEvent] && pData[playerid][pDueling] == INVALID_PLAYER_ID)
	{
	    // TODO: rewrite.
	}

	new Float:CarHealth[MAX_PLAYERS];
	if(IsPlayerInAnyVehicle(playerid) == 1 && ExBJck[playerid] == 0)
	{
		new Float:TempCarHealth;
		GetVehicleHealth(GetPlayerVehicleID(playerid), TempCarHealth);
		new Float:Difference = floatsub(CarHealth[playerid], TempCarHealth);
		if((floatcmp(CarHealth[playerid], TempCarHealth) == 1) && (floatcmp(Difference,100.0) == 1))
		{
		    Difference = floatdiv(Difference, 10.0);
		    new Float:OldHealth;
		    GetPlayerHealth(playerid, OldHealth);
		    SetPlayerHealth(playerid, floatsub(OldHealth, Difference));
		}
		CarHealth[playerid] = TempCarHealth;
	}
	else
	{
		CarHealth[playerid] = 0.0;
	}

	if(!pData[playerid][pToggleHUD] && !pData[playerid][pToggleTextdraws] && GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
	{
		new
			Float:health,
			Float:armour;

		GetPlayerHealth(playerid, health);
		GetPlayerArmour(playerid, armour);

		if(floatround(armour) > 0)
		{
			format(string, sizeof(string), "%.0f", armour);
			PlayerTextDrawSetString(playerid, pData[playerid][pText][3], string);
			PlayerTextDrawShow(playerid, pData[playerid][pText][3]);
		}
		else
		{
		    PlayerTextDrawHide(playerid, pData[playerid][pText][3]);
		}

		format(string, sizeof(string), "%.0f", health);
		PlayerTextDrawSetString(playerid, pData[playerid][pText][4], string);

		if(pData[playerid][pReloading]) {
		    string = "0";
		} else {
			format(string, sizeof(string), "%i", pData[playerid][pClip]);
		}
		PlayerTextDrawSetString(playerid, pData[playerid][pText][5], string);
	}
	pData[playerid][pLastUpdate] = gettime();

	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	if(VehicleInfo[vehicleid][vOwnerID] > 0 || VehicleInfo[vehicleid][vGang] >= 0)
	{
	    VehicleInfo[vehicleid][vColor1] = color1;
	    VehicleInfo[vehicleid][vColor2] = color2;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET color1 = %i, color2 = %i WHERE id = %i", color1, color2, VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);
	}

	return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	if(VehicleInfo[vehicleid][vOwnerID] > 0 || VehicleInfo[vehicleid][vGang] >= 0)
	{
	    VehicleInfo[vehicleid][vPaintjob] = paintjobid;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET paintjob = %i WHERE id = %i", paintjobid, VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);
	}

	return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	if(!GetPlayerInterior(playerid) && pData[playerid][pAdmin] < 2 && !pData[playerid][pKicked])
	{
	    SMA(COLOR_LIGHTRED, "AdmCmd: %s was auto-kicked by %s, reason: Illegal modding", GetRPName(playerid), SERVER_BOT);
	    //BanPlayer(playerid, SERVER_BOT, "Illegal modding");
	    Kick(playerid);
	    return 0;
	}

	if(VehicleInfo[vehicleid][vOwnerID] > 0 || VehicleInfo[vehicleid][vGang] >= 0)
	{
	    new slotid = GetVehicleComponentType(componentid);

	    VehicleInfo[vehicleid][vMods][slotid] = componentid;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET mod_%i = %i WHERE id = %i", slotid + 1, componentid, VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);
	}

	return 1;
}

public OnVehicleSpawn(vehicleid)
{
	if(adminVehicle{vehicleid})
	{
	    DestroyVehicleEx(vehicleid);
	    adminVehicle{vehicleid} = false;
	}
	if(IsValidDynamicObject(vehicleSiren[vehicleid]))
	{
	    DestroyDynamicObject(vehicleSiren[vehicleid]);
	    vehicleSiren[vehicleid] = INVALID_OBJECT_ID;
	}
	if(IsValidDynamic3DTextLabel(vehicleCallsign[vehicleid]))
	{
	    DestroyDynamic3DTextLabel(vehicleCallsign[vehicleid]);
		vehicleCallsign[vehicleid] = Text3D:INVALID_3DTEXT_ID;
	}
	if(IsValidDynamic3DTextLabel(DonatorCallSign[vehicleid]))
	{
	    DestroyDynamic3DTextLabel(DonatorCallSign[vehicleid]);
		DonatorCallSign[vehicleid] = Text3D:INVALID_3DTEXT_ID;
	}
	if((VehicleInfo[vehicleid][vID] > 0 && VehicleInfo[vehicleid][vOwnerID] > 0) || (VehicleInfo[vehicleid][vGang] >= 0))
	{
	    ReloadVehicle(vehicleid);
	    //DespawnVehicle(vehicleid);

	    if(VehicleInfo[vehicleid][vGang] >= 0)
	    {
	        vehicleFuel[vehicleid] = 100;
		}
	}
	else
	{
     	if(VehicleInfo[vehicleid][vID] > 0 && VehicleInfo[vehicleid][vHealth] > 300.0)
     	{
    		SetVehicleHealth(vehicleid, VehicleInfo[vehicleid][vHealth]);
     	}

		vehicleFuel[vehicleid] = 100;
	}
	VehicleInfo[vehicleid][vMeal] = 0;
	vehicleStream[vehicleid][0] = 0;
	return 1;
}

public OnPlayerText(playerid, text[])
{
	if(pData[playerid][pLogged] && !pData[playerid][pKicked])
	{
		new pawn[280];
		format(pawn, sizeof(pawn), "``%s(%d): %s``", GetRPName(playerid), playerid, text);
		DCC_SendChannelMessage(commandChannel, pawn);
		if(pData[playerid][pHospital])
	    {
	        SCM(playerid, COLOR_LIGHTRED, "** You are currently in the hospital. Chatting is disabled.");
	        return 0;
		}
		if(pData[playerid][pMuted])
		{
		    SCM(playerid, COLOR_LIGHTRED, "** You are currently muted. Chatting is disabled.");
	        return 0;
		}
		if(++pData[playerid][pSpamTime] >= 4 && pData[playerid][pAdmin] < 2)
		{
		    pData[playerid][pMuted] = 10;
		    SCM(playerid, COLOR_YELLOW, "** You've been temporarily muted for ten seconds due to suspected spamming.");
		    return 0;
		}
		if(pData[playerid][pAdmin] < 7 && CheckServerAd(text))
		{
			new string[128];
			format(string,sizeof(string),"{AA3333}AdWarning{FFFF00}: %s (ID: %d): '{AA3333}%s{FFFF00}'.", GetPlayerNameEx(playerid), playerid, text);
			SAM(COLOR_YELLOW, string, 2);
			//Log_Write("logs/hack.log", string);
        	if(++pData[playerid][pAdvertWarnings] > MAX_ANTICHEAT_WARNINGS)
        	{
        	    SMA(COLOR_LIGHTRED, "AdmCmd: %s was auto-kicked by %s, reason: Server advertisement", GetRPName(playerid), SERVER_BOT);
	    		//BanPlayer(playerid, SERVER_BOT, "Server advertisement");
				Kick(playerid);
        	}
			return 0;
		}
     	if(Maskara[playerid])
    	{
        	new string[128]; // String of GOD
        	format(string, sizeof(string), "Stranger(B%d): %s", MaskaraID[playerid], text);

			SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
     		SetPlayerBubbleText(playerid, 20.0, COLOR_GREY1, "(Says) %s", text);
        	return 0;
    	}
	   	if(GetPlayerState(playerid) == 1 && pData[playerid][pChatAnim])
		{
			new lengthTime = strlen(text);
			new animTime = lengthTime*200;

			ApplyAnimation(playerid, "GANGS", "prtial_gngtlkE", 4.1, 1, 0, 0, 0, animTime);
		}
	    if(pData[playerid][pJoinedEvent])
	    {
	        foreach(new i : Player)
      	  	{
                if(pData[i][pJoinedEvent])
 	           	{
           	     	if(EventInfo[eType] == 2)
           	     	{
    	            	SM(i, COLOR_LIGHTORANGE, "(( {%06x}%s:{F7A763} %s ))", GetPlayerColor(playerid) >>> 8, GetRPName(playerid), text);
					}
					else
					{
					    SM(i, COLOR_LIGHTORANGE, "(( %s: %s ))", GetRPName(playerid), text);
       	     		}
				}
			}
		}
		else
		{
			new
			    string[144];

	        if(pData[playerid][pCallLine] != INVALID_PLAYER_ID)
	        {
	            if(pData[playerid][pCallLine] != playerid && pData[playerid][pCallStage] == 2)
	            {
	                if(!strcmp(pData[playerid][pAccent], "None", true))
			        {
		                SM(pData[playerid][pCallLine], COLOR_YELLOW, "(cellphone) %s: %s", GetRPName(playerid), text);
					}
					else
					{
					    SM(pData[playerid][pCallLine], COLOR_YELLOW, "(%s) (cellphone) %s: %s", pData[playerid][pAccent], GetRPName(playerid), text);
					}
		        }

		        if(!strcmp(pData[playerid][pAccent], "None", true))
		        {
					format(string, sizeof(string), "(cellphone) %s: %s", GetRPName(playerid), text);
				}
				else
				{
				    format(string, sizeof(string), "(%s) (cellphone) %s: %s", pData[playerid][pAccent], GetRPName(playerid), text);
				}

				SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);

				if(pData[playerid][pCallLine] == playerid)
				{
				    switch(pData[playerid][pCallStage])
				    {
				        case 911:
				        {
					        if(!strcmp(text, "police", true))
					        {
					            SCM(playerid, COLOR_ROYALBLUE, "Dispatch: This is the Los Santos Police Department. What is your emergency?");
					        	pData[playerid][pCallStage] = 912;
					        }
							else if(!strcmp(text, "medic", true))
					        {
					            SCM(playerid, COLOR_DOCTOR, "Dispatch: This is the Los Santos Fire & Medical Department. What is your emergency?");
					        	pData[playerid][pCallStage] = 913;
					        }
					        else
					        {
					            SCM(playerid, COLOR_YELLOW, "Dispatch: Sorry? I don't know what you mean... Enter 'police' or 'medic'.");
							}
						}
						case 912:
						{
						    foreach(new i : Player)
						    {
						        if(IsLawEnforcement(i))
						        {
						            SM(i, COLOR_ROYALBLUE, "Emergency Hotline:");
						            SM(i, COLOR_GREY2, "Caller: %s, Number: %i", GetRPName(playerid), pData[playerid][pPhone]);
						            SM(i, COLOR_GREY2, "Location: %s", GetPlayerZoneName(playerid));
						            SM(i, COLOR_GREY2, "Emergency: %s", text);
						            SM(i, COLOR_WHITE, "** Use '/trackcall %i' to track the caller's location.", playerid);
						        }
						    }

							strcpy(pData[playerid][pEmergency], text, 128);

                            pData[playerid][pEmergencyCall] = 120;
                            pData[playerid][pEmergencyType] = FACTION_POLICE;

						    SCM(playerid, COLOR_ROYALBLUE, "Dispatch: All units in the area have been notified. Thank you for your time.");
						    HangupCall(playerid, HANGUP_USER);
						}
						case 1414:
						{
						    foreach(new i : Player)
						    {
						        if(IsLawEnforcement(i))
						        {
						            SM(i, COLOR_ROYALBLUE, "Emergency Hotline:");
						            SM(i, COLOR_GREY2, "Caller: %s, Number: %i", GetRPName(playerid), pData[playerid][pPhone]);
						            SM(i, COLOR_GREY2, "Location: %s", GetPlayerZoneName(playerid));
						            SM(i, COLOR_GREY2, "Emergency: %s", text);
						            SM(i, COLOR_WHITE, "** Use '/trackcall %i' to track the caller's location.", playerid);
						        }
						    }

							strcpy(pData[playerid][pEmergency], text, 128);

                            pData[playerid][pEmergencyCall] = 120;
                            pData[playerid][pEmergencyType] = FACTION_SHERIFF;

						    SCM(playerid, COLOR_ROYALBLUE, "Dispatch: All units in the area have been notified. Thank you for your time.");
						    HangupCall(playerid, HANGUP_USER);
						}
						case 913:
						{
						    foreach(new i : Player)
						    {
						        if(GetFactionType(i) == FACTION_MEDIC)
						        {
						            SM(i, COLOR_DOCTOR, "Emergency Hotline:");
						            SM(i, COLOR_GREY2, "Caller: %s, Number: %i", GetRPName(playerid), pData[playerid][pPhone]);
						            SM(i, COLOR_GREY2, "Location: %s", GetPlayerZoneName(playerid));
						            SM(i, COLOR_GREY2, "Emergency: %s", text);
						            SM(i, COLOR_WHITE, "** Use '/trackcall %i' to track the caller's location.", playerid);
						        }
						    }

						    strcpy(pData[playerid][pEmergency], text, 128);

						    pData[playerid][pEmergencyCall] = 120;
						    pData[playerid][pEmergencyType] = FACTION_MEDIC;

						    SCM(playerid, COLOR_DOCTOR, "Dispatch: All units in the area have been notified. Thank you for your time.");
						    HangupCall(playerid, HANGUP_USER);
						}
						case 6397:
						{
						    foreach(new i : Player)
						    {
						        if(GetFactionType(i) == FACTION_NEWS)
						        {
						            SM(i, SERVER_COLOR, "News Hotline:");
						            SM(i, COLOR_GREY2, "Caller: %s, Number: %i", GetRPName(playerid), pData[playerid][pPhone]);
						            SM(i, COLOR_GREY2, "Message: %s", text);
						        }
						    }

						    SCM(playerid, SERVER_COLOR, "News Team: Thank you. We will get back to you shortly!");
						    HangupCall(playerid, HANGUP_USER);
						}
						case 6324:
						{
						    foreach(new i : Player)
						    {
						        if(GetFactionType(i) == FACTION_MECHANIC)
						        {
						            SM(i, COLOR_DOCTOR, "Mechanic Hotline:");
						            SM(i, COLOR_GREY2, "Caller: %s, Number: %i", GetRPName(playerid), pData[playerid][pPhone]);
						            SM(i, COLOR_GREY2, "Location: %s", GetPlayerZoneName(playerid));
						            SM(i, COLOR_GREY2, "Message: %s", text);
						            SM(i, COLOR_WHITE, "** Use '/trackcall %i' to track the caller's location.", playerid);
						        }
						    }

						    strcpy(pData[playerid][pEmergency], text, 128);

						    pData[playerid][pEmergencyCall] = 120;
						    pData[playerid][pEmergencyType] = FACTION_MECHANIC;

						    SCM(playerid, COLOR_DISPATCH, "Thank you. We will alert all mechanics on duty.");
						    HangupCall(playerid, HANGUP_USER);
						}
						case 8294:
						{
						    foreach(new i : Player)
						    {
						        if(PlayerHasJob(i, JOB_TAXIDRIVER))
						        {
						            SM(i, SERVER_COLOR, "Taxi Hotline:");
						            SM(i, COLOR_GREY2, "Caller: %s, Number: %i", GetRPName(playerid), pData[playerid][pPhone]);
						            SM(i, COLOR_GREY2, "Location: %s", text);
						            SM(i, COLOR_WHITE, "** Use '/takecall %i' in order to take this call.", playerid);
						        }
						    }

							pData[playerid][pTaxiCall] = 60;
						    SCM(playerid, COLOR_YELLOW, "Dispatch: Thank you. We will alert all taxi drivers on duty.");
						    HangupCall(playerid, HANGUP_USER);
						}
					}

				}
			}
			else if(pData[playerid][pLiveBroadcast] != INVALID_PLAYER_ID)
			{
			    foreach(new i : Player)
				{
					if(!pData[i][pToggleNews])
					{
						if(GetFactionType(playerid) == FACTION_NEWS)
  					  	{
		    			    SM(i, 0x489348FF, "Live Reporter %s: %s", GetRPName(playerid), text);
						}
						else
						{
    						SM(i, 0x489348FF, "Live Guest %s: %s", GetRPName(playerid), text);
						}
					}
				}

				//SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
			}
			else
			{
			    if(pData[playerid][pHelper] > 0 && pData[playerid][pAcceptedHelp])
			    {
			        callcmd::b(playerid, text);
			    }
			    else if(IsPlayerInAnyVehicle(playerid) && CarWindows[GetPlayerVehicleID(playerid)])
			    {
			        foreach(new i : Player)
			        {
			            if(IsPlayerInAnyVehicle(i) && GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid))
			            {
        			        if(!strcmp(pData[playerid][pAccent], "None", true))
        			        {
        						SM(i, COLOR_GREY1, "(windows) %s says: %s", GetRPName(playerid), text);
        					}
        					else
        					{
        					    SM(i, COLOR_GREY1, "(windows) (%s) %s says: %s", pData[playerid][pAccent], GetRPName(playerid), text);
        					}
			            }
			        }
			    }
			    else
			    {
			        new string2[144];
				    if(!strcmp(pData[playerid][pAccent], "None", true))
			        {
						format(string, sizeof(string), "%s says: %s", GetRPName(playerid), text);
						format(string2, sizeof(string2), "says: %s", text);
					}
					else
					{
					    format(string, sizeof(string), "(%s) %s says: %s", pData[playerid][pAccent], GetRPName(playerid), text);
					    format(string2, sizeof(string2), "says: %s", text);
					}

					SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
     				SetPlayerBubbleText(playerid, 20.0, COLOR_GREY1, "(Says) %s", text);
     				//new string2[144];
			    	//When someone uses any badword, they will be muted for 30 seconds
					if(!strcmp(text, "fuck", true) || strfind(text, "wtf", true) != -1 || strfind(text, "fu", true) != -1 || strfind(text, "shit", true) != -1 || strfind(text, "bitch", true) != -1)
					{
						pData[playerid][pMuted] = 30;
						SCM(playerid, COLOR_YELLOW, "** You've been temporarily muted for 30 seconds due to saying bad words.");
					}
					/*if(!strcmp(text, "wtf", true) != -1)
					{
						pData[playerid][pMuted] = 30;
						SCM(playerid, COLOR_YELLOW, "** You've been temporarily muted for 30 seconds due to saying bad words.");
					}
					else if(!strcmp(text, "fu", true) != -1)
					{
						pData[playerid][pMuted] = 30;
						SCM(playerid, COLOR_YELLOW, "** You've been temporarily muted for 30 seconds due to saying bad words.");
					}
					else if(!strcmp(text, "shit", true) != -1)
					{
						pData[playerid][pMuted] = 30;
						SCM(playerid, COLOR_YELLOW, "** You've been temporarily muted for 30 seconds due to saying bad words.");
					}
					else if(!strcmp(text, "bitch", true) != -1)
					{
						pData[playerid][pMuted] = 30;
						SCM(playerid, COLOR_YELLOW, "** You've been temporarily muted for 30 seconds due to saying bad words.");
					}*/
				}
				ReturnChatAnimation(playerid, text);
			}
		}
	}
    pData[playerid][pAFKPos][0] = 0.0;
    pData[playerid][pAFKPos][1] = 0.0;
    pData[playerid][pAFKPos][2] = 0.0;
	return 0;
}

public OnPlayerCommandReceived(playerid, cmd[], params[], flags)
{
	new ste[128], playerName[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playerName, sizeof(playerName));

    if (commandChannel) {
        format(ste, sizeof(ste), "**[cmd] %s: /%s %s**", playerName, cmd, params);
		DCC_SendChannelMessage(commandChannel, ste);
	}
    if(pData[playerid][pKicked]) return 0;
	if(GetPlayerState(playerid) == PLAYER_STATE_WASTED)
	{
	    SCM(playerid, COLOR_LIGHTRED, "** You are currently dead. Commands are disabled.");
    	return 0;
	}
	if(pData[playerid][pMuted])
	{
	    SCM(playerid, COLOR_LIGHTRED, "** You are currently muted. Commands are disabled.");
        return 0;
	}
	if(++pData[playerid][pSpamTime] >= 4 && pData[playerid][pAdmin] < 2)
	{
	    pData[playerid][pMuted] = 10;
	    SCM(playerid, COLOR_YELLOW, "** You've been temporarily muted for ten seconds due to suspected flooding.");
	    return 0;
	}
	if(pData[playerid][pAdmin] < 7 && CheckServerAd(params))
	{
		new string[128];
		format(string,sizeof(string),"{AA3333}AdWarning{FFFF00}: %s (ID: %d): '{AA3333}/%s %s{FFFF00}'.", GetPlayerNameEx(playerid), playerid, cmd, params);
		SAM(COLOR_YELLOW, string, 2);
		//Log_Write("logs/hack.log", string);
        pData[playerid][pAdvertWarnings] ++;
		return 0;
	}

	pData[playerid][pAFKPos][0] = 0.0;
    pData[playerid][pAFKPos][1] = 0.0;
    pData[playerid][pAFKPos][2] = 0.0;
	return 1;
}

forward ANNHIDE(playerid);
public ANNHIDE(playerid)
{
	for(new i = 0; i < 3; i ++)
	{
		TextDrawHideForPlayer(playerid, ANN[i]);
	}
    return 1;
}

forward StatsTD(playerid);
public StatsTD(playerid)
{
	new string[128];
	if(pData[playerid][pFaction] == 2)
	{
		PlayerTextDrawHide(playerid, PlayerStatsTD[playerid]);
		format(string, sizeof(string), "POLICE DEPARTMENT");
		PlayerTextDrawColor(playerid, PlayerStatsTD[playerid], COLOR_BLUE);
		PlayerTextDrawShow(playerid, PlayerStatsTD[playerid]);
	}
	else if(pData[playerid][pFaction] == 2)
	{
		PlayerTextDrawHide(playerid, PlayerStatsTD[playerid]);
		format(string, sizeof(string), "FBI DEPARTMENT");
		PlayerTextDrawColor(playerid, PlayerStatsTD[playerid], 0x423189FF);
		PlayerTextDrawShow(playerid, PlayerStatsTD[playerid]);
	}
	else if(pData[playerid][pFaction] == 3)
	{
		PlayerTextDrawHide(playerid, PlayerStatsTD[playerid]);
		format(string, sizeof(string), "FIRE AND RESCUE");
		PlayerTextDrawColor(playerid, PlayerStatsTD[playerid], 0xF64A46FF);
		PlayerTextDrawShow(playerid, PlayerStatsTD[playerid]);
	}
	else if(pData[playerid][pFaction] == 4)
	{
		PlayerTextDrawHide(playerid, PlayerStatsTD[playerid]);
		format(string, sizeof(string), "SHERIFF DEPARTMENT");
		PlayerTextDrawColor(playerid, PlayerStatsTD[playerid], COLOR_AQUA);
		PlayerTextDrawShow(playerid, PlayerStatsTD[playerid]);
	}
	else if(pData[playerid][pFaction] == 1)
	{
		PlayerTextDrawHide(playerid, PlayerStatsTD[playerid]);
		format(string, sizeof(string), "GOVERNMENT");
		PlayerTextDrawColor(playerid, PlayerStatsTD[playerid], COLOR_LIME);
		PlayerTextDrawShow(playerid, PlayerStatsTD[playerid]);
	}
	else if(pData[playerid][pFaction] == 6)
	{
		PlayerTextDrawHide(playerid, PlayerStatsTD[playerid]);
		format(string, sizeof(string), "MECHANIC");
		PlayerTextDrawColor(playerid, PlayerStatsTD[playerid], 0x1CAC78FF);
		PlayerTextDrawShow(playerid, PlayerStatsTD[playerid]);
	}
	else if(pData[playerid][pFaction] == 5)
	{
		PlayerTextDrawHide(playerid, PlayerStatsTD[playerid]);
		format(string, sizeof(string), "BJMP");
		PlayerTextDrawColor(playerid, PlayerStatsTD[playerid], COLOR_GREEN);
		PlayerTextDrawShow(playerid, PlayerStatsTD[playerid]);
	}
	else if(pData[playerid][pAdmin] == 1)
	{
		PlayerTextDrawHide(playerid, PlayerStatsTD[playerid]);
		format(string, sizeof(string), "SERVER MODERATOR");
		PlayerTextDrawColor(playerid, PlayerStatsTD[playerid], COLOR_YELLOW);
		PlayerTextDrawShow(playerid, PlayerStatsTD[playerid]);
	}
	else if(pData[playerid][pAdmin] == 2)
	{
		PlayerTextDrawHide(playerid, PlayerStatsTD[playerid]);
		format(string, sizeof(string), "JUNIOR ADMINISTRATOR");
		PlayerTextDrawColor(playerid, PlayerStatsTD[playerid], COLOR_YELLOW);
		PlayerTextDrawShow(playerid, PlayerStatsTD[playerid]);
	}
	else if(pData[playerid][pAdmin] == 3)
	{
		PlayerTextDrawHide(playerid, PlayerStatsTD[playerid]);
		format(string, sizeof(string), "GENERAL ADMINISTRATOR");
		PlayerTextDrawColor(playerid, PlayerStatsTD[playerid], COLOR_YELLOW);
		PlayerTextDrawShow(playerid, PlayerStatsTD[playerid]);
	}
	else if(pData[playerid][pAdmin] == 4)
	{
		PlayerTextDrawHide(playerid, PlayerStatsTD[playerid]);
		format(string, sizeof(string), "SENIOR ADMINISTRATOR");
		PlayerTextDrawColor(playerid, PlayerStatsTD[playerid], COLOR_YELLOW);
		PlayerTextDrawShow(playerid, PlayerStatsTD[playerid]);
	}
	else if(pData[playerid][pAdmin] == 5)
	{
		PlayerTextDrawHide(playerid, PlayerStatsTD[playerid]);
		format(string, sizeof(string), "HEAD ADMINISTRATOR");
		PlayerTextDrawColor(playerid, PlayerStatsTD[playerid], COLOR_YELLOW);
		PlayerTextDrawShow(playerid, PlayerStatsTD[playerid]);
	}
	else if(pData[playerid][pAdmin] == 6)
	{
		PlayerTextDrawHide(playerid, PlayerStatsTD[playerid]);
		format(string, sizeof(string), "Assistant Director");
		PlayerTextDrawColor(playerid, PlayerStatsTD[playerid], COLOR_YELLOW);
		PlayerTextDrawShow(playerid, PlayerStatsTD[playerid]);
	}
	else if(pData[playerid][pAdmin] == 7)
	{
		PlayerTextDrawHide(playerid, PlayerStatsTD[playerid]);
		format(string, sizeof(string), "Executive Manager");
		PlayerTextDrawColor(playerid, PlayerStatsTD[playerid], COLOR_YELLOW);
		PlayerTextDrawShow(playerid, PlayerStatsTD[playerid]);
	}
	else if(pData[playerid][pAdmin] == 8)
	{
		PlayerTextDrawHide(playerid, PlayerStatsTD[playerid]);
		format(string, sizeof(string), "Executive Director");
		PlayerTextDrawColor(playerid, PlayerStatsTD[playerid], COLOR_YELLOW);
		PlayerTextDrawShow(playerid, PlayerStatsTD[playerid]);
	}
	else
	{
		PlayerTextDrawHide(playerid, PlayerStatsTD[playerid]);
		format(string, sizeof(string), "Citizen");
		PlayerTextDrawColor(playerid, PlayerStatsTD[playerid], COLOR_YELLOW);
		PlayerTextDrawShow(playerid, PlayerStatsTD[playerid]);
	}
	PlayerTextDrawSetString(playerid, PlayerStatsTD[playerid], string);
	return 1;
}

public OnPlayerCommandPerformed(playerid, cmd[], params[], result, flags)
{
	if(result == -1)
	{
		SCM(playerid, COLOR_SYNTAX, "Sorry, that command doesn't exist. Use /help for a list of commands.");
		PlayerPlaySound(playerid,1150,0.0,0.0,0.0);
	}
	return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if(newkeys & KEY_YES)
	{
	    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	    {
    		if(IsPlayerInRangeOfLocker(playerid, pData[playerid][pFaction]))
    		{
				switch(FactionInfo[pData[playerid][pFaction]][fType])
				{
				    case FACTION_POLICE, FACTION_SHERIFF, FACTION_MEDIC, FACTION_FEDERAL:
				    {
				        ShowPlayerDialog(playerid, DIALOG_FACTIONLOCKER, DIALOG_STYLE_LIST, "Locker", "Toggle duty\nEquipment\nUniforms\nClothing", "Select", "Cancel");
					}
					case FACTION_GOVERNMENT, FACTION_NEWS:
					{
					    ShowPlayerDialog(playerid, DIALOG_FACTIONLOCKER, DIALOG_STYLE_LIST, "Locker", "Equipment\nUniforms\nClothing", "Select", "Cancel");
					}
			 		case FACTION_DOC:
					{
				        ShowPlayerDialog(playerid, DIALOG_FACTIONLOCKER, DIALOG_STYLE_LIST, "Locker", "Equipment\nUniforms\nClothing", "Select", "Cancel");
					}
			 		case FACTION_MECHANIC:
					{
					    ShowPlayerDialog(playerid, DIALOG_FACTIONLOCKER, DIALOG_STYLE_LIST, ""SVRCLR"Locker", "Toggle duty\nEquipment\nUniforms", "Select", "Cancel");
					}
					case FACTION_HITMAN:
					{
					    ShowPlayerDialog(playerid, DIALOG_FACTIONLOCKER, DIALOG_STYLE_LIST, "Locker", "Order weapons\nChange clothes", "Select", "Cancel");
					}
				}
			}
		}
	}
	if(newkeys & KEY_NO)
	{
	    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	    {
	        if(PlayerHasJob(playerid, JOB_MINER))
	        {
	            if(IsPlayerInMiningArea(playerid))
	            {
	                if(pData[playerid][pMiningTime] > 0)
	                {
	                    return SCM(playerid, COLOR_SYNTAX, "You are mining already. Wait until you are done.");
	                }
	                if(pData[playerid][pMiningRock] > 0 && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
	                {
	                    return SCM(playerid, COLOR_SYNTAX, "You need to drop off your current rock first.");
	                }

	                GameTextForPlayer(playerid, "~w~Mining...", 6000, 3);
	                ApplyAnimation(playerid, "BASEBALL", "BAT_4", 4.1, 1, 0, 0, 0, 0, 1);
	                MiningProgress(playerid);

	                DisablePlayerCheckpoint(playerid);
	                SetPlayerAttachedObject(playerid, 9, 337, 6);

	                pData[playerid][pMiningTime] = 6;
	            }
	        }
	        if(PlayerHasJob(playerid, JOB_CONSTRUCTION))
	        {
	            if(IsPlayerInConstructionArea(playerid))
	            {
	                if(pData[playerid][pConstructionTime] > 0)
	                {
	                    return SCM(playerid, COLOR_SYNTAX, "Wait until you are done.");
	                }
	                if(pData[playerid][pConstruction] > 0 && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
	                {
	                    return SCM(playerid, COLOR_SYNTAX, "You need to drop off your current rock first.");
	                }

	                ApplyAnimation(playerid, "BASEBALL", "BAT_4", 4.1, 1, 0, 0, 0, 0, 1);

	                DisablePlayerCheckpoint(playerid);
	                SetPlayerAttachedObject(playerid, 9, 19631, 6);

	                pData[playerid][pConstructionTime] = 6;
	            }
	        }
			for(new i = 0; i < sizeof(jobLocations); i ++)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 3.0, jobLocations[i][jobX], jobLocations[i][jobY], jobLocations[i][jobZ]))
			    {
			        if(pData[playerid][pJob] != JOB_NONE)
			        {
						if(pData[playerid][pVerified] == 0)
						{
							return SendClientMessage(playerid, COLOR_AQUA, "You must verify account to your Discord before Joining a Job.");
						}
			            if(pData[playerid][pDonator] >= 2)
			        	{
			        	    if(pData[playerid][pSecondJob] != JOB_NONE)
			        	    {
			        	        return SCM(playerid, COLOR_SYNTAX, "You have two jobs already. Please quit one of them before getting another one.");
			        	    }
			        	    if(pData[playerid][pJob] == i)
			        	    {
			        	        return SCM(playerid, COLOR_SYNTAX, "You have this job already.");
			        	    }

			        	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET secondjob = %i WHERE uid = %i", i, pData[playerid][pID]);
							mysql_tquery(connectionID, queryBuffer);

							pData[playerid][pSecondJob] = i;
							SM(playerid, COLOR_AQUA, "You are now a {0080FF}%s{CCFFFF}. Use /jobhelp for a list of commands related to your new job.", jobLocations[i][jobName]);
			            }
			            else
			            {
			            	SCM(playerid, COLOR_SYNTAX, "You have a job already. Please quit your current job before getting another one.");
						}

						return 1;
					}

					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET job = %i WHERE uid = %i", i, pData[playerid][pID]);
					mysql_tquery(connectionID, queryBuffer);

					pData[playerid][pJob] = i;
					SM(playerid, COLOR_AQUA, "You are now a {0080FF}%s{CCFFFF}. Use /jobhelp for a list of commands related to your new job.", jobLocations[i][jobName]);
					return 1;
				}
			}
        	if(IsPlayerInRangeOfPoint(playerid, 4.0, 1256.1206,-1282.0250,1061.1492))  // LS
        	{
        		ShowPlayerDialog(playerid, DIALOG_HOSPITAL, DIALOG_STYLE_LIST, "Hospital", "Checkin (1,000)\nInsurance (2,000)\nBandage (1,000)\nMedkit (1,500)\nPainkiller (2,000)", "Select", "Cancel");
			}
        	if(IsPlayerInRangeOfPoint(playerid, 4.0, 1602.7094, 537.6455, 501.9966)) // FC
        	{
        		ShowPlayerDialog(playerid, DIALOG_HOSPITAL2, DIALOG_STYLE_LIST, "Hospital", "Checkin (1,000)\nInsurance (2,000)\nBandage (1,000)\nMedkit (1,500)\nPainkiller (2,000)", "Select", "Cancel");
			}
        	if(IsPlayerInRangeOfPoint(playerid, 4.0, 2870.2981, -1955.2510, 10.7259))
        	{
        		ShowPlayerDialog(playerid, DIALOG_MECHANIC, DIALOG_STYLE_LIST, "Mechanic", "Repairkit ($10,000)\nParts ($50,000)\nReatore Vehicle", "Select", "Cancel");
			}
			if(IsPlayerInRangeOfPoint(playerid, 4.0, 2050.3113, -1911.2911, 12.8366))
			{
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT tickets, modelid FROM vehicles WHERE ownerid = %i AND impounded = 1", pData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_DMVRELEASE, playerid);
			}
		}
		if(GetNearbyVen(playerid) >= 0)
		{
			ShowPlayerDialog(playerid, DIALOG_VENDOR, DIALOG_STYLE_LIST, ""TEAL"Street Food", "Burger "GREEN"85 PHP"WHITE"\nSISIG "GREEN"150 PHP"WHITE"\nPIATTOS "GREEN"25 PHP"WHITE"\nDONUT "GREEN"55 PHP"WHITE"\nBUKO JUICE "GREEN"20 PHP"WHITE"\nPINEAPPLE JUICE "GREEN"50 PHP"WHITE"\nSPRITE "GREEN"28 PHP"WHITE"\nNATURE SPRING "GREEN"15 PHP"WHITE"", "Proceed", "Back");
	     	return 1;
		}
		if(GetNearbyBar(playerid) >= 0)
		{
			ShowPlayerDialog(playerid, DIALOG_BAR, DIALOG_STYLE_LIST, "BAR", "Water ($25)\nSprunk ($50)\nBeer ($250)\nWine ($500)\nWhiskey ($500)", "Select", "Cancel");
	     	return 1;
		}
		if(IsAtChopPlace(playerid))
	    {
			if(lumberman[playerid] != false)
			{
	        	if(LumberJacking[playerid] == 1) return 1;
	        	if(Lumber1[playerid] == 7) return 1;
				if (PRESSED(KEY_NO))
				{
					ApplyAnimation(playerid,"CHAINSAW","CSAW_1",4.0, 1, 0, 0, 0, 0, 1);
					LumberJacking[playerid] = 1;
					SetTimerEx("StopAnim1", 800, 0, "i", playerid);
				}
		  	}
	   	}
	}
	// skating
	if(pData[playerid][pSkating] && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
	    //static bool:act;
	    SetPlayerArmedWeapon(playerid, 0);
        ApplyAnimationEx(playerid, "SKATE","skate_sprint",4.1,1,1,1,1,1);
        if(!pData[playerid][pSkateAct])
		{
            pData[playerid][pSkateAct] = true;
            RemovePlayerAttachedObject(playerid, 5);
            DestroyDynamicObject(pData[playerid][pSkateObj]);
            pData[playerid][pSkateObj] = CreateDynamicObject(19878,0,0,0,0,0,0, .playerid = playerid);
            AttachDynamicObjectToPlayer(pData[playerid][pSkateObj], playerid, -0.2,0,-0.9,0,0,90);
	    }
        if(oldkeys & KEY_NO)
		{
            ApplyAnimationEx(playerid, "CARRY","crry_prtial",4.0,0,0,0,0,0);
            if(pData[playerid][pSkateAct])
			{
				pData[playerid][pSkating] = false;
	            DestroyDynamicObject(pData[playerid][pSkateObj]);
	            RemovePlayerAttachedObject(playerid, 5);
	            PlayerPlaySound(playerid,21000,0,0,0);
	            SendClientMessage(playerid, COLOR_AQUA, "You are no longer skating.");
           }
        }
   	}
 	if(pData[playerid][pBrokenLeg] && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
    {
		if(newkeys & KEY_JUMP && !(oldkeys & KEY_JUMP))
		{
			ApplyAnimation(playerid, "GYMNASIUM", "gym_jog_falloff",4.1,0,1,1,0,0);

			if((gettime() - pData[playerid][pLastDamage]) < 3) {
				SetPlayerHealth(playerid, GetHealth(playerid) - 1.0);
				pData[playerid][pLastDamage] = gettime();
			}
		}
	}
	// Vehicle Tank Explode
	if(PRESSED(KEY_FIRE) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		new
			Float: vehPos[3],
			Float: vehAngle,
			Float: capOffsets[3];
		for(new vehicleID = 1; vehicleID <= MAX_VEHICLES; ++vehicleID)
		{
			if(GetVehiclePos(vehicleID, vehPos[0], vehPos[1], vehPos[2]))
			{
				GetVehicleZAngle(vehicleID, vehAngle);

				if(GetPetrolcapOffsets(GetVehicleModel(vehicleID), capOffsets[0], capOffsets[1], capOffsets[2]))
				{
					vehPos[0] += (floatcos(vehAngle, degrees) * capOffsets[0]) - (floatsin(vehAngle, degrees) * capOffsets[1]);
					vehPos[1] += (floatsin(vehAngle, degrees) * capOffsets[0]) + (floatcos(vehAngle, degrees) * capOffsets[1]);
					vehPos[2] += capOffsets[2];

					if(IsPlayerAimingAtPoint(playerid, vehPos[0], vehPos[1], vehPos[2], 0.1))
					{
						SetVehicleHealth(vehicleID, 0.0);
						CreateExplosion(vehPos[0], vehPos[1], vehPos[2], 0, random(3) + 4.0);
						break;
					}
				}
			}
		}
	}
	if(!pCBugging[playerid] && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && pData[playerid][pDueling] == INVALID_PLAYER_ID)
	{
	    if(!pData[playerid][pJoinedEvent])
		{
			if(PRESSED(KEY_FIRE))
			{
				switch(GetPlayerWeapon(playerid))
				{
					case WEAPON_DEAGLE, WEAPON_SHOTGUN, WEAPON_SNIPER:
					{
						ptsLastFiredWeapon[playerid] = gettime();
					}
				}
			}
			else if(PRESSED(KEY_CROUCH))
			{
				if((gettime() - ptsLastFiredWeapon[playerid]) < 1)
				{
				  	new Float:health;

	    			GetPlayerHealth(playerid, health);
		    		SetPlayerHealth(playerid, health - 9.0);
					//ApplyAnimationEx(playerid, "RIOT", "RIOT_ANGRY", 4.1, 0, 0, 0, 0, 0);
					pCBugging[playerid] = true;
					ApplyAnimation(playerid, "GANGS", "prtial_gngtlkE", 4.1, 1, 0, 0, 0, 1000);
					KillTimer(ptmCBugFreezeOver[playerid]);
					SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s (ID %d) is possibly C-bugging and has been kicked to the server.", GetPlayerNameEx(playerid), playerid);
					SM(playerid, COLOR_YELLOW, "You have been kicked to the server due to possibility of cbugging.");
					SMA(COLOR_LIGHTRED, "AdmCmd: %s has been kicked to the server by "SERVER_BOT". Reason: Possible C-Bugging(%s).", GetRPName(playerid), GetWeaponNameEx(pData[playerid][pCurrentWeapon]));
					Kick(playerid);
					ptmCBugFreezeOver[playerid] = SetTimerEx("CBugFreezeOver", 1500, false, "i", playerid);
				}
			}
		}
	    if(pData[playerid][pJoinedEvent] && !EventInfo[eCS])
		{
			if(PRESSED(KEY_FIRE))
			{
				switch(GetPlayerWeapon(playerid))
				{
					case WEAPON_DEAGLE, WEAPON_SHOTGUN, WEAPON_SNIPER:
					{
						ptsLastFiredWeapon[playerid] = gettime();
					}
				}
			}
		}
	}
	if(newkeys & KEY_LOOK_BEHIND)
	{
		if(pData[playerid][pTogglePhone])
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can't use your mobile phone right now as you have it toggled ((/tog phone)).");
		}
		if(!pData[playerid][pPhone])
		{
		    return SCM(playerid, COLOR_SYNTAX, "You don't have a cellphone and therefore can't use this command.");
		}
	    if(pData[playerid][pJailTime] > 0) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-jail.");
		if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED || pData[playerid][pMiningTime] > 0 || pData[playerid][pConstructionTime] > 0 || pData[playerid][pTazedTime] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pLootTime] > 0)
		    return SCM(playerid, COLOR_GREY, "You're currently unable to use phone at this moment.");

		SendClientMessage(playerid, COLOR_BLUE, "[TIP] {FFFFFF}Press ESC to disable the cursor and use /cursor to get your cursor back active.");

		for(new i = 0; i < 20; i++) {
			TextDrawShowForPlayer(playerid, PhoneTD[i]);
		}
		TextDrawShowForPlayer(playerid, banktd);
		TextDrawShowForPlayer(playerid, mesaagetd);
		TextDrawShowForPlayer(playerid, calltd);
		TextDrawShowForPlayer(playerid, contactstd);
		TextDrawShowForPlayer(playerid, phoneclosetd);
		TextDrawShowForPlayer(playerid, musictd);
		TextDrawShowForPlayer(playerid, twittertd);
		SelectTextDraw(playerid, COLOR_LIGHTBLUE);
		ShowActionBubble(playerid, "* %s takes out their phone.", GetRPName(playerid));
	}
	if(newkeys & KEY_YES)
	{
	    if(pData[playerid][pLoopAnim])
	    {
	        pData[playerid][pLoopAnim] = 0;

		    ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);
		    TextDrawHideForPlayer(playerid, AnimationTD);
		}
	}
	/*if(newkeys & KEY_FIRE)
	{
	    for(new Sz; Sz < MAX_SAFEZONES; Sz++)
 		{
  			if(IsPlayerInRangeOfPoint(playerid, SafezoneInfo[Sz][szSize], SafezoneInfo[Sz][szPosX], SafezoneInfo[Sz][szPosY], SafezoneInfo[Sz][szPosZ]))// && !IsPlayerInRangeOfPoint(issuerid, SafezoneInfo[Sz][szSize], SafezoneInfo[Sz][szPosX], SafezoneInfo[Sz][szPosY], SafezoneInfo[Sz][szPosZ]))
  			{
  			    ClearAnimations(playerid);
			}
		}
	}*/
 	if((gettime() - pData[playerid][pLastPress]) >= 1)
	{
		if(newkeys & KEY_YES)
		{
			if(!EnterCheck(playerid)) ExitCheck(playerid);

			new id = Gate_Nearest(playerid);
			if (id != -1)
			{
				if (strlen(GateData[id][gatePass]))
				{
					ShowPlayerDialog(playerid, GatePass, DIALOG_STYLE_INPUT, "Enter Password", "Please enter the password for this gate below:", "Submit", "Cancel");
				}
				else
				{
					if (GateData[id][gateFaction] != -1 && pData[playerid][pFaction] != GetFactionByID(GateData[id][gateFaction]))
						return SCM(playerid, COLOR_SYNTAX, "You can't open this gate/door.");

					Gate_Operate(id);

					switch (GateData[id][gateOpened])
					{
						case 0:
							SCM(playerid, COLOR_SYNTAX, "You have closed the gate/door!");

						case 1:
							SCM(playerid, COLOR_SYNTAX, "You have opened the gate/door!");
					}
				}
			}
			pData[playerid][pLastPress] = gettime(); // Prevents spamming. Sometimes keys get messed up and register twice.
		}
	}
	if(newkeys & KEY_YES && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		callcmd::pass(playerid, "\1");
		if(IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_DOC && GetFactionType(playerid) != FACTION_GOVERNMENT)
		{
			new panels,doors,lights,tires;
			new vehicleid = GetPlayerVehicleID(playerid), Float:x, Float:y, Float:z, Float:tmp;

			if(!VehicleHasWindows(vehicleid))
			{
		 		return SCM(playerid, COLOR_SYNTAX, "This vehicle cannot have a siren attached to it.");
			}

			if(!IsValidDynamicObject(vehicleSiren[vehicleid]))
			{
			    GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, z, z, z);
				GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_FRONTSEAT, x, y, tmp);

				vehicleSiren[vehicleid] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
				AttachDynamicObjectToVehicle(vehicleSiren[vehicleid], vehicleid, -x, y, z / 1.9, 0.0, 0.0, 0.0);

			    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s places a detachable siren on the roof of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
			}
			else
			{
			    DestroyDynamicObject(vehicleSiren[vehicleid]);
			    vehicleSiren[vehicleid] = INVALID_OBJECT_ID;
			    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s detaches the siren from the roof of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
			}
			if(!Flasher[vehicleid])
			{
				GetVehicleDamageStatus(vehicleid,panels,doors,lights,tires);
				SetVehicleParams(vehicleid, VEHICLE_LIGHTS, true);
				SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s turns on the emergency lights of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
				Flasher[vehicleid] = 1;
			}
			else
			{
				GetVehicleDamageStatus(vehicleid,panels,doors,lights,tires);
				UpdateVehicleDamageStatus(vehicleid, panels, doors, 5, tires);
				Flasher[vehicleid] = 0;
				SetVehicleParams(vehicleid, VEHICLE_LIGHTS, false);
				SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s turns off the emergency lights of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
			}
		}
		//pData[playerid][pLastPress] = gettime(); // Prevents spamming. Sometimes keys get messed up and register twice.
	}
	if(newkeys & KEY_NO && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		callcmd::engine(playerid);
		//pData[playerid][pLastPress] = gettime(); // Prevents spamming. Sometimes keys get messed up and register twice.
	}
   	if(PollOn && PollVoted[playerid] == 0)
	{
	    if(newkeys == KEY_YES)
	    {
			PollY++;
			PollVoted[playerid] = 1;
			SCM(playerid, COLOR_SYNTAX, "You Have Voted Yes.");
		}
	    if(newkeys == KEY_NO)
	    {
			PollN++;
			PollVoted[playerid] = 1;
			SCM(playerid, SERVER_COLOR, "** "WHITE" You Have Voted No.");
	    }
	}

	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	// GPS Navigator
	if(pNavState[playerid])
	{
		KillTimer(pNavTimer[playerid]);
		DestroyObject(NavigatorObject[playerid]);
		PlayerTextDrawHide(playerid, NavigatorTD[playerid]);	
		PlayerPlaySound(playerid,1150,0.0,0.0,0.0);
		DisablePlayerCheckpoint(playerid);
		pNavState[playerid] = 0;
	}
    if(pData[playerid][pKicked]) return 0;
	if(newstate == PLAYER_STATE_DRIVER) {
	    pvehicleid[playerid] = GetPlayerVehicleID(playerid);
	    pmodelid[playerid] = GetVehicleModel(pvehicleid[playerid]);
		CheckVehiclePanel(playerid);
	} else {
	    pvehicleid[playerid] = 0;
	    pmodelid[playerid] = 0;
	}

	if(newstate == PLAYER_STATE_DRIVER)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
		// Displaying the Speedo
		for(new i = 0; i < 16; i ++) {
			PlayerTextDrawShow(playerid, SpeedTD[playerid][i]);
			pData[playerid][pGPSOn] = 1;
			PlayerTextDrawSetString(playerid, pData[playerid][pText][0], "Loading...");
			ShowGPSTextdraw(playerid);
			pData[playerid][pWatchOn] = 1;
			TextDrawShowForPlayer(playerid, TimeTD);
			return 1;
		}
        if(GetNearbyCdVehicles(playerid)) // Delaership
        {
			new vehid = GetNearbyCdVehicles(playerid);
            new string[500];

            SetPVarInt(playerid, "Carprice", DealershipInfo[vehid][vehPrice]);
    		SetPVarInt(playerid, "Carmodel", DealershipInfo[vehid][vehModelID]);

            format(string, sizeof(string), "Hello, %s. Since you're sitting on a dealership vehicle, we might thought your buying. Please press 'Yes' too confirm and press 'No' to decline.\n\
            Would you like to buy %s for $%s?", GetRPName(playerid), DealershipInfo[vehid][vehModelName], FormatNumber(DealershipInfo[vehid][vehPrice]));
            ShowPlayerDialog(playerid, DIALOG_CARBUY, DIALOG_STYLE_MSGBOX, "Car Dealership", string, "Yes", "No");
			return 1;
        }
        if(pData[playerid][pVerified] == 0)
		{
			SCM(playerid, COLOR_SYNTAX, "You must verify your account to your discord before entering a vehicle");
			ClearAnimations(playerid);
			RemovePlayerFromVehicle(playerid);
			return 1;
		}
	    if((pizzaVehicles[0] <= vehicleid <= pizzaVehicles[5]) && !PlayerHasJob(playerid, JOB_FOODPANDA))
	    {
	        SCM(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as you are not a Foodpanda Deliver.");
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }
		if((towtruck[0] <= vehicleid <= towtruck[2]) && (FactionInfo[pData[playerid][pFaction]][fType] != FACTION_MECHANIC))
	    {
	        SCM(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as you are not a Mechanic.");
	        RemovePlayerFromVehicle(playerid);
	    }
	    if((courierVehicles[0] <= vehicleid <= courierVehicles[6]) && !PlayerHasJob(playerid, JOB_COURIER))
	    {
	        SCM(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as you are not a Trucker.");
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }
	    if((taxiVehicles[0] <= vehicleid <= taxiVehicles[3]) && !PlayerHasJob(playerid, JOB_TAXIDRIVER))
	    {
	        SCM(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as you are not a Taxi Driver.");
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }
  	    if((forkliftVehicles[0] <= vehicleid <= forkliftVehicles[5]) && !PlayerHasJob(playerid, JOB_FORKLIFTER))
	    {
	        SendClientMessage(playerid, COLOR_GREY, "You cannot operate this vehicle as you are not a Forklifter.");
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }
	    if((testVehicles[0] <= vehicleid <= testVehicles[8]) && !pData[playerid][pDrivingTest])
	    {
	        SCM(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as you are not taking your drivers test.");
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }
	    if(VehicleInfo[vehicleid][vFactionType] != FACTION_NONE && GetFactionType(playerid) != VehicleInfo[vehicleid][vFactionType])
	    {
	        SendClientMessage(playerid, COLOR_GREY, "You cannot operate this vehicle as it doesn't belong to your faction.");
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }
	    if(VehicleInfo[vehicleid][vGang] >= 0 && pData[playerid][pGang] != VehicleInfo[vehicleid][vGang])
	    {
	        SCM(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as it doesn't belong to your gang.");
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }

	    if(VehicleInfo[vehicleid][vJob] >= 0 && pData[playerid][pJob] != VehicleInfo[vehicleid][vJob])
	    {
	        SM(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as you are not a %s.", GetJobName(VehicleInfo[vehicleid][vJob]));
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }
		if (PlayerHasJob(playerid, JOB_FORKLIFTER) && IsAForkliftVehicle(GetPlayerVehicleID(playerid)))
		{
		 	StartForkliftJob(playerid);
			SendInfoMessage(playerid, "Please drive to the {FF0000}checkpoint{FFFFFF} to load the cargo.");
		}
		
	    if(!VehicleHasEngine(vehicleid))
	    {
	        SetVehicleParams(vehicleid, VEHICLE_ENGINE, true);
		}
		else if(!GetVehicleParams(vehicleid, VEHICLE_ENGINE))
		{
		    if(testVehicles[0] <= vehicleid <= testVehicles[8])
		    {
		        pData[playerid][pCP] = CHECKPOINT_TEST;
		        pData[playerid][pTestVehicle] = vehicleid;
		        pData[playerid][pTestCP] = 0;

		        SetVehicleParams(vehicleid, VEHICLE_ENGINE, true);
				SetPlayerCheckpoint(playerid, drivingTestCPs[pData[playerid][pTestCP]][0], drivingTestCPs[pData[playerid][pTestCP]][1], drivingTestCPs[pData[playerid][pTestCP]][2], 3.0);
				SCM(playerid, COLOR_AQUA, "Drive through the checkpoints to proceed with the test. Try not to damage your vehicle.");
		    }
		    else
		    {
                //GameTextForPlayer(playerid, "You can toggle the vehicle engine by pressing 'N' or typing /engine.", 3000, 2);
			}
	    }
   	 	if(IsVehicleOwner(playerid, vehicleid))
	    {
			new string[128];
			format(string, sizeof(string),"You are the owner of this vehicle. | Vehicle ID %i.", GetVehicleName(vehicleid), vehicleid);
			SCM(playerid, COLOR_YELLOW, string);
	    }
	    if(VehicleInfo[vehicleid][vFactionType] != FACTION_NONE && GetFactionType(playerid) == VehicleInfo[vehicleid][vFactionType])
	    {
	        SendClientMessage(playerid, COLOR_YELLOW, "You are on the faction of this vehicle.");
	    }
	    if(VehicleInfo[vehicleid][vGang] >= 0 && pData[playerid][pGang] == VehicleInfo[vehicleid][vGang])
	    {
	        SCM(playerid, COLOR_YELLOW, "You are on the family of this vehicle.");
	    }
   	    if(!pData[playerid][pCarLicense] && !pData[playerid][pDrivingTest])
	    {
	        SendClientMessage(playerid, COLOR_LIGHTRED, "You didn't take an exam for Driving License. Beware of cops");
	    	//ClearAnimations(playerid);
	    }
	    if(IsVehicleOwner(playerid, vehicleid) && VehicleInfo[vehicleid][vTickets] > 0)
	    {
	        SM(playerid, COLOR_AQUA, "This vehicle has $%i in unpaid tickets. You can pay your tickets using /paytickets.", VehicleInfo[vehicleid][vTickets]);
	    }
	    if(VehicleHasEngine(vehicleid) && vehicleFuel[vehicleid] <= 0)
	    {
	        GameTextForPlayer(playerid, "~b~Out of fuel", 5000, 3);
	    	//TogglePlayerControllable(playerid, 0);
	    }
		SetPlayerArmedWeapon(playerid, 0);
	}
	else if(oldstate == PLAYER_STATE_DRIVER)
	{
     	if(pData[playerid][pDrivingTest])
	    {
         	pData[playerid][pDrivingTest] = 0;
         	SetVehicleToRespawn(pData[playerid][pTestVehicle]);
         	SCM(playerid, COLOR_LIGHTRED, "** You have exited the vehicle and therefore failed the test.");
		}
		// Hiding the Speedo
		for(new i = 0; i < 16; i ++) {
			PlayerTextDrawHide(playerid, SpeedTD[playerid][i]);
   			pData[playerid][pGPSOn] = 0;
			HideGPSTextdraw(playerid);
			pData[playerid][pWatchOn] = 0;
			TextDrawHideForPlayer(playerid, TimeTD);
			HidePlayerProgressBar(playerid, PlayerBar:ProgressfreeBar[playerid][0]);
		}
	}
	else if(newstate == PLAYER_STATE_PASSENGER)
	{
	    new driverid = GetVehicleDriver(GetPlayerVehicleID(playerid));

		if((driverid != INVALID_VEHICLE_ID && pData[driverid][pTaxiFare] > 0 && pData[driverid][pTaxiPassenger] == INVALID_PLAYER_ID) && (GetVehicleModel(GetPlayerVehicleID(playerid)) == 420 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 438))
		{
		    if(pData[playerid][pCash] < pData[driverid][pTaxiFare])
		    {
		        SCM(playerid, COLOR_SYNTAX, "You can't afford to pay the fare. Therefore you can't ride this taxi.");
		        RemovePlayerFromVehicle(playerid);
		        return 1;
		    }

			pData[driverid][pTaxiPassenger] = playerid;
			pData[driverid][pTaxiBill] = pData[driverid][pTaxiFare];
			pData[driverid][pTaxiTime] = 0;

			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s enters %s's taxi cab.", GetRPName(playerid), GetRPName(driverid));
			SM(playerid, COLOR_YELLOW, "You will be charged the fare price of "SVRCLR"$%i{CCFFFF} every 15 seconds during your ride.", pData[driverid][pTaxiFare]);
			SM(driverid, COLOR_AQUA, "*%s has entered your taxi. You will earn $%i every 15 seconds during the ride.", GetRPName(playerid), pData[driverid][pTaxiFare]);
		}

     	switch(GetPlayerWeapon(playerid))
     	{
     	    case 22, 28, 29, 32:
     	        SetPlayerArmedWeapon(playerid, GetScriptWeapon(playerid));
	        default:
				SetPlayerArmedWeapon(playerid, 0);
		}
	}

	if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

	    foreach(new i : Player)
	    {
	        if(GetPlayerState(i) == PLAYER_STATE_SPECTATING && pData[i][pSpectating] == playerid)
	        {
	            PlayerSpectateVehicle(i, vehicleid);
			}
		}

		if(!isnull(vehicleStream[vehicleid]) && pData[playerid][pStreamType] == MUSIC_NONE && !pData[playerid][pToggleMusic])
  		{
  		    pData[playerid][pStreamType] = MUSIC_VEHICLE;
    		PlayAudioStreamForPlayer(playerid, vehicleStream[vehicleid]);
      		SCM(playerid, COLOR_WHITE, "** You are now tuned in to this vehicle's radio. /stopmusic to stop listening.");
	    }
	}

	else if(oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER)
	{
	    foreach(new i : Player)
	    {
	        if(GetPlayerState(i) == PLAYER_STATE_SPECTATING && pData[i][pSpectating] == playerid)
	        {
	            PlayerSpectatePlayer(i, playerid);
			}
		}

		if(pData[playerid][pStreamType] == MUSIC_VEHICLE)
		{
		    StopAudioStreamForPlayer(playerid);
		    pData[playerid][pStreamType] = MUSIC_NONE;
		}
	}

	return 1;
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
	if(!(-3.0 <= fScaleX <= 3.0)) fScaleX = fScaleX < -3.0 ? 0.0 : 3.0;
	if(!(-3.0 <= fScaleY <= 3.0)) fScaleY = fScaleY < -3.0 ? 0.0 : 3.0;
	if(!(-3.0 <= fScaleZ <= 3.0)) fScaleZ = fScaleZ < -3.0 ? 0.0 : 3.0;

	switch(pData[playerid][pEditType])
	{
	    case EDIT_CLOTHING_PREVIEW:
	    {
	        RemovePlayerAttachedObject(playerid, 9);

	        if(response)
	        {
	            new businessid = GetInsideBusiness(playerid);

	            if(businessid >= 0 && BusinessInfo[businessid][bType] == BUSINESS_CLOTHES)
	            {
	                if(BusinessInfo[businessid][bProducts] <= 0)
	                {
	                    return SCM(playerid, COLOR_SYNTAX, "This business is out of stock now.");
					}
	                if(pData[playerid][pCash] < BusinessInfo[businessid][bPrices][1])
	                {
	                    return SCM(playerid, COLOR_SYNTAX, "You couldn't afford to purchase this item.");
	                }

	                for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
	                {
	                    if(!ClothingInfo[playerid][i][cExists])
	                    {
	                        ClothingInfo[playerid][i][cModel] = modelid;
	                        ClothingInfo[playerid][i][cBone] = boneid;
	                        ClothingInfo[playerid][i][cPosX] = fOffsetX;
	                        ClothingInfo[playerid][i][cPosY] = fOffsetY;
	                        ClothingInfo[playerid][i][cPosZ] = fOffsetZ;
	                        ClothingInfo[playerid][i][cRotX] = fRotX;
	                        ClothingInfo[playerid][i][cRotY] = fRotY;
	                        ClothingInfo[playerid][i][cRotZ] = fRotZ;
	                        ClothingInfo[playerid][i][cScaleX] = fScaleX;
	                        ClothingInfo[playerid][i][cScaleY] = fScaleY;
	                        ClothingInfo[playerid][i][cScaleZ] = fScaleZ;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO clothing VALUES(null, %i, '%e', %i, %i, 0, '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f')", pData[playerid][pID], clothingArray[pData[playerid][pSelected]][clothingName], modelid, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);
							mysql_tquery(connectionID, queryBuffer, "OnPlayerBuyClothingItem", "isiii", playerid, clothingArray[pData[playerid][pSelected]][clothingName], BusinessInfo[businessid][bPrices][1], businessid, i);
							return 1;
						}
					}

					SCM(playerid, COLOR_SYNTAX, "You have no more clothing slots available. Therefore you can't buy this.");
	            }
	        }
	        else
	        {
	            ShowDialogToPlayer(playerid, DIALOG_BUYCLOTHING);
			}
		}
		case EDIT_CLOTHING:
		{
		    new clothingid = pData[playerid][pSelected];

		    if(response)
		    {
		        ClothingInfo[playerid][clothingid][cPosX] = fOffsetX;
		        ClothingInfo[playerid][clothingid][cPosY] = fOffsetY;
		        ClothingInfo[playerid][clothingid][cPosZ] = fOffsetZ;
		        ClothingInfo[playerid][clothingid][cRotX] = fRotX;
		        ClothingInfo[playerid][clothingid][cRotY] = fRotY;
		        ClothingInfo[playerid][clothingid][cRotZ] = fRotZ;
		        ClothingInfo[playerid][clothingid][cScaleX] = fScaleX;
		        ClothingInfo[playerid][clothingid][cScaleY] = fScaleY;
		        ClothingInfo[playerid][clothingid][cScaleZ] = fScaleZ;

		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET pos_x = '%f', pos_y = '%f', pos_z = '%f', rot_x = '%f', rot_y = '%f', rot_z = '%f', scale_x = '%f', scale_y = '%f', scale_z = '%f' WHERE id = %i", fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ, ClothingInfo[playerid][clothingid][cID]);
		        mysql_tquery(connectionID, queryBuffer);

		        SM(playerid, COLOR_SYNTAX, "Changes saved.");
		    }

			if(!ClothingInfo[playerid][clothingid][cAttached])
	        {
	            RemovePlayerAttachedObject(playerid, 9);
			}
			else
			{
			    RemovePlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex]);
			    SetPlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex], ClothingInfo[playerid][clothingid][cModel], ClothingInfo[playerid][clothingid][cBone], ClothingInfo[playerid][clothingid][cPosX], ClothingInfo[playerid][clothingid][cPosY], ClothingInfo[playerid][clothingid][cPosZ],
					ClothingInfo[playerid][clothingid][cRotX], ClothingInfo[playerid][clothingid][cRotY], ClothingInfo[playerid][clothingid][cRotZ], ClothingInfo[playerid][clothingid][cScaleX], ClothingInfo[playerid][clothingid][cScaleY], ClothingInfo[playerid][clothingid][cScaleZ]);
			}
		}
		case EDIT_COP_CLOTHING:
	    {
	        RemovePlayerAttachedObject(playerid, 9);

	        if(response)
	        {
                for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
                {
                    if(!ClothingInfo[playerid][i][cExists])
                    {
                        ClothingInfo[playerid][i][cModel] = modelid;
                        ClothingInfo[playerid][i][cBone] = boneid;
                        ClothingInfo[playerid][i][cPosX] = fOffsetX;
                        ClothingInfo[playerid][i][cPosY] = fOffsetY;
                        ClothingInfo[playerid][i][cPosZ] = fOffsetZ;
                        ClothingInfo[playerid][i][cRotX] = fRotX;
                        ClothingInfo[playerid][i][cRotY] = fRotY;
                        ClothingInfo[playerid][i][cRotZ] = fRotZ;
                        ClothingInfo[playerid][i][cScaleX] = fScaleX;
                        ClothingInfo[playerid][i][cScaleY] = fScaleY;
                        ClothingInfo[playerid][i][cScaleZ] = fScaleZ;

                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO clothing VALUES(null, %i, '%e', %i, %i, 0, '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f')", pData[playerid][pID], copClothing[pData[playerid][pSelected]][cName], modelid, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);
						mysql_tquery(connectionID, queryBuffer, "OnPlayerAttachCopClothing", "isi", playerid, copClothing[pData[playerid][pSelected]][cName], i);
						return 1;
					}
				}

				SendClientMessage(playerid, COLOR_GREY, "You have no more clothing slots available. Therefore you can't attach this.");
	        }
	        else
	        {
	            ShowCopClothingMenu(playerid);
			}
		}
	}
    return 1;
}

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	if(response == EDIT_RESPONSE_FINAL)
	{
	    if (pData[playerid][pEditGraffiti] != -1 && GraffitiData[pData[playerid][pEditGraffiti]][graffitiExists])
	    {
			GraffitiData[pData[playerid][pEditGraffiti]][graffitiPos][0] = x;
			GraffitiData[pData[playerid][pEditGraffiti]][graffitiPos][1] = y;
			GraffitiData[pData[playerid][pEditGraffiti]][graffitiPos][2] = z;
			GraffitiData[pData[playerid][pEditGraffiti]][graffitiPos][3] = rz;

			Graffiti_Refresh(pData[playerid][pEditGraffiti]);
			Graffiti_Save(pData[playerid][pEditGraffiti]);
		}
		else if (pData[playerid][pEditGate] != -1 && GateData[pData[playerid][pEditGate]][gateExists])
	    {
	        switch (pData[playerid][pEditType])
	        {
	            case 1:
	            {
	                new id = pData[playerid][pEditGate];

	                GateData[pData[playerid][pEditGate]][gatePos][0] = x;
	                GateData[pData[playerid][pEditGate]][gatePos][1] = y;
	                GateData[pData[playerid][pEditGate]][gatePos][2] = z;
	                GateData[pData[playerid][pEditGate]][gatePos][3] = rx;
	                GateData[pData[playerid][pEditGate]][gatePos][4] = ry;
	                GateData[pData[playerid][pEditGate]][gatePos][5] = rz;

	                DestroyDynamicObject(GateData[id][gateObject]);
					GateData[id][gateObject] = CreateDynamicObject(GateData[id][gateModel], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5], GateData[id][gateWorld], GateData[id][gateInterior]);

					Gate_Save(id);
                    SM(playerid, COLOR_WHITE, "You have edited the position of gate ID: %d.", id);
				}
				case 2:
	            {
	                new id = pData[playerid][pEditGate];

	                GateData[pData[playerid][pEditGate]][gateMove][0] = x;
	                GateData[pData[playerid][pEditGate]][gateMove][1] = y;
	                GateData[pData[playerid][pEditGate]][gateMove][2] = z;
	                GateData[pData[playerid][pEditGate]][gateMove][3] = rx;
	                GateData[pData[playerid][pEditGate]][gateMove][4] = ry;
	                GateData[pData[playerid][pEditGate]][gateMove][5] = rz;

	                DestroyDynamicObject(GateData[id][gateObject]);
					GateData[id][gateObject] = CreateDynamicObject(GateData[id][gateModel], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5], GateData[id][gateWorld], GateData[id][gateInterior]);

					Gate_Save(id);
                    SM(playerid, COLOR_WHITE, "You have edited the moving position of gate ID: %d.", id);
				}
			}
		}
	}
	switch(pData[playerid][pEditType])
	{
	    case EDIT_FURNITURE_PREVIEW:
	    {
			if(response != EDIT_RESPONSE_UPDATE)
			{
			    DestroyDynamicObject(pData[playerid][pEditObject]);
				pData[playerid][pEditObject] = INVALID_OBJECT_ID;

			    if(response == EDIT_RESPONSE_FINAL)
			    {
			        new houseid = GetInsideHouse(playerid);

					if(houseid >= 0 && HasFurniturePerms(playerid, houseid))
					{
					    if(pData[playerid][pCash] < furnitureArray[pData[playerid][pSelected]][fPrice])
		                {
		                    return SCM(playerid, COLOR_SYNTAX, "You couldn't afford to purchase this item.");
		                }

					    new
					        string[16];

					    GivePlayerCash(playerid, -furnitureArray[pData[playerid][pSelected]][fPrice]);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO furniture VALUES(null, %i, %i, '%e', %i, '%f', '%f', '%f', '%f', '%f', '%f', %i, %i, 0, 0)", HouseInfo[houseid][hID], furnitureArray[pData[playerid][pSelected]][fModel], furnitureArray[pData[playerid][pSelected]][fName], furnitureArray[pData[playerid][pSelected]][fPrice], x, y, z, rx, ry, rz, HouseInfo[houseid][hInterior], HouseInfo[houseid][hWorld]);
						mysql_tquery(connectionID, queryBuffer);
						mysql_tquery(connectionID, "SELECT * FROM furniture WHERE id = LAST_INSERT_ID()", "OnQueryFinished", "ii", THREAD_LOAD_FURNITURE, HouseInfo[houseid][hLabels]);

						format(string, sizeof(string), "~r~-$%i", furnitureArray[pData[playerid][pSelected]][fPrice]);
						GameTextForPlayer(playerid, string, 5000, 1);

						if(!strcmp(furnitureArray[pData[playerid][pSelected]][fCategory], "Doors & Gates"))
						{
							SCM(playerid, COLOR_WHITE, "** You can use /lopen to control your door and /lock to unlock or lock it.");
						}
					}
			    }
			    else if(response == EDIT_RESPONSE_CANCEL)
			    {
			        ShowDialogToPlayer(playerid, DIALOG_BUYFURNITURE2);
				}
			}
		}
		case EDIT_FURNITURE:
		{
		    if(response != EDIT_RESPONSE_UPDATE)
			{
				if(response == EDIT_RESPONSE_FINAL)
				{
				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE furniture SET pos_x = '%f', pos_y = '%f', pos_z = '%f', rot_x = '%f', rot_y = '%f', rot_z = '%f' WHERE id = %i", x, y, z, rx, ry, rz, Streamer_GetExtraInt(objectid, E_OBJECT_INDEX_ID));
					mysql_tquery(connectionID, queryBuffer);
					SCM(playerid, COLOR_SYNTAX, "Changes saved.");
				}

		        ReloadFurniture(objectid, HouseInfo[pData[playerid][pFurnitureHouse]][hLabels]);
			}
		}
		case EDIT_LAND_OBJECT_PREVIEW:
	    {
			if(response != EDIT_RESPONSE_UPDATE)
			{
			    DestroyDynamicObject(pData[playerid][pEditObject]);
				pData[playerid][pEditObject] = INVALID_OBJECT_ID;

			    if(response == EDIT_RESPONSE_FINAL)
			    {
			        new landid = pData[playerid][pObjectLand];

					if(landid >= 0 && HasLandPerms(playerid, landid))
					{
					    if(pData[playerid][pCash] < furnitureArray[pData[playerid][pSelected]][fPrice])
		                {
		                    return SCM(playerid, COLOR_SYNTAX, "You couldn't afford to purchase this item.");
		                }
		                if(!IsPointInLand(landid, x, y))
		                {
		                    return SCM(playerid, COLOR_SYNTAX, "The object has exceeded the boundaries for your land.");
						}

					    new
					        string[16];

					    GivePlayerCash(playerid, -furnitureArray[pData[playerid][pSelected]][fPrice]);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO landobjects VALUES(null, %i, %i, '%e', %i, '%f', '%f', '%f', '%f', '%f', '%f', 0, 0, '%f', '%f', '%f', '-1000.0', '-1000.0', '-1000.0')", LandInfo[landid][lID], furnitureArray[pData[playerid][pSelected]][fModel], furnitureArray[pData[playerid][pSelected]][fName], furnitureArray[pData[playerid][pSelected]][fPrice], x, y, z, rx, ry, rz, x, y, z - 10.0);
						mysql_tquery(connectionID, queryBuffer);
						mysql_tquery(connectionID, "SELECT * FROM landobjects WHERE id = LAST_INSERT_ID()", "OnQueryFinished", "ii", THREAD_LOAD_LANDOBJECTS, LandInfo[landid][lLabels]);

						format(string, sizeof(string), "~r~-$%i", furnitureArray[pData[playerid][pSelected]][fPrice]);
						GameTextForPlayer(playerid, string, 5000, 1);

						if(!strcmp(furnitureArray[pData[playerid][pSelected]][fCategory], "Doors & Gates"))
						{
							if(IsGateModel(furnitureArray[pData[playerid][pSelected]][fModel]))
							{
								SCM(playerid, COLOR_WHITE, "** You can use /lopen to open and close your gate. To change the destination coordinates, use /land and choose 'Edit object'.");
							}
						    else
							{
								SCM(playerid, COLOR_WHITE, "** You can use /lopen to control your door and /lock to unlock or lock it.");
						    }
						}
					}
			    }
			    else if(response == EDIT_RESPONSE_CANCEL)
			    {
     			    if(pData[playerid][pMenuType] == 0)
						ShowObjectSelectionMenu(playerid, MODEL_SELECTION_LANDOBJECTS);
					else
			        ShowDialogToPlayer(playerid, DIALOG_LANDBUILD2);
				}
			}
		}
		case EDIT_LAND_OBJECT:
		{
		    if(response != EDIT_RESPONSE_UPDATE)
			{
				if(response == EDIT_RESPONSE_FINAL)
				{
				    if(!IsPointInLand(pData[playerid][pObjectLand], x, y))
        			{
           				SCM(playerid, COLOR_SYNTAX, "The object has exceeded the boundaries for your land.");
					}
					else
					{
					    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE landobjects SET pos_x = '%f', pos_y = '%f', pos_z = '%f', rot_x = '%f', rot_y = '%f', rot_z = '%f' WHERE id = %i", x, y, z, rx, ry, rz, Streamer_GetExtraInt(objectid, E_OBJECT_INDEX_ID));
						mysql_tquery(connectionID, queryBuffer);
						SCM(playerid, COLOR_SYNTAX, "Changes saved.");
					}
				}

		        ReloadLandObject(objectid, LandInfo[pData[playerid][pObjectLand]][lLabels]);
			}
		}
		case EDIT_LAND_GATE_MOVE:
		{
		    if(response != EDIT_RESPONSE_UPDATE)
			{
				if(response == EDIT_RESPONSE_FINAL)
				{
				    if(!IsPointInLand(pData[playerid][pObjectLand], x, y))
        			{
           				SCM(playerid, COLOR_SYNTAX, "The object has exceeded the boundaries for your land.");
					}
					else
					{
					    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE landobjects SET move_x = '%f', move_y = '%f', move_z = '%f', move_rx = '%f', move_ry = '%f', move_rz = '%f' WHERE id = %i", x, y, z, rx, ry, rz, Streamer_GetExtraInt(objectid, E_OBJECT_INDEX_ID));
						mysql_tquery(connectionID, queryBuffer);
						SCM(playerid, COLOR_SYNTAX, "Changes saved.");
					}
				}

		        ReloadLandObject(objectid, LandInfo[pData[playerid][pObjectLand]][lLabels]);
			}
		}
		case EDIT_OBJECT_PREVIEW:
		{
			if(response == EDIT_RESPONSE_FINAL)
			{
				if (pData[playerid][pEditmObject] != -1 && ObjectData[pData[playerid][pEditmObject]][mobjExists])
				{
					new string[48];
					new id = pData[playerid][pEditmObject];
					ObjectData[pData[playerid][pEditmObject]][mobjPos][0] = x;
					ObjectData[pData[playerid][pEditmObject]][mobjPos][1] = y;
					ObjectData[pData[playerid][pEditmObject]][mobjPos][2] = z;
					ObjectData[pData[playerid][pEditmObject]][mobjPos][3] = rx;
					ObjectData[pData[playerid][pEditmObject]][mobjPos][4] = ry;
					ObjectData[pData[playerid][pEditmObject]][mobjPos][5] = rz;

					DestroyDynamicObject(ObjectData[id][mobjObject]);
					ObjectData[id][mobjObject] = CreateDynamicObject(ObjectData[id][mobjModel], ObjectData[id][mobjPos][0], ObjectData[id][mobjPos][1], ObjectData[id][mobjPos][2], ObjectData[id][mobjPos][3], ObjectData[id][mobjPos][4], ObjectData[id][mobjPos][5], ObjectData[id][mobjWorld], ObjectData[id][mobjInterior]);

					DestroyDynamic3DTextLabel(ObjectData[id][mobjname2]);
					format(string, sizeof(string), "[%i]\nID: %i", ObjectData[id][mobjModel], id);
					ObjectData[id][mobjname2] = CreateDynamic3DTextLabel(string, COLOR_GREY, ObjectData[id][mobjPos][0], ObjectData[id][mobjPos][1], ObjectData[id][mobjPos][2], 5.0);

					Object_Save(id);
					SM(playerid, COLOR_WHITE, "You have edited the position of object ID: %d.", id);
				}
			}
		}
	}
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
    if(pData[playerid][pKicked]) return 0;

	// This is a fix to a known exploit where inserting '%' in the dialog box would crash the server.
	for(new i = 0, l = strlen(inputtext); i < l; i ++)
	{
	    if(inputtext[i] == '%') inputtext[i] = '#';
	}
//	new string2[256];
// GPS Navigator
	if(dialogid == DIALOG_GPSNAV)
	{
		if(response)
		{
			if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "You must be in a vehicle to use navigation!");
			if(GetPVarInt(playerid, "NavData") == 1)
			{
				pNavID[playerid] = listitem;
				SetPlayerCheckpoint(playerid, NavigatorData1[pNavID[playerid]][NavigatorX], NavigatorData1[pNavID[playerid]][NavigatorY], NavigatorData1[pNavID[playerid]][NavigatorZ], 3.0);
				if(IsValidObject(NavigatorObject[playerid])) DestroyObject(NavigatorObject[playerid]);
				NavigatorObject[playerid] = CreateObject(19134, 0, 0, 0, 0, 0, 0);
				Refresh(playerid);
				KillTimer(pNavTimer[playerid]);
				pNavTimer[playerid] = SetTimerEx("Refresh", 100, true, "d", playerid);
				PlayerTextDrawShow(playerid, NavigatorTD[playerid]);
				PlayerPlaySound(playerid,1139,0.0,0.0,0.0);
				pNavState[playerid] = 1;
			}
			else if(GetPVarInt(playerid, "NavData") == 2)
			{
				pNavID[playerid] = listitem;
				SetPlayerCheckpoint(playerid, NavigatorData2[pNavID[playerid]][NavigatorX], NavigatorData2[pNavID[playerid]][NavigatorY], NavigatorData2[pNavID[playerid]][NavigatorZ], 3.0);
				if(IsValidObject(NavigatorObject[playerid])) DestroyObject(NavigatorObject[playerid]);
				NavigatorObject[playerid] = CreateObject(19134, 0, 0, 0, 0, 0, 0);
				Refresh(playerid);
				KillTimer(pNavTimer[playerid]);
				pNavTimer[playerid] = SetTimerEx("Refresh", 100, true, "d", playerid);
				PlayerTextDrawShow(playerid, NavigatorTD[playerid]);
				PlayerPlaySound(playerid,1139,0.0,0.0,0.0);
				pNavState[playerid] = 1;
			}
		}
	}
	if(dialogid == DIALOG_GASLIST)
    {
        if(response)
        {
            SetGasolineCheckPoints(playerid, listitem+1);
        }
    }
	if(dialogid == DIALOG_VOICECHAT2)
	{
	    if(response)
		{
		    if(listitem == 0)
		    {
				SCM(playerid, COLOR_LIGHTGREEN, "[Voice Chat]: "WHITE"Whisper Activated");
		    	SvUpdateDistanceForLStream(lstream[playerid], 8.0);
			}
			if(listitem == 1)
		    {
				SCM(playerid, COLOR_LIGHTGREEN, "[Voice Chat]: "WHITE"Normal Activated");
		    	SvUpdateDistanceForLStream(lstream[playerid], 18.0);
			}
			if(listitem == 2)
		    {
				SCM(playerid, COLOR_LIGHTGREEN, "[Voice Chat]: "WHITE"Shout Activated");
			    SvUpdateDistanceForLStream(lstream[playerid], 30.0);
			}
		}
	}
	if(dialogid == DIALOG_VERIFICATION)
	{
		new string[128];
		if(response)
		{
			switch(listitem)
			{
				case 0: return 1; // Name
				case 2:
				{
					if(pData[playerid][pVerified])
					{
						SetPVarInt(playerid, "Unverification", 1);
						format(string, sizeof(string), "Welcome to "SERVER_NAME" %s,\nDo you want to be unverified?\nYou will not be able to view some channels such as:\n> Global Chatroom\n> Report System\n> Newbie Chatroom\n.", GetRPName(playerid), pData[playerid][pCode]);
						return ShowPlayerDialog(playerid, DIALOG_VERIFICATION1, DIALOG_STYLE_MSGBOX, "Account Verification", string, "Okay", "");
					}
					else
					{
						if(pData[playerid][pCode] == 0)
						{
							return SendClientMessage(playerid, COLOR_SYNTAX, "Your current code has been reseted. Please use /refreshcode for new code.");
						}
						SetPVarInt(playerid, "Verification", 1);
						format(string, sizeof(string), "Welcome to "SERVER_NAME" %s,\nYou can verify your account using this code %i.", GetRPName(playerid), pData[playerid][pCode]);
						return ShowPlayerDialog(playerid, DIALOG_VERIFICATION1, DIALOG_STYLE_MSGBOX, "Account Verification", string, "Okay", "");
					}
				}
				case 4:
				{
					callcmd::stats(playerid, "\1");
				}
			}
		}
	}
	if(dialogid == DIALOG_VERIFICATION1)
	{
		if(response)
		{
			if(GetPVarInt(playerid, "Verification") == 1)
			{
				DeletePVar(playerid, "Verification");
				new string[248];
				format(string, sizeof(string), "Name:\t%s\n\
				Discord: %s#%i\n\
				Verification:\t%s\n\
				"WHITE"     \n\
				Stats\n\
				"WHITE"Toggle Voicechat", GetRPName(playerid), pData[playerid][pDiscordName], pData[playerid][pDiscordTag], (pData[playerid][pVerified] ? (""GREEN"Verified"WHITE"") : (""RED"Not Verified")));
				ShowPlayerDialog(playerid, DIALOG_VERIFICATION, DIALOG_STYLE_LIST, "Account Verification", string, "Select", "Cancel");
			}
			else if(GetPVarInt(playerid, "Unverification") == 1)
			{
				new string[64], str[128];

				// Unlinking Discord Account
				new DCC_Guild:guild = DCC_FindGuildById("905667779103977522"); // Now to get the guild ID // 
				new DCC_Channel:channel = DCC_FindChannelById("936583015390412830");
                new DCC_Role:role = DCC_FindRoleById("934433462843220010"); // Verified Role
                new DCC_Role:role1 = DCC_FindRoleById("905667779103977530"); // Unverified Role
				new DCC_User:user = DCC_FindUserById(pData[playerid][pDiscordID]);
				DCC_RemoveGuildMemberRole(guild, user, role);
				DCC_AddGuildMemberRole(guild, user, role1);
				string = "";
				DCC_SetGuildMemberNickname(guild, user, string);
				format(str, sizeof(str), "AdmBot: Player **%s** has unlinked their account to <@%s>.", GetPlayerNameEx(playerid), pData[playerid][pDiscordID]);
				DCC_SendChannelMessage(channel, str);
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET verify = 0, discordname = 'None', discordtag = '0000', discordid = '0' WHERE uid = %i", pData[playerid][pID]);
            	mysql_tquery(connectionID, queryBuffer);

				// In-Game Unverification
				DeletePVar(playerid, "Unverification");
				pData[playerid][pVerified] = 0;
				strcpy(pData[playerid][pDiscordName], "None", 128);
				pData[playerid][pDiscordTag] = 0;
				pData[playerid][pDiscordID] = 0;
				pData[playerid][pCode] = 0;
				return SCM(playerid, COLOR_YELLOW, "You are not Un-Verified. You can verify Yourself again using '/settings'");
			}
		}
	}
	// Driver's Test
	if(dialogid == DIALOG_WEP_TEST)
	{
		if(response)
		{
			if(pData[playerid][pCash] >= 25000)
			{
				pData[playerid][pDrivingTime] = 0;
				pData[playerid][pWeaponTest] = 1;
				pData[playerid][pDrivingScore] = 0;
				GivePlayerCash(playerid, -25000);
				SendClientMessageEx(playerid, COLOR_LIGHTGREEN, "[Weapon License Test] You have been charged $25,000, You are now taking the weapon license test.");
				ShowPlayerDialog(playerid, DIALOG_WEP_QUESTION_1, DIALOG_STYLE_LIST, "{00AAAA}What will you do if you seen a DMer? ", "Report to administrator\nRevenge\nDont mind it\n", "Select", "");
			}
		}
	}
	if(dialogid == DIALOG_WEP_QUESTION_1)
	{
		if(response)
		{
			if(listitem == 0)
			{
				pData[playerid][pDrivingScore] ++;
 			}
			ShowPlayerDialog(playerid, DIALOG_WEP_QUESTION_2, DIALOG_STYLE_LIST, "{00AAAA}What will happen if someone shot you randomly?", "Nothing will do\nHe/she will go to jail\nWill fireback to her/him", "Select", "");
		}
		else ShowPlayerDialog(playerid, DIALOG_WEP_QUESTION_1, DIALOG_STYLE_LIST, "{00AAAA}What will you do if you seen a DMer? ", "Report to administrator\nRevenge\nDont mind it\n", "Select", "");

	}
	if(dialogid == DIALOG_WEP_QUESTION_2)
	{
		if(response)
		{
			if(listitem == 1)
			{
				pData[playerid][pDrivingScore] ++;
  			}
			ShowPlayerDialog(playerid, DIALOG_WEP_QUESTION_3, DIALOG_STYLE_LIST, "{00AAAA}What are the benefits having a gun license?", "To have clearance to DM other players\nAll of the above\nFor self defense?", "Select", "");
		}
		else ShowPlayerDialog(playerid, DIALOG_WEP_QUESTION_3, DIALOG_STYLE_LIST, "{00AAAA}What are the benefits having a gun license?", "To have clearance to DM other players\nAll of the above\nFor self defense?", "Select", "");
	}

	if(dialogid == DIALOG_WEP_QUESTION_3)
	{
		if(response)
		{
			if(listitem == 2)
			{
				pData[playerid][pDrivingScore] ++;
			}
			ShowPlayerDialog(playerid, DIALOG_WEP_QUESTION_4, DIALOG_STYLE_LIST, "{00AAAA}What are the consenquences if you did not use properly the gun license?", "Nothing\nYou will go to jail\nCNP will revoke your license", "Select", "");
		}
		else ShowPlayerDialog(playerid, DIALOG_WEP_QUESTION_4, DIALOG_STYLE_LIST, "{00AAAA}What are the consenquences if you did not use properly the gun license?", "Nothing\nYou will go to jail\nCNP will revoke your license", "Select", "");
	}
	if(dialogid == DIALOG_WEP_QUESTION_4)
	{
		if(response)
		{
			if(listitem == 2)
			{
				pData[playerid][pDrivingScore] ++;
			}
			ShowPlayerDialog(playerid, DIALOG_WEP_QUESTION_5, DIALOG_STYLE_LIST, "{00AAAA}What if someone OOC insult you what will you do?", " Trashtalk back\nReport to administrator\nShoot him/he", "Select", "");
		}
		else ShowPlayerDialog(playerid, DIALOG_WEP_QUESTION_5, DIALOG_STYLE_LIST, "{00AAAA}What if someone OOC insult you what will you do?", " Trashtalk back\nReport to administrator\nShoot him/he", "Select", "");
	}

	if(dialogid == DIALOG_WEP_QUESTION_5)
	{
		if(response)
		{
			if(listitem == 1)
			{
				pData[playerid][pDrivingScore] ++;
			}
			ShowPlayerDialog(playerid, DIALOG_WEP_QUESTION_6, DIALOG_STYLE_LIST, "{00AAAA}What is Brandishing of firearms:", "You takes out your weapon in public without a reason\nYou drop your gun\nYou shoot someone", "Select", "");
		}
		else ShowPlayerDialog(playerid, DIALOG_WEP_QUESTION_6, DIALOG_STYLE_LIST, "{00AAAA}What is Brandishing of firearms:", "You takes out your weapon in public without a reason\nYou drop your gun\nYou shoot someone", "Select", "");
	}
	if(dialogid == DIALOG_WEP_QUESTION_6)
	{
		if(response)
		{
			if(listitem == 0)
			{
				pData[playerid][pDrivingScore] ++;
			}
			ShowPlayerDialog(playerid, DIALOG_WEP_QUESTION_7, DIALOG_STYLE_LIST, "{00AAAA}What is Carrying unlicensed firearm?", "\nYou have a weapon with gun license\nYou have a weapon without gun license\nYou  bought a weapon in gun store", "Select", "");
		}
		else ShowPlayerDialog(playerid, DIALOG_WEP_QUESTION_7, DIALOG_STYLE_LIST, "{00AAAA}What is Carrying unlicensed firearm?", "\nYou have a weapon with gun license\nYou have a weapon without gun license\nYou  bought a weapon in gun store", "Select", "");
	}
	if(dialogid == DIALOG_WEP_QUESTION_7)
	{
		if(response)
		{
			if(listitem == 1)
			{
				pData[playerid][pDrivingScore] ++;
			}
			ShowPlayerDialog(playerid, DIALOG_WEP_QUESTION_8, DIALOG_STYLE_LIST, "{00AAAA}Where can you buy a weapon?", "Ammunation\nGrocery Store\nBlack Market", "Select", "");
		}
		else ShowPlayerDialog(playerid, DIALOG_WEP_QUESTION_8, DIALOG_STYLE_LIST, "{00AAAA}Where can you buy a weapon?", "Ammunation\nGrocery Store\nBlack Market", "Select", "");
	}
	if(dialogid == DIALOG_WEP_QUESTION_8)
	{
		if(response)
		{
			if(listitem == 0)
			{
				pData[playerid][pDrivingScore] ++;
				if(pData[playerid][pDrivingScore] >= 8)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTGREEN, "[Weapon Test] Congratulations! You have passed the weapon exam.");

					pData[playerid][pDrivingCP] = 0;
					pData[playerid][pWeaponLicense] = 1;
					pData[playerid][pWeaponLicenseTime] = 1209600;
					pData[playerid][pDrivingScore] = 0;
				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gunlicense = 1, gunlicensetime = %i WHERE uid = %i", pData[playerid][pWeaponLicenseTime], pData[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);
				}
				else
				{
					pData[playerid][pWeaponTest] = 0;

					SendClientMessageEx(playerid, COLOR_REALRED, "[Weapon Test] You failed to pass the weapon license exam.");
					pData[playerid][pDrivingFail] ++;
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_REALRED, "[Weapon License Test] You failed to pass the weapon license exam.");
				pData[playerid][pDrivingFail] ++;
			}
		}
		else ShowPlayerDialog(playerid, DIALOG_WEP_QUESTION_8, DIALOG_STYLE_LIST, "{00AAAA}Where can you buy a weapon?", "Ammunation\nGrocery Store\nBlack Market", "Select", "");
	}
   	if(dialogid == DIALOG_TYPE_MAIN)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0: // Hoods
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
        	    }
        	    case 1: // Vents
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
        	    }
        	    case 2: // Lights
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_LIST, "Lights", "Round\nSquare\n \nBack", "Apply", "Close");
        	    }
        	    case 3: // Exhausts
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
        	    }
				case 4: // Front Bumpers
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
        	    }
				case 5: // Rear Bumpers
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
        	    }
				case 6: // Roofs
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
        	    }
				case 7: // Spoilers
        	    {
				ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
        	    }
				case 8: // Side Skirts
        	    {
				ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
        	    }
				case 9: // Bullbars
        	    {
				ShowPlayerDialog(playerid, DIALOG_TYPE_BULLBARS, DIALOG_STYLE_LIST, "Bullbars", "Locos Chrome Grill\nLocos Chrome Bars\nLocos Chrome Lights \nLocos Chrome Bullbar\n \nBack", "Apply", "Close");
        	    }
				case 10: // Wheels
        	    {
     			ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
        	    }
				case 11: // Car Stereo
        	    {
				ShowPlayerDialog(playerid, DIALOG_TYPE_CSTEREO, DIALOG_STYLE_LIST, "Car Stereo", "Bass Boost\n \nBack", "Apply", "Close");
        	    }
				case 12: // Hydraulics
        	    {
 				ShowPlayerDialog(playerid, DIALOG_TYPE_HYDRAULICS, DIALOG_STYLE_LIST, "Hydaulics", "Hydaulics\n \nBack", "Apply", "Close");
        	    }
				case 13: // Nitrous Oxide
        	    {
					ShowPlayerDialog(playerid, DIALOG_TYPE_NITRO, DIALOG_STYLE_LIST, "Nitrous Oxide", "2x Nitrous\n5x Nitrous\n10x Nitrous\n \nBack", "Apply", "Close");
        	    }
			}
		}
	}
	if(dialogid == DIALOG_TYPE_EXHAUSTS)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)
        	{
        	    case 0:
        	    {
                 if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 558 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 560)
		        {
		            new car = GetPlayerVehicleID(playerid);
		            if(pmodelid[playerid] == 562)
		            {
		            	AddVehicleComponent(car,1034);
		            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		            	SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
		            	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 565)
					{
					    AddVehicleComponent(car,1046);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 559)
					{
					    AddVehicleComponent(car,1065);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 561)
					{
					    AddVehicleComponent(car,1064);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 560)
					{
					    AddVehicleComponent(car,1028);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 558)
					{
					    AddVehicleComponent(car,1089);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				 	    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
	    			}
					}
	  			 	else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 1:
        	    {
                 if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 558 ||
				pmodelid[playerid] == 560)

			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 562)
			        {
			            AddVehicleComponent(car,1037);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 565)
					{
					    AddVehicleComponent(car,1045);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 559)
					{
					    AddVehicleComponent(car,1066);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 561)
					{
					    AddVehicleComponent(car,1059);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 560)
					{
					    AddVehicleComponent(car,1029);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 558)
					{
					    AddVehicleComponent(car,1092);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 2:
        	    {
                 if(pmodelid[playerid] == 575 ||
				pmodelid[playerid] == 534 ||
				pmodelid[playerid] == 567 ||
				pmodelid[playerid] == 536 ||
				pmodelid[playerid] == 576 ||
				pmodelid[playerid] == 535)

			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 575) // Brodway
			        {
			            AddVehicleComponent(car,1044);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		             	SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 534)// Remington
					{
					    AddVehicleComponent(car,1126);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 567)// Savanna
					{
					    AddVehicleComponent(car,1129);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	                    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 536) // Blade
					{
					    AddVehicleComponent(car,1104);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 535) // Slamvan
					{
 						AddVehicleComponent(car,1113);
 						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 576) // Tornado
					{
					    AddVehicleComponent(car,1136);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					   	SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
        	    }
				case 3:
        	    {
                 if(pmodelid[playerid] == 575 ||
				pmodelid[playerid] == 534 ||
				pmodelid[playerid] == 567 ||
				pmodelid[playerid] == 536 ||
				pmodelid[playerid] == 576 ||
				pmodelid[playerid] == 535)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 575) // Brodway
			        {
			            AddVehicleComponent(car,1043);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 534)// Remington
					{
					    AddVehicleComponent(car,1127);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 567)// Savanna
					{
					    AddVehicleComponent(car,1132);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 536) // Blade
					{
					    AddVehicleComponent(car,1105);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"[INFO]Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}

					else if(pmodelid[playerid] == 535) // Slamvan
					{
					    AddVehicleComponent(car,1114);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}

					else if(pmodelid[playerid] == 576) // Tornado
					{
					    AddVehicleComponent(car,1135);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}

					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 4:// Large
        	    {
     				if(
					pmodelid[playerid] == 401 ||//bravura
					pmodelid[playerid] == 518 ||//buccaneer
					pmodelid[playerid] == 527 ||//cadrona
					pmodelid[playerid] == 542 ||//clover
					pmodelid[playerid] == 589 ||//club
					pmodelid[playerid] == 400 ||//landstalker
					pmodelid[playerid] == 517 ||//majestic
					pmodelid[playerid] == 603 ||//phoenix
					pmodelid[playerid] == 426 ||//premier
					pmodelid[playerid] == 547 ||//primo
					pmodelid[playerid] == 405 ||//sentinel
					pmodelid[playerid] == 580 ||//stafford
					pmodelid[playerid] == 550 ||//sunrise
					pmodelid[playerid] == 549 ||//tampa
					pmodelid[playerid] == 477)//zr-350
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 401) // bravura
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"[INFO]Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 518) // buccaneer
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 527) // cadrona
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 542) // clover
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
           			 	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 589) // club
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 400) // landstalker
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 603) // phoenix
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 436) // previon
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 547) // primo
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 405) // sentinel
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 580) // stafford
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 550) // sunrise
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 549) // tampa
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 477) // zr-350
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 517) // majestic
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
        	    	}
        	    	else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
				}
        	    case 5: // Medium
        	    {
                        if(
					pmodelid[playerid] == 527 ||//cadrona
					pmodelid[playerid] == 542 ||//clover
					pmodelid[playerid] == 400 ||//landstalker
					pmodelid[playerid] == 426 ||//premier
					pmodelid[playerid] == 436 ||//previon
					pmodelid[playerid] == 547 ||//primo
					pmodelid[playerid] == 405 ||//sentinel
					pmodelid[playerid] == 477)//zr-350
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 527) // cadrona
			        	{
			            AddVehicleComponent(car,1021);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"[INFO]Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 542) // clover
			        	{
			            AddVehicleComponent(car,1021);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 400) // landstalker
			        	{
			            AddVehicleComponent(car,1021);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 426) // premier
			        	{
			            AddVehicleComponent(car,1021);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
           			 	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 436) // previon
			        	{
			            AddVehicleComponent(car,1021);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 547) // primo
			        	{
			            AddVehicleComponent(car,1021);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 405) // sentinel
			        	{
			            AddVehicleComponent(car,1021);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 477) // zr350
			        	{
			            AddVehicleComponent(car,1021);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
        	    	}
        	    		else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
        	    }
        	    case 6: // Small
        	    {
                        if(
					pmodelid[playerid] == 436)//previon
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 436) // previon
			        	{
			            AddVehicleComponent(car,1022);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
        	    	}
        	    		else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
        	    }
        	    case 7: // Twin
        	    {
                        if(
					pmodelid[playerid] == 518 ||//buccaneer
					pmodelid[playerid] == 415 ||//cheetah
					pmodelid[playerid] == 542 ||//clover
					pmodelid[playerid] == 546 ||//intruder
					pmodelid[playerid] == 400 ||//landstalker
					pmodelid[playerid] == 517 ||//majestic
					pmodelid[playerid] == 603 ||//phoenix
					pmodelid[playerid] == 426 ||//premier
					pmodelid[playerid] == 436 ||//previon
					pmodelid[playerid] == 547 ||//primo
					pmodelid[playerid] == 405 ||//sentinel
					pmodelid[playerid] == 550 ||//sunrise
					pmodelid[playerid] == 549 ||//tampa
					pmodelid[playerid] == 477)//zr-350
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 518) // buccaneer
			        	{
			            AddVehicleComponent(car,1019);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"[INFO]Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 415) // cheetah
			        	{
			            AddVehicleComponent(car,1019);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 542) // clover
			        	{
			            AddVehicleComponent(car,1019);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 546) // intruder
			        	{
			            AddVehicleComponent(car,1019);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
           			 	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 400) // landstalker
			        	{
			            AddVehicleComponent(car,1019);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 517) // majestic
			        	{
			            AddVehicleComponent(car,1019);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 603) // phoenix
			        	{
			            AddVehicleComponent(car,1019);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 426) // premier
			        	{
			            AddVehicleComponent(car,1019);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 436) // previon
			        	{
			            AddVehicleComponent(car,1019);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 547) // primo
			        	{
			            AddVehicleComponent(car,1019);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 405 ) // sentinel
			        	{
			            AddVehicleComponent(car,1019);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 550) // sunrise
			        	{
			            AddVehicleComponent(car,1019);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 549) // tampa
			        	{
			            AddVehicleComponent(car,1019);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 477) // zr-350
			        	{
			            AddVehicleComponent(car,1019);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
        	    	}
        	    		else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
        	    }
        	    case 8: // Upswept
        	    {
                        if(
                    pmodelid[playerid] == 401 ||//bravura
					pmodelid[playerid] == 518 ||//buccaneer
					pmodelid[playerid] == 415 ||//cheetah
					pmodelid[playerid] == 542 ||//clover
					pmodelid[playerid] == 546 ||//intruder
					pmodelid[playerid] == 400 ||//landstalker
					pmodelid[playerid] == 517 ||//majestic
					pmodelid[playerid] == 603 ||//phoenix
					pmodelid[playerid] == 426 ||//premier
					pmodelid[playerid] == 415 ||//cheetah
					pmodelid[playerid] == 547 ||//primo
					pmodelid[playerid] == 405 ||//sentinel
					pmodelid[playerid] == 550 ||//sunrise
					pmodelid[playerid] == 549 ||//tampa
					pmodelid[playerid] == 477)//zr-350
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 415) // cheetah
			        	{
			            AddVehicleComponent(car,1018);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"[INFO]Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 518) // buccaneer
			        	{
			            AddVehicleComponent(car,1018);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 527) // cadrona
			        	{
			            AddVehicleComponent(car,1018);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 542) // clover
			        	{
			            AddVehicleComponent(car,1018);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
           			 	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 589) // club
			        	{
			            AddVehicleComponent(car,1018);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 400) // landstalker
			        	{
			            AddVehicleComponent(car,1018);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 603) // phoenix
			        	{
			            AddVehicleComponent(car,1018);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 546) // intruder
			        	{
			            AddVehicleComponent(car,1018);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 547) // primo
			        	{
			            AddVehicleComponent(car,1018);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 405) // sentinel
			        	{
			            AddVehicleComponent(car,1018);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 580) // stafford
			        	{
			            AddVehicleComponent(car,1018);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 550) // sunrise
			        	{
			            AddVehicleComponent(car,1018);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 549) // tampa
			        	{
			            AddVehicleComponent(car,1018);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 477) // zr-350
			        	{
			            AddVehicleComponent(car,1018);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 517) // majestic
			        	{
			            AddVehicleComponent(car,1018);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
        	    	}
        	    		else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
        	    }
				case 9: // _
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
        	    }
        	    case 10: // Back
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, "Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
        	    }
			}
		}
	}
	if(dialogid == DIALOG_TYPE_FBUMPS)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
                 if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 558 ||
				pmodelid[playerid] == 560)
				{
		            new car = GetPlayerVehicleID(playerid);
		            if(pmodelid[playerid] == 562) // Elegy
		            {
		            	AddVehicleComponent(car,1171);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	              		SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
		            	ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 565) // Flash
					{
					    AddVehicleComponent(car,1153);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 559) // Jester
					{
					    AddVehicleComponent(car,1160);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 561) // Stratum
					{
					    AddVehicleComponent(car,1155);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 560) // Sultan
					{
					    AddVehicleComponent(car,1169);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 558) // Uranus
					{
					    AddVehicleComponent(car,1166);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				 	    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 1:
        	    {
                 if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 558 ||
				pmodelid[playerid] == 560)
		        {

			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 562) // Elegy
			        {
			            AddVehicleComponent(car,1172);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 565) // Flash
					{
					    AddVehicleComponent(car,1152);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 559) // Jetser
					{
					    AddVehicleComponent(car,1173);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 561) // Stratum
					{
					    AddVehicleComponent(car,1157);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 560) // Sultan
					{
					    AddVehicleComponent(car,1170);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 558)  // Uranus
					{
					    AddVehicleComponent(car,1165);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 2:
        	    {
                 if(pmodelid[playerid] == 575 ||
				pmodelid[playerid] == 534 ||
				pmodelid[playerid] == 567 ||
				pmodelid[playerid] == 536 ||
				pmodelid[playerid] == 576 ||
				pmodelid[playerid] == 535)
				{
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 575) // Brodway
			        {
			            AddVehicleComponent(car,1174);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 534)// Remington
					{
					    AddVehicleComponent(car,1179);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 567)// Savanna
					{
					    AddVehicleComponent(car,1189);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 536) // Blade
					{
					    AddVehicleComponent(car,1182);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 535) // Slamvan
					{
					    AddVehicleComponent(car,1115);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 576) // Tornado
					{
					    AddVehicleComponent(car,1191);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
        	    }
				case 3:
        	    {
                 if(pmodelid[playerid] == 575 ||
				pmodelid[playerid] == 534 ||
				pmodelid[playerid] == 567 ||
				pmodelid[playerid] == 535 ||
				pmodelid[playerid] == 536 ||
	            pmodelid[playerid] == 576 ||
				pmodelid[playerid] == 576)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 575) // Brodway
			        {
			            AddVehicleComponent(car,1175);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 534)// Remington
					{
					    AddVehicleComponent(car,1185);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 567)// Savanna
					{
					    AddVehicleComponent(car,1188);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 536) // Blade
					{
					    AddVehicleComponent(car,1181);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}

				    else if(pmodelid[playerid] == 535) // Slamvan
					{
					    AddVehicleComponent(car,1116);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 576) // Tornado
					{
					    AddVehicleComponent(car,1190);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}

					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
        	    }
				case 4:
        	    {
             	ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
        	    }
				case 5:
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, "Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
        	    }
			}
		}
	}
	if(dialogid == DIALOG_TYPE_RBUMPS)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
                 if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 558 ||
				pmodelid[playerid] == 560)
		        {

		            new car = GetPlayerVehicleID(playerid);
		            if(pmodelid[playerid] == 562) // Elegy
		            {
		            	AddVehicleComponent(car,1149);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	              		SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
		            	ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 565) // Flash
					{
					    AddVehicleComponent(car,1150);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 559) // Jester
					{
					    AddVehicleComponent(car,1159);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 561) // Stratum
					{
					    AddVehicleComponent(car,1154);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 560) // Sultan
					{
					    AddVehicleComponent(car,1141);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 558) // Uranus
					{
					    AddVehicleComponent(car,1168);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				 	    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 1:
        	    {
                 if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 558 ||
				pmodelid[playerid] == 560)
		        {


			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 562) // Elegy
			        {
			            AddVehicleComponent(car,1148);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"YComponent successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 565) // Flash
					{
					    AddVehicleComponent(car,1151);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 559) // Jetser
					{
					    AddVehicleComponent(car,1161);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 561) // Stratum
					{
					    AddVehicleComponent(car,1156);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 560) // Sultan
					{
					    AddVehicleComponent(car,1140);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 558)  // Uranus
					{
					    AddVehicleComponent(car,1167);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 2:
        	    {
                 if(pmodelid[playerid] == 575 ||
				pmodelid[playerid] == 534 ||
				pmodelid[playerid] == 567 ||
				pmodelid[playerid] == 536 ||
				pmodelid[playerid] == 576 ||
				pmodelid[playerid] == 535)
		        {


              		new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 575) // Brodway
			        {
			            AddVehicleComponent(car,1176);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 534)// Remington
					{
					    AddVehicleComponent(car,1180);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 567)// Savanna
					{
					    AddVehicleComponent(car,1187);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 536) // Blade
					{
					    AddVehicleComponent(car,1184);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 535) // Slamvan
					{
					    AddVehicleComponent(car,1109);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 576) // Tornado
					{
					    AddVehicleComponent(car,1192);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
     }
						else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
        	    }
				case 3:
        	    {
                 if(pmodelid[playerid] == 575 ||
				pmodelid[playerid] == 534 ||
				pmodelid[playerid] == 567 ||
				pmodelid[playerid] == 536 ||
				pmodelid[playerid] == 576 ||
				pmodelid[playerid] == 535)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 575) // Brodway
			        {
			            AddVehicleComponent(car,1177);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
						else if(pmodelid[playerid] == 534)// Remington
					{
					    AddVehicleComponent(car,1178);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
						else if(pmodelid[playerid] == 567)// Savanna
					{
					    AddVehicleComponent(car,1186);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
						else if(pmodelid[playerid] == 536) // Blade
					{
					    AddVehicleComponent(car,1183);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}

						else if(pmodelid[playerid] == 535) // Slamvan
					{
					    AddVehicleComponent(car,1110);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}

						else if(pmodelid[playerid] == 576) // Tornado
					{
					    AddVehicleComponent(car,1193);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}

					}
						else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
        	    }
				case 4:
        	    {
            	    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
        	    }
				case 5:
        	    {
     				ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, "Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
        	    }
 			}
		}
	}
	if(dialogid == DIALOG_TYPE_ROOFS)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
                 if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 558 ||
				pmodelid[playerid] == 560)
		        {

		            new car = GetPlayerVehicleID(playerid);
		            if(pmodelid[playerid] == 562) // Elegy
		            {
		            	AddVehicleComponent(car,1038);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	              		SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
		            	ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
						else if(pmodelid[playerid] == 565) // Flash
					{
					    AddVehicleComponent(car,1054);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
						else if(pmodelid[playerid] == 559) // Jester
					{
					    AddVehicleComponent(car,1067);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
						else if(pmodelid[playerid] == 561) // Stratum
					{
					    AddVehicleComponent(car,1055);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
						else if(pmodelid[playerid] == 560) // Sultan
					{
					    AddVehicleComponent(car,1032);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
						else if(pmodelid[playerid] == 558) // Uranus
					{
					    AddVehicleComponent(car,1088);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				 	    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
					}
						else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 1:
        	    {
                 if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 558 ||
				pmodelid[playerid] == 560)
		        {


			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 562) // Elegy
			        {
			            AddVehicleComponent(car,1035);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
						else if(pmodelid[playerid] == 565) // Flash
					{
					    AddVehicleComponent(car,1053);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
						else if(pmodelid[playerid] == 559) // Jetser
					{
					    AddVehicleComponent(car,1068);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
						else if(pmodelid[playerid] == 561) // Stratum
					{
					    AddVehicleComponent(car,1061);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
						else if(pmodelid[playerid] == 560) // Sultan
					{
					    AddVehicleComponent(car,1033);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
						else if(pmodelid[playerid] == 558)  // Uranus
					{
					    AddVehicleComponent(car,1091);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
					}
						else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 2:
        	    {
                 if(pmodelid[playerid] == 567 ||
				pmodelid[playerid] == 536)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 567) // Savanna
			        {
			            AddVehicleComponent(car,1130);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
	   					else if(pmodelid[playerid] == 536) // Blade
					{
					    AddVehicleComponent(car,1128);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
					}
						else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
        	    }
				case 3:
        	    {
                 if(pmodelid[playerid] == 567 ||
				pmodelid[playerid] == 536)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 567) // Savanna
			        {
			            AddVehicleComponent(car,1131);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
	   					else if(pmodelid[playerid] == 536) // Blade
					{
					    AddVehicleComponent(car,1103);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
					}
						else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
        	    }
				case 4:
        	    {
                 if(
					pmodelid[playerid] == 401 ||
					pmodelid[playerid] == 518 ||
					pmodelid[playerid] == 589 ||
					pmodelid[playerid] == 492 ||
					pmodelid[playerid] == 546 ||
					pmodelid[playerid] == 603 ||
					pmodelid[playerid] == 426 ||
					pmodelid[playerid] == 436 ||
					pmodelid[playerid] == 580 ||
					pmodelid[playerid] == 550||
					pmodelid[playerid] == 477)
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 401)
			        	{
			            AddVehicleComponent(car,1006);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 518)
			        	{
			            AddVehicleComponent(car,1006);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 589)
			        	{
			            AddVehicleComponent(car,1006);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 492)
			        	{
			            AddVehicleComponent(car,1006);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 546)
			        	{
			            AddVehicleComponent(car,1006);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 603)
			        	{
			            AddVehicleComponent(car,1006);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 426)
			        	{
			            AddVehicleComponent(car,1006);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 436)
			        	{
			            AddVehicleComponent(car,1006);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 580)
			        	{
			            AddVehicleComponent(car,1006);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 550)
			        	{
			            AddVehicleComponent(car,1006);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 477)
			        	{
			            AddVehicleComponent(car,1006);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
						}
        	    	}
        	    		else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
						}
        	    }
				case 5:
        	    {
                 ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
        	    }
				case 6:
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, "Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
        	    }
 			}
		}
	}
	if(dialogid == DIALOG_TYPE_SPOILERS)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
                if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 558 ||
				pmodelid[playerid] == 560)
		        {

		            new car = GetPlayerVehicleID(playerid);
		            if(pmodelid[playerid] == 562) // Elegy
		            {
		            	AddVehicleComponent(car,1147);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	              		SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
		            	ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 565) // Flash
					{
					    AddVehicleComponent(car,1049);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 559) // Jester
					{
					    AddVehicleComponent(car,1162);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 561) // Stratum
					{
					    AddVehicleComponent(car,1158);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 560) // Sultan
					{
					    AddVehicleComponent(car,1138);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 558) // Uranus
					{
					    AddVehicleComponent(car,1164);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				 	    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 1:
        	    {
                if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 558 ||
				pmodelid[playerid] == 560)
		        {


			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 562) // Elegy
			        {
			            AddVehicleComponent(car,1146);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 565) // Flash
					{
					    AddVehicleComponent(car,1150);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 559) // Jetser
					{
					    AddVehicleComponent(car,1158);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 561) // Stratum
					{
					    AddVehicleComponent(car,1060);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 560) // Sultan
					{
					    AddVehicleComponent(car,1139);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 558)  // Uranus
					{
					    AddVehicleComponent(car,1163);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"[INFO]Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 2:// Win
        	    {
                if(
                    pmodelid[playerid] == 401 ||//bravura
					pmodelid[playerid] == 518 ||//buccaneer
					pmodelid[playerid] == 527 ||//cadrona
					pmodelid[playerid] == 415 ||//cheetah
					pmodelid[playerid] == 546 ||//intruder
					pmodelid[playerid] == 603 ||//phoenix
					pmodelid[playerid] == 426 ||//premier
					pmodelid[playerid] == 436 ||//previon
					pmodelid[playerid] == 405 ||//sentinel
					pmodelid[playerid] == 477 ||//stallion
					pmodelid[playerid] == 580 ||//stafford
					pmodelid[playerid] == 550 ||//sunrise
					pmodelid[playerid] == 549)//tampa
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 401) // bravura
			        	{
			            AddVehicleComponent(car,1001);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"[INFO]Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 518) // buccaneer
			        	{
			            AddVehicleComponent(car,1001);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 527) // cadrona
			        	{
			            AddVehicleComponent(car,1001);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 415) // cheetah
			        	{
			            AddVehicleComponent(car,1001);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
           			 	ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 546) // intruder
			        	{
			            AddVehicleComponent(car,1001);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 603) // phoenix
			        	{
			            AddVehicleComponent(car,1001);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 426) // premier
			        	{
			            AddVehicleComponent(car,1001);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 436) // previon
			        	{
			            AddVehicleComponent(car,1001);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 405) // sentinel
			        	{
			            AddVehicleComponent(car,1001);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 477) // stallion
			        	{
			            AddVehicleComponent(car,1001);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 580) // stafford
			        	{
			            AddVehicleComponent(car,1001);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 550) // sunrise
			        	{
			            AddVehicleComponent(car,1001);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 549) // tampa
			        	{
			            AddVehicleComponent(car,1001);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
        	    	}
        	    		else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
        	    }
        	    case 3: // Fury
        	    {
                        if(
					pmodelid[playerid] == 518 ||//buccaneer
					pmodelid[playerid] == 415 ||//cheetah
					pmodelid[playerid] == 546 ||//intruder
					pmodelid[playerid] == 517 ||//majestic
					pmodelid[playerid] == 603 ||//phoenix
					pmodelid[playerid] == 405 ||//sentinel
					pmodelid[playerid] == 477 ||//stallion
					pmodelid[playerid] == 580 ||//stafford
					pmodelid[playerid] == 550 ||//sunrise
					pmodelid[playerid] == 549)//tampa
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 518) // buccaneer
			        	{
			            AddVehicleComponent(car,1023);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 415) // cheetah
			        	{
			            AddVehicleComponent(car,1023);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
           			 	ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 546) // intruder
			        	{
			            AddVehicleComponent(car,1023);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 517) // majestic
			        	{
			            AddVehicleComponent(car,1023);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 603) // phoenix
			        	{
			            AddVehicleComponent(car,1023);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 405) // sentinel
			        	{
			            AddVehicleComponent(car,1023);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 477) // stallion
			        	{
			            AddVehicleComponent(car,1023);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 580) // stafford
			        	{
			            AddVehicleComponent(car,1023);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 550) // sunrise
			        	{
			            AddVehicleComponent(car,1023);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 549) // tampa
			        	{
			            AddVehicleComponent(car,1023);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
        	    	}
        	    		else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
        	    }
        	    case 4: // Alpha
        	    {
                        if(
					pmodelid[playerid] == 518 ||//buccaneer
					pmodelid[playerid] == 415 ||//cheetah
					pmodelid[playerid] == 401 ||//bravura
					pmodelid[playerid] == 517 ||//majestic
					pmodelid[playerid] == 426 ||//premier
					pmodelid[playerid] == 436 ||//previon
					pmodelid[playerid] == 477 ||//stallion
					pmodelid[playerid] == 547 ||//primo
					pmodelid[playerid] == 550 ||//sunrise
					pmodelid[playerid] == 549)//tampa
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 518) // buccaneer
			        	{
			            AddVehicleComponent(car,1003);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 415) // cheetah
			        	{
			            AddVehicleComponent(car,1003);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
           			 	ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 401) // bravura
			        	{
			            AddVehicleComponent(car,1003);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 517) // majestic
			        	{
			            AddVehicleComponent(car,1003);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 426) // premier
			        	{
			            AddVehicleComponent(car,1003);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 436) // previon
			        	{
			            AddVehicleComponent(car,1003);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 477) // stallion
			        	{
			            AddVehicleComponent(car,1003);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 547) // primo
			        	{
			            AddVehicleComponent(car,1003);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 550) // sunrise
			        	{
			            AddVehicleComponent(car,1003);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 549) // tampa
			        	{
			            AddVehicleComponent(car,1003);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
        	    	}
        	    		else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
        	    }
        	    case 5: // Pro
        	    {
                        if(
					pmodelid[playerid] == 589 ||//club
					pmodelid[playerid] == 492 ||//greenwood
					pmodelid[playerid] == 547 ||//primo
					pmodelid[playerid] == 405)//sentinel
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 518) // club
			        	{
			            AddVehicleComponent(car,1000);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 492) // greenwood
			        	{
			            AddVehicleComponent(car,1000);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
           			 	ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 547) // primo
			        	{
			            AddVehicleComponent(car,1000);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 405) // sentinel
			        	{
        				AddVehicleComponent(car,1000);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
        	    	}
        	    		else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
        	    }
				case 6: // Champ
        	    {
                        if(
					pmodelid[playerid] == 527 ||//cadrona
					pmodelid[playerid] == 542 ||//clover
					pmodelid[playerid] == 405)//sentinel
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 527) // cadrona
			        	{
			            AddVehicleComponent(car,1014);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 542) // clover
			        	{
			            AddVehicleComponent(car,1014);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
           			 	ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 405) // sentinel
			        	{
        				AddVehicleComponent(car,1014);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
        	    	}
        	    		else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
        	    }
        	    case 7: // Race
        	    {
                if(
					pmodelid[playerid] == 527 ||//cadrona
					pmodelid[playerid] == 542)//clover
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 527) // cadrona
			        	{
			            AddVehicleComponent(car,1014);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 542) // clover
			        	{
			            AddVehicleComponent(car,1014);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
           			 	ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
        	    	}
        	    		else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
        	    }
				case 8: // Drag
        	    {
                if(
					pmodelid[playerid] == 546 ||//intruder
					pmodelid[playerid] == 517)//majestic
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 546) // intruder
			        	{
			            AddVehicleComponent(car,1002);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 517) // majestic
			        	{
			            AddVehicleComponent(car,1002);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
           			 	ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
        	    	}
        	    		else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
        	    }
        	    case 9:
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
        	    }
				case 10:
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, "Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
        	    }
 			}
		}
	}
	if(dialogid == DIALOG_TYPE_SIDESKIRTS)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
                if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 558 ||
				pmodelid[playerid] == 560)
		        {

		            new car = GetPlayerVehicleID(playerid);
		            if(pmodelid[playerid] == 562) // Elegy
		            {
		            	AddVehicleComponent(car,1036);
		            	AddVehicleComponent(car,1040);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	              		SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
		            	ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 565) // Flash
					{
					    AddVehicleComponent(car,1047);
					    AddVehicleComponent(car,1051);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 559) // Jester
					{
					    AddVehicleComponent(car,1069);
					    AddVehicleComponent(car,1071);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"YComponent successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 561) // Stratum
					{
					    AddVehicleComponent(car,1056);
					    AddVehicleComponent(car,1062);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 560) // Sultan
					{
					    AddVehicleComponent(car,1026);
					    AddVehicleComponent(car,1027);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 558) // Uranus
					{
					    AddVehicleComponent(car,1090);
					    AddVehicleComponent(car,1094);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				 	    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 1:
        	    {
                if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 558 ||
				pmodelid[playerid] == 560)
		        {


			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 562) // Elegy
			        {
			            AddVehicleComponent(car,1039);
			            AddVehicleComponent(car,1041);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 565) // Flash
					{
					    AddVehicleComponent(car,1048);
					    AddVehicleComponent(car,1052);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 559) // Jetser
					{
					    AddVehicleComponent(car,1070);
					    AddVehicleComponent(car,1072);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 561) // Stratum
					{
					    AddVehicleComponent(car,1057);
					    AddVehicleComponent(car,1063);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 560) // Sultan
					{
					    AddVehicleComponent(car,1031);
					    AddVehicleComponent(car,1030);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 558)  // Uranus
					{
					    AddVehicleComponent(car,1093);
					    AddVehicleComponent(car,1095);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 2:
        	    {
                if(pmodelid[playerid] == 575 ||
	               pmodelid[playerid] == 536 ||
	               pmodelid[playerid] == 576 ||
		 	       pmodelid[playerid] == 567)
	               {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 575) // Brodway
			        {
	       		        AddVehicleComponent(car,1042);
	       		        AddVehicleComponent(car,1099);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
	   				else if(pmodelid[playerid] == 567) // Savanna
					{
					    AddVehicleComponent(car,1102);
					    AddVehicleComponent(car,1133);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
	    		        ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
	                }
	                else if(pmodelid[playerid] == 576) // Tornado
					{
					    AddVehicleComponent(car,1134);
					    AddVehicleComponent(car,1137);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
	    		        ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
	                }
	                else if(pmodelid[playerid] == 536) // Blade
					{
					    AddVehicleComponent(car,1108);
					    AddVehicleComponent(car,1107);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
	                    ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
	                }
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
        	    }
				case 3:
        	    {
                if(pmodelid[playerid] == 534 ||
				pmodelid[playerid] == 534)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 534) // Remington
			        {
			            AddVehicleComponent(car,1122);
			            AddVehicleComponent(car,1101);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
        	    }
				case 4:
        	    {
                if(pmodelid[playerid] == 534 ||
				pmodelid[playerid] == 534)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 534) // Remington
			        {
			            AddVehicleComponent(car,1106);
			            AddVehicleComponent(car,1124);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car. ");
					ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
        	    }
				case 5:
        	    {
                if(pmodelid[playerid] == 535)

			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 535) // Slamvan
			        {
			            AddVehicleComponent(car,1118);
			            AddVehicleComponent(car,1120);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car. ");
					ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
        	    }
				case 6:
        	    {
				if(pmodelid[playerid] == 535)

			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 535) // Slamvan
			        {
			            AddVehicleComponent(car,1119);
			            AddVehicleComponent(car,1121);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car. ");
					ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
        	    }
				case 7:
        	    {
				if(
					pmodelid[playerid] == 401 ||
					pmodelid[playerid] == 518 ||
					pmodelid[playerid] == 527 ||
					pmodelid[playerid] == 415 ||
					pmodelid[playerid] == 589 ||
					pmodelid[playerid] == 546 ||
					pmodelid[playerid] == 517 ||
					pmodelid[playerid] == 603 ||
					pmodelid[playerid] == 436 ||
					pmodelid[playerid] == 439 ||
					pmodelid[playerid] == 580 ||
					pmodelid[playerid] == 549 ||
					pmodelid[playerid] == 477)
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 401)
			        	{
			            AddVehicleComponent(car,1007);
			            AddVehicleComponent(car,1017);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 518)
			        	{
			            AddVehicleComponent(car,1007);
			            AddVehicleComponent(car,1017);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 527)
			        	{
			            AddVehicleComponent(car,1007);
			            AddVehicleComponent(car,1017);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 415)
			        	{
			            AddVehicleComponent(car,1007);
			            AddVehicleComponent(car,1017);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 589)
			        	{
			            AddVehicleComponent(car,1007);
			            AddVehicleComponent(car,1017);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 546)
			        	{
			            AddVehicleComponent(car,1007);
			            AddVehicleComponent(car,1017);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 517)
			        	{
			            AddVehicleComponent(car,1007);
			            AddVehicleComponent(car,1017);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 603)
			        	{
			            AddVehicleComponent(car,1007);
			            AddVehicleComponent(car,1017);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 436)
			        	{
			            AddVehicleComponent(car,1007);
			            AddVehicleComponent(car,1017);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 439)
			        	{
			            AddVehicleComponent(car,1007);
			            AddVehicleComponent(car,1017);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 580)
			        	{
			            AddVehicleComponent(car,1007);
			            AddVehicleComponent(car,1017);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 549)
			        	{
			            AddVehicleComponent(car,1007);
			            AddVehicleComponent(car,1017);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 477)
			        	{
			            AddVehicleComponent(car,1007);
			            AddVehicleComponent(car,1017);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
						}
        	    	}
        	    		else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
						}
        	    }
				case 8:
        	    {
				ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
        	    }
				case 9:
        	    {
    			ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, "Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
        	    }
 			}
		}
	}
	if(dialogid == DIALOG_TYPE_BULLBARS)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
                if(pmodelid[playerid] == 534)

			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 534) // Remington
			        {
			            AddVehicleComponent(car,1100);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_BULLBARS, DIALOG_STYLE_LIST, "Bullbars", "Locos Chrome Grill\nLocos Chrome Bars\nLocos Chrome Lights \nLocos Chrome Bullbar\n \nBack", "Apply", "Close");
			        }
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car. ");
					ShowPlayerDialog(playerid, DIALOG_TYPE_BULLBARS, DIALOG_STYLE_LIST, "Bullbars", "Locos Chrome Grill\nLocos Chrome Bars\nLocos Chrome Lights \nLocos Chrome Bullbar\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 1:
        	    {
                if(pmodelid[playerid] == 534)

			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 534) // Remington
			        {
			            AddVehicleComponent(car,1123);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_BULLBARS, DIALOG_STYLE_LIST, "Bullbars", "Locos Chrome Grill\nLocos Chrome Bars\nLocos Chrome Lights \nLocos Chrome Bullbar\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car. ");
					ShowPlayerDialog(playerid, DIALOG_TYPE_BULLBARS, DIALOG_STYLE_LIST, "Bullbars", "Locos Chrome Grill\nLocos Chrome Bars\nLocos Chrome Lights \nLocos Chrome Bullbar\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 2:
        	    {
                if(pmodelid[playerid] == 534)

			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 534) // Remington
			        {
			            AddVehicleComponent(car,1125);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_BULLBARS, DIALOG_STYLE_LIST, "Bullbars", "Locos Chrome Grill\nLocos Chrome Bars\nLocos Chrome Lights \nLocos Chrome Bullbar\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car. ");
					ShowPlayerDialog(playerid, DIALOG_TYPE_BULLBARS, DIALOG_STYLE_LIST, "Bullbars", "Locos Chrome Grill\nLocos Chrome Bars\nLocos Chrome Lights \nLocos Chrome Bullbar\n \nBack", "Apply", "Close");
					}
        	    }
				case 3:
        	    {
                if(pmodelid[playerid] == 535)

			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 535) // Slamvan
			        {
			            AddVehicleComponent(car,1117);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_BULLBARS, DIALOG_STYLE_LIST, "Bullbars", "Locos Chrome Grill\nLocos Chrome Bars\nLocos Chrome Lights \nLocos Chrome Bullbar\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"[WARNING] ou cannot install this component to your car. ");
					ShowPlayerDialog(playerid, DIALOG_TYPE_BULLBARS, DIALOG_STYLE_LIST, "Bullbars", "Locos Chrome Grill\nLocos Chrome Bars\nLocos Chrome Lights \nLocos Chrome Bullbar\n \nBack", "Apply", "Close");
					}
        	    }
				case 4:
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_BULLBARS, DIALOG_STYLE_LIST, "Bullbars", "Locos Chrome Grill\nLocos Chrome Bars\nLocos Chrome Lights \nLocos Chrome Bullbar\n \nBack", "Apply", "Close");
        	    }
				case 5:
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, "Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
        	    }
 			}
		}
	}
	if(dialogid == DIALOG_TYPE_WHEELS)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
                if(GetPlayerMoney(playerid) >= 0)
		        {
		            new car = GetPlayerVehicleID(playerid);
		            AddVehicleComponent(car,1025);
		            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		            SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Offroad Wheels ");
		            ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
				else
				{
	       			SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
        	    }
        	    case 1:
        	    {
                if(GetPlayerMoney(playerid) >= 0)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        AddVehicleComponent(car,1074);
           			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Mega Wheels");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
				else
				{
	       			SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
        	    }
        	    case 2:
        	    {
                if(GetPlayerMoney(playerid) >= 0)
			    {
			        new car = GetPlayerVehicleID(playerid);
	                AddVehicleComponent(car,1076);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Wires Wheels");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
				else
				{
	       			SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
        	    }
				case 3:
        	    {
                if(GetPlayerMoney(playerid) >= 0)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        AddVehicleComponent(car,1078);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Twist Wheels");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
				else
				{
	      		 	SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
        	    }
				case 4:
        	    {
                if(GetPlayerMoney(playerid) >= 0)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        AddVehicleComponent(car,1081);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Grove Wheels");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
				else
				{
	       			SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
        	    }
				case 5:
        	    {
                if(GetPlayerMoney(playerid) >= 0)
			    {
			        new car = GetPlayerVehicleID(playerid);
	                AddVehicleComponent(car,1082);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Import Wheels");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
        	    }
				case 6:
        	    {
				if(GetPlayerMoney(playerid) >= 0)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        AddVehicleComponent(car,1085);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Atomic Wheels");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
        	    }
				case 7:
        	    {
				if(GetPlayerMoney(playerid) >= 0)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        AddVehicleComponent(car,1096);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	          		SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Ahab Wheels");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
        	    }
				case 8:
        	    {
				if(GetPlayerMoney(playerid) >= 0)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        AddVehicleComponent(car,1097);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	          		SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Virtual Wheels");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
        	    }
				case 9:
        	    {
     			if(GetPlayerMoney(playerid) >= 0)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        AddVehicleComponent(car,1098);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	          		SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Access Wheels");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
        	    }
				case 10:
        	    {
				if(GetPlayerMoney(playerid) >= 0)
		        {
		            new car = GetPlayerVehicleID(playerid);
		            AddVehicleComponent(car,1084);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		            SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Trance Wheels ");
		            ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
				else
				{
	       			SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
        	    }
				case 11:
        	    {
 				if(GetPlayerMoney(playerid) >= 0)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        AddVehicleComponent(car,1073);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Shadow Wheels");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
				else
				{
	       			SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
        	    }
				case 12:
        	    {
					if(GetPlayerMoney(playerid) >= 0)
			    {
			        new car = GetPlayerVehicleID(playerid);
	                AddVehicleComponent(car,1075);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Rimshine Wheels");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
					else
				{
	      	 		SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
        	    }
				case 13:
        	    {
					if(GetPlayerMoney(playerid) >= 0)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        AddVehicleComponent(car,1077);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Classic Wheels");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
					else
				{
	       			SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
        	    }
				case 14:
        	    {
					if(GetPlayerMoney(playerid) >= 0)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        AddVehicleComponent(car,1079);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Cutter Wheels");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
					else
				{
	       			SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
        	    }
				case 15:
        	    {
					if(GetPlayerMoney(playerid) >= 0)
			    {
			        new car = GetPlayerVehicleID(playerid);
	                AddVehicleComponent(car,1080);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Switch Wheels");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
					else
				{
				    SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
        	    }
				case 16:
        	    {
					if(GetPlayerMoney(playerid) >= 0)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        AddVehicleComponent(car,1083);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Dollar Wheels");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
					else
				{
				    SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
        	    }
				case 17:
        	    {
					ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
        	    }
				case 18:
        	    {
     			ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, "Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
        	    }
 			}
		}
	}
	if(dialogid == DIALOG_TYPE_CSTEREO)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
                if(GetPlayerMoney(playerid) >= 0)
		        {
		            new car = GetPlayerVehicleID(playerid);
		            AddVehicleComponent(car,1086);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added. ");
		            ShowPlayerDialog(playerid, DIALOG_TYPE_CSTEREO, DIALOG_STYLE_LIST, "Car Stereo", "Bass Boost\n \nBack", "Apply", "Close");
				}
				else
				{
	                SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_CSTEREO, DIALOG_STYLE_LIST, "Car Stereo", "Bass Boost\n \nBack", "Apply", "Close");
			    }
        	    }
        	    case 1:
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_CSTEREO, DIALOG_STYLE_LIST, "Car Stereo", "Bass Boost\n \nBack", "Apply", "Close");
        	    }
        	    case 2:
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, "Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
        	    }
 			}
		}
	}
	if(dialogid == DIALOG_TYPE_HYDRAULICS)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
                if(GetPlayerMoney(playerid) >= 0)
		        {
		            new car = GetPlayerVehicleID(playerid);
		            AddVehicleComponent(car,1087);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added. ");
		            ShowPlayerDialog(playerid, DIALOG_TYPE_HYDRAULICS, DIALOG_STYLE_LIST, "Hydaulics", "Hydaulics\n \nBack", "Apply", "Close");
				}
				else
				{
	                SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_HYDRAULICS, DIALOG_STYLE_LIST, "Hydaulics", "Hydaulics\n \nBack", "Apply", "Close");
			    }
        	    }
        	    case 1:
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_HYDRAULICS, DIALOG_STYLE_LIST, "Hydaulics", "Hydaulics\n \nBack", "Apply", "Close");
        	    }
        	    case 2:
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, "Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
        	    }
 			}
		}
	}
	if(dialogid == DIALOG_TYPE_NITRO)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
                if(GetPlayerMoney(playerid) >= 0)
		        {
		            new car = GetPlayerVehicleID(playerid);
		            AddVehicleComponent(car,1008);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added. ");
           			ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, "Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
				}
				else
				{
	                SendClientMessage(playerid,COLOR_RED,"Not enough money!");
        			ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, "Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
			    }
        	    }
        	    case 1:
        	    {
                if(GetPlayerMoney(playerid) >= 0)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        AddVehicleComponent(car,1009);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
           			ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, "Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
				}
				else
				{
	       			SendClientMessage(playerid,COLOR_RED,"Not enough money!");
           			ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, "Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
				}
        	    }
        	    case 2:
        	    if(GetPlayerMoney(playerid) >= 0)
			    {
			        new car = GetPlayerVehicleID(playerid);
	                AddVehicleComponent(car,1010);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_NITRO, DIALOG_STYLE_LIST, "Nitrous Oxide", "2x Nitrous\n5x Nitrous\n10x Nitrous\n \nBack", "Apply", "Close");
				}
				else
				{
	       			SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_NITRO, DIALOG_STYLE_LIST, "Nitrous Oxide", "2x Nitrous\n5x Nitrous\n10x Nitrous\n \nBack", "Apply", "Close");
				}
        	    case 3:
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_NITRO, DIALOG_STYLE_LIST, "Nitrous Oxide", "2x Nitrous\n5x Nitrous\n10x Nitrous\n \nBack", "Apply", "Close");
        	    }
        	    case 4:
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, "Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
        	    }
 			}
		}
	}
	if(dialogid == DIALOG_TYPE_HOODS)// HOODS
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:// fury
        	    {
                	if(
					pmodelid[playerid] == 401 ||
					pmodelid[playerid] == 518 ||
					pmodelid[playerid] == 589 ||
					pmodelid[playerid] == 492 ||
					pmodelid[playerid] == 426 ||
					pmodelid[playerid] == 550)
			    	{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 401) // bravura
			        	{
			            AddVehicleComponent(car,1005);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 518) // buccaneer
			        	{
			            AddVehicleComponent(car,1005);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 589) // club
			        	{
			            AddVehicleComponent(car,1005);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 492) // greenwood
			        	{
			            AddVehicleComponent(car,1005);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 426) // premier
			        	{
			            AddVehicleComponent(car,1005);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
           			 	ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 550) // sunrise
			        	{
			            AddVehicleComponent(car,1005);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
						}
					}
					else
					{
					SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
					}
	    		}
        	    case 1: // Champ
        	    {
                if(
					pmodelid[playerid] == 401 ||
					pmodelid[playerid] == 492 ||
					pmodelid[playerid] == 546 ||
					pmodelid[playerid] == 426 ||
					pmodelid[playerid] == 550)
			    	{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 401) // bravura
			        	{
			            AddVehicleComponent(car,1004);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"[INFO]Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 546) // intruder
			        	{
			            AddVehicleComponent(car,1004);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 492) // greenwood
			        	{
			            AddVehicleComponent(car,1004);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 426) // premier
			        	{
			            AddVehicleComponent(car,1004);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
           			 	ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 550) // sunrise
			        	{
			            AddVehicleComponent(car,1004);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
						}
					}
					else
					{
					SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
					}
        	    }
				case 2: // Race
        	    {
                if(
					pmodelid[playerid] == 549)
			    	{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 549) // tampa
			        	{
			            AddVehicleComponent(car,1011);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"[INFO]Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
						}
					}
					else
					{
					SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 3: // Worx
        	    {
                if(
					pmodelid[playerid] == 549)
			    	{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 549) // tampa
			        	{
			            AddVehicleComponent(car,1012);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"[INFO]Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
						}
					}
					else
					{
					SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
					}
        	    }
				case 4:
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
        	    }
				case 5: // Back
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, "Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
        	    }
			}
		}
	}
	////////////////////////////////////////end of hoods///////////
    if(dialogid == DIALOG_TYPE_VENTS)//////////////////VENTS//////////////////
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:// Oval
        	    {
     				if(
					pmodelid[playerid] == 401 ||//bravura
					pmodelid[playerid] == 518 ||//buccaneer
					pmodelid[playerid] == 546 ||//intruder
					pmodelid[playerid] == 517 ||//majestic
					pmodelid[playerid] == 603 ||//phoenix
					pmodelid[playerid] == 547 ||//primo
					pmodelid[playerid] == 439 ||//stallion
					pmodelid[playerid] == 550 ||//sunrise
					pmodelid[playerid] == 549)//tampa
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 401) // bravura
			        	{
			            AddVehicleComponent(car,1142);
			            AddVehicleComponent(car,1143);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"[INFO]Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 518) // buccaneer
			        	{
			            AddVehicleComponent(car,1142);
			            AddVehicleComponent(car,1143);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 546) // intruder
			        	{
			            AddVehicleComponent(car,1142);
			            AddVehicleComponent(car,1143);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 517) // majestic
			        	{
			            AddVehicleComponent(car,1142);
			            AddVehicleComponent(car,1143);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
           			 	ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 603) // phoenix
			        	{
			            AddVehicleComponent(car,1142);
			            AddVehicleComponent(car,1143);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 547) // primo
			        	{
			            AddVehicleComponent(car,1142);
			            AddVehicleComponent(car,1143);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 439) // stallion
			        	{
			            AddVehicleComponent(car,1142);
			            AddVehicleComponent(car,1143);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 550) // sunrise
			        	{
			            AddVehicleComponent(car,1142);
			            AddVehicleComponent(car,1143);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 549) // tampa
			        	{
			            AddVehicleComponent(car,1142);
			            AddVehicleComponent(car,1143);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
        	    	}
        	    	else
						{
							SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
				}
        	    case 1: // Square
        	    {
                if(
					pmodelid[playerid] == 401 ||//bravura
					pmodelid[playerid] == 518 ||//buccaneer
					pmodelid[playerid] == 589 ||//club
					pmodelid[playerid] == 546 ||//intruder
					pmodelid[playerid] == 517 ||//majestic
					pmodelid[playerid] == 603 ||//phoenix
					pmodelid[playerid] == 439 ||//stallion
					pmodelid[playerid] == 550 ||//sunrise
					pmodelid[playerid] == 549)//tampa
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 401) // bravura
			        	{
			            AddVehicleComponent(car,1144);
			            AddVehicleComponent(car,1145);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"[INFO]Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 518) // buccaneer
			        	{
			            AddVehicleComponent(car,1144);
			            AddVehicleComponent(car,1145);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 589) // club
			        	{
			            AddVehicleComponent(car,1144);
			            AddVehicleComponent(car,1145);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 546) // intruder
			        	{
			            AddVehicleComponent(car,1144);
			            AddVehicleComponent(car,1145);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
           			 	ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 517) // majestic
			        	{
			            AddVehicleComponent(car,1144);
			            AddVehicleComponent(car,1145);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 603) // phoenix
			        	{
			            AddVehicleComponent(car,1144);
			            AddVehicleComponent(car,1145);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 439) // stallion
			        	{
			            AddVehicleComponent(car,1144);
			            AddVehicleComponent(car,1145);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 550) // sunrise
			        	{
			            AddVehicleComponent(car,1144);
			            AddVehicleComponent(car,1145);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 549) // tampa
			        	{
			            AddVehicleComponent(car,1144);
			            AddVehicleComponent(car,1145);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
        	    	}
              			else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
        	    }
				case 2: // _
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
        	    }
        	    case 3: // Back
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, "Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
        	    }
			}
		}
	}


	///////////END OF VENTS///////////
	if(dialogid == DIALOG_TYPE_LIGHTS)//////////////////LIGTS//////////////////
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:// round
        	    {
     				if(
					pmodelid[playerid] == 401 ||//bravura
					pmodelid[playerid] == 518 ||//buccaneer
					pmodelid[playerid] == 589 ||//club
					pmodelid[playerid] == 400 ||//landstalker
					pmodelid[playerid] == 436 ||//previon
					pmodelid[playerid] == 439)//stallion
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 401) // bravura
			        	{
               			AddVehicleComponent(car,1013);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"[INFO]Component successfully added");
               			ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_LIST, "Lights", "Round\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 518) // buccaneer
			        	{
			            AddVehicleComponent(car,1013);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
               			ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_LIST, "Lights", "Round\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 589) // club
			        	{
			            AddVehicleComponent(car,1013);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_LIST, "Lights", "Round\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 400) // landstalker
			        	{
			            AddVehicleComponent(car,1013);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
           			 	ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_LIST, "Lights", "Round\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 436) // previon
			        	{
			            AddVehicleComponent(car,1013);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_LIST, "Lights", "Round\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 439) // stallion
			        	{
			            AddVehicleComponent(car,1013);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_LIST, "Lights", "Round\nSquare\n \nBack", "Apply", "Close");
						}
        	    	}
                    else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_LIST, "Lights", "Round\nSquare\n \nBack", "Apply", "Close");
						}
				}
        	    case 1: // Square
        	    {
                if(
					pmodelid[playerid] == 589 ||//club
					pmodelid[playerid] == 603 ||//phoenix
					pmodelid[playerid] == 400)//landstalker
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 589) // club
			        	{
			            AddVehicleComponent(car,1024);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 603) // phoenix
			        	{
			            AddVehicleComponent(car,1024);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 400) // landstalker
			        	{
			            AddVehicleComponent(car,1024);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
        	    	}
        	    	else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_LIST, "Lights", "Round\nSquare\n \nBack", "Apply", "Close");
						}
        	    }
				case 2: // _
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_LIST, "Lights", "Round\nSquare\n \nBack", "Apply", "Close");
        	    }
        	    case 3: // Back
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, "Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
        	    }
			}
		}
	}
	switch(dialogid)
	{
		case DIALOG_NAVLOCATE:
		{
  			if(response)
      		{
				switch(listitem)
				{
				    case 0: // JOBS
				    {
				    	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "You must be in a vehicle to use navigation!");
						static string[sizeof(NavigatorData1) * 64];

						if (string[0] == EOS) 
						{
							SetPVarInt(playerid, "NavData", 1);
							for (new i; i < sizeof(NavigatorData1); i++) 
							{
								format(string, sizeof string, "%s %s\n", string, NavigatorData1[i][NavigatorLocation]);
							}
						} 
						ShowPlayerDialog(playerid, DIALOG_GPSNAV, DIALOG_STYLE_LIST, "Locate", string, "Select", "Close");
					}
				    case 1: // GENERAL LOCATIONS
				    {
						if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "You must be in a vehicle to use navigation!");
						static string[sizeof(NavigatorData2) * 64];

						if (string[0] == EOS) 
						{
							SetPVarInt(playerid, "NavData", 2);
							for (new i; i < sizeof(NavigatorData2); i++) 
							{
								format(string, sizeof string, "%s %s\n", string, NavigatorData2[i][NavigatorLocation]);
							}
						} 
						ShowPlayerDialog(playerid, DIALOG_GPSNAV, DIALOG_STYLE_LIST, "Locate", string, "Select", "Close");
					}
				}
      		}
		}
		case DIALOG_CARBUY:
		{
			if(!response)
			{
				DeletePVar(playerid, "Carprice");
				DeletePVar(playerid, "Carmodel");
				ClearAnimations(playerid);
				SetPlayerPos(playerid, BusinessInfo[GetNearbyCdBusiness(playerid, 15.0)][bPosX], BusinessInfo[GetNearbyCdBusiness(playerid, 15.0)][bPosY]+2.0, BusinessInfo[GetNearbyCdBusiness(playerid, 15.0)][bPosZ]);
				SetPlayerFacingAngle(playerid, 11.5282);
				SendClientMessage(playerid, COLOR_WHITE, "You did not respond to the message. So we cancel your order.");
			}
			else
			{
				new money = GetPVarInt(playerid, "Carprice");
				new modelid = GetPVarInt(playerid, "Carmodel");
				
				if(pData[playerid][pCash] < money)
				{
					ClearAnimations(playerid);
					return SendClientMessage(playerid, COLOR_SYNTAX, "You don't have enough money to buy this vehicle.");
				}

				new Float:x, Float:y, Float:z, Float:a;
				GetPlayerPos(playerid, x, y, z);
				GetPlayerFacingAngle(playerid, a);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO vehicles (ownerid, owner, modelid, pos_x, pos_y, pos_z, pos_a, color1, color2) VALUES(%i, '%s', %i, '%f', '%f', '%f', '%f', %i, %i)", pData[playerid][pID], GetPlayerNameEx(playerid), modelid, BusinessInfo[GetNearbyCdBusiness(playerid, 15.0)][bPosX], BusinessInfo[GetNearbyCdBusiness(playerid, 15.0)][bPosY]+2.0, BusinessInfo[GetNearbyCdBusiness(playerid, 15.0)][bPosZ], a, 0, 0);
				mysql_tquery(connectionID, queryBuffer);

				GivePlayerCash(playerid, -money);

				ClearAnimations(playerid);
				SetPlayerPos(playerid, BusinessInfo[GetNearbyCdBusiness(playerid, 15.0)][bPosX], BusinessInfo[GetNearbyCdBusiness(playerid, 15.0)][bPosY]+2.0, BusinessInfo[GetNearbyCdBusiness(playerid, 15.0)][bPosZ]);
				SetPlayerFacingAngle(playerid, 11.5282);

				SendClientMessage(playerid, COLOR_WHITE, "You did respond to the message.");
				DeletePVar(playerid, "Carmodel");
				DeletePVar(playerid, "Carprice");
			}
		}
		case DIALOG_STATS:
		{
			if(response)
			{
				new string[128], str[5000], titlestr[500];
				format(string, sizeof(string), "OOC Stats of %s as of %s", GetPlayerNameEx(playerid), GetDate());
				strcat(titlestr, string);

				if(pData[playerid][pAdmin] > 0)
				{
					format(string, sizeof(string), "{A9C4E4}Administrator Level: %s\n", GetAdminRank(playerid));
					strcat(str, string);
					if(pData[playerid][pDeveloper] == 1)
					{
						strcat(str, "Developer Status: Yes\n");
					}
					format(string, sizeof(string), "Staff Secondary Role: %s\t%s\n\n", pData[playerid][pFactionMod] ? ("Faction Mod") : (""), pData[playerid][pGangMod] ? ("Gang Mod") : (""));
					strcat(str, string);
				}
				if(pData[playerid][pHelper] > 0)
				{
					format(string, sizeof(string), "Helper Level: %s\n\n", GetHelperRank(playerid));
					strcat(str, string);
				}

				format(string, sizeof(string), "Interior: %i\n", (playerid == MAX_PLAYERS) ? (pData[playerid][pInterior]) : (GetPlayerInterior(playerid)));
				strcat(str, string);
				format(string, sizeof(string), "Virtual: %i\n", (playerid == MAX_PLAYERS) ? (pData[playerid][pWorld]) : (GetPlayerVirtualWorld(playerid)));
				strcat(str, string);
				format(string, sizeof(string), "AFK: %i\n", (playerid == MAX_PLAYERS) ? ("No") : ((pData[playerid][pAFK]) ? ("Yes") : ("No")));
				strcat(str, string);
				format(string, sizeof(string), "Reports: %i\n", pData[playerid][pReports]);
				strcat(str, string);
				format(string, sizeof(string), "Help Request: %i\n", pData[playerid][pHelpRequests]);
				strcat(str, string);
				format(string, sizeof(string), "Connected Time: "SVRCLR"%i{A9C4E4} Millisecond(s)\n", NetStats_GetConnectedTime(playerid));
				strcat(str, string);
				format(string, sizeof(string), "Total Connected Time: "SVRCLR"%s{A9C4E4}\n", TimeConvert(pData[playerid][pSeconds]));
				strcat(str, string);
				format(string, sizeof(string), "Player's Connection Status: "SVRCLR"%i{A9C4E4}\n", NetStats_ConnectionStatus(playerid));
				strcat(str, string);

				ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, titlestr, str, "Close", "");
			}
		}
		case DIALOG_CARSTORAGE:
		{
		    if(response)
		    {
		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id FROM vehicles WHERE ownerid = %i LIMIT %i, 1", pData[playerid][pID], listitem);
		        mysql_tquery(connectionID, queryBuffer, "OnPlayerUseCarStorage", "i", playerid);
			}
		}
 		case DIALOG_DMVRELEASE:
		{
			if(response)
		    {
		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id, tickets, modelid FROM vehicles WHERE ownerid = %i AND impounded = 1 LIMIT %i, 1", pData[playerid][pID], listitem);
		        mysql_tquery(connectionID, queryBuffer, "OnPlayerDMVRelease", "i", playerid);
			}
		}
  		case DIALOG_BUYPARTS:
		{
			if(response)
		    {
		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id, modelid FROM vehicles WHERE ownerid = %i AND broken = 1 LIMIT %i, 1", pData[playerid][pID], listitem);
		        mysql_tquery(connectionID, queryBuffer, "OnPlayerBuyParts", "i", playerid);
			}
		}
 		case DIALOG_GRAFFITICOLOR:
		{
			if (response)
			{
			    new id = Graffiti_Nearest(playerid);

				if (id == -1)
				    return 0;

			    if (IsSprayingInProgress(id))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "There is another player spraying at this point already.");
				}

			    switch (listitem)
			    {
			        case 0:
			        {
		    	        pData[playerid][pGraffitiColor] = 0xFFFFFFFF;
					}

			        case 1:
			        {
			            pData[playerid][pGraffitiColor] = 0xFFFF0000;
					}

			        case 2:
			        {
			            pData[playerid][pGraffitiColor] = 0xFFFFFF00;
					}

			        case 3:
			        {
			            pData[playerid][pGraffitiColor] = 0xFF33CC33;
					}

			        case 4:
			        {
			            pData[playerid][pGraffitiColor] = 0xFF33CCFF;
					}

		    	    case 5:
		    	    {
			            pData[playerid][pGraffitiColor] = 0xFF0080FF;
					}

		    	    case 6:
		    	    {
			            pData[playerid][pGraffitiColor] = 0xFF1394BF;
					}
					case 7:
					{
						pData[playerid][pGraffitiColor] = 0x000000AA;
					}
			    }
			    ShowPlayerDialog(playerid, DIALOG_GRAFFITITEXT, DIALOG_STYLE_INPUT, SERVER_DIALOG, "Please enter the text you wish to spray below.\n\nNote: Your text input cannot exceed over 64 characters.", "Submit", "Cancel");
			}
		}
		case DIALOG_GRAFFITITEXT:
		{
			if (response)
			{
			    new id = Graffiti_Nearest(playerid);

				if (id == -1)
				    return 0;

			    if (isnull(inputtext))
			    {
			        return ShowPlayerDialog(playerid, DIALOG_GRAFFITITEXT, DIALOG_STYLE_INPUT, SERVER_DIALOG, "Please enter the text you wish to spray below.\n\nNote: Your text input cannot exceed over 64 characters.", "Submit", "Cancel");
				}
				if (strlen(inputtext) > 64)
				{
				    return ShowPlayerDialog(playerid, DIALOG_GRAFFITITEXT, DIALOG_STYLE_INPUT, SERVER_DIALOG, "Your input can't exceed 64 characters.\n\nPlease enter the text you wish to spray below.\n\nNote: Your text input cannot exceed over 64 characters.", "Submit", "Cancel");
				}
		        if (IsSprayingInProgress(id))
		        {
			        return SCM(playerid, COLOR_SYNTAX, "There is another player spraying at this point already.");
				}
		        pData[playerid][pGraffiti] = id;
		        pData[playerid][pGraffitiTime] = 15;

				strpack(pData[playerid][pGraffitiText], inputtext, 64 char);
				ApplyAnimationEx(playerid, "GRAFFITI", "spraycan_fire", 4.1, 1, 0, 0, 0, 0);

				GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~Spraying...~w~ please wait!", 15000, 3);

				SendProximityMessage(playerid, 30.0, SERVER_COLOR, "**{C2A2DA} %s takes out a can of spray paint and sprays the wall.", GetRPName(playerid));
			}
		}
		case DIALOG_BIZMENU:
		{
		    if(response)
			{
			    if(listitem == 0)
			    {
			    	ShowPlayerDialog(playerid, DIALOG_BIZNAME, DIALOG_STYLE_INPUT, SERVER_DIALOG, "Enter new name below for your business.", "Confirm", "Return");
				}
				if(listitem == 1)
			    {
			    	ShowPlayerDialog(playerid, DIALOG_MESSAGE, DIALOG_STYLE_INPUT, SERVER_DIALOG, "Enter new message below for your business.", "Confirm", "Return");
				}
				if(listitem == 2)
			    {
				    new businessid = GetNearbyBusinessEx(playerid);
				    new string[128];
					format(string, sizeof(string),"Your business's safe currently contain:\n\t\t$%s\n\t\tProducts: %i.", number_format(BusinessInfo[businessid][bCash]), BusinessInfo[businessid][bProducts]);
    				ShowPlayerDialog(playerid,DIALOG_BIZSAFE,DIALOG_STYLE_MSGBOX,SERVER_DIALOG,string,"Deposit","Withdraw");
				}
				if(listitem == 3)
	   		   	{
				    new businessid = GetNearbyBusinessEx(playerid);
				    new string[128];
					format(string, sizeof(string),""WHITE"Are you sure you want to "SVRCLR"%s "WHITE"your business?", RBS(businessid));
    				ShowPlayerDialog(playerid,DIALOG_BIZLOCK,DIALOG_STYLE_MSGBOX,SERVER_DIALOG,string,"Unlock","Lock");
				}
			}
		}
        case DIALOG_BIZNAME:
		{
		    new businessid = GetNearbyBusinessEx(playerid);
            new string28[150];

			format(BusinessInfo[businessid][bDescription], 64, inputtext);
			format(string28,sizeof(string28), "You have set your business name to %s.", inputtext);
			SCM(playerid, COLOR_AQUA, string28);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET biz_desc = '%s' WHERE id = %i", BusinessInfo[businessid][bDescription], BusinessInfo[businessid][bID]);
			mysql_tquery(connectionID, queryBuffer);

			ReloadBusiness(businessid);
		}
        case DIALOG_BIZSAFE:
        {
            if(!response)
            {
                if(!response)
                {
                    new businessid = GetNearbyBusinessEx(playerid);
                    new string[128];
                    format(string, sizeof(string),""WHITE"Enter the amount of money you want to withdraw your business vault.\n\t\t\t"SVRCLR"Current Vault Balance: $%s", number_format(BusinessInfo[businessid][bCash]));
			    	ShowPlayerDialog(playerid,DIALOG_WITHDRAW,DIALOG_STYLE_INPUT,SERVER_DIALOG,string,"Confirm","Cancel");
			    }
			}
			else
			{
			    new businessid = GetNearbyBusinessEx(playerid);
			    new string[128];
			    format(string, sizeof(string),""WHITE"Enter the amount of money you want to deposit your business vault.\n\t\t\t"SVRCLR"Current Vault Balance: $%s", number_format(BusinessInfo[businessid][bCash]));
		    	ShowPlayerDialog(playerid,DIALOG_DEPOSIT,DIALOG_STYLE_INPUT,SERVER_DIALOG,string,"Confirm","Cancel");
		    }
		}
		case DIALOG_WITHDRAW:
		{
		    new businessid = GetNearbyBusinessEx(playerid);
		    new string[128];
            if(!IsNumeric(inputtext))
		    {
      			format(string, sizeof(string),"{FF0000}ENTRY DECLINED: You must enter a number!\n"WHITE"Enter the amount of money you want to withdraw your business vault.\n\n\t\t\t"SVRCLR"Current Vault Balance: $%s", number_format(BusinessInfo[businessid][bCash]));
   				ShowPlayerDialog(playerid,DIALOG_WITHDRAW,DIALOG_STYLE_INPUT,SERVER_DIALOG,string,"Confirm","Cancel");
    		}
            new string28[128];
    		new money = strval(inputtext);
   			if(money > BusinessInfo[businessid][bCash]) return SCM(playerid, COLOR_SYNTAX, "You don't have this much money in your business vault.");
    		BusinessInfo[businessid][bCash] -= money;
    		GivePlayerCash(playerid, money);

    		SendProximityMessage(playerid, 15.0, SERVER_COLOR, "**{C2A2DA} %s has withdrawn money from their business vault.", GetRPName(playerid));
			format(string28, sizeof(string28), " You have withdrawn $%s from your business vault, There is now $%s remaining", number_format(money), number_format(BusinessInfo[businessid][bCash]));
			SCM(playerid, COLOR_AQUA, string28);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
			mysql_tquery(connectionID, queryBuffer);
		}
        case DIALOG_DEPOSIT:
		{
		    new businessid = GetNearbyBusinessEx(playerid);
		    new string[128];
            if(!IsNumeric(inputtext))
		    {
      			format(string, sizeof(string),"{FF0000}ENTRY DECLINED: You must enter a number!\n"WHITE"Enter the amount of money you want to withdraw your business vault.\n\n\t\t\t"SVRCLR"Current Vault Balance: $%s", number_format(BusinessInfo[businessid][bCash]));
   				ShowPlayerDialog(playerid,DIALOG_WITHDRAW,DIALOG_STYLE_INPUT,SERVER_DIALOG,string,"Confirm","Cancel");
    		}
            new string28[128];
    		new money = strval(inputtext);
   			if(money > pData[playerid][pCash]) return SCM(playerid, COLOR_SYNTAX, "You don't have this much money on you.");
    		BusinessInfo[businessid][bCash] += money;
    		GivePlayerCash(playerid, -money);

			format(string28, sizeof(string28), " You have deposit $%s from your business vault, There is now $%s available", number_format(money), number_format(BusinessInfo[businessid][bCash]));
			SCM(playerid, COLOR_AQUA, string28);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
			mysql_tquery(connectionID, queryBuffer);
		}
        case DIALOG_MESSAGE:
		{
		    new businessid = GetNearbyBusinessEx(playerid);
            new string28[150];

			format(BusinessInfo[businessid][bMessage], 128, inputtext);
			format(string28,sizeof(string28), "You have set your business message to %s.", inputtext);
			SCM(playerid, COLOR_AQUA, string28);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET message = '%s' WHERE id = %i", BusinessInfo[businessid][bMessage], BusinessInfo[businessid][bID]);
			mysql_tquery(connectionID, queryBuffer);

			ReloadBusiness(businessid);
		}
		case DIALOG_BIZLOCK:
		{
		    if(!response)
	    	{
	    	    new businessid = GetNearbyBusinessEx(playerid);

                if(!BusinessInfo[businessid][bLocked])
				{
    				BusinessInfo[businessid][bLocked] = 1;
    				GameTextForPlayer(playerid, "~r~Business locked", 3000, 6);
			    	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s locks their business door.", GetRPName(playerid));

			    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET locked = %i WHERE id = %i", BusinessInfo[businessid][bLocked], BusinessInfo[businessid][bID]);
					mysql_tquery(connectionID, queryBuffer);

					ReloadBusiness(businessid);
				}
			}
			else
			{
			    new businessid = GetNearbyBusinessEx(playerid);
			    BusinessInfo[businessid][bLocked] = 0;
			    GameTextForPlayer(playerid, "~g~Business unlocked", 3000, 6);
				SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s unlocks their business door.", GetRPName(playerid));

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET locked = %i WHERE id = %i", BusinessInfo[businessid][bLocked], BusinessInfo[businessid][bID]);
				mysql_tquery(connectionID, queryBuffer);

				ReloadBusiness(businessid);
			}
		}
		case DIALOG_TOP: { // Crimes, Rich, Hours
			if(response) {
				new Cache:Result, Name[MAX_PLAYER_NAME], Money, fString[128], cString[600];

				if(listitem == 0)
			    {
					Result = mysql_query(connectionID, "SELECT crimes, username FROM users ORDER BY crimes DESC LIMIT 20");
					if(cache_num_rows())
					{
						for(new i = 0; i < cache_num_rows(); ++ i)
						{
							cache_get_field_content(i, "username", Name);
							Money = cache_get_field_content_int(i, "crimes");

							format(fString, sizeof fString, "%s\t%i Crimes\n", Name, Money);
							strcat(cString, fString);
						}
					}
					cache_delete(Result);
					ShowPlayerDialog(playerid, 0, DIALOG_STYLE_TABLIST, "Top 20 Most Highest Crimes.", cString, "Okay","");
				}
				if(listitem == 1)
			    {
					Result = mysql_query(connectionID, "SELECT bank, username FROM users ORDER BY bank DESC LIMIT 20");
					if(cache_num_rows())
					{
						for(new i = 0; i < cache_num_rows(); ++ i)
						{
							cache_get_field_content(i, "username", Name);
							Money = cache_get_field_content_int(i, "bank");

							format(fString, sizeof fString, "%s\t$%d\n", Name, Money);
							strcat(cString, fString);
						}
					}
					cache_delete(Result);
					ShowPlayerDialog(playerid, 0, DIALOG_STYLE_TABLIST, "Top 20's Highest Cash.", cString, "Okay","");
				}
				if(listitem == 2)
			    {
					Result = mysql_query(connectionID, "SELECT playinghours, username FROM users ORDER BY playinghours DESC LIMIT 20");
					if(cache_num_rows())
					{
						for(new i = 0; i < cache_num_rows(); ++ i)
						{
							cache_get_field_content(i, "username", Name);
							Money = cache_get_field_content_int(i, "playinghours");

							format(fString, sizeof fString, "%s\t%i Connected Hours\n", Name, Money);
							strcat(cString, fString);
						}
					}
					cache_delete(Result);
					ShowPlayerDialog(playerid, 0, DIALOG_STYLE_TABLIST, "Top 20's Highest Playing Hours of the Month.", cString, "Okay","");
				}
				if(listitem == 3)
			    {
					Result = mysql_query(connectionID, "SELECT claimcount, name FROM gangs ORDER BY claimcount DESC LIMIT 20");
					if(cache_num_rows())
					{
						for(new i = 0; i < cache_num_rows(); ++ i)
						{
							cache_get_field_content(i, "name", Name);
							Money = cache_get_field_content_int(i, "claimcount");

							format(fString, sizeof fString, "%s\t%i Claims\n", Name, Money);
							strcat(cString, fString);
						}
					}
					cache_delete(Result);
					ShowPlayerDialog(playerid, 0, DIALOG_STYLE_TABLIST, "Top 20 Gang's Highest Claim Count.", cString, "Okay","");
				}
			}
		}
	    case DIALOG_HOSPITAL:
	    {
	        if(response)
	        {
	 			if(listitem == 0)
				{
				    if(pData[playerid][pCash] < 1000)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "You don't have enough money, to pay bills.");
				    }
					GameTextForPlayer(playerid, "~g~Checking in...", 15000, 3);
					ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 1, 0, 0, 0, 0, 1);
					TogglePlayerControllable(playerid, 0);
					SetTimerEx("Checkin", 15000, false, "i", playerid);

					GivePlayerCash(playerid, -1000);
					SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has paid a bill for his check in.", GetRPName(playerid));
	           	}
	 			else if(listitem == 1) // INSURANCE
				{
					if(pData[playerid][pCash] < 2000)
					{
					    return SCM(playerid, COLOR_SYNTAX, "You can't afford insurance.");
					}

					switch(GetPlayerVirtualWorld(playerid))
					{
					    case HOSPITAL_COUNTY:
					    {
					        if(pData[playerid][pInsurance] == HOSPITAL_COUNTY)
					        {
					            return SCM(playerid, COLOR_SYNTAX, "You are already insured at this hospital.");
					        }

					        GivePlayerCash(playerid, -2000);
					        GameTextForPlayer(playerid, "~r~-$2000", 5000, 1);
					        SCM(playerid, COLOR_AQUA, "You paid $2000 for insurance at {FF8282}County General{CCFFFF}. You will now spawn here after death.");

					        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET insurance = %i WHERE uid = %i", HOSPITAL_COUNTY, pData[playerid][pID]);
					        mysql_tquery(connectionID, queryBuffer);

					        pData[playerid][pInsurance] = HOSPITAL_COUNTY;
					    }
					    case HOSPITAL_ALLSAINTS:
					    {
					        if(pData[playerid][pInsurance] == HOSPITAL_ALLSAINTS)
					        {
					            return SCM(playerid, COLOR_SYNTAX, "You are already insured at this hospital.");
					        }

					        GivePlayerCash(playerid, -2000);
					        GameTextForPlayer(playerid, "~r~-$2000", 5000, 1);
					        SCM(playerid, COLOR_AQUA, "You paid $2000 for insurance at {FF8282}All Saints Hospital{CCFFFF}. You will now spawn here after death.");

					        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET insurance = %i WHERE uid = %i", HOSPITAL_ALLSAINTS, pData[playerid][pID]);
					        mysql_tquery(connectionID, queryBuffer);

					        pData[playerid][pInsurance] = HOSPITAL_ALLSAINTS;
					    }
					}
				}
                else if(listitem == 2) // bandage
                {
				    new price = 1000;

				    if(pData[playerid][pCash] < price)
                    {
                        return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
                    }
				    if(pData[playerid][pBandage] >= 10)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 10 bandage.");
				    }

				    pData[playerid][pBandage] += 1;
                    GivePlayerCash(playerid, -price);

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bandage = %i WHERE uid = %i", pData[playerid][pBandage], pData[playerid][pID]);
                    mysql_tquery(connectionID, queryBuffer);

                    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the doctor and received bandage.", GetRPName(playerid), price);
                    SCM(playerid, COLOR_WHITE, "** Medkit purchased. /use bandage to use.");
                }
                else if(listitem == 3) // medkit
                {
				    new price = 1500;

				    if(pData[playerid][pCash] < price)
                    {
                        return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
                    }
				    if(pData[playerid][pMedkit] >= 10)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 10 medkit.");
				    }

				    pData[playerid][pMedkit] += 1;
                    GivePlayerCash(playerid, -price);

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET medkit = %i WHERE uid = %i", pData[playerid][pMedkit], pData[playerid][pID]);
                    mysql_tquery(connectionID, queryBuffer);

                    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the doctor and received medkit.", GetRPName(playerid), price);
                    SCM(playerid, COLOR_WHITE, "** Medkit purchased. /use medkit to use.");
                }
                else if(listitem == 4) // painkiller
                {
				    new price = 2000;

				    if(pData[playerid][pCash] < price)
                    {
                        return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
                    }

				    pData[playerid][pPainkillers] += 1;
                    GivePlayerCash(playerid, -price);

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", pData[playerid][pPainkillers], pData[playerid][pID]);
                    mysql_tquery(connectionID, queryBuffer);

                    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the doctor and received painkiller.", GetRPName(playerid), price);
                    SCM(playerid, COLOR_WHITE, "** Painkiller purchased. /usedrug painkiller to use.");
                }
			}
		}
	    case DIALOG_HOSPITAL2:
	    {
	        if(response)
	        {
	 			if(listitem == 0)
				{
				    if(pData[playerid][pCash] < 1000)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "You don't have enough money, to pay bills.");
				    }
					GameTextForPlayer(playerid, "~g~Checking in...", 15000, 3);
					ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 1, 0, 0, 0, 0, 1);
					TogglePlayerControllable(playerid, 0);
					SetTimerEx("Checkin", 15000, false, "i", playerid);

					GivePlayerCash(playerid, -1000);
					SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has paid a bill for his check in.", GetRPName(playerid));
	           	}
	 			else if(listitem == 1) // INSURANCE
				{
					if(pData[playerid][pCash] < 2000)
					{
					    return SCM(playerid, COLOR_SYNTAX, "You can't afford insurance.");
					}

					switch(GetPlayerVirtualWorld(playerid))
					{
					    case HOSPITAL_COUNTY:
					    {
					        if(pData[playerid][pInsurance] == HOSPITAL_COUNTY)
					        {
					            return SCM(playerid, COLOR_SYNTAX, "You are already insured at this hospital.");
					        }

					        GivePlayerCash(playerid, -2000);
					        GameTextForPlayer(playerid, "~r~-$2000", 5000, 1);
					        SCM(playerid, COLOR_AQUA, "You paid $2000 for insurance at {FF8282}County General{CCFFFF}. You will now spawn here after death.");

					        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET insurance = %i WHERE uid = %i", HOSPITAL_COUNTY, pData[playerid][pID]);
					        mysql_tquery(connectionID, queryBuffer);

					        pData[playerid][pInsurance] = HOSPITAL_COUNTY;
					    }
					    case HOSPITAL_ALLSAINTS:
					    {
					        if(pData[playerid][pInsurance] == HOSPITAL_ALLSAINTS)
					        {
					            return SCM(playerid, COLOR_SYNTAX, "You are already insured at this hospital.");
					        }

					        GivePlayerCash(playerid, -2000);
					        GameTextForPlayer(playerid, "~r~-$2000", 5000, 1);
					        SCM(playerid, COLOR_AQUA, "You paid $2000 for insurance at {FF8282}All Saints Hospital{CCFFFF}. You will now spawn here after death.");

					        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET insurance = %i WHERE uid = %i", HOSPITAL_ALLSAINTS, pData[playerid][pID]);
					        mysql_tquery(connectionID, queryBuffer);

					        pData[playerid][pInsurance] = HOSPITAL_ALLSAINTS;
					    }
					}
				}
                else if(listitem == 2) // bandage
                {
				    new price = 1000;

				    if(pData[playerid][pCash] < price)
                    {
                        return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
                    }
				    if(pData[playerid][pBandage] >= 10)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 10 bandage.");
				    }

				    pData[playerid][pBandage] += 1;
                    GivePlayerCash(playerid, -price);

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bandage = %i WHERE uid = %i", pData[playerid][pBandage], pData[playerid][pID]);
                    mysql_tquery(connectionID, queryBuffer);

                    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the doctor and received bandage.", GetRPName(playerid), price);
                    SCM(playerid, COLOR_WHITE, "** Medkit purchased. /use bandage to use.");
                }
                else if(listitem == 3) // medkit
                {
				    new price = 1500;

				    if(pData[playerid][pCash] < price)
                    {
                        return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
                    }
				    if(pData[playerid][pMedkit] >= 10)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 10 medkit.");
				    }

				    pData[playerid][pMedkit] += 1;
                    GivePlayerCash(playerid, -price);

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET medkit = %i WHERE uid = %i", pData[playerid][pMedkit], pData[playerid][pID]);
                    mysql_tquery(connectionID, queryBuffer);

                    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the doctor and received medkit.", GetRPName(playerid), price);
                    SCM(playerid, COLOR_WHITE, "** Medkit purchased. /use medkit to use.");
                }
                else if(listitem == 4) // painkiller
                {
				    new price = 2000;

				    if(pData[playerid][pCash] < price)
                    {
                        return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
                    }

				    pData[playerid][pPainkillers] += 1;
                    GivePlayerCash(playerid, -price);

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", pData[playerid][pPainkillers], pData[playerid][pID]);
                    mysql_tquery(connectionID, queryBuffer);

                    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the doctor and received painkiller.", GetRPName(playerid), price);
                    SCM(playerid, COLOR_WHITE, "** Painkiller purchased. /usedrug painkiller to use.");
                }
			}
		}
	    case DIALOG_MECHANIC:
	    {
	        if(response)
	        {
	 			if(listitem == 0)
				{
					new price = 10000;
				    if(pData[playerid][pCash] < 10000)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "You don't have enough money, to purhase repairkit.");
				    }
				    pData[playerid][pRepairKit] += 1;
				    
					GivePlayerCash(playerid, -price);
					
				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET repairkit = %i WHERE uid = %i", pData[playerid][pRepairKit], pData[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the mechanic and received repairkit.", GetRPName(playerid), price);
				    SCM(playerid, COLOR_WHITE, "** Repairkit purchased. /use repairkit to use.");
				}
	 			else if(listitem == 1)
				{
				    new price = 50000;
				    if(pData[playerid][pCash] < 50000)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "You don't have enough money, to purchase a vehicle parts.");
				    }
				    pData[playerid][pParts] += 1;
				    GivePlayerCash(playerid, -price);

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET parts = %i WHERE uid = %i", pData[playerid][pParts], pData[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);
				    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the mechanic and received vehicle parts.", GetRPName(playerid), price);
				}
	 			else if(listitem == 2)
				{
					if(pData[playerid][pParts] <= 0)
					{
					    return SCM(playerid, COLOR_ERROR, "You have no vehicle parts.");
					}
					
    				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT modelid FROM vehicles WHERE ownerid = %i AND broken = 1", pData[playerid][pID]);
					mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_BUYPARTS, playerid);
				}
			}
		}
	    case DIALOG_VIPLOCKER:
	    {
	        if(response)
	        {
	 			if(listitem == 0)
				{
                    SetPlayerHealth(playerid, 100.0);
                }
	 			else if(listitem == 1)
				{
                    SetScriptArmour(playerid, 50.0);
                }
	 			else if(listitem == 2)
				{
                    GiveWeapon(playerid, 8);
                }
                else if(listitem == 3)
                {
                    GiveWeapon(playerid, 24);
                }
                else if(listitem == 4)
                {
                    GiveWeapon(playerid, 29);
                }
			}
		}
	    case DIALOG_VIPLOCKER1:
	    {
	        if(response)
	        {
	 			if(listitem == 0)
				{
                    SetPlayerHealth(playerid, 100.0);
                }
	 			else if(listitem == 1)
				{
                    SetScriptArmour(playerid, 50.0);
                }
	 			else if(listitem == 2)
				{
                    GiveWeapon(playerid, 8);
                }
                else if(listitem == 3)
                {
                    GiveWeapon(playerid, 24);
                }
                else if(listitem == 4)
                {
                    GiveWeapon(playerid, 29);
                }
                else if(listitem == 5)
                {
                    GiveWeapon(playerid, 33);
                }
              	else if(listitem == 6)
                {
                    ShowPlayerSelectionMenu(playerid, MODEL_SELECTION_CLOTHES, "Rare Skins", clothingRareSkins, sizeof(clothingRareSkins));
                }
			}
		}
	    case DIALOG_VIPLOCKER2:
	    {
	        if(response)
	        {
	 			if(listitem == 0)
				{
                    SetPlayerHealth(playerid, 100.0);
                }
	 			else if(listitem == 1)
				{
                    SetScriptArmour(playerid, 50.0);
                }
	 			else if(listitem == 2)
				{
                    GiveWeapon(playerid, 8);
                }
                else if(listitem == 3)
                {
                    GiveWeapon(playerid, 24);
                }
                else if(listitem == 4)
                {
                    GiveWeapon(playerid, 29);
                }
                else if(listitem == 5)
                {
                    GiveWeapon(playerid, 33);
                }
                else if(listitem == 6)
                {
                    GiveWeapon(playerid, 30);
                }
                else if(listitem == 7)
                {
                    GiveWeapon(playerid, 31);
                }
          		else if(listitem == 8)
                {
                	SCM(playerid, COLOR_SYNTAX, "Sniper is temporary disabled");
                    //GiveWeapon(playerid, 34);
                }
              	else if(listitem == 9)
                {
                    GiveWeapon(playerid, 27);
                }
              	else if(listitem == 10)
                {
                    ShowPlayerSelectionMenu(playerid, MODEL_SELECTION_CLOTHES, "Rare Skins", clothingRareSkins, sizeof(clothingRareSkins));
                }
			}
		}
 		case DIALOG_CREATEQUIZ:
		{
			if(response) {
				if(CreateQuiz == 0)
				{
				    strcpy(quizQuestion, inputtext);
				    CreateQuiz = 1;
	                ShowDialogToPlayer(playerid, DIALOG_CREATEQUIZ);
				}
				else if(CreateQuiz == 1)
				{
				    strcpy(quizAnswer, inputtext);
	                CreateQuiz = -1;
	                SAM(COLOR_LIGHTRED, "AdmCmd: %s has started a quiz.", GetRPName(playerid));
	                SMA(COLOR_LIGHTRED, "Quiz: %s Type (/answer) to answer", quizQuestion);
				}
			}
			else CreateQuiz = -1;

		}
 		case DIALOG_TWEET:
		{
			if(response) {
			    strcpy(tweet, inputtext);
                SAM(COLOR_WHITE, ""WHITE"%s"TWEET" has tweeted"WHITE": %s", GetRPName(playerid), tweet);
			}
		}
		case DIALOG_NEWBWELCOME:
		{
		    if(response)
		    {
		        new count;
				foreach(new i : Player)
				{
					if(pData[i][pHelper] > 0)
					{
					    count++;
					}
				}
				if(count > 0)
				{
		        	new string[30];
		        	format(string, sizeof(string), "Show me around Los Santos, I am new here.");
					strcpy(pData[playerid][pHelpRequest], string, 128);
					SendHelperMessage(COLOR_AQUA, "** Help Request: New Player %s (ID:%d) is requesting a helper to show them around. **", GetRPName(playerid), playerid);

					pData[playerid][pLastRequest] = gettime();
					SCM(playerid, COLOR_GREEN, "Your help request was sent to all helpers. Please wait for a response.");
				}
				else
				{
				    ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "No Helpers Online", ""WHITE"Unfortunately there are no members of the helper team online.\nYou can also try /(n)ewbie, This is where most of the community can help you with simple questions such as 'Where is the Bank'.\nYou can also checkout "SERVER_URL" for beginner tutorials.", "Cancel", "");
				}
			}
		}
		case DIALOG_POINTLIST:
		{
		    if(response)
		    {
		        if(strlen(psstring) < 5)
		        {
 					//SCM(playerid, COLOR_AQUA, "Please use /tog turfs to enable turf bounds.");
				}
				else
				{
				    ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, ""SVRCLR"Point List"WHITE" ("REVISION")", psstring, "", "Cancel");
				}
			}
		}
		case DIALOG_TURFLIST:
		{
		    if(response)
		    {
		        if(strlen(tsstring) < 5)
		        {
 					//SCM(playerid, COLOR_AQUA, "Please use /tog turfs to enable turf bounds.");
				}
				else
				{
				    ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, ""SVRCLR"Turf List"WHITE" ("REVISION")", tsstring, "", "Cancel");
				}
			}
		}
    	case DIALOG_RULES:
		{
  			if(response)
      		{
      		    new sstring[2048];
				switch(listitem)
				{
				    case 0: // SERVER
				    {
				        format(sstring, sizeof(sstring), ""WHITE"- First of all, Always roleplay. Your character's behavior needs to be as realistic, and close to real life as possible! -\n");
						strcat(sstring, "1. You can't Metagaming! Don't mix in-character (IC) and out-of-character (OOC) chat/information. IC chat is the default chat, OOC is used by typing /b!\n");
						strcat(sstring, "2. You can't Killing on sight (KOS). Killing a player on sight without a word or any attempt to roleplay is not allowed and is prisonable!\n");
						strcat(sstring, "3. You can't Revenge killing (RK). If a player critically injured you, you are not allowed to go back to kill them! After hospital, you lose all memory of the last 30 minutes!\n");
						strcat(sstring, "4. You can't Powergaming! Impossible roleplay, meaning anything that is cannot be done in real life is forbidden! Do not force roleplay on others!\n");
						strcat(sstring, "5. You can't Car ramming or Car parking! Do not repeatedly ram other people with your car, and don't park on top of a player to kill them!\n");
						strcat(sstring, "6. You can't Logging to avoid! Never log out or alt-tab out of game to avoid death, arrest or prison!\n");
						strcat(sstring, "Note: This is a short version of our server rulebook. Please visit  to see a full list of "SERVER_URL"");
				        ShowPlayerDialog(playerid, DIALOG_RULES, DIALOG_STYLE_MSGBOX, ""WHITE"Server Rules", sstring, "Ok","");
				    }
				    case 1: // TRAFFIC
				    {
				        format(sstring, sizeof(sstring), ""WHITE"1. Drive on the right side of the road at all times or else you will get punishment.\n");
				        strcat(sstring, "2. Yield to emergency vehicles.\n");
				        strcat(sstring, "3. Move over and slow down for stopped emergency vehicles.\n");
				        strcat(sstring, "4. Turn your headlights on at night. Type (/v lights) to turn it.\n");
				        strcat(sstring, "5. Wear your seatbelt or helmet always. Type (/seatbelt) to wear it.\n");
				        strcat(sstring, "6. Traffic lights are synced Red is for Stop, Yellow is for Slow down and Green is for Go\n");
				        strcat(sstring, "7. Only follow traffic lights above a junction. (Marked with a solid white line)\n");
				        strcat(sstring, "8. Remain at a safe distance from other vehicles when driving, atleast 3 car lengths\n");
				        strcat(sstring, "9. Only follow traffic lights above a junction. (Marked with a solid white line)\n");
				        strcat(sstring, "10. Pedistrians always have the right of way, regardless of the situation.\n");
				        strcat(sstring, "11. Drive how you would in real life, dont be a moron.\n");
				        strcat(sstring, "- If you fail at driving you will be jailed or banned. -\n");
				        strcat(sstring, "Note: This is a short version of our traffic laws. Please visit  to see a full list of "SERVER_URL"");
				    	ShowPlayerDialog(playerid, DIALOG_RULES, DIALOG_STYLE_MSGBOX, ""WHITE"Traffic Rules", sstring, "Ok","");
				    }
				    case 2: // SPEED
				    {
				        format(sstring, sizeof(sstring), ""WHITE"- This server has limitations. -\n");
				        strcat(sstring, "1. 50 MPH if you are in the City.\n");
				        strcat(sstring, "2. 70 MPH on the County roads.\n");
				        strcat(sstring, "3. 90 MPH on the Highways and Interstates.\n");
				        strcat(sstring, "4. Box trucks cannot exceed 50 MPH.\n");
				        strcat(sstring, "5. Any vehicles with 3 or more axles aren't allowed to go more than 55 mph. Regardless of roadway limits.\n");
				        strcat(sstring, "Note: This is a short version of our speed laws. Please visit  to see a full list of "SERVER_URL"");
				        ShowPlayerDialog(playerid, DIALOG_RULES, DIALOG_STYLE_MSGBOX, ""WHITE"Speed Rules", sstring, "Ok","");
				    }
				}
      		}
		}
		case DIALOG_LOCATE:
		{
  			if(response)
      		{
				switch(listitem)
				{
				    case 0: // JOBS
				    {
				    	ShowPlayerDialog(playerid, DIALOG_LOCATELIST1, DIALOG_STYLE_LIST, "Select Destination", "Foodpanda\nTrucker\nFisherman\nBodyguard\nArms Dealer\nMiner\nTaxi Driver\nDrug Dealer\nLawyer\nDetective\nGarbageman\nForklifter\nLumber Jack\nConstruction Job", "Select", "Close");
				    }
				    case 1: // STORES
				    {
				    	ShowPlayerDialog(playerid, DIALOG_LOCATELIST2, DIALOG_STYLE_LIST, "Select Destination", "24/7\nAmmunation\nClothing Store\nGymnasium\nRestaurant\nAdvertisement Store\nClub", "Select", "Close");
				    }
				    case 2: // GENERAL LOCATIONS
				    {
				    	ShowPlayerDialog(playerid, DIALOG_LOCATELIST3, DIALOG_STYLE_LIST, "Select Destination", "DMV\nBank\nCasino\nDrug Factory\nMaterials Pickup 1\nMaterials Pickup 2\nCar Dealership\nAirplane Dealership (Temporary Disabled)\nBoat Dealership\nMaterials Factory 1\nMaterials Factory 2\nHeisenbergs\nAirport Materials Depot\nMarina Materials Depot\nVip\nMechanic Shop\nImpound", "Select", "Close");
				    }
					case 3: // Find Points
					{
					    new string[34 * MAX_POINTS];
					    for(new x = 0; x < MAX_POINTS; x++)
						{
						    if(PointInfo[x][pExists]) {
					    		strcat(string, PointInfo[x][pName]);
								strcat(string, "\n");
							}
						}
						if(strlen(string) > 2) {
							ShowPlayerDialog(playerid, DIALOG_LOCATEPOINTS, DIALOG_STYLE_LIST, "Select Destination", string, "Select", "Close");
						} else {
          					SCM(playerid, COLOR_WHITE, "Unable to locate any new locations.");
						}
					}
				}
      		}
		}
		case DIALOG_LOCATELIST1:
		{
			if(response)
			{
			    switch(listitem)
			    {
				    case 0:
						LocateMethod(playerid,"Foodpanda");
					case 1:
					    LocateMethod(playerid,"Trucker");
	                case 2:
						LocateMethod(playerid,"Fisherman");
	   				case 3:
						LocateMethod(playerid,"Bodyguard");
	                case 4:
						LocateMethod(playerid,"ArmsDealer");
	                case 5:
						LocateMethod(playerid,"Miner");
	                case 6:
						LocateMethod(playerid,"TaxiDriver");
	                case 7:
						LocateMethod(playerid,"DrugDealer");
	                case 8:
						LocateMethod(playerid,"Lawyer");
	                case 9:
						LocateMethod(playerid,"Detective");
     	          	case 10:
						LocateMethod(playerid,"Garbageman");
        	       	case 11:
						LocateMethod(playerid,"Forklifter");
           	       	case 12:
						LocateMethod(playerid,"Lumberjack");
                	case 13:
						LocateMethod(playerid,"Construction");
					case 14:
						LocateMethod(playerid,"Tailor");
				}
			}
		}
		case DIALOG_LOCATELIST2:
		{
		    if(response)
			{
			    switch(listitem)
			    {
				    case 0:
						LocateMethod(playerid,"Supermarket");
				    case 1:
				        LocateMethod(playerid,"GunShop");
				    case 2:
				        LocateMethod(playerid,"ClothesShop");
				    case 3:
				        LocateMethod(playerid,"Gym");
				    case 4:
				        LocateMethod(playerid,"Restaurant");
				    case 5:
				        LocateMethod(playerid,"AdAgency");
				    case 6:
				        LocateMethod(playerid,"Club");
				}
			}
		}
		case DIALOG_LOCATELIST3:
		{
		    if(response)
			{
			    switch(listitem)
			    {

                    case 0:
						LocateMethod(playerid,"DMV");
                    case 1:
						LocateMethod(playerid,"Bank");
                	case 2:
						LocateMethod(playerid,"Casino");
                    case 3:
						LocateMethod(playerid,"Smuggledrugs");
                    case 4:
						LocateMethod(playerid,"MatPickup1");
                    case 5:
						LocateMethod(playerid,"MatPickup2");
                	case 6:
						LocateMethod(playerid,"Dealership");
                    case 7:
						LocateMethod(playerid,"AirDealer");
                    case 8:
						LocateMethod(playerid,"BoatDealer");
                    case 9:
						LocateMethod(playerid,"MatFactory1");
                    case 10:
						LocateMethod(playerid,"MatFactory2");
                	case 11:
						LocateMethod(playerid,"Heisenbergs");
					case 12:
					    LocateMethod(playerid,"AirportDepot");
					case 13:
					    LocateMethod(playerid,"MarinaDepot");
                    case 14:
						LocateMethod(playerid,"Vip");
                    case 15:
						LocateMethod(playerid,"Mechanic");
                    case 16:
						LocateMethod(playerid,"Impound");
				}
			}
		}
		case DIALOG_LOCATELISTC:
		{
		    if(response)
		    {
				LocateMethod(playerid, inputtext);
		    }
		}
		case DIALOG_LOCATEPOINTS:
		{
		    if(response)
			{
			    if(PointInfo[listitem][pExists])
			    {
	                pData[playerid][pCP] = CHECKPOINT_MISC;
				    SetPlayerCheckpoint(playerid, PointInfo[listitem][pPointX], PointInfo[listitem][pPointY], PointInfo[listitem][pPointZ], 3.0);
				    SM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of %s.", PointInfo[listitem][pName]);
			    }
			}
		}
		case DIALOG_CONTACTS_OPTIONS:
		{
			if (response)
			{
				switch (listitem)
				{
					case 0:
					{
						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT contact_name, contact_number FROM phone_contacts WHERE contact_id = %i", pData[playerid][pSelected]);
						mysql_tquery(connectionID, queryBuffer, "OnPlayerCallContact", "i", playerid);
					}
					case 1:
					{
						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT contact_name, contact_number FROM phone_contacts WHERE contact_id = %i", pData[playerid][pSelected]);
						mysql_tquery(connectionID, queryBuffer, "OnPlayerTextContact", "i", playerid);
					}
					case 2:
					{
						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM phone_contacts WHERE contact_id = %i", pData[playerid][pSelected]);
						mysql_tquery(connectionID, queryBuffer);

						ListContacts(playerid);
						SCMf(playerid, COLOR_YELLOW, "You have deleted the selected contact.");
					}
				}
			}
			else
			{
				ListContacts(playerid);
			}
		}
		case DIALOG_CONTACTS_NUMBER:
		{
			if (response)
			{
				new number, string[128];

				if (sscanf(inputtext, "i", number))
				{
					format(string, sizeof(string), "Please input the number for the contact '%s':", gTargetName[playerid]);
					return ShowPlayerDialog(playerid, DIALOG_CONTACTS_NUMBER, DIALOG_STYLE_INPUT, "{FFFFFF}Contact number", string, "Submit", "Cancel");
				}
				else if (number < 1)
				{
					format(string, sizeof(string), "You have entered an invalid number.\n\nPlease input the number for the contact '%s':", gTargetName[playerid]);
					return ShowPlayerDialog(playerid, DIALOG_CONTACTS_NUMBER, DIALOG_STYLE_INPUT, "{FFFFFF}Contact number", string, "Submit", "Cancel");
				}
				else
				{
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO phone_contacts (phone_number, contact_name, contact_number) VALUES(%i, '%e', %i)", pData[playerid][pPhone], gTargetName[playerid], number);
					mysql_tquery(connectionID, queryBuffer);

					ListContacts(playerid);
					SCMf(playerid, COLOR_YELLOW, "You have added a contact: %s (%i).", gTargetName[playerid], number);
				}
			}
		}
		case DIALOG_CONTACTS_ADD:
		{
			if (response)
			{
				if (isnull(inputtext))
				{
					return ShowPlayerDialog(playerid, DIALOG_CONTACTS_ADD, DIALOG_STYLE_INPUT, "{FFFFFF}Add contact", "Please input the name of the contact to add below:", "Submit", "Cancel");
				}
				else if (strlen(inputtext) > 24)
				{
					return ShowPlayerDialog(playerid, DIALOG_CONTACTS_ADD, DIALOG_STYLE_INPUT, "{FFFFFF}Add contact", "The contact name must be below 24 characters.\n\nPlease input the name of the contact to add below:", "Submit", "Cancel");
				}
				else
				{
					strcpy(gTargetName[playerid], inputtext, MAX_PLAYER_NAME);

					new string[128];
					format(string, sizeof(string), "Please input the number for the contact '%s':", gTargetName[playerid]);
					ShowPlayerDialog(playerid, DIALOG_CONTACTS_NUMBER, DIALOG_STYLE_INPUT, "{FFFFFF}Contact number", string, "Submit", "Cancel");
				}
			}
			else
			{
				ListContacts(playerid);
			}
			return 1;
		}
		case DIALOG_CONTACTS:
		{
			if (response)
			{
				if (listitem == 0)
				{
					ShowPlayerDialog(playerid, DIALOG_CONTACTS_ADD, DIALOG_STYLE_INPUT, "{FFFFFF}Add contact", "Please input the name of the contact to add below:", "Submit", "Cancel");
				}
				else
				{
					pData[playerid][pSelected] = gListedItems[playerid][--listitem];

					ShowPlayerDialog(playerid, DIALOG_CONTACTS_OPTIONS, DIALOG_STYLE_LIST, "{FFFFFF}Contact options", "Call contact\nText Message\nDelete contact", "Select", "Cancel");
				}
			}
		}
		case DIALOG_PHONE_SMS_TEXT:
		{
			new text[128];
			new number = pData[playerid][pPhoneSMS];

			if (response)
			{
				if (sscanf(inputtext, "s[128]", text))
				{
					ShowPlayerDialog(playerid, DIALOG_PHONE_SMS_TEXT, DIALOG_STYLE_INPUT, "SMS Text", "Please type your message:", "Send", "Cancel");
				}
				else
				{
					foreach(new i : Player)
					{
						if(pData[i][pPhone] == number)
						{
							if(pData[i][pJailType] > 0)
							{
								return SCM(playerid, COLOR_ERROR, "That player is currently imprisoned and cannot use their phone.");
							}
							if(pData[i][pTogglePhone])
							{
								return SCM(playerid, COLOR_ERROR, "That player has their mobile phone switched off.");
							}

							SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s takes out a cellphone and sends a message.", GetRPName(playerid));

							if(strlen(text) > MAX_SPLIT_LENGTH)
							{
								SCMf(i, COLOR_RCRPOOC, "** [Text from %s] (%i): %.*s... **", GetRPName(playerid), pData[playerid][pPhone], MAX_SPLIT_LENGTH, text);
								SCMf(i, COLOR_RCRPOOC, "** [Text from %s] (%i): ...%s **", GetRPName(playerid), pData[playerid][pPhone], text[MAX_SPLIT_LENGTH]);

								SCMf(playerid, COLOR_RED, "** [Text to %s] (%i): %.*s... **", GetRPName(i), pData[i][pPhone], MAX_SPLIT_LENGTH, text);
								SCMf(playerid, COLOR_RED, "** [Text to %s] (%i): ...%s **", GetRPName(i), pData[i][pPhone], text[MAX_SPLIT_LENGTH]);
							}
							else
							{
								SCMf(i, COLOR_RCRPOOC, "** [Text from %s] (%i): %s **", GetRPName(playerid), pData[playerid][pPhone], text);
								SCMf(playerid, COLOR_RED, "** [Text to %s] (%i): %s **", GetRPName(i), pData[i][pPhone], text);
							}

							/*if(pData[i][pTextFrom] == INVALID_PLAYER_ID)
							{
								SCM(i, COLOR_WHITE, "** You can use '/rsms [message]' to reply to this text message.");
							}*/

							pData[i][pTextFrom] = playerid;

							return 1;
						}
					}

					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, jailtype, togglephone FROM users WHERE phone = %i", number);
					mysql_tquery(connectionID, queryBuffer, "OnPlayerSendTextMessage", "iis", playerid, number, text);
				}
			}
		}
		case DIALOG_PHONE_SMS:
		{
			new number;

			if (response)
			{
				if(pData[playerid][pTogglePhone])
					return SCM(playerid, COLOR_ERROR, "You have your phone toggled.");

				if (sscanf(inputtext, "i", number))
				{
					return ShowPlayerDialog(playerid, DIALOG_PHONE_SMS, DIALOG_STYLE_INPUT, "{6688FF}SMS Number", "Please specify the number you would like to SMS:", "Sms", "Cancel");
				}
				else if (pData[playerid][pPhone] == number)
				{
					return ShowPlayerDialog(playerid, DIALOG_PHONE_SMS, DIALOG_STYLE_INPUT, "{6688FF}SMS Number", "You can't text your own number.\n\nPlease specify the number you would like to SMS:", "Sms", "Cancel");
				}
				else if (number < 1)
				{
					return ShowPlayerDialog(playerid, DIALOG_PHONE_SMS, DIALOG_STYLE_INPUT, "{6688FF}SMS Number", "Please specify the number you would like to SMS:", "Sms", "Cancel");
				}
				else
				{
					pData[playerid][pPhoneSMS] = number;

					ShowPlayerDialog(playerid, DIALOG_PHONE_SMS_TEXT, DIALOG_STYLE_INPUT, "SMS Text", "Please type your message:", "Send", "Cancel");
				}
			}
		}
		case DIALOG_PHONE_CALL:
		{
			if (response)
			{
				if(pData[playerid][pTogglePhone])
					return SCM(playerid, COLOR_ERROR, "You have your phone toggled.");

				new number;

				if (sscanf(inputtext, "i", number))
				{
					return ShowPlayerDialog(playerid, DIALOG_PHONE_CALL, DIALOG_STYLE_INPUT, "{6688FF}Call Number", "Please specify the number you would like to call:", "Call", "Cancel");
				}
				else if (pData[playerid][pCallLine] != INVALID_PLAYER_ID)
				{
					return ShowPlayerDialog(playerid, DIALOG_PHONE_CALL, DIALOG_STYLE_INPUT, "{6688FF}Call Number", "You are already on a call. Use {6688FF}/hangup{FFFFFF} to end it.\n\nPlease specify the number you would like to call:", "Call", "Cancel");
				}
				else if (pData[playerid][pPhone] == number)
				{
					return ShowPlayerDialog(playerid, DIALOG_PHONE_CALL, DIALOG_STYLE_INPUT, "{6688FF}Call Number", "You can't dial your own number.\n\nPlease specify the number you would like to call:", "Call", "Cancel");
				}
				else if (number < 1)
				{
					return ShowPlayerDialog(playerid, DIALOG_PHONE_CALL, DIALOG_STYLE_INPUT, "{6688FF}Call Number", "You have entered an invalid phone number.\n\nPlease specify the number you would like to call:", "Call", "Cancel");
				}
				else
				{
					if(number == 911)
					{
						pData[playerid][pCallLine] = playerid;
						pData[playerid][pCallStage] = 911;

						SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s dials a number on their keypad and begins a call.", GetRPName(playerid));
						SCM(playerid, COLOR_YELLOW, "Dispatch: 911, what is your emergency? Enter 'police' or 'medic'.");
						return 1;
					}
					else if(number == 6397)
					{
						pData[playerid][pCallLine] = playerid;
						pData[playerid][pCallStage] = 6397;

						PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
						SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s dials a number on their keypad and begins a call.", GetRPName(playerid));
						SCM(playerid, SERVER_COLOR, "News Team: This is News here. Leave a message and we'll get back to you! *BEEP*");
						return 1;
					}
					else if(number == 6324)
					{
						pData[playerid][pCallLine] = playerid;
						pData[playerid][pCallStage] = 6324;

						PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
						SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s dials a number on their keypad and begins a call.", GetRPName(playerid));
						SCM(playerid, COLOR_LIGHTORANGE, "Dispatch: This is the mechanic hotline. Please explain your situation to us.");
						return 1;
					}
					else if(number == 8294)
					{
						if(CountTaxiDrivers() < 1)
							return SCM(playerid, COLOR_YELLOW, "Dispatch: Sorry but we currently have no on duty taxi drivers.");

						pData[playerid][pCallLine] = playerid;
						pData[playerid][pCallStage] = 8294;

						PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
						SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s dials a number on their keypad and begins a call.", GetRPName(playerid));
						SCM(playerid, COLOR_YELLOW, "Dispatch: This is the cab company. Please state your location and destination.");
						return 1;
					}
					else if(number == 666)
					{
						PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
						SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s dials a number on their keypad and begins a call.", GetRPName(playerid));
						SCM(playerid, COLOR_WHITE, "** They hung up their phone and ended the call.");
						return 1;
					}

					foreach(new i : Player)
					{
						if(pData[i][pTogglePhone])
							return SCM(playerid, COLOR_ERROR, "The player's phone is off.");

						if(pData[i][pPhone] == number)
						{
							if(pData[i][pJailType] > 0)
							{
								return SCM(playerid, COLOR_ERROR, "That player is currently imprisoned and cannot use their phone.");
							}
							if(pData[i][pCallLine] != INVALID_PLAYER_ID)
							{
								for(new f = 0; f < 13; f ++)
								{
									TextDrawHideForPlayer(i, CallingTD[f]);
								}
								for(new g = 0; g < 5; g++) {
									PlayerTextDrawHide(i, CallingPlayerTD[playerid][g]);
								}
								TextDrawHideForPlayer(i, CloseCallTD);
								TextDrawHideForPlayer(i, PICKUP);
								TextDrawHideForPlayer(i, HANGUP);
								return SCM(playerid, COLOR_ERROR, "This player is currently in a call. Wait until they hang up.");
							}
							if(pData[i][pTogglePhone])
							{
								return SCM(playerid, COLOR_ERROR, "That player has their mobile phone switched off.");
							}
							if(pData[i][pLiveBroadcast] != INVALID_PLAYER_ID)
							{
								return SCM(playerid, COLOR_ERROR, "That player is currently in a live interview and can't talk on the phone.");
							}

							SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);

							KillTimer(pData[playerid][pCallTimer]);
							KillTimer(pData[i][pCallTimer]);

							pData[playerid][pCallTimer] = SetTimerEx("OnPhoneBecomeAvailable", 1000 * 30, false, "d", playerid);
							pData[i][pCallTimer] = SetTimerEx("OnPhoneBecomeAvailable", 1000 * 30, false, "d", i);

							pData[playerid][pCallLine] = i;
							pData[playerid][pCalling] = 1;
							pData[playerid][pCallStage] = 0;

							pData[i][pCallLine] = playerid;
							pData[i][pCallStage] = 1;

							SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s dials a number on their keypad and begins a call.", GetRPName(playerid));
							SendProximityMessage(i, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s's mobile phone begins to ring.", GetRPName(i));
							PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);

							SCMf(playerid, COLOR_YELLOW, "** You've placed a call to number: %i. Please wait for your call to be answered.", number);
							SCMf(i, COLOR_YELLOW, "** Incoming call from %s [%i]. Use /pickup to take this call.", GetRPName(playerid), pData[playerid][pPhone]);
							PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);

							calling(i, GetPlayerNameEx(playerid), GetPlayerSkinScript(playerid), pData[playerid][pPhone]);

							for(new f = 0; f < 13; f++) {
								TextDrawShowForPlayer(i, CallingTD[f]);
							}
							for(new g = 0; g < 4; g++) {
								PlayerTextDrawShow(i, CallingPlayerTD[playerid][g]);
							}
							TextDrawShowForPlayer(i, CloseCallTD);
							TextDrawShowForPlayer(i, PICKUP);
							TextDrawShowForPlayer(i, HANGUP);
							SelectTextDraw(i, COLOR_LIGHTBLUE);

							for(new f = 0; f < 20; f++) {
							TextDrawHideForPlayer(playerid, PhoneTD[f]);
							}
							TextDrawHideForPlayer(playerid, banktd);
							TextDrawHideForPlayer(playerid, mesaagetd);
							TextDrawHideForPlayer(playerid, calltd);
							TextDrawHideForPlayer(playerid, contactstd);
							TextDrawHideForPlayer(playerid, phoneclosetd);
							TextDrawHideForPlayer(playerid, musictd);
							TextDrawHideForPlayer(playerid, twittertd);

							calling(playerid, GetPlayerNameEx(i), GetPlayerSkinScript(i), pData[i][pPhone]);

							for(new f = 0; f < 13; f++) {
								TextDrawShowForPlayer(playerid, CallingTD[f]);
							}
							for(new g = 0; g < 5; g++) {
								PlayerTextDrawShow(playerid, CallingPlayerTD[playerid][g]);
							}
							PlayerTextDrawHide(playerid, CallingPlayerTD[playerid][3]);
							TextDrawShowForPlayer(playerid, CloseCallTD);
							//TextDrawShowForPlayer(playerid, PICKUP);
							TextDrawShowForPlayer(playerid, HANGUP);

							SelectTextDraw(playerid, COLOR_LIGHTBLUE);
							return 1;
						}
					}

					SCM(playerid, COLOR_ERROR, "That number is either not in service or the owner is offline.");
				}
			}
		}
		case DIALOG_PHONE:
		{
			if (response)
			{
				switch (listitem)
				{
					case 0:
					{
						ShowPlayerDialog(playerid, DIALOG_PHONE_CALL, DIALOG_STYLE_INPUT, "{6688FF}Call Number", "Please specify the number you would like to call:", "Call", "Cancel");
					}
					case 1:
					{
						ShowPlayerDialog(playerid, DIALOG_PHONE_SMS, DIALOG_STYLE_INPUT, "{6688FF}SMS Number", "Please specify the number you would like to SMS:", "Call", "Cancel");
					}
					case 2:
					{
						ListContacts(playerid);
					}
				}
			}
		}

	    case DIALOG_REGISTER:
    	{
	        if(response)
	        {
	            if(isnull(inputtext))
	            {
	                ShowDialogToPlayer(playerid, DIALOG_REGISTER);
	                return 1;
				}
	            if(strlen(inputtext) < 4)
	            {
	                SCM(playerid, COLOR_LIGHTRED, "** Please choose a password containing at least 4 characters.");
	                ShowDialogToPlayer(playerid, DIALOG_REGISTER);
	                return 1;
	            }

	            WP_Hash(pData[playerid][pPassword], 129, inputtext);
	            ShowPlayerDialog(playerid, DIALOG_CONFIRMPASS, DIALOG_STYLE_PASSWORD, ""SVRCLR"Confirmation", ""WHITE"Please repeat your account password for verification:", "Submit", "Back");
			}
			else
			{
			    KickPlayer(playerid);
			}
		}
		case DIALOG_CONFIRMPASS:
		{
		    if(response)
		    {
		        new
					password[129];

		        if(isnull(inputtext))
		        {
		            return ShowPlayerDialog(playerid, DIALOG_CONFIRMPASS, DIALOG_STYLE_PASSWORD, ""SVRCLR"Confirmation", ""WHITE"Please repeat your account password for verification:", "Submit", "Back");
				}

				WP_Hash(password, sizeof(password), inputtext);

				if(!strcmp(pData[playerid][pPassword], password))
				{
				    gTotalRegistered++;
				    SaveServerInfo();

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO users (username, password, regdate, lastlogin, ip) VALUES('%s', '%s', NOW(), NOW(), '%s')", GetPlayerNameEx(playerid), password, GetPlayerIP(playerid));
		            mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_ACCOUNT_REGISTER, playerid);
				}
				else
				{
				    ShowDialogToPlayer(playerid, DIALOG_REGISTER);
				    SCM(playerid, COLOR_LIGHTRED, "** Your repeated password does not match your chosen password. Please try again.");
				}
		    }
	        else
	        {
	            ShowDialogToPlayer(playerid, DIALOG_REGISTER);
	        }
	    }
	    case DIALOG_LOGIN:
	    {
	        if(response)
	        {
	            new
	                specifiers[] = "%D of %M, %Y @ %k:%i",
	                password[129];

				if(isnull(inputtext))
				{
				    ShowDialogToPlayer(playerid, DIALOG_LOGIN);
				    return 1;
				}

				WP_Hash(password, sizeof(password), inputtext);
				
				ShowNoticeGUIFrame(playerid, 3);
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT *, DATE_FORMAT(lastlogin, '%s') AS login_date FROM users WHERE username = '%s' AND password = '%s'", specifiers, GetPlayerNameEx(playerid), password);
				mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_PROCESS_LOGIN, playerid);
	        }
	        else
	        {
				KickPlayer(playerid);
			}
	    }
	    case DIALOG_GENDER:
	    {
	        if(response)
	        {
	            if(listitem == 0)
	            {
	                pData[playerid][pGender] = 1;
	                pData[playerid][pSkin] = 299;
	                SCM(playerid, COLOR_LIGHTRED, "Alright, so you're a Male. Please enter the approximate age of your character.");
				}
				else if(listitem == 1)
				{
	                pData[playerid][pGender] = 2;
	                pData[playerid][pSkin] = 12;
	                SCM(playerid, COLOR_LIGHTRED, "Alright, so you're a Female. Please enter the approximate age of your character.");
				}
		        ShowDialogToPlayer(playerid, DIALOG_AGE);
	        }
	        else
	        {
	            ShowDialogToPlayer(playerid, DIALOG_GENDER);
			}
	    }
	    case DIALOG_PAYCHECK:
		{
	 		if(!response) return 1;
			new
				szMessage[150];
	   		if(strlen(inputtext) < 1)
			{
	            format(szMessage, sizeof(szMessage), "You must enter the check code before signing.\n\nCheck code: %d\n\nEnter your check code to receive your paycheck:", PayCheckCode[playerid]);
				ShowPlayerDialog(playerid, DIALOG_PAYCHECK, DIALOG_STYLE_INPUT, SERVER_DIALOG, szMessage, "Paycheck","Cancel");
				return 1;
	        }
			if(!IsNumeric(inputtext))
			{
	 			format(szMessage, sizeof(szMessage), "Wrong check code. The check code consists out of numbers only.\n\nCheck code: %d\n\nEnter your check code to receive your paycheck:", PayCheckCode[playerid]);
				ShowPlayerDialog(playerid, DIALOG_PAYCHECK, DIALOG_STYLE_INPUT, SERVER_DIALOG, szMessage, "Paycheck","Cancel");
				return 1;
			}
	        if(strlen(inputtext) > 6 || (strlen(inputtext) > 0 && strlen(inputtext) < 6))
			{
	           	format(szMessage, sizeof(szMessage), "Wrong check code. The check code consists out of 6 digits.\n\nCheck code: %d\n\nEnter your check code to receive your paycheck:", PayCheckCode[playerid]);
				ShowPlayerDialog(playerid, DIALOG_PAYCHECK, DIALOG_STYLE_INPUT, SERVER_DIALOG, szMessage, "Paycheck","Cancel");
				return 1;
	        }
	        new code = strval(inputtext);
        	if(code == PayCheckCode[playerid])
	        {
				SendPaycheck(playerid);
	        	PayCheckCode[playerid] = 0;
			}
			else
			{
	            SCM(playerid, COLOR_WHITE, "Wrong check code.");
	        }
		}
   	    case DIALOG_PAINTBALL:
	    {
	        if(response)
	        {
	            if(listitem == 0)
	            {
	            	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has entered the Warehouse arena.", GetRPName(playerid));
           			foreach(new i : Player)
		    		if(pData[i][pPaintball])
		    		{
		        	SM(i, COLOR_LIGHTORANGE, "(( %s has entered the Warehouse arena. ))", GetRPName(playerid));
					}
					pbscore1[playerid] = 0;
					pbscore2[playerid] = 0;
	                SetPlayerInPaintball(playerid);

					if(GetPBPlayers1() == 1) {
						PaintballTimer1 = 301;
						SCM(playerid, -1, "You have started a new paintball game!");
					}
				}
				else if(listitem == 1)
				{
				    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has entered the Battlefield arena.", GetRPName(playerid));
					foreach(new i : Player)
		    		if(pData[i][pPaintball2])
		    		{
		        	SM(i, COLOR_LIGHTORANGE, "(( %s has entered the Battlefield arena. ))", GetRPName(playerid));
					}
   					pbscore1[playerid] = 0;
					pbscore2[playerid] = 0;
	                SetPlayerInPaintball2(playerid);

					if(GetPBPlayers2() == 1) {
						PaintballTimer2 = 301;
						SCM(playerid, -1, "You have started a new paintball game!");
					}
				}
				pData[playerid][bpWearing] = 0;
	        }
	        else
	        {
	            ShowDialogToPlayer(playerid, DIALOG_PAINTBALL);
			}
	    }
   	    case DIALOG_BUYVEHICLENEW:
	    {
	        if(response)
			{
			    switch(listitem)
			    {
					case 0: ShowVehicleSelectionMenu(playerid, MODEL_SELECTION_VEHICLES);
					case 1: ShowDialogToPlayer(playerid, DIALOG_BUYVEHICLE);
				}
			}
		}
		case DIALOG_UPDATES:
		{
			new string[500], titlestr[500], str[3000];
			if(response)
			{
				if(listitem == 0)
				{
					format(string, sizeof(string), "GTA: A:RP v0.1.73 updates.");
					strcat(titlestr, string);

					format(string, sizeof(string), "���Added:\n");
					strcat(str, string);
					format(string, sizeof(string), "Interaction System - Credits to our Contributor Tiyo & Genji for providing a unique system to the team. You may use /interaction to view.\n\n");
					strcat(str, string);
					format(string, sizeof(string), "Safe Zone Points(Dynamic System) - Added for safety/In-Character Purposes.\n");
					strcat(str, string);
					format(string, sizeof(string), "Sabong Local Event - For events. This will be enabled only by the Board of Directors.\n\n");
					strcat(str, string);
					format(string, sizeof(string), "Improved:\n");
					strcat(str, string);
					format(string, sizeof(string), "Double Salary - Adjusted to 10th Times salary.\n");
					strcat(str, string);
					format(string, sizeof(string), "Normal Salary(Per Jobs) - Adjusted 2 times.\n");
					strcat(str, string);
					format(string, sizeof(string), "Discord-SAMP Verification - Seperated to 2 types of Command.\n\n");
					strcat(str, string);

					format(string, sizeof(string), "{AAAAAA}LLC 2022, Alcazar Gaming["SERVER_URL"].\n");
					strcat(str, string);
					ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, titlestr, str, "Okay", "");
				}
				if(listitem == 1)
				{
					format(string, sizeof(string), "GTA: A:RP v0.1.692 updates.");
					strcat(titlestr, string);

					format(string, sizeof(string), "���Added:\n");
					strcat(str, string);
					format(string, sizeof(string), "10-minute Timer Verification on Registration\n\n");
					strcat(str, string);
					format(string, sizeof(string), "Improved:\n");
					strcat(str, string);
					format(string, sizeof(string), "Time Converter\n");
					strcat(str, string);
					format(string, sizeof(string), "Hunger and Thirst Text Draw - Changing colors depending on your Hunger/Thirst Count.\n\n");
					strcat(str, string);

					format(string, sizeof(string), "{AAAAAA}LLC 2022, Alcazar Gaming["SERVER_URL"].\n");
					strcat(str, string);
					ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, titlestr, str, "Okay", "");
				}
				if(listitem == 2)
				{
					format(string, sizeof(string), "GTA: A:RP v0.1.69 updates.");
					strcat(titlestr, string);

					format(string, sizeof(string), "���Added:\n");
					strcat(str, string);
					format(string, sizeof(string), "Public Relation Menu - Added for Administering the server. ADMIN SYSTEM\n\n");
					strcat(str, string);
					format(string, sizeof(string), "Improved:\n");
					strcat(str, string);
					format(string, sizeof(string), "Discord/SA-MP Paycheck code\n");
					strcat(str, string);
					format(string, sizeof(string), "Hunger and Thirst Text Draw\n\n");
					strcat(str, string);

					format(string, sizeof(string), "{AAAAAA}LLC 2022, Alcazar Gaming["SERVER_URL"].\n");
					strcat(str, string);
					ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, titlestr, str, "Okay", "");
				}
				if(listitem == 3)
				{
					format(string, sizeof(string), "GTA: A:RP v0.1.685 updates.");
					strcat(titlestr, string);

					format(string, sizeof(string), "���Added:\n");
					strcat(str, string);
					format(string, sizeof(string), "Lotto System - Added for casino stuff. You may buy a ticket on any 24/7 shops.\n\n");
					strcat(str, string);
					format(string, sizeof(string), "Improved:\n");
					strcat(str, string);
					format(string, sizeof(string), "Discord/SA-MP Verification 2.0 - Anyone who verifies their account will also  be linked to the user who executed the !link command. \nUnlinking your account will make your discord account an Uncertified Civilian .\n\n");
					strcat(str, string);

					format(string, sizeof(string), "{AAAAAA}LLC 2022, Alcazar Gaming["SERVER_URL"].\n");
					strcat(str, string);
					ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, titlestr, str, "Okay", "");
				}
				if(listitem == 4)
				{
					format(string, sizeof(string), "GTA: A:RP v0.1.68 updates.");
					strcat(titlestr, string);

					format(string, sizeof(string), "���Added:\n");
					strcat(str, string);
					format(string, sizeof(string), "Jailbreak - You can now Break from your prison. To break from jail, you need some tools only polices have. \nModifications for this system is available until further announcement.\n\n");
					strcat(str, string);
					format(string, sizeof(string), "Improved:\n");
					strcat(str, string);
					format(string, sizeof(string), "Logs Watcher\n");
					strcat(str, string);
					format(string, sizeof(string), "Phone Number - Adjusted. When you buy a phone, your phone number will be set randomly. \nPhone numbers is now on 11 digit number. starting from '09'.\n\n");
					strcat(str, string);

					format(string, sizeof(string), "{AAAAAA}LLC 2022, Alcazar Gaming["SERVER_URL"].\n");
					strcat(str, string);
					ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, titlestr, str, "Okay", "");
				}
				if(listitem == 5)
				{
					format(string, sizeof(string), "GTA: A:RP v0.1.675 updates.");
					strcat(titlestr, string);

					format(string, sizeof(string), "���Added:\n");
					strcat(str, string);
					format(string, sizeof(string), "Discord/SA-MP Verification\n\n");
					strcat(str, string);
					format(string, sizeof(string), "Removed:\n");
					strcat(str, string);
					format(string, sizeof(string), "Some structures that is useless to the server.\n\n");
					strcat(str, string);

					format(string, sizeof(string), "{AAAAAA}LLC 2022, Alcazar Gaming["SERVER_URL"].\n");
					strcat(str, string);
					ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, titlestr, str, "Okay", "");
				}
				if(listitem == 6)
				{
					format(string, sizeof(string), "GTA: A:RP v0.1.66 updates.");
					strcat(titlestr, string);

					format(string, sizeof(string), "���Added:\n");
					strcat(str, string);
					format(string, sizeof(string), "VIP Lounge - Under Observation\n");
					strcat(str, string);
					format(string, sizeof(string), "Public Garage/Spawning Vehicle at Personal Garage - To spawn your vehicle, get nearby to any Garage(Private and Public) and \nuse /v storage\n");
					strcat(str, string);
					format(string, sizeof(string), "Fireworks - /placefirework, /fireworkhelp\n");
					strcat(str, string);
					format(string, sizeof(string), "Land System\n\n");
					strcat(str, string);
					format(string, sizeof(string), "Notice Box\n\n");
					strcat(str, string);
					format(string, sizeof(string), "���Improved:\n");
					strcat(str, string);
					format(string, sizeof(string), "VIP Chat - Adjusted to /vip\n");
					strcat(str, string);
					format(string, sizeof(string), "Newbie Chat - Adjusted. You can send your questions without popping out a dialog. Helpers/Advisors are \nneeded to trash your question to close it.\n");
					strcat(str, string);
					format(string, sizeof(string), "Gang Strike System\n");
					strcat(str, string);
					format(string, sizeof(string), "Business Map Icon/Entrance Icon\n\n");
					strcat(str, string);
					format(string, sizeof(string), "Turf And point News - News about their availability will be more detailed.\n\n");
					strcat(str, string);
					format(string, sizeof(string), "Removed:\n");
					strcat(str, string);
					format(string, sizeof(string), "Dynamic Safezone System\n\n");
					strcat(str, string);

					format(string, sizeof(string), "{AAAAAA}LLC 2022, Alcazar Gaming["SERVER_URL"].\n");
					strcat(str, string);
					ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, titlestr, str, "Okay", "");
				}
				if(listitem == 7)
				{
					format(string, sizeof(string), "GTA: A:RP v0.1.62 updates.");
					strcat(titlestr, string);

					format(string, sizeof(string), "���Added:\n");
					strcat(str, string);
					format(string, sizeof(string), "/redeem - Added\n");
					strcat(str, string);
					format(string, sizeof(string), "Top Playing Hours - Added. This system will be an event every month!. Check it out in-game. Usage: /top\n");
					strcat(str, string);
					format(string, sizeof(string), "Chat Animation - Enabled.\n\n");
					strcat(str, string);
					format(string, sizeof(string), "Department of Motor Vehicles(DMV).\n\n");
					strcat(str, string);
					format(string, sizeof(string), "Identification Card - Added. Usage: /showid\n\n");
					strcat(str, string);
					format(string, sizeof(string), "���Improved:\n");
					strcat(str, string);
					format(string, sizeof(string), "Discord Commands v1 - Improved. For administrator purposes\n");
					strcat(str, string);
					format(string, sizeof(string), "Login/Register  Labels\n");
					strcat(str, string);
					format(string, sizeof(string), "Voucher System\n\n");
					strcat(str, string);
					format(string, sizeof(string), "Verification System\n\n");
					strcat(str, string);
					format(string, sizeof(string), "Removed:\n");
					strcat(str, string);
					format(string, sizeof(string), "Dynamic Surgery System\n\n");
					strcat(str, string);

					format(string, sizeof(string), "{AAAAAA}LLC 2022, Alcazar Gaming["SERVER_URL"].\n");
					strcat(str, string);
					ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, titlestr, str, "Okay", "");
				}
				if(listitem == 8)
				{
					format(string, sizeof(string), "GTA: A:RP v0.1.613 updates.");
					strcat(titlestr, string);

					format(string, sizeof(string), "���Added:\n");
					strcat(str, string);
					format(string, sizeof(string), "Text Draw\n");
					strcat(str, string);
					format(string, sizeof(string), "Discord Commands.\n");
					strcat(str, string);
					format(string, sizeof(string), "/redeem\n\n");
					strcat(str, string);
					format(string, sizeof(string), "���Improved:\n");
					strcat(str, string);
					format(string, sizeof(string), "Dynamic Safezone System\n");
					strcat(str, string);
					format(string, sizeof(string), "Verification system\n");
					strcat(str, string);
					format(string, sizeof(string), "Priority Cooldown\n\n");
					strcat(str, string);
					format(string, sizeof(string), "Removed:\n");
					strcat(str, string);
					format(string, sizeof(string), "Dynamic Open Interior Business\n\n");
					strcat(str, string);

					format(string, sizeof(string), "{AAAAAA}LLC 2022, Alcazar Gaming["SERVER_URL"].\n");
					strcat(str, string);
					ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, titlestr, str, "Okay", "");
				}
				if(listitem == 9)
				{
					format(string, sizeof(string), "GTA: A:RP v0.1.59 updates.");
					strcat(titlestr, string);

					format(string, sizeof(string), "���Graffiti System - Improved. I update this thing cuz' it streams too long.\nI adjust the time stream to 3 sec or more I think. I'll spread some of it on the city.\n");
					strcat(str, string);
					format(string, sizeof(string), "���/wipescreen - Improved. It can clear 87% of your messages at your client.\n");
					strcat(str, string);
					format(string, sizeof(string), "���Gang Strike System - Improved. It will send some specific info when and who striked the gang.\n");
					strcat(str, string);
					format(string, sizeof(string), "���Redeem system - Added. You may use the command /redeem anytime. It has 2 type of code that you can redeem:\n");
					strcat(str, string);
					format(string, sizeof(string), "Refund - Freebies for newbies.\n");
					strcat(str, string);
					format(string, sizeof(string), "Claim - this command will be available every 12 hours ingame. Note: Claim cooldown will always reset when we restart the server.\n");
					strcat(str, string);
					format(string, sizeof(string), "���/updates - Added. You may see our updates from the last 2 months.\n\n");

					format(string, sizeof(string), "{AAAAAA}LLC 2022, Alcazar Gaming["SERVER_URL"].\n");
					strcat(str, string);
					ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, titlestr, str, "Okay", "");
				}
				if(listitem == 10)
				{
					format(string, sizeof(string), "GTA: A:RP v0.1.586 updates.");
					strcat(titlestr, string);

					format(string, sizeof(string), "���Graffiti System - Improved. I update this thing cuz' it streams too long.\nI adjusted the time stream to 3 sec or more I think. I'll spread some of it on the city.\n");
					strcat(str, string);
					format(string, sizeof(string), "���/wipescreen - Improved. It can clear 87% of your messages at your client.\n\n");
					strcat(str, string);

					format(string, sizeof(string), "{AAAAAA}LLC 2022, Alcazar Gaming["SERVER_URL"].\n");
					strcat(str, string);
					ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, titlestr, str, "Okay", "");
				}
				if(listitem == 11)
				{
					ShowPlayerDialog(playerid, DIALOG_UPDATES2, DIALOG_STYLE_TABLIST_HEADERS, "Updates\tDate",// str, "Okay", "");
					"GTA: A:RP v0.1.58\tJanuary 3, 2022\n\
					GTA: A:RP v0.1.565\tJanuary 1, 2022\n\
					GTA: A:RP v0.1.5\tDecember 31, 2021\n\
					GTA: A:RP v0.1.451\tDecember 28, 2021\n\
					GTA: A:RP v0.1.23\tDecember 16, 2021\n\
					GTA: A:RP v0.1.12\tDecember 13, 2021\n\
					GTA: A:RP v0.0.956\tDecember 6, 2021\n\
					GTA: A:RP v0.0.85\tNovember 20, 2021\n\
					GTA: A:RP v0.0.5\tNovember 11, 2021\n\
					"GREEN"Previous "WHITE"Page "RED"<<",
					"Okay", "");
				}
			}
			else
			{
				return 1;
			}
		}
		case DIALOG_UPDATES2:
		{
			new string[1024], str[3000], titlestr[500];
			if(response)
			{
				if(listitem == 0)
				{
					format(string, sizeof(string), "GTA: A:RP v0.1.58 updates.");
					strcat(titlestr, string);

					format(string, sizeof(string), "���Open Interior Business System v0.5 - Added. You cannot enter any businesses due the the said system.\nBut unfortunately, maps for our open interior businesses is currently unavailable.\n");
					strcat(str, string);
					format(string, sizeof(string), "���/rso(/requestshoutout) - Added. When a player executed this command, it will automatically directs to our online @Youtuber in-game\n\
					Usage: /(R)equest(S)hout(O)ut [text]\n\n");
					strcat(str, string);

					format(string, sizeof(string), "{AAAAAA}LLC 2022, Alcazar Gaming["SERVER_URL"].\n");
					strcat(str, string);
					ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, titlestr, str, "Okay", "");
				}
				if(listitem == 1)
				{
					format(string, sizeof(string), "GTA: A:RP v0.1.565 updates.");
					strcat(titlestr, string);

					format(string, sizeof(string), "���Police Department HQ Mappings v1 - Added.\n");
					strcat(str, string);
					format(string, sizeof(string), "���Airport Mappings - Added. Just some objects for sun blocking.\n");
					strcat(str, string);
					format(string, sizeof(string), "���Youtuber/Influencer Role - Added.\n\n");
					strcat(str, string);
					
					format(string, sizeof(string), "{AAAAAA}LLC 2022, Alcazar Gaming["SERVER_URL"].\n");
					strcat(str, string);
					ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, titlestr, str, "Okay", "");
				}
				if(listitem == 2)
				{
					format(string, sizeof(string), "GTA: A:RP v0.1.5 updates.");
					strcat(titlestr, string);

					format(string, sizeof(string), "���Simple Roleplay Verification -Like the Old CCRP v3 Application system, but it is simple and too easy.\n");
					strcat(str, string);
					format(string, sizeof(string), "���Helper Team rank - Increased(You may check it via discord)\n");
					strcat(str, string);
					format(string, sizeof(string), "���C-Bug Bot detector - more secured(Every time our bot detects a player that is using a c-bug form when shooting, the bot kicks the player).\n");
					strcat(str, string);
					format(string, sizeof(string), "���House Vault - Added.\n\n");
					strcat(str, string);

					format(string, sizeof(string), "{AAAAAA}LLC 2022, Alcazar Gaming["SERVER_URL"].\n");
					strcat(str, string);
					ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, titlestr, str, "Okay", "");
				}
				if(listitem == 3)
				{
					format(string, sizeof(string), "GTA: A:RP v0.1.451 updates.");
					strcat(titlestr, string);

					format(string, sizeof(string), "���Backpack System\n");
					strcat(str, string);
					format(string, sizeof(string), "���Discord bot(fixed).\n\n");
					strcat(str, string);
					
					format(string, sizeof(string), "{AAAAAA}LLC 2022, Alcazar Gaming["SERVER_URL"].\n");
					strcat(str, string);
					ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, titlestr, str, "Okay", "");
				}
				if(listitem == 4)
				{
					format(string, sizeof(string), "GTA: A:RP v0.1.23 updates.");
					strcat(titlestr, string);

					format(string, sizeof(string), "���Admin message.\n\n");
					strcat(str, string);
					
					format(string, sizeof(string), "{AAAAAA}LLC 2022, Alcazar Gaming["SERVER_URL"].\n");
					strcat(str, string);
					ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, titlestr, str, "Okay", "");
				}
				if(listitem == 5)
				{
					format(string, sizeof(string), "GTA: A:RP v0.1.12 updates.");
					strcat(titlestr, string);

					format(string, sizeof(string), "���Admin Update:\n\
					\tDynamic Admin - Added\n");
					strcat(str, string);
					format(string, sizeof(string), "���RP Badge - Added(Title Setting).\n\n");
					strcat(str, string);
					
					format(string, sizeof(string), "{AAAAAA}LLC 2022, Alcazar Gaming["SERVER_URL"].\n");
					strcat(str, string);
					ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, titlestr, str, "Okay", "");
				}
				if(listitem == 6)
				{
					format(string, sizeof(string), "GTA: A:RP v0.0.956 updates.");
					strcat(titlestr, string);

					format(string, sizeof(string), "���Vehicle panel - Added. Use /panel to interact with the panel.\n");
					strcat(str, string);
					format(string, sizeof(string), "���Sabong System - Fixed. But as of now, when you bet on the winner, I saw that you will not receive any reward unless we give it manually.\nSo, the system will be under development.\n\n");
					strcat(str, string);
					
					format(string, sizeof(string), "{AAAAAA}LLC 2022, Alcazar Gaming["SERVER_URL"].\n");
					strcat(str, string);
					ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, titlestr, str, "Okay", "");
				}
				if(listitem == 7)
				{
					format(string, sizeof(string), "GTA: A:RP v0.0.85 updates.");
					strcat(titlestr, string);

					format(string, sizeof(string), "���Binds - Database fixed.\n");
					strcat(str, string);
					format(string, sizeof(string), "���Public Garage - Revised to /vst.\n\n");
					strcat(str, string);
					
					format(string, sizeof(string), "{AAAAAA}LLC 2022, Alcazar Gaming["SERVER_URL"].\n");
					strcat(str, string);
					ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, titlestr, str, "Okay", "");
				}
				if(listitem == 8)
				{
					format(string, sizeof(string), "GTA: A:RP v0.0.5 updates.");
					strcat(titlestr, string);

					format(string, sizeof(string), "���Binds - Added(Slot 1-5)\n");
					strcat(str, string);
					format(string, sizeof(string), "���Priority - Added(Might bug sometime)\n");
					strcat(str, string);
					format(string, sizeof(string), "���Sampvoice - Fixed\n");
					strcat(str, string);
					format(string, sizeof(string), "���text colors - Revised(From Teal to a normal)\n");
					strcat(str, string);
					format(string, sizeof(string), "���RP Quiz on Register - Removed");
					strcat(str, string);
					
					format(string, sizeof(string), "{AAAAAA}LLC 2022, Alcazar Gaming["SERVER_URL"].\n");
					strcat(str, string);
					ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, titlestr, str, "Okay", "");
				}
				if(listitem == 9)
				{
					ShowPlayerDialog(playerid, DIALOG_UPDATES, DIALOG_STYLE_TABLIST_HEADERS, "Updates\tDate",// str, "Okay", "");
					"GTA: A:RP v0.1.73\tJanuary 11, 2022\n\
					GTA: A:RP v0.1.692\tJanuary 11, 2022\n\
					GTA: A:RP v0.1.69\tJanuary 11, 2022\n\
					GTA: A:RP v0.1.685\tJanuary 11, 2022\n\
					GTA: A:RP v0.1.68\tJanuary 11, 2022\n\
					GTA: A:RP v0.1.675\tJanuary 11, 2022\n\
					GTA: A:RP v0.1.66\tJanuary 11, 2022\n\
					GTA: A:RP v0.1.62\tJanuary 11, 2022\n\
					GTA: A:RP v0.1.613\tJanuary 7, 2022\n\
					GTA: A:RP v0.1.59\tJanuary 4, 2022\n\
					GTA: A:RP v0.1.586\tJanuary 3, 2022\n\
					"GREEN"Next {CCFFFF}Page "RED">>",
					"Okay", "");
				}
				if(listitem == 10)
				{
					ShowPlayerDialog(playerid, DIALOG_UPDATES3, DIALOG_STYLE_TABLIST_HEADERS, "Updates\tDate",// str, "Okay", "");
					"GTA: A:RP v0.1.795\tJanuary February 24, 2022\n\
					"GREEN"Previous {CCFFFF}Page "RED"<<",
					"Okay", "");
				}
			}
		}
		case DIALOG_UPDATES3:
		{
			if(response)
			{
				new str[3000], titlestr[500], string[1024];
				if(listitem == 0)
				{
					format(string, sizeof(string), "GTA: A:RP v0.1.795 updates.");
					strcat(titlestr, string);

					format(string, sizeof(string), "���Dynamic Actor System - Added.\n\n");
					strcat(str, string);
					format(string, sizeof(string), "���Improved:\n");
					strcat(str, string);
					format(string, sizeof(string), "���Global Chat - Restricted words on globalchat wil be replaced to '###'.\n");
					strcat(str, string);
					format(string, sizeof(string), "���Server Name - Revised. Our new server's name will be Alcazar Roleplay.");
					strcat(str, string);
					
					format(string, sizeof(string), "{AAAAAA}LLC 2022, Alcazar Gaming["SERVER_URL"].\n");
					strcat(str, string);
					ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, titlestr, str, "Okay", "");
				}
				if(listitem == 1)
				{
					ShowPlayerDialog(playerid, DIALOG_UPDATES2, DIALOG_STYLE_TABLIST_HEADERS, "Updates\tDate",// str, "Okay", "");
					"GTA: A:RP v0.1.58\tJanuary 3, 2022\n\
					GTA: A:RP v0.1.565\tJanuary 1, 2022\n\
					GTA: A:RP v0.1.5\tDecember 31, 2021\n\
					GTA: A:RP v0.1.451\tDecember 28, 2021\n\
					GTA: A:RP v0.1.23\tDecember 16, 2021\n\
					GTA: A:RP v0.1.12\tDecember 13, 2021\n\
					GTA: A:RP v0.0.956\tDecember 6, 2021\n\
					GTA: A:RP v0.0.85\tNovember 20, 2021\n\
					GTA: A:RP v0.0.5\tNovember 11, 2021\n\
					"GREEN"Previous "WHITE"Page "RED"<<\n\
					"GREEN"Next "WHITE"Page "RED">>",
					"Okay", "");
				}
			}
		}
	    case DIALOG_AGE:
	    {
	        if(response)
	        {
	            new age = strval(inputtext);

				if(!(14 <= age <= 99))
				{
				    ShowDialogToPlayer(playerid, DIALOG_AGE);
				    SCM(playerid, COLOR_ERROR, "You may only enter a number from 14 to 99. Please try again.");
				    return 1;
	            }

	            pData[playerid][pAge] = age;
				pData[playerid][pReferralUID] = 0;

	            SM(playerid, COLOR_LIGHTRED, "Alright, so you're %s and %i years old.", (pData[playerid][pGender] == 2) ? ("Female") : ("Male"), age);
	            ShowDialogToPlayer(playerid, DIALOG_REFERRAL);
	        }
	        else
	        {
	            ShowDialogToPlayer(playerid, DIALOG_AGE);
			}
	    }
	    case DIALOG_PUBLICRELATION:
	    {
	        if(response)
	        {
				if(listitem == 0) return 1; // Gang Section
				if(listitem == 1) return 1; // Gang Section
				if(listitem == 2) // Strike a gang
				{
					ShowPlayerDialog(playerid, DIALOG_GANGSTRIKE, DIALOG_STYLE_INPUT, "Strike a Gang", "Please put the gang id that you want to strike to:", "Yes", "No");
				}
				if(listitem == 3) // Remove a Gang
				{
					ShowPlayerDialog(playerid, DIALOG_GANGREMOVE, DIALOG_STYLE_INPUT, "Strike a Gang", "Please put the gang id that you want to remove for:", "Yes", "No");
				}
				if(listitem == 4) return 1; // Faction Section
				if(listitem == 5) return 1; // Faction Section
				if(listitem == 6) // shows the list of the factions
				{
					callcmd::factions1(playerid, "\1");
				}
				if(listitem == 7) // Removing faction
				{
					ShowPlayerDialog(playerid, DIALOG_FACTIONREMOVE, DIALOG_STYLE_INPUT, "Remove a Faction", "Please put the faction id that you want to remove for:", "Yes", "No");
				}
	        }
	    }
		case DIALOG_FACTIONREMOVE:
		{
			new factionid;
			if(response)
			{
				if(sscanf(inputtext, "i", factionid))
				{
					SCM(playerid, COLOR_SYNTAX, "Usage: /removefaction [factionid]");
					return ShowPlayerDialog(playerid, DIALOG_FACTIONREMOVE, DIALOG_STYLE_INPUT, "Remove a Faction", "Please put the faction id that you want to remove for:", "Yes", "No");
				}
				if(!(1 <= factionid < MAX_FACTIONS) || FactionInfo[factionid][fType] == FACTION_NONE)
				{
					SCM(playerid, COLOR_SYNTAX, "Invalid faction.");
					return ShowPlayerDialog(playerid, DIALOG_FACTIONREMOVE, DIALOG_STYLE_INPUT, "Remove a Faction", "Please put the faction id that you want to remove for:", "Yes", "No");
				}
				SAM(COLOR_LIGHTRED, "AdmCmd: Faction Moderator %s removed faction id %i", GetRPName(playerid), inputtext);
				RemoveFaction(factionid);
			}
		}
		case DIALOG_GANGSTRIKE:
		{
			if(response)
			{
				new gangid;
				if(sscanf(inputtext, "i", gangid))
				{
					ShowPlayerDialog(playerid, DIALOG_GANGSTRIKE, DIALOG_STYLE_INPUT, "Strike a Gang", "Please put the gang id that you want to strike to:", "Yes", "No");
				}
				if(!(1 <= gangid < MAX_GANGS) || !GangInfo[gangid][gSetup])
				{
					ShowPlayerDialog(playerid, DIALOG_GANGSTRIKE, DIALOG_STYLE_INPUT, "Strike a Gang", "Invalid Gang ID!!!\nPlease put the gang id that you want to strike to:", "Yes", "No");
				}
				SetPVarInt(playerid, "gangid", gangid);
				ShowPlayerDialog(playerid, DIALOG_GANGSTRIKE1, DIALOG_STYLE_INPUT, "Strike a Gang", "Please put the reason for the issuing strike:", "Yes", "No");
			}
		}
		case DIALOG_GANGSTRIKE1:
		{
			new gangid = GetPVarInt(playerid, "gangid");
			if(response)
			{
				if(isnull(inputtext))
				{
					ShowPlayerDialog(playerid, DIALOG_GANGSTRIKE1, DIALOG_STYLE_INPUT, "Strike a Gang", "Please put the reason for the issuing strike:", "Yes", "No");
				}
				if(strlen(inputtext) > 64)
				{
					ShowPlayerDialog(playerid, DIALOG_GANGSTRIKE, DIALOG_STYLE_INPUT, "Strike a Gang", "You cannot put words above 64 words.\n\nPlease put the reason for the issuing strike:", "Yes", "No");
				}
				GangInfo[gangid][gStrikes]++;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET strikes = %i WHERE id = %i", GangInfo[gangid][gStrikes], gangid);
				mysql_tquery(connectionID, queryBuffer);

				switch(GangInfo[gangid][gStrikes])
				{
					case 1:
					{
						SMA(0x4F9C4FFF, "====================================================================");
						SMA(COLOR_GREEN, "Gang News: "WHITE"%s has received their 1st strike.", GangInfo[gangid][gName]);
						SMA(COLOR_GREEN, "Issued by: "WHITE"%s.", pData[playerid][pAdminName]);
						SMA(COLOR_GREEN, "Issued date: "WHITE"%s.", GetDate());
						SMA(COLOR_GREEN, "Reason: "WHITE"%s", inputtext);
						SMA(0x4F9C4FFF, "====================================================================");
					}
					case 2:
					{
						SMA(0x4F9C4FFF, "====================================================================");
						SMA(COLOR_GREEN, "Gang News: "WHITE"%s has received their 2nd strike.", GangInfo[gangid][gName]);
						SMA(COLOR_GREEN, "Issued by: "WHITE"%s.", pData[playerid][pAdminName]);
						SMA(COLOR_GREEN, "Issued date: "WHITE"%s.", GetDate());
						SMA(COLOR_GREEN, "Reason: "WHITE"%s", inputtext);
						SMA(0x4F9C4FFF, "====================================================================");
					}
					case 3:
					{
						SMA(0x4F9C4FFF, "====================================================================");
						SMA(COLOR_GREEN, "Gang News: "WHITE"%s has received their 3rd strike and has been automatically removed from the family lists.", GangInfo[gangid][gName]);
						SMA(COLOR_GREEN, "Issued by: "WHITE"%s.", pData[playerid][pAdminName]);
						SMA(COLOR_GREEN, "Issued date: "WHITE"%s.", GetDate());
						SMA(COLOR_GREEN, "Reason: "WHITE"%s", inputtext);
						SMA(0x4F9C4FFF, "====================================================================");
						RemoveGang(gangid);
					}
				}
				DeletePVar(playerid, "gangid");
			}
		}
		case DIALOG_FACTIONS2:
	    {
	    	new super[268], str[3000], titlestring[2000];
	    	new factioncount, members = cache_get_row_int(0, 0);
	        if(response)
	        {
				for(new factionid = 1; factionid < MAX_FACTIONS; factionid++)
				{
					foreach(new i : Player)
					{
						if(pData[i][pLogged] && (FactionInfo[pData[i][pFaction]][fType] == factionid))
						{
							factioncount++;
						}
					}
					format(super, sizeof(super), "%s\n", FactionInfo[factionid][fName]);
					strcat(str, titlestring);
					format(super, sizeof(super), "Leadership: %s\n", FactionInfo[factionid][fLeader]);
					strcat(str, super);
					format(super, sizeof(super), "Member Count: %i\n\n", members);
					strcat(str, super);
					format(super, sizeof(super), "Online Member(s): %i\n\n", factioncount);
					strcat(str, super);
					ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, titlestring, super, "Confirm", "Close");
				}
	        }
	    }
		case DIALOG_BINDMAIN:
	    {
	        if(response)
	        {
	            if(listitem == 0)
				{
					SetPVarInt(playerid, "Bind1", 1);
					ShowPlayerDialog(playerid, DIALOG_BINDMAIN2, DIALOG_STYLE_LIST, "Binds", "Bind Type\nBind Text", "Confirm", "Cancel");
				}
				if(listitem == 1)
				{
					SetPVarInt(playerid, "Bind2", 1);
					ShowPlayerDialog(playerid, DIALOG_BINDMAIN2, DIALOG_STYLE_LIST, "Binds", "Bind Type\nBind Text", "Confirm", "Cancel");
				}
				if(listitem == 2)
				{
					SetPVarInt(playerid, "Bind3", 1);
					ShowPlayerDialog(playerid, DIALOG_BINDMAIN2, DIALOG_STYLE_LIST, "Binds", "Bind Type\nBind Text", "Confirm", "Cancel");
				}
				if(listitem == 3)
				{
					SetPVarInt(playerid, "Bind4", 1);
					ShowPlayerDialog(playerid, DIALOG_BINDMAIN2, DIALOG_STYLE_LIST, "Binds", "Bind Type\nBind Text", "Confirm", "Cancel");
				}
				if(listitem == 4)
				{
					SetPVarInt(playerid, "Bind5", 1);
					ShowPlayerDialog(playerid, DIALOG_BINDMAIN2, DIALOG_STYLE_LIST, "Binds", "Bind Type\nBind Text", "Confirm", "Cancel");
				}
	        }
	        else
	        {
				SCM(playerid, COLOR_GREY2, "Dialog Closed");
			}
	    }
		case DIALOG_BINDMAIN2:
	    {
	        if(response)
	        {
	            if(listitem == 0)
				{
					if(GetPVarInt(playerid, "Bind1") == 1)
					{
						DeletePVar(playerid, "Bind1");
						ShowDialogToPlayer(playerid, DIALOG_BINDTYPE);
					}
					if(GetPVarInt(playerid, "Bind2") == 1)
					{
						DeletePVar(playerid, "Bind2");
						ShowDialogToPlayer(playerid, DIALOG_BINDTYPE2);
					}
					if(GetPVarInt(playerid, "Bind3") == 1)
					{
						DeletePVar(playerid, "Bind3");
						ShowDialogToPlayer(playerid, DIALOG_BINDTYPE3);
					}
					if(GetPVarInt(playerid, "Bind4") == 1)
					{
						DeletePVar(playerid, "Bind4");
						ShowDialogToPlayer(playerid, DIALOG_BINDTYPE4);
					}
					if(GetPVarInt(playerid, "Bind5") == 1)
					{
						DeletePVar(playerid, "Bind5");
						ShowDialogToPlayer(playerid, DIALOG_BINDTYPE5);
					}
				}
				if(listitem == 1)
				{
					if(GetPVarInt(playerid, "Bind1") == 1)
					{
						DeletePVar(playerid, "Bind1");
						ShowDialogToPlayer(playerid, DIALOG_BINDTEXT);
					}
					if(GetPVarInt(playerid, "Bind2") == 1)
					{
						DeletePVar(playerid, "Bind2");
						ShowDialogToPlayer(playerid, DIALOG_BINDTEXT2);
					}
					if(GetPVarInt(playerid, "Bind3") == 1)
					{
						DeletePVar(playerid, "Bind3");
						ShowDialogToPlayer(playerid, DIALOG_BINDTEXT3);
					}
					if(GetPVarInt(playerid, "Bind4") == 1)
					{
						DeletePVar(playerid, "Bind4");
						ShowDialogToPlayer(playerid, DIALOG_BINDTEXT4);
					}
					if(GetPVarInt(playerid, "Bind5") == 1)
					{
						DeletePVar(playerid, "Bind5");
						ShowDialogToPlayer(playerid, DIALOG_BINDTEXT5);
					}
				}
	        }
	        else
	        {
				SCM(playerid, COLOR_GREY2, "Dialog Closed");
			}
	    }
	    case DIALOG_BINDTEXT:
	    {
	        if(response)
	        {
	            if(isnull(inputtext))
			    {
			        return ShowPlayerDialog(playerid, DIALOG_BINDTEXT, DIALOG_STYLE_INPUT, "bind text", "Wanna bind? Put the text below.", "Confirm", "Cancel");
				}
				if(strlen(inputtext) > 128)
				{
				    return ShowPlayerDialog(playerid, DIALOG_BINDTEXT, DIALOG_STYLE_INPUT, "bind text", "You cannot put more than 128 words\nPut the text below.", "Confirm", "Cancel");
				}
				strcpy(pData[playerid][pBind], inputtext, 128);
				SM(playerid, COLOR_WHITE, "You have set your slot 1's bind to '%s'.", pData[playerid][pBind]);
	        }
	        else
	        {
				SCM(playerid, COLOR_GREY2, "Dialog Closed");
			}
	    }
	    case DIALOG_BINDTEXT2:
	    {
	        if(response)
	        {
	            if(isnull(inputtext))
			    {
			        return ShowPlayerDialog(playerid, DIALOG_BINDTEXT2, DIALOG_STYLE_INPUT, "bind text", "Wanna bind? Put the text below.", "Confirm", "Cancel");
				}
				if (strlen(inputtext) > 128)
				{
				    return ShowPlayerDialog(playerid, DIALOG_BINDTEXT2, DIALOG_STYLE_INPUT, "bind text", "You cannot put more than 128 words\nPut the text below.", "Confirm", "Cancel");
				}

                strcpy(pData[playerid][pBind2], inputtext, 128);
				SM(playerid, COLOR_WHITE, "You have set your slot 2's bind to '%s'.", (pData[playerid][pBind2]));
	        }
	        else
	        {
				SCM(playerid, COLOR_GREY2, "Dialog Closed");
			}
	    }
	    case DIALOG_BINDTEXT3:
	    {
	        if(response)
	        {
	            if(isnull(inputtext))
			    {
			        return ShowPlayerDialog(playerid, DIALOG_BINDTEXT3, DIALOG_STYLE_INPUT, "bind text", "Wanna bind? Put the text below.", "Confirm", "Cancel");
				}
				if (strlen(inputtext) > 128)
				{
				    return ShowPlayerDialog(playerid, DIALOG_BINDTEXT3, DIALOG_STYLE_INPUT, "bind text", "You cannot put more than 128 words\nPut the text below.", "Confirm", "Cancel");
				}

                strcpy(pData[playerid][pBind3], inputtext, 128);
				SM(playerid, COLOR_WHITE, "You have set your slot 3's bind to '%s'.", (pData[playerid][pBind3]));
	        }
	        else
	        {
				SCM(playerid, COLOR_GREY2, "Dialog Closed");
			}
	    }
	    case DIALOG_BINDTEXT4:
	    {
	        if(response)
	        {
	            if(isnull(inputtext))
			    {
			        return ShowPlayerDialog(playerid, DIALOG_BINDTEXT4, DIALOG_STYLE_INPUT, "bind text", "Wanna bind? Put the text below.", "Confirm", "Cancel");
				}
				if (strlen(inputtext) > 128)
				{
				    return ShowPlayerDialog(playerid, DIALOG_BINDTEXT4, DIALOG_STYLE_INPUT, "bind text", "You cannot put more than 128 words\nPut the text below.", "Confirm", "Cancel");
				}

                strcpy(pData[playerid][pBind4], inputtext, 128);
				SM(playerid, COLOR_WHITE, "You have set your slot 4's bind to '%s'.", (pData[playerid][pBind4]));
	        }
	        else
	        {
				SCM(playerid, COLOR_GREY2, "Dialog Closed");
			}
	    }
	    case DIALOG_BINDTEXT5:
	    {
	        if(response)
	        {
	            if(isnull(inputtext))
			    {
			        return ShowPlayerDialog(playerid, DIALOG_BINDTEXT5, DIALOG_STYLE_INPUT, "bind text", "Wanna bind? Put the text below.", "Confirm", "Cancel");
				}
				if (strlen(inputtext) > 128)
				{
				    return ShowPlayerDialog(playerid, DIALOG_BINDTEXT5, DIALOG_STYLE_INPUT, "bind text", "You cannot put more than 128 words\nPut the text below.", "Confirm", "Cancel");
				}

                strcpy(pData[playerid][pBind5], inputtext, 128);
				SM(playerid, COLOR_WHITE, "You have set your slot 5's bind to '%s'.", (pData[playerid][pBind5]));
	        }
	        else
	        {
				SCM(playerid, COLOR_GREY2, "Dialog Closed");
			}
	    }
	    case DIALOG_BINDTYPE:
	    {
	        if(response)
	        {
	            if(listitem == 0)
	            {
					pData[playerid][pBindtype] = 0;
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bindtype = 0 WHERE uid = %i", pData[playerid][pID]);
    				mysql_tquery(connectionID, queryBuffer);
					SCM(playerid, COLOR_WHITE, "You have set slot 1's type to '/me'.");
				}
				if(listitem == 1)
	            {
					pData[playerid][pBindtype] = 1;
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bindtype = 1 WHERE uid = %i", pData[playerid][pID]);
    				mysql_tquery(connectionID, queryBuffer);
					SCM(playerid, COLOR_WHITE, "You have set slot 1's type to '/do'.");
				}
	        }
	        else
	        {
				SCM(playerid, COLOR_GREY2, "Dialog Closed");
			}
	    }
	    case DIALOG_BINDTYPE2:
	    {
	        if(response)
	        {
	            if(listitem == 0)
	            {
					pData[playerid][pBindtype2] = 0;
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bindtype2 = 0 WHERE uid = %i", pData[playerid][pID]);
    				mysql_tquery(connectionID, queryBuffer);
					SCM(playerid, COLOR_WHITE, "You have set slot 2's type to '/me'.");
				}
				if(listitem == 1)
	            {
					pData[playerid][pBindtype2] = 1;
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bindtype2 = 1 WHERE uid = %i", pData[playerid][pID]);
    				mysql_tquery(connectionID, queryBuffer);
					SCM(playerid, COLOR_WHITE, "You have set slot 2's type to '/do'.");
				}
	        }
	        else
	        {
				SCM(playerid, COLOR_GREY2, "Dialog Closed");
			}
	    }
	    case DIALOG_BINDTYPE3:
	    {
	        if(response)
	        {
	            if(listitem == 0)
	            {
					pData[playerid][pBindtype3] = 0;
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bindtype3 = 0 WHERE uid = %i", pData[playerid][pID]);
    				mysql_tquery(connectionID, queryBuffer);
					SCM(playerid, COLOR_WHITE, "You have set slot 3's type to '/me'.");
				}
				if(listitem == 1)
	            {
					pData[playerid][pBindtype3] = 1;
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bindtype3 = 1 WHERE uid = %i", pData[playerid][pID]);
    				mysql_tquery(connectionID, queryBuffer);
					SCM(playerid, COLOR_WHITE, "You have set slot 3's type to '/do'.");
				}
	        }
	        else
	        {
				SCM(playerid, COLOR_GREY2, "Dialog Closed");
			}
	    }
	    case DIALOG_BINDTYPE4:
	    {
	        if(response)
	        {
	            if(listitem == 0)
	            {
					pData[playerid][pBindtype4] = 0;
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bindtype4 = 0 WHERE uid = %i", pData[playerid][pID]);
    				mysql_tquery(connectionID, queryBuffer);
					SCM(playerid, COLOR_WHITE, "You have set slot 4's type to '/me'.");
				}
				if(listitem == 1)
	            {
					pData[playerid][pBindtype4] = 1;
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bindtype4 = 1 WHERE uid = %i", pData[playerid][pID]);
    				mysql_tquery(connectionID, queryBuffer);
					SCM(playerid, COLOR_WHITE, "You have set slot 4's type to '/do'.");
				}
	        }
	        else
	        {
				SCM(playerid, COLOR_GREY2, "Dialog Closed");
			}
	    }
	    case DIALOG_BINDTYPE5:
	    {
	        if(response)
	        {
	            if(listitem == 0)
	            {
					pData[playerid][pBindtype5] = 0;
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bindtype5 = 0 WHERE uid = %i", pData[playerid][pID]);
    				mysql_tquery(connectionID, queryBuffer);
					SCM(playerid, COLOR_WHITE, "You have set slot 5's type to '/me'.");
				}
				if(listitem == 1)
	            {
					pData[playerid][pBindtype5] = 1;
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bindtype5 = 1 WHERE uid = %i", pData[playerid][pID]);
    				mysql_tquery(connectionID, queryBuffer);
					SCM(playerid, COLOR_WHITE, "You have set slot 5's type to '/do'.");
				}
	        }
	        else
	        {
				SCM(playerid, COLOR_GREY2, "Dialog Closed");
			}
	    }
	    case DIALOG_REFERRAL:
	    {
	        if(response)
	        {
	            if(isnull(inputtext) || strlen(inputtext) > 24)
	            {
	                return ShowDialogToPlayer(playerid, DIALOG_REFERRAL);
				}
				if(!strcmp(inputtext, GetPlayerNameEx(playerid)))
				{
				    SCM(playerid, COLOR_SYNTAX, "You can't put down your own name as a referral.");
				    return ShowDialogToPlayer(playerid, DIALOG_REFERRAL);
				}

				/*StopAudioStreamForPlayer(playerid);
				SetCameraBehindPlayer(playerid);
				NewRegister(playerid);
				SetPlayerPos(playerid, 1718.3790,-1880.8490,13.5657);
				SetPlayerFacingAngle(playerid, 359.0366);
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);*/
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, ip, uid FROM users WHERE username = '%e'", inputtext);
				mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_CHECK_REFERRAL, playerid);
				SendClientMessage(playerid, COLOR_YELLOW, "You're good to go. But before that, you need to choose where to spawn.");
				ShowDialogToPlayer(playerid, DIALOG_TELEPORT);
				
	        }
	        else
	        {
				SendClientMessage(playerid, COLOR_YELLOW, "You're good to go. But before that, you need to choose where to spawn.");
				ShowDialogToPlayer(playerid, DIALOG_TELEPORT);
			}
	    }
	    case DIALOG_TELEPORT:
	    {
	        if(response)
	        {
				if(listitem == 0)
				{
					SetCameraBehindPlayer(playerid);
					NewRegister(playerid);
					SetPlayerPos(playerid, 1718.3790,-1880.8490,13.5657);
				}
				if(listitem == 1)
				{
					SetCameraBehindPlayer(playerid);
					NewRegister(playerid);
					SetPlayerPos(playerid, 1670.6908, 1423.5240, 10.7811);
				}
				if(listitem == 2)
				{
					SetCameraBehindPlayer(playerid);
					NewRegister(playerid);
					SetPlayerPos(playerid, -1421.5629, -288.9972, 14.1484);
				}
	        }
	    }
		/*#if defined Christmas
	#else
			case DIALOG_CAROL:
			{
				if(response)
				{
					new badingsiseanz = Random(3,10);
					if(isnull(inputtext) || strlen(inputtext) < 4)
					{
						SCM(playerid, COLOR_SYNTAX, "You have failed sing the lyrics.");
						pData[playerid][pLastCarolTime] = 30;
						return 1;
					}
					if(!strcmp(inputtext, ReturnLyrics(CarolLyrics[playerid])))
					{
						SM(playerid, SERVER_COLOR, "You have successfully sung the lyrics! "GREEN"You recieved %i candy.", badingsiseanz);
						pData[playerid][pCandy] += badingsiseanz;
						pData[playerid][pLastCarolTime] = 30;
						return 1;
					}
					else
					{
						SCM(playerid, COLOR_SYNTAX, "You have failed sing the lyrics.");
						pData[playerid][pLastCarolTime] = 30;
					}
				}
				else
				{
					SCM(playerid, COLOR_SYNTAX, "You have failed sing the lyrics.");
					pData[playerid][pLastCarolTime] = 30;
					return 1;
				}
			}
		#endif*/
	    case DIALOG_INTERIORS:
	    {
	        if(response)
	        {
	            TeleportToCoords(playerid, interiorArray[listitem][intX], interiorArray[listitem][intY], interiorArray[listitem][intZ], interiorArray[listitem][intA], interiorArray[listitem][intID], GetPlayerVirtualWorld(playerid));
	            GameTextForPlayer(playerid, "~w~Teleported", 5000, 1);
	        }
	    }
	    case DIALOG_BUYFURNITURE1:
	    {
	        new houseid = GetInsideHouse(playerid);

		    if(houseid == -1 || !HasFurniturePerms(playerid, houseid))
			{
				return 0;
			}

	   	    if(response)
	        {
				pData[playerid][pCategory] = listitem;
				ShowDialogToPlayer(playerid, DIALOG_BUYFURNITURE2);
	        }
	    }
	    case DIALOG_BUYFURNITURE2:
	    {
	        new houseid = GetInsideHouse(playerid);

	        if(houseid == -1 || !HasFurniturePerms(playerid, houseid))
			{
				return 0;
			}

	        if(response)
	        {
	            listitem += pData[playerid][pFurnitureIndex];

	            if(pData[playerid][pCash] < furnitureArray[listitem][fPrice])
	            {
	                return SCM(playerid, COLOR_SYNTAX, "You can't purchase this. You don't have enough money for it.");
	            }
	            else
	            {
		            new
		                Float:x,
	    	            Float:y,
	        	        Float:z,
	            	    Float:a;

					GetPlayerPos(playerid, x, y, z);
					GetPlayerFacingAngle(playerid, a);

					pData[playerid][pEditType] = EDIT_FURNITURE_PREVIEW;
					pData[playerid][pEditObject] = CreateDynamicObject(furnitureArray[listitem][fModel], x + 2.0 * floatsin(-a, degrees), y + 2.0 * floatcos(-a, degrees), z + 1.0, 0.0, 0.0, ((19353 <= furnitureArray[listitem][fModel] <= 19417) || (19426 <= furnitureArray[listitem][fModel] <= 19465)) ? (a + 90.0) : (a), GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
                    pData[playerid][pSelected] = listitem;

					SM(playerid, COLOR_AQUA, "You are now previewing {0080FF}%s{CCFFFF}. This furniture item costs $%i to purchase.", furnitureArray[listitem][fName], furnitureArray[listitem][fPrice]);
					SM(playerid, COLOR_AQUA, "Use your cursor to control the editor interface. Click the floppy disk to save changes.");
                    EditDynamicObject(playerid, pData[playerid][pEditObject]);
				}
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_BUYFURNITURE1);
			}
	    }
     	case DIALOG_LOTTERY:
		{
			if(response)
			{
				new businessid = GetPVarInt(playerid, "business_id"), price = GetPVarInt(playerid, "business_price");

				if(strval(inputtext) < 1 || strval(inputtext) > 99)
					return ShowPlayerDialog(playerid, DIALOG_LOTTERY, DIALOG_STYLE_INPUT, "Pick a number", "Pick a lottery number from 1 to 99:", "Pick", "Nevermind");

				pData[playerid][pLottery] = strval(inputtext);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET lottery = %d WHERE uid = %i", pData[playerid][pLottery], pData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

				SCMf(playerid, COLOR_WHITE, "You have purchased Lottery Ticket number: %d", strval(inputtext));

				GivePlayerCash(playerid, -price);
				BusinessInfo[businessid][bCash] += price;
				BusinessInfo[businessid][bProducts]--;
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
				mysql_tquery(connectionID, queryBuffer);

				DeletePVar(playerid, "business_id");
				DeletePVar(playerid, "business_price");
			}
			else
			{
				DeletePVar(playerid, "business_id");
				DeletePVar(playerid, "business_price");
			}
		}
		case GatePass:
		{
			if (response)
			{
				new id = Gate_Nearest(playerid);

				if (id == -1)
					return 0;

				if (isnull(inputtext))
					return ShowPlayerDialog(playerid, GatePass, DIALOG_STYLE_INPUT, "Enter Password", "Please enter the password for this gate below:", "Submit", "Cancel");

				if (strcmp(inputtext, GateData[id][gatePass]) != 0)
					return ShowPlayerDialog(playerid, GatePass, DIALOG_STYLE_INPUT, "Enter Password", "Error: Incorrect password specified.\n\nPlease enter the password for this gate below:", "Submit", "Cancel");

				Gate_Operate(id);
			}
		}
		case DIALOG_EDITBUY:
		{
			if(response)
			{
				pData[playerid][pProductChoose] = listitem;
				//SM(playerid, COLOR_SYNTAX,"You are editing product number: %i", pData[playerid][pProductChoose]);
				ShowPlayerDialog(playerid, DIALOG_EDITBUY2, DIALOG_STYLE_INPUT, SERVER_DIALOG, "Please enter the new product price:", "Modify", "");
			}
		}
		case DIALOG_EDITBUY2: {
			if(response)
			{
				new number = strval(inputtext), businessid = GetInsideBusiness(playerid), product = pData[playerid][pProductChoose];
				if(!(1 <= number <= 60000))
				{
					return SM(playerid, COLOR_SYNTAX, "Don't go below $1, or above $60,000 at once.");
				}
				BusinessInfo[businessid][bPrices][product] = number;
				//SM(playerid, COLOR_SYNTAX,"You set product %d to %i.", BusinessInfo[businessid][bPrices][product], number);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET prices%d = %i WHERE id = %i", product, number,BusinessInfo[businessid][bID]);
				mysql_tquery(connectionID, queryBuffer);
			}
		}
     	case DIALOG_BUY:
	    {
	        if(response)
	        {
	            new businessid = GetInsideBusiness(playerid);

	            if(BusinessInfo[businessid][bProducts] <= 0)
	            {
	                return SCM(playerid, COLOR_SYNTAX, "This business is out of stock.");
	            }

	            if(BusinessInfo[businessid][bType] == BUSINESS_STORE)
	            {
	                switch(listitem)
	                {
	                    case 0:
	                    {
							new price = BusinessInfo[businessid][bPrices][0];

	                        if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }

	                        pData[playerid][pPhone] = random(0900000000) + 0999999999;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET phone = %i WHERE uid = %i", pData[playerid][pPhone], pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a mobile phone.", GetRPName(playerid), price);
	                        SM(playerid, COLOR_WHITE, "** Mobile phone purchased. Your new phone number is %i.", pData[playerid][pPhone]);
						}
						case 1:
						{
						    new price = BusinessInfo[businessid][bPrices][1];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
						    if(pData[playerid][pWalkieTalkie])
						    {
						        return SCM(playerid, COLOR_SYNTAX, "You have a Portable Radio already.");
						    }

						    pData[playerid][pWalkieTalkie] = 1;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET walkietalkie = 1 WHERE uid = %i", pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a Portable Radio.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** Portable Radio purchased. Use /pr to speak and /channel to change the frequency.");
						}
						case 2:
						{
						    new price = BusinessInfo[businessid][bPrices][2];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
						    if(pData[playerid][pCigars] >= 20)
						    {
						        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 20 cigars.");
						    }

						    pData[playerid][pCigars] += 10;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cigars = %i WHERE uid = %i", pData[playerid][pCigars], pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a pack of cigars.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** Cigars purchased. Use /use cigar to smoke a cigar.");
						}
						case 3:
						{
						    new price = BusinessInfo[businessid][bPrices][3];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
						    if(pData[playerid][pSpraycans] + 10 >= 20)
						    {
						        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 20 spraycans.");
						    }

						    pData[playerid][pSpraycans] += 10;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET spraycans = %i WHERE uid = %i", pData[playerid][pSpraycans], pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received 10 spraycans.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** Spraycans purchased. Use /colorcar and /paintcar in a vehicle to use them.");
						}
						case 4:
						{
						    new price = BusinessInfo[businessid][bPrices][4];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
						    if(pData[playerid][pPhonebook])
						    {
						        return SCM(playerid, COLOR_SYNTAX, "You have a phonebook already.");
						    }

						    pData[playerid][pPhonebook] = 1;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET phonebook = 1 WHERE uid = %i", pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a phonebook.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** Phonebook purchased. Use /phonebook to lookup a player's number.");
						}
						case 5:
						{
						    new price = BusinessInfo[businessid][bPrices][5];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }

							GiveWeapon(playerid, 43);
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a camera.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** Camera purchased.");
						}
						case 6:
						{
						    new price = BusinessInfo[businessid][bPrices][6];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
						    if(pData[playerid][pMP3Player])
						    {
						        return SCM(playerid, COLOR_SYNTAX, "You have an MP3 player already.");
						    }

						    pData[playerid][pMP3Player] = 1;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET mp3player = 1 WHERE uid = %i", pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received an MP3 player.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** MP3 player purchased. Use /mp3 for a list of options.");
						}
						case 7:
						{
						    new price = BusinessInfo[businessid][bPrices][7];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
						    if(pData[playerid][pFishingRod])
						    {
						        return SCM(playerid, COLOR_SYNTAX, "You have a fishing rod already.");
						    }

						    pData[playerid][pFishingRod] = 1;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fishingrod = 1 WHERE uid = %i", pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a fishing rod.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** Fishing rod purchased. Use /fish at the pier or in a boat to begin fishing.");
						}
						case 8:
						{
						    new price = BusinessInfo[businessid][bPrices][8];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
						    if(pData[playerid][pFishingBait] + 10 >= 20)
						    {
						        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 20 pieces of bait.");
						    }

						    pData[playerid][pFishingBait] += 10;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fishingbait = %i WHERE uid = %i", pData[playerid][pFishingBait], pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received fish bait.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** Fishing bait purchased. Bait increases the odds of catching bigger fish.");
						}
						case 9:
						{
						    new price = BusinessInfo[businessid][bPrices][9];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
						    if(pData[playerid][pMuriaticAcid] + 1 >= 11)
						    {
						        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 10 bottles of muriatic acid.");
						    }

						    pData[playerid][pMuriaticAcid] += 1;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET muriaticacid = %i WHERE uid = %i", pData[playerid][pMuriaticAcid], pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a bottle of muriatic acid.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** Muriatic acid purchased.");
						}
						case 10:
						{
						    new price = BusinessInfo[businessid][bPrices][10];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
						    if(pData[playerid][pBakingSoda] + 1 >= 11)
						    {
						        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 10 bottles of baking soda.");
						    }

						    pData[playerid][pBakingSoda] += 1;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bakingsoda = %i WHERE uid = %i", pData[playerid][pBakingSoda], pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a bottle of baking soda.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** Baking soda purchased.");
						}
						case 11:
						{
						    new price = BusinessInfo[businessid][bPrices][11];
						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
						    if(pData[playerid][pWatch])
						    {
						        return SCM(playerid, COLOR_SYNTAX, "You have a pocket watch already.");
						    }

						    pData[playerid][pWatch] = 1;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET watch = 1 WHERE uid = %i", pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a pocket watch.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** Pocket watch purchased. Use /watch to toggle it.");
						}
						case 12:
						{
						    new price = BusinessInfo[businessid][bPrices][12];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
						    if(pData[playerid][pGPS])
						    {
						        return SCM(playerid, COLOR_SYNTAX, "You have a GPS already.");
						    }

						    pData[playerid][pGPS] = 1;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gps = 1 WHERE uid = %i", pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a GPS.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** GPS purchased. (( /gps, /locate ))");
						}
						case 13:
						{
						    new price = BusinessInfo[businessid][bPrices][13];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
						    if(pData[playerid][pGasCan] + 5 > 20)
						    {
						        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 20 liters of gas.");
						    }

						    pData[playerid][pGasCan] += 5;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gascan = %i WHERE uid = %i", pData[playerid][pGasCan], pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a 5 liters of gasoline.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** Gas can purchased. Use /gascan in a vehicle to refill its fuel.");
						}
						case 14:
						{
						    new price = BusinessInfo[businessid][bPrices][14];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
						    if(pData[playerid][pRope] + 2 > 10)
						    {
						        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 10 ropes.");
						    }


						    pData[playerid][pRope] += 2;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rope = %i WHERE uid = %i", pData[playerid][pRope], pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received 2 ropes.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "Ropes purchased. Use /tie to tie people in your vehicle.");
						}
						case 15:
						{
						    new price = BusinessInfo[businessid][bPrices][15];
						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
						    if(pData[playerid][pBlindfold] + 2 > 10)
						    {
						        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 10 blindfolds.");
						    }


						    pData[playerid][pBlindfold] += 2;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET blindfold = %i WHERE uid = %i", pData[playerid][pBlindfold], pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received 2 blindfolds.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "Blindfold purchased. Use /blindfold to blindfold people in your vehicle.");
						}
						case 16:
						{
						    new price = BusinessInfo[businessid][bPrices][16];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
							if(pData[playerid][pBackpack] > 1)
							{
						    	return SCM(playerid, COLOR_SYNTAX, "You already have a small backpack.");
							}

						    pData[playerid][pBackpack] = 1;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received small backpack.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "Small Backpack purchased. Use /(b)ack(p)ack to check your backpack.");
						}
						case 17:
						{
		    				new price = BusinessInfo[businessid][bPrices][17];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
						    if(pData[playerid][pRope] == 1)
						    {
						        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 1 toolkits.");
						    }


						    pData[playerid][pToolkit] = 1;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a toolkit.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "Toolkit purchased. Use /hotwire to hotwire people's vehicles.");
						}
						case 18:
						{
		    				new price = BusinessInfo[businessid][bPrices][18];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
						    if(pData[playerid][pFlashlight] == 1)
						    {
						        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 1 flashlight.");
						    }


						    pData[playerid][pFlashlight] = 1;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a flashlight.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "Flashlight purchased. use /flashlight to use it on your hand and /taclight to use it on your weapon.	");
						}
						case 19:
						{
          					new price = BusinessInfo[businessid][bPrices][19];
						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
				  			if(pData[playerid][pLottery])
					    	{
				      			return SendClientMessage(playerid, COLOR_GREY, "You already bought a Lottery Ticket.");
						    }

							SetPVarInt(playerid, "business_price", price);
							SetPVarInt(playerid, "business_id", businessid);
							GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
							BusinessInfo[businessid][bProducts]--;

							mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
							mysql_tquery(connectionID, queryBuffer);

							ShowPlayerDialog(playerid, DIALOG_LOTTERY, DIALOG_STYLE_INPUT, "Pick a number", "Pick a lottery number from 1 to 99::", "Pick", "Nevermind");
						}
						case 20: {
							new price = BusinessInfo[businessid][bPrices][20];
						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
						    if(pData[playerid][pMask])
						    {
						        return SCM(playerid, COLOR_SYNTAX, "You have a mask already.");
						    }

						    pData[playerid][pMask] = 1;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET mask = 1 WHERE uid = %i", pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a Mask.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** Mask purchased. Use /mask to toggle it.");
						}
					}
				}
				else if(BusinessInfo[businessid][bType] == BUSINESS_GUNSHOP)
				{
					if(pData[playerid][pWeaponLicense] == 0)
					{
						return SendClientMessage(playerid, -1, "You need a weapon license to purchase a weapon.");
					}
				    switch(listitem)
					{
				        case 0:
				        {
				            new price = BusinessInfo[businessid][bPrices][0];

				            if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
	                        if(PlayerHasWeapon(playerid, 22))
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}


	                        GivePlayerCash(playerid, -price);
	                        GiveWeapon(playerid, 5);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a Baseball Bat.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** Baseball Bat purchased.");
				        }
				        case 1:
				        {
				            new price = BusinessInfo[businessid][bPrices][1];

				            if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
	                        if(PlayerHasWeapon(playerid, 22))
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}


	                        GivePlayerCash(playerid, -price);
	                        GiveWeapon(playerid, 22);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a 9mm pistol.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** 9mm pistol purchased.");
				        }
				        case 2:
				        {
                			new price = BusinessInfo[businessid][bPrices][2];

				            if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
	                        if(PlayerHasWeapon(playerid, 25))
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

	                        GivePlayerCash(playerid, -price);
	                        GiveWeapon(playerid, 25);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a shotgun.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** Shotgun purchased.");
				        }
				        case 3:
				        {
				            new price = BusinessInfo[businessid][bPrices][3];

				            if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
	                        if(PlayerHasWeapon(playerid, 33))
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

	                        GivePlayerCash(playerid, -price);
	                        GiveWeapon(playerid, 29);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a Mp5.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** Mp5 purchased.");
				        }
				        case 4:
				        {
				            new price = BusinessInfo[businessid][bPrices][4];

				            if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
	                        if(PlayerHasWeapon(playerid, 33))
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

	                        GivePlayerCash(playerid, -price);
	                        GiveWeapon(playerid, 24);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a Desert Eagle.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** Desert Eagle purchased.");
				        }
				        case 5:
				        {
				            new price = BusinessInfo[businessid][bPrices][5];

				            if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
	                        if(PlayerHasWeapon(playerid, 33))
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

	                        GivePlayerCash(playerid, -price);
	                        GiveWeapon(playerid, 31);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a M4A1.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** M4A1 purchased.");
				        }
				        case 6:
				        {
				            new price = BusinessInfo[businessid][bPrices][6];

						    if(pData[playerid][pVest] == 5)
						    {
						        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 5 Vest.");
						    }
				            if(pData[playerid][pCash] < price)
		                    {
		                        return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You don't have enough money. You can't buy this.");
		                    }

							pData[playerid][pVest] += 1;

							GivePlayerCash(playerid, -price);

		                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vest = %i WHERE uid = %i", pData[playerid][pVest], pData[playerid][pID]);
		                    mysql_tquery(connectionID, queryBuffer);

		                    SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s paid $%i to the shopkeeper and received a vest.", GetRPName(playerid), price);
		                    SCM(playerid, COLOR_WHITE, "** Vest purchased. Use /use vest to use.");
				        }
				        case 7:
				        {
				            new price = BusinessInfo[businessid][bPrices][7];
				            if(pData[playerid][pCash] < price)
		                    {
		                        return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You don't have enough money. You can't buy this.");
		                    }
	                        if(PlayerHasWeapon(playerid, 14))
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

	                        GivePlayerCash(playerid, -price);
	                        GiveWeapon(playerid, 14);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a Flowers.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** Flowers purchased.");
						}
				        case 8:
				        {
				            new price = BusinessInfo[businessid][bPrices][8];
				            if(pData[playerid][pCash] < price)
		                    {
		                        return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You don't have enough money. You can't buy this.");
		                    }
				            if(pData[playerid][pCrowbar] == 1)
				            {
				                return SendClientMessage(playerid, COLOR_GREY, "You can't carry more than one crowbar.");
				            }
				            pData[playerid][pCrowbar] = 1;
							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crowbar = %i WHERE uid = %i", pData[playerid][pCrowbar], pData[playerid][pID]);
				            mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a Crowbar.", GetRPName(playerid), price);
	                        SendClientMessage(playerid, COLOR_WHITE, "HINT: Use '/breakcuffs' to break cuffs from anybody's hand.");
				        }
				        case 9:
				        {
				            new price = BusinessInfo[businessid][bPrices][9];
				            if(pData[playerid][pCash] < price)
		                    {
		                        return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You don't have enough money. You can't buy this.");
		                    }
				            if(pData[playerid][pHelmet] == 1)
				            {
				                return SendClientMessage(playerid, COLOR_GREY, "You can't carry more than one helmet.");
				            }
				            pData[playerid][pHelmet] = 1;
							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET helmet = %i WHERE uid = %i", pData[playerid][pHelmet], pData[playerid][pID]);
				            mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a Helmet.", GetRPName(playerid), price);
	                        SendClientMessage(playerid, COLOR_WHITE, "HINT: Type '/use helmet' to equip..");
				        }
					}
				}
				else if(BusinessInfo[businessid][bType] == BUSINESS_CLOTHES)
				{
				    new
						string[128];

	                format(string, sizeof(string), "%s's %s [%i Products]", BusinessInfo[businessid][bOwner], bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bProducts]);

				    if(listitem == 0)
					{
						//ShowDialogToPlayer(playerid, DIALOG_BUYCLOTHES);
						if(pData[playerid][pGender] == 1)
							ShowPlayerSelectionMenu(playerid, MODEL_SELECTION_CLOTHES, "Clothes Shop", clothesShopSkinsMale, sizeof(clothesShopSkinsMale));
						else
							ShowPlayerSelectionMenu(playerid, MODEL_SELECTION_CLOTHES, "Clothes Shop", clothesShopSkinsFemale, sizeof(clothesShopSkinsFemale));
					}
					else
					{
						pData[playerid][pCategory] = listitem - 1;
						ShowDialogToPlayer(playerid, DIALOG_BUYCLOTHINGTYPE);
				    }
				}
				else if(BusinessInfo[businessid][bType] == BUSINESS_GYM)
				{
				    switch(listitem)
				    {
				        case 0:
				        {
	                        if(pData[playerid][pFightStyle] == FIGHT_STYLE_NORMAL)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You already have this fighting style.");
	                        }

	                        pData[playerid][pFightStyle] = FIGHT_STYLE_NORMAL;
	                        SetPlayerFightingStyle(playerid, pData[playerid][pFightStyle]);

							mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", pData[playerid][pFightStyle], pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SCM(playerid, COLOR_WHITE, "** You have chosen the normal fighting style.");
						}
						case 1:
						{
						    new price = BusinessInfo[businessid][bPrices][0];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
	                        if(pData[playerid][pFightStyle] == FIGHT_STYLE_BOXING)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You already have this fighting style.");
	                        }


	                        GivePlayerCash(playerid, -price);
	                        BusinessInfo[businessid][bCash] += price;

                            pData[playerid][pFightStyle] = FIGHT_STYLE_BOXING;
	                        SetPlayerFightingStyle(playerid, pData[playerid][pFightStyle]);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", pData[playerid][pFightStyle], pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SM(playerid, COLOR_WHITE, "** You have purchased the Boxing fighting style for $%i.", price);
						}
						case 2:
						{
						    new price = BusinessInfo[businessid][bPrices][1];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
	                        if(pData[playerid][pFightStyle] == FIGHT_STYLE_KUNGFU)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You already have this fighting style.");
	                        }


	                        GivePlayerCash(playerid, -price);
	                        BusinessInfo[businessid][bCash] += price;

	                        pData[playerid][pFightStyle] = FIGHT_STYLE_KUNGFU;
	                        SetPlayerFightingStyle(playerid, pData[playerid][pFightStyle]);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", pData[playerid][pFightStyle], pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SM(playerid, COLOR_WHITE, "** You have purchased the Kung-Fu fighting style for $%i.", price);
						}
						case 3:
						{
						    new price = BusinessInfo[businessid][bPrices][2];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
	                        if(pData[playerid][pFightStyle] == FIGHT_STYLE_KNEEHEAD)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You already have this fighting style.");
	                        }


	                        GivePlayerCash(playerid, -price);
	                        BusinessInfo[businessid][bCash] += price;

	                        pData[playerid][pFightStyle] = FIGHT_STYLE_KNEEHEAD;
	                        SetPlayerFightingStyle(playerid, pData[playerid][pFightStyle]);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", pData[playerid][pFightStyle], pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SM(playerid, COLOR_WHITE, "** You have purchased the Kneehead fighting style for $%i.", price);
						}
						case 4:
						{
						    new price = BusinessInfo[businessid][bPrices][3];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
	                        if(pData[playerid][pFightStyle] == FIGHT_STYLE_GRABKICK)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You already have this fighting style.");
	                        }


	                        GivePlayerCash(playerid, -price);
	                        BusinessInfo[businessid][bCash] += price;

	                        pData[playerid][pFightStyle] = FIGHT_STYLE_GRABKICK;
	                        SetPlayerFightingStyle(playerid, pData[playerid][pFightStyle]);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", pData[playerid][pFightStyle], pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SM(playerid, COLOR_WHITE, "** You have purchased the Grabkick fighting style for $%i.", price);
						}
						case 5:
						{
						    new price = BusinessInfo[businessid][bPrices][4];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
	                        if(pData[playerid][pFightStyle] == FIGHT_STYLE_ELBOW)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You already have this fighting style.");
	                        }

	                        GivePlayerCash(playerid, -price);
	                        BusinessInfo[businessid][bCash] += price;

	                        pData[playerid][pFightStyle] = FIGHT_STYLE_ELBOW;
	                        SetPlayerFightingStyle(playerid, pData[playerid][pFightStyle]);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", pData[playerid][pFightStyle], pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SM(playerid, COLOR_WHITE, "** You have purchased the Elbow fighting style for $%i.", price);
						}
					}
				}
				else if(BusinessInfo[businessid][bType] == BUSINESS_RESTAURANT)
				{
				    switch(listitem)
				    {
				        case 0:
				        {
				            new price = BusinessInfo[businessid][bPrices][0];

				            if(pData[playerid][pCash] < price)
	                        {
	                            return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
	                        }
	                        if(pData[playerid][pDrink] == 8)
	                        {
								return SendClientMessage(playerid, COLOR_GREY, "You can't have more than 8 water bottles.");
							}

 							/*pData[playerid][pThirst] += 20;
							pData[playerid][pThirstTimer] = 0;
			        		if (pData[playerid][pThirst] > 100)
							{
								pData[playerid][pThirst] = 100;
							}*/
                            pData[playerid][pDrink] += 1;

	                        GivePlayerCash(playerid, -price);
	                        GivePlayerHealth(playerid, 10.0);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a bottled water.", GetRPName(playerid), price);
						}
						case 1:
				        {
				            new price = BusinessInfo[businessid][bPrices][1];

				            if(pData[playerid][pCash] < price)
	                        {
	                            return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
	                        }
	                        if(pData[playerid][pDrink] == 8)
	                        {
								return SendClientMessage(playerid, COLOR_GREY, "You can't have more than 8 water bottles.");
							}

         					/*pData[playerid][pThirst] += 20;
							pData[playerid][pThirstTimer] = 0;
			        		if (pData[playerid][pThirst] > 100)
							{
								pData[playerid][pThirst] = 100;
							}*/
							pData[playerid][pDrink] += 1;

	                        GivePlayerCash(playerid, -price);
	                        GivePlayerHealth(playerid, 15.0);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a can of sprunk.", GetRPName(playerid), price);
						}
						case 2:
				        {
				            new price = BusinessInfo[businessid][bPrices][2];

				            if(pData[playerid][pCash] < price)
	                        {
	                            return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
	                        }
	                        if(pData[playerid][pFood] == 8)
	                        {
								return SendClientMessage(playerid, COLOR_GREY, "You can't have more than 8 foods.");
							}

                            pData[playerid][pFood] += 1;
        					/*pData[playerid][pHunger] += 05;
							pData[playerid][pHungerTimer] = 0;
			        		if (pData[playerid][pHunger] > 100)
							{
								pData[playerid][pHunger] = 100;
							}*/

	                        GivePlayerCash(playerid, -price);
	                        GivePlayerHealth(playerid, 20.0);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received kid's meal.", GetRPName(playerid), price);
						}
						case 3:
				        {
				            new price = BusinessInfo[businessid][bPrices][3];

				            if(pData[playerid][pCash] < price)
	                        {
	                            return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
	                        }
	                        if(pData[playerid][pFood] == 8)
	                        {
								return SendClientMessage(playerid, COLOR_GREY, "You can't have more than 8 foods.");
							}

	                        /*pData[playerid][pHunger] += 20;
							pData[playerid][pHungerTimer] = 0;
			        		if (pData[playerid][pHunger] > 100)
							{
								pData[playerid][pHunger] = 100;
							}*/
							pData[playerid][pFood] += 1;

	                        GivePlayerCash(playerid, -price);
	                        GivePlayerHealth(playerid, 25.0);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a medium meal.", GetRPName(playerid), price);
						}
						case 4:
				        {
				            new price = BusinessInfo[businessid][bPrices][4];

				            if(pData[playerid][pCash] < price)
	                        {
	                            return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
	                        }
	                        if(pData[playerid][pFood] == 8)
	                        {
								return SendClientMessage(playerid, COLOR_GREY, "You can't have more than 8 foods.");
							}

	                        /*pData[playerid][pHunger] += 100;
							pData[playerid][pHungerTimer] = 0;
			        		if (pData[playerid][pHunger] > 100)
							{
								pData[playerid][pHunger] = 100;
							}*/
							pData[playerid][pFood] += 1;

	                        GivePlayerCash(playerid, -price);
	                        GivePlayerHealth(playerid, 30.0);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a big meal.", GetRPName(playerid), price);
						}
					}
				}
				else if(BusinessInfo[businessid][bType] == BUSINESS_BARCLUB)
				{
				    switch(listitem)
				    {
				        case 0:
				        {
				            new price = BusinessInfo[businessid][bPrices][0];

				            if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }

	                        GivePlayerCash(playerid, -price);
	                        GivePlayerHealth(playerid, 10.0);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a bottled water.", GetRPName(playerid), price);
						}
						case 1:
				        {
				            new price = BusinessInfo[businessid][bPrices][1];

				            if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }

	                        GivePlayerCash(playerid, -price);
	                        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a can of sprunk.", GetRPName(playerid), price);
						}
						case 2:
				        {
				            new price = BusinessInfo[businessid][bPrices][2];

				            if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }

	                        GivePlayerCash(playerid, -price);
	                        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a bottle of beer.", GetRPName(playerid), price);
						}
						case 3:
				        {
				            new price = BusinessInfo[businessid][bPrices][3];

				            if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }

	                        GivePlayerCash(playerid, -price);
	                        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a bottle of wine.", GetRPName(playerid), price);
						}
						case 4:
				        {
				            new price = BusinessInfo[businessid][bPrices][4];

				            if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }

	                        GivePlayerCash(playerid, -price);
	                        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a bottle of whiskey.", GetRPName(playerid), price);
						}
					}
				}
	        }
	    }
	    case DIALOG_BUYCLOTHES:
	    {
	        if(response)
	        {
	            new businessid = GetInsideBusiness(playerid);

	            if(BusinessInfo[businessid][bProducts] <= 0)
	            {
	                return SCM(playerid, COLOR_SYNTAX, "This business is out of stock.");
	            }
	            if(pData[playerid][pDonator] == 0 && pData[playerid][pCash] < 50)
                {
                    return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy new clothes.");
                }

	            if(BusinessInfo[businessid][bType] == BUSINESS_CLOTHES)
	            {
	                new skinid;

	                if(sscanf(inputtext, "i", skinid))
	                {
	                    return ShowDialogToPlayer(playerid, DIALOG_BUYCLOTHES);
					}
					if(!(0 <= skinid <= 311) || (265 <= skinid <= 267) || (274 <= skinid <= 288) || (300 <= skinid <= 302) || (306 <= skinid <= 311))
					{
					    SCM(playerid, COLOR_SYNTAX, "You are not allowed to use that skin as it is either invalid or faction reserved.");
                        return ShowDialogToPlayer(playerid, DIALOG_BUYCLOTHES);
					}

					if(pData[playerid][pDonator] == 0)
					{
					    new price = 50;

						GivePlayerCash(playerid, -price);

						BusinessInfo[businessid][bCash] += price;
                    	BusinessInfo[businessid][bProducts]--;

                    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
                    	mysql_tquery(connectionID, queryBuffer);

                    	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a new set of clothes.", GetRPName(playerid), price);
                 		SM(playerid, COLOR_WHITE, "** You've changed your skin for $%i.", price);
                    }
                    else
                    {
                        SCM(playerid, COLOR_VIP, "** Donator perk: You changed your clothes free of charge.");
					}

					SetPlayerSkin(playerid, skinid);
                    pData[playerid][pSkin] = skinid;

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET skin = %i WHERE uid = %i", pData[playerid][pSkin], pData[playerid][pID]);
                    mysql_tquery(connectionID, queryBuffer);
	            }
			}
	    }
   		case DIALOG_PICKLOAD:
	    {
	        if(response)
	        {
	            if(!PlayerHasJob(playerid, JOB_COURIER))
				{
				    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you are not a Trucker.");
				}
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 414 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 498 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 514)
				{
				    return SCM(playerid, COLOR_SYNTAX, "You need to be driving a Mule or a Boxville.");
				}
				if(!IsPlayerInRangeOfPoint(playerid, 8.0, 2460.9790,-2119.2590,13.5530))
				{
				    return SCM(playerid, COLOR_SYNTAX, "You are not at the loading dock.");
				}

				switch(listitem)
				{
				    case 0:
				    {
				        SCM(playerid, COLOR_AQUA, "You selected {FF6347}Grocery supplies{33CCFF}. Use /deliver at any Supermarket to drop off this shipment.");
						pData[playerid][pShipment] = BUSINESS_STORE;
						/*new businessid = GetClosestBusiness(playerid, BUSINESS_STORE);
						SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 10.0);
						TruckerCheckpointJob[playerid] = 1;*/
	                }
	                case 1:
				    {
				        SCM(playerid, COLOR_AQUA, "You selected {FF6347}Ammunition{33CCFF}. Use /deliver at any Gun Shop to drop off this shipment.");
						pData[playerid][pShipment] = BUSINESS_GUNSHOP;
						/*new businessid = GetClosestBusiness(playerid, BUSINESS_GUNSHOP);
						SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 10.0);
						TruckerCheckpointJob[playerid] = 2;*/
	                }
	                case 2:
				    {
				        SCM(playerid, COLOR_AQUA, "You selected {FF6347}Clothing items{33CCFF}. Use /deliver at any Clothes Shop to drop off this shipment.");
						pData[playerid][pShipment] = BUSINESS_CLOTHES;
						/*new businessid = GetClosestBusiness(playerid, BUSINESS_CLOTHES);
						SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 10.0);
						TruckerCheckpointJob[playerid] = 3;*/
	                }
	                case 3:
				    {
				        SCM(playerid, COLOR_AQUA, "You selected {FF6347}Food & drinks{33CCFF}. Use /deliver at any Restaurant to drop off this shipment.");
						pData[playerid][pShipment] = BUSINESS_RESTAURANT;
						/*new businessid = GetClosestBusiness(playerid, BUSINESS_RESTAURANT);
						SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 10.0);
						TruckerCheckpointJob[playerid] = 4;*/
	                }
	                case 4:
				    {
				        SCM(playerid, COLOR_AQUA, "You selected {FF6347}Beverages{33CCFF}. Use /deliver at any Club/Bar to drop off this shipment.");
						pData[playerid][pShipment] = BUSINESS_BARCLUB;
						/*new businessid = GetClosestBusiness(playerid, BUSINESS_BARCLUB);
						SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 10.0);
						TruckerCheckpointJob[playerid] = 5;*/
	                }
	                case 5:
	                {
				        SCM(playerid, COLOR_AQUA, "You selected {FF6347}Illegal Weapons{33CCFF}. Use /deliver at any Gun Shop to drop off this shipment.");
        				SCM(playerid, COLOR_RED, "NOTE:"WHITE" You are delivering an illegal cargo. Watch out for the cops!");
						pData[playerid][pShipment] = BUSINESS_GUNSHOP;
						pData[playerid][pIllegalCargo] = ILLEGAL_GUNS;
						/*new businessid = GetClosestBusiness(playerid, BUSINESS_GUNSHOP);
						SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 10.0);
						TruckerCheckpointJob[playerid] = 6;*/
					}
					case 6:
					{
    					SCM(playerid, COLOR_AQUA, "You selected {FF6347}Illegal Materials{33CCFF}. Use /deliver at any Gun Shop to drop off this shipment.");
        				SCM(playerid, COLOR_RED, "NOTE:"WHITE" You are delivering an illegal cargo. Watch out for the cops!");
						pData[playerid][pShipment] = BUSINESS_GUNSHOP;
						pData[playerid][pIllegalCargo] = ILLEGAL_MATS;
						/*new businessid = GetClosestBusiness(playerid, BUSINESS_GUNSHOP);
						SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 10.0);
						TruckerCheckpointJob[playerid] = 7;*/
					}
					case 7:
					{
    					SCM(playerid, COLOR_AQUA, "You selected {FF6347}Illegal Drugs{33CCFF}. Use /deliver at any Club/Bar to drop off this shipment.");
        				SCM(playerid, COLOR_RED, "NOTE:"WHITE" You are delivering an illegal cargo. Watch out for the cops!");
						pData[playerid][pShipment] = BUSINESS_BARCLUB;
						pData[playerid][pIllegalCargo] = ILLEGAL_DRUGS;
						/*new businessid = GetClosestBusiness(playerid, BUSINESS_GUNSHOP);
						SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 10.0);
						TruckerCheckpointJob[playerid] = 8;*/
					}
					case 8:
					{
						SetTimerEx("GasTimer", 800, false, "ii", playerid, 0);
					}
				}

				pData[playerid][pLastLoad] = gettime();
	        }
	    }
	    case DIALOG_UNREADTEXTS:
	    {
	        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM texts WHERE recipient_number = %i ORDER BY date DESC LIMIT 25", pData[playerid][pPhone]);
	        mysql_tquery(connectionID, queryBuffer);

	        if(response)
	        {
				callcmd::texts(playerid, "\1");
	        }
	    }
        case DIALOG_VENDOR:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: // BURGER
					{
						if(pData[playerid][pCash] < 85)
							return SendClientMessageEx(playerid, COLOR_GREY, "You must have at least 85 php.");

						if (pData[playerid][pVendorTime] > 0)
							return SendClientMessageEx(playerid, COLOR_GREY, "Please wait before purchasing from a vendor again.");

	                    if(pData[playerid][pFood] >= 20)
					    {
					        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 20 Food.");
					    }
						pData[playerid][pFood] += 5;

	                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET food = %i WHERE uid = %i", pData[playerid][pFood], pData[playerid][pID]);
	                    mysql_tquery(connectionID, queryBuffer);
	                    
						pData[playerid][pVendorTime] = 5;

						GivePlayerCash(playerid, -85);
						ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);


						SCMf(playerid, SERVER_COLOR, "**{C2A2DA}%s has purchased a street food from the vendor.", GetPlayerNameEx(playerid));

						SCM(playerid, COLOR_WHITE, "* You have paid 85 php for a street food.");
					}
					case 1: // SISIG
					{
						if(pData[playerid][pCash] < 150)
							return SendClientMessageEx(playerid, COLOR_GREY, "You must have at least 150 php.");

						if (pData[playerid][pVendorTime] > 0)
							return SendClientMessageEx(playerid, COLOR_GREY, "Please wait before purchasing from a vendor again.");

						pData[playerid][pVendorTime] = 5;

						GivePlayerCash(playerid, -150);
						ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);

	                    if(pData[playerid][pFood] >= 20)
					    {
					        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 20 Food.");
					    }
						pData[playerid][pFood] += 5;

	                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET food = %i WHERE uid = %i", pData[playerid][pFood], pData[playerid][pID]);
	                    mysql_tquery(connectionID, queryBuffer);

						SCMf(playerid, SERVER_COLOR, "**{C2A2DA}%s has purchased a street food from the vendor.", GetPlayerNameEx(playerid));

						SCM(playerid, COLOR_WHITE, "* You have paid 85 php for a street food.");
					}
					case 2: // PTATTOS
					{
						if(pData[playerid][pCash] < 25)
							return SendClientMessageEx(playerid, COLOR_GREY, "You must have at least 25 php.");

						if (pData[playerid][pVendorTime] > 0)
							return SendClientMessageEx(playerid, COLOR_GREY, "Please wait before purchasing from a vendor again.");

						pData[playerid][pVendorTime] = 5;

						GivePlayerCash(playerid, -25);
						ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);

	                    if(pData[playerid][pFood] >= 20)
					    {
					        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 20 Food.");
					    }
						pData[playerid][pFood] += 5;

	                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET food = %i WHERE uid = %i", pData[playerid][pFood], pData[playerid][pID]);
	                    mysql_tquery(connectionID, queryBuffer);
	                    
						SCMf(playerid, SERVER_COLOR, "**{C2A2DA}%s has purchased a street food from the vendor.", GetPlayerNameEx(playerid));

						SCM(playerid, COLOR_WHITE, "* You have paid 85 php for a street food.");
					}
					case 3: // DONUT
					{
						if(pData[playerid][pCash] < 55)
							return SendClientMessageEx(playerid, COLOR_GREY, "You must have at least 55 php.");

						if (pData[playerid][pVendorTime] > 0)
							return SendClientMessageEx(playerid, COLOR_GREY, "Please wait before purchasing from a vendor again.");

						pData[playerid][pVendorTime] = 5;

						GivePlayerCash(playerid, -55);
						ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);
						
	                    if(pData[playerid][pFood] >= 20)
					    {
					        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 20 Food.");
					    }
						pData[playerid][pFood] += 5;

	                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET food = %i WHERE uid = %i", pData[playerid][pFood], pData[playerid][pID]);
	                    mysql_tquery(connectionID, queryBuffer);
	                    
						SCMf(playerid, SERVER_COLOR, "**{C2A2DA}%s has purchased a street food from the vendor.", GetPlayerNameEx(playerid));

						SCM(playerid, COLOR_WHITE, "* You have paid 85 php for a street food.");
				}
					case 4: // BUKO JUICE
					{
						if(pData[playerid][pCash] < 20)
							return SendClientMessageEx(playerid, COLOR_GREY, "You must have at least 20 php.");

						if (pData[playerid][pVendorTime] > 0)
							return SendClientMessageEx(playerid, COLOR_GREY, "Please wait before purchasing from a vendor again.");

						pData[playerid][pVendorTime] = 3;

						GivePlayerCash(playerid, -20);
						ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);

	                    if(pData[playerid][pDrink] >= 20)
					    {
					        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 20 Drinks.");
					    }
						pData[playerid][pDrink] += 5;

	                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET drink = %i WHERE uid = %i", pData[playerid][pDrink], pData[playerid][pID]);
	                    mysql_tquery(connectionID, queryBuffer);
	                    
						SCMf(playerid, SERVER_COLOR, "**{C2A2DA}%s has purchased a street food from the vendor.", GetPlayerNameEx(playerid));

						SCM(playerid, COLOR_WHITE, "* You have paid 85 php for a street food.");
					}
					case 5: // PINE APPLE JUICE
					{
						if(pData[playerid][pCash] < 50)
							return SendClientMessageEx(playerid, COLOR_GREY, "You must have at least 50 php.");

						if (pData[playerid][pVendorTime] > 0)
							return SendClientMessageEx(playerid, COLOR_GREY, "Please wait before purchasing from a vendor again.");

						pData[playerid][pVendorTime] = 3;

						GivePlayerCash(playerid, -50);
						ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);

	                    if(pData[playerid][pDrink] >= 20)
					    {
					        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 20 Drinks.");
					    }
						pData[playerid][pDrink] += 5;

	                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET drink = %i WHERE uid = %i", pData[playerid][pDrink], pData[playerid][pID]);
	                    mysql_tquery(connectionID, queryBuffer);
	                    
						SCMf(playerid, SERVER_COLOR, "**{C2A2DA}%s has purchased a street food from the vendor.", GetPlayerNameEx(playerid));

						SCM(playerid, COLOR_WHITE, "* You have paid 85 php for a street food.");
					}
					case 6: // SPRITE
					{
						if(pData[playerid][pCash] < 28)
							return SendClientMessageEx(playerid, COLOR_GREY, "You must have at least 28 php.");

						if (pData[playerid][pVendorTime] > 0)
							return SendClientMessageEx(playerid, COLOR_GREY, "Please wait before purchasing from a vendor again.");

						pData[playerid][pVendorTime] = 3;

						GivePlayerCash(playerid, -28);
						ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);

	                    if(pData[playerid][pDrink] >= 20)
					    {
					        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 20 Drinks.");
					    }
						pData[playerid][pDrink] += 5;

	                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET drink = %i WHERE uid = %i", pData[playerid][pDrink], pData[playerid][pID]);
	                    mysql_tquery(connectionID, queryBuffer);
	                    
						SCMf(playerid, SERVER_COLOR, "**{C2A2DA}%s has purchased a street food from the vendor.", GetPlayerNameEx(playerid));

						SCM(playerid, COLOR_WHITE, "* You have paid 85 php for a street food.");
					}
					case 7: // NATURE SPRING
					{
						if(pData[playerid][pCash] < 15)
							return SendClientMessageEx(playerid, COLOR_GREY, "You must have at least 15 php.");

						if (pData[playerid][pVendorTime] > 0)
							return SendClientMessageEx(playerid, COLOR_GREY, "Please wait before purchasing from a vendor again.");

						pData[playerid][pVendorTime] = 3;

						GivePlayerCash(playerid, -15);
						ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);

	                    if(pData[playerid][pDrink] >= 20)
					    {
					        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 20 Drinks.");
					    }
						pData[playerid][pDrink] += 5;

	                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET drink = %i WHERE uid = %i", pData[playerid][pDrink], pData[playerid][pID]);
	                    mysql_tquery(connectionID, queryBuffer);
	                    
						SCMf(playerid, SERVER_COLOR, "**{C2A2DA}%s has purchased a street food from the vendor.", GetPlayerNameEx(playerid));

						SCM(playerid, COLOR_WHITE, "* You have paid 85 php for a street food.");
					}
				}
			}
		}
	    case DIALOG_BAR:
	    {
	        if(response)
	        {
	 			if(listitem == 0)
				{
				    new price = 25;

					if (pData[playerid][pBarTime] > 0)
						return SendClientMessageEx(playerid, COLOR_GREY, "Please wait before purchasing from a bar again.");

					ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);

				    GivePlayerCash(playerid, -price);
				    GivePlayerHealth(playerid, 10.0);
				    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the bartender and received a bottled water.", GetRPName(playerid), price);
                }
	 			else if(listitem == 1)
				{
				    new price = 50;

					if (pData[playerid][pBarTime] > 0)
						return SendClientMessageEx(playerid, COLOR_GREY, "Please wait before purchasing from a bar again.");

					ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);

				    GivePlayerCash(playerid, -price);
				    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
				    GivePlayerHealth(playerid, 10.0);
    	           	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the bartender and received a can of sprunk.", GetRPName(playerid), price);
                }
	 			else if(listitem == 2)
				{
				    new price = 250;

					if (pData[playerid][pBarTime] > 0)
						return SendClientMessageEx(playerid, COLOR_GREY, "Please wait before purchasing from a bar again.");

					ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);

				    GivePlayerCash(playerid, -price);
				    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
	               	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the bartender and received a bottle of beer.", GetRPName(playerid), price);
                }
                else if(listitem == 3)
                {
				    new price = 500;

					if (pData[playerid][pBarTime] > 0)
						return SendClientMessageEx(playerid, COLOR_GREY, "Please wait before purchasing from a bar again.");

					ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);

				    GivePlayerCash(playerid, -price);
				    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
	               	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the bartender and received a bottle of wine.", GetRPName(playerid), price);
                }
                else if(listitem == 4)
                {
				    new price = 500;

					if (pData[playerid][pBarTime] > 0)
						return SendClientMessageEx(playerid, COLOR_GREY, "Please wait before purchasing from a bar again.");

					ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);

				    GivePlayerCash(playerid, -price);
				    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
	               	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the bartender and received a bottle of whiskey.", GetRPName(playerid), price);
                }
			}
		}
  		case DIALOG_NEWBIE:
	    {
			if(response)
			{
				new string[128];
				if(pData[playerid][pAdmin] < 2 && pData[playerid][pHelper] == 0)
				{
			 		pData[playerid][pLastNewbie] = gettime();
				}
				if(isnull(inputtext)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot send no question!");
				if(strlen(inputtext) > 110) return SendClientMessageEx(playerid, COLOR_GREY, "That message is too long!");
				format(string, sizeof(string), ""LIGHTRED"New Question! "YELLOW"%s(%d)"WHITE": %s", GetPlayerNameEx(playerid), playerid, inputtext);
				SendQuestionToStaff(COLOR_RED, string);
				SendQuestionToStaff(COLOR_WHITE, "** /nanswer (/na) to asnwer | /trashnewb (/tn) to trash **");
				SetPVarInt(playerid, "SendQuestion", 1);
				SetPVarString(playerid, "Question", inputtext);
				SendClientMessage(playerid, COLOR_WHITE, "Your question was successfully submitted, please wait. An helper will reply shortly.");

			}
		}
    	case DIALOG_ATM:
	    {
	        if(response)
	        {
				switch(listitem) {
					case 0: ShowDialogToPlayer(playerid, DIALOG_ATMWITHDRAW);
					case 1: ShowDialogToPlayer(playerid, DIALOG_ATMDEPOSIT);
					case 2: ShowDialogToPlayer(playerid, DIALOG_ATM_TRANSFER);
				}
	        }
		}
		case DIALOG_ATMDEPOSIT:
		{
			if(response)
	        {
	            new amount, fee;

	            if(sscanf(inputtext, "i", amount))
	            {
					return ShowDialogToPlayer(playerid, DIALOG_ATM);
	            }
	            if(amount < 1 || amount > pData[playerid][pCash])
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Insufficient amount. Please try again.");
	                ShowDialogToPlayer(playerid, DIALOG_ATMDEPOSIT);
	                return 1;
	            }

	            pData[playerid][pBank] += amount;
	            GivePlayerCash(playerid, -amount);

	            if(pData[playerid][pDonator] == 0)
	            {
	                fee = percent(amount, 3);

	                pData[playerid][pBank] -= fee;
	            }

	            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", pData[playerid][pBank], pData[playerid][pID]);
	            mysql_tquery(connectionID, queryBuffer);

	            SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s presses a button and deposits some cash in their bank account.", GetRPName(playerid));
	            SCMf(playerid, COLOR_WHITE, "You have deposited %s into your account. Your new balance is %s.", FormatNumber(amount), FormatNumber(pData[playerid][pBank]));

				if(fee)
				{
				    SCMf(playerid, COLOR_WHITE, "A 3 percent convenience fee of %s was deducted from your bank account.", FormatNumber(fee));
				    AddToTaxVault(fee);
	            }
	            else if(pData[playerid][pDonator] > 0)
	            {
					SendClientMessage(playerid, COLOR_VIP, "DONATOR Perk: You do not pay the 3 percent convenience fee as you are a DONATOR!");
	            }
	        }
		}
	    case DIALOG_ATMWITHDRAW:
	    {
	        if(response)
	        {
	            new amount, fee;

	            if(sscanf(inputtext, "i", amount))
	            {
					return ShowDialogToPlayer(playerid, DIALOG_ATMWITHDRAW);
	            }
	            if(amount < 1 || amount > pData[playerid][pBank])
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Insufficient amount. Please try again.");
	                ShowDialogToPlayer(playerid, DIALOG_ATMWITHDRAW);
	                return 1;
	            }

	            pData[playerid][pBank] -= amount;
	            GivePlayerCash(playerid, amount);

	            if(pData[playerid][pDonator] == 0)
	            {
	                fee = percent(amount, 3);

	                pData[playerid][pBank] -= fee;
	            }

	            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", pData[playerid][pBank], pData[playerid][pID]);
	            mysql_tquery(connectionID, queryBuffer);

	            SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s presses a button and withdraws some cash from the ATM.", GetRPName(playerid));
	            SCMf(playerid, COLOR_WHITE, "You have withdrawn %s from your account. Your new balance is %s.", FormatNumber(amount), FormatNumber(pData[playerid][pBank]));

				if(fee)
				{
				    SCMf(playerid, COLOR_WHITE, "A 3 percent convenience fee of %s was deducted from your bank account.", FormatNumber(fee));
				    AddToTaxVault(fee);
	            }
	            else if(pData[playerid][pDonator] > 0)
	            {
					SendClientMessage(playerid, COLOR_VIP, "DONATOR Perk: You do not pay the 3 percent convenience fee as you are a Donator!");
	            }
	        }
		}
	    case DIALOG_ATM_TRANSFER:
	    {
	        if(response)
	        {
	            new id;

	            if(sscanf(inputtext, "i", id))
	            {
					return ShowDialogToPlayer(playerid, DIALOG_ATM_TRANSFER);
	            }

	            if(!IsPlayerConnected(id))
	            {
	                SendClientMessage(playerid, COLOR_GREY, "That player is not connected.");
	                ShowDialogToPlayer(playerid, DIALOG_ATM_TRANSFER);
	                return 1;
	            }
				/*if(!pData[id][pLogged])
				{
	                SendClientMessage(playerid, COLOR_ERROR, "(( That player has not logged in yet ))");
	                ShowDialogToPlayer(playerid, DIALOG_ATM_TRANSFER);
	                return 1;
				}*/
				SetPVarInt(playerid, "transfer_id", id);
				ShowDialogToPlayer(playerid, DIALOG_ATM_TRANSFER2);
	        }
		}
	    case DIALOG_ATM_TRANSFER2:
	    {
	        if(response)
	        {
	            new id = GetPVarInt(playerid, "transfer_id"), amount, fee;

	            if(sscanf(inputtext, "i", amount))
	            {
					return ShowDialogToPlayer(playerid, DIALOG_ATM_TRANSFER2);
	            }
	            if(amount < 1 || amount > pData[playerid][pBank])
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Insufficient amount. Please try again.");
	                ShowDialogToPlayer(playerid, DIALOG_ATM_TRANSFER2);
	                return 1;
	            }
				if(!IsPlayerConnected(id))
				{
					DeletePVar(playerid, "transfer_id");
	                SendClientMessage(playerid, COLOR_GREY, "The player that you are trying to transfer the money to has disconnected.");
	                ShowDialogToPlayer(playerid, DIALOG_ATM_TRANSFER);
					return 1;
				}
				if(!pData[id][pLogged])
				{
					DeletePVar(playerid, "transfer_id");
	                SendClientMessage(playerid, COLOR_ERROR, "(( That player is not logged in ))");
	                ShowDialogToPlayer(playerid, DIALOG_ATM_TRANSFER);
					return 1;
				}

	            pData[playerid][pBank] -= amount;
	            pData[id][pBank] += amount;

	            if(pData[playerid][pDonator] == 0)
	            {
	                fee = percent(amount, 3);

	                pData[playerid][pBank] -= fee;
	            }

	            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", pData[playerid][pBank], pData[playerid][pID]);
	            mysql_tquery(connectionID, queryBuffer);
	            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", pData[id][pBank], pData[id][pID]);
	            mysql_tquery(connectionID, queryBuffer);

				new targetid;
	            SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s presses a button transferring some cash to someone.", GetRPName(playerid));
	            SCMf(playerid, COLOR_WHITE, "You have transferred %s to %s. Your new balance is %s.", FormatNumber(amount), GetRPName(id), FormatNumber(pData[playerid][pBank]));
	            SCMf(targetid, COLOR_WHITE, "%s has transfer %s to your account. Your new balance is %s.", GetRPName(id), FormatNumber(amount), FormatNumber(pData[playerid][pBank]));

	    		SAM(COLOR_YELLOW, "AdmWarning: %s has transferred $%i to %s.", GetRPName(playerid), amount, GetRPName(targetid));
				Log_Write("log_give", "%s (uid: %i) (IP: %s) transferred $%i to %s (uid: %i) (IP: %s)", GetRPName(playerid), pData[playerid][pID], GetPlayerIP(playerid), amount, GetRPName(targetid), pData[targetid][pID], GetPlayerIP(targetid));

				if(fee)
				{
				    SCMf(playerid, COLOR_WHITE, "A 3 percent convenience fee of %s was deducted from your bank account.", FormatNumber(fee));
				    AddToTaxVault(fee);
	            }
	            else if(pData[playerid][pDonator] > 0)
	            {
					SendClientMessage(playerid, COLOR_VIP, "DONATOR Perk: You do not pay the 3 percent convenience fee as you are a Donator!");
	            }
	        }
		}
		case DIALOG_CHANGEPASS:
		{
		    if(response)
		    {
		        if(strlen(inputtext) < 4)
		        {
		            return SCM(playerid, COLOR_SYNTAX, "You need to enter a password greater than 4 characters.");
		        }

				new
				    password[129];

				WP_Hash(password, sizeof(password), inputtext);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET password = '%s' WHERE uid = %i", password, pData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

				SCM(playerid, COLOR_WHITE, "** Your account password was changed successfully.");
    		}
		}
		case DIALOG_BUYCLOTHINGTYPE:
		{
		    if(response)
		    {
		        pData[playerid][pMenuType] = listitem;

		        if(listitem == 0)
					ShowClothingSelectionMenu(playerid);
				else
					ShowDialogToPlayer(playerid, DIALOG_BUYCLOTHING);
		    }
		    else
		    {
		        callcmd::buy(playerid, "\1");
			}
		}
		case DIALOG_BUYCLOTHING:
		{
		    if(response)
		    {
		        PreviewClothing(playerid, listitem + pData[playerid][pClothingIndex]);
		    }
		    else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_BUYCLOTHINGTYPE);
			}
		}
		case DIALOG_CLOTHING:
		{
		    if(response)
		    {
		        if(!ClothingInfo[playerid][listitem][cExists])
		        {
		            return SCM(playerid, COLOR_SYNTAX, "The slot you've selected does not contain any item of clothing.");
		        }

		        if(ClothingInfo[playerid][listitem][cAttached]) {
					ShowPlayerDialog(playerid, DIALOG_CLOTHINGMENU, DIALOG_STYLE_LIST, ClothingInfo[playerid][listitem][cName], "Detach\nEdit\nDelete", "Select", "Cancel");
		        } else {
                    ShowPlayerDialog(playerid, DIALOG_CLOTHINGMENU, DIALOG_STYLE_LIST, ClothingInfo[playerid][listitem][cName], "Attach\nEdit\nDelete", "Select", "Cancel");
		        }

		        pData[playerid][pSelected] = listitem;
			}
		}
		case DIALOG_CLOTHINGMENU:
		{
		    if(response)
		    {
		        new clothingid = pData[playerid][pSelected];

		        switch(listitem)
		        {
		            case 0:
		            {
		                if(!ClothingInfo[playerid][clothingid][cAttached])
		                {
		                    ClothingInfo[playerid][clothingid][cAttachedIndex] = GetAvailableAttachedSlot(playerid);

		                    if(ClothingInfo[playerid][clothingid][cAttachedIndex] >= 0)
		                    {
			                    ClothingInfo[playerid][clothingid][cAttached] = 1;

			                    SetPlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex], ClothingInfo[playerid][clothingid][cModel], ClothingInfo[playerid][clothingid][cBone], ClothingInfo[playerid][clothingid][cPosX], ClothingInfo[playerid][clothingid][cPosY], ClothingInfo[playerid][clothingid][cPosZ], ClothingInfo[playerid][clothingid][cRotX], ClothingInfo[playerid][clothingid][cRotY], ClothingInfo[playerid][clothingid][cRotZ],
									ClothingInfo[playerid][clothingid][cScaleX], ClothingInfo[playerid][clothingid][cScaleY], ClothingInfo[playerid][clothingid][cScaleZ]);
								SM(playerid, COLOR_WHITE, "** %s attached to slot %i/5.", ClothingInfo[playerid][clothingid][cName], ClothingInfo[playerid][clothingid][cAttachedIndex] + 1);

								mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET attached = 1 WHERE id = %i", ClothingInfo[playerid][clothingid][cID]);
								mysql_tquery(connectionID, queryBuffer);
							}
							else
							{
							    SCM(playerid, COLOR_SYNTAX, "No attachment slots available. You can only have up to five clothing items attached at once.");
		                    }
		                }
		                else
		                {
		                    RemovePlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex]);
		                    ClothingInfo[playerid][clothingid][cAttached] = 0;
		                    ClothingInfo[playerid][clothingid][cAttachedIndex] = -1;

		                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET attached = 0 WHERE id = %i", ClothingInfo[playerid][clothingid][cID]);
							mysql_tquery(connectionID, queryBuffer);

							SM(playerid, COLOR_WHITE, "** %s detached and added to inventory.", ClothingInfo[playerid][clothingid][cName]);
		                }
		            }
					case 1:
					{
				    	ShowPlayerDialog(playerid, DIALOG_CLOTHINGEDIT, DIALOG_STYLE_LIST, "Edition menu", "Edit offset\nChange bone", "Select", "Cancel");
					}
					case 2:
					{
				    	RemovePlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex]);
				    	SM(playerid, COLOR_WHITE, "** %s deleted from your clothing inventory.", ClothingInfo[playerid][clothingid][cName]);

				    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM clothing WHERE id = %i", ClothingInfo[playerid][clothingid][cID]);
				    	mysql_tquery(connectionID, queryBuffer);

					    ClothingInfo[playerid][clothingid][cAttached] = 0;
			            ClothingInfo[playerid][clothingid][cAttachedIndex] = -1;
					    ClothingInfo[playerid][clothingid][cExists] = 0;
					    ClothingInfo[playerid][clothingid][cID] = 0;
					    ClothingInfo[playerid][clothingid][cName] = 0;
					}
				}
			}
		}
		case DIALOG_CLOTHINGEDIT:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                pData[playerid][pEditType] = EDIT_CLOTHING;

		                if(!ClothingInfo[playerid][pData[playerid][pSelected]][cAttached]) {
		                    SetPlayerAttachedObject(playerid, 9, ClothingInfo[playerid][pData[playerid][pSelected]][cModel], ClothingInfo[playerid][pData[playerid][pSelected]][cBone], ClothingInfo[playerid][pData[playerid][pSelected]][cPosX], ClothingInfo[playerid][pData[playerid][pSelected]][cPosY], ClothingInfo[playerid][pData[playerid][pSelected]][cPosZ],
								ClothingInfo[playerid][pData[playerid][pSelected]][cRotX], ClothingInfo[playerid][pData[playerid][pSelected]][cRotY], ClothingInfo[playerid][pData[playerid][pSelected]][cRotZ], ClothingInfo[playerid][pData[playerid][pSelected]][cScaleX], ClothingInfo[playerid][pData[playerid][pSelected]][cScaleY], ClothingInfo[playerid][pData[playerid][pSelected]][cScaleZ]);

							EditAttachedObject(playerid, 9);
		                }
		                else {
		                    EditAttachedObject(playerid, ClothingInfo[playerid][pData[playerid][pSelected]][cAttachedIndex]);
		                }

		                GameTextForPlayer(playerid, "~w~Editing Mode~n~~g~Click disk to save~n~~r~Press ESC to cancel", 5000, 1);
					}
					case 1:
					{
						ShowPlayerDialog(playerid, DIALOG_CLOTHINGBONE, DIALOG_STYLE_LIST, "Choose a new bone for this clothing item.", "Spine\nHead\nLeft upper arm\nRight upper arm\nLeft hand\nRight hand\nLeft thigh\nRight thigh\nLeft foot\nRight foot\nRight calf\nLeft calf\nLeft forearm\nRight forearm\nLeft shoulder\nRight shoulder\nNeck\nJaw", "Select", "Cancel");
					}
				}
			}
		}
		case DIALOG_CLOTHINGBONE:
		{
		    if(response)
		    {
		        ClothingInfo[playerid][pData[playerid][pSelected]][cBone] = listitem + 1;

		        if(ClothingInfo[playerid][pData[playerid][pSelected]][cAttached])
		        {
		            RemovePlayerAttachedObject(playerid, ClothingInfo[playerid][pData[playerid][pSelected]][cAttachedIndex]);
		            SetPlayerAttachedObject(playerid, ClothingInfo[playerid][pData[playerid][pSelected]][cAttachedIndex], ClothingInfo[playerid][pData[playerid][pSelected]][cModel], ClothingInfo[playerid][pData[playerid][pSelected]][cBone], ClothingInfo[playerid][pData[playerid][pSelected]][cPosX], ClothingInfo[playerid][pData[playerid][pSelected]][cPosY], ClothingInfo[playerid][pData[playerid][pSelected]][cPosZ],
		                ClothingInfo[playerid][pData[playerid][pSelected]][cRotX], ClothingInfo[playerid][pData[playerid][pSelected]][cRotY], ClothingInfo[playerid][pData[playerid][pSelected]][cRotZ], ClothingInfo[playerid][pData[playerid][pSelected]][cScaleX], ClothingInfo[playerid][pData[playerid][pSelected]][cScaleY], ClothingInfo[playerid][pData[playerid][pSelected]][cScaleZ]);
				}

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET boneid = %i WHERE id = %i", ClothingInfo[playerid][pData[playerid][pSelected]][cBone], ClothingInfo[playerid][pData[playerid][pSelected]][cID]);
				mysql_tquery(connectionID, queryBuffer);

				SM(playerid, COLOR_WHITE, "** Bone for "SVRCLR"%s changed to '%s'.", ClothingInfo[playerid][pData[playerid][pSelected]][cName], inputtext);
		    }
		}
		case DIALOG_BUYVEHICLE:
		{
		    if(response)
		    {
		        if(pData[playerid][pCash] < vehicleArray[listitem][carPrice])
		        {
		            return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this vehicle.");
		        }

		        new
		            string[128];

		        pData[playerid][pSelected] = listitem;

				format(string, sizeof(string), "{FFD700}Confirmation:\nAre you sure you want to purchase this %s for "SVRCLR"$%i{FFD700}?", vehicleNames[vehicleArray[listitem][carModel] - 400], vehicleArray[listitem][carPrice]);
				ShowPlayerDialog(playerid, DIALOG_BUYVEHICLE2, DIALOG_STYLE_MSGBOX, "Purchase confirmation", string, "Yes", "No");
			}
		}
		case DIALOG_BUYVEHICLE2:
		{
		    if(response)
		    {
		        if(pData[playerid][pGangCar])
		        {
		            new
		                string[20];

		            listitem = pData[playerid][pSelected];

		            if(pData[playerid][pCash] < vehicleArray[listitem][carPrice])
			        {
			            return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this vehicle.");
			        }
			        if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 5)
					{
					    return SCM(playerid, COLOR_SYNTAX, "You are not rank 5+ in any gang at the moment.");
					}
					if(GetGangVehicles(pData[playerid][pGang]) >= GetGangVehicleLimit(pData[playerid][pGang]))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Your gang can't have more than %i vehicles at its level.", GetGangVehicleLimit(pData[playerid][pGang]));
				    }

		            new
						Float:x,
						Float:y,
						Float:z,
						Float:angle;

		            if(IsPlayerInRangeOfPoint(playerid, 3.0, 542.0433, -1293.5909, 17.2422))
					{
						switch(random(3))
			    	    {
			        	    case 0: x = 562.3970, y = -1283.8485, z = 17.0007, angle = 0.0000;
			            	case 1: x = 557.8670, y = -1283.9822, z = 17.0007, angle = 0.0000;
			            	case 2: x = 552.8177, y = -1284.1307, z = 17.0007, angle = 0.0000;
						}
					}
					else if(IsPlayerInRangeOfPoint(playerid, 3.0, 154.2223, -1946.3030, 5.1920))
					{
					    switch(random(4))
			    	    {
			        	    case 0: x = 138.0530, y = -1828.8923, z = -0.4000, angle = 90.0000;
			            	case 1: x = 138.0067, y = -1819.7065, z = -0.4000, angle = 90.0000;
			            	case 2: x = 137.9428, y = -1810.7821, z = -0.4000, angle = 90.0000;
			            	case 3: x = 137.0448, y = -1801.4567, z = -0.4000, angle = 90.0000;
						}
					}
					else if(IsPlayerInRangeOfPoint(playerid, 3.0, 1892.6315, -2328.6721, 13.5469))
					{
					    switch(random(3))
			    	    {
			        	    case 0: x = 1806.3048, y = -2424.4480, z = 15.0087, angle = 180.0000;
			            	case 1: x = 1847.3726, y = -2428.7100, z = 15.0087, angle = 180.0000;
			            	case 2: x = 1891.6610, y = -2433.3047, z = 15.0087, angle = 180.0000;
						}
					}

					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO vehicles (modelid, price, pos_x, pos_y, pos_z, pos_a, gangid, respawndelay) VALUES(%i, %i, '%f', '%f', '%f', '%f', %i, 600)", vehicleArray[listitem][carModel], vehicleArray[listitem][carPrice], x, y, z, angle, pData[playerid][pGang]);
					mysql_tquery(connectionID, queryBuffer);

                    AddPointMoney(POINT_AUTOEXPORT, percent(vehicleArray[listitem][carPrice], 3));
			        mysql_tquery(connectionID, "SELECT * FROM vehicles WHERE id = LAST_INSERT_ID()", "OnQueryFinished", "ii", THREAD_LOAD_VEHICLES, -1);

			        format(string, sizeof(string), "~r~-$%i", vehicleArray[listitem][carPrice]);
		    	    GameTextForPlayer(playerid, string, 5000, 1);

					GivePlayerCash(playerid, -vehicleArray[listitem][carPrice]);
					pData[playerid][pGangCar] = 0;

			        SM(playerid, COLOR_GREEN, "%s purchased for your gang for $%i. /ganghelp for more commands.", vehicleNames[vehicleArray[listitem][carModel] - 400], vehicleArray[listitem][carPrice]);
		    	    Log_Write("log_give", "%s (uid: %i) purchased a %s for %s for $%i.", GetPlayerNameEx(playerid), pData[playerid][pID], vehicleNames[vehicleArray[listitem][carModel] - 400], GangInfo[pData[playerid][pGang]][gName], vehicleArray[listitem][carPrice]);
		        }
		        else
		        {
			        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM vehicles WHERE ownerid = %i", pData[playerid][pID]);
			        mysql_tquery(connectionID, queryBuffer, "OnPlayerAttemptBuyVehicle", "ii", playerid, pData[playerid][pSelected]);
				}
			}
		}
		case DIALOG_SPAWNCAR:
		{
		    if(response)
		    {
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM vehicles WHERE ownerid = %i LIMIT %i, 1", pData[playerid][pID], listitem);
				mysql_tquery(connectionID, queryBuffer, "OnPlayerSpawnVehicle", "ii", playerid, false);
		    }
		}
		case DIALOG_DESPAWNCAR:
		{
		    if(response)
		    {
		        new count;
		        for(new i = 1; i < MAX_VEHICLES; i ++)
			 	{
			 	    if((VehicleInfo[i][vID] > 0 && IsVehicleOwner(playerid, i)) && (count++ == listitem))
			 	    {
			 	        if(IsVehicleOccupied(i) && GetVehicleDriver(i) != playerid)
			 	        {
			 	            return SCM(playerid, COLOR_SYNTAX, "This vehicle is occupied.");
			 	        }

			 	        SM(playerid, COLOR_AQUA, "Your "SVRCLR"%s{CCFFFF} which is located in %s has been despawned.", GetVehicleName(i), GetVehicleZoneName(i));
            			DespawnVehicle(i);
            			return 1;
			 	    }
		        }
		    }
		}
		case DIALOG_FINDCAR:
		{
		    if(response)
		    {
		        new count, garageid;

		        for(new i = 1; i < MAX_VEHICLES; i ++)
			 	{
			 	    if((VehicleInfo[i][vID] > 0 && IsVehicleOwner(playerid, i)) && (count++ == listitem))
			 	    {
                        pData[playerid][pCP] = CHECKPOINT_MISC;

			            if((garageid = GetVehicleGarage(i)) >= 1)
			            {
			                SetPlayerCheckpoint(playerid, GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ], 3.0);
			                SM(playerid, COLOR_YELLOW, "** Your %s is located in a garage. Checkpoint marked at the garage's location.", GetVehicleName(i));
			            }
			            else
			            {
			                new
			                    Float:x,
			                    Float:y,
			                    Float:z;

			                GetVehiclePos(i, x, y, z);
			                SetPlayerCheckpoint(playerid, x, y, z, 3.0);
			                SM(playerid, COLOR_YELLOW, "** Your %s is located in %s. Checkpoint marked at the location.", GetVehicleName(i), GetZoneName(x, y, z));
			            }

			            return 1;
		            }
				}
			}
		}
		case DIALOG_BIZINTERIOR:
		{
		    if(response)
		    {
		        new businessid = pData[playerid][pSelected];

		        foreach(new i : Player)
		        {
		            if(GetInsideBusiness(i) == businessid)
		            {
						SetPlayerPos(i, bizInteriorArray[listitem][intX], bizInteriorArray[listitem][intY], bizInteriorArray[listitem][intZ]);
						SetPlayerFacingAngle(i, bizInteriorArray[listitem][intA]);
						SetPlayerInterior(i, bizInteriorArray[listitem][intID]);
						SetCameraBehindPlayer(i);
		            }
		        }

                BusinessInfo[businessid][bIntX] = bizInteriorArray[listitem][intX];
                BusinessInfo[businessid][bIntY] = bizInteriorArray[listitem][intY];
                BusinessInfo[businessid][bIntZ] = bizInteriorArray[listitem][intZ];
                BusinessInfo[businessid][bIntA] = bizInteriorArray[listitem][intA];
			    BusinessInfo[businessid][bInterior] = bizInteriorArray[listitem][intID];

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET int_x = '%f', int_y = '%f', int_z = '%f', int_a = '%f', interior = %i WHERE id = %i", BusinessInfo[businessid][bIntX], BusinessInfo[businessid][bIntY], BusinessInfo[businessid][bIntZ], BusinessInfo[businessid][bIntA], BusinessInfo[businessid][bInterior], BusinessInfo[businessid][bID]);
			    mysql_tquery(connectionID, queryBuffer);

				ReloadBusiness(businessid);
			    SM(playerid, COLOR_AQUA, "You've changed the interior of business %i to %s.", businessid, bizInteriorArray[listitem][intName]);
		    }
		}
		case DIALOG_FACTIONLOCKER:
		{
			if((response) && pData[playerid][pFaction] >= 0 && IsPlayerInRangeOfLocker(playerid, pData[playerid][pFaction]))
			{
				switch(FactionInfo[pData[playerid][pFaction]][fType])
				{
					case FACTION_POLICE, FACTION_SHERIFF, FACTION_MEDIC, FACTION_FEDERAL:
					{
					    if(listitem == 0) // Toggle duty
					    {
					        if(!pData[playerid][pDuty])
					        {
					            if(IsLawEnforcement(playerid))
					            {
					                SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s clocks in and grabs their police issued equipment from the locker.", GetRPName(playerid));
								}
								else if(FactionInfo[pData[playerid][pFaction]][fType] == FACTION_MEDIC)
					            {
					                SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s clocks in and grabs their medical supplies from the locker.", GetRPName(playerid));
								}
							    foreach(new i : Player)
								{
							        if(pData[playerid][pLogged])
									{
							   			SetPlayerMarkerForPlayer(i, playerid, GetPlayerColor(playerid));
									}
							    }
                                pData[playerid][pDuty] = 1;
								SetPlayerHealth(playerid, 100.0);
								SetScriptArmour(playerid, 100.0);
							}
							else
							{
					    		foreach(new i : Player)
								{
							        if(pData[playerid][pLogged])
									{
							    		SetPlayerMarkerForPlayer(i, playerid, 0xFF0000FF);
									}
							    }
							    pData[playerid][pDuty] = 0;
							    ResetPlayerWeaponsEx(playerid);

							    SetScriptArmour(playerid, 0.0);
								SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s clocks out and puts their equipment back in the locker.", GetRPName(playerid));
							}
						}
						else if(listitem == 1) // Equipment
						{
		    				if(IsLawEnforcement(playerid))
		    				{
						    	ShowPlayerDialog(playerid, DIALOG_FACTIONEQUIPMENT, DIALOG_STYLE_LIST, "Equipment", "Kevlar Vest\nMedkit\nNitestick\nSpraycan\nDesert Eagle\nShotgun\nMP5\nM4\nSPAS-12\nSniper\nTeargas\nBandage\nCamera", "Select", "Cancel");
							}
							else
							{
							    ShowPlayerDialog(playerid, DIALOG_FACTIONEQUIPMENT, DIALOG_STYLE_LIST, "Equipment", "Kevlar Vest\nFirstaid\nFire Extinguisher\nShotgun\nPainkillers\nBandage\nMedkit", "Select", "Cancel");
							}
						}
						else if(listitem == 2) // Uniforms
						{
						    if(!GetFactionSkinCount(pData[playerid][pFaction]))
						    {
						        return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} There are no uniforms setup for your faction.");
							}
							if(pData[playerid][pClothes] >= 0)
							{
							    pData[playerid][pSkin] = pData[playerid][pClothes];
							    pData[playerid][pClothes] = -1;

							    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET skin = %i, clothes = -1 WHERE uid = %i", pData[playerid][pSkin], pData[playerid][pID]);
							    mysql_tquery(connectionID, queryBuffer);

							    SetPlayerSkin(playerid, pData[playerid][pSkin]);
							    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s switches back to their old outfit.", GetRPName(playerid));
							}
							else
							{
	                            pData[playerid][pSkinSelected] = -1;
							    ShowPlayerDialog(playerid, DIALOG_FACTIONSKINS, DIALOG_STYLE_MSGBOX, "Uniform selection", "Press {00AA00}>> Next{A9C4E4} to browse through available uniforms.", ">> Next", "Confirm");
							}
						}
						else if(listitem == 3 && FactionInfo[pData[playerid][pFaction]][fType] != FACTION_MEDIC)
						{
							ShowCopClothingMenu(playerid);
						}
					}
					case FACTION_GOVERNMENT, FACTION_NEWS:
					{
					    if(listitem == 0) // Equipment
					    {
					        if(FactionInfo[pData[playerid][pFaction]][fType] == FACTION_GOVERNMENT)
          					{
          					    ShowPlayerDialog(playerid, DIALOG_FACTIONEQUIPMENT, DIALOG_STYLE_LIST, "Equipment", "Kevlar Vest\nMedkit\nDesert Eagle\nShotgun\nMP5\nM4", "Select", "Cancel");
							}
							else
							{
							    ShowPlayerDialog(playerid, DIALOG_FACTIONEQUIPMENT, DIALOG_STYLE_LIST, "Equipment", "Kevlar Vest\nMedkit\nCamera", "Select", "Cancel");
							}
						}
						else if(listitem == 1) // Uniforms
						{
						    if(!GetFactionSkinCount(pData[playerid][pFaction]))
						    {
						        return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} There are no uniforms setup for your faction.");
							}
							if(pData[playerid][pClothes] >= 0)
							{
							    pData[playerid][pSkin] = pData[playerid][pClothes];
							    pData[playerid][pClothes] = -1;

							    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET skin = %i, clothes = -1 WHERE uid = %i", pData[playerid][pSkin], pData[playerid][pID]);
							    mysql_tquery(connectionID, queryBuffer);

							    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s switches back to their old outfit.", GetRPName(playerid));
							}
							else
							{
							    pData[playerid][pSkinSelected] = -1;
						    	ShowPlayerDialog(playerid, DIALOG_FACTIONSKINS, DIALOG_STYLE_MSGBOX, "Uniform selection", "Press {00AA00}>> Next{A9C4E4} to browse through available uniforms.", ">> Next", "Confirm");
							}
						}
      					else if(listitem == 2)
						{
							ShowCopClothingMenu(playerid);
						}
					}
					case FACTION_DOC:
					{
					    if(listitem == 0) // Equipment
					    {
					        if(FactionInfo[pData[playerid][pFaction]][fType] == FACTION_DOC)
          					{
						    	ShowPlayerDialog(playerid, DIALOG_FACTIONEQUIPMENT, DIALOG_STYLE_LIST, "Equipment", "Kevlar Vest\nMedkit\nNitestick\nSpraycan\nDesert Eagle\nShotgun\nMP5\nM4\nSPAS-12\nSniper\nSmoke Grenade\nBandage", "Select", "Cancel");
							}
						}
						else if(listitem == 1) // Uniforms
						{
						    if(!GetFactionSkinCount(pData[playerid][pFaction]))
						    {
						        return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} There are no uniforms setup for your faction.");
							}
							if(pData[playerid][pClothes] >= 0)
							{
							    pData[playerid][pSkin] = pData[playerid][pClothes];
							    pData[playerid][pClothes] = -1;

							    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET skin = %i, clothes = -1 WHERE uid = %i", pData[playerid][pSkin], pData[playerid][pID]);
							    mysql_tquery(connectionID, queryBuffer);

							    SetPlayerSkin(playerid, pData[playerid][pSkin]);
							    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s switches back to their old outfit.", GetRPName(playerid));
							}
							else
							{
	                            pData[playerid][pSkinSelected] = -1;
							    ShowPlayerDialog(playerid, DIALOG_FACTIONSKINS, DIALOG_STYLE_MSGBOX, "Uniform selection", "Press {00AA00}>> Next{A9C4E4} to browse through available uniforms.", ">> Next", "Confirm");
							}
						}
      					else if(listitem == 2)
						{
							ShowCopClothingMenu(playerid);
						}
					}
					case FACTION_MECHANIC:
					{
						if(listitem == 0) // Toggle duty
						{
							if(!pData[playerid][pDuty])
							{
								ShowActionBubble(playerid, "* %s clocks in and grabs their equipment from the locker.", GetRPName(playerid));
					    		foreach(new i : Player)
								{
							        if(pData[playerid][pLogged])
									{
							    		SetPlayerMarkerForPlayer(i, playerid, GetPlayerColor(playerid));
									}
							    }
								pData[playerid][pDuty] = 1;
								pData[playerid][pWalkieTalkie] = 1;

								foreach(new i : Player) {
									SCMf(i, COLOR_GREEN, "Mechanic %s is now on duty.", GetRPName(playerid));
								}

								SetPlayerHealth(playerid, 100.0);
								//SetScriptArmour(playerid, 100.0);
							}
							else
							{
					    		foreach(new i : Player)
								{
							        if(pData[playerid][pLogged])
									{
							    		SetPlayerMarkerForPlayer(i, playerid, 0xFF0000FF);
									}
							    }
								pData[playerid][pDuty] = 0;
								//ResetPlayerWeaponsEx(playerid);

								foreach(new i : Player) {
									SCMf(i, COLOR_YELLOW, "Mechanic %s is now off duty.", GetRPName(playerid));
								}

								//SetScriptArmour(playerid, 0.0);
								ShowActionBubble(playerid, "* %s clocks out and puts their equipment back in the locker.", GetRPName(playerid));
							}
						}
					    if(listitem == 1) // Equipment
					    {
					        if(FactionInfo[pData[playerid][pFaction]][fType] == FACTION_MECHANIC)
          					{
          					    ShowPlayerDialog(playerid, DIALOG_FACTIONEQUIPMENT, DIALOG_STYLE_LIST, "Equipment", "Firstaid Kite\nKevlar Vest\nSpraycan\nComponents\nFuelCan\nRepairkit", "Select", "Cancel");
							}
						}
						else if(listitem == 2) // Uniforms
						{
						    if(!GetFactionSkinCount(pData[playerid][pFaction]))
						    {
						        return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} There are no uniforms setup for your faction.");
							}
							if(pData[playerid][pClothes] >= 0)
							{
							    pData[playerid][pSkin] = pData[playerid][pClothes];
							    pData[playerid][pClothes] = -1;

							    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET skin = %i, clothes = -1 WHERE uid = %i", pData[playerid][pSkin], pData[playerid][pID]);
							    mysql_tquery(connectionID, queryBuffer);

							    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s switches back to their old outfit.", GetRPName(playerid));
							}
							else
							{
							    pData[playerid][pSkinSelected] = -1;
						    	ShowPlayerDialog(playerid, DIALOG_FACTIONSKINS, DIALOG_STYLE_MSGBOX, "Uniform selection", "Press {00AA00}>> Next{A9C4E4} to browse through available uniforms.", ">> Next", "Confirm");
							}
						}
					}
					case FACTION_HITMAN:
					{
					    if(listitem == 0) // Order weapons
					    {
					        ShowPlayerDialog(playerid, DIALOG_FACTIONEQUIPMENT, DIALOG_STYLE_LIST, "Order weapons", "Kevlar Vest ($100)\nSilenced pistol ($100)\nShotgun ($150)\nDesert Eagle ($200)\nMP5 ($250)\nCountry rifle ($400)\nAK-47 ($600)\nM4 ($800)\nSniper rifle ($900)\nBomb ($750)", "Order", "Cancel");
						}
						else if(listitem == 1) // Change clothes
						{
						    ShowPlayerDialog(playerid, DIALOG_HITMANCLOTHES, DIALOG_STYLE_INPUT, "Change clothes", "Please input the ID of the skin you wish to purchase.\n(( List of skins: http://wiki.sa-mp.net/wiki/Skins:All ))", "Submit", "Cancel");
						}
					}
		        }
		    }
		}
		case DIALOG_FACTIONEQUIPMENT:
		{
		    if((response) && pData[playerid][pFaction] >= 0 && IsPlayerInRangeOfLocker(playerid, pData[playerid][pFaction]))
		    {
				switch(FactionInfo[pData[playerid][pFaction]][fType])
				{
					case FACTION_POLICE,FACTION_SHERIFF, FACTION_FEDERAL:
					{
					    switch(listitem)
					    {
					        case 0:
					        {
					            SetScriptArmour(playerid, 100.0);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a kevlar vest from the locker and puts it on.", GetRPName(playerid));
					        }
					        case 1:
					        {
					            SetPlayerHealth(playerid, 100.0);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a medkit from the locker and opens it.", GetRPName(playerid));
					        }
					        case 2:
					        {
                                GiveWeapon(playerid, 3);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a nitestick from the locker.", GetRPName(playerid));
					        }
					        case 3:
					        {
                                GiveWeapon(playerid, 41);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a can of pepper spray from the locker.", GetRPName(playerid));
					        }
					        case 4:
					        {
								GiveWeapon(playerid, 24);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a Desert Eagle from the locker.", GetRPName(playerid));
					        }
					        case 5:
					        {
					            GiveWeapon(playerid, 25);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a Shotgun from the locker.", GetRPName(playerid));
					        }
					        case 6:
					        {
					            GiveWeapon(playerid, 29);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs an MP5 from the locker.", GetRPName(playerid));
					        }
					        case 7:
					        {
					            GiveWeapon(playerid, 31);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs an M4 from the locker.", GetRPName(playerid));
					        }
					        case 8:
					        {
					            GiveWeapon(playerid, 27);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a SPAS-12 from the locker.", GetRPName(playerid));
							}
							case 9:
							{
								SCM(playerid, COLOR_SYNTAX, "Sniper is temporary disabled");
					            //GiveWeapon(playerid, 34);
					            //SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a Sniper from the locker.", GetRPName(playerid));
							}
							case 10:
							{
     							GiveWeapon(playerid, 17);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a Teargas from the locker.", GetRPName(playerid));
							}
     						case 11:
							{
     							GiveWeapon(playerid, 43);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a camera from the locker.", GetRPName(playerid));
							}
						}
					}
					case FACTION_MEDIC:
					{
					    switch(listitem)
					    {
					        case 0:
					        {
					            SetScriptArmour(playerid, 75.0);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a kevlar vest from the locker and puts it on.", GetRPName(playerid));
					        }
					        case 1:
					        {
					            SetPlayerHealth(playerid, 100.0);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a medkit from the locker and opens it.", GetRPName(playerid));
					        }
					        case 2:
					        {
                                GiveWeapon(playerid, 42);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a fire extinguisher from the locker.", GetRPName(playerid));
					        }
					        case 3:
					        {
                 				GiveWeapon(playerid, 25);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a Shotgun from the locker.", GetRPName(playerid));
					        }
					        case 4:
					        {
					            pData[playerid][pPainkillers] = 5;
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a five pack of painkillers from the locker.", GetRPName(playerid));

					            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", pData[playerid][pPainkillers], pData[playerid][pID]);
					            mysql_tquery(connectionID, queryBuffer);
					        }
					        case 5:
					        {
					        	if(pData[playerid][pBandage] >= 10)
							    {
							        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 10 bandage.");
							    }
					            pData[playerid][pBandage] += 10;
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a bandage from the locker.", GetRPName(playerid));

					            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET firstaid = %i WHERE uid = %i", pData[playerid][pBandage], pData[playerid][pID]);
					            mysql_tquery(connectionID, queryBuffer);
					        }
					        case 6:
					        {
					        	if(pData[playerid][pMedkit] >= 10)
							    {
							        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 10 medkit.");
							    }
					            pData[playerid][pMedkit] += 10;
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a medkit from the locker.", GetRPName(playerid));

					            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET medkit = %i WHERE uid = %i", pData[playerid][pMedkit], pData[playerid][pID]);
					            mysql_tquery(connectionID, queryBuffer);
					        }
						}
					}
					case FACTION_DOC:
					{
					    switch(listitem)
					    {
					        case 0:
					        {
					            SetScriptArmour(playerid, 100.0);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a kevlar vest from the locker and puts it on.", GetRPName(playerid));
					        }
					        case 1:
					        {
					            SetPlayerHealth(playerid, 100.0);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a medkit from the locker and opens it.", GetRPName(playerid));
					        }
					        case 2:
					        {
                                GiveWeapon(playerid, 3);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a nitestick from the locker.", GetRPName(playerid));
					        }
					        case 3:
					        {
                                GiveWeapon(playerid, 41);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a can of pepper spray from the locker.", GetRPName(playerid));
					        }
					        case 4:
					        {
								GiveWeapon(playerid, 24);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a Desert Eagle from the locker.", GetRPName(playerid));
					        }
					        case 5:
					        {
					            GiveWeapon(playerid, 25);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a Shotgun from the locker.", GetRPName(playerid));
					        }
					        case 6:
					        {
					            GiveWeapon(playerid, 29);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs an MP5 from the locker.", GetRPName(playerid));
					        }
					        case 7:
					        {
					            GiveWeapon(playerid, 31);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs an M4 from the locker.", GetRPName(playerid));
					        }
					        case 8:
					        {
					            GiveWeapon(playerid, 27);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a SPAS-12 from the locker.", GetRPName(playerid));
							}
							case 9:
							{
								SCM(playerid, COLOR_SYNTAX, "Sniper is temporary disabled");
					            //GiveWeapon(playerid, 34);
					            //SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a Sniper from the locker.", GetRPName(playerid));
							}
							case 10:
							{
     							GiveWeapon(playerid, 17);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a Smoke Grenade from the locker.", GetRPName(playerid));
							}
						}
					}
					case FACTION_GOVERNMENT:
					{
					    switch(listitem)
					    {
					        case 0:
					        {
					            SetScriptArmour(playerid, 75.0);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a kevlar vest from the locker and puts it on.", GetRPName(playerid));
					        }
					        case 1:
					        {
					            SetPlayerHealth(playerid, 100.0);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a medkit from the locker and opens it.", GetRPName(playerid));
					        }
					        case 2:
					        {
					            GiveWeapon(playerid, 24);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a Desert Eagle from the locker.", GetRPName(playerid));
					        }
					        case 3:
					        {
					            GiveWeapon(playerid, 25);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a Shotgun from the locker.", GetRPName(playerid));
					        }
					        case 4:
					        {
					            GiveWeapon(playerid, 29);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs an MP5 from the locker.", GetRPName(playerid));
					        }
					        case 5:
					        {
					            GiveWeapon(playerid, 31);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs an M4 from the locker.", GetRPName(playerid));
					        }
					    }
					}
					case FACTION_NEWS:
					{
					    switch(listitem)
					    {
					        case 0:
					        {
					            SetScriptArmour(playerid, 75.0);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a kevlar vest from the locker and puts it on.", GetRPName(playerid));
					        }
					        case 1:
					        {
					            SetPlayerHealth(playerid, 100.0);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a medkit from the locker and opens it.", GetRPName(playerid));
					        }
					        case 2:
					        {
					            GiveWeapon(playerid, 43);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a digital camera from the locker.", GetRPName(playerid));
					        }
					    }
					}
					case FACTION_MECHANIC:
					{
					    switch(listitem)
					    {
					        case 0:
					        {
					            SetPlayerHealth(playerid, 100.0);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a medkit from the locker and opens it.", GetRPName(playerid));
					        }
					        case 1:
					        {
					            SetScriptArmour(playerid, 75.0);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a kevlar vest from the locker and puts it on.", GetRPName(playerid));
					        }
					        case 2:
					        {
					            pData[playerid][pSpraycans] += 10;
					            GiveWeapon(playerid, 41);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a spraycans from the locker.", GetRPName(playerid));
		                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET spraycans = %i WHERE uid = %i", pData[playerid][pSpraycans], pData[playerid][pID]);
		                        mysql_tquery(connectionID, queryBuffer);
					        }
					        case 3:
					        {
					            pData[playerid][pGasCan] += 10;
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a gascan from the storage.", GetRPName(playerid));
							    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gascan = %i WHERE uid = %i", pData[playerid][pGasCan], pData[playerid][pID]);
							    mysql_tquery(connectionID, queryBuffer);
					        }
           					case 4:
					        {
		                        if(pData[playerid][pRepairKit] >= 20)
							    {
							        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 20 repairkit.");
							    }
					            pData[playerid][pRepairKit] += 10;
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s has withdraw a repairkit from the locker..", GetRPName(playerid));
		                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET repairkit = %i WHERE uid = %i", pData[playerid][pRepairKit], pData[playerid][pID]);
		                        mysql_tquery(connectionID, queryBuffer);
					        }
					    }
					}
					case FACTION_HITMAN:
					{
					    switch(listitem)
					    {
					        case 0:
							{
							    if(pData[playerid][pCash] < 100)
							    {
							        return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You can't afford this weapon.");
					            }

					            GivePlayerCash(playerid, -100);
					            SetScriptArmour(playerid, 75.0);

					            SCMf(playerid, COLOR_WHITE, "** You ordered a kevlar vest for $100.");
					            GameTextForPlayer(playerid, "~r~-$100", 5000, 1);
					    	}
					    	case 1:
							{
							    if(pData[playerid][pCash] < 100)
							    {
							        return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You can't afford this weapon.");
					            }

								GiveWeapon(playerid, 23);
					            GivePlayerCash(playerid, -100);

					            SCMf(playerid, COLOR_WHITE, "** You ordered a silenced pistol for $100.");
					            GameTextForPlayer(playerid, "~r~-$100", 5000, 1);
					    	}
					    	case 2:
							{
							    if(pData[playerid][pCash] < 150)
							    {
							        return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You can't afford this weapon.");
					            }

								GiveWeapon(playerid, 25);
					            GivePlayerCash(playerid, -150);

					            SCMf(playerid, COLOR_WHITE, "** You ordered a shotgun for $150.");
					            GameTextForPlayer(playerid, "~r~-$150", 5000, 1);
					    	}
					    	case 3:
							{
							    if(pData[playerid][pCash] < 200)
							    {
							        return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You can't afford this weapon.");
					            }

								GiveWeapon(playerid, 24);
					            GivePlayerCash(playerid, -200);

					            SCMf(playerid, COLOR_WHITE, "** You ordered a Desert Eagle for $200.");
					            GameTextForPlayer(playerid, "~r~-$200", 5000, 1);
					    	}
					    	case 4:
							{
							    if(pData[playerid][pCash] < 250)
							    {
							        return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You can't afford this weapon.");
					            }

								GiveWeapon(playerid, 29);
					            GivePlayerCash(playerid, -250);

					            SCMf(playerid, COLOR_WHITE, "** You ordered an MP5 for $250.");
					            GameTextForPlayer(playerid, "~r~-$2500", 5000, 1);
					    	}
					    	case 5:
							{
							    if(pData[playerid][pCash] < 400)
							    {
							        return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You can't afford this weapon.");
					            }

								GiveWeapon(playerid, 33);
					            GivePlayerCash(playerid, -400);

					            SCMf(playerid, COLOR_WHITE, "** You ordered a country rifle for $400.");
					            GameTextForPlayer(playerid, "~r~-$400", 5000, 1);
					    	}
					    	case 6:
							{
							    if(pData[playerid][pCash] < 600)
							    {
							        return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You can't afford this weapon.");
					            }

								GiveWeapon(playerid, 30);
					            GivePlayerCash(playerid, -600);

					            SCMf(playerid, COLOR_WHITE, "** You ordered an AK-47 for $600.");
					            GameTextForPlayer(playerid, "~r~-$600", 5000, 1);
					    	}
					    	case 7:
							{
							    if(pData[playerid][pCash] < 800)
							    {
							        return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You can't afford this weapon.");
					            }

								GiveWeapon(playerid, 31);
					            GivePlayerCash(playerid, -800);

					            SCMf(playerid, COLOR_WHITE, "** You ordered an M4 for $800.");
					            GameTextForPlayer(playerid, "~r~-$800", 5000, 1);
					    	}
					    	case 8:
							{
							    if(pData[playerid][pCash] < 900)
							    {
							        return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You can't afford this weapon.");
					            }
			            		SCM(playerid, COLOR_SYNTAX, "Sniper is temporary disabled");
								//GiveWeapon(playerid, 34);
					            //GivePlayerCash(playerid, -900);

					            //SCMf(playerid, COLOR_WHITE, "** You ordered a sniper rifle for $900.");
					            //GameTextForPlayer(playerid, "~r~-$900", 5000, 1);
					    	}
					    	case 9:
							{
							    if(pData[playerid][pCash] < 750)
							    {
							        return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You can't afford this weapon.");
					            }
					            if(pData[playerid][pBombs] > 3)
					            {
					                return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You have more than 3 bombs. You can't buy anymore.");
								}

					            pData[playerid][pBombs]++;
					            GivePlayerCash(playerid, -750);

								mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bombs = %i WHERE uid = %i", pData[playerid][pBombs], pData[playerid][pID]);
								mysql_tquery(connectionID, queryBuffer);

					            SCMf(playerid, COLOR_WHITE, "** You ordered a bomb for $750. /plantbomb to place the bomb.");
					            GameTextForPlayer(playerid, "~r~-$750", 5000, 1);
					    	}
					    }
					}
				}
			}
		}
		case DIALOG_FACTIONSKINS:
		{
		    if(pData[playerid][pFaction] >= 0 && IsPlayerInRangeOfLocker(playerid, pData[playerid][pFaction]))
		    {
		        if(response)
		        {
					new index = pData[playerid][pSkinSelected] + 1;

					if(index >= MAX_FACTION_SKINS)
					{
					    // When the player is shown the dialog for the first time, their skin isn't changed until they click >> Next.
					    SetPlayerSkin(playerid, pData[playerid][pSkin]);
					    pData[playerid][pSkinSelected] = -1;
					}
					else
					{
					    // Find the next skin in the array.
						for(new i = index; i < MAX_FACTION_SKINS; i ++)
						{
						    if(FactionInfo[pData[playerid][pFaction]][fSkins][i] != 0)
						    {
						        SetPlayerSkin(playerid, FactionInfo[pData[playerid][pFaction]][fSkins][i]);
						        pData[playerid][pSkinSelected] = i;
						        break;
					        }
		                }

		                if(index == pData[playerid][pSkinSelected] + 1)
		                {
		                    // Looks like there was no skin found. So, we'll go back to the very first valid skin in the skin array.
		                    for(new i = 0; i < MAX_FACTION_SKINS; i ++)
							{
						    	if(FactionInfo[pData[playerid][pFaction]][fSkins][i] != 0)
						    	{
		                            SetPlayerSkin(playerid, FactionInfo[pData[playerid][pFaction]][fSkins][i]);
						        	pData[playerid][pSkinSelected] = i;
						        	break;
								}
							}
		                }
		            }

		            ShowPlayerDialog(playerid, DIALOG_FACTIONSKINS, DIALOG_STYLE_MSGBOX, "Uniform selection", "Press {FFFFFF}>> Next{A9C4E4} to browse through available uniforms.", ">> Next", "Confirm");
		        }
		        else
		        {
		            pData[playerid][pClothes] = pData[playerid][pSkin];
		            pData[playerid][pSkin] = GetPlayerSkin(playerid);
		            pData[playerid][pSkinSelected] = -1;

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET skin = %i, clothes = %i WHERE uid = %i", pData[playerid][pSkin], pData[playerid][pClothes], pData[playerid][pID]);
		            mysql_tquery(connectionID, queryBuffer);

		            SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s takes a uniform out of the locker and puts it on.", GetRPName(playerid));
				}
		    }
		}
		case DIALOG_HITMANCLOTHES:
		{
		    if((response) && pData[playerid][pFaction] >= 0 && IsPlayerInRangeOfPoint(playerid, 3.0, FactionInfo[pData[playerid][pFaction]][fLockerX], FactionInfo[pData[playerid][pFaction]][fLockerY], FactionInfo[pData[playerid][pFaction]][fLockerZ]))
		    {
				new skinid;

		    	if(sscanf(inputtext, "i", skinid))
				{
					return ShowPlayerDialog(playerid, DIALOG_HITMANCLOTHES, DIALOG_STYLE_INPUT, "Change clothes", "Please input the ID of the skin you wish to purchase.\n(( List of skins: http://wiki.sa-mp.net/wiki/Skins:All ))", "Submit", "Cancel");
		        }
		        if(!(0 <= skinid <= 311))
		        {
		            SCM(playerid, COLOR_SYNTAX, "Invalid skin.");
		            return ShowPlayerDialog(playerid, DIALOG_HITMANCLOTHES, DIALOG_STYLE_INPUT, "Change clothes", "Please input the ID of the skin you wish to purchase.\n(( List of skins: http://wiki.sa-mp.net/wiki/Skins:All ))", "Submit", "Cancel");
		        }

		        pData[playerid][pSkin] = skinid;
		        SetPlayerSkin(playerid, skinid);

                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET skin = %i WHERE uid = %i", pData[playerid][pSkin], pData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

				GameTextForPlayer(playerid, "~w~Clothes changed for free", 3000, 3);
		    }
		}
		case DIALOG_MDC:
		{
		    if((response) && IsLawEnforcement(playerid))
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                static string[2048], count;

		                string = "Suspect\tLocation\tWanted level";

		                count = 0;

						foreach(new i : Player)
						{
						    if(pData[i][pWantedLevel] > 0)
						    {
						        format(string, sizeof(string), "%s\n%s\t%s\t%i/6", string, GetRPName(i), GetPlayerZoneName(i), pData[i][pWantedLevel]);
						        count++;
						    }
						}

						if(!count)
						{
						    return SCM(playerid, COLOR_SYNTAX, "There are currently no wanted suspects online.");
						}

						ShowPlayerDialog(playerid, DIALOG_MDCWANTED, DIALOG_STYLE_TABLIST_HEADERS, "Suspects wanted", string, "Track", "Cancel");
					}
					case 1:
					{
					    ShowPlayerDialog(playerid, DIALOG_PLAYERLOOKUP, DIALOG_STYLE_INPUT, "Player lookup", "Enter the full name of the player to lookup:", "Submit", "Cancel");
					}
					case 2:
					{
					    ShowPlayerDialog(playerid, DIALOG_VEHICLELOOKUP1, DIALOG_STYLE_INPUT, "Vehicle lookup", "Enter the ID of the vehicle to lookup.\n(( You can find out the ID of a vehicle by using /dl. ))", "Submit", "Cancel");
					}
				}
			}
		}
		case DIALOG_MDCWANTED:
		{
		    if((response) && IsLawEnforcement(playerid))
		    {
		        foreach(new i : Player)
				{
    				if(!strcmp(GetRPName(i), inputtext))
    				{
    				    new
    				        Float:x,
    				        Float:y,
    				        Float:z;

    				    GetPlayerPosEx(i, x, y, z);

    				    pData[playerid][pCP] = CHECKPOINT_MISC;

    				    SetPlayerCheckpoint(playerid, x, y, z, 3.0);
    				    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the suspect's last known location.");
						return 1;
					}
				}

				SCM(playerid, COLOR_SYNTAX, "The suspect you've selected has went offline.");
			}
		}
		case DIALOG_PLAYERLOOKUP:
		{
		    if((response) && IsLawEnforcement(playerid))
		    {
		        new username[MAX_PLAYER_NAME];

		        if(sscanf(inputtext, "s[24]", username))
		        {
		            return ShowPlayerDialog(playerid, DIALOG_PLAYERLOOKUP, DIALOG_STYLE_INPUT, "Player lookup", "Enter the full name of the player to lookup:", "Submit", "Cancel");
				}

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid, gender, age, wantedlevel, crimes, arrested, carlicense, gunlicense FROM users WHERE username = '%e'", username);
				mysql_tquery(connectionID, queryBuffer, "MDC_PlayerLookup", "is", playerid, username);
			}
		}
		case DIALOG_MDCPLAYER1:
		{
		    if((response) && IsLawEnforcement(playerid))
		    {
		        ShowPlayerDialog(playerid, DIALOG_MDCPLAYER2, DIALOG_STYLE_LIST, "Options", "Show active charges\nClear charges\nCheck Vehicles", "Select", "Cancel");
			}
		}
		case DIALOG_MDCPLAYER2:
		{
		    if((response) && IsLawEnforcement(playerid))
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM charges WHERE uid = %i", pData[playerid][pSelected]);
		                mysql_tquery(connectionID, queryBuffer, "MDC_ListCharges", "i", playerid);
		            }
		            case 1:
		            {
		                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username FROM users WHERE uid = %i", pData[playerid][pSelected]);
		                mysql_tquery(connectionID, queryBuffer, "MDC_ClearCharges", "i", playerid);
		            }
		            case 2:
		            {
		                SM(playerid, SERVER_COLOR, "Coming soon.");
					}
				}
		    }
		}
		case DIALOG_MDCCHARGES:
		{
		    ShowPlayerDialog(playerid, DIALOG_MDCPLAYER2, DIALOG_STYLE_LIST, "Options", "Show active charges\nClear charges", "Select", "Cancel");
		}
		case DIALOG_VEHICLELOOKUP1:
		{
		    if((response) && IsLawEnforcement(playerid))
		    {
			    new vehicleid, string[512];

			    if(sscanf(inputtext, "i", vehicleid))
			    {
		    	    return ShowPlayerDialog(playerid, DIALOG_VEHICLELOOKUP1, DIALOG_STYLE_INPUT, "Vehicle lookup", "Enter the ID of the vehicle to lookup.\n(( You can find out the ID of a vehicle by using /dl. ))", "Submit", "Cancel");
				}
				if(!IsValidVehicle(vehicleid) || !VehicleInfo[vehicleid][vOwnerID])
				{
				    SCM(playerid, COLOR_SYNTAX, "The vehicle ID specified is not owned by any particular person.");
			    	return ShowPlayerDialog(playerid, DIALOG_VEHICLELOOKUP1, DIALOG_STYLE_INPUT, "Vehicle lookup", "Enter the ID of the vehicle to lookup.\n(( You can find out the ID of a vehicle by using /dl. ))", "Submit", "Cancel");
				}

				pData[playerid][pSelected] = vehicleid;

				format(string, sizeof(string), "Name: %s\nPlate: %s\nOwner: %s\nTickets: $%i\nLocation: %s", GetVehicleName(vehicleid), VehicleInfo[vehicleid][vPlate], VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vTickets], GetVehicleZoneName(vehicleid));
            	ShowPlayerDialog(playerid, DIALOG_VEHICLELOOKUP2, DIALOG_STYLE_MSGBOX, "Vehicle lookup", string, "Track", "Cancel");
			}
		}
		case DIALOG_VEHICLELOOKUP2:
		{
			if((response) && IsLawEnforcement(playerid))
		    {
				new garageid, vehicleid = pData[playerid][pSelected];

				if((garageid = GetVehicleGarage(vehicleid)) >= 0)
				{
				    SetPlayerCheckpoint(playerid, GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ], 3.0);
				    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the garage this vehicle is inside of.");
				}
				else
				{
				    new
						Float:x,
						Float:y,
						Float:z;

                    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the vehicle's last known location.");

					GetVehiclePos(vehicleid, x, y, z);
					SetPlayerCheckpoint(playerid, x, y, z, 3.0);
				}

    			pData[playerid][pCP] = CHECKPOINT_MISC;
			}
		}
		case DIALOG_FACTIONPAY1:
		{
		    if((response) && GetFactionType(playerid) == FACTION_GOVERNMENT)
		    {
		        pData[playerid][pSelected] = listitem;
		        ShowPlayerDialog(playerid, DIALOG_FACTIONPAY2, DIALOG_STYLE_INPUT, "Change paycheck", "Enter the new paycheck amount for this rank:", "Submit", "Back");
		    }
		}
		case DIALOG_FACTIONPAY2:
		{
		    if(GetFactionType(playerid) == FACTION_GOVERNMENT)
		    {
		        if(response)
		        {
		            new amount, factionid = pData[playerid][pFactionEdit], rankid = pData[playerid][pSelected];

		            if(sscanf(inputtext, "i", amount))
		            {
		                return ShowPlayerDialog(playerid, DIALOG_FACTIONPAY2, DIALOG_STYLE_INPUT, "Change paycheck", "Enter the new paycheck amount for this rank:", "Submit", "Back");
					}
					if(!(1 <= amount <= 30000))
					{
					    SCM(playerid, COLOR_SYNTAX, "The specified amount must range from $1 to $30000.");
					    return ShowPlayerDialog(playerid, DIALOG_FACTIONPAY2, DIALOG_STYLE_INPUT, "Change paycheck", "Enter the new paycheck amount for this rank:", "Submit", "Back");
					}

					FactionInfo[factionid][fPaycheck][rankid] = amount;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO factionpay VALUES(%i, %i, %i) ON DUPLICATE KEY UPDATE amount = %i", factionid, rankid, amount, amount);
				    mysql_tquery(connectionID, queryBuffer);

					SM(playerid, COLOR_AQUA, "You have set the paycheck for rank %i to $%i.", rankid, amount);
				    Log_Write("log_faction", "%s (uid: %i) set %s's (id: %i) paycheck for rank %i to $%i.", GetPlayerNameEx(playerid), pData[playerid][pID], FactionInfo[factionid][fName], factionid, rankid, amount);
		        }

				ShowDialogToPlayer(playerid, DIALOG_FACTIONPAY1);
		    }
		}
		case DIALOG_PHONEBOOK:
		{
		    if(response)
		    {
		        if(!strcmp(inputtext, ">> Next page", true))
		        {
		            pData[playerid][pPage]++;
		            ShowDialogToPlayer(playerid, DIALOG_PHONEBOOK);
		        }
		        else if(!strcmp(inputtext, "<< Go back", true) && pData[playerid][pPage] > 1)
		        {
		            pData[playerid][pPage]--;
		            ShowDialogToPlayer(playerid, DIALOG_PHONEBOOK);
		        }
		    }
		}
		case DIALOG_CREATEZONE:
		{
		    if((response) && pData[playerid][pAdmin] >= 5)
		    {
		        pData[playerid][pMinX] = 0.0;
		        pData[playerid][pMinY] = 0.0;
		        pData[playerid][pMaxX] = 0.0;
		        pData[playerid][pMaxY] = 0.0;

				if(pData[playerid][pZoneType] == ZONETYPE_LAND)
				{
					new Float:lx = pData[playerid][plX],
					    Float:ly = pData[playerid][plY],
					    Float:lz = pData[playerid][plZ];

                    GetPlayerPos(playerid, lx, ly, lz);
					pData[playerid][plX] = lx;
					pData[playerid][plY] = ly;
					pData[playerid][plZ] = lz;

			        pData[playerid][pZoneCreation] = ZONETYPE_LAND;
			        SCM(playerid, COLOR_WHITE, "** Your land needs to be within a square or rectangle. /confirm to set the four boundary points.");
				}
				else if(pData[playerid][pZoneType] == ZONETYPE_TURF)
				{
			        pData[playerid][pZoneCreation] = ZONETYPE_TURF;
			        SCM(playerid, COLOR_WHITE, "** Your turf needs to be within a square or rectangle. /confirm to set the four boundary points.");
				}
		    }
		}
		case DIALOG_CONFIRMZONE:
		{
		    if(response)
		    {
		    	if(pData[playerid][pZoneCreation] == ZONETYPE_LAND)
		        {
			        for(new i = 0; i < MAX_LANDS; i ++)
					{
					    if(!LandInfo[i][lExists])
					    {
					        new
					            Float:minx = pData[playerid][pMinX],
					            Float:miny = pData[playerid][pMinY],
					            Float:maxx = pData[playerid][pMaxX],
					            Float:maxy = pData[playerid][pMaxY],
					            Float:z;

	            			GetPlayerPos(playerid, z, z, z);

					        if(minx > maxx)
							{
	                            pData[playerid][pMinX] = maxx;
	                            pData[playerid][pMaxX] = minx;
					        }
					        if(miny > maxy)
							{
					            pData[playerid][pMinY] = maxy;
					            pData[playerid][pMaxY] = miny;
					        }

							mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO lands (price, min_x, min_y, max_x, max_y, height, lx, ly, lz) VALUES(%i, '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f')", pData[playerid][pLandCost], pData[playerid][pMinX], pData[playerid][pMinY], pData[playerid][pMaxX], pData[playerid][pMaxY], z, pData[playerid][plX], pData[playerid][plY], pData[playerid][plZ]);
							mysql_tquery(connectionID, queryBuffer, "OnAdminCreateLand", "iiiffffffff", playerid, i, pData[playerid][pLandCost], pData[playerid][pMinX], pData[playerid][pMinY], pData[playerid][pMaxX], pData[playerid][pMaxY], z, pData[playerid][plX], pData[playerid][plY], pData[playerid][plZ]);
	      					CancelZoneCreation(playerid);
							return 1;
						}
					}

					SCM(playerid, COLOR_SYNTAX, "Land slots are currently full. Ask Community Directors to increase the internal limit.");
					CancelZoneCreation(playerid);
		    	}
		    	else if(pData[playerid][pZoneCreation] == ZONETYPE_TURF)
		    	{
		    	    for(new i = 1; i < MAX_TURFS; i ++)
					{
					    if(!TurfInfo[i][tExists])
					    {
					        new
					            Float:minx = pData[playerid][pMinX],
					            Float:miny = pData[playerid][pMinY],
					            Float:maxx = pData[playerid][pMaxX],
					            Float:maxy = pData[playerid][pMaxY],
					            Float:z;

	            			GetPlayerPos(playerid, z, z, z);

					        if(minx > maxx)
							{
	                            pData[playerid][pMinX] = maxx;
	                            pData[playerid][pMaxX] = minx;
					        }
					        if(miny > maxy)
							{
					            pData[playerid][pMinY] = maxy;
					            pData[playerid][pMaxY] = miny;
					        }

							mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO turfs (id, name, type, min_x, min_y, max_x, max_y, height) VALUES(%i, '%e', %i, '%f', '%f', '%f', '%f', '%f')", i, pData[playerid][pTurfName], pData[playerid][pTurfType], pData[playerid][pMinX], pData[playerid][pMinY], pData[playerid][pMaxX], pData[playerid][pMaxY], z);
							mysql_tquery(connectionID, queryBuffer, "OnAdminCreateTurf", "iisifffff", playerid, i, pData[playerid][pTurfName], pData[playerid][pTurfType], pData[playerid][pMinX], pData[playerid][pMinY], pData[playerid][pMaxX], pData[playerid][pMaxY], z);
	      					CancelZoneCreation(playerid);
							return 1;
						}
					}

					SCM(playerid, COLOR_SYNTAX, "Turf slots are currently full. Ask managements to increase the internal limit.");
					CancelZoneCreation(playerid);
		    	}
			}
			else
			{
			    CancelZoneCreation(playerid);

				if(pData[playerid][pZoneType] == ZONETYPE_LAND)
				{
					SCM(playerid, COLOR_WHITE, "** Your land needs to be within a square or rectangle. /confirm to set the four boundary points.");
					SCM(playerid, COLOR_WHITE, "** Note: You can use /landcancel to exit land creation mode.");
					pData[playerid][pZoneCreation] = ZONETYPE_LAND;
				}
				else if(pData[playerid][pZoneType] == ZONETYPE_TURF)
				{
					SCM(playerid, COLOR_WHITE, "** Your turf needs to be within a square or rectangle. /confirm to set the four boundary points.");
					SCM(playerid, COLOR_WHITE, "** Note: You can use /turfcancel to exit turf creation mode.");
					pData[playerid][pZoneCreation] = ZONETYPE_TURF;
				}
			}
		}
		case DIALOG_LANDBUILDTYPE:
		{
		    new landid = GetNearbyLand(playerid);

		    if(landid == -1 || !HasLandPerms(playerid, landid))
			{
				return 0;
			}

	   	    if(response)
	        {
				pData[playerid][pMenuType] = listitem;
				ShowDialogToPlayer(playerid, DIALOG_LANDBUILD1);
			}
		    else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_LANDMENU);
			}
		}
        case DIALOG_LANDBUILD1:
	    {
	        new landid = GetNearbyLand(playerid);

		    if(landid == -1 || !HasLandPerms(playerid, landid))
			{
				return 0;
			}

	   	    if(response)
	        {
	            switch(pData[playerid][pMenuType])
	            {
	                case 0: // Model selection
	                {
						pData[playerid][pCategory] = listitem;
						ShowObjectSelectionMenu(playerid, MODEL_SELECTION_LANDOBJECTS);
	                }
	                case 1:
	                {
						pData[playerid][pCategory] = listitem;
						ShowDialogToPlayer(playerid, DIALOG_LANDBUILD2);
					}
     	       }
			}
	        else
	        {
	            ShowDialogToPlayer(playerid, DIALOG_LANDBUILDTYPE);
			}
	    }
	    case DIALOG_LANDBUILD2:
	    {
	        new landid = GetNearbyLand(playerid);

		    if(landid == -1 || !HasLandPerms(playerid, landid))
			{
				return 0;
			}

	        if(response)
	        {
                PurchaseLandObject(playerid, landid, listitem + pData[playerid][pFurnitureIndex]);
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_LANDBUILD1);
			}
	    }
	    case DIALOG_LANDMENU:
	    {
	        new landid = GetNearbyLand(playerid);

	        if(landid == -1 || !HasLandPerms(playerid, landid))
	        {
	            return 1;
	        }

	        if(response)
	        {
		        switch(listitem)
		        {
		            case 0:
		            {
           		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM landobjects WHERE landid = %i", LandInfo[landid][lID]);
						mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_COUNT_LANDOBJECTS, playerid);
		                //ShowDialogToPlayer(playerid, DIALOG_LANDBUILD1);
					}
					case 1:
					{
					    ShowPlayerDialog(playerid, DIALOG_LANDEDITOBJECT, DIALOG_STYLE_INPUT, "Edit object", "Please enter the object ID of the object to edit:\nYou can find out the ID of objects by toggling labels in the menu.", "Submit", "Back");
					}
					case 2:
					{
						if(!LandInfo[landid][lLabels])
					    {
					        LandInfo[landid][lLabels] = 1;
					        SCM(playerid, COLOR_AQUA, "You will now see labels appear above the objects in your land.");
					    }
					    else
					    {
					        LandInfo[landid][lLabels] = 0;
					        SCM(playerid, COLOR_AQUA, "You will no longer see any labels appear above your land objects.");
					    }

					    ReloadAllLandObjects(landid);
					    ShowDialogToPlayer(playerid, DIALOG_LANDMENU);
					}
					case 3:
					{
					    ShowPlayerDialog(playerid, DIALOG_LANDSELLALL, DIALOG_STYLE_MSGBOX, "Clear objects", "This option sells all the objects in your land. You will receive\n75 percent of the total cost of all your objects.\n\nPress "SVRCLR"Confirm{A9C4E4} to proceed with the operation.", "Confirm", "Back");
					}
					case 4:
					{
					    ShowPlayerDialog(playerid, DIALOG_LANDPERMS, DIALOG_STYLE_INPUT, "Permissions", "Please enter the name or ID of the player to take or give permissions to:", "Submit", "Back");
					}
   				}
	        }
	    }
	    case DIALOG_LANDEDITOBJECT:
	    {
	        new landid = GetNearbyLand(playerid);

	        if(landid == -1 || !HasLandPerms(playerid, landid))
	        {
	            return 1;
	        }

	        if(response)
	        {
	            new objectid;

	            if(sscanf(inputtext, "i", objectid))
	            {
	                return ShowPlayerDialog(playerid, DIALOG_LANDEDITOBJECT, DIALOG_STYLE_INPUT, "Edit object", "Please enter the object ID of the object to edit:\nYou can find out the ID of objects by toggling labels in the menu.", "Submit", "Back");
				}
				if(!IsValidDynamicObject(objectid) || Streamer_GetExtraInt(objectid, E_OBJECT_TYPE) != E_OBJECT_LAND)
				{
				    SCM(playerid, COLOR_SYNTAX, "Invalid object. You can find out an object's ID by enabling labels.");
				    return ShowPlayerDialog(playerid, DIALOG_LANDEDITOBJECT, DIALOG_STYLE_INPUT, "Edit object", "Please enter the object ID of the object to edit:\nYou can find out the ID of objects by toggling labels in the menu.", "Submit", "Back");
		        }
		        if(Streamer_GetExtraInt(objectid, E_OBJECT_EXTRA_ID) != LandInfo[landid][lID])
		        {
		            SCM(playerid, COLOR_SYNTAX, "Invalid object. This land object is not apart of your land.");
		            return ShowPlayerDialog(playerid, DIALOG_LANDEDITOBJECT, DIALOG_STYLE_INPUT, "Edit object", "Please enter the object ID of the object to edit:\nYou can find out the ID of objects by toggling labels in the menu.", "Submit", "Back");
		        }

		        pData[playerid][pSelected] = objectid;
				ShowDialogToPlayer(playerid, DIALOG_LANDOBJECTMENU);
	        }
	        else
	        {
	            ShowDialogToPlayer(playerid, DIALOG_LANDMENU);
			}
		}
	    case DIALOG_LANDOBJECTMENU:
	    {
            new landid = GetNearbyLand(playerid);

	        if(landid == -1 || !HasLandPerms(playerid, landid))
	        {
	            return 1;
	        }

	        if(response)
	        {
	            new objectid = pData[playerid][pSelected];

	            if(!strcmp(inputtext, "Edit object"))
	            {
	                if(Streamer_GetExtraInt(objectid, E_OBJECT_OPENED))
					{
					    return SCM(playerid, COLOR_SYNTAX, "You can't edit your gate while it is opened.");
					}

	    	        pData[playerid][pEditType] = EDIT_LAND_OBJECT;
		    	    pData[playerid][pEditObject] = objectid;
	        		pData[playerid][pObjectLand] = landid;

					EditDynamicObject(playerid, objectid);
	    		    GameTextForPlayer(playerid, "~w~Editing Mode~n~~g~Click disk to save~n~~r~Press ESC to cancel", 5000, 1);
	            }
	            else if(!strcmp(inputtext, "Edit gate destination"))
	            {
	                if(Streamer_GetExtraInt(objectid, E_OBJECT_OPENED))
					{
					    return SCM(playerid, COLOR_SYNTAX, "You can't edit your gate while it is opened.");
					}

			        pData[playerid][pEditType] = EDIT_LAND_GATE_MOVE;
			        pData[playerid][pEditObject] = objectid;
			        pData[playerid][pObjectLand] = landid;

					EditDynamicObject(playerid, objectid);
					SCM(playerid, COLOR_WHITE, "** You are now editing the move-to position for your gate.");
			        GameTextForPlayer(playerid, "~w~Editing Mode~n~~g~Click disk to save~n~~r~Press ESC to cancel", 5000, 1);
	            }
	            else if(!strcmp(inputtext, "Duplicate object"))
	            {
	                pData[playerid][pSelected] = objectid;

	                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT name, modelid, price, pos_x, pos_y, pos_z, rot_x, rot_y, rot_z FROM landobjects WHERE id = %i", Streamer_GetExtraInt(objectid, E_OBJECT_INDEX_ID));
			        mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_DUPLICATE_LANDOBJECT, playerid);
	            }
	            else if(!strcmp(inputtext, "Sell object"))
	            {
	                pData[playerid][pSelected] = objectid;

			        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT name, price FROM landobjects WHERE id = %i", Streamer_GetExtraInt(objectid, E_OBJECT_INDEX_ID));
			        mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_SELL_LANDOBJECT, playerid);
				}
			}
			else
			{
			    ShowPlayerDialog(playerid, DIALOG_LANDEDITOBJECT, DIALOG_STYLE_INPUT, "Edit object", "Please enter the object ID of the object to edit:\nYou can find out the ID of objects by toggling labels in the menu.", "Submit", "Back");
			}
		}
		case DIALOG_LANDOBJECTS:
		{
		    if(response)
		    {
		        if(!strcmp(inputtext, ">> Next page", true))
		        {
		            pData[playerid][pPage]++;
		            ShowDialogToPlayer(playerid, DIALOG_LANDOBJECTS);
		        }
		        else if(!strcmp(inputtext, "<< Go back", true) && pData[playerid][pPage] > 1)
		        {
		            pData[playerid][pPage]--;
		            ShowDialogToPlayer(playerid, DIALOG_LANDOBJECTS);
		        }
		        else
		        {
		            new objectid = strval(inputtext);

		            if(IsValidDynamicObject(objectid) && Streamer_GetExtraInt(objectid, E_OBJECT_TYPE) == E_OBJECT_LAND)
		            {
			            pData[playerid][pSelected] = objectid;
						ShowDialogToPlayer(playerid, DIALOG_LANDOBJECTMENU);
					}
		        }
		    }
		    else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_LANDMENU);
			}
		}
		case DIALOG_LANDSELLALL:
		{
		    new landid = GetNearbyLand(playerid);

	        if(landid == -1 || !HasLandPerms(playerid, landid))
	        {
	            return 1;
	        }

	        if(response)
	        {
		    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT price FROM landobjects WHERE landid = %i", LandInfo[landid][lID]);
        		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_CLEAR_LANDOBJECTS, playerid);
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_LANDMENU);
			}
		}
		case DIALOG_LANDPERMS:
		{
		    new landid = GetNearbyLand(playerid), targetid;

	        if(landid == -1 || !HasLandPerms(playerid, landid))
	        {
	            return 1;
	        }

	        if(response)
	        {
				if(sscanf(inputtext, "u", targetid))
				{
					return ShowPlayerDialog(playerid, DIALOG_LANDPERMS, DIALOG_STYLE_INPUT, "Permissions", "Please enter the name or ID of the player to take or give permissions to:", "Submit", "Back");
		        }
		        if(!IsPlayerConnected(targetid))
		        {
		            SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
		            return ShowPlayerDialog(playerid, DIALOG_LANDPERMS, DIALOG_STYLE_INPUT, "Permissions", "Please enter the name or ID of the player to take or give permissions to:", "Submit", "Back");
		        }
		        if(targetid == playerid)
				{
					SCM(playerid, COLOR_SYNTAX, "You can't give permissions to yourself.");
					return ShowPlayerDialog(playerid, DIALOG_LANDPERMS, DIALOG_STYLE_INPUT, "Permissions", "Please enter the name or ID of the player to take or give permissions to:", "Submit", "Back");
				}

		        if(pData[targetid][pLandPerms] == landid)
		        {
		            pData[targetid][pLandPerms] = -1;

		            SM(targetid, COLOR_AQUA, "%s has removed your access to their land's objects.", GetRPName(playerid));
					SM(playerid, COLOR_AQUA, "You have removed %s's access to your land's objects.", GetRPName(targetid));
				}
				else
				{
				    pData[targetid][pLandPerms] = landid;

		            SM(targetid, COLOR_AQUA, "%s has granted you access to their land's objects.", GetRPName(playerid));
					SM(playerid, COLOR_AQUA, "You have granted %s access to your land's objects.", GetRPName(targetid));
				}
			}

			ShowDialogToPlayer(playerid, DIALOG_LANDMENU);
		}
		case DIALOG_USECOOKIES:
		{
		    if(response)
		    {
				/*
				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO flags VALUES(null, %i, '%s', NOW(), '%e')", pData[targetid][pID], GetPlayerNameEx(playerid), desc);
					mysql_tquery(connectionID, queryBuffer);
				*/

				if(pData[playerid][pJailType] > 0 && listitem != 2)
				{
				    return SendClientMessage(playerid, COLOR_GREY, "You can't redeem your cookies while in prison or jail.");
				}

		        switch(listitem)
		        {
					case 0:
					{
                        if(pData[playerid][pDiamonds] < 35)
     					{
		                    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough diamonds. You can't redeem this item.");
		                }

		                pData[playerid][pDiamonds] -= 35;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i WHERE uid = %i", pData[playerid][pDiamonds], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						pData[playerid][pBoombox] = 1;
						
                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET boombox = %i WHERE uid = %i", pData[playerid][pBoombox], pData[playerid][pID]);
                        mysql_tquery(connectionID, queryBuffer);
                        
		                SendClientMessage(playerid, COLOR_AQUA, "You have redeemed 35 diamnds for {00AA00}Boombox{33CCFF}.");
					}
					case 1:
					{
					    if(pData[playerid][pDiamonds] < 10)
		                {
		                    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough diamonds. You can't redeem this item.");
		                }
	                	if(pData[playerid][pHours] < 2 || pData[playerid][pWeaponRestricted] > 0)
    					{
        					return SendClientMessage(playerid, COLOR_GREY, "You are either weapon restricted or you played less than two playing hours.");
    					}

		                pData[playerid][pDiamonds] -= 10;

		                GivePlayerWeaponEx(playerid, 24);
		                GivePlayerWeaponEx(playerid, 27);
		                GivePlayerWeaponEx(playerid, 29);
		                GivePlayerWeaponEx(playerid, 31);
		                GivePlayerWeaponEx(playerid, 34);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i WHERE uid = %i", pData[playerid][pDiamonds], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

		                SendClientMessage(playerid, COLOR_AQUA, "You have redeemed 15 diamonds for a {00AA00}Full weapon set{33CCFF}.");
					}
					case 2:
					{
					    if(pData[playerid][pDiamonds] < 100)
		                {
		                    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough diamnonds. You can't redeem this item.");
		                }

		                pData[playerid][pDiamonds] -= 100;
		                pData[playerid][pDonator] = 3;
		                pData[playerid][pVIPTime] = gettime() + 2592000;

		                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i, vippackage = 3, viptime = %i WHERE uid = %i", pData[playerid][pDiamonds], pData[playerid][pVIPTime], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendClientMessage(playerid, COLOR_AQUA, "You have redeemed 100 diamonds for {00AA00}1 month DIAMOND VIP{33CCFF}.");
					}
				}
		    }
		}
		case DIALOG_MP3PLAYER:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                ShowPlayerDialog(playerid, DIALOG_MP3URL, DIALOG_STYLE_INPUT, "Custom URL", "Please enter the URL of the stream you want to play:", "Submit", "Back");
		            }
		            case 1:
		            {
		                ShowPlayerDialog(playerid, DIALOG_MP3MUSIC, DIALOG_STYLE_INPUT, "Uploaded Music", "Please enter the name of the .mp3 file to play:\n(Use /music for a list of all music uploaded to the server.)", "Submit", "Back");
		            }
		            case 2:
		            {
						switch(pData[playerid][pMusicType])
						{
				            case MUSIC_MP3PLAYER:
				            {
				                SetMusicStream(MUSIC_MP3PLAYER, playerid, "");
				                SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s turns off their MP3 player.", GetRPName(playerid));
							}
							case MUSIC_BOOMBOX:
							{
							    SetMusicStream(MUSIC_BOOMBOX, playerid, "");
								SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s turns off their boombox.", GetRPName(playerid));
							}
							case MUSIC_VEHICLE:
							{
							    if(IsPlayerInAnyVehicle(playerid))
							    {
								    SetMusicStream(MUSIC_VEHICLE, GetPlayerVehicleID(playerid), "");
									SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s turns off the radio in the vehicle.", GetRPName(playerid));
								}
							}
						}
					}
		        }
			}
		}
		case DIALOG_MP3MUSIC:
		{
		    if(response)
		    {
		        new url[128];

		        if(isnull(inputtext))
		        {
		            return ShowPlayerDialog(playerid, DIALOG_MP3MUSIC, DIALOG_STYLE_INPUT, "Uploaded Music", "Please enter the name of the .mp3 file to play:\n(Use /music for a list of all music uploaded to the server.)", "Submit", "Back");
				}

				for(new i = 0, l = strlen(inputtext); i < l; i ++)
				{
				    switch(inputtext[i])
				    {
				        case 'A'..'Z', 'a'..'z', '0'..'9', '_', '.', '\'', ' ':
				        {
							continue;
						}
						default:
						{
						    SCM(playerid, COLOR_SYNTAX, "The name of the .mp3 contains invalid characters, please try again.");
						    return ShowPlayerDialog(playerid, DIALOG_MP3MUSIC, DIALOG_STYLE_INPUT, "Uploaded Music", "Please enter the name of the .mp3 file to play:\n(Use /musicfor a list of all music uploaded to the server.)", "Submit", "Back");
						}
				    }
				}

				format(url, sizeof(url), "http://%s/%s", SERVER_MUSIC_URL, inputtext);

				switch(pData[playerid][pMusicType])
				{
		            case MUSIC_MP3PLAYER:
		            {
		                SetMusicStream(MUSIC_MP3PLAYER, playerid, url);
        		  		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s changes the song on their MP3 player.", GetRPName(playerid));
					}
					case MUSIC_BOOMBOX:
					{
					    SetMusicStream(MUSIC_BOOMBOX, playerid, url);
						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s changes the song on their boombox.", GetRPName(playerid));
					}
					case MUSIC_VEHICLE:
					{
					    if(IsPlayerInAnyVehicle(playerid))
					    {
						    SetMusicStream(MUSIC_VEHICLE, GetPlayerVehicleID(playerid), url);
							SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s changes the song on the radio.", GetRPName(playerid));
						}
					}
				}

				SM(playerid, COLOR_AQUA, "You have started the playback of "SVRCLR"%s{CCFFFF}.", inputtext);
		    }
		    else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_MP3PLAYER);
			}
		}
		case DIALOG_MP3URL:
		{
		    if(response)
		    {
		        if(isnull(inputtext))
		        {
		            return ShowPlayerDialog(playerid, DIALOG_MP3URL, DIALOG_STYLE_INPUT, "Custom URL", "Please enter the URL of the stream you want to play:", "Submit", "Back");
          		}

          		switch(pData[playerid][pMusicType])
				{
		            case MUSIC_MP3PLAYER:
		            {
		                SetMusicStream(MUSIC_MP3PLAYER, playerid, inputtext);
        		  		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s changes the song on their MP3 player.", GetRPName(playerid));
					}
					case MUSIC_BOOMBOX:
					{
					    SetMusicStream(MUSIC_BOOMBOX, playerid, inputtext);
						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s changes the song on their boombox.", GetRPName(playerid));
					}
					case MUSIC_VEHICLE:
					{
					    if(IsPlayerInAnyVehicle(playerid))
					    {
						    SetMusicStream(MUSIC_VEHICLE, GetPlayerVehicleID(playerid), inputtext);
							SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s changes the song on the radio.", GetRPName(playerid));
						}
					}
				}
		    }
		    else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_MP3PLAYER);
			}
		}
		case DIALOG_MP3RADIO:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                ShowDialogToPlayer(playerid, DIALOG_MP3RADIOGENRES);
		            }
		            case 1:
		            {
		                ShowDialogToPlayer(playerid, DIALOG_MP3RADIOSEARCH);
		            }
		        }
		    }
		    else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_MP3PLAYER);
			}
		}
		case DIALOG_MP3RADIOGENRES:
		{
		    if(response)
		    {
		        strcpy(pData[playerid][pGenre], inputtext, 32);
		        ShowDialogToPlayer(playerid, DIALOG_MP3RADIOSUBGENRES);
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_MP3RADIO);
		    }
		}
		case DIALOG_MP3RADIOSUBGENRES:
		{
		    if(response)
		    {
		        pData[playerid][pPage] = 1;
	     		pData[playerid][pSearch] = 0;

		        strcpy(pData[playerid][pSubgenre], inputtext, 32);
	     		ShowDialogToPlayer(playerid, DIALOG_MP3RADIORESULTS);
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_MP3RADIOGENRES);
			}
		}
		case DIALOG_MP3RADIORESULTS:
		{
		    if(response)
		    {
		        if(!strcmp(inputtext, ">> Next page", true))
		        {
		            pData[playerid][pPage]++;
		            ShowDialogToPlayer(playerid, DIALOG_MP3RADIORESULTS);
		        }
		        else if(!strcmp(inputtext, "<< Go back", true) && pData[playerid][pPage] > 1)
		        {
		            pData[playerid][pPage]--;
		            ShowDialogToPlayer(playerid, DIALOG_MP3RADIORESULTS);
		        }
			}
			else
			{
			    if(pData[playerid][pSearch])
			    {
			        ShowDialogToPlayer(playerid, DIALOG_MP3RADIOSEARCH);
			    }
			    else
			    {
			        ShowDialogToPlayer(playerid, DIALOG_MP3RADIOSUBGENRES);
				}
			}
		}
		case DIALOG_MP3RADIOSEARCH:
		{
		    if(response)
		    {
		        if(strlen(inputtext) < 3)
		        {
		            SCM(playerid, COLOR_SYNTAX, "Your search query must contain 3 characters or more.");
		            return ShowDialogToPlayer(playerid, DIALOG_MP3RADIOSEARCH);
		        }

		        pData[playerid][pPage] = 1;
		        pData[playerid][pSearch] = 1;

		        strcpy(pData[playerid][pGenre], inputtext, 32);
                ShowDialogToPlayer(playerid, DIALOG_MP3RADIORESULTS);
		    }
		    else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_MP3RADIO);
			}
		}
		case DIALOG_GANGSTASH:
		{
		    if(pData[playerid][pGang] == -1)
		    {
		        return 1;
			}

		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
			            ShowDialogToPlayer(playerid, DIALOG_GANGSTASHWEAPONS1);
		            }
		            /*case 1:
		            {
		                SCM(playerid, COLOR_SYNTAX, "This feature is disabled, non-rp.");
		                //ShowDialogToPlayer(playerid, DIALOG_GANGSTASHAMMO1);
		            }*/
		            case 1:
		            {
		                ShowDialogToPlayer(playerid, DIALOG_GANGSTASHDRUGS1);
		            }
					case 2:
					{
					    pData[playerid][pSelected] = ITEM_MATERIALS;
					    ShowDialogToPlayer(playerid, DIALOG_GANGSTASHMATS);
					}
		            case 3:
		            {
		                pData[playerid][pSelected] = ITEM_CASH;
		                ShowDialogToPlayer(playerid, DIALOG_GANGSTASHCASH);
					}
		            case 4:
		            {
		                ShowDialogToPlayer(playerid, DIALOG_GCLOTHES);
					}
		        }
		    }
		}
		case DIALOG_GANGSTASHWEAPONS1:
		{
	        if(pData[playerid][pGang] == -1)
	        {
		        return 1;
		    }

		    if(response)
		    {
		        pData[playerid][pSelected] = listitem;
		        ShowPlayerDialog(playerid, DIALOG_GANGSTASHWEAPONS2, DIALOG_STYLE_LIST, "Gang Locker | Weapons", "Withdraw\nDeposit", "Select", "Back");
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGSTASH);
		    }
		}
		case DIALOG_GANGSTASHWEAPONS2:
		{
          	if(pData[playerid][pGang] == -1)
	        {
		        return 1;
		    }
		    if(response)
		    {
				if(listitem == 0)
				{
				    if(pData[playerid][pGangRank] < 1)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "You must be at least rank 1+ in order to withdraw weapons.");
		            }

				    switch(pData[playerid][pSelected])
				    {
   				        case GANGWEAPON_VEST:
				        {
				            if(pData[playerid][pGangRank] < 1)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Your rank isn't high enough to withdraw a vest.");
							}
				            if(GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_VEST] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "The gang stash doesn't have any vest left.");
				            }

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_VEST]--;
				            pData[playerid][pVest] += 1;

		                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vest = %i WHERE uid = %i", pData[playerid][pVest], pData[playerid][pID]);
		                    mysql_tquery(connectionID, queryBuffer);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_vest = weapon_vest - 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws a vest from the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) withdraws a vest from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
				        case GANGWEAPON_9MM:
				        {
				            if(pData[playerid][pGangRank] < 1)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Your rank isn't high enough to withdraw this weapon.");
							}
				            if(GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_9MM] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "The gang stash doesn't have any of this weapon left.");
				            }
				            if(PlayerHasWeapon(playerid, 22))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_9MM]--;
				            GiveWeapon(playerid, 22);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_9mm = weapon_9mm - 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws a 9mm from the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) withdraws a 9mm from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
                        case GANGWEAPON_SDPISTOL:
				        {
				            if(pData[playerid][pGangRank] < 1)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Your rank isn't high enough to withdraw this weapon.");
							}
				            if(GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SDPISTOL] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "The gang stash doesn't have any of this weapon left.");
				            }
				            if(PlayerHasWeapon(playerid, 23))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SDPISTOL]--;
				            GiveWeapon(playerid, 23);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_sdpistol = weapon_sdpistol - 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws a silenced pistol from the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) withdraws a silenced pistol from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_DEAGLE:
				        {
				            if(pData[playerid][pGangRank] < 4)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Your rank isn't high enough to withdraw this weapon.");
							}
				            if(GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_DEAGLE] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "The gang stash doesn't have any of this weapon left.");
				            }
				            if(PlayerHasWeapon(playerid, 24))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_DEAGLE]--;
				            GiveWeapon(playerid, 24);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_deagle = weapon_deagle - 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws a Desert Eagle from the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) withdraws a Desert Eagle from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_SHOTGUN:
				        {
				            if(pData[playerid][pGangRank] < 1)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Your rank isn't high enough to withdraw this weapon.");
							}
				            if(GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SHOTGUN] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "The gang stash doesn't have any of this weapon left.");
				            }
				            if(PlayerHasWeapon(playerid, 25))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SHOTGUN]--;
				            GiveWeapon(playerid, 25);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_shotgun = weapon_shotgun - 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws a shotgun from the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) withdraws a shotgun from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_SPAS12:
				        {
				            if(pData[playerid][pGangRank] < 4)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Your rank isn't high enough to withdraw this weapon.");
							}
				            if(GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SPAS12] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "The gang stash doesn't have any of this weapon left.");
				            }
				            if(PlayerHasWeapon(playerid, 27))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SPAS12]--;
				            GiveWeapon(playerid, 27);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_spas12 = weapon_spas12 - 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws a SPAS-12 from the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) withdraws a SPAS-12 from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_SAWNOFF:
				        {
				            if(pData[playerid][pGangRank] < 4)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Your rank isn't high enough to withdraw this weapon.");
							}
				            if(GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SAWNOFF] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "The gang stash doesn't have any of this weapon left.");
				            }
				            if(PlayerHasWeapon(playerid, 26))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SAWNOFF]--;
				            GiveWeapon(playerid, 26);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_sawnoff = weapon_sawnoff - 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws a sawnoff shotgun from the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) withdraws a sawnoff shotgun from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
                        case GANGWEAPON_TEC9:
				        {
				            if(pData[playerid][pGangRank] < 3)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Your rank isn't high enough to withdraw this weapon.");
							}
				            if(GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_TEC9] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "The gang stash doesn't have any of this weapon left.");
				            }
				            if(PlayerHasWeapon(playerid, 32))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_TEC9]--;
				            GiveWeapon(playerid, 32);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_tec9 = weapon_tec9 - 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws a Tec-9 from the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) withdraws a Tec-9 from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_UZI:
				        {
				            if(pData[playerid][pGangRank] < 3)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Your rank isn't high enough to withdraw this weapon.");
							}
				            if(GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_UZI] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "The gang stash doesn't have any of this weapon left.");
				            }
				            if(PlayerHasWeapon(playerid, 28))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_UZI]--;
				            GiveWeapon(playerid, 28);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_uzi = weapon_uzi - 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws a Micro Uzi from the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) withdraws a Micro Uzi from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_MP5:
				        {
				            if(pData[playerid][pGangRank] < 3)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Your rank isn't high enough to withdraw this weapon.");
							}
				            if(GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_MP5] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "The gang stash doesn't have any of this weapon left.");
				            }
				            if(PlayerHasWeapon(playerid, 29))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_MP5]--;
				            GiveWeapon(playerid, 29);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_mp5 = weapon_mp5 - 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws an MP5 from the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) withdraws an MP5 from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_AK47:
				        {
				            if(pData[playerid][pGangRank] < 4)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Your rank isn't high enough to withdraw this weapon.");
							}
				            if(GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_AK47] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "The gang stash doesn't have any of this weapon left.");
				            }
				            if(PlayerHasWeapon(playerid, 30))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_AK47]--;
				            GiveWeapon(playerid, 30);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_ak47 = weapon_ak47 - 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws an AK-47 from the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) withdraws an AK-47 from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_M4:
				        {
				            if(pData[playerid][pGangRank] < 4)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Your rank isn't high enough to withdraw this weapon.");
							}
				            if(GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_M4] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "The gang stash doesn't have any of this weapon left.");
				            }
				            if(PlayerHasWeapon(playerid, 31))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_M4]--;
				            GiveWeapon(playerid, 31);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_m4 = weapon_m4 - 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws an M4 from the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) withdraws an M4 from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_RIFLE:
				        {
				            if(pData[playerid][pGangRank] < 2)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Your rank isn't high enough to withdraw this weapon.");
							}
				            if(GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_RIFLE] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "The gang stash doesn't have any of this weapon left.");
				            }
				            if(PlayerHasWeapon(playerid, 33))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_RIFLE]--;
				            GiveWeapon(playerid, 33);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_rifle = weapon_rifle - 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws a rifle from the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) withdraws a rifle from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_SNIPER:
				        {
				            if(pData[playerid][pGangRank] < 5)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Your rank isn't high enough to withdraw this weapon.");
							}
				            if(GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SNIPER] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "The gang stash doesn't have any of this weapon left.");
				            }
				            if(PlayerHasWeapon(playerid, 34))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

							SCM(playerid, COLOR_SYNTAX, "Sniper is temporary disabled");
				            //GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SNIPER]--;
				            //GiveWeapon(playerid, 34);

				            //mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_sniper = weapon_sniper - 1 WHERE id = %i", pData[playerid][pGang]);
				            //mysql_tquery(connectionID, queryBuffer);

				            //SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws a sniper rifle from the gang stash.", GetRPName(playerid));
				            //Log_Write("log_gang", "%s (uid: %i) withdraws a sniper rifle from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_MOLOTOV:
				        {
				            if(pData[playerid][pGangRank] < 5)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Your rank isn't high enough to withdraw this weapon.");
							}
				            if(GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_MOLOTOV] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "The gang stash doesn't have any of this weapon left.");
				            }
				            if(PlayerHasWeapon(playerid, 18))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_MOLOTOV]--;
				            GiveWeapon(playerid, 18);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_molotov = weapon_molotov - 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws a molotov from the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) withdraws a molotov from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
					}
				}
				else if(listitem == 1)
		        {
                    switch(pData[playerid][pSelected])
				    {
  				        case GANGWEAPON_VEST:
				        {
							if(pData[playerid][pVest] <= 0)
							{
							    return SCM(playerid, COLOR_ERROR, "You have no vest left.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_VEST]++;
				            pData[playerid][pVest]--;

		           			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vest = %i WHERE uid = %i", pData[playerid][pVest], pData[playerid][pID]);
							mysql_tquery(connectionID, queryBuffer);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_vest = weapon_vest + 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits a vest in the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) deposits a vest in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
				        case GANGWEAPON_9MM:
				        {
				            if(!PlayerHasWeapon(playerid, 22))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You don't have this weapon.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_9MM]++;
				            RemovePlayerWeapon(playerid, 22);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_9mm = weapon_9mm + 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits a 9mm in the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) deposits a 9mm in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
                        case GANGWEAPON_SDPISTOL:
				        {
				            if(!PlayerHasWeapon(playerid, 23))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You don't have this weapon.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SDPISTOL]++;
				            RemovePlayerWeapon(playerid, 23);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_sdpistol = weapon_sdpistol + 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits a silenced pistol in the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) deposits a silenced pistol in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_DEAGLE:
				        {
				            if(!PlayerHasWeapon(playerid, 24))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You don't have this weapon.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_DEAGLE]++;
				            RemovePlayerWeapon(playerid, 24);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_deagle = weapon_deagle + 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits a Desert Eagle in the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) deposits a Desert Eagle in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_SHOTGUN:
				        {
				            if(!PlayerHasWeapon(playerid, 25))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You don't have this weapon.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SHOTGUN]++;
				            RemovePlayerWeapon(playerid, 25);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_shotgun = weapon_shotgun + 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits a shotgun in the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) deposits a shotgun in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_SPAS12:
				        {
				            if(!PlayerHasWeapon(playerid, 27))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You don't have this weapon.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SPAS12]++;
				            RemovePlayerWeapon(playerid, 27);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_spas12 = weapon_spas12 + 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits a SPAS-12 in the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) deposits a SPAS-12 in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_SAWNOFF:
				        {
				            if(!PlayerHasWeapon(playerid, 26))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You don't have this weapon.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SAWNOFF]++;
				            RemovePlayerWeapon(playerid, 26);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_sawnoff = weapon_sawnoff + 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits a sawnoff shotgun in the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) deposits a sawnoff shotgun in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
                        case GANGWEAPON_TEC9:
				        {
				            if(!PlayerHasWeapon(playerid, 32))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You don't have this weapon.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_TEC9]++;
				            RemovePlayerWeapon(playerid, 32);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_tec9 = weapon_tec9 + 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits a Tec-9 in the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) deposits a Tec-9 in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_UZI:
				        {
				            if(!PlayerHasWeapon(playerid, 28))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You don't have this weapon.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_UZI]++;
				            RemovePlayerWeapon(playerid, 28);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_uzi = weapon_uzi + 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits a Micro Uzi in the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) deposits a Micro Uzi in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_MP5:
				        {
				            if(!PlayerHasWeapon(playerid, 29))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You don't have this weapon.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_MP5]++;
				            RemovePlayerWeapon(playerid, 29);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_mp5 = weapon_mp5 + 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits an MP5 in the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) deposits an MP5 in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_AK47:
				        {
				            if(!PlayerHasWeapon(playerid, 30))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You don't have this weapon.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_AK47]++;
				            RemovePlayerWeapon(playerid, 30);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_ak47 = weapon_ak47 + 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits an AK-47 in the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) deposits an AK-47 in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_M4:
				        {
				            if(!PlayerHasWeapon(playerid, 31))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You don't have this weapon.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_M4]++;
				            RemovePlayerWeapon(playerid, 31);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_m4 = weapon_m4 + 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits an M4 in the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) deposits an M4 in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_RIFLE:
				        {
				            if(!PlayerHasWeapon(playerid, 33))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You don't have this weapon.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_RIFLE]++;
				            RemovePlayerWeapon(playerid, 33);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_rifle = weapon_rifle + 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits a rifle in the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) deposits a rifle in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_SNIPER:
				        {
				            if(!PlayerHasWeapon(playerid, 34))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You don't have this weapon.");
							}

							SCM(playerid, COLOR_SYNTAX, "Sniper is temporary disabled");
				            //GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SNIPER]++;
				           // RemovePlayerWeapon(playerid, 34);

				            //mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_sniper = weapon_sniper + 1 WHERE id = %i", pData[playerid][pGang]);
				            //mysql_tquery(connectionID, queryBuffer);

				            //SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits a sniper rifle in the gang stash.", GetRPName(playerid));
				            //Log_Write("log_gang", "%s (uid: %i) deposits a sniper rifle in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_MOLOTOV:
				        {
				            if(!PlayerHasWeapon(playerid, 18))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You don't have this weapon.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_MOLOTOV]++;
				            RemovePlayerWeapon(playerid, 18);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_molotov = weapon_molotov + 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits a molotov in the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) deposits a molotov in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
					}
				}
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGSTASHWEAPONS1);
			}
		}
		case DIALOG_GANGSTASHDRUGS1:
		{
		    if(pData[playerid][pGang] == -1)
		    {
		        return 1;
			}

		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0: pData[playerid][pSelected] = ITEM_WEED;
		            case 1: pData[playerid][pSelected] = ITEM_COCAINE;
		            case 2: pData[playerid][pSelected] = ITEM_METH;
		            case 3: pData[playerid][pSelected] = ITEM_PAINKILLERS;
		        }

				ShowDialogToPlayer(playerid, DIALOG_GANGSTASHDRUGS2);
		    }
			else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_GANGSTASH);
			}
		}
		case DIALOG_GANGSTASHDRUGS2:
		{
		    if(pData[playerid][pGang] == -1)
		    {
		        return 1;
			}

		    if(response)
		    {
		        if(listitem == 0)
		        {
		            if(pData[playerid][pGangRank] < 2)
		            {
		                return SCM(playerid, COLOR_SYNTAX, "You must be at least rank 2+ in order to withdraw drugs.");
		            }

		            ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
		        }
		        else if(listitem == 1)
		        {
		            ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
		        }
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGSTASHDRUGS1);
			}
		}
		case DIALOG_GANGSTASHAMMO1:
		{
		    if(pData[playerid][pGang] == -1)
		    {
		        return 1;
			}

		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0: pData[playerid][pSelected] = ITEM_HPAMMO;
		            case 1: pData[playerid][pSelected] = ITEM_POISONAMMO;
		            case 2: pData[playerid][pSelected] = ITEM_FMJAMMO;
		        }

				ShowDialogToPlayer(playerid, DIALOG_GANGSTASHAMMO2);
		    }
			else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_GANGSTASH);
			}
		}
		case DIALOG_GANGSTASHAMMO2:
		{
		    if(pData[playerid][pGang] == -1)
		    {
		        return 1;
			}

		    if(response)
		    {
		        if(listitem == 0)
		        {
		            if(pData[playerid][pGangRank] < 5)
		            {
		                return SCM(playerid, COLOR_SYNTAX, "You must be at least rank 5+ in order to withdraw ammo.");
		            }

		            ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
		        }
		        else if(listitem == 1)
		        {
		            ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
		        }
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGSTASHAMMO1);
			}
		}
		case DIALOG_GANGWITHDRAW:
		{
		    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 3)
		    {
		        return 1;
			}

			if(response)
			{
			    new amount;

			    if(sscanf(inputtext, "i", amount))
			    {
			        return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
				}

				switch(pData[playerid][pSelected])
				{
				    case ITEM_WEED:
				    {
				        if(amount < 1 || amount > GangInfo[pData[playerid][pGang]][gPot])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}
						if(pData[playerid][pPot] + amount > GetPlayerCapacity(CAPACITY_WEED))
						{
						    SM(playerid, COLOR_SYNTAX, "You currently have %i/%i pot. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pPot], GetPlayerCapacity(CAPACITY_WEED));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}

						GangInfo[pData[playerid][pGang]][gPot] -= amount;
						pData[playerid][pPot] += amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET pot = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gPot], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", pData[playerid][pPot], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws some pot from the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have withdrawn %i grams of pot from the gang stash.", amount);
						Log_Write("log_gang", "%s (uid: %i) withdraws %i grams of pot from the gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
					}
					case ITEM_COCAINE:
				    {
				        if(amount < 1 || amount > GangInfo[pData[playerid][pGang]][gCrack])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}
						if(pData[playerid][pCrack] + amount > GetPlayerCapacity(CAPACITY_COCAINE))
						{
						    SM(playerid, COLOR_SYNTAX, "You currently have %i/%i Crack. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pCrack], GetPlayerCapacity(CAPACITY_COCAINE));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}

						GangInfo[pData[playerid][pGang]][gCrack] -= amount;
						pData[playerid][pCrack] += amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET crack = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gCrack], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", pData[playerid][pCrack], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws some Crack from the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have withdrawn %i grams of Crack from the gang stash.", amount);
						Log_Write("log_gang", "%s (uid: %i) withdraws %i grams of Crack from the gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
					}
                    case ITEM_METH:
				    {
				        if(amount < 1 || amount > GangInfo[pData[playerid][pGang]][gMeth])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}
						if(pData[playerid][pMeth] + amount > GetPlayerCapacity(CAPACITY_METH))
						{
						    SM(playerid, COLOR_SYNTAX, "You currently have %i/%i meth. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pMeth], GetPlayerCapacity(CAPACITY_METH));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}

						GangInfo[pData[playerid][pGang]][gMeth] -= amount;
						pData[playerid][pMeth] += amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET meth = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gMeth], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", pData[playerid][pMeth], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws some meth from the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have withdrawn %i grams of meth from the gang stash.", amount);
						Log_Write("log_gang", "%s (uid: %i) withdraws %i grams of meth from the gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
					}
					case ITEM_PAINKILLERS:
				    {
				        if(amount < 1 || amount > GangInfo[pData[playerid][pGang]][gPainkillers])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}
						if(pData[playerid][pPainkillers] + amount > GetPlayerCapacity(CAPACITY_PAINKILLERS))
						{
						    SM(playerid, COLOR_SYNTAX, "You currently have %i/%i painkillers. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pPainkillers], GetPlayerCapacity(CAPACITY_PAINKILLERS));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}

						GangInfo[pData[playerid][pGang]][gPainkillers] -= amount;
						pData[playerid][pPainkillers] += amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET painkillers = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gPainkillers], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", pData[playerid][pPainkillers], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws some painkillers from the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have withdrawn %i painkillers from the gang stash.", amount);
						Log_Write("log_gang", "%s (uid: %i) withdraws %i painkillers from the gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
					}
					case ITEM_MATERIALS:
				    {
				        if(amount < 1 || amount > GangInfo[pData[playerid][pGang]][gMaterials])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}
						if(pData[playerid][pMaterials] + amount > GetPlayerCapacity(CAPACITY_MATERIALS))
						{
						    SM(playerid, COLOR_SYNTAX, "You currently have %i/%i materials. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pMaterials], GetPlayerCapacity(CAPACITY_MATERIALS));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}

						GangInfo[pData[playerid][pGang]][gMaterials] -= amount;
						pData[playerid][pMaterials] += amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET materials = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gMaterials], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", pData[playerid][pMaterials], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws some materials from the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have withdrawn %i materials from the gang stash.", amount);
						Log_Write("log_gang", "%s (uid: %i) withdraws %i materials from the gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
					}
					case ITEM_CASH:
				    {
				        if(amount < 1 || amount > GangInfo[pData[playerid][pGang]][gCash])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}

						GangInfo[pData[playerid][pGang]][gCash] -= amount;
						GivePlayerCash(playerid, amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET cash = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gCash], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws some cash from the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have withdrawn $%i from the gang stash.", amount);
						Log_Write("log_gang", "%s (uid: %i) withdraws $%i from the gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
					}
					case ITEM_HPAMMO:
				    {
				        if(amount < 1 || amount > GangInfo[pData[playerid][pGang]][gHPAmmo])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}
						if(pData[playerid][pHPAmmo] + amount > GetPlayerCapacity(CAPACITY_HPAMMO))
						{
						    SM(playerid, COLOR_SYNTAX, "You currently have %i/%i HP ammo. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pHPAmmo], GetPlayerCapacity(CAPACITY_HPAMMO));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}

						GangInfo[pData[playerid][pGang]][gHPAmmo] -= amount;
						SetWeaponAmmo(playerid, AMMO_HP, pData[playerid][pHPAmmo] + amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET hpammo = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gHPAmmo], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws some hollow point ammo from the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have withdrawn %i rounds of hollow point ammo from the gang stash.", amount);
						Log_Write("log_gang", "%s (uid: %i) withdraws %i hollow point ammo from the gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
					}
					case ITEM_POISONAMMO:
				    {
				        if(amount < 1 || amount > GangInfo[pData[playerid][pGang]][gPoisonAmmo])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}
						if(pData[playerid][pPoisonAmmo] + amount > GetPlayerCapacity(CAPACITY_POISONAMMO))
						{
						    SM(playerid, COLOR_SYNTAX, "You currently have %i/%i poison ammo. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pPoisonAmmo], GetPlayerCapacity(CAPACITY_POISONAMMO));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}

						GangInfo[pData[playerid][pGang]][gPoisonAmmo] -= amount;
						SetWeaponAmmo(playerid, AMMO_POISON, pData[playerid][pPoisonAmmo] + amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET poisonammo = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gPoisonAmmo], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws some poison tip ammo from the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have withdrawn %i rounds of poison tip ammo from the gang stash.", amount);
						Log_Write("log_gang", "%s (uid: %i) withdraws %i poison tip ammo from the gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
					}
					case ITEM_FMJAMMO:
				    {
				        if(amount < 1 || amount > GangInfo[pData[playerid][pGang]][gFMJAmmo])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}
						if(pData[playerid][pFMJAmmo] + amount > GetPlayerCapacity(CAPACITY_FMJAMMO))
						{
						    SM(playerid, COLOR_SYNTAX, "You currently have %i/%i FMJ ammo. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pFMJAmmo], GetPlayerCapacity(CAPACITY_FMJAMMO));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}

						GangInfo[pData[playerid][pGang]][gFMJAmmo] -= amount;
						SetWeaponAmmo(playerid, AMMO_FMJ, pData[playerid][pFMJAmmo] + amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET fmjammo = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gFMJAmmo], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws some full metal jacket ammo from the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have withdrawn %i rounds of full metal jacket ammo from the gang stash.", amount);
						Log_Write("log_gang", "%s (uid: %i) withdraws %i FMJ ammo from the gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
					}
				}
			}
			else
			{
			    if(pData[playerid][pSelected] == ITEM_MATERIALS) {
			        ShowDialogToPlayer(playerid, DIALOG_GANGSTASHMATS);
				} else if(pData[playerid][pSelected] == ITEM_CASH) {
					ShowDialogToPlayer(playerid, DIALOG_GANGSTASHCASH);
				} else if(ITEM_HPAMMO <= pData[playerid][pSelected] <= ITEM_FMJAMMO) {
					ShowDialogToPlayer(playerid, DIALOG_GANGSTASHAMMO2);
				} else {
				    ShowDialogToPlayer(playerid, DIALOG_GANGSTASHDRUGS2);
				}
			}
		}
		case DIALOG_GANGDEPOSIT:
		{
		    if(pData[playerid][pGang] == -1)
		    {
		        return 1;
			}

			if(response)
			{
			    new amount;

			    if(sscanf(inputtext, "i", amount))
			    {
			        return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
				}

				switch(pData[playerid][pSelected])
				{
				    case ITEM_WEED:
				    {
				        if(amount < 1 || amount > pData[playerid][pPot])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}
						if(GangInfo[pData[playerid][pGang]][gPot] + amount > GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_WEED))
						{
						    SM(playerid, COLOR_SYNTAX, "The gang stash can't contain more than %i grams of pot.", GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_WEED));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}

						GangInfo[pData[playerid][pGang]][gPot] += amount;
						pData[playerid][pPot] -= amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET pot = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gPot], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", pData[playerid][pPot], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits some pot in the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have deposited %i grams of pot in the gang stash.", amount);
						Log_Write("log_gang", "%s (uid: %i) deposits %i grams of pot in the gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
					}
					case ITEM_COCAINE:
				    {
				        if(amount < 1 || amount > pData[playerid][pCrack])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}
						if(GangInfo[pData[playerid][pGang]][gCrack] + amount > GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_COCAINE))
						{
						    SM(playerid, COLOR_SYNTAX, "The gang stash can't contain more than %i grams of Crack.", GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_COCAINE));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}

						GangInfo[pData[playerid][pGang]][gCrack] += amount;
						pData[playerid][pCrack] -= amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET crack = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gCrack], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", pData[playerid][pCrack], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits some Crack in the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have deposited %i grams of Crack in the gang stash.", amount);
						Log_Write("log_gang", "%s (uid: %i) deposits %i grams of Crack in the gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
					}
                    case ITEM_METH:
				    {
				        if(amount < 1 || amount > pData[playerid][pMeth])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}
						if(GangInfo[pData[playerid][pGang]][gMeth] + amount > GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_METH))
						{
						    SM(playerid, COLOR_SYNTAX, "The gang stash can't contain more than %i grams of meth.", GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_METH));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}

						GangInfo[pData[playerid][pGang]][gMeth] += amount;
						pData[playerid][pMeth] -= amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET meth = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gMeth], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", pData[playerid][pMeth], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits some meth in the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have deposited %i grams of meth in the gang stash.", amount);
						Log_Write("log_gang", "%s (uid: %i) deposits %i grams of meth in the gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
					}
					case ITEM_PAINKILLERS:
				    {
				        if(amount < 1 || amount > pData[playerid][pPainkillers])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}
						if(GangInfo[pData[playerid][pGang]][gPainkillers] + amount > GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_PAINKILLERS))
						{
						    SM(playerid, COLOR_SYNTAX, "The gang stash can't contain more than %i painkillers.", GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_PAINKILLERS));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}

						GangInfo[pData[playerid][pGang]][gPainkillers] += amount;
						pData[playerid][pPainkillers] -= amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET painkillers = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gPainkillers], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", pData[playerid][pPainkillers], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits some painkillers in the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have deposited %i painkillers in the gang stash.", amount);
						Log_Write("log_gang", "%s (uid: %i) deposits %i painkillers in the gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
					}
					case ITEM_MATERIALS:
				    {
				        if(amount < 1 || amount > pData[playerid][pMaterials])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}
						if(GangInfo[pData[playerid][pGang]][gMaterials] + amount > GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_MATERIALS))
						{
						    SM(playerid, COLOR_SYNTAX, "The gang stash can't contain more than %i materials.", GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_MATERIALS));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}

						GangInfo[pData[playerid][pGang]][gMaterials] += amount;
						pData[playerid][pMaterials] -= amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET materials = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gMaterials], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", pData[playerid][pMaterials], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits some materials in the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have deposited %i materials in the gang stash.", amount);
						Log_Write("log_gang", "%s (uid: %i) deposits %i materials in the gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
					}
					case ITEM_CASH:
				    {
				        if(amount < 1 || amount > pData[playerid][pCash])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}
						if(GangInfo[pData[playerid][pGang]][gCash] + amount > GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_CASH))
						{
							SM(playerid, COLOR_SYNTAX, "The gang stash can't contain more than $%i.", GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_CASH));
							return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}

						GangInfo[pData[playerid][pGang]][gCash] += amount;
						GivePlayerCash(playerid, -amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET cash = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gCash], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits some cash in the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have deposited $%i in the gang stash.", amount);
						Log_Write("log_gang", "%s (uid: %i) deposited $%i in the gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
					}
					case ITEM_HPAMMO:
				    {
				        if(amount < 1 || amount > pData[playerid][pHPAmmo])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}
						if(GangInfo[pData[playerid][pGang]][gHPAmmo] + amount > GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_HPAMMO))
						{
							SM(playerid, COLOR_SYNTAX, "The gang stash can't contain more than %i rounds of hollow point ammo.", GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_HPAMMO));
							return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}

						GangInfo[pData[playerid][pGang]][gHPAmmo] += amount;
						SetWeaponAmmo(playerid, AMMO_HP, pData[playerid][pHPAmmo] - amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET hpammo = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gHPAmmo], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits some hollow point ammo in the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have deposited %i rounds of hollow point ammo in the gang stash.", amount);
						Log_Write("log_gang", "%s (uid: %i) deposits %i hollow point ammo in the gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
					}
					case ITEM_POISONAMMO:
				    {
				        if(amount < 1 || amount > pData[playerid][pPoisonAmmo])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}
						if(GangInfo[pData[playerid][pGang]][gPoisonAmmo] + amount > GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_POISONAMMO))
						{
							SM(playerid, COLOR_SYNTAX, "The gang stash can't contain more than %i rounds of poison tip ammo.", GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_POISONAMMO));
							return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}

						GangInfo[pData[playerid][pGang]][gPoisonAmmo] += amount;
						SetWeaponAmmo(playerid, AMMO_POISON, pData[playerid][pPoisonAmmo] - amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET poisonammo = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gPoisonAmmo], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits some poison tip ammo in the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have deposited %i rounds of poison tip ammo in the gang stash.", amount);
						Log_Write("log_gang", "%s (uid: %i) deposits %i poison tip ammo in the gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
					}
					case ITEM_FMJAMMO:
				    {
				        if(amount < 1 || amount > pData[playerid][pFMJAmmo])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}
						if(GangInfo[pData[playerid][pGang]][gFMJAmmo] + amount > GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_FMJAMMO))
						{
							SM(playerid, COLOR_SYNTAX, "The gang stash can't contain more than %i rounds of FMJ ammo.", GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_FMJAMMO));
							return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}

						GangInfo[pData[playerid][pGang]][gFMJAmmo] += amount;
						SetWeaponAmmo(playerid, AMMO_FMJ, pData[playerid][pFMJAmmo] - amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET fmjammo = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gFMJAmmo], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits some full metal jacket ammo in the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have deposited %i rounds of full metal jacket ammo in the gang stash.", amount);
						Log_Write("log_gang", "%s (uid: %i) deposits %i FMJ ammo in the gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
					}
				}
			}
			else
			{
				if(pData[playerid][pSelected] == ITEM_MATERIALS) {
			        ShowDialogToPlayer(playerid, DIALOG_GANGSTASHMATS);
				} else if(pData[playerid][pSelected] == ITEM_CASH) {
					ShowDialogToPlayer(playerid, DIALOG_GANGSTASHCASH);
				} else if(ITEM_HPAMMO <= pData[playerid][pSelected] <= ITEM_FMJAMMO) {
					ShowDialogToPlayer(playerid, DIALOG_GANGSTASHAMMO2);
				} else {
				    ShowDialogToPlayer(playerid, DIALOG_GANGSTASHDRUGS2);
				}
			}
		}
		case DIALOG_GANGSTASHMATS:
		{
		    if(response)
		    {
		        if(listitem == 0)
				{
				    if(pData[playerid][pGangRank] < 5)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "You must be at least rank 5+ in order to withdraw materials.");
		            }

					ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
				}
				else if(listitem == 1)
				{
					ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
				}
			}
		    else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_GANGSTASH);
		    }
		}
		case DIALOG_GANGSTASHCASH:
		{
		    if(response)
		    {
		        if(listitem == 0)
				{
				    if(pData[playerid][pGangRank] < 6)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "You must be at least rank 6+ in order to withdraw cash.");
		            }

					ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
				}
				else if(listitem == 1)
				{
					ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
				}
			}
		    else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_GANGSTASH);
		    }
		}
		case DIALOG_GANGSKINS:
		{
		    if(pData[playerid][pGang] >= 0)
		    {
		        if(response)
		        {
					new index = pData[playerid][pSkinSelected] + 1;

					if(index >= MAX_GANG_SKINS)
					{
					    // When the player is shown the dialog for the first time, their skin isn't chnaged until they click >> Next.
					    SetPlayerSkin(playerid, pData[playerid][pSkin]);
					    pData[playerid][pSkinSelected] = -1;
					}
					else
					{
					    // Find the next skin in the array.
						for(new i = index; i < MAX_GANG_SKINS; i ++)
						{
						    if(GangInfo[pData[playerid][pGang]][gSkins][i] != 0)
						    {
						        SetPlayerSkin(playerid, GangInfo[pData[playerid][pGang]][gSkins][i]);
						        pData[playerid][pSkinSelected] = i;
						        break;
					        }
		                }

		                if(index == pData[playerid][pSkinSelected] + 1)
		                {
		                    // Looks like there was no skin found. So, we'll go back to the very first valid skin in the skin array.
		                    for(new i = 0; i < MAX_GANG_SKINS; i ++)
							{
						    	if(GangInfo[pData[playerid][pGang]][gSkins][i] != 0)
						    	{
		                            SetPlayerSkin(playerid, GangInfo[pData[playerid][pGang]][gSkins][i]);
						        	pData[playerid][pSkinSelected] = i;
						        	break;
								}
							}
		                }
		            }

		            ShowPlayerDialog(playerid, DIALOG_GANGSKINS, DIALOG_STYLE_MSGBOX, "Skin selection", "Press "SVRCLR">> Next{A9C4E4} to browse through available gang skins.", ">> Next", "Confirm");
		        }
		        else
		        {
		            pData[playerid][pSkin] = GetPlayerSkin(playerid);
		            pData[playerid][pSkinSelected] = -1;

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET skin = %i WHERE uid = %i", pData[playerid][pSkin], pData[playerid][pID]);
		            mysql_tquery(connectionID, queryBuffer);

		            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s changes their clothes.", GetRPName(playerid));
				}
		    }
		}
		case DIALOG_GANGFINDCAR:
		{
		    if(response)
		    {
		        new count, garageid;

		        for(new i = 1; i < MAX_VEHICLES; i ++)
			 	{
			 	    if((VehicleInfo[i][vID] > 0 && VehicleInfo[i][vGang] == pData[playerid][pGang]) && (count++ == listitem))
			 	    {
                        pData[playerid][pCP] = CHECKPOINT_MISC;

			            if((garageid = GetVehicleGarage(i)) >= 1)
			            {
			                SetPlayerCheckpoint(playerid, GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ], 3.0);
			                SM(playerid, COLOR_YELLOW, "** This %s is located in a garage. Checkpoint marked at the garage's location.", GetVehicleName(i));
			            }
			            else
			            {
			                new
			                    Float:x,
			                    Float:y,
			                    Float:z;

			                GetVehiclePos(i, x, y, z);
			                SetPlayerCheckpoint(playerid, x, y, z, 3.0);
			                SM(playerid, COLOR_YELLOW, "** This %s is located in %s. Checkpoint marked at the location.", GetVehicleName(i), GetZoneName(x, y, z));
			            }

			            return 1;
		            }
				}
			}
		}
		case DIALOG_GANGPOINTSHOP:
		{
		    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 6)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                if(GangInfo[pData[playerid][pGang]][gPoints] < 500)
		                {
		                    return SCM(playerid, COLOR_SYNTAX, "Your gang doesn't have enough points.");
						}
						if(pData[playerid][pCash] < 50000)
						{
						    return SCM(playerid, COLOR_SYNTAX, "You need $50000 on hand to purchase this upgrade.");
						}
						if(GangInfo[pData[playerid][pGang]][gDrugDealer])
						{
						    return SCM(playerid, COLOR_SYNTAX, "Your gang already has this upgrade.");
						}

						GangInfo[pData[playerid][pGang]][gDrugDealer] = 1;
						GangInfo[pData[playerid][pGang]][gDrugX] = 0.0;
						GangInfo[pData[playerid][pGang]][gDrugY] = 0.0;
						GangInfo[pData[playerid][pGang]][gDrugZ] = 0.0;
						GangInfo[pData[playerid][pGang]][gDrugPot] = 0;
						GangInfo[pData[playerid][pGang]][gDrugMeth] = 0;
						GangInfo[pData[playerid][pGang]][gDrugCrack] = 0;
						GangInfo[pData[playerid][pGang]][gDrugPrices][0] = 500;
						GangInfo[pData[playerid][pGang]][gDrugPrices][1] = 1000;
						GangInfo[pData[playerid][pGang]][gDrugPrices][2] = 1500;
						GangInfo[pData[playerid][pGang]][gPoints] -= 500;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drugdealer = 1, drug_x = 0.0, drug_y = 0.0, drug_z = 0.0, drugpot = 0, drugcrack = 0, drugmeth = 0, pot_price = 500, crack_price = 1000, meth_price = 1500, points = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gPoints], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						GivePlayerCash(playerid, -50000);
						SCM(playerid, COLOR_AQUA, "You have spent 500 GP & $50000 on an "SVRCLR"NPC drug dealer{CCFFFF}. '/gang npc' to edit your drug dealer.");
						Log_Write("log_gang", "%s (uid: %i) spent 500 GP & $50000 on an NPC drug dealer for %s (id: %i).", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
					}
					case 1:
		            {
		                if(GangInfo[pData[playerid][pGang]][gPoints] < 500)
		                {
		                    return SCM(playerid, COLOR_SYNTAX, "Your gang doesn't have enough points.");
						}
						if(pData[playerid][pCash] < 50000)
						{
						    return SCM(playerid, COLOR_SYNTAX, "You need $50000 on hand to purchase this upgrade.");
						}
						if(GangInfo[pData[playerid][pGang]][gArmsDealer])
						{
						    return SCM(playerid, COLOR_SYNTAX, "Your gang already has this upgrade.");
						}

						GangInfo[pData[playerid][pGang]][gArmsDealer] = 1;
						GangInfo[pData[playerid][pGang]][gArmsX] = 0.0;
						GangInfo[pData[playerid][pGang]][gArmsY] = 0.0;
						GangInfo[pData[playerid][pGang]][gArmsZ] = 0.0;
						GangInfo[pData[playerid][pGang]][gArmsMaterials] = 0;
						GangInfo[pData[playerid][pGang]][gPoints] -= 500;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsdealer = 1, arms_x = 0.0, arms_y = 0.0, arms_z = 0.0, armsmaterials = 0, points = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gPoints], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						GivePlayerCash(playerid, -50000);
						SCM(playerid, COLOR_AQUA, "You have spent 500 GP & $50000 on an "SVRCLR"NPC arms dealer{CCFFFF}. '/gang npc' to edit your arms dealer.");
						Log_Write("log_gang", "%s (uid: %i) spent 500 GP & $50000 on an NPC arm dealer for %s (id: %i).", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
					}
					case 2:
					{
					    switch(GangInfo[pData[playerid][pGang]][gLevel])
					    {
					        case 1:
					        {
					            if(GangInfo[pData[playerid][pGang]][gPoints] < 6000)
				                {
				                    return SCM(playerid, COLOR_SYNTAX, "Your gang doesn't have enough points.");
								}
								if(pData[playerid][pCash] < 75000)
								{
								    return SCM(playerid, COLOR_SYNTAX, "You need $75000 on hand to purchase this upgrade.");
								}

								GangInfo[pData[playerid][pGang]][gLevel] = 2;
								GangInfo[pData[playerid][pGang]][gPoints] -= 6000;

								mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET level = 2, points = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gPoints], pData[playerid][pGang]);
								mysql_tquery(connectionID, queryBuffer);

								GivePlayerCash(playerid, -75000);
								ReloadGang(pData[playerid][pGang]);

								SM(playerid, COLOR_YELLOW, "You have spent 6000 GP & $75000 for gang level 2/3. Your gang can now have %i members & %i gang vehicles.", GetGangMemberLimit(pData[playerid][pGang]), GetGangVehicleLimit(pData[playerid][pGang]));
								SCM(playerid, COLOR_YELLOW, "Your capacity for items in your gang stash has also been increased. Access your gang stash to learn more!");

								Log_Write("log_gang", "%s (uid: %i) spent 6000 GP & $75000 for gang level 2/3 for %s (id: %i).", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
							}
							case 2:
					        {
					            if(GangInfo[pData[playerid][pGang]][gPoints] < 12000)
				                {
				                    return SCM(playerid, COLOR_SYNTAX, "Your gang doesn't have enough points.");
								}
								if(pData[playerid][pCash] < 100000)
								{
								    return SCM(playerid, COLOR_SYNTAX, "You need $100000 on hand to purchase this upgrade.");
								}

								GangInfo[pData[playerid][pGang]][gLevel] = 3;
								GangInfo[pData[playerid][pGang]][gPoints] -= 12000;

								mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET level = 3, points = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gPoints], pData[playerid][pGang]);
								mysql_tquery(connectionID, queryBuffer);

								GivePlayerCash(playerid, -100000);
								ReloadGang(pData[playerid][pGang]);

								SM(playerid, COLOR_YELLOW, "You have spent 12000 GP & $100000 for gang level 3/3. Your gang can now have %i members & %i gang vehicles.", GetGangMemberLimit(pData[playerid][pGang]), GetGangVehicleLimit(pData[playerid][pGang]));
								SCM(playerid, COLOR_YELLOW, "Your capacity for items in your gang stash has also been increased. Access your gang stash to learn more!");

								Log_Write("log_gang", "%s (uid: %i) spent 12000 GP & $100000 for gang level 3/3 for %s (id: %i).", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
							}
						}
					}
		        }
		    }
		}
		case DIALOG_GANGARMSPRICES:
		{
		    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 5)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        pData[playerid][pSelected] = listitem;
		        ShowPlayerDialog(playerid, DIALOG_GANGARMSPRICE, DIALOG_STYLE_INPUT, "Arms dealer | Prices", "Enter the new price for this item:", "Submit", "Back");
		    }
		    else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_GANGARMSEDIT);
			}
		}
		case DIALOG_GANGARMSPRICE:
		{
		    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 5)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        new amount;

		        if(sscanf(inputtext, "i", amount))
		        {
		            return ShowPlayerDialog(playerid, DIALOG_GANGARMSPRICE, DIALOG_STYLE_INPUT, "Arms dealer | Prices", "Enter the new price for this item", "Submit", "Back");
				}
				if(amount < 0)
				{
				    SCM(playerid, COLOR_SYNTAX, "The amount can't be below $0.");
				    return ShowPlayerDialog(playerid, DIALOG_GANGARMSPRICE, DIALOG_STYLE_INPUT, "Arms dealer | Prices", "Enter the new price for this item", "Submit", "Back");
				}

				GangInfo[pData[playerid][pGang]][gArmsPrices][pData[playerid][pSelected]] = amount;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsprice_%i = %i WHERE id = %i", pData[playerid][pSelected] + 1, amount, pData[playerid][pGang]);
				mysql_tquery(connectionID, queryBuffer);

				if(pData[playerid][pSelected] == 0) {
				    SM(playerid, COLOR_AQUA, "You have set the price of "SVRCLR"Micro Uzi{CCFFFF} to $%i.", amount);
		        } else if(pData[playerid][pSelected] == 1) {
				    SM(playerid, COLOR_AQUA, "You have set the price of "SVRCLR"Tec-9{CCFFFF} to $%i.", amount);
		        } else if(pData[playerid][pSelected] == 2) {
				    SM(playerid, COLOR_AQUA, "You have set the price of "SVRCLR"MP5{CCFFFF} to $%i.", amount);
		        } else if(pData[playerid][pSelected] == 3) {
				    SM(playerid, COLOR_AQUA, "You have set the price of "SVRCLR"Desert Eagle{CCFFFF} to $%i.", amount);
		        } else if(pData[playerid][pSelected] == 4) {
				    SM(playerid, COLOR_AQUA, "You have set the price of "SVRCLR"Molotov{CCFFFF} to $%i.", amount);
		        } else if(pData[playerid][pSelected] == 5) {
				    SM(playerid, COLOR_AQUA, "You have set the price of "SVRCLR"AK-47{CCFFFF} to $%i.", amount);
		        } else if(pData[playerid][pSelected] == 6) {
				    SM(playerid, COLOR_AQUA, "You have set the price of "SVRCLR"M4{CCFFFF} to $%i.", amount);
		        } else if(pData[playerid][pSelected] == 7) {
				    SM(playerid, COLOR_AQUA, "You have set the price of "SVRCLR"Sniper{CCFFFF} to $%i.", amount);
		        } else if(pData[playerid][pSelected] == 8) {
				    SM(playerid, COLOR_AQUA, "You have set the price of "SVRCLR"Sawnoff Shotgun{CCFFFF} to $%i.", amount);
		        } else if(pData[playerid][pSelected] == 9) {
				    SM(playerid, COLOR_AQUA, "You have set the price of "SVRCLR"Hollow Point Ammo{CCFFFF} to $%i.", amount);
		        } else if(pData[playerid][pSelected] == 10) {
				    SM(playerid, COLOR_AQUA, "You have set the price of "SVRCLR"Poison Tip Ammo{CCFFFF} to $%i.", amount);
		        } else if(pData[playerid][pSelected] == 11) {
				    SM(playerid, COLOR_AQUA, "You have set the price of "SVRCLR"FMJ Ammo{CCFFFF} to $%i.", amount);
		        }
		    }

		    ShowDialogToPlayer(playerid, DIALOG_GANGARMSPRICES);
		}
		case DIALOG_GANGARMSDEALER:
		{
		    if(!IsPlayerInRangeOfPoint(playerid, 3.0, GangInfo[pData[playerid][pDealerGang]][gArmsX], GangInfo[pData[playerid][pDealerGang]][gArmsY], GangInfo[pData[playerid][pDealerGang]][gArmsZ]))
		    {
		        return 1;
			}

			if(response)
			{
			    if(listitem == 0)
			    {
					ShowDialogToPlayer(playerid, DIALOG_GANGARMSWEAPONS);
				}
				else if(listitem == 1)
				{
				    ShowDialogToPlayer(playerid, DIALOG_GANGARMSAMMO);
				}
				else if(listitem == 2)
				{
				    if(pData[playerid][pGang] != pData[playerid][pDealerGang])
				    {
				        return SCM(playerid, COLOR_SYNTAX, "This arms dealer doesn't belong to your gang.");
				    }
				    if(pData[playerid][pGangRank] < 6)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "You need to be rank 6+ in order to edit.");
					}

					ShowDialogToPlayer(playerid, DIALOG_GANGARMSEDIT);
				}
			}
		}
		case DIALOG_GANGARMSWEAPONS:
		{
		    if(!IsPlayerInRangeOfPoint(playerid, 3.0, GangInfo[pData[playerid][pDealerGang]][gArmsX], GangInfo[pData[playerid][pDealerGang]][gArmsY], GangInfo[pData[playerid][pDealerGang]][gArmsZ]))
		    {
		        return 1;
			}

			if(response)
			{
			    switch(listitem)
			    {
			        case 0:
			        {
			            if(GangInfo[pData[playerid][pDealerGang]][gArmsMaterials] < 500)
			            {
			                return SCM(playerid, COLOR_SYNTAX, "This gang's arms dealer doesn't have enough materials for this weapon.");
						}
						if(pData[playerid][pCash] < GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem])
						{
						    return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this weapon.");
			            }

			            GangInfo[pData[playerid][pDealerGang]][gArmsMaterials] -= 500;
			            GangInfo[pData[playerid][pDealerGang]][gCash] += GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem];

			            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsmaterials = %i, cash = %i WHERE id = %i", GangInfo[pData[playerid][pDealerGang]][gArmsMaterials], GangInfo[pData[playerid][pDealerGang]][gCash], pData[playerid][pDealerGang]);
			            mysql_tquery(connectionID, queryBuffer);

			            GivePlayerCash(playerid, -GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			            GiveWeapon(playerid, 28);

			            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the arms dealer and received a micro uzi.", GetRPName(playerid), GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			            SM(playerid, COLOR_AQUA, "You have purchased a "SVRCLR"micro uzi{CCFFFF} for $%i.", GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			        }
			        case 1:
			        {
			            if(GangInfo[pData[playerid][pDealerGang]][gArmsMaterials] < 500)
			            {
			                return SCM(playerid, COLOR_SYNTAX, "This gang's arms dealer doesn't have enough materials for this weapon.");
						}
						if(pData[playerid][pCash] < GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem])
						{
						    return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this weapon.");
			            }

			            GangInfo[pData[playerid][pDealerGang]][gArmsMaterials] -= 500;
			            GangInfo[pData[playerid][pDealerGang]][gCash] += GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem];

			            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsmaterials = %i, cash = %i WHERE id = %i", GangInfo[pData[playerid][pDealerGang]][gArmsMaterials], GangInfo[pData[playerid][pDealerGang]][gCash], pData[playerid][pDealerGang]);
			            mysql_tquery(connectionID, queryBuffer);

			            GivePlayerCash(playerid, -GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			            GiveWeapon(playerid, 32);

			            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the arms dealer and received a Tec-9.", GetRPName(playerid), GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			            SM(playerid, COLOR_AQUA, "You have purchased a "SVRCLR"Tec-9{CCFFFF} for $%i.", GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			        }
			        case 2:
			        {
			            if(GangInfo[pData[playerid][pDealerGang]][gArmsMaterials] < 1000)
			            {
			                return SCM(playerid, COLOR_SYNTAX, "This gang's arms dealer doesn't have enough materials for this weapon.");
						}
						if(pData[playerid][pCash] < GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem])
						{
						    return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this weapon.");
			            }

			            GangInfo[pData[playerid][pDealerGang]][gArmsMaterials] -= 1000;
			            GangInfo[pData[playerid][pDealerGang]][gCash] += GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem];

			            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsmaterials = %i, cash = %i WHERE id = %i", GangInfo[pData[playerid][pDealerGang]][gArmsMaterials], GangInfo[pData[playerid][pDealerGang]][gCash], pData[playerid][pDealerGang]);
			            mysql_tquery(connectionID, queryBuffer);

			            GivePlayerCash(playerid, -GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			            GiveWeapon(playerid, 29);

			            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the arms dealer and received an MP5.", GetRPName(playerid), GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			            SM(playerid, COLOR_AQUA, "You have purchased an "SVRCLR"MP5{CCFFFF} for $%i.", GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			        }
			        case 3:
			        {
			            if(GangInfo[pData[playerid][pDealerGang]][gArmsMaterials] < 2000)
			            {
			                return SCM(playerid, COLOR_SYNTAX, "This gang's arms dealer doesn't have enough materials for this weapon.");
						}
						if(pData[playerid][pCash] < GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem])
						{
						    return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this weapon.");
			            }

			            GangInfo[pData[playerid][pDealerGang]][gArmsMaterials] -= 2000;
			            GangInfo[pData[playerid][pDealerGang]][gCash] += GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem];

			            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsmaterials = %i, cash = %i WHERE id = %i", GangInfo[pData[playerid][pDealerGang]][gArmsMaterials], GangInfo[pData[playerid][pDealerGang]][gCash], pData[playerid][pDealerGang]);
			            mysql_tquery(connectionID, queryBuffer);

			            GivePlayerCash(playerid, -GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			            GiveWeapon(playerid, 24);

			            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the arms dealer and received a Desert Eagle.", GetRPName(playerid), GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			            SM(playerid, COLOR_AQUA, "You have purchased a "SVRCLR"Desert Eagle{CCFFFF} for $%i.", GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			        }
			        case 4:
			        {
			            if(GangInfo[pData[playerid][pDealerGang]][gArmsMaterials] < 5000)
			            {
			                return SCM(playerid, COLOR_SYNTAX, "This gang's arms dealer doesn't have enough materials for this weapon.");
						}
						if(pData[playerid][pCash] < GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem])
						{
						    return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this weapon.");
			            }

			            GangInfo[pData[playerid][pDealerGang]][gArmsMaterials] -= 5000;
			            GangInfo[pData[playerid][pDealerGang]][gCash] += GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem];

			            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsmaterials = %i, cash = %i WHERE id = %i", GangInfo[pData[playerid][pDealerGang]][gArmsMaterials], GangInfo[pData[playerid][pDealerGang]][gCash], pData[playerid][pDealerGang]);
			            mysql_tquery(connectionID, queryBuffer);

			            GivePlayerCash(playerid, -GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			            GiveWeapon(playerid, 18);

			            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the arms dealer and received a molotov.", GetRPName(playerid), GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			            SM(playerid, COLOR_AQUA, "You have purchased a "SVRCLR"molotov{CCFFFF} for $%i.", GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			        }
			        case 5:
			        {
			            if(GangInfo[pData[playerid][pDealerGang]][gArmsMaterials] < 3000)
			            {
			                return SCM(playerid, COLOR_SYNTAX, "This gang's arms dealer doesn't have enough materials for this weapon.");
						}
						if(pData[playerid][pCash] < GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem])
						{
						    return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this weapon.");
			            }

			            GangInfo[pData[playerid][pDealerGang]][gArmsMaterials] -= 3000;
			            GangInfo[pData[playerid][pDealerGang]][gCash] += GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem];

			            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsmaterials = %i, cash = %i WHERE id = %i", GangInfo[pData[playerid][pDealerGang]][gArmsMaterials], GangInfo[pData[playerid][pDealerGang]][gCash], pData[playerid][pDealerGang]);
			            mysql_tquery(connectionID, queryBuffer);

			            GivePlayerCash(playerid, -GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			            GiveWeapon(playerid, 30);

			            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the arms dealer and received an AK-47.", GetRPName(playerid), GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			            SM(playerid, COLOR_AQUA, "You have purchased an "SVRCLR"AK-47{CCFFFF} for $%i.", GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			        }
			        case 6:
			        {
			            if(GangInfo[pData[playerid][pDealerGang]][gArmsMaterials] < 4000)
			            {
			                return SCM(playerid, COLOR_SYNTAX, "This gang's arms dealer doesn't have enough materials for this weapon.");
						}
						if(pData[playerid][pCash] < GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem])
						{
						    return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this weapon.");
			            }

			            GangInfo[pData[playerid][pDealerGang]][gArmsMaterials] -= 4000;
			            GangInfo[pData[playerid][pDealerGang]][gCash] += GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem];

			            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsmaterials = %i, cash = %i WHERE id = %i", GangInfo[pData[playerid][pDealerGang]][gArmsMaterials], GangInfo[pData[playerid][pDealerGang]][gCash], pData[playerid][pDealerGang]);
			            mysql_tquery(connectionID, queryBuffer);

			            GivePlayerCash(playerid, -GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			            GiveWeapon(playerid, 31);

			            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the arms dealer and received an M4.", GetRPName(playerid), GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			            SM(playerid, COLOR_AQUA, "You have purchased an "SVRCLR"M4{CCFFFF} for $%i.", GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			        }
			        case 7:
			        {
			            if(GangInfo[pData[playerid][pDealerGang]][gArmsMaterials] < 6500)
			            {
			                return SCM(playerid, COLOR_SYNTAX, "This gang's arms dealer doesn't have enough materials for this weapon.");
						}
						if(pData[playerid][pCash] < GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem])
						{
						    return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this weapon.");
			            }


			            SCM(playerid, COLOR_SYNTAX, "Sniper is temporary disabled");

			            //GangInfo[pData[playerid][pDealerGang]][gArmsMaterials] -= 6500;
			            //GangInfo[pData[playerid][pDealerGang]][gCash] += GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem];

			            //mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsmaterials = %i, cash = %i WHERE id = %i", GangInfo[pData[playerid][pDealerGang]][gArmsMaterials], GangInfo[pData[playerid][pDealerGang]][gCash], pData[playerid][pDealerGang]);
			            //mysql_tquery(connectionID, queryBuffer);

			            //GivePlayerCash(playerid, -GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			            //GiveWeapon(playerid, 34);

			            //SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the arms dealer and received a sniper.", GetRPName(playerid), GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			            //SM(playerid, COLOR_AQUA, "You have purchased a "SVRCLR"sniper{CCFFFF} for $%i.", GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			        }
			        case 8:
			        {
			            if(GangInfo[pData[playerid][pDealerGang]][gArmsMaterials] < 3000)
			            {
			                return SCM(playerid, COLOR_SYNTAX, "This gang's arms dealer doesn't have enough materials for this weapon.");
						}
						if(pData[playerid][pCash] < GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem])
						{
						    return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this weapon.");
			            }

			            GangInfo[pData[playerid][pDealerGang]][gArmsMaterials] -= 3000;
			            GangInfo[pData[playerid][pDealerGang]][gCash] += GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem];

			            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsmaterials = %i, cash = %i WHERE id = %i", GangInfo[pData[playerid][pDealerGang]][gArmsMaterials], GangInfo[pData[playerid][pDealerGang]][gCash], pData[playerid][pDealerGang]);
			            mysql_tquery(connectionID, queryBuffer);

			            GivePlayerCash(playerid, -GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			            GiveWeapon(playerid, 26);

			            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the arms dealer and received a sawnoff shotgun.", GetRPName(playerid), GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			            SM(playerid, COLOR_AQUA, "You have purchased a "SVRCLR"sawnoff shotgun{CCFFFF} for $%i.", GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			        }
				}
			}
			else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_GANGARMSDEALER);
			}
		}

		case DIALOG_GANGARMSAMMO:
		{
		    if(!IsPlayerInRangeOfPoint(playerid, 3.0, GangInfo[pData[playerid][pDealerGang]][gArmsX], GangInfo[pData[playerid][pDealerGang]][gArmsY], GangInfo[pData[playerid][pDealerGang]][gArmsZ]))
		    {
		        return 1;
			}

			if(response)
			{
			    pData[playerid][pSelected] = listitem;
			    ShowDialogToPlayer(playerid, DIALOG_GANGAMMOBUY);
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGARMSDEALER);
			}
		}

  		case DIALOG_GANGAMMOBUY:
		{
            if(!IsPlayerInRangeOfPoint(playerid, 3.0, GangInfo[pData[playerid][pDealerGang]][gArmsX], GangInfo[pData[playerid][pDealerGang]][gArmsY], GangInfo[pData[playerid][pDealerGang]][gArmsZ]))
		    {
		        return 1;
			}

			if(response)
			{
			    new amount;

			    switch(pData[playerid][pSelected])
			    {
			        case 0: // Hollow point ammo
			        {
			            if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOBUY);
						}
						if(amount < 1 || amount > GangInfo[pData[playerid][pDealerGang]][gArmsHPAmmo])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOBUY);
			            }
			            if(pData[playerid][pCash] < GangInfo[pData[playerid][pDealerGang]][gArmsPrices][9] * amount)
			            {
			                SCM(playerid, COLOR_SYNTAX, "You can't afford to buy that many rounds.");
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOBUY);
			            }
			            if(pData[playerid][pHPAmmo] + amount > GetPlayerCapacity(CAPACITY_HPAMMO))
			            {
			                SM(playerid, COLOR_SYNTAX, "You currently have %i/%i HP ammo. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pHPAmmo], GetPlayerCapacity(CAPACITY_HPAMMO));
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOBUY);
						}

						new cost = GangInfo[pData[playerid][pDealerGang]][gArmsPrices][9] * amount;

						GangInfo[pData[playerid][pDealerGang]][gArmsHPAmmo] -= amount;
						GangInfo[pData[playerid][pDealerGang]][gCash] += cost;

						SetWeaponAmmo(playerid, AMMO_HP, pData[playerid][pHPAmmo] + amount);
						GivePlayerCash(playerid, -cost);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armshpammo = %i, cash = %i WHERE id = %i", GangInfo[pData[playerid][pDealerGang]][gArmsHPAmmo], GangInfo[pData[playerid][pDealerGang]][gCash], pData[playerid][pDealerGang]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the arms dealer and received %i rounds of hollow point ammo.", GetRPName(playerid), cost, amount);
						SM(playerid, COLOR_AQUA, "You have purchased %i rounds of "SVRCLR"hollow point ammo{CCFFFF} for $%i.", amount, cost);
					}
					case 1: // Poison tip ammo
			        {
			            if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOBUY);
						}
						if(amount < 1 || amount > GangInfo[pData[playerid][pDealerGang]][gArmsPoisonAmmo])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOBUY);
			            }
			            if(pData[playerid][pCash] < GangInfo[pData[playerid][pDealerGang]][gArmsPrices][10] * amount)
			            {
			                SCM(playerid, COLOR_SYNTAX, "You can't afford to buy that many rounds.");
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOBUY);
			            }
			            if(pData[playerid][pPoisonAmmo] + amount > GetPlayerCapacity(CAPACITY_POISONAMMO))
			            {
			                SM(playerid, COLOR_SYNTAX, "You currently have %i/%i poison ammo. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pPoisonAmmo], GetPlayerCapacity(CAPACITY_POISONAMMO));
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOBUY);
						}

						new cost = GangInfo[pData[playerid][pDealerGang]][gArmsPrices][10] * amount;

						GangInfo[pData[playerid][pDealerGang]][gArmsPoisonAmmo] -= amount;
						GangInfo[pData[playerid][pDealerGang]][gCash] += cost;

						SetWeaponAmmo(playerid, AMMO_POISON, pData[playerid][pPoisonAmmo] + amount);
						GivePlayerCash(playerid, -cost);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armspoisonammo = %i, cash = %i WHERE id = %i", GangInfo[pData[playerid][pDealerGang]][gArmsPoisonAmmo], GangInfo[pData[playerid][pDealerGang]][gCash], pData[playerid][pDealerGang]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the arms dealer and received %i rounds of poison tip ammo.", GetRPName(playerid), cost, amount);
						SM(playerid, COLOR_AQUA, "You have purchased %i rounds of "SVRCLR"poison tip ammo{CCFFFF} for $%i.", amount, cost);
					}
					case 2: // FMJ ammo
			        {
			            if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOBUY);
						}
						if(amount < 1 || amount > GangInfo[pData[playerid][pDealerGang]][gArmsFMJAmmo])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOBUY);
			            }
			            if(pData[playerid][pCash] < GangInfo[pData[playerid][pDealerGang]][gArmsPrices][11] * amount)
			            {
			                SCM(playerid, COLOR_SYNTAX, "You can't afford to buy that many rounds.");
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOBUY);
			            }
			            if(pData[playerid][pFMJAmmo] + amount > GetPlayerCapacity(CAPACITY_FMJAMMO))
			            {
			                SM(playerid, COLOR_SYNTAX, "You currently have %i/%i FMJ ammo. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pFMJAmmo], GetPlayerCapacity(CAPACITY_FMJAMMO));
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOBUY);
						}

						new cost = GangInfo[pData[playerid][pDealerGang]][gArmsPrices][11] * amount;

						GangInfo[pData[playerid][pDealerGang]][gArmsFMJAmmo] -= amount;
						GangInfo[pData[playerid][pDealerGang]][gCash] += cost;

						SetWeaponAmmo(playerid, AMMO_FMJ, pData[playerid][pFMJAmmo] + amount);
						GivePlayerCash(playerid, -cost);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsfmjammo = %i, cash = %i WHERE id = %i", GangInfo[pData[playerid][pDealerGang]][gArmsFMJAmmo], GangInfo[pData[playerid][pDealerGang]][gCash], pData[playerid][pDealerGang]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the arms dealer and received %i rounds of FMJ ammo.", GetRPName(playerid), cost, amount);
						SM(playerid, COLOR_AQUA, "You have purchased %i rounds of "SVRCLR"FMJ ammo{CCFFFF} for $%i.", amount, cost);
					}
		        }
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGARMSAMMO);
			}
		}
		case DIALOG_GANGARMSEDIT:
		{
		    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 6)
		    {
		        return 1;
			}

			if(response)
			{
			    switch(listitem)
			    {
			        case 0: ShowDialogToPlayer(playerid, DIALOG_GANGARMSPRICES);
					case 1: ShowDialogToPlayer(playerid, DIALOG_GANGARMSDEPOSITMATS);
					case 2: ShowDialogToPlayer(playerid, DIALOG_GANGARMSWITHDRAWMATS);
					case 3: ShowDialogToPlayer(playerid, DIALOG_GANGAMMODEPOSITS);
					case 4: ShowDialogToPlayer(playerid, DIALOG_GANGAMMOWITHDRAWS);
			    }
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGARMSDEALER);
			}
		}
		case DIALOG_GANGARMSDEPOSITMATS:
		{
		    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 6)
		    {
		        return 1;
			}

			if(response)
			{
			    new amount;

			    if(sscanf(inputtext, "i", amount))
			    {
			        return ShowDialogToPlayer(playerid, DIALOG_GANGARMSDEPOSITMATS);
				}
				if(amount < 1 || amount > pData[playerid][pMaterials])
				{
				    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			        return ShowDialogToPlayer(playerid, DIALOG_GANGARMSDEPOSITMATS);
			    }

			    GangInfo[pData[playerid][pGang]][gArmsMaterials] += amount;
			    pData[playerid][pMaterials] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsmaterials = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gArmsMaterials], pData[playerid][pGang]);
				mysql_tquery(connectionID, queryBuffer);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", pData[playerid][pMaterials], pData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

				SM(playerid, COLOR_AQUA, "You have deposited %i materials in your arms dealer NPC.", amount);
			}

			ShowDialogToPlayer(playerid, DIALOG_GANGARMSEDIT);
		}
		case DIALOG_GANGARMSWITHDRAWMATS:
		{
		    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 6)
		    {
		        return 1;
			}

			if(response)
			{
			    new amount;

			    if(sscanf(inputtext, "i", amount))
			    {
			        return ShowDialogToPlayer(playerid, DIALOG_GANGARMSWITHDRAWMATS);
				}
				if(amount < 1 || amount > GangInfo[pData[playerid][pGang]][gArmsMaterials])
				{
				    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			        return ShowDialogToPlayer(playerid, DIALOG_GANGARMSWITHDRAWMATS);
			    }

			    GangInfo[pData[playerid][pGang]][gArmsMaterials] -= amount;
			    pData[playerid][pMaterials] += amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsmaterials = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gArmsMaterials], pData[playerid][pGang]);
				mysql_tquery(connectionID, queryBuffer);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", pData[playerid][pMaterials], pData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

				SM(playerid, COLOR_AQUA, "You have withdrawn %i materials from your arms dealer NPC.", amount);
			}

			ShowDialogToPlayer(playerid, DIALOG_GANGARMSEDIT);
		}
		case DIALOG_GANGAMMODEPOSITS:
		{
		    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 5)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        pData[playerid][pSelected] = listitem;
		        ShowDialogToPlayer(playerid, DIALOG_GANGAMMODEPOSIT);
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGARMSEDIT);
		    }
		}
		case DIALOG_GANGAMMOWITHDRAWS:
		{
		    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 5)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        pData[playerid][pSelected] = listitem;
		        ShowDialogToPlayer(playerid, DIALOG_GANGAMMOWITHDRAW);
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGARMSEDIT);
		    }
		}
		case DIALOG_GANGAMMODEPOSIT:
		{
		    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 5)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        new amount;

		        switch(pData[playerid][pSelected])
		        {
		            case 0: // HP ammo
		            {
		                if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMODEPOSIT);
						}
						if(amount < 1 || amount > pData[playerid][pHPAmmo])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGAMMODEPOSIT);
			            }

						GangInfo[pData[playerid][pGang]][gArmsHPAmmo] += amount;
						SetWeaponAmmo(playerid, AMMO_HP, pData[playerid][pHPAmmo] - amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armshpammo = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gArmsHPAmmo], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SM(playerid, COLOR_AQUA, "You have deposited %i rounds of "SVRCLR"hollow point ammo{CCFFFF} in your arms dealer NPC.", amount);
					}
					case 1: // Poison ammo
		            {
		                if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMODEPOSIT);
						}
						if(amount < 1 || amount > pData[playerid][pPoisonAmmo])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGAMMODEPOSIT);
			            }

						GangInfo[pData[playerid][pGang]][gArmsPoisonAmmo] += amount;
						SetWeaponAmmo(playerid, AMMO_POISON, pData[playerid][pPoisonAmmo] - amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armspoisonammo = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gArmsPoisonAmmo], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SM(playerid, COLOR_AQUA, "You have deposited %i rounds of "SVRCLR"poison tip ammo{CCFFFF} in your arms dealer NPC.", amount);
					}
					case 2: // FMJ ammo
		            {
		                if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMODEPOSIT);
						}
						if(amount < 1 || amount > pData[playerid][pFMJAmmo])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGAMMODEPOSIT);
			            }

						GangInfo[pData[playerid][pGang]][gArmsFMJAmmo] += amount;
						SetWeaponAmmo(playerid, AMMO_FMJ, pData[playerid][pFMJAmmo] - amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsfmjammo = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gArmsFMJAmmo], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SM(playerid, COLOR_AQUA, "You have deposited %i rounds of "SVRCLR"FMJ ammo{CCFFFF} in your arms dealer NPC.", amount);
					}
				}
			}

			ShowDialogToPlayer(playerid, DIALOG_GANGAMMODEPOSITS);
		}
		case DIALOG_GANGAMMOWITHDRAW:
		{
		    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 5)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        new amount;

		        switch(pData[playerid][pSelected])
		        {
		            case 0: // HP ammo
		            {
		                if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOWITHDRAW);
						}
						if(amount < 1 || amount > GangInfo[pData[playerid][pGang]][gArmsHPAmmo])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOWITHDRAW);
			            }
			            if(pData[playerid][pHPAmmo] + amount > GetPlayerCapacity(CAPACITY_HPAMMO))
			            {
			                SM(playerid, COLOR_SYNTAX, "You currently have %i/%i HP ammo. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pHPAmmo], GetPlayerCapacity(CAPACITY_HPAMMO));
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOWITHDRAW);
						}

						GangInfo[pData[playerid][pGang]][gArmsHPAmmo] -= amount;
						SetWeaponAmmo(playerid, AMMO_HP, pData[playerid][pHPAmmo] + amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armshpammo = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gArmsHPAmmo], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SM(playerid, COLOR_AQUA, "You have withdrawn %i rounds of "SVRCLR"hollow point ammo{CCFFFF} from your arms dealer NPC.", amount);
					}
					case 1: // Poison ammo
		            {
		                if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOWITHDRAW);
						}
						if(amount < 1 || amount > GangInfo[pData[playerid][pGang]][gArmsPoisonAmmo])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOWITHDRAW);
			            }
			            if(pData[playerid][pPoisonAmmo] + amount > GetPlayerCapacity(CAPACITY_POISONAMMO))
			            {
			                SM(playerid, COLOR_SYNTAX, "You currently have %i/%i poison ammo. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pPoisonAmmo], GetPlayerCapacity(CAPACITY_POISONAMMO));
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOWITHDRAW);
						}

						GangInfo[pData[playerid][pGang]][gArmsPoisonAmmo] -= amount;
						SetWeaponAmmo(playerid, AMMO_POISON, pData[playerid][pPoisonAmmo] + amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armspoisonammo = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gArmsPoisonAmmo], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SM(playerid, COLOR_AQUA, "You have withdrawn %i rounds of "SVRCLR"poison tip ammo{CCFFFF} from your arms dealer NPC.", amount);
					}
					case 2: // FMJ ammo
		            {
		                if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOWITHDRAW);
						}
						if(amount < 1 || amount > GangInfo[pData[playerid][pGang]][gArmsFMJAmmo])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOWITHDRAW);
			            }
			            if(pData[playerid][pFMJAmmo] + amount > GetPlayerCapacity(CAPACITY_FMJAMMO))
			            {
			                SM(playerid, COLOR_SYNTAX, "You currently have %i/%i FMJ ammo. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pFMJAmmo], GetPlayerCapacity(CAPACITY_FMJAMMO));
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOWITHDRAW);
						}

						GangInfo[pData[playerid][pGang]][gArmsFMJAmmo] -= amount;
						SetWeaponAmmo(playerid, AMMO_FMJ, pData[playerid][pFMJAmmo] + amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsfmjammo = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gArmsFMJAmmo], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SM(playerid, COLOR_AQUA, "You have withdrawn %i rounds of "SVRCLR"FMJ ammo{CCFFFF} from your arms dealer NPC.", amount);
					}
				}
			}

			ShowDialogToPlayer(playerid, DIALOG_GANGAMMOWITHDRAWS);
		}
		case DIALOG_GANGDRUGDEALER:
		{
		    if(!IsPlayerInRangeOfPoint(playerid, 3.0, GangInfo[pData[playerid][pDealerGang]][gDrugX], GangInfo[pData[playerid][pDealerGang]][gDrugY], GangInfo[pData[playerid][pDealerGang]][gDrugZ]))
		    {
		        return 1;
			}

			if(response)
			{
			    if(listitem == 0)
			    {
					ShowDialogToPlayer(playerid, DIALOG_GANGDRUGSHOP);
				}
				else if(listitem == 1)
				{
				    if(pData[playerid][pGang] != pData[playerid][pDealerGang])
				    {
				        return SCM(playerid, COLOR_SYNTAX, "This drug dealer doesn't belong to your gang.");
				    }
				    if(pData[playerid][pGangRank] < 6)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "You need to be rank 6+ in order to edit.");
					}

					ShowDialogToPlayer(playerid, DIALOG_GANGDRUGEDIT);
				}
			}
		}
		case DIALOG_GANGDRUGSHOP:
		{
		    if(!IsPlayerInRangeOfPoint(playerid, 3.0, GangInfo[pData[playerid][pDealerGang]][gDrugX], GangInfo[pData[playerid][pDealerGang]][gDrugY], GangInfo[pData[playerid][pDealerGang]][gDrugZ]))
		    {
		        return 1;
			}

			if(response)
			{
			    pData[playerid][pSelected] = listitem;
			    ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEALER);
			}
		}
		case DIALOG_GANGDRUGBUY:
		{
            if(!IsPlayerInRangeOfPoint(playerid, 3.0, GangInfo[pData[playerid][pDealerGang]][gDrugX], GangInfo[pData[playerid][pDealerGang]][gDrugY], GangInfo[pData[playerid][pDealerGang]][gDrugZ]))
		    {
		        return 1;
			}

			if(response)
			{
			    new amount;

			    switch(pData[playerid][pSelected])
			    {
			        case 0: // Pot
			        {
			            if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
						}
						if(amount < 1 || amount > GangInfo[pData[playerid][pDealerGang]][gDrugPot])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
			            }
			            if(pData[playerid][pCash] < GangInfo[pData[playerid][pDealerGang]][gDrugPrices][0] * amount)
			            {
			                SCM(playerid, COLOR_SYNTAX, "You can't afford to buy that many grams.");
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
			            }
			            if(pData[playerid][pPot] + amount > GetPlayerCapacity(CAPACITY_WEED))
			            {
			                SM(playerid, COLOR_SYNTAX, "You currently have %i/%i pot. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pPot], GetPlayerCapacity(CAPACITY_WEED));
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
						}

						new cost = GangInfo[pData[playerid][pDealerGang]][gDrugPrices][0] * amount;

						GangInfo[pData[playerid][pDealerGang]][gDrugPot] -= amount;
						GangInfo[pData[playerid][pDealerGang]][gCash] += cost;

						pData[playerid][pPot] += amount;
						GivePlayerCash(playerid, -cost);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drugpot = %i, cash = %i WHERE id = %i", GangInfo[pData[playerid][pDealerGang]][gDrugPot], GangInfo[pData[playerid][pDealerGang]][gCash], pData[playerid][pDealerGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", pData[playerid][pPot], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the drug dealer and received %i grams of pot.", GetRPName(playerid), cost, amount);
						SM(playerid, COLOR_AQUA, "You have purchased %i grams of "SVRCLR"pot{CCFFFF} for $%i.", amount, cost);
					}
					case 1: // Crack
			        {
			            if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
						}
						if(amount < 1 || amount > GangInfo[pData[playerid][pDealerGang]][gDrugCrack])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
			            }
			            if(pData[playerid][pCash] < GangInfo[pData[playerid][pDealerGang]][gDrugPrices][1] * amount)
			            {
			                SCM(playerid, COLOR_SYNTAX, "You can't afford to buy that many grams.");
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
			            }
			            if(pData[playerid][pCrack] + amount > GetPlayerCapacity(CAPACITY_COCAINE))
			            {
			                SM(playerid, COLOR_SYNTAX, "You currently have %i/%i Crack. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pCrack], GetPlayerCapacity(CAPACITY_COCAINE));
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
						}

						new cost = GangInfo[pData[playerid][pDealerGang]][gDrugPrices][1] * amount;

						GangInfo[pData[playerid][pDealerGang]][gDrugCrack] -= amount;
						GangInfo[pData[playerid][pDealerGang]][gCash] += cost;

						pData[playerid][pCrack] += amount;
						GivePlayerCash(playerid, -cost);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drugcrack = %i, cash = %i WHERE id = %i", GangInfo[pData[playerid][pDealerGang]][gDrugCrack], GangInfo[pData[playerid][pDealerGang]][gCash], pData[playerid][pDealerGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", pData[playerid][pCrack], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the drug dealer and received %i grams of Crack.", GetRPName(playerid), cost, amount);
						SM(playerid, COLOR_AQUA, "You have purchased %i grams of "SVRCLR"Crack{CCFFFF} for $%i.", amount, cost);
					}
					case 2: // Meth
			        {
			            if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
						}
						if(amount < 1 || amount > GangInfo[pData[playerid][pDealerGang]][gDrugMeth])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
			            }
			            if(pData[playerid][pCash] < GangInfo[pData[playerid][pDealerGang]][gDrugPrices][2] * amount)
			            {
			                SCM(playerid, COLOR_SYNTAX, "You can't afford to buy that many grams.");
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
			            }
			            if(pData[playerid][pMeth] + amount > GetPlayerCapacity(CAPACITY_METH))
			            {
			                SM(playerid, COLOR_SYNTAX, "You currently have %i/%i meth. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pMeth], GetPlayerCapacity(CAPACITY_METH));
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
						}

						new cost = GangInfo[pData[playerid][pDealerGang]][gDrugPrices][2] * amount;

						GangInfo[pData[playerid][pDealerGang]][gDrugMeth] -= amount;
						GangInfo[pData[playerid][pDealerGang]][gCash] += cost;

						pData[playerid][pMeth] += amount;
						GivePlayerCash(playerid, -cost);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drugmeth = %i, cash = %i WHERE id = %i", GangInfo[pData[playerid][pDealerGang]][gDrugMeth], GangInfo[pData[playerid][pDealerGang]][gCash], pData[playerid][pDealerGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", pData[playerid][pMeth], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the drug dealer and received %i grams of meth.", GetRPName(playerid), cost, amount);
						SM(playerid, COLOR_AQUA, "You have purchased %i grams of "SVRCLR"meth{CCFFFF} for $%i.", amount, cost);
					}
			    }
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGDRUGSHOP);
			}
		}
        case DIALOG_GANGDRUGEDIT:
		{
		    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 6)
		    {
		        return 1;
			}

			if(response)
			{
			    switch(listitem)
			    {
			        case 0: ShowDialogToPlayer(playerid, DIALOG_GANGDRUGPRICES);
					case 1: ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEPOSITS);
					case 2: ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAWS);
			    }
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEALER);
			}
		}
        case DIALOG_GANGDRUGPRICES:
		{
		    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 5)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        pData[playerid][pSelected] = listitem;
		        ShowPlayerDialog(playerid, DIALOG_GANGDRUGPRICE, DIALOG_STYLE_INPUT, "Drug dealer | Prices", "Enter the new price for this drug:", "Submit", "Back");
		    }
		    else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_GANGDRUGEDIT);
			}
		}
		case DIALOG_GANGDRUGPRICE:
		{
		    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 5)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        new amount;

		        if(sscanf(inputtext, "i", amount))
		        {
		            return ShowPlayerDialog(playerid, DIALOG_GANGDRUGPRICE, DIALOG_STYLE_INPUT, "Drug dealer | Prices", "Enter the new price for this drug:", "Submit", "Back");
				}
				if(amount < 0)
				{
				    SCM(playerid, COLOR_SYNTAX, "The amount can't be below $0.");
				    return ShowPlayerDialog(playerid, DIALOG_GANGDRUGPRICE, DIALOG_STYLE_INPUT, "Drug dealer | Prices", "Enter the new price for this drug:", "Submit", "Back");
				}

				GangInfo[pData[playerid][pGang]][gDrugPrices][pData[playerid][pSelected]] = amount;

				if(pData[playerid][pSelected] == 0) {
				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET pot_price = %i WHERE id = %i", amount, pData[playerid][pGang]);
				    SM(playerid, COLOR_AQUA, "You have set the price of "SVRCLR"pot{CCFFFF} to $%i.", amount);
		        } else if(pData[playerid][pSelected] == 1) {
		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET crack_price = %i WHERE id = %i", amount, pData[playerid][pGang]);
				    SM(playerid, COLOR_AQUA, "You have set the price of "SVRCLR"crack{CCFFFF} to $%i.", amount);
		        } else if(pData[playerid][pSelected] == 2) {
		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET meth_price = %i WHERE id = %i", amount, pData[playerid][pGang]);
				    SM(playerid, COLOR_AQUA, "You have set the price of "SVRCLR"meth{CCFFFF} to $%i.", amount);
		        }

		        mysql_tquery(connectionID, queryBuffer);
		    }

		    ShowDialogToPlayer(playerid, DIALOG_GANGDRUGPRICES);
		}
		case DIALOG_GANGDRUGDEPOSITS:
		{
		    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 5)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        pData[playerid][pSelected] = listitem;
		        ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEPOSIT);
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGDRUGEDIT);
		    }
		}
		case DIALOG_GANGDRUGWITHDRAWS:
		{
		    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 5)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        pData[playerid][pSelected] = listitem;
		        ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAW);
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGDRUGEDIT);
		    }
		}
		case DIALOG_GANGDRUGDEPOSIT:
		{
		    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 5)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        new amount;

		        switch(pData[playerid][pSelected])
		        {
		            case 0: // Pot
		            {
		                if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEPOSIT);
						}
						if(amount < 1 || amount > pData[playerid][pPot])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEPOSIT);
			            }

						GangInfo[pData[playerid][pGang]][gDrugPot] += amount;
						pData[playerid][pPot] -= amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drugpot = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gDrugPot], pData[playerid][pDealerGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", pData[playerid][pPot], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SM(playerid, COLOR_AQUA, "You have deposited %i grams of "SVRCLR"pot{CCFFFF} in your drug dealer NPC.", amount);
					}
					case 1: // Crack
		            {
		                if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEPOSIT);
						}
						if(amount < 1 || amount > pData[playerid][pCrack])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEPOSIT);
			            }

						GangInfo[pData[playerid][pGang]][gDrugCrack] += amount;
						pData[playerid][pCrack] -= amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drugcrack = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gDrugCrack], pData[playerid][pDealerGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", pData[playerid][pCrack], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SM(playerid, COLOR_AQUA, "You have deposited %i grams of "SVRCLR"Crack{CCFFFF} in your drug dealer NPC.", amount);
					}
					case 2: // Meth
		            {
		                if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEPOSIT);
						}
						if(amount < 1 || amount > pData[playerid][pMeth])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEPOSIT);
			            }

						GangInfo[pData[playerid][pGang]][gDrugMeth] += amount;
						pData[playerid][pMeth] -= amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drugmeth = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gDrugMeth], pData[playerid][pDealerGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", pData[playerid][pMeth], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SM(playerid, COLOR_AQUA, "You have deposited %i grams of "SVRCLR"meth{CCFFFF} in your drug dealer NPC.", amount);
					}
				}
			}

			ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEPOSITS);
		}
		case DIALOG_GANGDRUGWITHDRAW:
		{
		    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 5)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        new amount;

		        switch(pData[playerid][pSelected])
		        {
		            case 0: // Pot
		            {
		                if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAW);
						}
						if(amount < 1 || amount > GangInfo[pData[playerid][pGang]][gDrugPot])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAW);
			            }
			            if(pData[playerid][pPot] + amount > GetPlayerCapacity(CAPACITY_WEED))
			            {
			                SM(playerid, COLOR_SYNTAX, "You currently have %i/%i pot. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pPot], GetPlayerCapacity(CAPACITY_WEED));
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAW);
						}

						GangInfo[pData[playerid][pGang]][gDrugPot] -= amount;
						pData[playerid][pPot] += amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drugpot = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gDrugPot], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", pData[playerid][pPot], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SM(playerid, COLOR_AQUA, "You have withdrawn %i grams of "SVRCLR"pot{CCFFFF} from your drug dealer NPC.", amount);
					}
					case 1: // Crack
		            {
		                if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAW);
						}
						if(amount < 1 || amount > GangInfo[pData[playerid][pGang]][gDrugCrack])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAW);
			            }
			            if(pData[playerid][pCrack] + amount > GetPlayerCapacity(CAPACITY_COCAINE))
			            {
			                SM(playerid, COLOR_SYNTAX, "You currently have %i/%i Crack. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pCrack], GetPlayerCapacity(CAPACITY_COCAINE));
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAW);
						}

						GangInfo[pData[playerid][pGang]][gDrugCrack] -= amount;
						pData[playerid][pCrack] += amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drugcrack = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gDrugCrack], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", pData[playerid][pCrack], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SM(playerid, COLOR_AQUA, "You have withdrawn %i grams of "SVRCLR"Crack{CCFFFF} from your drug dealer NPC.", amount);
					}
					case 2: // Meth
		            {
		                if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAW);
						}
						if(amount < 1 || amount > GangInfo[pData[playerid][pGang]][gDrugMeth])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAW);
			            }
			            if(pData[playerid][pMeth] + amount > GetPlayerCapacity(CAPACITY_METH))
			            {
			                SM(playerid, COLOR_SYNTAX, "You currently have %i/%i meth. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pMeth], GetPlayerCapacity(CAPACITY_METH));
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAW);
						}

						GangInfo[pData[playerid][pGang]][gDrugMeth] -= amount;
						pData[playerid][pMeth] += amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drugmeth = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gDrugMeth], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", pData[playerid][pMeth], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SM(playerid, COLOR_AQUA, "You have withdrawn %i grams of "SVRCLR"meth{CCFFFF} from your drug dealer NPC.", amount);
					}
				}
			}

			ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAWS);
		}
		case DIALOG_FREENAMECHANGE:
		{
		    if(response)
		    {
		        if(isnull(inputtext))
		        {
		            return ShowPlayerDialog(playerid, DIALOG_FREENAMECHANGE, DIALOG_STYLE_INPUT, "Non-RP Name", "An administrator has came to the conclusion that your name is non-RP.\nTherefore you have been given this free namechange in order to correct it.\n\nEnter a name in the Firstname_Lastname format in the box below:", "Submit", "Cancel");
				}
				if(!(3 <= strlen(inputtext) <= 20))
				{
				    SCM(playerid, COLOR_SYNTAX, "Your name must contain 3 to 20 characters.");
				    return ShowPlayerDialog(playerid, DIALOG_FREENAMECHANGE, DIALOG_STYLE_INPUT, "Non-RP Name", "An administrator has came to the conclusion that your name is non-RP.\nTherefore you have been given this free namechange in order to correct it.\n\nEnter a name in the Firstname_Lastname format in the box below:", "Submit", "Cancel");
				}
				if(strfind(inputtext, "_") == -1)
				{
				    SCM(playerid, COLOR_SYNTAX, "The name needs to contain at least one underscore.");
				    return ShowPlayerDialog(playerid, DIALOG_FREENAMECHANGE, DIALOG_STYLE_INPUT, "Non-RP Name", "An administrator has came to the conclusion that your name is non-RP.\nTherefore you have been given this free namechange in order to correct it.\n\nEnter a name in the Firstname_Lastname format in the box below:", "Submit", "Cancel");
				}
                if(!IsValidName(inputtext))
                {
				    SCM(playerid, COLOR_SYNTAX, "That name is not supported by SA-MP.");
				    return ShowPlayerDialog(playerid, DIALOG_FREENAMECHANGE, DIALOG_STYLE_INPUT, "Non-RP Name", "An administrator has came to the conclusion that your name is non-RP.\nTherefore you have been given this free namechange in order to correct it.\n\nEnter a name in the Firstname_Lastname format in the box below:", "Submit", "Cancel");
				}

		        pData[playerid][pFreeNamechange] = 1;

		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = '%e'", inputtext);
		        mysql_tquery(connectionID, queryBuffer, "OnPlayerAttemptNameChange", "is", playerid, inputtext);
		    }
		    else
		    {
		    	if(!pData[playerid][pLogged])
		        {
		            SAM(COLOR_YELLOW, "AdmWarning: %s[%i] has been kicked for failing to change their name.", GetRPName(playerid), playerid);
		            KickPlayer(playerid);
		        }
		        else
		        {
			    	pData[playerid][pJailType] = 2;
				    pData[playerid][pJailTime] = 10 * 60;

					ResetPlayerWeaponsEx(playerid);
					ResetPlayer(playerid);

					SetPlayerInJail(playerid);
					GameTextForPlayer(playerid, "~w~Welcome to~n~~r~admin jail", 5000, 3);

					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET prisonedby = 'Server', prisonreason = 'Failing to change their name' WHERE uid = %i", pData[playerid][pID]);
					mysql_tquery(connectionID, queryBuffer);

					strins(pData[playerid][pPrisonedBy], "Server", 0);
					strins(pData[playerid][pPrisonReason], "Failing to change their name", 0);

	                SAM(COLOR_YELLOW, "AdmWarning: %s [%i] has been prisoned for failing to change their name.", GetRPName(playerid), playerid);
					Log_Write("log_punishments", "%s (uid: %i) has been prisoned for 10 minutes, reason: failing to change their name.", GetPlayerNameEx(playerid), pData[playerid][pID]);

				}
			}
		}
	}

	return 1;
}

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	if(playertextid == EntrancePopupTD[playerid][8])
	{
		if(!EnterCheck(playerid)) ExitCheck(playerid);
		else if(!ExitCheck(playerid)) EnterCheck(playerid);
		return 1;
	}
	if(playertextid == BizPopupTD[playerid][8])
	{
		callcmd::buy(playerid, "\1");
		return 1;
	}
    if (playertextid == VehiclePanelTD[playerid][3])
    {
		new vehicleid = GetPlayerVehicleID(playerid);
		if(!GetVehicleParams(vehicleid, VEHICLE_ENGINE))
		{
			if(pData[playerid][pEngine]) return 1; // anti spam
			pData[playerid][pEngine] = 1;

			SetTimerEx("SetVehicleEngine", 1000, 0, "dd",  vehicleid, playerid);
			Dyuze(playerid, "", "You have ~g~started~w~ the ~r~engine~w~.", 3000);
			//format(vehstring, sizeof(vehstring), "Engine ~g~On");
			PlayerTextDrawSetString(playerid, VehiclePanelTD[playerid][3], "Engine ~g~On");
		}
		else
		{
			SetVehicleParams(vehicleid, VEHICLE_ENGINE, false);
			Dyuze(playerid, "", "You have ~g~stopped~w~ the ~r~engine~w~.", 3000);
			PlayerTextDrawSetString(playerid, VehiclePanelTD[playerid][3], "Engine ~r~Off");
			SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s turns off the engine of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
			return 1;
		}
    }
	else if (playertextid == VehiclePanelTD[playerid][4])
    {
		new id;
		if((id = GetNearbyVehicle(playerid)) != INVALID_VEHICLE_ID && (IsVehicleOwner(playerid, id) || pData[playerid][pVehicleKeys] == id || (VehicleInfo[id][vGang] >= 0 && VehicleInfo[id][vGang] == pData[playerid][pGang]) || VehicleInfo[id][vFactionType] >= 0 && VehicleInfo[id][vFactionType] == pData[playerid][pFaction]))
		{
			if(!VehicleInfo[id][vLocked])
			{
				new string[24];
				VehicleInfo[id][vLocked] = 1;
				format(string, sizeof(string), "~r~%s locked", GetVehicleName(id));
				GameTextForPlayer(playerid, string, 3000, 3);
				PlayerTextDrawSetString(playerid, VehiclePanelTD[playerid][4], "Lock ~g~Yes");
				SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s locks their %s.", GetRPName(playerid), GetVehicleName(id));
			}
			else
			{
				VehicleInfo[id][vLocked] = 0;
				new string[24];
				format(string, sizeof(string), "~b~%s unlocked", GetVehicleName(id));
				GameTextForPlayer(playerid, string, 3000, 3);
				PlayerTextDrawSetString(playerid, VehiclePanelTD[playerid][4], "Lock ~r~No");
				SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s unlocks their %s.", GetRPName(playerid), GetVehicleName(id));
			}

			SetVehicleParams(id, VEHICLE_DOORS, VehicleInfo[id][vLocked]);
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET locked = %i WHERE id = %i", VehicleInfo[id][vLocked], VehicleInfo[id][vID]);
			mysql_tquery(connectionID, queryBuffer);
			return 1;
		}
    }
	else if (playertextid == VehiclePanelTD[playerid][7])
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(!IsPlayerInAnyVehicle(playerid)) {
			vehicleid = GetNearbyVehicle(playerid);
		}

		if(vehicleid == INVALID_VEHICLE_ID || !vehicleid)
		{
			return SCM(playerid, COLOR_ERROR, "You are not in range of any vehicle.");
		}
		if(!VehicleHasWindows(vehicleid))
		{
			return SCM(playerid, COLOR_ERROR, "This vehicle has no hood.");
		}

		if(!GetVehicleParams(vehicleid, VEHICLE_BONNET))
		{
			SetVehicleParams(vehicleid, VEHICLE_BONNET, true);
			SCM(playerid, COLOR_WHITE, "You have ~g~opened~w~ the hood!");
			PlayerTextDrawSetString(playerid, VehiclePanelTD[playerid][7], "Hood ~g~Open");
			SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s opens the hood of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		}
		else
		{
			SetVehicleParams(vehicleid, VEHICLE_BONNET, false);
			SCM(playerid, COLOR_WHITE, "You have ~g~closed~w~ the hood!");
			PlayerTextDrawSetString(playerid, VehiclePanelTD[playerid][7], "Hood ~r~Closed");
			SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s closes the hood of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		}
	}
	else if (playertextid == VehiclePanelTD[playerid][8])
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(!IsPlayerInAnyVehicle(playerid)) {
			vehicleid = GetNearbyVehicle(playerid);
		}

		if(vehicleid == INVALID_VEHICLE_ID || !vehicleid)
		{
			return SCM(playerid, COLOR_ERROR, "You are not in range or inside of any vehicle.");
		}
		if(!VehicleHasWindows(vehicleid))
		{
			return SCM(playerid, COLOR_ERROR, "This vehicle has no boot.");
		}

		if(!GetVehicleParams(vehicleid, VEHICLE_BOOT))
		{
			SetVehicleParams(vehicleid, VEHICLE_BOOT, true);
			PlayerTextDrawSetString(playerid, VehiclePanelTD[playerid][8], "Trunk ~g~Open");
			SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s opens the boot of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		}
		else
		{
			SetVehicleParams(vehicleid, VEHICLE_BOOT, false);
			PlayerTextDrawSetString(playerid, VehiclePanelTD[playerid][8], "Trunk ~r~Closed");
			SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s closes the boot of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		}
	}
	else if (playertextid == VehiclePanelTD[playerid][9])
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		{
			return SCM(playerid, COLOR_ERROR, "You must be driving a vehicle to use this command.");
		}
		if(!VehicleHasEngine(vehicleid))
		{
			return SCM(playerid, COLOR_ERROR, "This vehicle has no lights which can be turned on.");
		}

		if(!GetVehicleParams(vehicleid, VEHICLE_LIGHTS))
		{
			SetVehicleParams(vehicleid, VEHICLE_LIGHTS, true);
			PlayerTextDrawSetString(playerid, VehiclePanelTD[playerid][9], "Lights ~g~Open");
			SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s turns on the headlights of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		}
		else
		{
			SetVehicleParams(vehicleid, VEHICLE_LIGHTS, false);
			PlayerTextDrawSetString(playerid, VehiclePanelTD[playerid][9], "Lights ~r~Closed");
			SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s turns off the headlights of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		}
	}
	else if (playertextid == VehiclePanelTD[playerid][10])
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(!IsPlayerInAnyVehicle(playerid))
		{
			return SCM(playerid, COLOR_ERROR, "You must be inside a vehicle to use this command.");
		}
		if(pData[playerid][pCuffed])
		{
			return SCM(playerid, COLOR_ERROR, "You cannot use this command while cuffed");
		}
		if(pData[playerid][pTied])
		{
			return SCM(playerid, COLOR_ERROR, "You cannot use this command while tied.");
		}
		if(!VehicleHasWindows(vehicleid))
		{
			return SCM(playerid, COLOR_ERROR, "This vehicle does not have any windows.");
		}
		if(CarWindows[vehicleid])
		{
			CarWindows[vehicleid] = 0;
			SCM(playerid, COLOR_WHITE, "You have ~g~rolled down~w~ the windows!");
			PlayerTextDrawSetString(playerid, VehiclePanelTD[playerid][10], "Windows ~g~Open");
			SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s rolls down the vehicle windows of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		}
		else
		{
			CarWindows[vehicleid] = 1;
			SCM(playerid, COLOR_WHITE, "You have ~r~rolled up~w~ the windows!");
			PlayerTextDrawSetString(playerid, VehiclePanelTD[playerid][10], "Windows ~r~Closed");
			SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s rolls up the vehicle windows of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		}
	}
    return 0;
}

forward LastAlertPayCheck(playerid);
public LastAlertPayCheck(playerid)
{
	if(PayCheckCode[playerid] != 0)
	{
    	//GameTextForPlayer(playerid, "~w~Type /signcheck", 2500, 1);
		//Dyuze(playerid, "Type ~y~/signcheck~w~ to get your ~b~paycheck~w~.");
    	//SCM(playerid, COLOR_WHITE, "You have one minute left before your paycheck code expires. Please type /signcheck to get your paycheck.");
        SetTimerEx("DestroyCheck", 63000, false, "i", playerid);
	}
}

forward DestroyCheck(playerid);
public DestroyCheck(playerid)
{
	if(PayCheckCode[playerid] != 0)
	{
    	PayCheckCode[playerid] = 0;
    	SCM(playerid, COLOR_WHITE, "Your paycheck code expired. Please remember to use /signcheck next time.");
	}
}




// COMMANDS

CMD:taxhelp(playerid, params[])
{
	SM(playerid, COLOR_SYNTAX, "The tax is currently set to {CCFFFF}%i percent", gTax);
	return 1;
}

CMD:buyinsurance(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1169.8417,-1348.2081,2423.0461))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in any of the hospitals.");
	}
	if(pData[playerid][pCash] < 5000)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't afford insurance.");
	}

	switch(GetPlayerVirtualWorld(playerid))
	{
	    case HOSPITAL_COUNTY:
	    {
	        if(pData[playerid][pInsurance] == HOSPITAL_COUNTY)
	        {
	            return SCM(playerid, COLOR_SYNTAX, "You are already insured at this hospital.");
	        }

	        GivePlayerCash(playerid, -5000);
	        GameTextForPlayer(playerid, "~r~-$5000", 5000, 1);
	        SCM(playerid, COLOR_AQUA, "You paid $5000 for insurance at {FF8282}County General{CCFFFF}. You will now spawn here after death.");

	        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET insurance = %i WHERE uid = %i", HOSPITAL_COUNTY, pData[playerid][pID]);
	        mysql_tquery(connectionID, queryBuffer);

	        pData[playerid][pInsurance] = HOSPITAL_COUNTY;
	    }
	    case HOSPITAL_ALLSAINTS:
	    {
	        if(pData[playerid][pInsurance] == HOSPITAL_ALLSAINTS)
	        {
	            return SCM(playerid, COLOR_SYNTAX, "You are already insured at this hospital.");
	        }

	        GivePlayerCash(playerid, -5000);
	        GameTextForPlayer(playerid, "~r~-$5000", 5000, 1);
	        SCM(playerid, COLOR_AQUA, "You paid $5000 for insurance at {FF8282}All Saints Hospital{CCFFFF}. You will now spawn here after death.");

	        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET insurance = %i WHERE uid = %i", HOSPITAL_ALLSAINTS, pData[playerid][pID]);
	        mysql_tquery(connectionID, queryBuffer);

	        pData[playerid][pInsurance] = HOSPITAL_ALLSAINTS;
	    }
	}

	return 1;
}

CMD:poll(playerid, params[])
{
	new string[128];

	if(pData[playerid][pAdmin] < 3)
		return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");

	if(sscanf(params, "s[128]", params))
		return SCM(playerid, COLOR_SYNTAX, "Usage: /poll [question]");

	if(strlen(params) > 128)
		return SCM(playerid, COLOR_SYNTAX, "Maximum characters limit is 128.");

	if(PollOn)
		return SCM(playerid, COLOR_SYNTAX, "There is already an poll started.");

	format(string, sizeof(string), "** Question:"WHITE" %s {FF6347}**", params);
	SCMA(COLOR_LIGHTRED, string);

	SCMA(COLOR_LIGHTRED, "** Press "WHITE"Y{FF6347} to vote "WHITE"Yes{FF6347}, Press "WHITE"N{FF6347} to vote "WHITE"No{FF6347}. **");
	SCMA(COLOR_LIGHTRED, "** Poll ending in "WHITE"30{FF6347} Seconds. **");

	PollOn = 1;
	PollN = 0;
	foreach(new i: Player)
	{
		PollVoted[i] = 0;
	}
	PollY = 0;
	SetTimer("pollend", 30000, false);
	return 1;
}

CMD:blindfold(playerid,params[])
{
    new targetid;
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /blindfold [playerid]");
	}
	if(pData[playerid][pBlindfold] <= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have any blindfolds left.");
	}
	if(!IsPlayerInVehicle(targetid, GetPlayerVehicleID(playerid)))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected, That player must either be in your vehicle..");
	}
	if(GetPlayerState(targetid) == PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't blindfold the driver.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't blindfold yourself.");
	}
	if(pBlind[targetid])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is already blindfolded. /unblindfold to free them.");
	}
	if(pData[targetid][pAcceptedHelp])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't blindfold a helper who is assisting someone.");
	}
	if(pData[targetid][pAdminDuty])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't blindfold an on duty administrator.");
	}


	pData[playerid][pBlindfold]--;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET blindfold = %i WHERE uid = %i", pData[playerid][pBlindfold], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	GameTextForPlayer(targetid, "~r~Blindfold", 3000, 3);
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s blindfold %s with a bandana.", GetRPName(playerid), GetRPName(targetid));

	TogglePlayerControllable(targetid, 0);
	TextDrawShowForPlayer(targetid, Blind);
	pBlind[targetid] = 1;
    return 1;
}

CMD:unblindfold(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /unblindfold [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't unblindfold yourself.");
	}
	if(!pBlind[targetid])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is not blindfold.");
	}
	if(IsPlayerInAnyVehicle(targetid) && !IsPlayerInVehicle(playerid, GetPlayerVehicleID(targetid)))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be in that player's vehicle in order to unblindfold them.");
	}

	GameTextForPlayer(targetid, "~g~Unblindfold", 3000, 3);
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s unblindfoild the bandana from %s.", GetRPName(playerid), GetRPName(targetid));

    TextDrawHideForPlayer(targetid, Blind);
	pBlind[targetid] = 0;
	return 1;
}

CMD:tie(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /tie [playerid]");
	}
	if(pData[playerid][pRope] <= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have any ropes left.");
	}
	if(!IsPlayerInVehicle(targetid, GetPlayerVehicleID(playerid)))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected, That player must either be in your vehicle..");
	}
	if(GetPlayerState(targetid) == PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't tie up the driver.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't tie yourself.");
	}
	if(pData[targetid][pTied])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is already tied. /untie to free them.");
	}
	if(pData[targetid][pAcceptedHelp])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't tie a helper who is assisting someone.");
	}
	if(pData[targetid][pAdminDuty])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't tie an on duty administrator.");
	}
	
	pData[playerid][pRope]--;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rope = %i WHERE uid = %i", pData[playerid][pRope], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	GameTextForPlayer(targetid, "~r~Tied", 3000, 3);
	TogglePlayerControllable(targetid, 0);
	SetPlayerSpecialAction(targetid, SPECIAL_ACTION_CUFFED);
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s ties %s with a rope.", GetRPName(playerid), GetRPName(targetid));

	TogglePlayerControllable(targetid, 0);
	pData[targetid][pTied] = 1;
	return 1;
}

CMD:untie(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /untie [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't untie yourself.");
	}
	if(!pData[targetid][pTied])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is not tied.");
	}
	if(IsPlayerInAnyVehicle(targetid) && !IsPlayerInVehicle(playerid, GetPlayerVehicleID(targetid)))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be in that player's vehicle in order to untie them.");
	}

	GameTextForPlayer(targetid, "~g~Untied", 3000, 3);
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s unties the rope from %s.", GetRPName(playerid), GetRPName(targetid));

 	pData[targetid][pDraggedBy] = INVALID_PLAYER_ID;

	SetPlayerSpecialAction(targetid, SPECIAL_ACTION_NONE);
	TogglePlayerControllable(targetid, 1);

	pData[targetid][pTied] = 0;
	return 1;
}

stock SpawnToPlayer(playerid)
{
	SetPlayerToSpawn(playerid);
}

CMD:signcheck(playerid, params[])
{
	if(PayCheckCode[playerid] == 0) return SCM(playerid, COLOR_WHITE, "There is no paycheck to sign. Please wait for the next paycheck.");

	if(pData[playerid][pPassport])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have an active passport. You can't level up at the moment.");
	}

 	new string[128];
	format(string, sizeof(string), "Enter your check code to receive your paycheck:\nYour Code is: %i", PayCheckCode[playerid]);
	ShowPlayerDialog(playerid, DIALOG_PAYCHECK, DIALOG_STYLE_INPUT, "Sign check", string, "Sign check","Cancel");
    return 1;
}

CMD:skate(playerid,params[])
{
	if(!pData[playerid][pSkates])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You do not own any skates.");
	}
	if(!IsPlayerInAnyVehicle(playerid))
	{
		ApplyAnimation(playerid, "CARRY","null",0,0,0,0,0,0,0);
	    ApplyAnimation(playerid, "SKATE","null",0,0,0,0,0,0,0);
	    ApplyAnimation(playerid, "CARRY","crry_prtial",4.0,0,0,0,0,0);
	    SetPlayerArmedWeapon(playerid,0);
        if(!pData[playerid][pSkating])
		{
            pData[playerid][pSkating] = true;
            DestroyDynamicObject(pData[playerid][pSkateObj]);
            RemovePlayerAttachedObject(playerid, 5);
            SetPlayerAttachedObject(playerid, 5,19878,6,-0.055999,0.013000,0.000000,-84.099983,0.000000,-106.099998,1.000000,1.000000,1.000000);
            PlayerPlaySound(playerid,21000,0,0,0);
            SendClientMessage(playerid, COLOR_AQUA,"You have equiped your skating gear. Press 'N' to stop skating.");
        }
		else
		{
			pData[playerid][pSkating] = false;
            DestroyDynamicObject(pData[playerid][pSkateObj]);
            RemovePlayerAttachedObject(playerid, 5);
            PlayerPlaySound(playerid,21000,0,0,0);
            SendClientMessage(playerid, COLOR_AQUA, "You are no longer skating.");
        }
	}
	else SendClientMessage(playerid, COLOR_GREY, "You must not be inside a vehicle.");
 	return 1;
}

CMD:b(playerid, params[])
{
	new
	    string[144];

	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /b [local OOC]");
	}
	if(!pData[playerid][pAdminDuty])
	{
		if(Maskara[playerid] == 1) {
			format(string, sizeof(string), "Stranger(B%d):(( %s ))", MaskaraID[playerid], params);
			SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
		} else {
			format(string, sizeof(string), "[%d] %s:(( %s ))", playerid, GetRPName(playerid), params);
			SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
		}
	}
	else
	{
        format(string, sizeof(string), "(( ["GREEN"Administrator{E6E6E6}] %s: %s ))", playerid, GetRPName(playerid), params);
		SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
	}
	return 1;
}

CMD:hideplayergui(playerid, params[])
{
	SendClientMessage(playerid, COLOR_YELLOW, "GUI Notice Hidden.");
	HideNoticeGUIFrame(playerid);
	return 1;
}

CMD:robbiz(playerid, params[])
{
	new businessid = GetInsideBusiness(playerid), count;
	if(businessid == -1)
	{
	    return SCM(playerid, COLOR_GREY2, "You aren't inside a business that you can rob.");
	}
	if(PriorityInfo[prioType] == 2 && PriorityInfo[prioType] != 1)
	{
		return SCM(playerid, COLOR_GREY2, "You cannot rob until the priority opens.");
	}
	if(IsBusinessOwner(playerid, businessid)) {
		return SCM(playerid, COLOR_GREY2, "You can't rob your business.");
	}
	if(pData[playerid][pRobbingBiz] >= 0)
	{
		return SCM(playerid, COLOR_GREY2, "You're already robbing a business.");
	}
	if(BusinessInfo[businessid][bRobbing] == 1)
	{
	    return SCM(playerid, COLOR_GREY2, "You can't rob the business. Robbery has already started.");
	}
	if(BusinessInfo[businessid][bRobbed] > 0)
	{
	    return SM(playerid, COLOR_GREY2, "This business can be robbed again in %i hours. You can't rob it now.", BusinessInfo[businessid][bRobbed]);
	}
	if(pData[playerid][pDuty] == 1)
	{
	    return SCM(playerid, COLOR_GREY2, "You can't rob the business while on-duty.");
	}

	foreach(new i : Player)
	{
	    if(IsLawEnforcement(i) && pData[i][pDuty] == 1)
	    {
	        count++;
		}
	}

	if(count < 7)
	{
	    return SCM(playerid, COLOR_GREY2, "There needs to be at least 7+ LEO on-duty in order to rob the business.");
	}
	if(RobInfo[rTime] > 0)
	{
	    return SM(playerid, COLOR_SYNTAX, "[SERVER]: Players can only rob every %i hour...", ChopInfo[cTime]);
	}
	foreach(new i : Player)
	{
		if(IsLawEnforcement(i))
		{
		    new string[128];
		    format(string, sizeof(string), "~w~Illegal Activity: ~g~Business Heist In Progress");
		    TextDrawSetString(Textdraw2, string);
			SM(i, COLOR_ROYALBLUE, "** HQ: A robbery is occurring at the %s. All units respond immediately.", GetZoneName(BusinessInfo[businessid][bPosX],BusinessInfo[businessid][bPosY],BusinessInfo[businessid][bPosZ]));
			SetPlayerCheckpoint(i, BusinessInfo[businessid][bPosX],BusinessInfo[businessid][bPosY],BusinessInfo[businessid][bPosZ], 3.0);
		}
	}
	ResetRobbery();
	pData[playerid][pLootTime] = 5;
	GameTextForPlayer(playerid, "~w~Looting house vault...", 5000, 3);

 	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "* %s points his gun at the clerk and attempts to rob the business shop.", GetRPName(playerid));
	SCM(playerid, COLOR_GREY2,"** Wait until cops arrive for roleplay purposes. (( You can door shout by inputting '/ds'. ))");
	pData[playerid][pRobbingBiz] = businessid;
	BusinessInfo[businessid][bRobbing] = 1;
	return 1;
}

/*CMD:robhouse(playerid, params[])
{
	new houseid = GetInsideHouse(playerid), count;
	if(houseid == -1)
	{
	    return SCM(playerid, COLOR_GREY2, "You aren't inside a house that you can rob.");
	}
	if(IsHouseOwner(playerid, houseid)) {
		return SCM(playerid, COLOR_GREY2, "You can't rob the your house.");
	}
	if(pData[playerid][pRobbingHouse] >= 0)
	{
		return SCM(playerid, COLOR_GREY2, "You're already robbing a house.");
	}
	if(HouseInfo[houseid][hRobbing] == 1)
	{
	    return SCM(playerid, COLOR_GREY2, "You can't rob the house. Robbery has already started.");
	}
	if(HouseInfo[houseid][hRobbed] > 0)
	{
	    return SM(playerid, COLOR_GREY2, "This house can be robbed again in %i hours. You can't rob it now.", HouseInfo[houseid][hRobbed]);
	}
	if(pData[playerid][pDuty] == 1)
	{
	    return SCM(playerid, COLOR_GREY2, "You can't rob the house while on-duty.");
	}

	foreach(new i : Player)
	{
	    if(IsLawEnforcement(i) && pData[i][pDuty] == 1)
	    {
	        count++;
		}
	}

	if(count < 3)
	{
	    return SCM(playerid, COLOR_GREY2, "There needs to be at least 3+ LEO on-duty in order to rob the house.");
	}

	foreach(new i : Player)
	{
		if(IsLawEnforcement(i))
		{
			SM(i, COLOR_ROYALBLUE, "** HQ: A robbery is occurring at the %s. All units respond immediately.", GetZoneName(HouseInfo[houseid][hPosX],HouseInfo[houseid][hPosY],HouseInfo[houseid][hPosZ]));
			SetPlayerCheckpoint(i, HouseInfo[houseid][hPosX],HouseInfo[houseid][hPosY],HouseInfo[houseid][hPosZ], 3.0);
		}
	}

	pData[playerid][pLootTime] = 5;
	GameTextForPlayer(playerid, "~w~Looting house vault...", 5000, 3);

 	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "* %s attempts to rob the house.", GetRPName(playerid));
	SCM(playerid, COLOR_GREY2,"** Wait until cops arrive for roleplay purposes. (( You can door shout by inputting '/ds'. ))");
	pData[playerid][pRobbingHouse] = houseid;
	HouseInfo[houseid][hRobbing] = 1;
	return 1;
}*/

CMD:ds(playerid, params[])
{
	if(isnull(params))
		return SendClientMessage(playerid, COLOR_GREY2, "Usage: /ds [door shout text]");

	new string[128], idx;

	if((idx = GetNearbyHouse(playerid)) != -1 || (idx = GetInsideHouse(playerid)) != -1)
	{
		foreach(new i : Player)
		{
			if(i != playerid) {
				if((GetNearbyHouse(i) == idx) || (GetInsideHouse(i) == idx))
				{
					if(strlen(params) > 90)
					{
						format(string, sizeof(string), "(%s door): %.90s", GetRPName(playerid), params);
						SendClientMessage(i, COLOR_GREY1, string);
						format(string, sizeof(string), "(%s door): ... %s", GetRPName(playerid),params[90]);
						SendClientMessage(i, COLOR_GREY1, string);
					} else {
						format(string, sizeof(string), "(%s door): %s", GetRPName(playerid), params);
						SendClientMessage(i, COLOR_GREY1, string);
					}
				}
			}
		}
		if(strlen(params) > 90)
		{
			SM(playerid, COLOR_GREY1, "(door): %.90s", params);
			SM(playerid, COLOR_GREY1, "(door): ... %s", params[90]);
		}
		else
		{
			SM(playerid, COLOR_GREY1, "(door): %s", params);
		}
	}
	else if((idx = GetNearbyBusiness(playerid)) != -1 || (idx = GetInsideBusiness(playerid)) != -1) {
		foreach(new i : Player)
		{
			if(i != playerid) {
				if((GetNearbyBusiness(i) == idx) || (GetInsideBusiness(i) == idx))
				{
					if(strlen(params) > 90)
					{
						format(string, sizeof(string), "(door): %.90s", params);
						SendClientMessage(i, COLOR_GREY1, string);

						format(string, sizeof(string), "(door): ... %s", params[90]);
						SendClientMessage(i, COLOR_GREY1, string);
					}
					else
					{
						format(string, sizeof(string), "(door): %s", params);
						SendClientMessage(i, COLOR_GREY1, string);
					}
				}
			}
		}
		if(strlen(params) > 90)
		{
			SM(playerid, COLOR_GREY1, "(door): %.90s", params);
			SM(playerid, COLOR_GREY1, "(door): ... %s", params[90]);
		}
		else
		{
			SM(playerid, COLOR_GREY1, "(door): %s", params);
		}
	} else if((idx = GetNearbyEntranceEx(playerid)) != -1 || (idx = GetInsideEntrance(playerid)) != -1) {
		foreach(new i : Player)
		{
			if(i != playerid) {
				if((GetNearbyEntranceEx(i) == idx) || (GetInsideEntrance(i) == idx))
				{
					if(strlen(params) > 90)
					{
						format(string, sizeof(string), "(door): %.90s", params);
						SendClientMessage(i, COLOR_GREY1, string);

						format(string, sizeof(string), "(door): ... %s", params[90]);
						SendClientMessage(i, COLOR_GREY1, string);
					}
					else
					{
						format(string, sizeof(string), "(door): %s", params);
						SendClientMessage(i, COLOR_GREY1, string);
					}
				}
			}
		}
		if(strlen(params) > 90)
		{
			SM(playerid, COLOR_GREY1, "(door): %.90s", params);
			SM(playerid, COLOR_GREY1, "(door): ... %s", params[90]);
		}
		else
		{
			SM(playerid, COLOR_GREY1, "(door): %s", params);
		}
	}
	else
	{
		SCM(playerid, COLOR_SYNTAX, "You are not near any door.");
	}
	return 1;
}

CMD:s(playerid, params[]) return callcmd::shout(playerid, params);
CMD:shout(playerid, params[])
{
	new
	    string[144];

	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /(s)hout [text]");
	}
	if(Maskara[playerid] == 1) {
		SetPlayerBubbleText(playerid, 20.0, COLOR_GREY1, "(Shouts) %s",params);
		format(string, sizeof(string), "Stranger(B%d): %s!", MaskaraID[playerid], params);
		SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
	} else {
		SetPlayerBubbleText(playerid, 20.0, COLOR_GREY1, "(Shouts) %s",params);
		format(string, sizeof(string), "%s: %s!", GetRPName(playerid), params);
		SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
	}
	return 1;
}
CMD:vcheck(playerid)
{
    new vehicleid;

    if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You are not a part of law enforcement.");
	}
	if((vehicleid = GetNearbyVehicle(playerid)) == INVALID_VEHICLE_ID)
	{
	    return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You are not in range of any vehicle.");
	}
	if(!VehicleInfo[vehicleid][vOwnerID])
	{
	    return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} This vehicle isn't owned by any particular person.");
	}
	SCMf(playerid, COLOR_WHITE, "** %'s %s  |  Tickets: $%i  |  Plate: %s", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vTickets], VehicleInfo[vehicleid][vPlate]);
	return 1;
}
CMD:vcode(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(!pData[playerid][pDonator])
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you don't have a VIP subscription.");
	}
	if(!vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside of any vehicle.");
	}
	if(isnull(params) || strlen(params) > 64)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /vcode [text ('none' to reset)]");
	}

	if(IsValidDynamic3DTextLabel(DonatorCallSign[vehicleid]))
	{
	    DestroyDynamic3DTextLabel(DonatorCallSign[vehicleid]);
		DonatorCallSign[vehicleid] = Text3D:INVALID_3DTEXT_ID;

		if(!strcmp(params, "none", true))
		{
			SCM(playerid, COLOR_WHITE, "** Car text removed from the vehicle.");
		}
	}

	if(strcmp(params, "none", true) != 0)
	{
		DonatorCallSign[vehicleid] = CreateDynamic3DTextLabel(params, COLOR_VIP, 0.0, -3.0, 0.0, 10.0, .attachedvehicle = vehicleid);
 		SCM(playerid, COLOR_WHITE, "** Car text attached. '/vcode none' to detach the Car text.");
	}

	return 1;
}

CMD:vc(playerid, params[])
{
    ShowPlayerDialog(playerid, DIALOG_VOICECHAT2, DIALOG_STYLE_LIST, "Proximity Voicechat", "Whisper\nNormal\nSHout", "COnfirm", "Cancel");
    return 1;
}

CMD:rpgun(playerid, params[])
{
	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s has takes out their weapon from their inventory.", GetRPName(playerid));
	return 1;
}

CMD:me(playerid, params[]) return callcmd::ame(playerid, params);
/*{
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /me [action]");
	}

	if(Maskara[playerid] == 1) {
		if(strlen(params) > MAX_SPLIT_LENGTH)
		{
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} Stranger(B%d) %.*s...", MaskaraID[playerid], MAX_SPLIT_LENGTH, params);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} ...%s", params[MAX_SPLIT_LENGTH]);
		}
		else
		{
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} Stranger(B%d) %s", MaskaraID[playerid], params);
		}
	} else {
		if(strlen(params) > MAX_SPLIT_LENGTH)
		{
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s %.*s...", GetRPName(playerid), MAX_SPLIT_LENGTH, params);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} ...%s", params[MAX_SPLIT_LENGTH]);
		}
		else
		{
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s %s", GetRPName(playerid), params);
		}
	}
	return 1;
}*/

CMD:ame(playerid, params[])
{
	new message[100], string[128], Float:x, Float:y, Float:z;
	if(sscanf(params, "s[100]", message))
	{
		SCM(playerid, COLOR_SYNTAX, "Usage: /me [action]");
 		SCM(playerid, COLOR_GREY2, "HINT: You can use this command to show an action above your head.");
		SCM(playerid, COLOR_GREY2, "HINT: This is useful for areas with a lot of text or congestion and avoiding spam.");
		SCM(playerid, COLOR_GREY2, "HINT: You will not be able to see the bubble, but a message is sent with the text other players see above your head.");
		SCM(playerid, COLOR_REALRED, "NOTE: Don't abuse it or get a punishment.");
		return 1;
	}
	if(strcmp(message, "off", true) == 0)
	{
	    SCM(playerid, COLOR_GREY2, "  You have removed the description label.");

	    DestroyDynamic3DTextLabel(pData[playerid][aMeID]);
	    pData[playerid][aMeStatus] =0;
	    return 1;
	}
	if(strlen(message) > 64) return SCM(playerid, COLOR_GREY2, "  The action is too long, please reduce the length.");
	if(strlen(message) < 3) return SCM(playerid, COLOR_GREY2, "  The action is too short, please increase the length.");
	if(Maskara[playerid] == 1)
	{
		if(pData[playerid][aMeStatus] == 0)
		{
		    pData[playerid][aMeStatus] =1;

			format(string, sizeof(string), "**{C2A2DA} Stranger(B%d) %s", MaskaraID[playerid], message);
			pData[playerid][aMeID] = CreateDynamic3DTextLabel(string, SERVER_COLOR, 0.0, 0.0, 0.0, 20.0, playerid);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, string);
			SetTimerEx("Delete3DDo", 3000, false, "ifff", playerid, x, y, z);
			return 1;
		}
		else
		{
			format(string, sizeof(string), "**{C2A2DA} Stranger(B%d) %s", MaskaraID[playerid], message);
			UpdateDynamic3DTextLabelText(pData[playerid][aMeID], SERVER_COLOR, string);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, string);
			SetTimerEx("Delete3DDo", 3000, false, "ifff", playerid, x, y, z);
			return 1;
		}
	}
	else
	{
		if(pData[playerid][aMeStatus] == 0)
		{
		    pData[playerid][aMeStatus] = 1;

			format(string, sizeof(string), "**{C2A2DA} %s %s", GetRPName(playerid), message);
			pData[playerid][aMeID] = CreateDynamic3DTextLabel(string, SERVER_COLOR, 0.0, 0.0, 0.0, 20.0, playerid);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, string);
			SetTimerEx("Delete3DDo", 3000, false, "ifff", playerid, x, y, z);
			return 1;
		}
		else
		{
			format(string, sizeof(string), "**{C2A2DA} %s %s", GetRPName(playerid), message);
			UpdateDynamic3DTextLabelText(pData[playerid][aMeID], SERVER_COLOR, string);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, string);
			SetTimerEx("Delete3DDo", 3000, false, "ifff", playerid, x, y, z);
			return 1;
		}
	}
}

CMD:ado(playerid, params[])
{
	new message[100], string[180], Float:x, Float:y, Float:z;
	if(sscanf(params, "s[100]", message))
	{
		SCM(playerid, COLOR_SYNTAX, "Usage: /do [action]");
  		SCM(playerid, COLOR_GREY2, "HINT: You can use this command to show an action above your head.");
		SCM(playerid, COLOR_GREY2, "HINT: This is useful for areas with a lot of text or congestion and avoiding spam.");
		SCM(playerid, COLOR_GREY2, "HINT: You will not be able to see the bubble, but a message is sent with the text other players see above your head.");
		SCM(playerid, COLOR_REALRED, "NOTE: Don't abuse it or get a punishment.");
		return 1;
	}
	if(strcmp(message, "off", true) == 0)
	{
	    SCM(playerid, COLOR_GREY2, "  You have removed the description label.");

	    DestroyDynamic3DTextLabel(pData[playerid][aMeID]);
	    pData[playerid][aMeStatus] =0;
	    return 1;
	}
	if(strlen(message) > 64) return SCM(playerid, COLOR_GREY2, "  The action is too long, please reduce the length.");
	if(strlen(message) < 3) return SCM(playerid, COLOR_GREY2, "  The action is too short, please increase the length.");

	if(Maskara[playerid] == 1)
	{
		if(pData[playerid][aMeStatus] == 0)
		{
			pData[playerid][aMeStatus] = 1;

			format(string, sizeof(string), "**{C2A2DA} %s (( Stranger(B%d) ))", message, MaskaraID[playerid]);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, string);

			pData[playerid][aMeID] = CreateDynamic3DTextLabel(string, COLOR_PURPLE, 0.0, 0.0, 0.0, 20.0, playerid);
			SetTimerEx("Delete3DDo", 3000, false, "ifff", playerid, x, y, z);
			return 1;
		}
		else
		{
			format(string, sizeof(string), "**{C2A2DA} %s (( Stranger(B%d) ))", message, MaskaraID[playerid]);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, string);

			UpdateDynamic3DTextLabelText(pData[playerid][aMeID], COLOR_PURPLE, string);
			SetTimerEx("Delete3DDo", 3000, false, "ifff", playerid, x, y, z);
			return 1;
		}
	}
	else
	{
		if(pData[playerid][aMeStatus] == 0)
		{
			pData[playerid][aMeStatus] = 1;

			format(string, sizeof(string), "**{C2A2DA} %s (( %s ))", message, GetRPName(playerid));
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, string);

			pData[playerid][aMeID] = CreateDynamic3DTextLabel(string, COLOR_PURPLE, 0.0, 0.0, 0.0, 20.0, playerid);
			SetTimerEx("Delete3DDo", 3000, false, "ifff", playerid, x, y, z);
			return 1;
		}
		else
		{
			format(string, sizeof(string), "**{C2A2DA} %s (( %s ))", message, GetRPName(playerid));
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, string);

			UpdateDynamic3DTextLabelText(pData[playerid][aMeID], COLOR_PURPLE, string);
			SetTimerEx("Delete3DDo", 3000, false, "ifff", playerid, x, y, z);
			return 1;
		}
	}
}

forward Delete3DDo(playerid);
public Delete3DDo(playerid)
{
    DestroyDynamic3DTextLabel(pData[playerid][aMeID]);
}

CMD:do(playerid, params[]) return callcmd::ado(playerid, params);
/*{
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /do [describe]");
	}
	if(Maskara[playerid] == 1) {
		if(strlen(params) > MAX_SPLIT_LENGTH)
		{
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %.*s...", MAX_SPLIT_LENGTH, params);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} ...%s (( Stranger(B%d) ))", params[MAX_SPLIT_LENGTH], MaskaraID[playerid]);
		}
		else
		{
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s (( Stranger(B%d) ))", params, MaskaraID[playerid]);
		}
	} else {
		if(strlen(params) > MAX_SPLIT_LENGTH)
		{
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %.*s...", MAX_SPLIT_LENGTH, params);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} ...%s (( %s ))", params[MAX_SPLIT_LENGTH], GetRPName(playerid));
		}
		else
		{
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s (( %s ))", params, GetRPName(playerid));
		}
	}
	return 1;
}*/

CMD:check(playerid, params[])
{
    new targetid;

	if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /check [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	DisplayStats(targetid, playerid);
	return 1;
}

CMD:l(playerid, params[])
{
	return callcmd::low(playerid, params);
}

CMD:low(playerid, params[])
{
	new
	    string[144];

	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /(l)ow [text]");
	}
	if(Maskara[playerid] == 1) {
		format(string, sizeof(string), "Stranger(B%d): %s", MaskaraID[playerid], params);
		SendProximityFadeMessage(playerid, 5.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
	} else {
		format(string, sizeof(string), "%s: %s", GetRPName(playerid), params);
		SendProximityFadeMessage(playerid, 5.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
	}
	SetPlayerBubbleText(playerid, 5.0, COLOR_GREY1, "(Quietly) %s", params);
	return 1;
}

CMD:w(playerid, params[]) return callcmd::whisper(playerid, params);
CMD:whisper(playerid, params[])
{
	new targetid, text[128];

	if(sscanf(params, "us[128]", targetid, text))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /(w)hisper [playerid] [text]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(pData[targetid][pToggleWhisper] == 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player has blocked all incoming whispers.");
	}
	if(pData[playerid][pToggleWhisper] == 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Whisper chat is currently disabled. /tog whisper to re-enable.");
	}
	if(!IsPlayerInRangeOfPlayer(playerid, targetid, 5.0) && (!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be near that player to whisper them.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't whisper to yourself.");
	}

    foreach(new i : Player)
    {
	    if(pData[i][pPMListen])
		{
  			SM(i, COLOR_YELLOW, "[L] %s whisper to %s: %s", GetRPName(playerid), GetRPName(targetid), text);
        }
	}

	SM(targetid, COLOR_YELLOW, "** Whisper from %s: %s **", GetRPName(playerid), text);
	SM(playerid, COLOR_YELLOW, "** Whisper to %s: %s **", GetRPName(targetid), text);

	SetPlayerBubbleText(playerid, 5.0, COLOR_YELLOW, "(Whispering)");

	if(pData[targetid][pWhisperFrom] == INVALID_PLAYER_ID)
	{
	    SCM(targetid, COLOR_WHITE, "** You can use '/rw [message]' to reply to this whisper.");
	}

	pData[targetid][pWhisperFrom] = playerid;
	return 1;
}


CMD:rw(playerid, params[])
{
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /rw [text]");
	}
	if(pData[playerid][pWhisperFrom] == INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You haven't been whispered by anyone since you joined the server.");
	}
	if(!IsPlayerInRangeOfPlayer(playerid, pData[playerid][pWhisperFrom], 5.0) && (!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be near that player to whisper them.");
	}
	pData[pData[playerid][pWhisperFrom]][pWhisperFrom] = playerid;
	SM(pData[playerid][pWhisperFrom], COLOR_YELLOW, "** Whisper from %s: %s **", GetRPName(playerid), params);
	SM(playerid, COLOR_YELLOW, "** Whisper to %s: %s **", GetRPName(pData[playerid][pWhisperFrom]), params);

    foreach(new i : Player)
    {
	    if(pData[i][pPMListen])
		{
			SM(i, COLOR_YELLOW, "(L) %s whispers to %s: %s", GetRPName(playerid), GetRPName(pData[playerid][pWhisperFrom]), params);
        }
	} // GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(giveplayerid), giveplayerid, whisper);
	return 1;
}

CMD:createatm(playerid, params[])
{
    new Float:x, Float:y, Float:z, Float:a;
	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_ERROR, "You are not authorized to use this command.");
	}
    if(sscanf(params, "s[32]", "confirm"))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /createatm [confirm]");
		SendClientMessage(playerid, COLOR_WHITE, "** NOTE: The ATM will be created at the coordinates you are standing on.");
		return 1;
	}
	if(GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Your virtual world & interior must be 0!");
	}
    GetPlayerPos(playerid, x, y, z);
 	GetPlayerFacingAngle(playerid, a);
    for(new i = 0; i < MAX_ATMS; i ++)
	{
		if(!AtmInfo[i][aExists])
		{
		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO atms VALUES(null, '%f', '%f', '%f', '%f')", x, y, z, a);
		    mysql_tquery(connectionID, queryBuffer, "OnAdminCreateAtm", "iiffff", playerid, i, x, y, z, a);
		    return 1;
		}
	}

	SendClientMessage(playerid, COLOR_GREY, "ATM slots are currently full. Ask developers to increase the internal limit.");
	return 1;
}

CMD:removeatm(playerid, params[])
{
	new loc;

	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_ERROR, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", loc))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removeatm [atmid] (/nearest)");
	}
	if(!(0 <= loc < MAX_ATMS) || !AtmInfo[loc][aExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid ATM or Static.");
	}
    DestroyDynamic3DTextLabel(AtmInfo[loc][aText]);
    DestroyDynamicObject(AtmInfo[loc][aObject]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM atms WHERE id = %i", AtmInfo[loc][aID]);
	mysql_tquery(connectionID, queryBuffer);
	AtmInfo[loc][aExists] = false;
	AtmInfo[loc][aID] = 0;

	SCMf(playerid, COLOR_WHITE, "** You have removed ATM %i.", loc);
	return 1;
}

CMD:createvendor(playerid, params[])
{
    new Float:x, Float:y, Float:z, Float:a;
	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_ERROR, "You are not authorized to use this command.");
	}
    if(sscanf(params, "s[32]", "confirm"))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /createvendor [confirm]");
		SendClientMessage(playerid, COLOR_WHITE, "** NOTE: The vendor will be created at the coordinates you are standing on.");
		return 1;
	}
    GetPlayerPos(playerid, x, y, z);
 	GetPlayerFacingAngle(playerid, a);
    for(new i = 0; i < MAX_VENDORS; i ++)
	{
		if(!VenInfo[i][aExists])
		{
		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO vendors VALUES(null, '%f', '%f', '%f', '%f')", x, y, z, a);
		    mysql_tquery(connectionID, queryBuffer, "OnAdminCreateVen", "iiffff", playerid, i, x, y, z, a);
		    return 1;
		}
	}

	SendClientMessage(playerid, COLOR_GREY, "VENDORS slots are currently full. Ask developers to increase the internal limit.");
	return 1;
}
CMD:removevendor(playerid, params[])
{
	new loc;

	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_ERROR, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", loc))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removevendor [vendorid] (/nearest)");
	}
	if(!(0 <= loc < MAX_VENDORS) || !VenInfo[loc][aExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid VENDORS or Static.");
	}
    DestroyDynamic3DTextLabel(VenInfo[loc][aText]);
    DestroyDynamicObject(VenInfo[loc][aObject]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM vendors WHERE id = %i", VenInfo[loc][aID]);
	mysql_tquery(connectionID, queryBuffer);
	VenInfo[loc][aExists] = false;
	VenInfo[loc][aID] = 0;

	SCMf(playerid, COLOR_WHITE, "** You have removed VENDORS %i.", loc);
	return 1;
}
CMD:createmdc(playerid, params[])
{
    new Float:x, Float:y, Float:z, Float:a;
	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_ERROR, "You are not authorized to use this command.");
	}
    if(sscanf(params, "s[32]", "confirm"))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /createmdc [confirm]");
		SendClientMessage(playerid, COLOR_WHITE, "** NOTE: The mdc will be created at the coordinates you are standing on.");
		return 1;
	}
    GetPlayerPos(playerid, x, y, z);
 	GetPlayerFacingAngle(playerid, a);
    for(new i = 0; i < MAX_MDC; i ++)
	{
		if(!MdcInfo[i][aExists])
		{
		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO mdc VALUES(null, '%f', '%f', '%f', '%f')", x, y, z, a);
		    mysql_tquery(connectionID, queryBuffer, "OnAdminCreateMdc", "iiffff", playerid, i, x, y, z, a);
		    return 1;
		}
	}

	SendClientMessage(playerid, COLOR_GREY, "Mdc slots are currently full. Ask developers to increase the internal limit.");
	return 1;
}
CMD:removemdc(playerid, params[])
{
	new loc;

	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_ERROR, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", loc))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removemdc [mdcid] (/nearest)");
	}
	if(!(0 <= loc < MAX_MDC) || !MdcInfo[loc][aExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid Mdc or Static.");
	}
    DestroyDynamic3DTextLabel(MdcInfo[loc][aText]);
    DestroyDynamicObject(MdcInfo[loc][aObject]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM mdc WHERE id = %i", MdcInfo[loc][aID]);
	mysql_tquery(connectionID, queryBuffer);
	MdcInfo[loc][aExists] = false;
	MdcInfo[loc][aID] = 0;

	SCMf(playerid, COLOR_WHITE, "** You have removed Mdc %i.", loc);
	return 1;
}
CMD:createbar(playerid, params[])
{
    new Float:x, Float:y, Float:z, Float:a;
	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_ERROR, "You are not authorized to use this command.");
	}
    if(sscanf(params, "s[32]", "confirm"))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /createbar [confirm]");
		SendClientMessage(playerid, COLOR_WHITE, "** NOTE: The bar will be created at the coordinates you are standing on.");
		return 1;
	}
    GetPlayerPos(playerid, x, y, z);
 	GetPlayerFacingAngle(playerid, a);
    for(new i = 0; i < MAX_BAR; i ++)
	{
		if(!BarInfo[i][aExists])
		{
		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO bars VALUES(null, '%f', '%f', '%f', '%f')", x, y, z, a);
		    mysql_tquery(connectionID, queryBuffer, "OnAdminCreateBar", "iiffff", playerid, i, x, y, z, a);
		    return 1;
		}
	}

	SendClientMessage(playerid, COLOR_GREY, "Bars slots are currently full. Ask developers to increase the internal limit.");
	return 1;
}
CMD:removebar(playerid, params[])
{
	new loc;

	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_ERROR, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", loc))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removebar [barid] (/nearest)");
	}
	if(!(0 <= loc < MAX_BAR) || !BarInfo[loc][aExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid BARS or Static.");
	}
    DestroyDynamic3DTextLabel(BarInfo[loc][aText]);
    DestroyDynamicObject(BarInfo[loc][aObject]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM bars WHERE id = %i", BarInfo[loc][aID]);
	mysql_tquery(connectionID, queryBuffer);
	BarInfo[loc][aExists] = false;
	BarInfo[loc][aID] = 0;

	SCMf(playerid, COLOR_WHITE, "** You have removed BAR %i.", loc);
	return 1;
}
CMD:createsurgery(playerid, params[])
{
    new Float:x, Float:y, Float:z, Float:a;
	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_ERROR, "You are not authorized to use this command.");
	}
    if(sscanf(params, "s[32]", "confirm"))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /createsurgery [confirm]");
		SendClientMessage(playerid, COLOR_WHITE, "** NOTE: The surgery room will be created at the coordinates you are standing on.");
		return 1;
	}
    GetPlayerPos(playerid, x, y, z);
 	GetPlayerFacingAngle(playerid, a);
    for(new i = 0; i < MAX_SURGERY; i ++)
	{
		if(!SurInfo[i][aExists])
		{
		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO surgery VALUES(null, '%f', '%f', '%f', '%f')", x, y, z, a);
		    mysql_tquery(connectionID, queryBuffer, "OnAdminCreateSur", "iiffff", playerid, i, x, y, z, a);
		    return 1;
		}
	}

	SendClientMessage(playerid, COLOR_GREY, "Surgery slots are currently full. Ask developers to increase the internal limit.");
	return 1;
}
CMD:removesurgery(playerid, params[])
{
	new loc;

	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_ERROR, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", loc))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removesurgery [surgery] (/nearest)");
	}
	if(!(0 <= loc < MAX_SURGERY) || !SurInfo[loc][aExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid Surgery Room or Static.");
	}
    DestroyDynamic3DTextLabel(SurInfo[loc][aText]);
    DestroyDynamicObject(SurInfo[loc][aObject]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM surgery WHERE id = %i", SurInfo[loc][aID]);
	mysql_tquery(connectionID, queryBuffer);
	SurInfo[loc][aExists] = false;
	SurInfo[loc][aID] = 0;

	SCMf(playerid, COLOR_WHITE, "** You have removed Surgery Room %i.", loc);
	return 1;
}
CMD:createpg(playerid, params[])
{
    new Float:x, Float:y, Float:z, Float:a;
	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_ERROR, "You are not authorized to use this command.");
	}
    if(sscanf(params, "s[32]", "confirm"))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /createpg [confirm]");
		SendClientMessage(playerid, COLOR_WHITE, "** NOTE: The public garage will be created at the coordinates you are standing on.");
		return 1;
	}
    GetPlayerPos(playerid, x, y, z);
 	GetPlayerFacingAngle(playerid, a);
    for(new i = 0; i < MAX_PGARAGE; i ++)
	{
		if(!PGInfo[i][aExists])
		{
		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO publicgarage VALUES(null, '%f', '%f', '%f', '%f')", x, y, z, a);
		    mysql_tquery(connectionID, queryBuffer, "OnAdminCreatePG", "iiffff", playerid, i, x, y, z, a);
		    return 1;
		}
	}

	SendClientMessage(playerid, COLOR_GREY, "Public Garage slots are currently full. Ask developers to increase the internal limit.");
	return 1;
}
CMD:removepg(playerid, params[])
{
	new loc;

	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_ERROR, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", loc))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removepg [pgid] (/nearest)");
	}
	if(!(0 <= loc < MAX_PGARAGE) || !PGInfo[loc][aExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid Public Garage or Static.");
	}
    DestroyDynamic3DTextLabel(PGInfo[loc][aText]);
    DestroyDynamicObject(PGInfo[loc][aObject]);
    DestroyDynamicMapIcon(PGInfo[loc][aMapIcon]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM publicgarage WHERE id = %i", PGInfo[loc][aID]);
	mysql_tquery(connectionID, queryBuffer);
	PGInfo[loc][aExists] = false;
	PGInfo[loc][aID] = 0;

	SCMf(playerid, COLOR_WHITE, "** You have removed public garage %i.", loc);
	return 1;
}
CMD:hotwire(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), Float:health;

	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be driving a vehicle to use this command.");
	}
	if(pData[playerid][pToolkit] == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must have a toolkit to use this command.");
	}
	if(!VehicleHasEngine(vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "This vehicle has no engine which can be turned on.");
	}
	if(vehicleFuel[vehicleid] <= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is no fuel left in this vehicle.");
	}

	if(!GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	{
	    if(pData[playerid][pEngine])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You are already attempting to hotwire this vehicle.");
		}
	    GetVehicleHealth(vehicleid, health);

	    pData[playerid][pEngine] = 1;
		SetTimerEx("SetVehicleEngineHotwire", 5010, 0, "dd",  vehicleid, playerid);
  		SCM(playerid,COLOR_WHITE,"You are currently hotwiring this vehicle.");
  		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s starts hotwiring the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}
	else
	{
		return SCM(playerid, COLOR_SYNTAX, "This vehicle's engine is already on.");
	}

	return 1;
}

CMD:engine(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER || pData[playerid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be driving a vehicle to use this command.");
	}
	if(!VehicleHasEngine(vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "This vehicle has no engine which can be turned on.");
	}
	if(vehicleFuel[vehicleid] <= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is no fuel left in this vehicle.");
	}
	if(VehicleInfo[vehicleid][vFactionType] != FACTION_NONE && GetFactionType(playerid) != VehicleInfo[vehicleid][vFactionType])
 	{
 		return SCM(playerid, COLOR_SYNTAX, "This vehicle doesn't belong to your faction, therefore you can't turn its engine on.");
	}
 	if(VehicleInfo[vehicleid][vGang] >= 1 && pData[playerid][pGang] != VehicleInfo[vehicleid][vGang])
 	{
 		return SCM(playerid, COLOR_SYNTAX, "This vehicle doesn't belong to your gang, therefore you can't turn its engine on.");
 	}
 	if(VehicleInfo[vehicleid][vOwnerID] > 0 && !IsVehicleOwner(playerid, vehicleid) && pData[playerid][pVehicleKeys] != vehicleid)
	{
 		return SCM(playerid, COLOR_SYNTAX, "You do not have keys to this vehicle, therefore you can't turn on its engine.");
	}
	if(!GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	{
	    if(pData[playerid][pEngine]) return 1; // anti spam
	    pData[playerid][pEngine] = 1;

		SetTimerEx("SetVehicleEngine", 1000, 0, "dd",  vehicleid, playerid);
  		Dyuze(playerid, "", "You have ~g~started~w~ the ~r~engine~w~.", 3000);
	}
	else
	{
	    SetVehicleParams(vehicleid, VEHICLE_ENGINE, false);
	    Dyuze(playerid, "", "You have ~g~stopped~w~ the ~r~engine~w~.", 3000);

	    SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s turns off the engine of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}
	return 1;
}

CMD:flash(playerid, params[])
{
	new vehicleid,panels,doors,lights,tires;
	vehicleid = GetPlayerVehicleID(playerid);

	if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
		return SCM(playerid, COLOR_WHITE, "You are not the driver.");
	}
	if(!IsPlayerInAnyVehicle(playerid))
	{
		SCM(playerid, COLOR_WHITE, "You are not in a vehicle!");
        return 1;
	}
	if(!Flasher[vehicleid])
	{
		GetVehicleDamageStatus(vehicleid,panels,doors,lights,tires);
		SetVehicleParams(vehicleid, VEHICLE_LIGHTS, true);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s turns on the emergency lights of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		Flasher[vehicleid] = 1;
	}
	else
	{
		GetVehicleDamageStatus(vehicleid,panels,doors,lights,tires);
		UpdateVehicleDamageStatus(vehicleid, panels, doors, 5, tires);
		Flasher[vehicleid] = 0;
		SetVehicleParams(vehicleid, VEHICLE_LIGHTS, false);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s turns off the emergency lights of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}
	return 1;
}

CMD:seatbelt(playerid, params[])
{
    if(IsPlayerInAnyVehicle(playerid) == 0)
	{
        SCM(playerid, COLOR_WHITE, "You are not in a vehicle!");
        return 1;
    }
    if(IsPlayerInAnyVehicle(playerid) == 1 && ExBJck[playerid] == 0)
	{
        ExBJck[playerid] = 1;
        if(IsAMotorBike(GetPlayerVehicleID(playerid)))
		{
		    SetPlayerAttachedObject(playerid, 7, 18645, 2, 0.1, 0.02, 0.0, 0.0, 90.0, 90.0, 1.0, 1.0, 1.0);
            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "* %s reaches for their helmet, and puts it on.", GetRPName(playerid));
			SCM(playerid, COLOR_WHITE, "You have put on your helmet.");
        }
        else
		{
            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "* %s reaches for their seatbelt, and buckles it up.", GetRPName(playerid));
			SCM(playerid, COLOR_WHITE, "You have put on your seatbelt.");
        }

    }
    else if(IsPlayerInAnyVehicle(playerid) == 1 && ExBJck[playerid] == 1)
	{
        ExBJck[playerid] = 0;
		if(IsAMotorBike(GetPlayerVehicleID(playerid)))
		{
		    RemovePlayerAttachedObject(playerid, 7);
            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "* %s reaches for their helmet, and takes it off.", GetRPName(playerid));
			SCM(playerid, COLOR_WHITE, "You have taken off your helmet.");
        }
        else
		{
            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "* %s reaches for their seatbelt, and unbuckles it.", GetRPName(playerid));
			SCM(playerid, COLOR_WHITE, "You have taken off your seatbelt.");
        }
    }
    return 1;
}

CMD:checkbelt(playerid, params[])
{
	new giveplayerid;
	if(sscanf(params, "i", giveplayerid)) return SM(playerid, COLOR_SYNTAX, "Usage: /checkbelt [playerid]");

    if(GetPlayerState(giveplayerid) == PLAYER_STATE_ONFOOT)
	{
        SM(playerid,COLOR_GREY,"That player is not in any vehicle!");
        return 1;
    }
    if(!IsPlayerConnected(giveplayerid) || !IsPlayerInRangeOfPlayer(playerid, giveplayerid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}

    new stext[4];
    if(ExBJck[giveplayerid] == 0)
	{
		stext = "off";
	}
    else
	{
		stext = "on";
	}
    if(IsAMotorBike(GetPlayerVehicleID(playerid)))
	{
        SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "* %s looks at %s, checking to see if they are wearing a helmet.", GetRPName(playerid),GetRPName(giveplayerid));
        SM(playerid,COLOR_WHITE, "%s's helmet is currently %s.", GetRPName(giveplayerid) , stext);
	}
	else
	{
    	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "* %s peers through the window at %s, checking to see if they are wearing a seatbelt.", GetRPName(playerid),GetRPName(giveplayerid));
    	SM(playerid,COLOR_WHITE, "%s's seat belt is currently %s.", GetRPName(giveplayerid) , stext);
    }
    return 1;
}

CMD:checkmybelt(playerid, params[])
{
    if(ExBJck[playerid] == 1)
	{
		SCM(playerid, COLOR_WHITE, "You have your seatbelt on.");
	}
	else
	{
	    SCM(playerid, COLOR_WHITE, "Your seatbelt is off.");
	}
	return 1;
}

CMD:myupgrades(playerid, params[])
{
	SM(playerid, SERVER_COLOR, "Shealth: %.0f/100{C8C8C8} You spawn with %.1f health at the hospital after death.", pData[playerid][pSpawnHealth], pData[playerid][pSpawnHealth]);
	SM(playerid, COLOR_YELLOW, "Sarmor: %.0f/100{C8C8C8} You spawn with %.1f armor at the hospital after death.", pData[playerid][pSpawnArmor], pData[playerid][pSpawnArmor]);
	SM(playerid, SERVER_COLOR, "Addict: %i/3{C8C8C8} You gain an extra %.1f health and armor when using drugs.", pData[playerid][pAddictUpgrade], pData[playerid][pAddictUpgrade] * 5.0);
	SM(playerid, COLOR_YELLOW, "Asset: %i/4{C8C8C8} You can own %i houses, %i businesses, %i garages & %i vehicles.", pData[playerid][pAssetUpgrade], GetPlayerAssetLimit(playerid, LIMIT_HOUSES), GetPlayerAssetLimit(playerid, LIMIT_BUSINESSES), GetPlayerAssetLimit(playerid, LIMIT_GARAGES), GetPlayerAssetLimit(playerid, LIMIT_VEHICLES));
	return 1;
}

CMD:upgrade(playerid, params[])
{
    new cost = 250000;
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 2703.8176, -596.6273, -72.1423) && !IsPlayerInRangeOfPoint(playerid, 3.0, 1469.6366, -1809.1033, 2350.0251))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the desk at city hall.");
	}
	if(isnull(params))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /upgrade [option]");
	    SCM(playerid, COLOR_WHITE, "List of options: Addict, Asset, SpawnHealth, SpawnArmor");
	}
 	else if(!strcmp(params, "addict", true))
	{
	    if(pData[playerid][pAddictUpgrade] >= 3)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your addict skill is already upgraded to its maximum level of 3.");
		}

  		if(pData[playerid][pCash] < cost)
		{
	    	return SM(playerid, COLOR_SYNTAX, "You need to have at least $%i on hand to buy this upgrade.", cost);
		}

		pData[playerid][pCash] -= cost;

		pData[playerid][pAddictUpgrade]++;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET addictupgrade = %i WHERE uid = %i", pData[playerid][pAddictUpgrade], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_YELLOW, "You upgraded your addict skill to level %i/3. You now gain %.1f more health & armor when using drugs.", pData[playerid][pAddictUpgrade], pData[playerid][pAddictUpgrade] * 5.0);
 	}
 	else if(!strcmp(params, "asset", true))
	{
	    if(pData[playerid][pAssetUpgrade] >= 4)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your asset skill is already upgraded to its maximum level of 4.");
		}
  		if(pData[playerid][pCash] < cost)
		{
	    	return SM(playerid, COLOR_SYNTAX, "You need to have at least $%i on hand to buy this upgrade.", cost);
		}

		pData[playerid][pCash] -= cost;

		pData[playerid][pAssetUpgrade]++;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET assetupgrade = %i WHERE uid = %i", pData[playerid][pAssetUpgrade], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_YELLOW, "You upgraded your asset skill to level %i/4. You can now own %i/%i houses and garages and %i/%i businesses and vehicles.", pData[playerid][pAssetUpgrade], GetPlayerAssetLimit(playerid, LIMIT_HOUSES), GetPlayerAssetLimit(playerid, LIMIT_GARAGES), GetPlayerAssetLimit(playerid, LIMIT_BUSINESSES), GetPlayerAssetLimit(playerid, LIMIT_VEHICLES));
 	}
	else if(!strcmp(params, "spawnhealth", true))
	{
	    if(pData[playerid][pSpawnHealth] >= 100)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your spawn health is at maximum (100).");
	    }
  		if(pData[playerid][pCash] < cost)
		{
	    	return SM(playerid, COLOR_SYNTAX, "You need to have at least $%i on hand to buy this upgrade.", cost);
		}

		pData[playerid][pCash] -= cost;

	    pData[playerid][pSpawnHealth] += 0.5;

	    SM(playerid, COLOR_YELLOW, "You have upgraded your spawn health. You will now spawn with %.1f health after death.", pData[playerid][pSpawnHealth]);
	}
	else if(!strcmp(params, "spawnarmor", true))
	{
	    if(pData[playerid][pSpawnArmor] > 25)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your spawn armor is at maximum (25).");
	    }
  		if(pData[playerid][pCash] < cost)
		{
	    	return SM(playerid, COLOR_SYNTAX, "You need to have at least $%i on hand to buy this upgrade.", cost);
		}

		pData[playerid][pCash] -= cost;

	    pData[playerid][pSpawnArmor] += 0.5;

	    SM(playerid, COLOR_YELLOW, "You have upgraded your spawn armor. You will now spawn with %.1f armor after death.", pData[playerid][pSpawnArmor]);
	}
	return 1;
}

CMD:buylevel(playerid, params[]) return callcmd::levelup(playerid, params);
CMD:levelup(playerid, params[])
{
	new
		exp = (pData[playerid][pLevel] * 4),
		cost = (pData[playerid][pLevel] + 1) * 150,
		string[64];

	if(pData[playerid][pEXP] < exp)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need %i more respect points in order to level up.", exp - pData[playerid][pEXP]);
	}
	if(pData[playerid][pCash] < cost)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need to have at least %s on hand to buy your next level.", FormatNumber(cost));
	}
	if(pData[playerid][pPassport])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have an active passport. You can't level up at the moment.");
	}
	pData[playerid][pEXP] -= exp;
	pData[playerid][pCash] -= cost;
	pData[playerid][pLevel]++;

	if(pData[playerid][pLevel] == 3 && pData[playerid][pReferralUID] > 0)
	{
	    ReferralCheck(playerid);
	}

	format(string, sizeof(string), "~g~Level Up~n~~w~You are now level %i", pData[playerid][pLevel]);
	GameTextForPlayer(playerid, string, 5000, 1);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET exp = exp - %i, cash = cash - %i, level = level + 1 WHERE uid = %i", exp, cost, pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(playerid, COLOR_YELLOW, "You have moved up to level %i.", pData[playerid][pLevel]);
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	return 1;
}

CMD:dollarrims(playerid, params[])
{
    if(IsPlayerConnected(playerid)) {
        if(pData[playerid][pAdmin] < 1) {
            SM(playerid, COLOR_SYNTAX, "You are not authorized to use that command!");
            return 1;
        }
        if(IsPlayerInAnyVehicle(playerid)) {
            AddVehicleComponent(GetPlayerVehicleID(playerid), 1083);
            SM(playerid, COLOR_SYNTAX, "   Dollar Rims Added to Vehicle!");
        }
    }
    return 1;
}

CMD:sr(playerid, params[]) {
	return callcmd::shadowrims(playerid, params);
}

CMD:shadowrims(playerid, params[])
{
	if(pData[playerid][pAdmin] < 1)
 	{
		return SM(playerid, COLOR_LIGHTRED, " You are not authorized to use that command.");
	}
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SCM(playerid, 0xFFFFFFFF, "You are not driving a vehicle.");
	AddVehicleComponent(GetPlayerVehicleID(playerid),1073);
    SCM(playerid, 0xFFFFFFFF, "You have added shadow rims to your vehicle.");
    return 1;
}

CMD:ctr(playerid, params[]) {
	return callcmd::cutterrims(playerid, params);
}

CMD:cutterrims(playerid, params[])
{
	if(pData[playerid][pAdmin] < 1)
 	{
		return SM(playerid, COLOR_LIGHTRED, " You are not authorized to use that command.");
	}
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SCM(playerid, 0xFFFFFFFF, "You are not driving a vehicle.");
	AddVehicleComponent(GetPlayerVehicleID(playerid),1079);
    SCM(playerid, 0xFFFFFFFF, "You have added cutter rims to your vehicle.");
    return 1;
}

CMD:gr(playerid, params[]) {
	return callcmd::goldrims(playerid, params);
}

CMD:goldrims(playerid, params[])
{
    if(IsPlayerConnected(playerid)) {
        if(pData[playerid][pAdmin] < 1) {
            SM(playerid, COLOR_SYNTAX, "You are not authorized to use that command!");
            return 1;
        }
        if(IsPlayerInAnyVehicle(playerid)) {
            AddVehicleComponent(GetPlayerVehicleID(playerid), 1080);
            SM(playerid, COLOR_SYNTAX, "Gold Rims Added to Vehicle!");
        }
    }
    return 1;
}

CMD:answer(playerid, params[])
{
	new param[32];
	if(sscanf(params, "S()[32]", param))
	{
		SCM(playerid, COLOR_SYNTAX, "Usage: /answer [text]");
		return 1;
	}
	if(isnull(quizAnswer))
	{
		return SCM(playerid, COLOR_SYNTAX, "There is no active quiz!");
	}
	if(!isnull(param))
	{
		if(!strcmp(quizAnswer, param, true))
		{
			SMA(COLOR_LIGHTRED, "%s has answered the quiz correctly. answer: "SVRCLR"%s", GetRPName(playerid), quizAnswer);
			quizQuestion[0] = EOS;
			quizAnswer[0] = EOS;
		}
		else
		{
			SCM(playerid, COLOR_SYNTAX, "Sorry bud, that ain't the right answer.");
		}
	}
	else
	{
		SCM(playerid, COLOR_SYNTAX, "Usage: /answer [text]");
	}
	return 1;
}
CMD:quiz(playerid, params[])
{
	new option[10], param[32];
	if(sscanf(params, "s[10]S()[32]", option, param))
	{
	    if(pData[playerid][pAdmin] >= 2)
	    {
			SCM(playerid, COLOR_SYNTAX, "Usage: /quiz [option]");
			SCM(playerid, COLOR_WHITE, "Available options: create, end, edit");
		}
		else
		{
		    SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
		}
		return 1;
	}
 	if(!strcmp(option, "create", true))
	{
	    if(pData[playerid][pAdmin] < 2) return 1;
		if(isnull(quizQuestion))
	    {
			if(CreateQuiz == -1)
			{
	        	ShowDialogToPlayer(playerid, DIALOG_CREATEQUIZ);
			}
		}
		else
		{
		    SCM(playerid, COLOR_SYNTAX, "There is already an on-going quiz!");
		}
		return 1;
	}
	else if(!strcmp(option, "end", true))
	{
	    if(pData[playerid][pAdmin] < 2) return 1;
	    if(!isnull(quizQuestion))
	    {
	        quizQuestion[0] = EOS;
            SMA(COLOR_LIGHTRED, "The quiz was ended by %s, answer: %s", GetRPName(playerid), quizAnswer);
			quizAnswer[0] = EOS;
	    }
	    return 1;
	}
	else if(!strcmp(option, "edit", true))
	{
	    if(pData[playerid][pAdmin] < 2) return 1;
		if(strlen(param) > 0)
		{
		    strcpy(quizAnswer, param);
			SAM(COLOR_LIGHTRED, "AdmCmd: %s changed the quiz answer to %s.", GetRPName(playerid), quizAnswer);
		}
		else
		{
		    SCM(playerid, COLOR_SYNTAX, "Usage: /quiz edit [answer]");
		}
	}
	return 1;
}

CMD:jobhelp(playerid)
{
	if(pData[playerid][pJob] == JOB_NONE && pData[playerid][pSecondJob] == JOB_NONE)
	{
		return SCM(playerid, COLOR_SYNTAX, "You have no job and therefore no job commands to view.");
	}

	switch(pData[playerid][pJob])
	{
		case JOB_FOODPANDA: SCM(playerid, COLOR_WHITE, "** Job: /getorder, /putmeal, /grabmeal, /cancelcp.");
		case JOB_COURIER: SCM(playerid, COLOR_WHITE, "** Job: /loadtruck, /deliver, /cancelcp.");
		case JOB_FISHERMAN: SCM(playerid, COLOR_WHITE, "** Job: /fish, /myfish, /sellfish.");
		case JOB_BODYGUARD: SCM(playerid, COLOR_WHITE, "** Job: /sellvest, /frisk.");
		case JOB_ARMSDEALER: SCM(playerid, COLOR_WHITE, "** Job: /getmats, /sellgun.");
		case JOB_MINER: SCM(playerid, COLOR_WHITE, "** Job: /cancelcp.");
		case JOB_TAXIDRIVER: SCM(playerid, COLOR_WHITE, "** Job: /setfare, /takecall.");
        case JOB_DRUGDEALER: SCM(playerid, COLOR_WHITE, "** Job: /planthelp, /getcrate.");
        case JOB_LAWYER: SCM(playerid, COLOR_WHITE, "** Job: /defend, /free, /wanted.");
        case JOB_DETECTIVE: SCM(playerid, COLOR_WHITE, "** Job: /find.");
        case JOB_GARBAGEMAN: SCM(playerid, COLOR_GREY, "*** JOB *** /garbage");
        case JOB_FORKLIFTER: SCM(playerid, COLOR_GREY, "*** JOB *** Hop in to forklift to begin");
        case JOB_LUMBERJACK: SCM(playerid, COLOR_GREY, "*** JOB *** /chop");
        case JOB_CONSTRUCTION: SCM(playerid, COLOR_WHITE, "** Job: /cancelcp.");
 	}

 	if(pData[playerid][pSecondJob] != JOB_NONE)
 	{
 	    switch(pData[playerid][pSecondJob])
		{
			case JOB_FOODPANDA: SCM(playerid, COLOR_WHITE, "** Secondary  Job: /getorder, /putmeal, /grabmeal, /cancelcp.");
			case JOB_COURIER: SCM(playerid, COLOR_WHITE, "** Secondary Job: /load, /deliver.");
			case JOB_FISHERMAN: SCM(playerid, COLOR_WHITE, "** Secondary Job: /fish, /myfish, /sellfish.");
			case JOB_BODYGUARD: SCM(playerid, COLOR_WHITE, "** Secondary Job: /sellvest, /frisk.");
			case JOB_ARMSDEALER: SCM(playerid, COLOR_WHITE, "** Secondary Job: /getmats, /sellgun.");
			case JOB_MINER: SCM(playerid, COLOR_WHITE, "** Secondary Job: /mine.");
			case JOB_TAXIDRIVER: SCM(playerid, COLOR_WHITE, "** Secondary Job: /setfare.");
	        case JOB_DRUGDEALER: SCM(playerid, COLOR_WHITE, "** Secondary Job: /getdrug, /planthelp, /getcrate.");
	        case JOB_LAWYER: SCM(playerid, COLOR_WHITE, "** Secondary Job: /defend, /free, /wanted.");
	        case JOB_DETECTIVE: SCM(playerid, COLOR_WHITE, "** Secondary Job: /find.");
	        case JOB_GARBAGEMAN: SCM(playerid, COLOR_GREY, "*** Secondary Job	 *** /garbage");
			case JOB_FORKLIFTER: SCM(playerid, COLOR_GREY, "*** Secondary Job *** Hop in to forklift to begin");
			case JOB_LUMBERJACK: SCM(playerid, COLOR_GREY, "*** Secondary Job *** /chop");
			case JOB_CONSTRUCTION: SCM(playerid, COLOR_WHITE, "** Secondary Job: /cancelcp.");
		}
	}

	return 1;
}

CMD:hghelp(playerid)
{
    SCM(playerid, SERVER_COLOR, "The Hunger Games Minigame:");
    SCM(playerid, COLOR_WHITE, "Players are taken to a vast island, where they must fight for survival,");
	SCM(playerid, COLOR_WHITE, "obtain better weapons (hidden in various parts of the arena) and eliminate opponents.");
    SCM(playerid, COLOR_WHITE, "The last man standing is the winner.");
    SCM(playerid, COLOR_YELLOW, "** HG: /joingame, /exitgame, /survivors, /hgwaiting");
    return 1;
}

CMD:vehiclehelp(playerid)
{
    SCM(playerid, COLOR_WHITE, "** Vehicle: /engine, /v lights, /v hood, /v trunk, /buyvehicle, /lock.");
    SCM(playerid, COLOR_WHITE, "** Vehicle: /vstash, /v neon, /unmod, /colorcar, /paintcar, /upgradevehicle, /sellcar, /sellmycar.");
    SCM(playerid, COLOR_WHITE, "** Vehicle: /v find, /givekeys, /takekeys, /setradio, /paytickets, /v info, /gascan.");
    SCM(playerid, COLOR_WHITE, "** Vehicle: /seatbelt, /checkmybelt, /checkbelt, /v windows.");
    return 1;
}

CMD:bankhelp(playerid)
{
	SCM(playerid, COLOR_WHITE, "** Bank: /bank /robbank, /invite, /setupvault.");
	return 1;
}

CMD:donatorhelp(playerid) return callcmd::viphelp(playerid);
CMD:viphelp(playerid)
{
	if(!pData[playerid][pDonator])
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you don't have a donator subscription.");
	}
	SCM(playerid, COLOR_VIP, "** Donator: /(dc)hat, /vipinfo, /vipinvite, /vipnumber");
	SCM(playerid, COLOR_VIP, "** Donator: /sellgun, /vcode, /viplocker");
	return 1;
}

CMD:fwsall(playerid, params[])
{
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(pData[playerid][pAdmin] >= 4)
	{
		if(sscanf(params, "s", "confirm"))
		{
			SM(playerid, COLOR_SYNTAX, "Usage: /fwsall [confirm]");
			return 1;
		}
		foreach(new i : Player)
		{
		    if(!pData[i][pLogged])
		        continue;

			GiveWeapon(i, 24);
			GiveWeapon(i, 25);
			GiveWeapon(i, 27);
			GiveWeapon(i, 31);
			//GiveWeapon(i, 34);
			SM(i, COLOR_AQUA, "You have received a full weapon set from %s.", GetRPName(playerid));
		}
		SMA(COLOR_LIGHTRED, "AdmCmd: %s has given a full weapon set to everyone.", GetRPName(playerid));
	}
	else
	{
		SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	return 1;
}

CMD:fws(playerid, params[])
{
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(pData[playerid][pAdmin] >= 4)
	{
		new targetid;
		if(sscanf(params, "ud", targetid))
		{
			SM(playerid, COLOR_SYNTAX, "Usage: /fws [playerid]");
			return 1;
		}

		GiveWeapon(targetid, 24);
		GiveWeapon(targetid, 25);
		GiveWeapon(targetid, 27);
		GiveWeapon(targetid, 31);
		//GiveWeapon(targetid, 34);
		SAM(COLOR_LIGHTRED, "AdmCmd: %s has given a full weapon set to %s.", GetRPName(playerid), GetRPName(targetid));
		SM(targetid, COLOR_AQUA, "You have received a full weapon set from %s.", GetRPName(playerid));
	}
	else
	{
		SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	return 1;
}

forward Slide(playerid);
public Slide(playerid)
{
    if(Sliding[playerid] == 1)
    {
		new Float:X;
		new Float:Y;
		new Float:Z;
		GetPlayerPos(playerid, X, Y, Z);
		SetPlayerPos(playerid, X, Y, Z - 5.00);
		SetTimerEx("Slide", 1000, 0, "i", playerid);
    }
	return 1;
}

forward IsAChopper(vehicleid);
public IsAChopper(vehicleid)
{
	if(vehicleid >= 0 && vehicleid <= 1) // < Define your Chopper ID's Here
	{
		return 1;
	}
	return 0;
}

//temoporary
CMD:slide(playerid, params[])
{
	new vehicleid;
	if(IsPlayerInAnyVehicle(playerid) && IsAChopper(vehicleid) && Sliding[playerid] == 0)
	{
		Sliding[playerid] = 1;
		RemovePlayerFromVehicle(playerid);
		TogglePlayerControllable(playerid, 0);
		SetTimerEx("Slide", 1000, 0, "i", playerid);
		SendClientMessage(playerid, COLOR_WHITE, "You are sliding down the rope.");
	}
	return 1;
}

CMD:stopp(playerid, params[])
{
	if(Sliding[playerid] == 1)
	{
		Sliding[playerid] = 0;
		TogglePlayerControllable(playerid, 1);
		SendClientMessage(playerid, COLOR_WHITE, "You have stopped sliding.");
	}
	return 1;
}

CMD:prmenu(playerid, params[])
{
	if(pData[playerid][pAdmin] < 3)
	{
		return SCM(playerid, COLOR_SYNTAX, "You must be a General Admin or above to use this.");
	}
	ShowPlayerDialog(playerid, DIALOG_PUBLICRELATION, DIALOG_STYLE_TABLIST, "Public Relation Menu",
	"Gang Section\n\
	"WHITE"     \n\
	Strike a Gang Here\tGang Moderator\n\
	Remove a Gang Here\tGang Moderator\n\
	Faction Section\n\
	"WHITE"     \n\
	Faction List\t\tNon-Admin/Administrator\n\
	Remove a Faction\tFaction Moderator", "Confirm", "Close");
	return 1;
}

CMD:factionhelp(playerid, params[])
{
    new string[2048];
	if(pData[playerid][pFaction] == -1)
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not apart of any faction.");
	}

	strcat(string, "** Radio: /fc, /(r)adio, /div, /faction, /division, /locker, /showbadge, /(m)egaphone.\n");

	switch(FactionInfo[pData[playerid][pFaction]][fType])
	{
	    case FACTION_POLICE:
	    {
	        strcat(string, "** Police: /open, /addjailtime, /revokeweaponlicense, /revokecarlicense, /tazer, /cuff, /uncuff, /drag, /detain, /charge, /arrest.\n");
	        strcat(string, "** Police: /frisk, /take, /ticket, /gov, /ram, /deploy, /undeploy, /undeployall.\n");
	        strcat(string, "** Police: /mdc, /siren, /badge, /vticket, /vfrisk, /vtake, /seizeplant.\n");
	        strcat(string, "** Police: /showtlaws, /showslaws, /giveweaponlic, /impound");
         	strcat(string, "** Auto: /po, /sto, /mir, /greet.\n");

			if(FactionInfo[pData[playerid][pFaction]][fType] == FACTION_FEDERAL)
				SCM(playerid, COLOR_LIGHTORANGE, "** Federal: /cctv, /listcallers, /trackcall, /passport, /checkcargo, /d, /callsign");
			else
			    strcat(string, "** Federal: /cctv, /listcallers, /trackcall, /checkcargo, /d, /callsign");
		}
	    case FACTION_FEDERAL:
	    {
	        strcat(string, "** Federal: /open, /addjailtime, /revokeweaponlicense, /revokecarlicense,/tazer, /cuff, /uncuff, /drag, /detain, /charge, /arrest.\n");
	        strcat(string, "** Federal: /frisk, /take, /ticket, /gov, /ram, /deploy, /undeploy, /undeployall.\n");
	        strcat(string, "** Federal: /mdc, /siren, /badge, /vticket, /vfrisk, /vtake, /seizeplant.\n");
	        strcat(string, "** Federal: /showtlaws, /showslaws, /giveweaponlic, /impound");
         	strcat(string, "** Auto: /po, /sto, /mir, /greet.\n");

			if(FactionInfo[pData[playerid][pFaction]][fType] == FACTION_FEDERAL)
				SCM(playerid, COLOR_LIGHTORANGE, "** Federal: /cctv, /listcallers, /trackcall, /passport, /checkcargo, /d, /callsign");
			else
			    strcat(string, "** Federal: /cctv, /listcallers, /trackcall, /checkcargo, /d, /callsign");
		}
	    case FACTION_SHERIFF:
	    {
	        strcat(string, "** Sheriff: /open, /addjailtime, /revokeweaponlicense, /revokecarlicense, /tazer, /cuff, /uncuff, /drag, /detain, /charge, /arrest.\n");
	        strcat(string, "** Sheriff: /frisk, /take, /ticket, /gov, /ram, /deploy, /undeploy, /undeployall.\n");
	        strcat(string, "** Sheriff: /mdc, /siren, /badge, /vticket, /vfrisk, /vtake, /seizeplant.\n");
	        strcat(string, "** Sheriff: /showtlaws, /showslaws, /giveweaponlic, /impound");
         	strcat(string, "** Auto: /po, /sto, /mir, /greet.\n");

			if(FactionInfo[pData[playerid][pFaction]][fType] == FACTION_FEDERAL)
				SCM(playerid, COLOR_LIGHTORANGE, "** Federal: /cctv, /listcallers, /trackcall, /passport, /checkcargo, /d, /callsign");
			else
			    strcat(string, "** Federal: /cctv, /listcallers, /trackcall, /checkcargo, /d, /callsign");
		}
		case FACTION_MEDIC:
		{
		    strcat(string, "** Medic: /bed, /firstaid, /stretcher(/loadpt), /surgery, /getpt, /injuries, /deploy, /undeploy.\n");
		    strcat(string, "** Medic: /movept, /badge, /gov, /listcallers, /trackcall, /d, /callsign, /undeployall, /heal.\n");
  			strcat(string, "** Auto: /po, /medic.\n");
		}
		case FACTION_NEWS:
		{
		    strcat(string, "** News: /news, /live, /endlive, /liveban, /phonebook");
		}
		case FACTION_MECHANIC:
		{
		    strcat(string, "** Mech: /tune, /repair, /tow, /untow, /refill, /nos, /hyd, /takecall");
			strcat(string, "** Mech: /upgradevehicle, /v neon, /paintcar, /colorcar, /unmod, /impound");
		}
		case FACTION_GOVERNMENT:
		{
		    strcat(string, "** Goverment: /gov, /settax, /factionpay, /tazer, /cuff, /uncuff, /detain, /taxdeposit, /taxwithdraw.\n");
		    strcat(string, "** Goverment: /badge, /d, /flash");
		}
 	    case FACTION_DOC:
	    {
	        strcat(string, "** DOC: /listjailtime, /open, /addjailtime, /release, /cell, /cells, /tazer, /rubberbullets, /cuff, /uncuff, /drag, /detain, /charge, /arrest.\n");
	        strcat(string, "** DOC: /confiscate, /gov, /deploy, /undeploy, /undeployall.\n");
	        strcat(string, "** DOC: /mdc, /siren, /badge, /placeradar.\n");
			strcat(string, "** DOC: /cctv, /d, /callsign, /surgery, /medic\n");
		}
		case FACTION_HITMAN:
		{
		    strcat(string, "** Hitman: /contracts, /takehit, /profile, /passport, /plantbomb, /pickupbomb, /detonate, /hmole, /hfind");
		}
	}
	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Current commands on "SVRCLR"Coqneuror City Roleplay", string, "Close","");
	return 1;
}

CMD:ganghelp(playerid, params[])
{
    new string[2048];
	if(pData[playerid][pGang] == -1)
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a gang member.");
	}

	strcat(string, "** Gang:  /gang, /gstash, /bandana, /clothes, /capture, /claim, /reclaim, /turfinfo, /points..\n");
    strcat(string, "** Gang: /endalliance..\n");
	strcat(string, "** Gang: /getmats, /sellgun, /getdrug, /planthelp, /getcrate.\n");
	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Current commands on "SVRCLR"Coqneuror City Roleplay", string, "Close","");
	return 1;
}

CMD:landhelp(playerid, params[])
{
    SCM(playerid, COLOR_WHITE, "** Land: /buyland, /lock, /lopen, /landinfo, /land, /sellmyland, /sellland, /lands.");
    return 1;
}

CMD:planthelp(playerid, params[])
{
	if(pData[playerid][pGang] == -1)
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a gang member.");
	}
    SCM(playerid, COLOR_WHITE, "** Plant: /plantpot, /plantinfo, /pickplant.");
    return 1;
}

CMD:o(playerid, params[]) return callcmd::ooc(playerid, params);
CMD:ooc(playerid, params[])
{
	new string[64];

	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /(o)oc [global OOC]");
	}
	if(!enabledOOC && pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The global OOC channel is disabled at the moment.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(pData[playerid][pToggleOOC])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't speak in the OOC chat as you have it toggled.");
	}

	if((!isnull(pData[playerid][pCustomTitle]) && strcmp(pData[playerid][pCustomTitle], "None", true) != 0 && strcmp(pData[playerid][pCustomTitle], "0", true) != 0) && strcmp(pData[playerid][pCustomTitle], "NULL", true) != 0) {
	    new color;
		if(pData[playerid][pCustomTColor] == -1 || pData[playerid][pCustomTColor] == -256)
		{
	    	color = 0xC8C8C8FF;
		}
		else
		{
		    color = pData[playerid][pCustomTColor];
		}
	    format(string, sizeof(string), "{%06x}%s %s{CCFFFF}", color >>> 8, pData[playerid][pCustomTitle], GetRPName(playerid));

	}
	else if(pData[playerid][pStaffLeader])
	{
		format(string, sizeof(string), "%s{FFFFFF} %s", GetStaffLeaderRank(playerid), GetRPName(playerid));
	}
	else if(pData[playerid][pStaff])
	{
		format(string, sizeof(string), "%s{FFFFFF} %s", GetAdminDivisionFull(playerid), GetRPName(playerid));
	}
	/*else if(pData[playerid][pDeveloper])
	{
		format(string, sizeof(string), "Developer %s", GetRPName(playerid));
	}*/
	else if(pData[playerid][pAdmin] > 1) {
		format(string, sizeof(string), "Administrator %s", GetRPName(playerid));
	} else if(pData[playerid][pHelper] > 0) {
	    format(string, sizeof(string), "%s %s", GetHelperRank(playerid), GetRPName(playerid));
    } else if(pData[playerid][pFormerAdmin]) {
	    format(string, sizeof(string), "Former Admin{CCFFFF} %s", GetRPName(playerid));
	} /*else if(pData[playerid][pDonator] > 0) {
	    format(string, sizeof(string), "%s Donator"WHITE" %s", GetDonatorRank(pData[playerid][pDonator]), GetRPName(playerid));
	}*/ else {
	    format(string, sizeof(string), "Level %i Player %s", pData[playerid][pLevel], GetRPName(playerid));
	}

	foreach(new i : Player)
	{
	    if(!pData[i][pToggleOOC])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
				SM(i, COLOR_OOC, "(( %s: %.*s... ))", string, MAX_SPLIT_LENGTH, params);
				SM(i, COLOR_OOC, "((%s: ...%s ))", string, params[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SM(i, COLOR_OOC, "(( %s: %s ))", string, params);
			}
		}
	}

	return 1;
}

/*CMD:newb(playerid, params[])
{
	return callcmd::newbie(playerid, params);
}

CMD:n(playerid, params[])
{
	return callcmd::newbie(playerid, params);
}

CMD:newbie(playerid, params[])
{
	new string[280];
	if(pData[playerid][pVerified] == 0)
	{
		return SCM(playerid, COLOR_RED, "You cannot use this command while not verified.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /(n)ewb [newbie chat]");
	}
	if(pData[playerid][pNewbieMuted])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are muted from speaking in this channel. /unmute to unmute yourself.");
	}
	if(gettime() - pData[playerid][pLastNewbie] < 30)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You can only speak in this channel every 30 seconds. Please wait %i more seconds.", 30 - (gettime() - pData[playerid][pLastNewbie]));
	}
	if(pData[playerid][pToggleNewbie])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't speak in the newbie chat as you have it toggled.");
	}

	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot send no question!");
	if(strlen(params) > 110) return SendClientMessageEx(playerid, COLOR_GREY, "That message is too long!");
	format(string, sizeof(string), ""YELLOW"New Question! {7DAEFF}%s(%d): %s", GetRPName(playerid), playerid, params);
	SendStaffMessage(COLOR_NEWBIE, string);
	SendQuestionToStaff(COLOR_NEWBIE, "** /nanswer (/na) to asnwer | /trashnewb (/tn) to trash **");
	SetPVarInt(playerid, "SendQuestion", 1);
	SetPVarString(playerid, "Question", params);
	SendClientMessage(playerid, COLOR_WHITE, "(( Your question was successfully submitted to "SERVER_NAME"'s staffs. ))");
	//ShowDialogToPlayer(playerid, DIALOG_NEWBIE);

	return 1;
}*/

CMD:na(playerid, params[]) return callcmd::nanswer(playerid, params);
CMD:nanswer(playerid, params[])
{
	if(pData[playerid][pHelper] >= 4 || pData[playerid][pAdmin] >= 2)
	{
	    new giveplayerid, string[300], answer[128], question[128];
		if(sscanf(params, "us[128]", giveplayerid, answer)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /(n)ewb(a)nswer (playerid) (answer)");
		if(GetPVarInt(giveplayerid, "SendQuestion") == 0) return SendClientMessageEx(playerid, COLOR_GREY, "That player isn't asking");
		format(string, sizeof(string), "* Staff %s has answered your Question", GetRPName(playerid));
		SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
		GetPVarString(giveplayerid, "Question", question, sizeof(question));
		foreach(new n: Player)
		{
		    if(!pData[n][pToggleNewbie])
		    {
			    format(string, sizeof(string), "Question: %s: %s", GetRPName(giveplayerid), question);
			    SendClientMessageEx(n, COLOR_NEWBIE, string);
			    if(pData[playerid][pHelper] > 0 && pData[playerid][pAdmin] < 2)
			    {
					format(string, sizeof(string), "Answer: %s: %s", GetRPName(playerid), answer);
					pData[playerid][pNewbies]++;
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET newbies = %i WHERE uid = %i", pData[playerid][pNewbies], pData[playerid][pID]);
					mysql_tquery(connectionID, queryBuffer);
				}
				if(pData[playerid][pHelper] > 0 && pData[playerid][pAdmin] < 1) format(string, sizeof(string), "Answer: Advisor %s: %s", GetRPName(playerid), answer);
				if(pData[playerid][pAdmin] > 0) format(string, sizeof(string), "Answer: Administrator %s: %s", GetRPName(playerid), answer);
				SendClientMessageEx(n, COLOR_NEWBIE, string);
			}
		}
		/*DeletePVar(giveplayerid, "SendQuestion");
		DeletePVar(giveplayerid, "Question");*/
		return 1;
	}
	else SendClientMessage(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	return 1;

}
CMD:tn(playerid, params[]) return callcmd::trashnewb(playerid, params);
CMD:trashnewb(playerid, params[])
{
    if(pData[playerid][pHelper] >= 4 || pData[playerid][pAdmin] >= 2)
	{
	    new giveplayerid, string[128], reason[128];
		if(sscanf(params, "us[128]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /trashnewb (playerid) (text)");
		if(GetPVarInt(giveplayerid, "SendQuestion") == 0) return SendClientMessageEx(playerid, COLOR_GREY, "That player isn't asking");
		format(string, sizeof(string), "* {33CCFF}%s %s has trashed your question. Reason: %s", GetStaffRank(playerid), GetRPName(playerid), reason);
		SendClientMessageEx(giveplayerid, 0x00FFFFFF, string);
		format(string, sizeof(string), "* {33CCFF}%s %s has trashed %s question. Reason: %s", GetStaffRank(playerid), GetRPName(playerid),GetRPName(giveplayerid), reason);
		SendQuestionToStaff(0x00FFFFFF, string);
		DeletePVar(giveplayerid, "SendQuestion");
		DeletePVar(giveplayerid, "Question");
		return 1;
	}
	else SendClientMessageEx(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	return 1;
}

CMD:wala(playerid, params[]) return 1;

CMD:id(playerid, params[])
{
	new count, color, name[MAX_PLAYER_NAME], targetid = strval(params);

	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /id [playerid/partial name]");
	}

	if(IsNumeric(params))
	{
		if(IsPlayerConnected(targetid))
		{
		    if((color = GetPlayerColor(targetid)) == 0xFFFFFF00) {
		        color = 0xAAAAAAFF;
			}

		    GetPlayerName(targetid, name, sizeof(name));
		    SM(playerid, COLOR_WHITE, "(ID: %i) {%06x}%s{AAAAAA} - (Level: %i) - (Ping: %i) - (Platform: %s)", targetid, color >>> 8, name, pData[targetid][pLevel], GetPlayerPing(targetid), GetPlayerPlatform(targetid));
		}
		else
		{
		    SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
		}
	}
	else if(strlen(params) < 2)
	{
	    SCM(playerid, COLOR_SYNTAX, "Please input at least two characters to search.");
	}
	else
	{
	    foreach(new i : Player)
	    {
	        GetPlayerName(i, name, sizeof(name));

	        if(strfind(name, params, true) != -1)
	        {
	            if((color = GetPlayerColor(i)) == 0xFFFFFF00) {
		        	color = 0xAAAAAAFF;
				}

	            SM(playerid, COLOR_WHITE, "(ID: %i) {%06x}%s{AAAAAA} - (Level: %i) - (Ping: %i) - (Platform: %s)", i, color >>> 8, name, pData[i][pLevel], GetPlayerPing(i), GetPlayerPlatform(i));
	            count++;
			}
		}

		if(!count)
		{
		    SM(playerid, COLOR_SYNTAX, "No results found for \"%s\". Please narrow your search.", params);
		}
	}

	return 1;
}

CMD:panel(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER || pData[playerid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be driving a vehicle to use this command.");
	}

	if(pData[playerid][pToggleVehiclePanel] == 0)
	{
		pData[playerid][pToggleVehiclePanel] = 1;
		SelectTextDraw(playerid, COLOR_SAMP);
		ShowVehiclePanel(playerid);
	}
	else
	{
		pData[playerid][pToggleVehiclePanel] = 0;
		HideVehiclePanel(playerid);
		CancelSelectTextDraw(playerid);
	}
	return 1;
}

ShowVehiclePanel(playerid)
{
	PlayerTextDrawShow(playerid, VehiclePanelTD[playerid][0]);
	PlayerTextDrawShow(playerid, VehiclePanelTD[playerid][1]);
	PlayerTextDrawShow(playerid, VehiclePanelTD[playerid][2]);
	PlayerTextDrawShow(playerid, VehiclePanelTD[playerid][3]);
	PlayerTextDrawShow(playerid, VehiclePanelTD[playerid][4]);
	PlayerTextDrawShow(playerid, VehiclePanelTD[playerid][5]);
	PlayerTextDrawShow(playerid, VehiclePanelTD[playerid][6]);
	PlayerTextDrawShow(playerid, VehiclePanelTD[playerid][7]);
	PlayerTextDrawShow(playerid, VehiclePanelTD[playerid][8]);
	PlayerTextDrawShow(playerid, VehiclePanelTD[playerid][9]);
	PlayerTextDrawShow(playerid, VehiclePanelTD[playerid][10]);
}

CheckVehiclePanel(playerid)
{
	new string[128], vehicleid = GetPlayerVehicleID(playerid);
	if(!GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	{
		PlayerTextDrawSetString(playerid, VehiclePanelTD[playerid][3], "Engine ~r~Off");
	}
	else
	{
		PlayerTextDrawSetString(playerid, VehiclePanelTD[playerid][3], "Engine ~g~On");
	}

	if(VehicleInfo[vehicleid][vLocked])
	{
		PlayerTextDrawSetString(playerid, VehiclePanelTD[playerid][4], "Lock ~g~Yes");
	}
	else
	{
		PlayerTextDrawSetString(playerid, VehiclePanelTD[playerid][4], "Lock ~r~No");
	}
	if(GetVehicleParams(vehicleid, VEHICLE_BONNET))
	{
		PlayerTextDrawSetString(playerid, VehiclePanelTD[playerid][7], "Hood ~g~Open");
	}
	else
	{
		PlayerTextDrawSetString(playerid, VehiclePanelTD[playerid][7], "Hood ~r~Closed");
	}
	if(GetVehicleParams(vehicleid, VEHICLE_BOOT))
	{
		PlayerTextDrawSetString(playerid, VehiclePanelTD[playerid][8], "Trunk ~g~Open");
	}
	else
	{
		PlayerTextDrawSetString(playerid, VehiclePanelTD[playerid][8], "Trunk ~r~Closed");
	}
	if(GetVehicleParams(vehicleid, VEHICLE_LIGHTS))
	{
		PlayerTextDrawSetString(playerid, VehiclePanelTD[playerid][9], "Lights ~g~Open");
	}
	else
	{
		PlayerTextDrawSetString(playerid, VehiclePanelTD[playerid][9], "Lights ~r~Closed");
	}
	if(CarWindows[vehicleid])
	{
		PlayerTextDrawSetString(playerid, VehiclePanelTD[playerid][10], "Windows ~g~Open");
	}
	else
	{
		PlayerTextDrawSetString(playerid, VehiclePanelTD[playerid][10], "Windows ~r~Closed");
	}
	
	format(string, sizeof(string), "Tickets: %s$", FormatNumber(VehicleInfo[vehicleid][vTickets]));
	PlayerTextDrawSetString(playerid, VehiclePanelTD[playerid][6], string);

	format(string, sizeof(string), "Gasoline: %i", vehicleFuel[vehicleid]);
	PlayerTextDrawSetString(playerid, VehiclePanelTD[playerid][5], string);
	format(string, sizeof(string), "Tickets: %s$", FormatNumber(VehicleInfo[vehicleid][vTickets]));
	PlayerTextDrawSetString(playerid, VehiclePanelTD[playerid][6], string);
}

HideVehiclePanel(playerid)
{
	PlayerTextDrawHide(playerid, VehiclePanelTD[playerid][0]);
	PlayerTextDrawHide(playerid, VehiclePanelTD[playerid][1]);
	PlayerTextDrawHide(playerid, VehiclePanelTD[playerid][2]);
	PlayerTextDrawHide(playerid, VehiclePanelTD[playerid][3]);
	PlayerTextDrawHide(playerid, VehiclePanelTD[playerid][4]);
	PlayerTextDrawHide(playerid, VehiclePanelTD[playerid][5]);
	PlayerTextDrawHide(playerid, VehiclePanelTD[playerid][6]);
	PlayerTextDrawHide(playerid, VehiclePanelTD[playerid][7]);
	PlayerTextDrawHide(playerid, VehiclePanelTD[playerid][8]);
	PlayerTextDrawHide(playerid, VehiclePanelTD[playerid][9]);
	PlayerTextDrawHide(playerid, VehiclePanelTD[playerid][10]);
}

CMD:pay(playerid, params[])
{
    new targetid, amount;

    if(sscanf(params, "ui", targetid, amount))
    {
        return SCM(playerid, COLOR_SYNTAX, "Usage: /pay [playerid] [amount]");
    }
    if(gettime() - pData[playerid][pLastPay] < 3)
    {
        return SCM(playerid, COLOR_SYNTAX, "Please wait three seconds between each transaction.");
    }
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
    {
        return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
    }
    if(targetid == playerid)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't pay yourself.");
    }
    if(amount > pData[playerid][pCash])
    {
        return SCM(playerid, COLOR_SYNTAX, "You don't have that much.");
    }
    if(amount < 1)
    {
        return SM(playerid, COLOR_SYNTAX, "Invalid amount");
    }

    pData[playerid][pLastPay] = gettime();

    GivePlayerCash(playerid, -amount);
    GivePlayerCash(targetid, amount);

    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
    PlayerPlaySound(targetid, 1052, 0.0, 0.0, 0.0);

    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes out $%i and gives it to %s.", GetRPName(playerid), amount, GetRPName(targetid));
    Log_Write("log_give", "%s (uid: %i) (IP: %s) gives $%i to %s (uid: %i) (IP: %s)", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerIP(playerid), amount, GetPlayerNameEx(targetid), pData[targetid][pID], GetPlayerIP(targetid));

    SM(targetid, COLOR_AQUA, "You have been given $%i by %s.", amount, GetRPName(playerid));
    SM(playerid, COLOR_AQUA, "You have given "SVRCLR"$%i{CCFFFF} to %s.", amount, GetRPName(targetid));

	SAM(COLOR_YELLOW, "AdmWarning: %s has given $%i to %s.", GetRPName(playerid), amount, GetRPName(targetid));

    if(!strcmp(GetPlayerIP(playerid), GetPlayerIP(targetid)))
    {
        SAM(COLOR_YELLOW, "AdmWarning: %s (IP: %s) has given $%i to %s (IP: %s).", GetRPName(playerid), GetPlayerIP(playerid), amount, GetRPName(targetid), GetPlayerIP(targetid));
    }

    return 1;
}

CMD:fixlands(playerid, params[])
{
	return callcmd::reloadlands(playerid, params);
}

CMD:reloadlands(playerid, params[])
{
	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(gettime() - gLastFix < 60)
	{
	    return SM(playerid, COLOR_SYNTAX, "This command can only be used every 1 minute. Please wait %i more seconds.", 60 - (gettime() - gLastFix));
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /reloadlands [confirm]");
	    SCM(playerid, COLOR_WHITE, "This command may cause lag to the server. Abusing this will cause in a permanent ban.");
	    return 1;
	}
	for(new i = 0; i < MAX_OBJECTS; i ++)
	{
	    if(IsValidObject(i) && gScriptObject{i})
	    {
	        DestroyObject(i);
		}
	}
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has reloaded all lands and their objects.", GetRPName(playerid));
	gLastFix = gettime();
	return 1;
}

CMD:resetbackpack(playerid, params[])
{
	new targetid;
	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /resetbackpack [playerid]");
	    SCM(playerid, COLOR_SYNTAX, "** This command removes the player's backpack and all items inside it.");
	    return 1;
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	ResetBackpack(targetid);
	SM(targetid, COLOR_LIGHTRED, "Administrator %s has reset your backpack and all its items.", GetRPName(playerid));
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has reset %s's backpack and all its items.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}
CMD:revokeweaponlicense(playerid, params[])
{

    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't apart of law enforcement.");
	}
	new targetid;
	if(sscanf(params, "i", targetid)) return SendClientMessage(playerid, COLOR_GREY, "Usage: /revokeweaponlicense [target]");
	if (pData[targetid][pWeaponLicense] == 0)
	{
		return SendClientMessage(playerid, -1, "The specified target doesn't have a weapon license.");
	}
	else
	{
	    pData[targetid][pWeaponLicense] = 0;
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gunlicense = %d WHERE uid = %i", pData[targetid][pWeaponLicense], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		ShowActionBubble(playerid, "* %s revoke %s's gun license.", GetRPName(playerid), GetRPName(targetid));
		SendClientMessageEx(playerid, COLOR_WHITE, "You have revoked %s's gun license.", GetRPName(targetid));
		SendClientMessageEx(targetid, COLOR_WHITE, "%s has revoked your weapon license.", GetRPName(playerid));
	}
	return 1;
}
CMD:revokecarlicense(playerid, params[])
{

    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't apart of law enforcement.");
	}
	new targetid;
	if(sscanf(params, "i", targetid)) return SendClientMessage(playerid, COLOR_GREY, "Usage: /revokecarlicense [target]");
	if (pData[targetid][pCarLicense] == 0)
	{
		return SendClientMessage(playerid, -1, "The specified target doesn't have a car license.");
	}
	else
	{
	    pData[targetid][pCarLicense] = 0;
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET carlicense = %d WHERE uid = %i", pData[targetid][pCarLicense], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		ShowActionBubble(playerid, "* %s revoke %s's car license.", GetRPName(playerid), GetRPName(targetid));
		SendClientMessageEx(playerid, COLOR_WHITE, "You have revoked %s's car license.", GetRPName(targetid));
		SendClientMessageEx(targetid, COLOR_WHITE, "%s has revoked your car license.", GetRPName(playerid));
	}
	return 1;
}
CMD:giveweaponlic(playerid, params[])
{
	new targetid;
	if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_GREY2, "You are not a part of law enforcement.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    SCM(playerid, COLOR_GREY2, "Usage: /giveweaponlic [playerid]");
	    return 1;
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_GREY2, "The player specified is disconnected.");
	}
	if(pData[targetid][pWeaponLicense] == 1) {
		return SCM(playerid, COLOR_GREY2, "The player has already have weapon license.");
	}

	pData[targetid][pWeaponLicense] = 1;
	pData[targetid][pWeaponLicenseTime] = gettime() + 1209600;
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gunlicense = %i, gunlicensetime = 1209600 WHERE uid = %i", pData[targetid][pWeaponLicense], pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(targetid, COLOR_WHITE, "** %s has given you a weapon license.", GetRPName(playerid));
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has given %s a weapon license.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:givebackpack(playerid, params[])
{
	new targetid, size[10];
	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[14]S()[32]", targetid, size))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /givebackpack [playerid] [size]");
	    SCM(playerid, COLOR_WHITE, "Sizes:   Small, Medium, Large");
	    return 1;
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!strcmp(size, "small", true))
	{
		pData[targetid][pBackpack] = 1;
	    SM(targetid, COLOR_WHITE, "** %s has given you a small backpack.", GetRPName(playerid));
	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has given %s a small backpack.", GetRPName(playerid), GetRPName(targetid));
	}
	if(!strcmp(size, "medium", true))
	{
		pData[targetid][pBackpack] = 2;
	    SM(targetid, COLOR_WHITE, "** %s has given you a medium backpack.", GetRPName(playerid));
	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has given %s a medium backpack.", GetRPName(playerid), GetRPName(targetid));
	}
	if(!strcmp(size, "large", true))
	{
		pData[targetid][pBackpack] = 3;
	    SM(targetid, COLOR_WHITE, "** %s has given you a large backpack.", GetRPName(playerid));
	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has given %s a large backpack.", GetRPName(playerid), GetRPName(targetid));
	}
	return 1;
}
CMD:give(playerid, params[])
{
	new targetid, option[14], param[32], amount;

	if(sscanf(params, "us[14]S()[32]", targetid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Weapon, Materials, Pot, Crack, Meth, Painkillers, Cigars, Spraycans");
	    SCM(playerid, COLOR_WHITE, "Available options: GasCan, Seeds, Ephedrine, DirtyCash, Diamonds");
	    SCM(playerid, COLOR_WHITE, "Available options: Bandage, Medkit, Repairkit, Food, Drink, Parts");
	    return 1;
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
	}
    if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pJailTime] > 0 || pData[playerid][pJoinedEvent] > 0 || pData[playerid][pPaintball])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}

	if(!strcmp(option, "weapon", true))
	{
	    new weaponid = GetScriptWeapon(playerid);

	    if(!weaponid)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You must be holding the weapon you're willing to give away.");
	    }
	    if(pData[targetid][pWeapons][weaponSlotIDs[weaponid]] > 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player already has a weapon in that slot.");
	    }
	    if(pData[targetid][pWeaponRestricted] > 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player is either weapon restricted or played less than two playing hours.");
	    }
	    if(pData[playerid][pFaction] >= 0 && pData[targetid][pFaction] != pData[playerid][pFaction])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can only give away weapons to your own faction members.");
	    }

	    GiveWeapon(targetid, weaponid);
	    RemovePlayerWeapon(playerid, weaponid);

	    SM(targetid, COLOR_AQUA, "%s has given you their %s.", GetRPName(playerid), GetWeaponNameEx(weaponid));
	    SM(playerid, COLOR_AQUA, "You have given %s your %s.", GetRPName(targetid), GetWeaponNameEx(weaponid));

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s passes over their %s to %s.", GetRPName(playerid), GetWeaponNameEx(weaponid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives their %s to %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], GetWeaponNameEx(weaponid), GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "food", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [food] [amount]");
		}
		if(amount < 1 || amount > pData[playerid][pFood])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}

		pData[playerid][pFood] -= amount;
		pData[targetid][pFood] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET food = %i WHERE uid = %i", pData[playerid][pFood], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET food = %i WHERE uid = %i", pData[targetid][pFood], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i food.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i food to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some food to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i food to %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "drink", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [drink] [amount]");
		}
		if(amount < 1 || amount > pData[playerid][pDrink])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}

		pData[playerid][pDrink] -= amount;
		pData[targetid][pDrink] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET drink = %i WHERE uid = %i", pData[playerid][pDrink], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET drink = %i WHERE uid = %i", pData[targetid][pDrink], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i drink.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i drink to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some food to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i drink to %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "vest", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [vest] [amount]");
		}
		if(amount < 1 || amount > pData[playerid][pVest])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}

		pData[playerid][pVest] -= amount;
		pData[targetid][pVest] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vest = %i WHERE uid = %i", pData[playerid][pVest], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vest = %i WHERE uid = %i", pData[targetid][pVest], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i vest.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i vest to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some vest to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i vest to %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "parts", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [parts] [amount]");
		}
		if(amount < 1 || amount > pData[playerid][pParts])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}
        if(pData[targetid][pParts] >= 20)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player can't have more 20 repairkits.");
	    }

		pData[playerid][pParts] -= amount;
		pData[targetid][pParts] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET parts = %i WHERE uid = %i", pData[playerid][pParts], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET parts = %i WHERE uid = %i", pData[targetid][pParts], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i vehicle parts.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i vehicle parts to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some vehiicle parts to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i vehicle parts to %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "repairkit", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [repairkit] [amount]");
		}
		if(amount < 1 || amount > pData[playerid][pRepairKit])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}
        if(pData[targetid][pRepairKit] >= 20)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player can't have more 20 repairkits.");
	    }

		pData[playerid][pRepairKit] -= amount;
		pData[targetid][pRepairKit] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET repairkit = %i WHERE uid = %i", pData[playerid][pRepairKit], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET repairkit = %i WHERE uid = %i", pData[targetid][pRepairKit], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i repairkit.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i repairkit to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some repairkit to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i repairkit to %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "bandage", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [bandage] [amount]");
		}
		if(amount < 1 || amount > pData[playerid][pBandage])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}

		pData[playerid][pBandage] -= amount;
		pData[targetid][pBandage] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET firstaid = %i WHERE uid = %i", pData[playerid][pBandage], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET firstaid = %i WHERE uid = %i", pData[targetid][pBandage], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i bandage.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i bandage to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives bandage to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i bandage to %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "medkit", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [medkit] [amount]");
		}
		if(amount < 1 || amount > pData[playerid][pMedkit])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}

		pData[playerid][pMedkit] -= amount;
		pData[targetid][pMedkit] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET medkit = %i WHERE uid = %i", pData[playerid][pMedkit], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET medkit = %i WHERE uid = %i", pData[targetid][pMedkit], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i medkit.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i medkit to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives medkit to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i medkit to %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "materials", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [materials] [amount]");
		}
		if(amount < 1 || amount > pData[playerid][pMaterials])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}
		if(pData[targetid][pMaterials] + amount > GetPlayerCapacity(CAPACITY_MATERIALS))
		{
		    return SM(playerid, COLOR_SYNTAX, "That player can't carry that much more materials.");
		}

		pData[playerid][pMaterials] -= amount;
		pData[targetid][pMaterials] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", pData[playerid][pMaterials], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", pData[targetid][pMaterials], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i materials.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i materials to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some materials to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i materials to %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "pot", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [pot] [amount]");
		}
		if(amount < 1 || amount > pData[playerid][pPot])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}
		if(pData[targetid][pPot] + amount > GetPlayerCapacity(CAPACITY_WEED))
		{
		    return SM(playerid, COLOR_SYNTAX, "That player can't carry that much more pot.");
		}

		pData[playerid][pPot] -= amount;
		pData[targetid][pPot] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", pData[playerid][pPot], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", pData[targetid][pPot], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i grams of pot.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i grams of pot to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some pot to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i grams of pot to %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "crack", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [Crack] [amount]");
		}
		if(amount < 1 || amount > pData[playerid][pCrack])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}
		if(pData[targetid][pCrack] + amount > GetPlayerCapacity(CAPACITY_COCAINE))
		{
		    return SM(playerid, COLOR_SYNTAX, "That player can't carry that much more Crack.");
		}

		pData[playerid][pCrack] -= amount;
		pData[targetid][pCrack] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", pData[playerid][pCrack], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", pData[targetid][pCrack], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i grams of crack.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i grams of crack to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some Crack to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i grams of Crack to %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "meth", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [meth] [amount]");
		}
		if(amount < 1 || amount > pData[playerid][pMeth])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}
		if(pData[targetid][pMeth] + amount > GetPlayerCapacity(CAPACITY_METH))
		{
		    return SM(playerid, COLOR_SYNTAX, "That player can't carry that much more meth.");
		}

		pData[playerid][pMeth] -= amount;
		pData[targetid][pMeth] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", pData[playerid][pMeth], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", pData[targetid][pMeth], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i grams of meth.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i grams of meth to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some meth to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i grams of meth to %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "painkillers", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [painkillers] [amount]");
		}
		if(amount < 1 || amount > pData[playerid][pPainkillers])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}
		if(pData[targetid][pPainkillers] + amount > GetPlayerCapacity(CAPACITY_PAINKILLERS))
		{
		    return SM(playerid, COLOR_SYNTAX, "That player can't carry that much more painkillers.");
		}

		pData[playerid][pPainkillers] -= amount;
		pData[targetid][pPainkillers] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", pData[playerid][pPainkillers], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", pData[targetid][pPainkillers], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i painkillers.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i painkillers to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some painkillers to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i painkillers to %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "cigars", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [cigars] [amount]");
		}
		if(amount < 1 || amount > pData[playerid][pCigars])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}

		pData[playerid][pCigars] -= amount;
		pData[targetid][pCigars] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cigars = %i WHERE uid = %i", pData[playerid][pCigars], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cigars = %i WHERE uid = %i", pData[targetid][pCigars], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i cigars.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i cigars to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some cigars to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i cigars to %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "spraycans", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [spraycans] [amount]");
		}
		if(amount < 1 || amount > pData[playerid][pSpraycans])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}

		pData[playerid][pSpraycans] -= amount;
		pData[targetid][pSpraycans] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET spraycans = %i WHERE uid = %i", pData[playerid][pSpraycans], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET spraycans = %i WHERE uid = %i", pData[targetid][pSpraycans], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i spraycans.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i spraycans to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some spraycans to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i spraycans to %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "gascan", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [gascan] [amount]");
		}
		if(amount < 1 || amount > pData[playerid][pGasCan])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}

		pData[playerid][pGasCan] -= amount;
		pData[targetid][pGasCan] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gascan = %i WHERE uid = %i", pData[playerid][pGasCan], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gascan = %i WHERE uid = %i", pData[targetid][pGasCan], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i liters of gasoline.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i liters of gasoline to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some gasoline to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i liters of gasoline to %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "seeds", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [seeds] [amount]");
		}
		if(amount < 1 || amount > pData[playerid][pSeeds])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}
		if(pData[targetid][pSeeds] + amount > GetPlayerCapacity(CAPACITY_SEEDS))
		{
		    return SM(playerid, COLOR_SYNTAX, "That player can't carry that much more seeds.");
		}

		pData[playerid][pSeeds] -= amount;
		pData[targetid][pSeeds] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET seeds = %i WHERE uid = %i", pData[playerid][pSeeds], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET seeds = %i WHERE uid = %i", pData[targetid][pSeeds], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i seeds.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i seeds to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some seeds to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i seeds to %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "ephedrine", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [ephedrine] [amount]");
		}
		if(amount < 1 || amount > pData[playerid][pEphedrine])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}
		if(pData[targetid][pEphedrine] + amount > GetPlayerCapacity(CAPACITY_EPHEDRINE))
		{
		    return SM(playerid, COLOR_SYNTAX, "That player can't carry that much more ephedrine.");
		}

		pData[playerid][pEphedrine] -= amount;
		pData[targetid][pEphedrine] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ephedrine = %i WHERE uid = %i", pData[playerid][pEphedrine], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ephedrine = %i WHERE uid = %i", pData[targetid][pEphedrine], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i grams of ephedrine.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i grams of ephedrine to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some ephedrine to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i grams of ephedrine to %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "dirtycash", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [dirtycash] [amount]");
		}
		if(amount < 1 || amount > pData[playerid][pDirtyCash])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}

		pData[playerid][pDirtyCash] -= amount;
		pData[targetid][pDirtyCash] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET dirtycash = %i WHERE uid = %i", pData[playerid][pDirtyCash], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET dirtycash = %i WHERE uid = %i", pData[targetid][pDirtyCash], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i grams of dirty cash.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i grams of dirty cash to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some dirty cash to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i grams of dirty cash to %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}

	else if(!strcmp(option, "diamonds", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /give [playerid] [diamonds] [amount]");
		}
		if(amount < 1 || amount > pData[playerid][pDiamonds])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		}
		if(pData[targetid][pDiamonds] + amount > 5)
		{
		    return SM(playerid, COLOR_GREY, "That player can't carry that much more diamonds.");
		}

		pData[playerid][pDiamonds] -= amount;
		pData[targetid][pDiamonds] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i WHERE uid = %i", pData[playerid][pDiamonds], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i WHERE uid = %i", pData[targetid][pDiamonds], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i diamonds.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i diamonds to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s gives some diamonds to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i diamonds to %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}

	return 1;
}

CMD:washmoney(playerid, params[])
{
	new madumi = pData[playerid][pDirtyCash];
	new bawas = (madumi/200)*10; // 5 discount percent
 	new total = madumi-bawas;
	if(pData[playerid][pDirtyCash] < 0)
	{
		return SCM(playerid, COLOR_GREY2, "You don't have dirty money.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 8.0, -64.7425,-1120.7697,1.0781))
	{
		return SCM(playerid, COLOR_GREY2, "You need to be at a cleaning factory.");
	}
	SM(playerid, COLOR_WHITE, "You washed your money and earn %i.", total);
	pData[playerid][pDirtyCash] -= total;
	GivePlayerCash(playerid, total);
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET dirtycash = %i WHERE uid = %i", pData[playerid][pDirtyCash], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}

CMD:sell(playerid, params[])
{
	new targetid, option[14], param[32], amount, price;

	if(sscanf(params, "us[14]S()[32]", targetid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /sell [playerid] [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Weapon, Materials, Backpack, Pot, Crack, Meth, Painkillers, Seeds, Ephedrine");
	    return 1;
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
	}
	if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pTied] > 0 ||  pData[playerid][pCuffed] > 0 || pData[playerid][pJailTime] > 0 || pData[playerid][pJoinedEvent] > 0 || pData[playerid][pPaintball])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}
    if(gettime() - pData[playerid][pLastSell] < 10)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can only use this command every 10 seconds. Please wait %i more seconds.", 10 - (gettime() - pData[playerid][pLastSell]));
	}
	if(!strcmp(option, "weapon", true))
	{
	    new weaponid;

		if(sscanf(param, "ii", weaponid, price))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /sell [playerid] [weapon] [weaponid] [price] (/guninv for weapon IDs)");
		}
	    if(!(1 <= weaponid <= 46) || pData[playerid][pWeapons][weaponSlotIDs[weaponid]] != weaponid)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You don't have that weapon. /guninv for a list of your weapons.");
		}
	    if(pData[targetid][pWeapons][weaponSlotIDs[weaponid]] > 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player already has a weapon in that slot.");
	    }
	    if(pData[targetid][pWeaponRestricted] > 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player is either weapon restricted or played less than two playing hours.");
	    }
	    if(pData[playerid][pFaction] >= 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't sell weapons as a faction member.");
	    }
		if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}

        pData[playerid][pLastSell] = gettime();
		pData[targetid][pSellOffer] = playerid;
		pData[targetid][pSellType] = ITEM_WEAPON;
		pData[targetid][pSellExtra] = weaponid;
		pData[targetid][pSellPrice] = price;

		SM(targetid, COLOR_AQUA, "** %s offered to sell you their %s for $%i. (/accept item)", GetRPName(playerid), GetWeaponNameEx(weaponid), price);
		SM(playerid, COLOR_AQUA, "** You have offered to sell %s your %s for $%i.", GetRPName(targetid), GetWeaponNameEx(weaponid), price);
	}
	else if(!strcmp(option, "materials", true))
	{
		if(sscanf(param, "ii", amount, price))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /sell [playerid] [materials] [amount] [price]");
		}
		if(amount < 1 || amount > pData[playerid][pMaterials])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
		}
		if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}

		pData[playerid][pLastSell] = gettime();
		pData[targetid][pSellOffer] = playerid;
		pData[targetid][pSellType] = ITEM_MATERIALS;
		pData[targetid][pSellExtra] = amount;
		pData[targetid][pSellPrice] = price;

		SM(targetid, COLOR_AQUA, "** %s offered to sell you %i materials for $%i. (/accept item)", GetRPName(playerid), amount, price);
		SM(playerid, COLOR_AQUA, "** You have offered to sell %s your %i materials for $%i.", GetRPName(targetid), amount, price);
	}
	else if(!strcmp(option, "backpack", true))
	{
	    new size[6];
		if(sscanf(param, "ii", amount, price))
		{
  			SCM(playerid, COLOR_SYNTAX, "Usage: /sell [playerid] [backpack] [size] [price]");
  			SCM(playerid, SERVER_COLOR, "** {FF0000}[NOTE}: "WHITE"Please note that the items inside the backpack will be deleted.");
  			return 1;
		}
		if(!pData[playerid][pBackpack])
		{
		    return SCM(playerid, COLOR_SYNTAX, "You don't have a backpack.");
		}
		if(pData[playerid][bpWearing])
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can't sell your backpack while wearing it.");
		}
		if(amount != pData[playerid][pBackpack])
		{
		    SCM(playerid, COLOR_SYNTAX, "Invalid backpack size.");
		    SCM(playerid, COLOR_SYNTAX, "Sizes: 1 - Small  |  2 - Medium  |  3 - large");
		    return 1;
		}
		if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}

		pData[playerid][pLastSell] = gettime();
		pData[targetid][pSellOffer] = playerid;
		pData[targetid][pSellType] = ITEM_BACKPACK;
		pData[targetid][pSellExtra] = amount;
		pData[targetid][pSellPrice] = price;
		if(amount == 1)
		{
		    format(size, sizeof(size), "small");
		}
		if(amount == 2)
		{
		    format(size, sizeof(size), "medium");
		}
		if(amount == 3)
		{
  			format(size, sizeof(size), "large");
		}
		SM(targetid, COLOR_AQUA, "** %s offered to sell you a %s backpack for $%i. (/accept item)", GetRPName(playerid), size, price);
		SM(playerid, COLOR_AQUA, "** You have offered to sell %s your %s backpack for $%i.", GetRPName(targetid), size, price);
	}
	else if(!strcmp(option, "pot", true))
	{
		if(sscanf(param, "ii", amount, price))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /sell [playerid] [pot] [amount] [price]");
		}
		if(amount < 1 || amount > pData[playerid][pPot])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
		}
		if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}

		pData[playerid][pLastSell] = gettime();
		pData[targetid][pSellOffer] = playerid;
		pData[targetid][pSellType] = ITEM_WEED;
		pData[targetid][pSellExtra] = amount;
		pData[targetid][pSellPrice] = price;

		SM(targetid, COLOR_AQUA, "** %s offered to sell you %i grams of pot for $%i. (/accept item)", GetRPName(playerid), amount, price);
		SM(playerid, COLOR_AQUA, "** You have offered to sell %s your %i grams of pot for $%i.", GetRPName(targetid), amount, price);
	}
    else if(!strcmp(option, "crack", true))
	{
		if(sscanf(param, "ii", amount, price))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /sell [playerid] [Crack] [amount] [price]");
		}
		if(amount < 1 || amount > pData[playerid][pCrack])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
		}
		if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}

		pData[playerid][pLastSell] = gettime();
		pData[targetid][pSellOffer] = playerid;
		pData[targetid][pSellType] = ITEM_COCAINE;
		pData[targetid][pSellExtra] = amount;
		pData[targetid][pSellPrice] = price;

		SM(targetid, COLOR_AQUA, "** %s offered to sell you %i grams of Crack for $%i. (/accept item)", GetRPName(playerid), amount, price);
		SM(playerid, COLOR_AQUA, "** You have offered to sell %s your %i grams of Crack for $%i.", GetRPName(targetid), amount, price);
	}
	else if(!strcmp(option, "meth", true))
	{
		if(sscanf(param, "ii", amount, price))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /sell [playerid] [meth] [amount] [price]");
		}
		if(amount < 1 || amount > pData[playerid][pMeth])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
		}
		if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}

		pData[playerid][pLastSell] = gettime();
		pData[targetid][pSellOffer] = playerid;
		pData[targetid][pSellType] = ITEM_METH;
		pData[targetid][pSellExtra] = amount;
		pData[targetid][pSellPrice] = price;

		SM(targetid, COLOR_AQUA, "** %s offered to sell you %i grams of meth for $%i. (/accept item)", GetRPName(playerid), amount, price);
		SM(playerid, COLOR_AQUA, "** You have offered to sell %s your %i grams of meth for $%i.", GetRPName(targetid), amount, price);
	}
	else if(!strcmp(option, "painkillers", true))
	{
		if(sscanf(param, "ii", amount, price))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /sell [playerid] [painkillers] [amount] [price]");
		}
		if(amount < 1 || amount > pData[playerid][pPainkillers])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
		}
		if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}

		pData[playerid][pLastSell] = gettime();
		pData[targetid][pSellOffer] = playerid;
		pData[targetid][pSellType] = ITEM_PAINKILLERS;
		pData[targetid][pSellExtra] = amount;
		pData[targetid][pSellPrice] = price;

		SM(targetid, COLOR_AQUA, "** %s offered to sell you %i painkillers for $%i. (/accept item)", GetRPName(playerid), amount, price);
		SM(playerid, COLOR_AQUA, "** You have offered to sell %s your %i painkillers for $%i.", GetRPName(targetid), amount, price);
	}
	else if(!strcmp(option, "seeds", true))
	{
		if(sscanf(param, "ii", amount, price))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /sell [playerid] [seeds] [amount] [price]");
		}
		if(amount < 1 || amount > pData[playerid][pSeeds])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
		}
		if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}

		pData[playerid][pLastSell] = gettime();
		pData[targetid][pSellOffer] = playerid;
		pData[targetid][pSellType] = ITEM_SEEDS;
		pData[targetid][pSellExtra] = amount;
		pData[targetid][pSellPrice] = price;

		SM(targetid, COLOR_AQUA, "** %s offered to sell you %i seeds for $%i. (/accept item)", GetRPName(playerid), amount, price);
		SM(playerid, COLOR_AQUA, "** You have offered to sell %s your %i seeds for $%i.", GetRPName(targetid), amount, price);
	}
	else if(!strcmp(option, "ephedrine", true))
	{
		if(sscanf(param, "ii", amount, price))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /sell [playerid] [ephedrine] [amount] [price]");
		}
		if(amount < 1 || amount > pData[playerid][pEphedrine])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
		}
		if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}

		pData[playerid][pLastSell] = gettime();
		pData[targetid][pSellOffer] = playerid;
		pData[targetid][pSellType] = ITEM_EPHEDRINE;
		pData[targetid][pSellExtra] = amount;
		pData[targetid][pSellPrice] = price;

		SM(targetid, COLOR_AQUA, "** %s offered to sell you %i grams of ephedrine for $%i. (/accept item)", GetRPName(playerid), amount, price);
		SM(playerid, COLOR_AQUA, "** You have offered to sell %s your %i grams of ephedrine for $%i.", GetRPName(targetid), amount, price);
	}

	return 1;
}

CMD:accent(playerid, params[])
{
	new type;

	if(sscanf(params, "i", type))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /accent [type]");
	    SCM(playerid, COLOR_GREY2, "List of accents: (0) None - (1) Tagalog - (2) Cebuano - (3) Bikol - (4) English");
		SCM(playerid, SERVER_COLOR, "More accent contact developers.");
		return 1;
	}

	switch(type)
	{
		case 0: strcpy(pData[playerid][pAccent], "None", 16);
		case 1: strcpy(pData[playerid][pAccent], "Tagalog", 16);
		case 2: strcpy(pData[playerid][pAccent], "Cebuano", 16);
		case 3: strcpy(pData[playerid][pAccent], "Bikol", 16);
		case 4: strcpy(pData[playerid][pAccent], "English", 16);

		default: SCM(playerid, COLOR_SYNTAX, "Invalid accent. Valid types range from 0 to 4.");
	}

	SM(playerid, COLOR_WHITE, "** You set your accent to '%s'.", pData[playerid][pAccent]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET accent = '%e' WHERE uid = %i", pData[playerid][pAccent], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	return 1;
}

CMD:dice(playerid, params[])
{
	SendProximityMessage(playerid, 20.0, COLOR_WHITE, "** %s rolls a dice which lands on the number %i.", GetRPName(playerid), random(6) + 1);
	return 1;
}

CMD:flipcoin(playerid, params[])
{
	SendProximityMessage(playerid, 20.0, COLOR_WHITE, "** %s flips a coin which lands on %s.", GetRPName(playerid), (random(2)) ? ("Heads") : ("Tails"));
	return 1;
}

CMD:time(playerid, params[])
{
 	new
	    string[128],
		date[5];

	/*getdate(date[0], date[1], date[2]);
	gettime(date[3], date[4], date[5]);*/
	getdate(date[0], date[1], date[2]);
	gettime(date[3], date[4]);

	switch(date[1])
	{
	    case 1: string = "January";
	    case 2: string = "February";
	    case 3: string = "March";
	    case 4: string = "April";
	    case 5: string = "May";
	    case 6: string = "June";
	    case 7: string = "July";
	    case 8: string = "August";
	    case 9: string = "September";
	    case 10: string = "October";
	    case 11: string = "November";
	    case 12: string = "December";
	}

	format(string, sizeof(string), "~b~%s %02d, %i~n~~y~%02d:%02d", string, date[2], date[0], date[3], date[4]);

	if(pData[playerid][pJailTime] > 0)
	{
	    format(string, sizeof(string), "%s Jail Time: %i seconds", string, pData[playerid][pJailTime]);
	}

    ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_watch", 4.1, 0, 0, 0, 0, 0);
	//Dyuze(playerid, "Time", string, 5000);
	GameTextForPlayer(playerid, string, 5000, 1);
	SM(playerid, COLOR_WHITE, "** Paychecks occur at every hour. The next paycheck is at %02d:00 which is in %i minute(s).", (date[3] + 1), (60 - date[4]));
	return 1;
}

CMD:reportdm(playerid, params[]) return callcmd::rdm(playerid, params);
CMD:rdm(playerid, params[])
{
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /rdm [playerid]");
	}
	if(!enabledReports)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The report channel is disabled at the moment.");
	}
	if(pData[playerid][pReportMuted])
	{
	    if(pData[playerid][pReportMuted] > 1000) {
     		return SM(playerid, COLOR_SYNTAX, "You are indefinitely muted from submitting reports.");
		} else {
			return SM(playerid, COLOR_SYNTAX, "You are muted from submitting reports. Your mute is lifted in %i hours.", pData[playerid][pReportMuted]);
		}
	}
	if(gettime() - pData[playerid][pLastReport] < 50)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can only submit one report every 50 seconds. Please wait %i more seconds.", 50 - (gettime() - pData[playerid][pLastReport]));
	}
	if(pData[playerid][pActiveReport] >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have an active report which needs to be closed first. Use /cr to close it.");
	}
	if(!AddDMReportToQueue(playerid, params))
	{
		return SCM(playerid, COLOR_SYNTAX, "The report queue is currently full. Please try again later.");
	}

	SCM(playerid, COLOR_YELLOW, "Your DM report was sent to all online admins. Please wait for a response.");
	return 1;
}

CMD:am(playerid, params[])
{
	if(pData[playerid][pAMute])
		return SCM(playerid, COLOR_GREY, "You have been muted by an admin from using /am.");

	new targetid, message[128];
	if(pData[playerid][pJailTime] > 0) return SendClientMessage(playerid, COLOR_SYNTAX, "Cannot use this command while in-jail.");
	if(pData[playerid][pAdmin] > 0)
	{
		if(sscanf(params, "us[128]", targetid, message))
			return SCM(playerid, COLOR_GREY, "Usage: /am [playerid] [message]");

		if(!IsPlayerConnected(targetid))
			return SCM(playerid, COLOR_ERROR, "That player is not connected!");

		SCM(targetid, COLOR_YELLOW, "Use "RED"/am"YELLOW" to reply to this message from an admin.");
		SCMf(targetid, COLOR_LIME, "Admin message from %s: %s", GetPlayerNameEx(playerid), message);
		SAM(SERVER_COLOR, ""YELLOW"%s [%d] > %s [%d]: %s", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(targetid), targetid, message);

		Log_Write("log_am", "Admin %s [uid: %d] > %s [uid: %d]: %s", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

		pData[playerid][pAMCount] ++;
	}
	else
	{
		if(!enabledAM)
			return SCM(playerid, COLOR_WHITE, "Admin Message is currently disabled. Please use this again if it's enabled.");

		if((gettime() - pData[playerid][pLastAM]) < 240)
		{
			return SCM(playerid, COLOR_LIGHTRED, "You need to wait 2 minutes before sending another message.");
		}

		if(sscanf(params, "s[128]", message))
			return SCM(playerid, COLOR_GREY, "Usage: /am [message]");

		SendStaffMessage(COLOR_YELLOW, "Admin message from %s [%d]:{ffffff} %s", GetPlayerNameEx(playerid), playerid, message);
		SCM(playerid, COLOR_YELLOW, "Your message was sent to online administrators. Please wait for their response.");

		Log_Write("log_am", "Player %s [uid: %d] > Admins: %s", GetPlayerNameEx(playerid), pData[playerid][pID]);

		pData[playerid][pLastAM] = gettime();
	}
	return 1;
}

CMD:report(playerid, params[])
{
	new targetid;
	if(sscanf(params, "us[128]", targetid, params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /report [id] [text]");
	}
	if(!enabledReports)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The report channel is disabled at the moment.");
	}
	if(pData[playerid][pReportMuted])
	{
	    if(pData[playerid][pReportMuted] > 1000) {
     		return SM(playerid, COLOR_SYNTAX, "You are indefinitely muted from submitting reports.");
		} else {
			return SM(playerid, COLOR_SYNTAX, "You are muted from submitting reports. Your mute is lifted in %i hours.", pData[playerid][pReportMuted]);
		}
	}
	if(gettime() - pData[playerid][pLastReport] < 50)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can only submit one report every 50 seconds. Please wait %i more seconds.", 50 - (gettime() - pData[playerid][pLastReport]));
	}
	if(pData[playerid][pActiveReport] >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have an active report which needs to be closed first. Use /cr to close it.");
	}
	if(!AddReportToQueue(playerid, params))
	{
		return SCM(playerid, COLOR_SYNTAX, "The report queue is currently full. Please try again later.");
	}

	SCM(playerid, COLOR_YELLOW, "Your report was sent to all online admins. Please wait for a response.");
	return 1;
}

CMD:gethelp(playerid, params[]) return callcmd::helpme(playerid, params);
CMD:requesthelp(playerid, params[]) return callcmd::helpme(playerid, params);
CMD:helpme(playerid, params[])
{
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gethelp [help request]");
	}
	if(pData[playerid][pHelper] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are a helper and therefore can't use this command.");
	}
	if(pData[playerid][pHelpMuted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are muted from submitting help requests.");
	}
	if(gettime() - pData[playerid][pLastRequest] < 30)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can only submit one help request every 30 seconds. Please wait %i more seconds.", 30 - (gettime() - pData[playerid][pLastRequest]));
	}

	strcpy(pData[playerid][pHelpRequest], params, 128);
	SendHelperMessage(COLOR_AQUA, "** Help Request from %s[%i]: %s **", GetRPName(playerid), playerid, params);

	pData[playerid][pLastRequest] = gettime();
	SCM(playerid, COLOR_YELLOW, "Your help request was sent to all helpers. Please wait for a response.");
	return 1;
}


CMD:accept(playerid, params[])
{
	if(isnull(params))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /accept [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: House, Death, Garage, Business, Vest, Vehicle, Faction, Gang, Ticket, Live");
		SCM(playerid, COLOR_WHITE, "Available options: Item, Frisk, Handshake, Weapon, Lawyer, Dicebet, Invite, Robbery, Allience");
	}
	if(!strcmp(params, "house", true))
	{
		new
		    offeredby = pData[playerid][pHouseOffer],
		    houseid = pData[playerid][pHouseOffered],
		    price = pData[playerid][pHousePrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers for a house.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }
	    if(!IsHouseOwner(offeredby, houseid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player no longer is the owner of this house.");
	    }
	    if(pData[playerid][pCash] < price)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't afford to buy this player's house.");
	    }
	    if(GetPlayerAssetCount(playerid, LIMIT_HOUSES) >= GetPlayerAssetLimit(playerid, LIMIT_HOUSES))
		{
	    	return SM(playerid, COLOR_SYNTAX, "You currently own %i/%i houses. You can't own anymore unless you upgrade your asset perk.", GetPlayerAssetCount(playerid, LIMIT_HOUSES), GetPlayerAssetLimit(playerid, LIMIT_HOUSES));
		}

	    SetHouseOwner(houseid, playerid);

	    GivePlayerCash(offeredby, price);
	    GivePlayerCash(playerid, -price);

	    SM(playerid, COLOR_AQUA, "** You have accepted %s's house offer and paid $%i for their house.", GetRPName(offeredby), price);
	    SM(offeredby, COLOR_AQUA, "** %s accepted your house offer and paid $%i for your house.", GetRPName(playerid), price);
	    Log_Write("log_property", "%s (uid: %i) (IP: %s) sold their house (id: %i) for $%i to %s (uid: %i) (IP: %s)", GetPlayerNameEx(offeredby), pData[offeredby][pID], GetPlayerIP(offeredby), HouseInfo[houseid][hID], price, GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerIP(playerid));

	    pData[playerid][pHouseOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "death", true))
	{
	    if(IsPlayerConnected(pData[playerid][pAcceptedEMS]) && !pData[pData[playerid][pAcceptedEMS]][pAFK])
		{
			return SCM(playerid, COLOR_SYNTAX, "There is a medic online and on the way to rescue you.");
		}
 		if(pData[playerid][pDeathCooldown] > 0)
		{
	    	return SM(playerid, COLOR_SYNTAX, "You need to wait %i more seconds before you can give up.", pData[playerid][pDeathCooldown]);
		}
	    if(!pData[playerid][pInjured])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You are not injured and can't accept your death.");
	    }

	    SCM(playerid, COLOR_SYNTAX, "You have given up and accepted your fate.");
	    SetPlayerHealth(playerid, -300);
	    //DamagePlayer(playerid, 300, playerid, WEAPON_EXPLOSION, BODY_PART_UNKNOWN, false);
	}
	else if(!strcmp(params, "marriage", true))
	{
		new id, offeredby = pData[playerid][pMarriageOffer];
	    if((id = GetInsideBusiness(playerid)) == -1 || BusinessInfo[id][bType] != BUSINESS_RESTAURANT)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You need to be at a restaurant to commence a wedding.");
		}
		if(pData[playerid][pCash] < 750 || pData[offeredby][pCash] < 750)
		{
			return SCM(playerid, COLOR_SYNTAX, "You both need to have $750 in hand to commence a wedding.");
		}
		if(!IsPlayerConnected(offeredby) || !IsPlayerInRangeOfPlayer(playerid, offeredby, 15.0))
		{
		    return SCM(playerid, COLOR_SYNTAX, "You aren't in range of anyone who has offered to marry you.");
		}

		GivePlayerCash(playerid, -750);
		GivePlayerCash(offeredby, -750);
		BusinessInfo[id][bCash] += 750;

		SMA(SERVER_COLOR, "%s and %s have just tied the knott! Congratulations to them on getting married.", GetRPName(offeredby), GetRPName(playerid));

		pData[playerid][pMarriedTo] = pData[offeredby][pID];
		pData[offeredby][pMarriedTo] = pData[playerid][pID];

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET marriedto = %i WHERE uid = %i", pData[playerid][pMarriedTo], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET marriedto = %i WHERE uid = %i", pData[offeredby][pMarriedTo], pData[offeredby][pID]);
		mysql_tquery(connectionID, queryBuffer);

		strcpy(pData[playerid][pMarriedName], GetPlayerNameEx(offeredby), MAX_PLAYER_NAME);
		strcpy(pData[offeredby][pMarriedName], GetPlayerNameEx(playerid), MAX_PLAYER_NAME);

		pData[playerid][pMarriageOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "divorce", true))
	{
		new offeredby = pData[playerid][pMarriageOffer];
		if(!IsPlayerConnected(offeredby) || !IsPlayerInRangeOfPlayer(playerid, offeredby, 15.0))
		{
		    return SCM(playerid, COLOR_SYNTAX, "You aren't in range of anyone who has offered to divorce you.");
		}
		if(pData[playerid][pMarriedTo] == -1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You aren't even married ya naab.");
		}
		if(pData[playerid][pMarriedTo] != pData[offeredby][pID])
		{
		    return SCM(playerid, COLOR_SYNTAX, "That isn't the person you're married to.");
		}

		pData[playerid][pMarriedTo] = -1;
		pData[offeredby][pMarriedTo] = -1;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET marriedto = -1 WHERE uid = %i", pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET marriedto = -1 WHERE uid = %i", pData[offeredby][pID]);
		mysql_tquery(connectionID, queryBuffer);

		strcpy(pData[playerid][pMarriedName], "Nobody", MAX_PLAYER_NAME);
		strcpy(pData[offeredby][pMarriedName], "Nobody", MAX_PLAYER_NAME);

		pData[playerid][pMarriageOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "alliance", true))
	{
	    new offeredby = pData[playerid][pAllianceOffer], color, color2;

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't been offered an alliance.");
	    }
		if(offeredby == playerid)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can't accept offers from yourself.");
		}

		new gangid = pData[playerid][pGang], allyid = pData[offeredby][pGang];

	    SM(offeredby, COLOR_AQUA, "%s has accepted your offer to form a gang alliance.", GetRPName(playerid));
		SM(playerid, COLOR_AQUA, "You've accepted the offer from %s to form a gang alliance.", GetRPName(offeredby));

		GangInfo[gangid][gAlliance] = allyid;
		GangInfo[allyid][gAlliance] = gangid;
		pData[playerid][pAllianceOffer] = INVALID_PLAYER_ID;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = %i WHERE id = %i", allyid, gangid);
   		mysql_tquery(connectionID, queryBuffer);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = %i WHERE id = %i", gangid, allyid);
		mysql_tquery(connectionID, queryBuffer);

		if(GangInfo[gangid][gColor] == -1 || GangInfo[gangid][gColor] == -256)
		{
			color = 0xC8C8C8FF;
		}
		else
		{
		    color = GangInfo[gangid][gColor];
		}

		if(GangInfo[allyid][gColor] == -1 || GangInfo[allyid][gColor] == -256)
		{
		    color2 = 0xC8C8C8FF;
		}
		else
		{
		    color2 = GangInfo[allyid][gColor];
		}

		SMA(COLOR_GREEN, "Gang News: {%06x}%s has formed an alliance with {%06x}%s", color >>> 8, GangInfo[gangid][gName], color2 >>> 8, GangInfo[allyid][gName]);
	}
	else if(!strcmp(params, "garage", true))
	{
		new
		    offeredby = pData[playerid][pGarageOffer],
		    garageid = pData[playerid][pGarageOffered],
		    price = pData[playerid][pGaragePrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers for a garage.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }
	    if(!IsGarageOwner(offeredby, garageid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player no longer is the owner of this garage.");
	    }
	    if(pData[playerid][pCash] < price)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't afford to buy this player's garage.");
	    }
	    if(GetPlayerAssetCount(playerid, LIMIT_GARAGES) >= GetPlayerAssetLimit(playerid, LIMIT_GARAGES))
		{
		    return SM(playerid, COLOR_SYNTAX, "You currently own %i/%i garages. You can't own anymore unless you upgrade your asset perk.", GetPlayerAssetCount(playerid, LIMIT_GARAGES), GetPlayerAssetLimit(playerid, LIMIT_GARAGES));
		}

	    SetGarageOwner(garageid, playerid);

	    GivePlayerCash(offeredby, price);
	    GivePlayerCash(playerid, -price);

	    SM(playerid, COLOR_AQUA, "** You have accepted %s's garage offer and paid $%i for their garage.", GetRPName(offeredby), price);
	    SM(offeredby, COLOR_AQUA, "** %s accepted your garage offer and paid $%i for your garage.", GetRPName(playerid), price);
        Log_Write("log_property", "%s (uid: %i) (IP: %s) sold their %s garage (id: %i) for $%i to %s (uid: %i) (IP: %s)", GetPlayerNameEx(offeredby), pData[offeredby][pID], GetPlayerIP(offeredby), garageInteriors[GarageInfo[garageid][gType]][intName], GarageInfo[garageid][gID], price, GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerIP(playerid));

	    pData[playerid][pGarageOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "business", true))
	{
		new
		    offeredby = pData[playerid][pBizOffer],
		    businessid = pData[playerid][pBizOffered],
		    price = pData[playerid][pBizPrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers for a business.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }
	    if(!IsBusinessOwner(offeredby, businessid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player no longer is the owner of this business.");
	    }
	    if(pData[playerid][pCash] < price)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't afford to buy this player's business.");
	    }
	    if(GetPlayerAssetCount(playerid, LIMIT_BUSINESSES) >= GetPlayerAssetLimit(playerid, LIMIT_BUSINESSES))
		{
	    	return SM(playerid, COLOR_SYNTAX, "You currently own %i/%i businesses. You can't own anymore unless you upgrade your asset perk.", GetPlayerAssetCount(playerid, LIMIT_BUSINESSES), GetPlayerAssetLimit(playerid, LIMIT_BUSINESSES));
		}

	    SetBusinessOwner(businessid, playerid);

	    GivePlayerCash(offeredby, price);
	    GivePlayerCash(playerid, -price);

	    SM(playerid, COLOR_AQUA, "** You have accepted %s's business offer and paid $%i for their %s.", GetRPName(offeredby), price, bizInteriors[BusinessInfo[businessid][bType]][intType]);
	    SM(offeredby, COLOR_AQUA, "** %s accepted your business offer and paid $%i for your %s.", GetRPName(playerid), price, bizInteriors[BusinessInfo[businessid][bType]][intType]);
        Log_Write("log_property", "%s (uid: %i) (IP: %s) sold their %s business (id: %i) for $%i to %s (uid: %i) (IP: %s)", GetPlayerNameEx(offeredby), pData[offeredby][pID], GetPlayerIP(offeredby), bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bID], price, GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerIP(playerid));

	    pData[playerid][pBizOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "land", true))
	{
		new
		    offeredby = pData[playerid][pLandOffer],
		    landid = pData[playerid][pLandOffered],
		    price = pData[playerid][pLandPrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers for a land.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }
	    if(!IsLandOwner(offeredby, landid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player no longer is the owner of this land.");
	    }
	    if(pData[playerid][pCash] < price)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't afford to buy this player's land.");
	    }

	    SetLandOwner(landid, playerid);

	    GivePlayerCash(offeredby, price);
	    GivePlayerCash(playerid, -price);

	    SM(playerid, COLOR_AQUA, "** You have accepted %s's land offer and paid $%i for their land.", GetRPName(offeredby), price);
	    SM(offeredby, COLOR_AQUA, "** %s accepted your land offer and paid $%i for your land.", GetRPName(playerid), price);
	    Log_Write("log_property", "%s (uid: %i) (IP: %s) sold their land (id: %i) for $%i to %s (uid: %i) (IP: %s)", GetPlayerNameEx(offeredby), pData[offeredby][pID], GetPlayerIP(offeredby), LandInfo[landid][lID], price, GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerIP(playerid));

	    pData[playerid][pLandOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "vest", true))
	{
		new
		    offeredby = pData[playerid][pVestOffer],
		    price = pData[playerid][pVestPrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers for a vest.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }
	    if(pData[playerid][pCash] < price)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't afford to buy the vest.");
	    }
	    new Float:armor = 50.0;

		SetScriptArmour(playerid, armor);
		GivePlayerCash(offeredby, price);
	    GivePlayerCash(playerid, -price);

	    SM(playerid, COLOR_AQUA, "** You have accepted %s's vest and paid $%i for %.1f armor points.", GetRPName(offeredby), price, armor);
	    SM(offeredby, COLOR_AQUA, "** %s accepted your vest offer and paid $%i for %.1f armor points.", GetRPName(playerid), price, armor);

	    TurfTaxCheck(offeredby, price);

	    pData[playerid][pVestOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "vehicle", true))
	{
		new
		    offeredby = pData[playerid][pCarOffer],
		    vehicleid = pData[playerid][pCarOffered],
		    price = pData[playerid][pCarPrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers for a vehicle.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }
	    if(!IsVehicleOwner(offeredby, vehicleid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player no longer is the owner of this vehicle.");
	    }
  	    if(GetSpawnedVehicles(playerid) >= MAX_SPAWNED_VEHICLES)
    	{
   			return SendClientMessageEx(playerid, COLOR_GREY, "You can't have more than %i vehicles spawned at a time.", MAX_SPAWNED_VEHICLES);
    	}
	    if(pData[playerid][pCash] < price)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't afford to buy this player's vehicle.");
	    }

	    GetPlayerName(playerid, VehicleInfo[vehicleid][vOwner], MAX_PLAYER_NAME);
	    VehicleInfo[vehicleid][vOwnerID] = pData[playerid][pID];

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET ownerid = %i, owner = '%s' WHERE id = %i", VehicleInfo[vehicleid][vOwnerID], VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

	    GivePlayerCash(offeredby, price);
	    GivePlayerCash(playerid, -price);

	    SM(playerid, COLOR_AQUA, "** You have accepted %s's vehicle offer and paid $%i for their %s.", GetRPName(offeredby), price, GetVehicleName(vehicleid));
	    SM(offeredby, COLOR_AQUA, "** %s accepted your vehicle offer and paid $%i for your %s.", GetRPName(playerid), price, GetVehicleName(vehicleid));
        Log_Write("log_property", "%s (uid: %i) (IP: %s) sold their %s (id: %i) for $%i to %s (uid: %i) (IP: %s)", GetPlayerNameEx(offeredby), pData[offeredby][pID], GetPlayerIP(offeredby), GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID], price, GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerIP(playerid));

	    pData[playerid][pCarOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "faction", true))
	{
		new
		    offeredby = pData[playerid][pFactionOffer],
		    factionid = pData[playerid][pFactionOffered];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any invites to a faction.");
	    }
	    if(pData[offeredby][pFaction] != factionid || pData[offeredby][pFactionRank] < FactionInfo[factionid][fRankCount] - 2)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player is no longer allowed to invite you.");
	    }

	    pData[playerid][pFaction] = factionid;
	    pData[playerid][pFactionRank] = 0;
	    pData[playerid][pDivision] = -1;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET faction = %i, factionrank = 0, division = -1 WHERE uid = %i", factionid, pData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    SM(playerid, COLOR_AQUA, "** You have accepted %s's faction offer to join "SVRCLR"%s{CCFFFF}.", GetRPName(offeredby), FactionInfo[factionid][fName]);
	    SM(offeredby, COLOR_AQUA, "** %s accepted your faction offer and is now apart of your faction.", GetRPName(playerid));

		Log_Write("log_faction", "%s (uid: %i) has invited %s (uid: %i) to %s (id: %i).", GetPlayerNameEx(offeredby), pData[offeredby][pID], GetPlayerNameEx(playerid), pData[playerid][pID], FactionInfo[factionid][fName], factionid);
	    pData[playerid][pFactionOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "gang", true))
	{
		new
		    offeredby = pData[playerid][pGangOffer],
		    gangid = pData[playerid][pGangOffered];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any invites to a gang.");
	    }
	    if(pData[offeredby][pGang] != gangid || pData[offeredby][pGangRank] < 5)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player is no longer allowed to invite you.");
	    }

	    pData[playerid][pGang] = gangid;
	    pData[playerid][pGangRank] = 0;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gang = %i, gangrank = 0 WHERE uid = %i", gangid, pData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    SM(playerid, COLOR_AQUA, "** You have accepted %s's gang offer to join "SVRCLR"%s{CCFFFF}.", GetRPName(offeredby), GangInfo[gangid][gName]);
	    SM(offeredby, COLOR_AQUA, "** %s accepted your gang offer and is now apart of your gang.", GetRPName(playerid));

		Log_Write("log_gang", "%s (uid: %i) has invited %s (uid: %i) to %s (id: %i).", GetPlayerNameEx(offeredby), pData[offeredby][pID], GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[gangid][gName], gangid);
	    pData[playerid][pGangOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "frisk", true))
	{
	    new offeredby = pData[playerid][pFriskOffer];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers to be frisked.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }

	    FriskPlayer(offeredby, playerid);
	    pData[playerid][pFriskOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "ticket", true))
	{
		new
		    offeredby = pData[playerid][pTicketOffer],
		    price = pData[playerid][pTicketPrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers for a ticket.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }
	    if(pData[playerid][pCash] < price)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't afford to pay this ticket.");
	    }

	    //GivePlayerCash(offeredby, price);

	    AddToTaxVault(price);
	    GivePlayerCash(playerid, -price);

	    SM(playerid, COLOR_AQUA, "** You have paid the $%i ticket written by %s.", price, GetRPName(offeredby));
	    SM(offeredby, COLOR_AQUA, "** %s has paid the $%i ticket which was written to them.", GetRPName(playerid), price);
        Log_Write("log_faction", "%s (uid: %i) has given %s (uid: %i) a ticket for $%i.", GetPlayerNameEx(offeredby), pData[offeredby][pID], GetPlayerNameEx(playerid), pData[playerid][pID], price);

	    pData[playerid][pTicketOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "live", true))
	{
	    new offeredby = pData[playerid][pLiveOffer];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers for a live interview.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }
	    if(pData[playerid][pCallLine] != INVALID_PLAYER_ID || pData[offeredby][pCallLine] != INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You or the offerer can't be on a phone call during a live interview.");
	    }

	    SM(playerid, COLOR_AQUA, "** You have accepted %s's live interview offer. Speak in IC chat to begin the interview!", GetRPName(offeredby));
	    SM(offeredby, COLOR_AQUA, "** %s has accepted your live interview offer. Speak in IC chat to begin the interview!", GetRPName(playerid));
        Log_Write("log_faction", "%s (uid: %i) has started a live interview with %s (uid: %i)", GetPlayerNameEx(offeredby), pData[offeredby][pID], GetPlayerNameEx(playerid), pData[playerid][pID]);

		pData[playerid][pLiveBroadcast] = offeredby;
		pData[offeredby][pLiveBroadcast] = playerid;
  		pData[playerid][pLiveOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "handshake", true))
	{
	    new offeredby = pData[playerid][pShakeOffer];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers for a handshake.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }

	    ClearAnimations(playerid);
		ClearAnimations(offeredby);

		SetPlayerToFacePlayer(playerid, offeredby);
		SetPlayerToFacePlayer(offeredby, playerid);

		switch(pData[playerid][pShakeType])
		{
		    case 1:
		    {
				ApplyAnimation(playerid,  "GANGS", "hndshkaa", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(offeredby, "GANGS", "hndshkaa", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 2:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkba", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(offeredby, "GANGS", "hndshkba", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 3:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkda", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(offeredby, "GANGS", "hndshkda", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 4:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkea", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(offeredby, "GANGS", "hndshkea", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 5:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkfa", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(offeredby, "GANGS", "hndshkfa", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 6:
			{
			    ApplyAnimation(playerid, "GANGS", "prtial_hndshk_biz_01", 4.0, 0, 0, 0, 0, 0);
			    ApplyAnimation(offeredby, "GANGS", "prtial_hndshk_biz_01", 4.0, 0, 0, 0, 0, 0);
			}
	    }

	    SM(playerid, COLOR_AQUA, "** You have accepted %s's handshake offer.", GetRPName(offeredby));
	    SM(offeredby, COLOR_AQUA, "** %s has accepted your handshake offer.", GetRPName(playerid));

  		pData[playerid][pShakeOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "item", true))
	{
		new
		    offeredby = pData[playerid][pSellOffer],
		    type = pData[playerid][pSellType],
		    amount = pData[playerid][pSellExtra],
		    price = pData[playerid][pSellPrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers for an item.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }
	    if(pData[playerid][pCash] < price)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't afford to accept the offer.");
	    }

	    switch(type)
	    {
	        case ITEM_WEAPON:
			{
			    new weaponid = pData[playerid][pSellExtra];

	            if(!PlayerHasWeapon(offeredby, weaponid))
	            {
	                return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer no longer has that item.");
	            }

	            GivePlayerCash(playerid, -price);
	            GivePlayerCash(offeredby, price);

	            GiveWeapon(playerid, weaponid);
	            RemovePlayerWeapon(offeredby, weaponid);

				SM(playerid, COLOR_AQUA, "** You have purchased %s's %s for $%i.", GetRPName(offeredby), GetWeaponNameEx(weaponid), price);
				SM(offeredby, COLOR_AQUA, "** %s has purchased your %s for $%i.", GetRPName(playerid), GetWeaponNameEx(weaponid), price);
				Log_Write("log_give", "%s (uid: %i) has sold their %s to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), pData[offeredby][pID], GetWeaponNameEx(weaponid), GetPlayerNameEx(playerid), pData[playerid][pID], price);

				TurfTaxCheck(offeredby, price);

				pData[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
			case ITEM_MATERIALS:
			{
			    if(pData[offeredby][pMaterials] < amount)
			    {
			        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer no longer has that item.");
			    }
			    if(pData[playerid][pMaterials] + amount > GetPlayerCapacity(CAPACITY_MATERIALS))
				{
				    return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i materials. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pMaterials], GetPlayerCapacity(CAPACITY_MATERIALS));
				}

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    pData[playerid][pMaterials] += amount;
			    pData[offeredby][pMaterials] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", pData[playerid][pMaterials], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", pData[offeredby][pMaterials], pData[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have purchased %i materials from %s for $%i.", amount, GetRPName(offeredby), price);
			    SM(offeredby, COLOR_AQUA, "** %s has purchased your %i materials for $%i.", GetRPName(playerid), amount, price);
			    Log_Write("log_give", "%s (uid: %i) has sold their %i materials to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), pData[offeredby][pID], amount, GetPlayerNameEx(playerid), pData[playerid][pID], price);

                TurfTaxCheck(offeredby, price);

			    pData[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
			case ITEM_BACKPACK:
			{
			    new size[6];
			    if(pData[offeredby][pBackpack] != amount)
			    {
			        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer no longer has that item.");
			    }
			    if(pData[playerid][bpWearing])
			    {
			        return SCM(playerid, COLOR_SYNTAX, "You cannot accept this offer as you are still wearing your backpack.");
				}
				if(pData[offeredby][bpWearing])
				{
				    return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is still wearing their backpack.");
				}

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    pData[playerid][pBackpack] = amount;
				SavePlayerVariables(playerid);
				ResetBackpack(offeredby);
				if(amount == 1)
				{
				    format(size, sizeof(size), "small");
				}
				if(amount == 2)
				{
				    format(size, sizeof(size), "medium");
				}
				if(amount == 3)
				{
				    format(size, sizeof(size), "large");
				}
			    SM(playerid, COLOR_AQUA, "** You have purchased a %s backpack from %s for $%i.", size, GetRPName(offeredby), price);
			    SM(offeredby, COLOR_AQUA, "** %s has purchased your %s backpack for $%i.", GetRPName(playerid), size, price);
			    Log_Write("log_give", "%s (uid: %i) has sold their %i backpack to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), pData[offeredby][pID], size, GetPlayerNameEx(playerid), pData[playerid][pID], price);

                TurfTaxCheck(offeredby, price);

			    pData[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
			case ITEM_WEED:
			{
			    if(pData[offeredby][pPot] < amount)
			    {
			        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer no longer has that item.");
			    }
			    if(pData[playerid][pPot] + amount > GetPlayerCapacity(CAPACITY_WEED))
				{
				    return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i pot. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pPot], GetPlayerCapacity(CAPACITY_WEED));
				}

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    pData[playerid][pPot] += amount;
			    pData[offeredby][pPot] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", pData[playerid][pPot], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", pData[offeredby][pPot], pData[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have purchased %i grams of pot from %s for $%i.", amount, GetRPName(offeredby), price);
			    SM(offeredby, COLOR_AQUA, "** %s has purchased your %i grams of pot for $%i.", GetRPName(playerid), amount, price);
			    Log_Write("log_give", "%s (uid: %i) has sold their %i grams of pot to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), pData[offeredby][pID], amount, GetPlayerNameEx(playerid), pData[playerid][pID], price);

                TurfTaxCheck(offeredby, price);

			    pData[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
			case ITEM_COCAINE:
			{
			    if(pData[offeredby][pCrack] < amount)
			    {
			        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer no longer has that item.");
			    }
			    if(pData[playerid][pCrack] + amount > GetPlayerCapacity(CAPACITY_COCAINE))
				{
				    return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i Crack. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pCrack], GetPlayerCapacity(CAPACITY_COCAINE));
				}

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    pData[playerid][pCrack] += amount;
			    pData[offeredby][pCrack] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", pData[playerid][pCrack], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", pData[offeredby][pCrack], pData[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have purchased %i grams of Crack from %s for $%i.", amount, GetRPName(offeredby), price);
			    SM(offeredby, COLOR_AQUA, "** %s has purchased your %i grams of Crack for $%i.", GetRPName(playerid), amount, price);
			    Log_Write("log_give", "%s (uid: %i) has sold their %i grams of Crack to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), pData[offeredby][pID], amount, GetPlayerNameEx(playerid), pData[playerid][pID], price);

			    TurfTaxCheck(offeredby, price);

			    pData[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
			case ITEM_METH:
			{
			    if(pData[offeredby][pMeth] < amount)
			    {
			        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer no longer has that item.");
			    }
			    if(pData[playerid][pMeth] + amount > GetPlayerCapacity(CAPACITY_METH))
				{
				    return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i meth. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pMeth], GetPlayerCapacity(CAPACITY_METH));
				}

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    pData[playerid][pMeth] += amount;
			    pData[offeredby][pMeth] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", pData[playerid][pMeth], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", pData[offeredby][pMeth], pData[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have purchased %i grams of meth from %s for $%i.", amount, GetRPName(offeredby), price);
			    SM(offeredby, COLOR_AQUA, "** %s has purchased your %i grams of meth for $%i.", GetRPName(playerid), amount, price);
			    Log_Write("log_give", "%s (uid: %i) has sold their %i grams of meth to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), pData[offeredby][pID], amount, GetPlayerNameEx(playerid), pData[playerid][pID], price);

			    TurfTaxCheck(offeredby, price);

			    pData[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
			case ITEM_PAINKILLERS:
			{
			    if(pData[offeredby][pPainkillers] < amount)
			    {
			        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer no longer has that item.");
			    }
				if(pData[playerid][pPainkillers] + amount > GetPlayerCapacity(CAPACITY_PAINKILLERS))
				{
				    return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i painkillers. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pPainkillers], GetPlayerCapacity(CAPACITY_PAINKILLERS));
				}

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    pData[playerid][pPainkillers] += amount;
			    pData[offeredby][pPainkillers] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", pData[playerid][pPainkillers], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", pData[offeredby][pPainkillers], pData[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have purchased %i painkillers from %s for $%i.", amount, GetRPName(offeredby), price);
			    SM(offeredby, COLOR_AQUA, "** %s has purchased your %i painkillers for $%i.", GetRPName(playerid), amount, price);
			    Log_Write("log_give", "%s (uid: %i) has sold their %i painkillers to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), pData[offeredby][pID], amount, GetPlayerNameEx(playerid), pData[playerid][pID], price);

			    TurfTaxCheck(offeredby, price);

			    pData[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
			case ITEM_SEEDS:
			{
			    if(pData[offeredby][pSeeds] < amount)
			    {
			        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer no longer has that item.");
			    }
			    if(pData[playerid][pSeeds] + amount > GetPlayerCapacity(CAPACITY_SEEDS))
				{
				    return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i seeds. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pSeeds], GetPlayerCapacity(CAPACITY_SEEDS));
				}

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    pData[playerid][pSeeds] += amount;
			    pData[offeredby][pSeeds] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET seeds = %i WHERE uid = %i", pData[playerid][pSeeds], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET seeds = %i WHERE uid = %i", pData[offeredby][pSeeds], pData[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have purchased %i seeds from %s for $%i.", amount, GetRPName(offeredby), price);
			    SM(offeredby, COLOR_AQUA, "** %s has purchased your %i seeds for $%i.", GetRPName(playerid), amount, price);
			    Log_Write("log_give", "%s (uid: %i) has sold their %i seeds to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), pData[offeredby][pID], amount, GetPlayerNameEx(playerid), pData[playerid][pID], price);

			    TurfTaxCheck(offeredby, price);

			    pData[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
            case ITEM_EPHEDRINE:
			{
			    if(pData[offeredby][pEphedrine] < amount)
			    {
			        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer no longer has that item.");
			    }
			    if(pData[playerid][pEphedrine] + amount > GetPlayerCapacity(CAPACITY_EPHEDRINE))
				{
				    return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i ephedrine. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pEphedrine], GetPlayerCapacity(CAPACITY_EPHEDRINE));
				}

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    pData[playerid][pEphedrine] += amount;
			    pData[offeredby][pEphedrine] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ephedrine = %i WHERE uid = %i", pData[playerid][pEphedrine], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ephedrine = %i WHERE uid = %i", pData[offeredby][pEphedrine], pData[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have purchased %i grams of ephedrine from %s for $%i.", amount, GetRPName(offeredby), price);
			    SM(offeredby, COLOR_AQUA, "** %s has purchased your %i grams of ephedrine for $%i.", GetRPName(playerid), amount, price);
			    Log_Write("log_give", "%s (uid: %i) has sold their %i grams of ephedrine to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), pData[offeredby][pID], amount, GetPlayerNameEx(playerid), pData[playerid][pID], price);

			    TurfTaxCheck(offeredby, price);

			    pData[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
		}
	}
	else if(!strcmp(params, "weapon", true))
	{
	    if(pData[playerid][pSellOffer] == INVALID_PLAYER_ID || pData[playerid][pSellType] != ITEM_SELLGUN)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers for a weapon.");
	    }
	    if(pData[playerid][pCash] < pData[playerid][pSellPrice])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase the weapon.");
	    }

	    SellWeapon(pData[playerid][pSellOffer], playerid, pData[playerid][pSellExtra], pData[playerid][pSellPrice]);
		pData[playerid][pSellOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "lawyer", true))
	{
	    new
			offeredby = pData[playerid][pDefendOffer],
			price = pData[playerid][pDefendPrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers from a lawyer.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }
	    if(pData[playerid][pCash] < price)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't afford to accept the offer.");
	    }
	    if(!pData[playerid][pWantedLevel])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You are no longer wanted. You can't accept this offer anymore.");
	    }

		pData[playerid][pWantedLevel]--;

	    GivePlayerCash(playerid, -price);
	    GivePlayerCash(offeredby, price);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = wantedlevel - 1 WHERE uid = %i", pData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    SM(playerid, COLOR_AQUA, "** You have accepted %s's offer to reduce your wanted level for $%i.", GetRPName(offeredby), price);
	    SM(offeredby, COLOR_AQUA, "** %s has accepted your offer to reduce their wanted level for $%i.", GetRPName(playerid), price);

		IncreaseJobSkill(offeredby, JOB_LAWYER);
	    pData[playerid][pDefendOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "dicebet", true))
	{
	    new
			offeredby = pData[playerid][pDiceOffer],
			amount = pData[playerid][pDiceBet];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers for dice betting.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }
	    if(pData[playerid][pCash] < amount)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't afford to accept this bet.");
	    }
	    if(pData[offeredby][pCash] < amount)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player can't afford to accept this bet.");
	    }

		new
			rand[2];

		rand[0] = random(6) + 1;
		rand[1] = random(6) + 1;

		SendProximityMessage(offeredby, 20.0, COLOR_WHITE, "** %s rolls a dice which lands on the number %i.", GetRPName(offeredby), rand[0]);
		SendProximityMessage(playerid, 20.0, COLOR_WHITE, "** %s rolls a dice which lands on the number %i.", GetRPName(playerid), rand[1]);

		if(rand[0] > rand[1])
		{
		    GivePlayerCash(offeredby, amount);
		    GivePlayerCash(playerid, -amount);

		    SM(offeredby, COLOR_AQUA, "** You have won $%i from your dice bet with %s.", amount, GetRPName(playerid));
		    SM(playerid, COLOR_RED, "** You have lost $%i from your dice bet with %s.", amount, GetRPName(offeredby));

			if(amount > 10000 && !strcmp(GetPlayerIP(offeredby), GetPlayerIP(playerid)))
			{
				SAM(COLOR_YELLOW, "AdmWarning: %s (IP: %s) won a $%i dice bet against %s (IP: %s).", GetRPName(offeredby), GetPlayerIP(offeredby), amount, GetRPName(playerid), GetPlayerIP(playerid));
			}
		}
		else if(rand[0] == rand[1])
		{
			SM(offeredby, COLOR_AQUA, "** The bet of $%i was a tie. You kept your money as a result!", amount);
		    SM(playerid, COLOR_AQUA, "** The bet of $%i was a tie. You kept your money as a result!", amount);
		}
		else
		{
		    GivePlayerCash(offeredby, -amount);
		    GivePlayerCash(playerid, amount);

		    SM(playerid, COLOR_AQUA, "** You have won $%i from your dice bet with %s.", amount, GetRPName(offeredby));
		    SM(offeredby, COLOR_RED, "** You have lost $%i from your dice bet with %s.", amount, GetRPName(playerid));

			if(amount > 10000 && !strcmp(GetPlayerIP(offeredby), GetPlayerIP(playerid)))
			{
				SAM(COLOR_YELLOW, "AdmWarning: %s (IP: %s) won a $%i dice bet against %s (IP: %s).", GetRPName(playerid), GetPlayerIP(playerid), amount, GetRPName(offeredby), GetPlayerIP(offeredby));
			}
		}

	    pData[playerid][pDiceOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "invite", true))
	{
	    new
			offeredby = pData[playerid][pInviteOffer],
			houseid = pData[playerid][pInviteHouse];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any invitations to a house.");
	    }

		pData[playerid][pCP] = CHECKPOINT_HOUSE;
		SetPlayerCheckpoint(playerid, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], 3.0);

	    SM(playerid, COLOR_AQUA, "** You have accepted %s's invitation to their house.", GetRPName(offeredby));
	    SM(offeredby, COLOR_AQUA, "** %s has accepted your invitation to your house.", GetRPName(playerid));

	    pData[playerid][pInviteOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "rob", true))
	{
	    new
			offeredby = pData[playerid][pSendRob],
			robcash = pData[playerid][pCash];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_GREY2, "You haven't received any offers for rob.");
	    }
		GivePlayerCash(offeredby, robcash);
		GivePlayerCash(playerid, -robcash);
		pData[offeredby][pCrimes]++;

		SM(playerid, COLOR_AQUA, "** You have accepted %s's rob.", GetRPName(offeredby));
	    SM(offeredby, COLOR_AQUA, "** %s has accepted your rob.", GetRPName(playerid));
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s successfully robbed %s $%i", GetRPName(offeredby),GetRPName(playerid), robcash);
	    pData[playerid][pSendRob] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "robbery", true))
	{
	    new offeredby = pData[playerid][pRobberyOffer];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any invitations to a bank heist.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }
	    if(RobberyInfo[rRobbers][0] != offeredby || RobberyInfo[rStarted])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "The robbery invite is no longer available.");
		}
		if(GetBankRobbers() >= MAX_BANK_ROBBERS)
		{
	    	return SM(playerid, COLOR_SYNTAX, "This bank robbery has reached its limit of %i robbers.", MAX_BANK_ROBBERS);
 		}

		AddToBankRobbery(playerid);

	    SM(playerid, COLOR_AQUA, "** You have accepted %s's bank robbery invitation.", GetRPName(offeredby));
	    SM(offeredby, COLOR_AQUA, "** %s has accepted your bank robbery invitation.", GetRPName(playerid));

	    pData[playerid][pRobberyOffer] = INVALID_PLAYER_ID;
	}
	return 1;
}

CMD:e(playerid, params[])
{
	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /e [executive chat]");
	}
	if(pData[playerid][pToggleAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't speak in the executive chat as you have admin chats toggled.");
	}

	foreach(new i : Player)
	{
	    if(pData[i][pAdmin] > 5 && !pData[i][pToggleAdmin])
	    {
			SM(i, 0xA077BFFF, "** [%s] %s: %s **", GetAdminRank(playerid), GetRPName(playerid), params);
		}
	}

	return 1;
}

CMD:ha(playerid, params[])
{
	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /ha [head admin chat]");
	}
	if(pData[playerid][pToggleAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't speak in the head administrator chat as you have admin chats toggled.");
	}

	foreach(new i : Player)
	{
	    if(pData[i][pAdmin] > 4 && !pData[i][pToggleAdmin])
	    {
			SM(i, 0x5C80FFFF, "** [%s] %s: %s **", GetAdminRank(playerid), GetRPName(playerid), params);
		}
	}

	return 1;
}

CMD:a(playerid, params[])
{
	if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /a [admin chat]");
	}
	if(!enabledAdmin && pData[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The admin channel is disabled by Stanley.");
	}
	if(pData[playerid][pToggleAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't speak in the admin chat as you have it toggled.");
	}

	foreach(new i : Player)
	{
	    if(pData[i][pAdmin] > 0 && !pData[i][pToggleAdmin])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
	            SM(i, COLOR_TEAL, "** "RED"%s{D1E0BA} %s {F9B64A}%s"WHITE": %.*s... **", GetAdminDivision(playerid),GetAdminRank(playerid), GetRPName(playerid), MAX_SPLIT_LENGTH, params);
	            SM(i, COLOR_TEAL, "** "RED"%s{D1E0BA} %s {F9B64A}%s"WHITE": ...%s **", GetAdminDivision(playerid),GetAdminRank(playerid), GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
				SM(i, COLOR_TEAL, "** "RED"%s{D1E0BA} %s {F9B64A}%s"WHITE": %s **", GetAdminDivision(playerid),GetAdminRank(playerid), GetRPName(playerid), params);
			}
		}
	}

	return 1;
}

CMD:settitle(playerid, params[])
{
	new targetid, option[14], param[128];
	if(pData[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[14]S()[128]", targetid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /settitle [playerid] [option]");
	    SCM(playerid, COLOR_GREY2, "List of options: Name, Color");
		return 1;
	}
	if(!strcmp(option, "name", true))
	{
	    if(isnull(param) || strlen(params) > 32)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /settitle [playerid] [name] [text ('none' to reset)]");
		}

		strcpy(pData[targetid][pCustomTitle], param, 64);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET customtitle = '%e' WHERE uid = %i", param, pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the customtitle of %s to '%s'.", GetRPName(playerid), GetRPName(targetid), param);
	}
    else if(!strcmp(option, "color", true))
	{
	    new color;

	    if(sscanf(param, "h", color))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /settitle [playerid] [color] [0xRRGGBBAA]");
		}

		pData[targetid][pCustomTColor] = color & ~0xff;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET customcolor = %i WHERE uid = %i", pData[targetid][pCustomTColor], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the {%06x}color{FF6347} of %s's title.", GetRPName(playerid), color >>> 8, GetRPName(targetid));
	}
	return 1;
}

//------------------------[BINDS BY STEWART]---------------------------------
CMD:setbindd(playerid, params[])
{
	new option[10], param[128];
	
	if(sscanf(params, "s[10]S()[128]", option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /setbind [option]");
	    SCM(playerid, COLOR_WHITE, "Options: type(/me or /do), text");
		return 1;
	}
	if(!strcmp(option, "type", true))
	{
        if(isnull(param))
		{
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setbind [type] [Slot(1-5)]");
		}
        else if(!strcmp(param, "1", true))
        {
            ShowDialogToPlayer(playerid, DIALOG_BINDTYPE);
        }
        else if(!strcmp(param, "2", true))
        {
            ShowDialogToPlayer(playerid, DIALOG_BINDTYPE2);
		}
		else if(!strcmp(param, "3", true))
        {
            ShowDialogToPlayer(playerid, DIALOG_BINDTYPE3);
        }
        else if(!strcmp(param, "4", true))
        {
            ShowDialogToPlayer(playerid, DIALOG_BINDTYPE4);
		}
		else if(!strcmp(param, "5", true))
        {
            ShowDialogToPlayer(playerid, DIALOG_BINDTYPE5);
		}
	}
	else if(!strcmp(option, "text", true))
	{
	    if(isnull(param))
		{
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setbind [text] [Slot(1-5)]");
		}
        else if(!strcmp(param, "1", true))
        {
            ShowDialogToPlayer(playerid, DIALOG_BINDTEXT);
        }
        else if(!strcmp(param, "2", true))
        {
            ShowDialogToPlayer(playerid, DIALOG_BINDTEXT2);
		}
		else if(!strcmp(param, "3", true))
        {
            ShowDialogToPlayer(playerid, DIALOG_BINDTEXT3);
        }
        else if(!strcmp(param, "4", true))
        {
            ShowDialogToPlayer(playerid, DIALOG_BINDTEXT4);
		}
		else if(!strcmp(param, "5", true))
        {
            ShowDialogToPlayer(playerid, DIALOG_BINDTEXT5);
		}
	}
	return 1;
}

CMD:binds(playerid, params[]) return callcmd::bind(playerid, params);
CMD:bind(playerid, params[])
{
    //new level, option[8];

    /*if(!(0 <= level <= 5))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid Slot. Bind Slot is 1 to 8 Only.");
	}
	if(sscanf(params, "s[8]", option))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /bind [slot]");
        SM(playerid, COLOR_GREY2, "[SLOT 1]: %s : %s", (pData[playerid][pBindtype]) ? ("/do") : ("/me"), (pData[playerid][pBind]));
        SM(playerid, COLOR_GREY2, "[SLOT 2]: %s : %s", (pData[playerid][pBindtype2]) ? ("/do") : ("/me"), (pData[playerid][pBind2]));
	    SM(playerid, COLOR_GREY2, "[SLOT 3]: %s : %s", (pData[playerid][pBindtype3]) ? ("/do") : ("/me"), (pData[playerid][pBind3]));
	    SM(playerid, COLOR_GREY2, "[SLOT 4]: %s : %s", (pData[playerid][pBindtype4]) ? ("/do") : ("/me"), (pData[playerid][pBind4]));
	    SM(playerid, COLOR_GREY2, "[SLOT 5]: %s : %s", (pData[playerid][pBindtype5]) ? ("/do") : ("/me"), (pData[playerid][pBind5]));
	    SM(playerid, COLOR_GREY2, "[SLOT 6]: /do : %s",(pData[playerid][pBind6]));
	    SM(playerid, COLOR_GREY2, "[SLOT 7]: /do : %s",(pData[playerid][pBind7]));
	    SM(playerid, COLOR_GREY2, "[SLOT 8]: /do : %s",(pData[playerid][pBind8]));
	    return 1;
	}
	if(!strcmp(option, "1", true))
	{
		{
	    	//SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}* %s %s", GetRPName(playerid), (pData[playerid][pBind]));
	    	//CallLocalFunction("OnPlayerText", "s", (pData[playerid][pBind]));
	        Binds1(playerid);
		}
	}
	if(!strcmp(option, "2", true))
	{
		{
	    	//SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}* %s %s", GetRPName(playerid), (pData[playerid][pBind2]));
	        Binds2(playerid);
		}
	}
    if(!strcmp(option, "3", true))
	{
		{
	    	//SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}* %s %s", GetRPName(playerid), (pData[playerid][pBind3]));
	        Binds3(playerid);
		}
	}
	if(!strcmp(option, "4", true))
	{
		{
	    	//SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}* %s %s", GetRPName(playerid), (pData[playerid][pBind4]));
	    	Binds4(playerid);
		}
	}
	if(!strcmp(option, "5", true))
	{
		{
	    	//SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s (( %s ))", (pData[playerid][pBind5]), GetRPName(playerid));
	    	Binds5(playerid);
		}
	}*/
	/*if(!strcmp(option, "6", true))
	{
		{
	    	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s (( %s ))", (pData[playerid][pBind6]), GetRPName(playerid));
		}
	}
	if(!strcmp(option, "7", true))
	{
		{
	    	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s (( %s ))", (pData[playerid][pBind7]), GetRPName(playerid));
		}
	}
	if(!strcmp(option, "8", true))
	{
		{
	    	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s (( %s ))", (pData[playerid][pBind8]), GetRPName(playerid));
		}
	}*/

	new str[500], string[128];
	format(string, sizeof(string), "B1\t%s\t%s\n", (pData[playerid][pBindtype]) ? ("/do") : ("/me"), (pData[playerid][pBind]));
	strcat(str, string);
	format(string, sizeof(string), "B2\t%s\t%s\n", (pData[playerid][pBindtype2]) ? ("/do") : ("/me"), (pData[playerid][pBind2]));
	strcat(str, string);
	format(string, sizeof(string), "B3\t%s\t%s\n", (pData[playerid][pBindtype3]) ? ("/do") : ("/me"), (pData[playerid][pBind3]));
	strcat(str, string);
	format(string, sizeof(string), "B4\t%s\t%s\n", (pData[playerid][pBindtype4]) ? ("/do") : ("/me"), (pData[playerid][pBind4]));
	strcat(str, string);
	format(string, sizeof(string), "B5\t%s\t%s", (pData[playerid][pBindtype4]) ? ("/do") : ("/me"), (pData[playerid][pBind4]));
	strcat(str, string);

	ShowPlayerDialog(playerid, DIALOG_BINDMAIN, DIALOG_STYLE_TABLIST, "Dynamic Bind System - Alcazar City RP", str, "Confirm", "Close");
	return 1;
}
// /b1-8
CMD:b1(playerid, params[])
{
    //SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}* %s %s", GetRPName(playerid), (pData[playerid][pBind]));
    Binds1(playerid);
}

CMD:b2(playerid, params[])
{
    //SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}* %s %s", GetRPName(playerid), (pData[playerid][pBind2]));
    Binds2(playerid);
}

CMD:b3(playerid, params[])
{
    //SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}* %s %s", GetRPName(playerid), (pData[playerid][pBind3]));
    Binds3(playerid);
}

CMD:b4(playerid, params[])
{
    //SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA}* %s %s", GetRPName(playerid), (pData[playerid][pBind4]));
    Binds4(playerid);
}

CMD:b5(playerid, params[])
{
    //SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s (( %s ))", (pData[playerid][pBind5]), GetRPName(playerid));
	Binds5(playerid);
}

/*CMD:b6(playerid, params[])
{
    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s (( %s ))", (pData[playerid][pBind6]), GetRPName(playerid));
}

CMD:b7(playerid, params[])
{
    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s (( %s ))", (pData[playerid][pBind7]), GetRPName(playerid));
}

CMD:b8(playerid, params[])
{
    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "{C2A2DA} %s (( %s ))", (pData[playerid][pBind8]), GetRPName(playerid));
}*/

CMD:loadfs(playerid, params[])
{
	if(pData[playerid][pAdmin] < 7)
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	SendRconCommand("loadfs pcrpmap");
	SendClientMessage(playerid, COLOR_YELLOW, "Filterscript Loaded");
	return 1;
}

CMD:announcebot(playerid, params[])
{
	new text[128];
    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[128]", text))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /announcebot [text]");
	}

	SMA(COLOR_YELLOW, "Administrator %s > Discord: %s", GetRPName(playerid), text);
	//format(string, sizeof(string), "%s", text);
	DCC_SendChannelMessage(commandChannel, text);
	return 1;
}

CMD:ah(playerid, params[]) return callcmd::adminhelp(playerid, params);
CMD:ahelp(playerid, params[]) return callcmd::adminhelp(playerid, params);
CMD:adminhelp(playerid, params[])
{
    new string[3500];
	if(!pData[playerid][pAdmin] && !IsPlayerAdmin(playerid) && !pData[playerid][pFormerAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(pData[playerid][pAdmin] >= 1)
	{
		strcat(string, ""SVRCLR"Trial Admin:"WHITE" /goto /sendto /oprison /prison /gethere, /a, /respawncars, /skick, /sban, /sjail, /pinfo, /spec, /reports, /admins, /flag, /removeflag\n");
		strcat(string, ""SVRCLR"Trial Admin:"WHITE" /ocheck, /oflag, /listflagged /(am)egaphone /listflags, /check, /dm\n\n");
	}
	if(pData[playerid][pAdmin] >= 2)
	{
		strcat(string, "[Junior Admin]"WHITE" /veh, /masked, /cureleg, /aduty, /adminname, /kick, /ban, /warn, /slap, /getip, /iplookup, /ogetip, /setint, /setvw\n");
		strcat(string, "[Junior Admin]"WHITE" /setskin, /revive, /heject, /goto, /gethere, /gotocar, /getcar, /gotocoords, /gotoint, /listen, /jetpack, /sendto\n");
		strcat(string, "[Junior Admin]"WHITE" /freeze, /unfreeze, /rwarn, /runmute, /nmute, /admute, /hmute, /gmute, /listguns, /disarm, /c, /listenpm\n");
		strcat(string, "[Junior Admin]"WHITE" /prisonic, /listjailed, /lastactive, /checkinv, /afklist, /acceptname, /denyname, /namechanges, /nrn\n");
		strcat(string, "[Junior Admin]"WHITE" /prisoninfo, /relog, /rtnc, /sth, /nro, /nao, /nor, /post, /contracts, /denyhit, /mark, /gotomark\n\n");
	}
	if(pData[playerid][pAdmin] >= 3)
	{
		strcat(string, "[General Admin]"WHITE" /prison, /givefirework, /togam, /freezenear, /unfreezenear, /sprison, /oprison, /release, /fine, /pfine, /ofine, /sethp, /setarmor\n");
		strcat(string, "[General Admin]"WHITE", /destroyveh, /broadcast, /fixveh, /clearchat, /healrange, /shots, /damages\n");
		strcat(string, "[General Admin]"WHITE" /resetadtimer, /baninfo, /banhistory, /kills, /togooc, (/togn)ewbie, /togglobal, /listpvehs, /despawnpveh\n");
		strcat(string, "[General Admin]"WHITE" /aclearwanted, /removedm, /savevehicle, /editvehicle, /removevehicle, /refillcars, /refilldrug, /duel\n\n");
		strcat(string, "[General Admin]"WHITE" /startchat, /invitechat, /kickchat, /endchat\n");
	}
	if(pData[playerid][pAdmin] >= 4)
	{
		strcat(string, "[Senior Admin]"WHITE" /givegun, /setname, /startlotto, /permaban, /oban, /unban, /unbanip, /banip, /lockaccount, /unlockaccount\n");
		strcat(string, "[Senior Admin]"WHITE" /explode, /event, /gplay, /gplayurl, /gstop, /sethpall, /setarmorall, /settime, /addtoevent\n\n");
	}
	if(pData[playerid][pAdmin] >= 5)
	{
	    strcat(string, "[Head Admin]"WHITE" /aheadshot, /givefirework, /setrobtimer, /setchoptimer, /setdonator, /forcepayday, /givebackpack, /clearreports\n");
	    strcat(string, "[Head Admin]"WHITE" /removedonator, /rangeban, /deleteaccount, /previewint, /nearest, /dynamichelp, /setscore, /resetbackpack\n");
	    strcat(string, "[Head Admin]"WHITE" /saveaccounts, /adestroyboombox, /setbanktimer, /resetrobbery, /resetchop, /givepayday, /givedoublexp, /forceweather, /togMM\n\n");
	}
    if(pData[playerid][pAdmin] >= 6)
	{
	    strcat(string, "[Assistant Directors]"WHITE" /makehelper, /omakeadmin, /resetrob, /startlottoex, /omakehelper, /setmotd, /forceaduty, /olistadmins\n");
	    strcat(string, "[Assistant Directors]"WHITE" /olisthelpers, /sellinactive, /changelist, /fixplayerid, /makeYT, /makeMM\n\n");
	}
    if(pData[playerid][pAdmin] >= 7)
	{
	    strcat(string, "[Executive Managers]"WHITE" /deleteaccount /forcepayday /doublexp\n");
	    strcat(string, "[Executive Managers]"WHITE" /doublesalary /togpurge, /settitle, /givepveh, /givemoney, /givemoneyall, /doublexp, /givediamond, /givediamondall\n\n");
	    strcat(string, "[Executive Managers]"WHITE" /setsabong, /stopsabong\n\n");
	}
	if(pData[playerid][pAdmin] >= 8)
	{
	    strcat(string, "[Executive Directors]"WHITE" /setstat /anticheat /setstaff /makeadmin /omakeadmin /setformeradmin\n");
	    strcat(string, "[Executive Directors]"WHITE" /setstat, /setpassword\n\n");
	}
	if(pData[playerid][pFactionMod])
	{
	    strcat(string, "Faction Mod: /createfaction, /editfaction, /setfaction, /purgefaction.\n");
	}
	if(pData[playerid][pDeveloper])
	{
	    strcat(string, "Developer: /gmx, /makeMM, /createaccount.\n");
	}
	if(pData[playerid][pDynamicAdmin])
	{
	    strcat(string, "Dynamic Admin: /editentrance, /editgarage, /editbiz, /editgate, /edithouse.\n");
	}
	if(pData[playerid][pAdminPersonnel])
	{
	    strcat(string, "Faction Mod: /setstaff, /makehelper, /omakehelper.\n");
	}
	if(pData[playerid][pGangMod])
	{
	    strcat(string, "Gang Mod: /creategang, /editgang, /removegang, /gangstrike, /setgang.\n");
	    strcat(string, "Gang Mod: /createpoint, /editpoint, /removepoint, /createentrance, /removeentrance, /editentrance\n");
	}
	if(pData[playerid][pBanAppealer])
	{
	    strcat(string, "Ban Appealer: /banip, /baninfo, /banhistory, /unbanip, /unban.\n");
	}
 	if(pData[playerid][pEventMod])
	{
	    strcat(string, "Event Mod: /event /addtoevent\n");
 	}
	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Admin Commands", string, "Close","");
	return 1;
}

CMD:reports(playerid, params[])
{
	if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	SCM(playerid, SERVER_COLOR, "Pending Reports:");

	for(new i = 0; i < MAX_REPORTS; i ++)
	{
	    if(ReportInfo[i][rExists] && !ReportInfo[i][rAccepted])
	    {
	        SM(playerid, COLOR_LIGHTORANGE, "(RID: %i) %s[%i] reports: %s", i, GetRPName(ReportInfo[i][rReporter]), ReportInfo[i][rReporter], ReportInfo[i][rText]);
		}
	}

	SCM(playerid, COLOR_YELLOW, "** Use /ar [rid] or /tr [rid] to handle these reports.");
	return 1;
}

CMD:rtnc(playerid, params[])
{
    new reportid;

	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", reportid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /rtnc [reportid] (Sends to newbie chat)");
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid report ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The report specified is being handled by another admin.");
	}

    SAM(COLOR_LIGHTRED, "AdmCmd: %s has sent report %i to newbie chat.", GetRPName(playerid), reportid);
	SM(ReportInfo[reportid][rReporter], COLOR_YELLOW, "%s has redirected your report to the newbie chat.", GetRPName(playerid));
    SendNewbieChatMessage(ReportInfo[reportid][rReporter], ReportInfo[reportid][rText]);
	ReportInfo[reportid][rExists] = 0;
	return 1;
}

CMD:sth(playerid, params[])
{
    new reportid;

	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", reportid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /sth [reportid] (Sends to helpers)");
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid report ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The report specified is being handled by another admin.");
	}

    SAM(COLOR_LIGHTRED, "AdmCmd: %s has sent report %i to helpers.", GetRPName(playerid), reportid);
	SM(ReportInfo[reportid][rReporter], COLOR_YELLOW, "%s has redirected your report to all helpers online.", GetRPName(playerid));

    strcpy(pData[ReportInfo[reportid][rReporter]][pHelpRequest], ReportInfo[reportid][rText], 128);
	SendHelperMessage(COLOR_AQUA, "** Help Request from %s[%i]: %s **", GetRPName(ReportInfo[reportid][rReporter]), ReportInfo[reportid][rReporter], ReportInfo[reportid][rText]);

	pData[playerid][pLastRequest] = gettime();
	ReportInfo[reportid][rExists] = 0;
	return 1;
}

/*CMD:ar(playerid, params[])
{
	new reportid, chat;

	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "iI(1)", reportid, chat))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /ar [reportid] [chat (optional - 0/1)]");
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid report ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The report specified is being handled by another admin.");
	}
	if(pData[playerid][pActiveReport] >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have a report active already. Use /cr to close it.");
	}

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has accepted report %i from "WHITE"%s.", GetRPName(playerid), reportid, GetRPName(ReportInfo[reportid][rReporter]));

	if(chat)
	{
		SCM(playerid, COLOR_TEAL, "** You can use "WHITE"'/rr'"TEAL" to speak with the reporter and "WHITE"'/cr'"TEAL" to close the report.");
		SM(ReportInfo[reportid][rReporter], COLOR_TEAL, ""WHITE"%s"TEAL" has accepted your report and is now reviewing it.", GetRPName(playerid));
		SCM(ReportInfo[reportid][rReporter], COLOR_TEAL, "You can use "WHITE"'/rr'"TEAL" to reply to the admin handling your report.");

		pData[playerid][pActiveReport] = reportid;
		pData[ReportInfo[reportid][rReporter]][pActiveReport] = reportid;

		ReportInfo[reportid][rHandledBy] = playerid;
		ReportInfo[reportid][rAccepted] = 1;
	}
	else
	{
	    SM(ReportInfo[reportid][rReporter], COLOR_TEAL, ""WHITE"%s"TEAL" has accepted your report and is now reviewing it.", GetRPName(playerid));
	    ReportInfo[reportid][rExists] = 0;
	}

	pData[playerid][pReports]++;

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET reports = %i WHERE uid = %i", pData[playerid][pReports], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	return 1;
}*/

CMD:ar(playerid, params[])
{
	new reportid, chat;

	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "iI(1)", reportid, chat))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /ar [reportid] [chat (optional - 0/1)]");
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid report ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The report specified is being handled by another admin.");
	}
	if(pData[playerid][pActiveReport] >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have a report active already. Use /cr to close it.");
	}

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has accepted report %i from %s.", GetRPName(playerid), reportid, GetRPName(ReportInfo[reportid][rReporter]));

	if(chat)
	{
		SCM(playerid, COLOR_WHITE, "** You can use /rr to speak with the reporter and /cr to close the report.");
		SM(ReportInfo[reportid][rReporter], COLOR_YELLOW, "%s has accepted your report and is now reviewing it.", GetRPName(playerid));
		SCM(ReportInfo[reportid][rReporter], COLOR_YELLOW, "You can use /rr to reply to the admin handling your report.");

		pData[playerid][pActiveReport] = reportid;
		pData[ReportInfo[reportid][rReporter]][pActiveReport] = reportid;

		ReportInfo[reportid][rHandledBy] = playerid;
		ReportInfo[reportid][rAccepted] = 1;
	}
	else
	{
	    SM(ReportInfo[reportid][rReporter], COLOR_YELLOW, "%s has accepted your report and is now reviewing it.", GetRPName(playerid));
	    ReportInfo[reportid][rExists] = 0;
	}

	pData[playerid][pReports]++;

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET reports = %i WHERE uid = %i", pData[playerid][pReports], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	return 1;
}

CMD:reporttips(playerid, params[])
{
	ShowPlayerDialog(playerid,0,DIALOG_STYLE_MSGBOX,"Report Tips","Tips when reporting:\n- Report what you need, not who you need.\n- Be specific, report exactly what you need.\n- Do not make false reports.\n- Do not flame admins.\n- Report only for in-game items.","Close", "");
	return 1;
}

CMD:tr(playerid, params[])
{
	new reportid, reason[128];

	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "iS(N/A)[128]", reportid, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /tr [reportid] [reason (optional)]");
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid report ID.");
	}
    if(ReportInfo[reportid][rAccepted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The report specified is being handled by another admin.");
	}

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has trashed report %i from %s, reason: %s", GetRPName(playerid), reportid, GetRPName(ReportInfo[reportid][rReporter]), reason);
	SM(ReportInfo[reportid][rReporter], COLOR_LIGHTRED, "** %s has trashed your report, reason: %s", GetRPName(playerid), reason);
	ReportInfo[reportid][rExists] = 0;

	ShowPlayerDialog(ReportInfo[reportid][rReporter], 0, DIALOG_STYLE_MSGBOX,"Report Tips","Tips when reporting:\n- Report what you need, not who you need.\n- Be specific, report exactly what you need.\n- Do not make false reports.\n- Do not flame admins.\n- Report only for in-game items.","Close", "");
	return 1;
}

CMD:nro(playerid, params[])
{
	new reportid;

	if(pData[playerid][pAdmin] < 2)
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", reportid))
	{
 		SCM(playerid, COLOR_SYNTAX, "Usage: /nro [reportid]");
 		SCM(playerid, COLOR_WHITE, "This command will clear a report for not being a rulebreaking offense.");
 		return 1;
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "There's not a report that currently exists with this ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This report is already being handled by another administrator.");
	}

 	SAM(COLOR_LIGHTRED, "AdmCmd: %s has trashed report %i from %s as their report involves a non-rulebreaking offense.", GetRPName(playerid), reportid, GetRPName(ReportInfo[reportid][rReporter]));
	SM(ReportInfo[reportid][rReporter], COLOR_LIGHTRED, "%s has trashed your report as it involves a non-rulebreaking offense", GetRPName(playerid));
	SM(ReportInfo[reportid][rReporter], COLOR_LIGHTRED, "Please visit our rules page at ("SERVER_URL") for a full list of rulebreaking offenses.");
	ReportInfo[reportid][rExists] = 0;
	return 1;
}

CMD:nao(playerid, params[])
{
	new reportid;

	if(pData[playerid][pAdmin] < 2)
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", reportid))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /nao [reportid]");
   		SCM(playerid, COLOR_WHITE, "This command will clear a report if there isn't a high enough administrator online.");
   		return 1;
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "There's not a report that currently exists with this ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This report is already being handled by another administrator.");
	}

  	SAM(COLOR_LIGHTRED, "AdmCmd: %s has trashed report %i from %s as there are no admins online to handle it.", GetRPName(playerid), reportid, GetRPName(ReportInfo[reportid][rReporter]));
	SM(ReportInfo[reportid][rReporter], COLOR_LIGHTRED, "%s has trashed your report as there no admins online with the authority to handle it.", GetRPName(playerid));
	ReportInfo[reportid][rExists] = 0;
	return 1;
}

CMD:norevive(playerid, params[])
{
	return callcmd::nor(playerid, params);
}

CMD:nor(playerid, params[])
{
	new reportid;

	if(pData[playerid][pAdmin] < 2)
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", reportid))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /nor [reportid]");
   		SCM(playerid, COLOR_WHITE, "This command will clear a report if the reporters revive request is invalid.");
   		return 1;
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "There's not a report that currently exists with this ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This report is already being handled by another administrator.");
	}

 	SAM(COLOR_LIGHTRED, "AdmCmd: %s has trashed report %i from %s as their request for a revive is invalid.", GetRPName(playerid), reportid, GetRPName(ReportInfo[reportid][rReporter]));
	SM(ReportInfo[reportid][rReporter], COLOR_LIGHTRED, "%s has trashed your report as your request for a revive is invalid. (/phone)", GetRPName(playerid));
	ReportInfo[reportid][rExists] = 0;
	return 1;
}

CMD:post(playerid, params[])
{
	new reportid;

	if(pData[playerid][pAdmin] < 2)
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", reportid))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /nor [reportid]");
   		SCM(playerid, COLOR_WHITE, "This command will clear a report and notify the player to post an admin request.");
   		return 1;
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "There's not a report that currently exists with this ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This report is already being handled by another administrator.");
	}

 	SAM(COLOR_LIGHTRED, "AdmCmd: %s has trashed report %i from %s as it needs to be handled on the forums.", GetRPName(playerid), reportid, GetRPName(ReportInfo[reportid][rReporter]));
	SM(ReportInfo[reportid][rReporter], COLOR_LIGHTRED, "%s has trashed your report as your issue at hand must be handled on our forums.", GetRPName(playerid));
	SM(ReportInfo[reportid][rReporter], COLOR_LIGHTRED, "Please visit our website at ("SERVER_URL") in order to to resolve this issue.");
	ReportInfo[reportid][rExists] = 0;
	return 1;
}

CMD:rr(playerid, params[])
{
	new reportid = pData[playerid][pActiveReport];

    if(reportid == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have no active report to reply to.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /rr [reply text]");
	}

	if(ReportInfo[reportid][rReporter] == playerid)
	{
	    SM(ReportInfo[reportid][rHandledBy], COLOR_YELLOW, "** Player %s (ID %i): %s **", GetRPName(playerid), playerid, params);
	    SM(playerid, COLOR_YELLOW, "** Reply to %s (ID %i): %s **", GetRPName(ReportInfo[reportid][rHandledBy]), ReportInfo[reportid][rHandledBy], params);
	}
	else
	{
	    SM(ReportInfo[reportid][rReporter], COLOR_YELLOW, "** Admin %s (ID %i): %s **", GetRPName(playerid), playerid, params);
	    SM(playerid, COLOR_YELLOW, "** Reply to %s (ID %i): %s **", GetRPName(ReportInfo[reportid][rReporter]), ReportInfo[reportid][rReporter], params);
	}

	return 1;
}

CMD:cr(playerid, params[])
{
    new reportid = pData[playerid][pActiveReport];

    if(reportid == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have no active report which you can close.");
	}

	if(ReportInfo[reportid][rReporter] == playerid)
	{
	    SM(ReportInfo[reportid][rHandledBy], COLOR_YELLOW, "** Player %s has closed the report. **", GetRPName(playerid));
	    SM(playerid, COLOR_YELLOW, "You have closed the report and ended your conversation with the admin.");
	}
	else
	{
	    SM(ReportInfo[reportid][rReporter], COLOR_YELLOW, "** Administrator %s has closed the report. **", GetRPName(playerid));
	    SM(playerid, COLOR_YELLOW, "You have closed the report and ended your conversation with the reporter.");
	}

	if(ReportInfo[reportid][rReporter] != INVALID_PLAYER_ID)
	{
		pData[ReportInfo[reportid][rReporter]][pActiveReport] = -1;
	}
	if(ReportInfo[reportid][rHandledBy] != INVALID_PLAYER_ID)
	{
		pData[ReportInfo[reportid][rHandledBy]][pActiveReport] = -1;
	}

	ReportInfo[reportid][rExists] = 0;
	ReportInfo[reportid][rAccepted] = 0;
	ReportInfo[reportid][rReporter] = INVALID_PLAYER_ID;
	ReportInfo[reportid][rHandledBy] = INVALID_PLAYER_ID;
	pData[playerid][pActiveReport] = -1;

	return 1;
}

CMD:skick(playerid, params[])
{
	new targetid, reason[128];

	if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /skick [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(pData[targetid][pAdmin] > pData[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be kicked.");
	}

    Log_Write("log_punishments", "%s (uid: %i) silently kicked %s (uid: %i), reason: %s", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], reason);
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has silently kicked %s, reason: %s", GetRPName(playerid), GetRPName(targetid), reason);
	KickPlayer(targetid);
	return 1;
}

CMD:sban(playerid, params[])
{
	new targetid, reason[128];

	if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /sban [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(pData[targetid][pAdmin] > pData[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be banned.");
	}
	if(pData[targetid][pAdmin] == 7)
	{
 		SAM(COLOR_YELLOW, "Warning: %s has been autokicked for trying to ban a Executive Directors(%s).", GetRPName(playerid), GetRPName(targetid));
 		KickPlayer(playerid);
 		return 1;
	}

	Log_Write("log_punishments", "%s (uid: %i) silently banned %s (uid: %i), reason: %s", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], reason);

	SAM(COLOR_LIGHTRED, "AdmCmd: %s was silently banned by %s, reason: %s", GetRPName(targetid), GetRPName(playerid), reason);
	BanPlayer(targetid, "Trial Admin", reason, true);
	return 1;
}

CMD:sjail(playerid, params[])
{
	new targetid, minutes, reason[128];

	if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "uis[128]", targetid, minutes, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /sjail [playerid] [minutes] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(pData[targetid][pAdmin] > pData[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be jailed.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(minutes < 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The amount of minutes specified cannot be below zero.");
	}

    PlayerTextDrawShow(targetid, customHUD[targetid][1]);


    pData[targetid][pJailType] = 1;
    pData[targetid][pJailTime] = minutes * 60;

    ResetPlayerWeaponsEx(targetid);
	ResetPlayer(targetid);
	SetPlayerInJail(targetid);

	Log_Write("log_punishments", "%s (uid: %i) silently jailed %s (uid: %i) for %i minutes, reason: %s", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], minutes, reason);
    SMA(COLOR_LIGHTRED, "AdmCmd: %s was jailed for %i minutes by an Admin, reason: %s", GetRPName(targetid), minutes, reason);
    SM(targetid, COLOR_AQUA, "** You have been jailed for %i minutes by an admin.", minutes);
    return 1;
}

CMD:pinfo(playerid, params[])
{
	new targetid;

	if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /pinfo [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	SM(playerid, COLOR_GREY1, "(ID: %i) - (Name: %s) - (Ping: %i) - (Packet Loss: %.1f%c)", targetid, GetRPName(targetid), GetPlayerPing(targetid), NetStats_PacketLossPercent(targetid), '%');
	return 1;
}

CMD:admins(playerid, params[])
{
 	SCM(playerid, COLOR_WHITE, "|___________ Online Administrators List___________|");

	foreach(new i : Player)
	{
	    if(pData[i][pAdmin] > 0)
		{
			if(!strcmp(pData[i][pAdminName], "None", true))
            	SM(playerid, COLOR_GREY2, "ID: %i %s %s - Status: %s", i, GetAdminRank(i), pData[i][pUsername], (pData[i][pAdminDuty]) ? (""GREEN"Administrating") : (""GREEN"Roleplaying"));
        	else
				SM(playerid, COLOR_GREY2, "ID: %i %s %s (%s) - Status: %s", i, GetAdminRank(i), pData[i][pUsername], pData[i][pAdminName], (pData[i][pAdminDuty]) ? (""GREEN"Administrating") : (""GREEN"Roleplaying"));
		}
	}
	return 1;
}

CMD:checknewbies(playerid, params[])
{
	new targetid;
	if(!pData[playerid][pAdmin] && pData[playerid][pHelper] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /checknewbies [playerid]");
	}
	SM(playerid, COLOR_SYNTAX, "Level %i Player %s has used newbie {00FF00}%s times.", pData[targetid][pLevel], GetRPName(targetid), FormatNumber(pData[targetid][pNewbies], 0));
	return 1;
}

CMD:helpers(playerid, params[])
{
	SCM(playerid, SERVER_COLOR, "Helpers Online:");

	foreach(new i : Player)
	{
	    if(pData[i][pHelper] > 0 && !pData[i][pPassport])
	    {
	        if(pData[playerid][pAdmin] > 0 || pData[playerid][pHelper] > 0)
	            SM(playerid, COLOR_WHITE, "(ID: %i) %s %s - Help Requests: %s - Newbies: %s", i, GetHelperRank(i), GetRPName(i), FormatNumber(pData[i][pHelpRequests], 0), FormatNumber(pData[i][pNewbies], 0));
	        else
				SM(playerid, COLOR_WHITE, "(ID: %i) %s %s", i, GetHelperRank(i), GetRPName(i));
		}
	}

	return 1;
}

CMD:flag(playerid, params[])
{
	new targetid, desc[128];

	if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, desc))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /flag [playerid] [description]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO flags VALUES(null, %i, '%s', NOW(), '%e')", pData[targetid][pID], GetPlayerNameEx(playerid), desc);
	mysql_tquery(connectionID, queryBuffer);

	SAM(COLOR_LIGHTRED, "AdmCmd: %s flagged %s's account for '%s'.", GetRPName(playerid), GetRPName(targetid), desc);
	return 1;
}

CMD:oflag(playerid, params[])
{
	new name[24], desc[128];

	if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]s[128]", name, desc))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /oflag [username] [description]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = '%e'", name);
	mysql_tquery(connectionID, queryBuffer, "OnAdminOfflineFlag", "iss", playerid, name, desc);
	return 1;
}

CMD:listflagged(playerid, params[])
{
	if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	mysql_tquery(connectionID, "SELECT b.username FROM flags a, users b WHERE a.uid = b.uid ORDER BY b.username", "OnQueryFinished", "ii", THREAD_LIST_FLAGGED, playerid);
	return 1;
}

CMD:ocheck(playerid, params[])
{
	new name[24];

	if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]", name))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /ocheck [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM users WHERE username = '%e'", name);
	mysql_tquery(connectionID, queryBuffer, "OnAdminOfflineCheck", "is", playerid, name);
	return 1;
}

CMD:removeflag(playerid, params[])
{
	new targetid, slot;

	if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "ui", targetid, slot))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /removeflag [playerid] [slot]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(slot < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid slot specified.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id FROM flags WHERE uid = %i ORDER BY id LIMIT %i, 1", pData[targetid][pID], slot-1);
	mysql_tquery(connectionID, queryBuffer, "OnVerifyRemoveFlag", "iii", playerid, targetid, slot);
	return 1;
}

CMD:listflags(playerid, params[])
{
    new targetid;

	if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /listflags [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM flags WHERE uid = %i ORDER BY date DESC", pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer, "OnListPlayerFlags", "ii", playerid, targetid);
	return 1;
}

CMD:spec(playerid, params[])
{
    new targetid;

	if(pData[playerid][pAdmin] < 1 && pData[playerid][pHelper] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!strcmp(params, "off", true) && GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
	{
	    SM(playerid, COLOR_ORANGE, "You are no longer spectating %s (ID %i).", GetRPName(pData[playerid][pSpectating]), pData[playerid][pSpectating]);
	    pData[playerid][pSpectating] = INVALID_PLAYER_ID;
	    SetPlayerToSpawn(playerid);
	    return 1;
 	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /spec [playerid/off]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't spectate yourself.");
	}
	/*if(!IsPlayerSpawned(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is either not spawned, or spectating.");
	}*/

	SavePlayerVariables(playerid);
	TogglePlayerSpectating(playerid, 1);

	SetPlayerInterior(playerid, GetPlayerInterior(targetid));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(targetid));

	if(IsPlayerInAnyVehicle(targetid))
	{
	    PlayerSpectateVehicle(playerid, GetPlayerVehicleID(targetid));
	}
	else
	{
	    PlayerSpectatePlayer(playerid, targetid);
	}

	pData[playerid][pSpectating] = targetid;
	SM(playerid, COLOR_ORANGE, "You are now spectating %s (ID %i).", GetRPName(pData[playerid][pSpectating]), pData[playerid][pSpectating]);
	return 1;
}

CMD:ameg(playerid, params[])
{
	return callcmd::amegaphone(playerid, params);
}

CMD:amegaphone(playerid, params[])
{
	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /(am)egaphone [text]");
	}

	SendProximityMessage(playerid, 50.0, COLOR_YELLOW, "[Admin Megaphone] %s: %s", GetRPName(playerid), params);
	return 1;
}

CMD:kick(playerid, params[])
{
	new targetid, reason[128];

	if(pData[playerid][pAdmin] < 2 && pData[playerid][pHelper] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /kick [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(pData[targetid][pAdmin] > pData[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be kicked.");
	}
	if(strcmp(pData[targetid][pUsername], "Stewart_Abner", true) != 0 || strcmp(pData[targetid][pUsername], "Stewart", true) != 0)
	{
 		SAM(COLOR_YELLOW, "Warning: %s has been autokicked for trying to kick an Executive Directors(%s).", GetRPName(playerid), GetRPName(targetid));
		Kick(playerid);
 		return 1;
	}

    Log_Write("log_punishments", "%s (uid: %i) kicked %s (uid: %i), reason: %s", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], reason);
	SMA(COLOR_LIGHTRED, "AdmCmd: %s was kicked by %s, reason: %s", GetRPName(targetid), GetRPName(playerid), reason);
	KickPlayer(targetid);
	return 1;
}

CMD:fakekick(playerid, params[])
{
	new targetid, reason[128];

	if(pData[playerid][pAdmin] < 2 && pData[playerid][pHelper] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /fakekick [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(pData[targetid][pAdmin] > pData[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be kicked.");
	}

    Log_Write("log_punishments", "%s (uid: %i) fakekicked %s (uid: %i), reason: %s", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], reason);
	SMA(COLOR_LIGHTRED, "AdmCmd: %s was kicked by %s, reason: %s", GetRPName(targetid), GetRPName(playerid), reason);
	//KickPlayer(targetid);
	return 1;
}

CMD:ban(playerid, params[])
{
	new targetid, reason[128];

	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /ban [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(pData[targetid][pAdmin] > pData[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be banned.");
	}
	if(strcmp(pData[targetid][pUsername], "Stewart_Abner", true) != 0 || strcmp(pData[targetid][pUsername], "Stewart", true) != 0)
	{
 		SAM(COLOR_YELLOW, "Warning: %s has been autokicked for trying to ban a Executive Directors(%s).", GetRPName(playerid), GetRPName(targetid));
 		BanPlayer(playerid, GetPlayerNameEx(playerid), "trying to ban an Owner");
 		return 1;
	}
	Log_Write("log_punishments", "%s (uid: %i) banned %s (uid: %i), reason: %s", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], reason);

	SMA(COLOR_LIGHTRED, "AdmCmd: %s was banned by %s, reason: %s", GetRPName(targetid), GetRPName(playerid), reason);
	BanPlayer(targetid, GetPlayerNameEx(playerid), reason);
	return 1;
}

CMD:fakeban(playerid, params[])
{
	new targetid, reason[128];

	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /fakeban [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(pData[targetid][pAdmin] > pData[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be banned.");
	}
	if(pData[targetid][pAdmin] == 7)
	{
 		SAM(COLOR_YELLOW, "Warning: %s has been autokicked for trying to ban a Management(%s).", GetRPName(playerid), GetRPName(targetid));
 		//KickPlayer(playerid);
 		return 1;
	}
	Log_Write("log_punishments", "%s (uid: %i) fakebanned %s (uid: %i), reason: %s", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], reason);

	SMA(COLOR_LIGHTRED, "AdmCmd: %s was banned by %s, reason: %s", GetRPName(targetid), GetRPName(playerid), reason);
	//BanPlayer(targetid, GetPlayerNameEx(playerid), reason);
	return 1;
}

CMD:warn(playerid, params[])
{
	new targetid, reason[128];

	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /warn [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(pData[targetid][pAdmin] > pData[playerid][pAdmin] || pData[targetid][pAdmin] == 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be warned.");
	}

	pData[targetid][pWarnings]++;
	Log_Write("log_punishments", "%s (uid: %i) warned %s (uid: %i), reason: %s (%i/3)", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], reason, pData[targetid][pWarnings]);

	if(pData[targetid][pWarnings] < 3)
	{
	    SAM(COLOR_LIGHTRED, "AdmCmd: %s was warned by %s, reason: %s", GetRPName(targetid), GetRPName(playerid), reason);
	    SM(targetid, COLOR_YELLOW, "** %s issued a warning to your account, reason: %s", GetRPName(playerid), reason);
	}
	else
	{
	    pData[targetid][pWarnings] = 0;

	    SMA(COLOR_LIGHTRED, "AdmCmd: %s was banned by %s, reason: %s (3/3 warnings)", GetRPName(targetid), GetRPName(playerid), reason);
		BanPlayer(targetid, GetPlayerNameEx(playerid), reason);
	}

	return 1;
}

forward ComservEx(playerid);
public ComservEx(playerid)
{
	new string[128];
	new amount = random(50) + 100;
	GivePlayerCash(playerid, amount);
	ClearAnimations(playerid, 1);
	format(string, sizeof(string), "You have earned $%i by cleaning.", amount);
	SendClientMessageEx(playerid, COLOR_YELLOW, string);	return 1;
}
CMD:clean(playerid, params[]) {
    if(pData[playerid][pJailType] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're not inmate therefore you cannot use this command.");
	}
	if(gettime() - pData[playerid][pLastClean] < 15)
	{
		return SM(playerid, COLOR_GREY2, "** You can only use this command every 15 seconds. Please wait %i more seconds.", 15 - (gettime() - pData[playerid][pLastClean]));
	}
    if(!CanPlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}

	for(new i = 0; i < sizeof(comservpoint); i ++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 5.0, comservpoint[i][0], comservpoint[i][1], comservpoint[i][2]))
	    {
			GameTextForPlayer(playerid, "~g~Cleaning...", 10000, 3);
			ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Crouch_Out", 4.1, 1, 0, 0, 1, 0, 1);
			SetTimerEx("ComservEx", 10000, false, "i", playerid);
			pData[playerid][pLastClean] = gettime();
			return 1;
		}
	}
	SCM(playerid, COLOR_GREY2, "You are not in range of cleaning areas.");
	return 1;
}
forward PackageEx(playerid);
public PackageEx(playerid)
{
	ClearAnimations(playerid, 1);
	TogglePlayerControllable(playerid, 1);
	SetPlayerCheckpoint(playerid, 2566.3066, -1301.8512, 1030.7395, 1.0);
	pData[playerid][pCP] = CHECKPOINT_PACKAGE;
	SetPlayerAttachedObject(playerid, 9, 1271, 6, 0.140999, 0.184999, -0.250000, -23.300001, -6.400006, 12.699996, 0.716000, 0.803000, 0.859999);
	return 1;
}
CMD:package(playerid, params[]) {
    if(pData[playerid][pJailType] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're not inmate therefore you cannot use this command.");
	}
	if(gettime() - pData[playerid][pLastClean] < 15)
	{
		return SM(playerid, COLOR_GREY2, "** You can only use this command every 15 seconds. Please wait %i more seconds.", 15 - (gettime() - pData[playerid][pLastClean]));
	}
    if(!CanPlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}

	for(new i = 0; i < sizeof(warehousepoint); i ++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 5.0, warehousepoint[i][0], warehousepoint[i][1], warehousepoint[i][2]))
	    {
			GameTextForPlayer(playerid, "~g~Packaging...", 15000, 3);
			ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 1, 0, 0, 1, 0, 1);
			SetTimerEx("PackageEx", 15000, false, "i", playerid);
			pData[playerid][pLastClean] = gettime();
			return 1;
		}
	}
	pData[playerid][pLastClean] = gettime();
	SendClientMessage(playerid, COLOR_SYNTAX, "You are not in range of package areas.");
	return 1;
}
CMD:checkinv(playerid, params[])
{
    new targetid;

	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /checkinv [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}

	DisplayInventory(targetid, playerid);
	return 1;
}

CMD:slap(playerid, params[])
{
    new targetid, Float:height;

	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "uF(5.0)", targetid, height))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /slap [playerid] [height (optional)]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	/*if(!IsPlayerSpawned(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is not spawned and therefore cannot be slapped.");
	}*/
	if(pData[targetid][pAdmin] > pData[playerid][pAdmin] || pData[targetid][pAdmin] == 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you.");
	}

	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(targetid, x, y, z);
	SetPlayerPos(targetid, x, y, z + height);

	SAM(COLOR_LIGHTRED, "AdmCmd: %s was slapped by %s.", GetRPName(targetid), GetRPName(playerid));
	PlayerPlaySound(targetid, 1130, 0.0, 0.0, 0.0);

	return 1;
}

CMD:charity(playerid, params[])
{
	new option[10], param[64];
	if((gettime() - pData[playerid][pLastCharity]) < 120)
	{
		return SCM(playerid, COLOR_SYNTAX, "You need to wait 120 seconds before sending charity.");
	}
	if(sscanf(params, "s[10]S()[64]", option, param))
	{
		return SCM(playerid, COLOR_SYNTAX, "Usage: /charity [info | health | armor]");
	}
	if(!strcmp(option, "info", true))
	{
	    SCM(playerid, SERVER_COLOR, "Charity:");
		SCM(playerid, COLOR_WHITE, "If you have at least $1,000 on hand you can donate to charity.");
		SCM(playerid, COLOR_WHITE, "You can donate to give health or armor for the entire server using '{FFD700}/charity health/armor{AAAAAA}'.");
		SCM(playerid, COLOR_WHITE, "You can also donate to globally play a song of your choice using '{FFD700}/charity song{AAAAAA}'.");
		SCM(playerid, COLOR_WHITE, "You can also donate your money the traditional way using '{FFD700}/charity [amount]{AAAAAA}'.");
		SCM(playerid, COLOR_WHITE, "Once the charity bank hits a milestone, some of it will be given back to the community!");
		SM(playerid, COLOR_AQUA, "** $%i has been donated to charity so far.", gCharity);
		return 1;
	}
 	else if(!strcmp(option, "health", true))
	{
		if(pData[playerid][pCash] < 150000)
		{
			return SCM(playerid, COLOR_WHITE, "You need at least $150,000 on hand for this option.");
		}
		if(gCharityHealth)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Players can only donate for this perk each hour. Try again after payday.");
		}

        foreach(new i : Player)
		{
		    if(!pData[i][pAdminDuty])
		    {
				SetPlayerHealth(i, 150.0);
			}
		}

		gCharity += 150000;
		gCharityHealth = 1;
		AddToTaxVault(150000);

		SMA(COLOR_ROYALBLUE, "Charity: %s has generously donated $150,000 to heal everyone to 150 health!", GetRPName(playerid));
		GivePlayerCash(playerid, -150000);
	}
	else if(!strcmp(option, "armor", true))
	{
		if(pData[playerid][pCash] < 200000)
		{
			return SCM(playerid, COLOR_WHITE, "You need at least $200,000 on hand for this option.");
		}
		if(gCharityArmor)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Players can only donate for this perk each hour. Try again after payday.");
		}

        foreach(new i : Player)
		{
		    if(!pData[i][pAdminDuty])
		    {
				SetScriptArmour(i, 100.0);
			}
		}

		gCharity += 200000;
		gCharityArmor = 1;
		AddToTaxVault(200000);

		SMA(COLOR_ROYALBLUE, "Charity: %s has generously donated $200,000 to give full armor to everyone!", GetRPName(playerid));
		GivePlayerCash(playerid, -10000);
	}
	else if(IsNumeric(option))
	{
	    new amount = strval(option);

		if(amount < 1 || amount > pData[playerid][pCash])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
		}

	    gCharity += amount;
	    AddToTaxVault(amount);

	    GivePlayerCash(playerid, -amount);
	    SM(playerid, COLOR_ROYALBLUE, "Charity: Thank you for your generous donation of $%i.", amount);
	}
    pData[playerid][pLastCharity] = gettime();
	return 1;
}

CMD:music(playerid, params[])
{
 	SCM(playerid, SERVER_COLOR, ""SERVER_URL"/music");
    HTTP(playerid, HTTP_GET, SERVER_FETCH_URL, "", "HTTP_OnMusicFetchResponse");
   	SCM(playerid, COLOR_SYNTAX, "Usage: /gplay - /gplayurl - /setradio");
 	return 1;
}

CMD:stopmusic(playerid, params[])
{
	SCM(playerid, COLOR_YELLOW, "You have stopped all active audio streams playing for yourself.");
	pData[playerid][pStreamType] = MUSIC_NONE;
	StopAudioStreamForPlayer(playerid);
	return 1;
}

CMD:gplay(playerid, params[])
{
	new url[144];

	if(pData[playerid][pAdmin] < 4)
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(isnull(params))
	{
	 	SCM(playerid, COLOR_SYNTAX, "Usage: /gplay [songfolder/name.mp3]");
	 	SCM(playerid, COLOR_YELLOW, "Go to "SERVER_URL"/music to view a list of our music.");
	 	return 1;
	}

    format(url, sizeof(url), "http://%s/%s", SERVER_MUSIC_URL, params);

    foreach(new i : Player)
	{
	    if(!pData[i][pToggleMusic])
	    {
			PlayAudioStreamForPlayer(i, url);
			SM(i, COLOR_LIGHTRED, "AdmCmd: %s has started the global playback of %s.", GetRPName(playerid), params);
			SM(i, COLOR_YELLOW, "Use /stopmusic to stop playback and '/toggle streams' to disable global playback.");
		}
	}

	return 1;
}

CMD:gplayurl(playerid, params[])
{
	if(pData[playerid][pAdmin] < 4)
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(isnull(params))
	{
	 	SCM(playerid, COLOR_SYNTAX, "Usage: /gplayurl [link]");
	 	SCM(playerid, COLOR_YELLOW, "Go to "SERVER_URL"/music to view a list of our music.");
	 	return 1;
	}

    foreach(new i : Player)
	{
	    if(!pData[i][pToggleMusic])
	    {
			PlayAudioStreamForPlayer(i, params);
			SM(i, COLOR_LIGHTRED, "AdmCmd: %s has started the global playback of a custom URL.", GetRPName(playerid));
			SM(i, COLOR_YELLOW, "Use /stopmusic to stop playback and '/toggle streams' to disable global playback.");
		}
	}
	return 1;
}

CMD:gstop(playerid, params[])
{
	if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

    foreach(new i: Player)
	{
	    if(!pData[i][pToggleMusic])
	    {
		    StopAudioStreamForPlayer(i);
			SM(i, COLOR_LIGHTRED, "AdmCmd: %s has stopped all active audio streams.", GetRPName(playerid));
		}
	}

	return 1;
}

CMD:dm(playerid, params[])
{
	new targetid;

	if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /dm [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(pData[targetid][pAdmin] > pData[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be punished.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet. You can wait until they login or use /oprison.");
	}

	pData[targetid][pDMWarnings]++;

	if(pData[targetid][pDMWarnings] < 5)
	{
	    new minutes = pData[targetid][pDMWarnings] * 5;

	    pData[targetid][pJailType] = 2;
    	pData[targetid][pJailTime] = pData[targetid][pDMWarnings] * 300;
    	pData[targetid][pWeaponRestricted] = pData[targetid][pDMWarnings] * 1;

    	PlayerTextDrawShow(targetid, customHUD[targetid][1]);

		SetPlayerInJail(targetid);

		if(pData[playerid][pAdmin] == 1)
		{
		    SMA(COLOR_LIGHTRED, "AdmCmd: %s was DM Warned & Prisoned for %i minutes by an Admin (%i/5 Warnings)", GetRPName(targetid), minutes, pData[targetid][pDMWarnings]);
		    strcpy(pData[targetid][pPrisonedBy], "Trial Admin", MAX_PLAYER_NAME);
		}
		else
		{
			SMA(COLOR_LIGHTRED, "AdmCmd: %s was DM Warned & Prisoned for %i minutes by %s (%i/5 Warnings)", GetRPName(targetid), minutes, GetRPName(playerid), pData[targetid][pDMWarnings]);
			GetPlayerName(playerid, pData[targetid][pPrisonedBy], MAX_PLAYER_NAME);
		}

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET prisonedby = '%e', prisonreason = 'DM' WHERE uid = %i", pData[targetid][pPrisonedBy], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		strcpy(pData[targetid][pPrisonReason], "DM", 128);

		GameTextForPlayer(targetid, "~w~Welcome to~n~~r~admin jail", 5000, 3);
		SM(targetid, COLOR_WHITE, "** You have been admin prisoned for %i minutes, reason: DM.", minutes);
		SM(targetid, COLOR_WHITE, "** Your punishment is %i hours of weapon restriction and %i/5 DM warning.", pData[targetid][pWeaponRestricted], pData[targetid][pDMWarnings]);
		Log_Write("log_punishments", "%s (uid: %i) prisoned %s (uid: %i) for %i minutes, reason: DM [/dm]", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], minutes);
	}
	else
	{
        Log_Write("log_punishments", "%s (uid: %i) banned %s (uid: %i) for DM (5/5 warnings)", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

		if(pData[playerid][pAdmin] == 1)
		{
		    BanPlayer(targetid, "Trial Admin", "DM (5/5 warnings)");
			SMA(COLOR_LIGHTRED, "AdmCmd: %s was banned by an admin for deathmatching (5/5 warnings)", GetRPName(targetid));
		}
		else
		{
	        BanPlayer(targetid, GetPlayerNameEx(playerid), "DM (5/5 warnings)");
			SMA(COLOR_LIGHTRED, "AdmCmd: %s was banned by %s for deathmatching (5/5 warnings)", GetRPName(targetid), GetRPName(playerid));
	    }
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET jailtype = %i, jailtime = %i, dmwarnings = %i, weaponrestricted = %i WHERE uid = %i", pData[targetid][pJailType], pData[targetid][pJailTime], pData[targetid][pDMWarnings], pData[targetid][pWeaponRestricted], pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}
CMD:god(playerid, params[])
{
    if(pData[playerid][pAdmin] >= 3)
	{
        SetPlayerHealth(playerid, 100000);
        SetPlayerArmour(playerid, 100000);
    }
	return 1;
}
CMD:aduty(playerid, params[])
{
    new string[128];
    if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	if(!pData[playerid][pAdminDuty])
	{
	    SavePlayerVariables(playerid);
	    ResetPlayerWeapons(playerid);
        SetPlayerSpecialTag(playerid, TAG_ADMIN);
        pData[playerid][pAdminColor] = 1;

		SetPlayerHealth(playerid, 32767);
		SetScriptArmour(playerid, 1.0);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s is now on admin duty.", GetRPName(playerid));
		/*format(string, sizeof(string), "AdmCmd: %s is now on administrative duty.", pData[playerid][pUsername]);
		SendClientMessageToAll(COLOR_GREEN, string);*/
	    SCM(playerid, COLOR_WHITE, "** You are now on admin duty. Your stats will not be saved until you're off duty.");

        pData[playerid][pAdminDuty] = 1;


        if(strcmp(pData[playerid][pAdminName], "None", true) != 0)
        {
	        SetPlayerName(playerid, pData[playerid][pAdminName]);
		}
	}
	else
	{
	    SetPlayerSpecialTag(playerid, TAG_NORMAL);
	    pData[playerid][pAdminColor] = 0;
 		format(string, sizeof(string), "AdmCmd: %s is now off administrative duty.", pData[playerid][pUsername]);
		SendClientMessageToAll(COLOR_RED, string);
	    //TogglePlayerSpectating(playerid, 1);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM users WHERE uid = %i", pData[playerid][pID]);
    	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_PROCESS_LOGIN, playerid);
	}

	return 1;
}

CMD:adminname(playerid, params[])
{
	new name[MAX_PLAYER_NAME];

    if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]", name))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /adminname [name ('none' to reset)]");
	}
	if(!IsValidName(name))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The name specified is not supported by the SA-MP client.");
	}

	strcpy(pData[playerid][pAdminName], name, MAX_PLAYER_NAME);

	if(pData[playerid][pAdminDuty])
	{
	    SetPlayerName(playerid, name);
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET adminname = '%e' WHERE uid = %i", name, pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SAM(COLOR_LIGHTRED, "AdmCmd: %s changed their administrator name to %s.", pData[playerid][pUsername], name);
	return 1;
}

CMD:getip(playerid, params[])
{
	new targetid;

    if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /getip [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	SM(playerid, COLOR_WHITE, "** %s[%i]'s IP: %s **", GetRPName(targetid), targetid, GetPlayerIP(targetid));
	return 1;
}

CMD:ogetip(playerid, params[])
{
	new name[MAX_PLAYER_NAME];

    if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]", name))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /ogetip [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, ip FROM users WHERE username = '%e'", name);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_OFFLINE_IP, playerid);

	return 1;
}

CMD:iplookup(playerid, params[])
{
    if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!IsAnIP(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /iplookup [ip address]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, lastlogin FROM users WHERE ip = '%s' ORDER BY lastlogin DESC", params);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_TRACE_IP, playerid);

	return 1;
}

CMD:lastactive(playerid, params[])
{
	new username[24], specifiers[] = "%D of %M, %Y @ %k:%i";

    if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]", username))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /lastactive [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT DATE_FORMAT(lastlogin, '%s') FROM users WHERE username = '%e'", specifiers, username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminCheckLastActive", "is", playerid, username);

	return 1;
}
CMD:prisoners(playerid, params[])
{
	return callcmd::listjailed(playerid, params);
}
CMD:listjailtime(playerid, params[])
{
	if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_DOC && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't apart of law enforcement.");
	}

	SCM(playerid, SERVER_COLOR, "Prisoners:");

	foreach(new i : Player)
	{
	    if(pData[i][pJailType] > 3)
	    {
			SM(playerid, COLOR_GREY1, "%s - Time: %i seconds", i, GetRPName(i), pData[i][pJailTime]);
		}
	}

	return 1;
}	
CMD:listjailed(playerid, params[])
{
	new type[14];

	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	SCM(playerid, SERVER_COLOR, "Jailed Players:");

	foreach(new i : Player)
	{
	    if(pData[i][pJailType] > 0)
	    {
	        switch(pData[i][pJailType])
	        {
	            case 1: type = "OOC jailed";
				case 2: type = "OOC prisoned";
				case 3: type = "IC prisoned";
			}

			SM(playerid, COLOR_GREY1, "(ID: %i) %s - Status: %s - Time: %i seconds", i, GetRPName(i), type, pData[i][pJailTime]);
		}
	}

	return 1;
}
CMD:prisoner(playerid, params[])
{
	return callcmd::prisoninfo(playerid, params);
}
CMD:prisoninfo(playerid, params[])
{
    new targetid;

    if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /prisoninfo [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(pData[targetid][pJailType] != 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is not in OOC prison.");
	}

	SM(playerid, COLOR_WHITE, "** %s was prisoned by %s, reason: %s (%i seconds left.) **", GetRPName(targetid), pData[targetid][pPrisonedBy], pData[targetid][pPrisonReason], pData[targetid][pJailTime]);
	return 1;
}

CMD:relog(playerid, params[])
{
	new targetid;
	new string[64], playerIP[32];
	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /relog [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has forced %s to relog.", GetRPName(playerid), GetRPName(targetid));
	SCM(targetid, SERVER_COLOR, "NOTE:"WHITE" You are being reconnected to the server - please wait...");
	SavePlayerVariables(targetid);
	ResetPlayer(targetid);
	pData[targetid][pLogged] = 0;
	GetPlayerIp(targetid, playerIP, sizeof(playerIP));
	Reconnecting[targetid] = true;
 	format(ReconnectIP[targetid], MAX_IP_SIZE, "%s", playerIP);
  	format(string, sizeof(string), "banip %s", playerIP);
   	SendRconCommand(string);
	return 1;
}

CMD:giverpbadge(playerid, params[])
{
    new targetid;

    if(pData[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "ui", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /giverpbadge [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	pData[playerid][pCustomTColor] = 0xFF0000FF;
    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET customcolor = %i, customtitle = 'RP Badge' WHERE uid = %i", pData[playerid][pCustomTColor], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}

CMD:setint(playerid, params[])
{
    new targetid, interiorid;

    if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "ui", targetid, interiorid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setint [playerid] [int]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!(0 <= interiorid <= 19))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid interior. Valid interiors range from 0 to 19.");
	}

	SetPlayerInterior(targetid, interiorid);
	SM(playerid, COLOR_GREY2, "%s's interior set to ID %i.", GetRPName(targetid), interiorid);
	return 1;
}

CMD:setvw(playerid, params[])
{
    new targetid, worldid;

    if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "ui", targetid, worldid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setvw [playerid] [vw]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	SetPlayerVirtualWorld(targetid, worldid);
	SM(playerid, COLOR_GREY2, "%s's virtual world set to ID %i.", GetRPName(targetid), worldid);
	return 1;
}

CMD:setskin(playerid, params[])
{
    new targetid, skinid;

    if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "ui", targetid, skinid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setskin [playerid] [skinid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!(0 <= skinid <= 311))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid skin specified.");
	}
	/*if(!IsPlayerSpawned(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is either not spawned, or spectating.");
	}*/

	pData[targetid][pSkin] = skinid;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET skin = %i WHERE uid = %i", skinid, pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SetPlayerSkin(targetid, skinid);
	SM(playerid, COLOR_GREY2, "%s's skin set to ID %i.", GetRPName(targetid), skinid);
	return 1;
}

CMD:cureleg(playerid, params[])
{
	new targetid;

    if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_ERROR, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_ERROR, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_GREY, "USAGE:"WHITE" /cureleg [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_ERROR, "The player specified is disconnected.");
	}
	if(!pData[targetid][pBrokenLeg])
	{
	    return SCM(playerid, COLOR_ERROR, "The player specified has no broken legs.");
	}

	pData[targetid][pBrokenLeg] = 0;
	
	//SetPlayerSpecialTag(targetid, TAG_NONE);

	SCM(targetid, COLOR_YELLOW, "Your broken leg was cured by an admin.");
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has cured %s's broken legs.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

/*CMD:doublesalary(playerid, params[])
{
    if(pData[playerid][pAdmin] >= 7)
    {
		new string[128];

		if(DoubleSalary)
		{
		  	format(string, sizeof(string), "AdmWarning: %s has just disabled the Double Salary feature.", GetPlayerNameEx(playerid));
			SAM(COLOR_YELLOW, string, 2);

			SendClientMessageToAll(COLOR_LIGHTRED, "Double Salary has been disabled by an Admin.");
			SendClientMessageToAll(COLOR_AQUA, "You will no longer receive double payments after working on your job!");

			DoubleSalary = 0;
		}
		else
		{
		  	format(string, sizeof(string), "AdmWarning: %s has just enabled the Double Salary feature.", GetPlayerNameEx(playerid));
			SAM(COLOR_YELLOW, string, 2);

			SendClientMessageToAll(COLOR_LIGHTGREEN, "Double Salary has been enabled by an Admin.");
			SendClientMessageToAll(COLOR_AQUA, "You will now receive double payments after working on your job! (Ex: $10,000 -> $20,000) 2X!");

		    DoubleSalary = 1;
		}
	}
	return 1;
}*/

CMD:revive(playerid, params[])
{
	new targetid;

    if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /revive [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!pData[targetid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is not injured.");
	}

	TextDrawHideForPlayer(targetid, Text:DieText);
	TextDrawHideForPlayer(targetid, Text:InjuredText);
	
	pData[targetid][pInjured] = 0;
	pData[targetid][pHunger] = 100;
	pData[targetid][pHungerTimer] = 0;
    pData[targetid][pThirst] = 100;
	pData[targetid][pThirstTimer] = 0;

	pData[targetid][pBrokenLeg] = 0;

    TogglePlayerControllable(targetid, 1);
	SetPlayerHealth(targetid, 100.0);
	ClearAnimations(targetid, 1);
	UpdateDynamic3DTextLabelText(InjuredLabel[targetid], COLOR_DOCTOR, "");

	if(pData[targetid][pAcceptedEMS] != INVALID_PLAYER_ID)
	{
	    SM(pData[targetid][pAcceptedEMS], COLOR_YELLOW, "Your patient %s has somehow found the strength to get up.", GetRPName(targetid));
	    pData[targetid][pAcceptedEMS] = INVALID_PLAYER_ID;
	}

	SCM(targetid, COLOR_YELLOW, "You have been revived by an admin!");
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has revived %s", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:heject(playerid, params[])
{
	new targetid;

    if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /heject [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!pData[targetid][pHospital])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is not in hospital.");
	}

	SAM(COLOR_LIGHTRED, "AdmCmd: %s ejected %s from the hospital.", GetRPName(playerid), GetRPName(targetid));

	pData[targetid][pHospitalTime] = 1;
	SCM(targetid, COLOR_YELLOW, "You have been ejected from hospital by an admin!");
	return 1;
}

stock ReturnName(playerid)
{
	new
		color, sz_playerName[MAX_PLAYER_NAME];

	if(!isnull(pData[playerid][pUsername]))
	{
		if((color = GetPlayerColor(playerid)) == 0xFFFFFF00)
		{
	        color = 0xAAAAAAFF;
		}
	    format(sz_playerName, sizeof(sz_playerName), "{%06x}%s", color >>> 8, pData[playerid][pUsername]);
	}
	else
	{
		GetPlayerName(playerid, sz_playerName, MAX_PLAYER_NAME);
	}
	return sz_playerName;
}

CMD:tabs(playerid, params[])
{
	new szDialog[(1024 * 2)], title[128];

	foreach(new i : Player)
	{

		format(szDialog, sizeof(szDialog), "%s%d\t%s\t%d\t%s\n", szDialog, i, ReturnName(i), GetPlayerPing(i), IsPlayerAndroid(i) ? ("{32cd32}CP{AAAAAA}") : (""RED"PC{AAAAAA}"));
	}

	format(title, sizeof(title), "%s (%d/%d)\tPlatform", SERVER_NAME, Iter_Count(Player), MAX_PLAYERS);
	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_TABLIST, title, szDialog, "Close", "");
	return 1;
}

CMD:stopanim(playerid, params[])
{
    if(!CanPlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_ERROR, "[ERROR]{ffffff} You're currently unable to use this command at this moment.");
	}

    pData[playerid][pLoopAnim] = 0;

   	ClearAnimations(playerid, 1);
   	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);
	TextDrawHideForPlayer(playerid, AnimationTD);

	SetPlayerSkin(playerid, GetPlayerSkin(playerid));
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
    SendClientMessage(playerid, -1, "Animations cleared.");
    return 1;
}

CMD:tracehouse(playerid, params[])
{
	new houseid;
	if(sscanf(params, "i", houseid))
	{
 		return SendClientMessage(playerid, SERVER_COLOR, "[?]: "WHITE"/tracehouse [houseid]");
	}
	if(!HouseInfo[houseid][hExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The specified house id is invalid or doesn't exist.");
	}
	SetPlayerCheckpoint(playerid, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], 3.0);
	SendClientMessage(playerid, COLOR_AQUA, "Checkpoint set.");
	return 1;
}
RefundPlayer(playerid)
{
	new Float:x, Float:y, Float:z, Float:a;
	if(pData[playerid][pLogged])
	{
		pData[playerid][pRefunded] = 1;
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET refunded = 1 WHERE uid = %i", pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		pData[playerid][pDonator] = 3;
		pData[playerid][pVIPTime] = gettime() + (864000);
		pData[playerid][pVIPCooldown] = 0;
		GivePlayerCash(playerid, 50000);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vippackage = 3, viptime = %i, vipcooldown = 0 WHERE uid = %i", pData[playerid][pVIPTime], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO vehicles (ownerid, owner, modelid, pos_x, pos_y, pos_z, pos_a, color1, color2) VALUES(%i, '%s', 426, '%f', '%f', '%f', '%f', 1, 1)", pData[playerid][pID], GetPlayerNameEx(playerid), x + 2.0 * floatsin(-a, degrees), y + 2.0 * floatcos(-a, degrees), z, a);
		mysql_tquery(connectionID, queryBuffer);
	}
}

CMD:redeem(playerid, params[])
{
    new option[14];
	if(sscanf(params, "s[14]S()[32]", option, params))
	{
	    SCM(playerid, COLOR_SYNTAX, "** Usage: /redeem [type].");
		SCM(playerid, COLOR_WHITE, "** Available codes: refund, claim.");
		return 1;
	}

    if(!strcmp(option, "refund", true))
	{
		if(pData[playerid][pRefunded] == 1)
		{
			return SendClientMessage(playerid, COLOR_GREY, "You have already claimed your refund package.");
		}
		else
		RefundPlayer(playerid);
		SAM(COLOR_LIGHTRED, "Server: %s has claimed their refund package using /redeem refund.", GetRPName(playerid));
		ShowPlayerDialog(playerid,DIALOG_REFUNDED,DIALOG_STYLE_MSGBOX,"You have claimed your donator package","{FFFFFF}10 days of diamond vip\n\n{FFFFFF}We hope that you will invite more of your friends to play on the server!\n{FFFFFF}/info","Enjoy!","");
	}
	if(!strcmp(option, "claim", true))
	{
		/*if(gTogClaim != 1)
		{
			return SendClientMessage(playerid, COLOR_SYNTAX, "Temporary Disabled.");
		}*/
		if(gettime() - pData[playerid][pClaimTime] < 43200)
		{
			return SM(playerid, COLOR_SYNTAX, "You already redeemed 'claim' code. Please try again in %i hours", (pData[playerid][pClaimTime] - gettime()) / 3600);
		}
		else
		{
			pData[playerid][pClaimTime] = gettime() + 43200;
			GiftBox(playerid, playerid);
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET claimtime = %i WHERE uid = %i", pData[playerid][pClaimTime], pData[playerid][pID]);
	    	mysql_tquery(connectionID, queryBuffer);
		}
	}
	if(!strcmp(option, "monthsary", true))
	{
		if(pData[playerid][pMonthsary] == 1)
		{
			return SendClientMessage(playerid, COLOR_GREY, "You have already claimed your Monthsary package.");
		}
		else
		{
			pData[playerid][pMonthsary] = 1;
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET monthsary = 1 WHERE uid = %i", pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
			GivePlayerCash(playerid, 300000);
			pData[playerid][pDonator] = 3;
			pData[playerid][pVIPTime] = gettime() + (864000);
			pData[playerid][pVIPCooldown] = 0;
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vippackage = 3, viptime = %i, vipcooldown = 0 WHERE uid = %i", pData[playerid][pVIPTime], pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
			SendClientMessage(playerid, COLOR_AQUA, "You have redeemed $300,000.00 and 7 days VIP III from the code 'monthsary'. Happy Gaming!!!");
		}
	}
	return 1;
}


CMD:monthsary(playerid, params[])
{
	if(pData[playerid][pAdmin] < 7)
	{
		return SendClientMessage(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	foreach(new i : Player)
	{
		if(pData[i][pLogged])
		{
			pData[i][pMonthsary] = 0;
		}
	}
	mysql_tquery(connectionID, "UPDATE users SET monthsary = 0");

	new string[128];
	format(string, sizeof(string), "AdmCmd: %s has resetted all Monthsary permission to 0.", GetRPName(playerid));
	SAM(COLOR_LIGHTRED, string);
	return 1;
}

CMD:setchoptimer(playerid, params[])
{
	new hours;

    if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", hours))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setchoptimer [hours]");
	}
	if(hours < 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Hours can't be below 0.");
	}

	ChopInfo[cTime] = hours;
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has reset the chop chop timer to %i hours.", GetRPName(playerid), hours);
	return 1;
}
CMD:setrobtimer(playerid, params[])
{
	new hours;

    if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", hours))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setrobtimer [hours]");
	}
	if(hours < 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Hours can't be below 0.");
	}

	RobInfo[rTime] = hours;
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has reset the Robbery timer to %i hours.", GetRPName(playerid), hours);
	return 1;
}
CMD:chopvehicle(playerid, params[]) {
	new vehid = GetPlayerVehicleID(playerid);
	new clientMessage[128];
	if(ChopInfo[cTime] > 0)
	{
	    return SM(playerid, COLOR_SYNTAX, "Chop chop cooldown %i hours. You can't chop it now.", ChopInfo[cTime]);
	}
	if((gettime() - pData[playerid][pLastChop]) < 7200000)
	{
		return SCM(playerid, COLOR_SYNTAX, "You need to wait 2 hours before sending another message.");
	}
	if(IsLawEnforcement(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't chop the vehicle as a law enforcer. Ask your boss for a raise.");
	}
	new count;
	foreach(new i : Player)
	{
	    if(IsSheriff(i))
	    {
	        count++;
		}
	}

	if(count < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There needs to be at least 4+ SHERIFF's online in order to chop this vehicle.");
	}
	/*new count;
	foreach(new i : Player)
	{
	    if(IsLawEnforcement(i))
	    {
	        count++;
		}
	}

	if(count < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There needs to be at least 4+ Leo's online in order to chop this vehicle.");
	}*/
	if(!VehicleInfo[vehid][vOwnerID])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This vehicle isn't owned by any particular person.");
	}
	// If player isn't in a car (driver or passenger), abort.
	if(!IsPlayerInAnyVehicle(playerid)) {
		SendClientMessageEx(playerid, COLOR_GREY, " You need to be in a car to sell it.");
		return 1;
	}
	// If player isn't at the drop point, abort.
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, -284.4217, 2657.7686, 62.2036)) {
		SendClientMessageEx(playerid, COLOR_GREY, " You need to be at the chop shop to chop a stolen car.");
		return 1;
	}

	// If player isn't high enough level, abort.
	if(pData[playerid][pLevel] < 2) {
		SendClientMessageEx(playerid, COLOR_GREY, "You have to be level 2 or higher to be able to sell stolen vehicles.");
		return 1;
	}

	GameTextForPlayer(playerid, "~r~Chopping Vehicle~n~~w~it will take 3 minutes...", 180000, 3);
	TogglePlayerControllable(playerid, 0);
	SetTimerEx("ChoppingVehicle", 180000, false, "i", playerid);
	
	//GameTextForPlayer(playerid, "~r~Chopping Vehicle~n~~w~it will take 3 minutes...", 5000, 3);
	//TogglePlayerControllable(playerid, 0);
	//SetTimerEx("ChoppingVehicle", 5000, false, "i", playerid);
	
	// Send RR a GPS coord to where the car was dumped.
	format(clientMessage, sizeof(clientMessage), "____________ DISPATCH PANEL _____________");
	SendFactionTypeMessage(FACTION_SHERIFF, COLOR_YELLOW, clientMessage);
	format(clientMessage,sizeof(clientMessage),"A %s has been reported vehicle stolen. Location sent to your GPS...", GetVehicleName(vehid));
	SendFactionTypeMessage(FACTION_SHERIFF, COLOR_WHITE, clientMessage);
	pData[playerid][pLastChop] = gettime();
	
	ResetChop();
	
	foreach(new p : Player)
	{
		if(GetFactionType(p) == FACTION_SHERIFF)
		{
			SetPlayerCheckpoint(p, -284.4217, 2657.7686, 62.2036, 4.0);
		}
	}
	return 1;
}
stock SendFactionTypeMessage(type, color, string[])
{
	for(new i = 0; i < MAX_FACTIONS; i++) {
		if(FactionInfo[i][fType] == type)
		{
			foreach(new x : Player) {
				if(pData[x][pFaction] == i) {
					SendClientMessageEx(x, color, string);
				}
			}
		}
	}
}
forward ChoppingVehicle(playerid);
public ChoppingVehicle(playerid)
{
	new chopchop, materials, clientMessage[128];
	chopchop = Random(10000, 20000);
	materials = Random(250, 500);

	GivePlayerDirtyCash(playerid, chopchop); // Ka-ching.
	GivePlayerMaterials(playerid, materials); // Ka-ching.

	// Congratulate the bastard thief.	
	format(clientMessage, sizeof(clientMessage), "You earned $%d dirty cash and %d Materials for the stolen vehicle.", chopchop, materials);
	SendClientMessageEx(playerid, COLOR_YELLOW, clientMessage);

	// Notify the vehicle owner his car has been stolen.
	SCM(playerid, COLOR_YELLOW, "_______________REPORT________________");
	format(clientMessage, sizeof(clientMessage), "Your vehicle has been reported stolen.");
	SCM(playerid, COLOR_LIGHTRED, clientMessage);
	
	TogglePlayerControllable(playerid, 1);
	
	new vehid = GetPlayerVehicleID(playerid);
	foreach(new i : Player) { // Iterate through playerid of every logged in player
		for(new v=0; v<LIMIT_VEHICLES; v++)
		{
	 		VehicleInfo[vehid][vStolen] = 1;

		  	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET broken = '1', pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', interior = %i, world = %i WHERE id = %i", VehicleInfo[vehid][vPosX], VehicleInfo[vehid][vPosY], VehicleInfo[vehid][vPosZ], VehicleInfo[vehid][vPosA], VehicleInfo[vehid][vInterior], VehicleInfo[vehid][vWorld], VehicleInfo[vehid][vID]);
			mysql_tquery(connectionID, queryBuffer);
			SetVehicleToRespawn(vehid);
		}
	}
	return 1;
}
GivePlayerFirework(playerid, amount)
{
	if(pData[playerid][pLogged])
	{
		pData[playerid][pFirework] = pData[playerid][pFirework] + amount;

		if(!pData[playerid][pAdminDuty])
	    {
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET firework = firework + %i WHERE uid = %i", amount, pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
	}
}
CMD:givefirework(playerid, params[])
{
	new targetid, amount, string[128];

    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]{ffffff} /givefirework [playerid] [amount]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} The player specified is disconnected.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} That player hasn't logged in yet.");
	}
	GivePlayerFirework(targetid, amount);

    SCMf(playerid, COLOR_GREEN, "* You have received %d Fireworks from Admin %s. ", amount, GetPlayerNameEx(playerid));

	format(string, sizeof(string), "You have received %d Fireworks from Admin %s. ", amount, GetPlayerNameEx(playerid));
	SendClientMessageEx(targetid, COLOR_LIGHTBLUE, string);
	return 1;
}
CMD:givefireworkall(playerid, params[])
{
	new amount, targetid, string[128];

    if(pData[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /givefireworkall [amount]");
    }
	if(amount < 1 || amount > 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The amount specified must range between 1 and 5.");
	}

	foreach(new i : Player)
	{
	    if(pData[i][pLogged])
		{
			GivePlayerFirework(i, amount);
		}
	}
    SCMf(playerid, COLOR_GREEN, "* You have received %d Fireworks from Admin %s. ", amount, GetPlayerNameEx(playerid));

	format(string, sizeof(string), "You have received %d Fireworks from Admin %s. ", amount, GetPlayerNameEx(playerid));
	SendClientMessageEx(targetid, COLOR_LIGHTBLUE, string);
	return 1;
}
CMD:fireworkhelp(playerid, params[])
{
	SendClientMessageEx(playerid, COLOR_YELLOW, "______________________________________________");
	SendClientMessageEx(playerid, COLOR_YELLOW, "Firework Help");
	SendClientMessageEx(playerid, COLOR_WHITE,  "* /inventory to see how much fireworks you got*");
	SendClientMessageEx(playerid, COLOR_WHITE,  "* /placefirework to plant a Firework*");
	SendClientMessageEx(playerid, COLOR_WHITE,  "* You can buy it using diamonds ((/firework)).*");
	SendClientMessageEx(playerid, COLOR_YELLOW, "______________________________________________");
	return 1;
}
CMD:placefirework(playerid, params[])
{
	if(pData[playerid][pTazedTime] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pJailTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are unable to use your cellphone at the moment.");
	}
	if(RocketExplosions[playerid] == -1)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are already using another firework!");
		return 1;
	}
	if(GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You can't launch fireworks indoors!");
		return 1;
	}
	if(pData[playerid][pFirework] > 0 || pData[playerid][pAdmin] >= 4)
	{
		pData[playerid][pFirework] -= 1;
		
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET firework = %i WHERE uid = %i", pData[playerid][pFirework], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		
     	SCMf(playerid, COLOR_GREEN, "* %s has placed a firework which will go off in 30 seconds!", GetPlayerNameEx(playerid));

		new Float:x, Float:y, Float:z, Float:a;
		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);
		ApplyAnimation(playerid,"BOMBER","BOM_Plant_Crouch_In", 4.0, 0, 0, 0, 0, 0, 1);
		x += (2 * floatsin(-a, degrees));
		y += (2 * floatcos(-a, degrees));
		Rocket[playerid] = CreateDynamicObject(3786, x, y, z, 0, 90, 0);
		RocketLight[playerid] = CreateDynamicObject(354, x, y, z + 1, 0, 0, 0);
		RocketSmoke[playerid] = CreateDynamicObject(18716, x, y, z - 4, 0, 0, 0);
		SetPVarFloat(playerid,"fxpos",x);
		SetPVarFloat(playerid,"fypos",y);
		SetPVarFloat(playerid,"fzpos",z);
		RocketExplosions[playerid] = 0;
		SetTimerEx("Firework", 25000, 0, "ii", playerid, TYPE_COUNTDOWN);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You don't have any fireworks!");
	}
	return 1;
}
CMD:breakcuffs(playerid, params[])
{
	static
		userid;

	if (sscanf(params, "u", userid))
	    return SendClientMessage(playerid, COLOR_GREY, "Usage: /breakcuffs [playerid/name]");

	if (pData[playerid][pCrowbar] == 0)
	    return SendClientMessageEx(playerid, COLOR_GREY, "You don't have a crowbar.");

	if (userid == INVALID_PLAYER_ID || !IsPlayerInRangeOfPlayer(playerid, userid, 6.0))
	    return SendClientMessageEx(playerid, COLOR_GREY, "The specified player is disconnected or not near you.");

	if (!pData[userid][pCuffed])
	    return SendClientMessageEx(playerid, COLOR_GREY, "The specified player is not cuffed.");

	if (userid == playerid)
	    return SendClientMessageEx(playerid, COLOR_GREY, "You can't pick your own handcuffs.");

	SetTimerEx("BreakCuffs", 3000, false, "dd", playerid, userid);
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s attempts to pick the cuffs with a crowbar.", GetRPName(playerid));
	return 1;
}
forward BreakCuffs(playerid, userid);
public BreakCuffs(playerid, userid)
{

	if (random(2))
	{
	    SendClientMessageEx(playerid, COLOR_GREEN, "You have failed to pick the cuffs.");
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s has failed to pick the cuffs.", GetRPName(playerid));
	}
	else
	{
	    pData[userid][pCuffed] = 0;
	    TogglePlayerControllable(userid, 1);
	    SetPlayerSpecialAction(userid, SPECIAL_ACTION_NONE);

	    SendClientMessage(playerid, COLOR_GREEN, "You have picked the cuffs.");
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s has picked the cuffs from %s's wrists.", GetRPName(playerid), GetRPName(userid));
	}
	return 1;
}

ProxDetectorS(Float:radi, playerid, targetid) {

    if(pData[playerid][pAdmin] < 2)
    {
    	return 0;
    }

	new
		Float: fp_playerPos[3];

	GetPlayerPos(targetid, fp_playerPos[0], fp_playerPos[1], fp_playerPos[2]);

	if(IsPlayerInRangeOfPoint(playerid, radi, fp_playerPos[0], fp_playerPos[1], fp_playerPos[2]) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(targetid))
	{
		return 1;
	}
	return 0;
}
CMD:nearplayers(playerid, params[])
{
	if(pData[playerid][pAdmin] >= 1) {
		new szDialog[(1024 * 2)], Float:range, Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);

		if(sscanf(params, "f", range)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /nearplayers [range]");
		if(range < 1 || range > 100) return SendClientMessageEx(playerid, COLOR_WHITE, "Range can't go low as 1 and can't go high as 100.");

		foreach(new i : Player)
		{
			if(ProxDetectorS(range, playerid, i) && i != playerid)
			{
				new Float:point = GetPlayerDistanceFromPoint(i, x, y, z);
				format(szDialog, sizeof(szDialog), "%s%d\t%s\t%.1f far away from you\n", szDialog, i, ReturnName(i), point);
			}
		}
		
		ShowPlayerDialog(playerid, 0, DIALOG_STYLE_TABLIST, "Players Near You", szDialog, "Close", "");
	}
	return 1;
}
CMD:goto(playerid, params[])
{
	new targetid;

    if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /goto [playerid/location]");
 		SCM(playerid, COLOR_WHITE, "Locations: LS, SF, LV, Grove, Idlewood, Unity, Jefferson, Market, Airport, Bank");
 		SCM(playerid, COLOR_WHITE, "Locations: Dealership, DMV, Casino, Allsaints, Mall, VIP, FC");
		return 1;
	}

	if(!strcmp(params, "ls", true))
    {
		TeleportToCoords(playerid, 1544.4407, -1675.5522, 13.5584, 90.0000, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleported to Los Santos.");
    }
    else if(!strcmp(params, "fc", true))
    {
		TeleportToCoords(playerid, -297.8975, 1089.9200, 19.8767, 135.0000, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleported to Fort Carson.");
    }
    else if(!strcmp(params, "sf", true))
    {
		TeleportToCoords(playerid, -1421.5629, -288.9972, 14.1484, 135.0000, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleported to San Fierro.");
    }
    else if(!strcmp(params, "lv", true))
    {
		TeleportToCoords(playerid, 1670.6908, 1423.5240, 10.7811, 270.0000, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleported to Las Venturas.");
    }
    else if(!strcmp(params, "grove", true))
    {
		TeleportToCoords(playerid, 2497.8274, -1668.9033, 13.3438, 90.0000, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleported to Grove Street.");
    }
    else if(!strcmp(params, "idlewood", true))
    {
		TeleportToCoords(playerid, 2090.0664, -1816.9071, 13.3904, 90.0000, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleported to Idlewood.");
    }
    else if(!strcmp(params, "unity", true))
    {
		TeleportToCoords(playerid, 1782.2683, -1865.5726, 13.5725, 0.0000, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleported to Unity Station.");
    }
    else if(!strcmp(params, "jefferson", true))
    {
		TeleportToCoords(playerid, 2222.3438, -1164.5013, 25.7331, 0.0000, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleported to Jefferson Motel.");
    }
    else if(!strcmp(params, "market", true))
    {
		TeleportToCoords(playerid, 818.1782, -1349.2217, 13.5260, 0.0000, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleported to Market.");
    }
    else if(!strcmp(params, "airport", true))
    {
		TeleportToCoords(playerid, 1938.7185, -2370.6375, 13.5469, 0.0000, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleported to LS airport.");
    }
    else if(!strcmp(params, "bank", true))
    {
        TeleportToCoords(playerid, 1463.8929, -1026.6189, 23.8281, 180.0000, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleported to Mulholland bank.");
    }
    else if(!strcmp(params, "dealership", true))
    {
		TeleportToCoords(playerid, 546.7000, -1281.5160, 17.2482, 180.0000, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleported to Grotti dealership.");
    }
	else if(!strcmp(params, "dmv", true))
    {
        TeleportToCoords(playerid, 1896.5051, -1872.4714, 13.1361, 180.0000, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleported to DMV.");
	}
	else if(!strcmp(params, "casino", true))
    {
        TeleportToCoords(playerid, 1310.0944, -1367.9332, 13.5424, 180.0000, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleported to Casino.");
	}
	else if(!strcmp(params, "allsaints", true))
    {
        TeleportToCoords(playerid, 1179.5540,-1323.4713,14.1752, 270.0000, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleported to Allsaints.");
	}
	else if(!strcmp(params, "mall", true))
    {
        TeleportToCoords(playerid, 1129.6364,-1425.1180,15.7969, 357.0000, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleported to Mall.");
	}
	else if(!strcmp(params, "vip", true))
    {
        TeleportToCoords(playerid, 1810.4061, -1601.0793, 13.5469, 225.1041, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleported to VIP LOUNGE.");
	}
	else
	{
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
		}
		/*if(!IsPlayerSpawned(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is either not spawned, or spectating.");
		}*/

		TeleportToPlayer(playerid, targetid);
		SM(playerid, COLOR_GREY2, "Teleported to %s's position.", GetRPName(targetid));
	}

	return 1;
}

CMD:gethere(playerid, params[])
{
	new targetid;

    if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gethere [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	/*if(!IsPlayerSpawned(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is either not spawned, or spectating.");
	}*/
    if(pData[targetid][pPaintball])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is currently in the paintball arena.");
	}
	
	TeleportToPlayer(targetid, playerid);
	SM(playerid, COLOR_GREY2, "Teleported %s to your position.", GetRPName(targetid));

	return 1;
}

CMD:gotocar(playerid, params[])
{
	new vehicleid;

    if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gotocar [vehicleid]");
	}
	if(!IsValidVehicle(vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid vehicle specified.");
	}

	TeleportToVehicle(playerid, vehicleid);
	SM(playerid, COLOR_GREY2, "Teleported to vehicle ID %i.", vehicleid);
	return 1;
}

CMD:getcar(playerid, params[])
{
	new vehicleid;

    if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /getcar [vehicleid]");
	}
	if(!IsValidVehicle(vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid vehicle specified.");
	}

	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(playerid, x, y, z);
	SetVehiclePos(vehicleid, x + 1, y + 1, z + 2.0);

	SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
	LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));

	SM(playerid, COLOR_GREY2, "Teleported vehicle ID %i to your position.", vehicleid);
	return 1;
}

CMD:giftall(playerid, params[])
{
    if(pData[playerid][pAdmin] >= 6)
	{
		foreach(new i:Player)
		{
		    GiftBox(playerid, i);
		}
	}
	else
	{
		SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	return 1;
}

CMD:gift(playerid, params[])
{
	new targetid;
    if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
    	return SCM(playerid, COLOR_SYNTAX, "Usage: /gift [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	/*if(!IsPlayerSpawned(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is either not spawned, or spectating.");
	}*/
    if(pData[targetid][pPaintball])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is currently in the paintball arena.");
	}
	
	GiftBox(playerid, targetid);
	return 1;
}

CMD:gotoco(playerid, params[]) { return callcmd::gotocoords(playerid, params); }
CMD:gotocoords(playerid, params[])
{
	new Float:x, Float:y, Float:z, interiorid;

	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "fffI(0)", x, y, z, interiorid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gotocoords [x] [y] [z] [int (optional)]");
	}

	SetPlayerPos(playerid, x, y, z);
	SetPlayerInterior(playerid, interiorid);
	return 1;
}

CMD:gotoint(playerid, params[])
{
	static list[4096];

    if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}

	if(isnull(list))
	{
	    for(new i = 0; i < sizeof(interiorArray); i ++)
	    {
	        format(list, sizeof(list), "%s\n%s", list, interiorArray[i][intName]);
		}
	}

	ShowPlayerDialog(playerid, DIALOG_INTERIORS, DIALOG_STYLE_LIST, "Choose an interior to teleport to.", list, "Select", "Cancel");
	return 1;
}

CMD:jetpack(playerid, params[])
{
	new targetid;
    if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /jetpack [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
    pData[targetid][pJetpack] = 1;
	SetPlayerSpecialAction(targetid, SPECIAL_ACTION_USEJETPACK);
	GameTextForPlayer(targetid, "~g~Jetpack", 3000, 3);
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has given a jetpack to %s.", GetRPName(playerid), GetRPName(targetid));
	switch(random(4))
	{
	    case 0: SCM(targetid, COLOR_WHITE, "The jetpack is part of an experiment conducted at the Area 69 facility.");
	    case 1: SCM(targetid, COLOR_WHITE, "You stole this from Area 69 in that one single player mission. Remember?");
	    case 2: SCM(targetid, COLOR_WHITE, "You probably don't need this anyway. All you hackers seem to do is airbreak around the map.");
	}

	return 1;
}


CMD:sendto(playerid, params[])
{
	new targetid, option[12], param[32];

    if(pData[playerid][pAdmin] < 1 && pData[playerid][pHelper] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[12]S()[32]", targetid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /sendto [playerid] [location]");
	    SCM(playerid, COLOR_WHITE, "Locations: Player, Vehicle, LS, SF, LV, Grove, Idlewood, Unity, Jefferson, Market, Bank");
	    SCM(playerid, COLOR_WHITE, "Locations: Dealership, DMV, Casino, Allsaints, Mall, VIP, FC");
		return 1;
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	/*if(!IsPlayerSpawned(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is either not spawned, or spectating.");
	}*/
	if(pData[targetid][pJailType])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This player is in jail so you can't teleport them.");
	}
	if(pData[playerid][pAdmin] < 2 && isnull(pData[targetid][pHelpRequest]) && pData[playerid][pAcceptedHelp] == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't submitted a help request. Therefore you can't teleport them.");
	}

    if(!strcmp(option, "ls", true))
    {
		TeleportToCoords(targetid, 1544.4407, -1675.5522, 13.5584, 90.0000, 0, 0);

		SM(playerid, COLOR_GREY2, "You have sent %s to Los Santos.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to Los Santos.", GetRPName(playerid));
    }
    else if(!strcmp(option, "fc", true))
    {
		TeleportToCoords(targetid, -297.8975, 1089.9200, 19.8767, 135.0000, 0, 0);

		SM(playerid, COLOR_GREY2, "You have sent %s to Fort Carson.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to Fort Carson.", GetRPName(playerid));
    }
    else if(!strcmp(option, "sf", true))
    {
		TeleportToCoords(targetid, -1421.5629, -288.9972, 14.1484, 135.0000, 0, 0);

		SM(playerid, COLOR_GREY2, "You have sent %s to San Fierro.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to San Fierro.", GetRPName(playerid));
    }
    else if(!strcmp(option, "lv", true))
    {
		TeleportToCoords(targetid, 1670.6908, 1423.5240, 10.7811, 270.0000, 0, 0);

		SM(playerid, COLOR_GREY2, "You have sent %s to Las Venturas.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to Las Venturas.", GetRPName(playerid));
    }
    else if(!strcmp(option, "grove", true))
    {
		TeleportToCoords(targetid, 2497.8274, -1668.9033, 13.3438, 90.0000, 0, 0);

		SM(playerid, COLOR_GREY2, "You have sent %s to Grove Street.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to Grove Street.", GetRPName(playerid));
    }
    else if(!strcmp(option, "idlewood", true))
    {
		TeleportToCoords(targetid, 2090.0664, -1816.9071, 13.3904, 90.0000, 0, 0);

		SM(playerid, COLOR_GREY2, "You have sent %s to Idlewood.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to Idlewood.", GetRPName(playerid));
    }
    else if(!strcmp(option, "unity", true))
    {
		TeleportToCoords(targetid, 1782.2683, -1865.5726, 13.5725, 0.0000, 0, 0);

		SM(playerid, COLOR_GREY2, "You have sent %s to Unity Station.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to Unity Station.", GetRPName(playerid));
    }
    else if(!strcmp(option, "jefferson", true))
    {
		TeleportToCoords(targetid, 2222.3438, -1164.5013, 25.7331, 0.0000, 0, 0);

		SM(playerid, COLOR_GREY2, "You have sent %s to Jefferson Motel.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to Jefferson Motel.", GetRPName(playerid));
    }
    else if(!strcmp(option, "market", true))
    {
		TeleportToCoords(targetid, 818.1782, -1349.2217, 13.5260, 0.0000, 0, 0);

		SM(playerid, COLOR_GREY2, "You have sent %s to Market.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to Market.", GetRPName(playerid));
    }
    else if(!strcmp(option, "bank", true))
    {
        TeleportToCoords(targetid, 1463.8929, -1026.6189, 23.8281, 180.0000, 0, 0);

        SM(playerid, COLOR_GREY2, "You have sent %s to the Bank.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to the Bank.", GetRPName(playerid));
    }
    else if(!strcmp(option, "dealership", true))
    {
		TeleportToCoords(targetid, 546.7000, -1281.5160, 17.2482, 180.0000, 0, 0);

        SM(playerid, COLOR_GREY2, "You have sent %s to Grotti car dealership.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to Grotti car dealership.", GetRPName(playerid));
    }
    else if(!strcmp(option, "dmv", true))
    {
        TeleportToCoords(targetid, 2489.2214,-1943.3082,13.5144, 180.0000, 0, 0);

        SM(playerid, COLOR_GREY2, "You have sent %s to the DMV.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to the DMV.", GetRPName(playerid));
    }
    else if(!strcmp(option, "casino", true))
    {
        TeleportToCoords(targetid, 1310.0944, -1367.9332, 13.5424, 180.0000, 0, 0);

        SM(playerid, COLOR_GREY2, "You have sent %s to Casino.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to Casino.", GetRPName(playerid));
    }
	else if(!strcmp(option, "allsaints", true))
    {
        TeleportToCoords(targetid, 1179.5540,-1323.4713,14.1752,270.0000, 0, 0);

        SM(playerid, COLOR_GREY2, "You have sent %s to Allsaints.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to Allsaints.", GetRPName(playerid));
    }
	else if(!strcmp(option, "mall", true))
    {
        TeleportToCoords(targetid, 1129.6364,-1425.1180,15.7969,357.0000, 0, 0);

        SM(playerid, COLOR_GREY2, "You have sent %s to Mall.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to Mall.", GetRPName(playerid));
    }
    else if(!strcmp(option, "vip", true))
    {
        TeleportToCoords(targetid, 1810.4061,-1601.0793,13.5469,225.1041, 0, 0);

        SM(playerid, COLOR_GREY2, "You have sent %s to VIP LOUNGE.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to VIP LOUNGE.", GetRPName(playerid));
    }
    else if(!strcmp(option, "player", true))
    {
        new sendtargetid;

        if(pData[playerid][pAdmin] < 1)
        {
            return SCM(playerid, COLOR_SYNTAX, "Only level 2+ admins can do this.");
		}
        if(sscanf(param, "u", sendtargetid))
        {
            return SCM(playerid, COLOR_SYNTAX, "Usage: /sendto [playerid] [player] [targetid]");
		}
		if(!IsPlayerConnected(sendtargetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The target specified is disconnected.");
		}
		/*if(!IsPlayerSpawned(sendtargetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The target specified is either not spawned, or spectating.");
		}*/

		TeleportToPlayer(targetid, sendtargetid);

		SM(playerid, COLOR_GREY2, "You have sent %s to %s's location.", GetRPName(targetid), GetRPName(sendtargetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to %s's location.", GetRPName(playerid), GetRPName(sendtargetid));
	}
	else if(!strcmp(option, "vehicle", true))
    {
        new vehicleid;

        if(pData[playerid][pAdmin] < 1)
        {
            return SCM(playerid, COLOR_SYNTAX, "Only level 2+ admins can do this.");
		}
        if(sscanf(param, "i", vehicleid))
        {
            return SCM(playerid, COLOR_SYNTAX, "Usage: /sendto [playerid] [vehicle] [vehicleid]");
		}
		if(!IsValidVehicle(vehicleid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid vehicle specified.");
		}

		TeleportToVehicle(targetid, vehicleid);

		SM(playerid, COLOR_GREY2, "You have sent %s to vehicle ID %i.", GetRPName(targetid), vehicleid);
		SM(targetid, COLOR_GREY2, "%s has sent you to vehicle ID %i.", GetRPName(playerid), vehicleid);
	}

	return 1;
}

CMD:bigears(playerid, params[])
{
	return callcmd::listen(playerid, params);
}

CMD:listen(playerid, params[])
{
    if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}

	if(!pData[playerid][pListen])
	{
		pData[playerid][pListen] = 1;
	    SCM(playerid, COLOR_AQUA, "You are now listening to all IC & local OOC chats.");
	}
	else
	{
		pData[playerid][pListen] = 0;
	    SCM(playerid, COLOR_AQUA, "You are no longer listening to IC & local OOC chats.");
	}

	return 1;
}

CMD:rwarn(playerid, params[])
{
	new targetid, reason[128];

	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /rwarn [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(pData[targetid][pReportMuted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is muted from reports.");
	}

	pData[targetid][pReportWarns]++;

	SM(targetid, COLOR_LIGHTRED, "** %s issued you a report warning, reason: %s (%i/3)", GetRPName(playerid), reason, pData[targetid][pReportWarns]);
	SAM(COLOR_LIGHTRED, "AdmCmd: %s was given a report warning by %s, reason: %s", GetRPName(targetid), GetRPName(playerid), reason);

	if(pData[targetid][pReportWarns] >= 3)
	{
	    pData[targetid][pReportMuted] = 12;
	    SCM(targetid, COLOR_LIGHTRED, "** You have been muted from reports for 12 playing hours.");
	}

	return 1;
}

CMD:runmute(playerid, params[])
{
	new targetid;

	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /runmute [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!pData[targetid][pReportMuted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is not muted from reports.");
	}

	pData[targetid][pReportWarns] = 0;
	pData[targetid][pReportMuted] = 0;

	SAM(COLOR_LIGHTRED, "AdmCmd: %s was unmuted from reports by %s.", GetRPName(targetid), GetRPName(playerid));
	SM(targetid, COLOR_YELLOW, "** Your report mute has been lifted by %s. Your report warnings were reset.", GetRPName(playerid));
	return 1;
}

CMD:amute(playerid, params[])
{
	new targetid;

	if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_ERROR, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_GREY, "USAGE:"WHITE" /amute [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_ERROR, "The player specified is disconnected.");
	}

	if(pData[targetid][pAdmin] > 0 && (pData[playerid][pAdmin] < 6))
		return SCM(playerid, COLOR_ERROR, "Are you an idiot? You cannot mute your co-admins from using /am.");

	if(!pData[targetid][pAMute])
	{
	    pData[targetid][pAMute] = 1;

	    SendStaffMessage(SERVER_COLOR, "AdmCmd: %s was muted from admin message (/am) by %s.", GetRPName(targetid), GetRPName(playerid));
	    SCMf(targetid, SERVER_COLOR, "** You have been muted from admin message (/am) by %s.", GetRPName(playerid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET amuted = 1 WHERE uid = %i", pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		Log_Write("log_mute", "%s (uid: %i) was muted by %s (uid: %d) from Admin Message System (/am).", GetPlayerNameEx(targetid), pData[targetid][pID], GetPlayerNameEx(playerid), pData[playerid][pID]);
	}
	else
	{
	    pData[targetid][pAMute] = 0;

	    SendStaffMessage(SERVER_COLOR, "AdmCmd: %s was unmuted from admin message (/am) by %s.", GetRPName(targetid), GetRPName(playerid));
	    SCMf(targetid, COLOR_YELLOW, "** You have been unmuted from admin message (/am) by %s.", GetRPName(playerid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET amuted = 0 WHERE uid = %i", pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		Log_Write("log_mute", "%s (uid: %i) was unmuted by %s (uid: %d) from Admin Message System (/am).", GetPlayerNameEx(targetid), pData[targetid][pID], GetPlayerNameEx(playerid), pData[playerid][pID]);
	}
	return 1;
}

CMD:nmute(playerid, params[])
{
	new targetid;

	if(pData[playerid][pAdmin] < 2 && pData[playerid][pHelper] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /nmute [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	if(!pData[targetid][pNewbieMuted])
	{
	    pData[targetid][pNewbieMuted] = 1;

	    SendStaffMessage(COLOR_LIGHTRED, "AdmCmd: %s was muted from newbie chat by %s.", GetRPName(targetid), GetRPName(playerid));
	    SM(targetid, COLOR_LIGHTRED, "** You have been muted from newbie chat by %s.", GetRPName(playerid));
	}
	else
	{
	    pData[targetid][pNewbieMuted] = 0;

	    SendStaffMessage(COLOR_LIGHTRED, "AdmCmd: %s was unmuted from newbie chat by %s.", GetRPName(targetid), GetRPName(playerid));
	    SM(targetid, COLOR_YELLOW, "** You have been unmuted from newbie chat by %s.", GetRPName(playerid));
	}

	return 1;
}

CMD:hmute(playerid, params[])
{
	new targetid;

	if(pData[playerid][pAdmin] < 2 && pData[playerid][pHelper] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /hmute [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	if(!pData[targetid][pHelpMuted])
	{
	    pData[targetid][pHelpMuted] = 1;

	    SendStaffMessage(COLOR_LIGHTRED, "AdmCmd: %s was muted from help requests by %s.", GetRPName(targetid), GetRPName(playerid));
	    SM(targetid, COLOR_LIGHTRED, "** You have been muted from help requests by %s.", GetRPName(playerid));
	}
	else
	{
	    pData[targetid][pHelpMuted] = 0;

	    SendStaffMessage(COLOR_LIGHTRED, "AdmCmd: %s was unmuted from help requests by %s.", GetRPName(targetid), GetRPName(playerid));
	    SM(targetid, COLOR_YELLOW, "** You have been unmuted from help requests by %s.", GetRPName(playerid));
	}

	return 1;
}

CMD:admute(playerid, params[])
{
	new targetid;

	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /admute [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	if(!pData[targetid][pAdMuted])
	{
	    pData[targetid][pAdMuted] = 1;

	    SendStaffMessage(COLOR_LIGHTRED, "AdmCmd: %s was muted from advertisements by %s.", GetRPName(targetid), GetRPName(playerid));
	    SM(targetid, COLOR_LIGHTRED, "** You have been muted from advertisements by %s.", GetRPName(playerid));
	}
	else
	{
	    pData[targetid][pAdMuted] = 0;

	    SendStaffMessage(COLOR_LIGHTRED, "AdmCmd: %s was unmuted from advertisements by %s.", GetRPName(targetid), GetRPName(playerid));
	    SM(targetid, COLOR_YELLOW, "** You have been unmuted from advertisements by %s.", GetRPName(playerid));
	}

	return 1;
}

CMD:gmute(playerid, params[])
{
	new targetid;

	if(pData[playerid][pAdmin] < 2 && pData[playerid][pHelper] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gmute [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	if(!pData[targetid][pGlobalMuted])
	{
	    pData[targetid][pGlobalMuted] = 1;

	    SendStaffMessage(COLOR_LIGHTRED, "AdmCmd: %s was muted from global chat by %s.", GetRPName(targetid), GetRPName(playerid));
	    SM(targetid, COLOR_LIGHTRED, "** You have been muted from global chat by %s.", GetRPName(playerid));
	}
	else
	{
	    pData[targetid][pGlobalMuted] = 0;

	    SendStaffMessage(COLOR_LIGHTRED, "AdmCmd: %s was unmuted from global chat by %s.", GetRPName(targetid), GetRPName(playerid));
	    SM(targetid, COLOR_YELLOW, "** You have been unmuted from global chat by %s.", GetRPName(playerid));
	}

	return 1;
}

CMD:rmute(playerid, params[])
{
	new targetid;

	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /rmute [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	if(!pData[targetid][pReportMuted])
	{
	    pData[targetid][pReportMuted] = 99999;

	    SendStaffMessage(COLOR_LIGHTRED, "AdmCmd: %s was muted from submitting reports by %s.", GetRPName(targetid), GetRPName(playerid));
	    SM(targetid, COLOR_LIGHTRED, "** You have been muted from submitting reports by %s.", GetRPName(playerid));
	}
	else
	{
	    pData[targetid][pReportMuted] = 0;

	    SendStaffMessage(COLOR_LIGHTRED, "AdmCmd: %s was unmuted from submitting reports by %s.", GetRPName(targetid), GetRPName(playerid));
	    SM(targetid, COLOR_YELLOW, "** You have been unmuted from submitting reports by %s.", GetRPName(playerid));
	}

	return 1;
}
CMD:freezenear(playerid, params[])
{
	new Float:radius;

	if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "f", radius))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /freezenear [radius]");
	}
	if(!(1.0 <= radius <= 100.0))
	{
	    return SCM(playerid, COLOR_WHITE, "The radius can't be below 1.0 or above 100.0.");
	}

	foreach(new i : Player)
	{
		if(IsPlayerInRangeOfPlayer(i, playerid, radius))
		{
		    if(!pData[i][pAdminDuty])
		    {
			    if(GetArmor(i) < 100.0)
			    {
			         TogglePlayerControllable(i, 0);
				}
			}

		    SCM(i, COLOR_WHITE, "** An admin has frozen everyone nearby.");
		}
	}

	return 1;
}

CMD:unfreezenear(playerid, params[])
{
	new Float:radius;

	if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "f", radius))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /unfreezenear [radius]");
	}
	if(!(1.0 <= radius <= 100.0))
	{
	    return SCM(playerid, COLOR_WHITE, "The radius can't be below 1.0 or above 100.0.");
	}

	foreach(new i : Player)
	{
		if(IsPlayerInRangeOfPlayer(i, playerid, radius))
		{
		    if(!pData[i][pAdminDuty])
		    {
			    if(GetArmor(i) < 100.0)
			    {
			         TogglePlayerControllable(i, 1);
				}
			}

		    SCM(i, COLOR_WHITE, "** An admin has unfrozen everyone nearby.");
		}
	}

	return 1;
}
CMD:freeze(playerid, params[])
{
	new targetid;

	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /freeze [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	TogglePlayerControllable(targetid, 0);
	SAM(COLOR_LIGHTRED, "AdmCmd: %s was frozen by %s.", GetPlayerNameEx(targetid), GetPlayerNameEx(playerid));
	return 1;
}

CMD:unfreeze(playerid, params[])
{
	new targetid;

	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /unfreeze [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	if(pData[targetid][pTazedTime])
	{
		ClearAnimations(targetid, 1);
		pData[targetid][pTazedTime] = 0;
	}

    pData[targetid][pTied] = 0;
	TogglePlayerControllable(targetid, 1);
	SAM(COLOR_LIGHTRED, "AdmCmd: %s was unfrozen by %s.", GetPlayerNameEx(targetid), GetPlayerNameEx(playerid));
	return 1;
}

CMD:listguns(playerid, params[])
{
	new targetid;

	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /listguns [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	SM(playerid, SERVER_COLOR, "%s's Weapons:", GetRPName(targetid));

	for(new i = 0; i < 13; i ++)
	{
	    new
	        weapon,
	        ammo;

	    GetPlayerWeaponData(targetid, i, weapon, ammo);

	    if(weapon)
	    {
	        if(pData[targetid][pAmmoType] != AMMOTYPE_NORMAL && pData[targetid][pAmmoWeapon] == weapon) {
	            if(pData[targetid][pAmmoType] == AMMOTYPE_HP) {
	                SM(playerid, COLOR_GREY2, "-> %s (%i ammo) (Hollow point ammo)", GetWeaponNameEx(weapon), pData[targetid][pHPAmmo]);
	            } else if(pData[targetid][pAmmoType] == AMMOTYPE_POISON) {
	                SM(playerid, COLOR_GREY2, "-> %s (%i ammo) (Poison tip ammo)", GetWeaponNameEx(weapon), pData[targetid][pPoisonAmmo]);
	            } else if(pData[targetid][pAmmoType] == AMMOTYPE_FMJ) {
	                SM(playerid, COLOR_GREY2, "-> %s (%i ammo) (FMJ ammo)", GetWeaponNameEx(weapon), pData[targetid][pFMJAmmo]);
	            }
	        }
			else if(!PlayerHasWeapon(targetid, weapon)) {
		        SM(playerid, COLOR_GREY2, "-> %s {FFD700}(Desynced){C8C8C8}", GetWeaponNameEx(weapon));
	    	} else {
            	SM(playerid, COLOR_GREY2, "-> %s", GetWeaponNameEx(weapon));
			}
		}
	}

	return 1;
}

CMD:disarm(playerid, params[])
{
	new targetid;

	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /disarm [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	ResetPlayerWeaponsEx(targetid);
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has disarmed %s.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:nrn(playerid, params[])
{
	new targetid;

	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /nrn [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	/*if(pData[targetid][pLevel] > 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is level 3 or above and doesn't need a free namechange.");
	}*/

	ShowPlayerDialog(targetid, DIALOG_FREENAMECHANGE, DIALOG_STYLE_INPUT, "Non-RP Name", "An administrator has came to the conclusion that your name is non-RP.\nTherefore you have been given this free namechange in order to correct it.\n\nEnter a name in the Firstname_Lastname format in the box below:", "Submit", "Cancel");
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has forced %s to change their name for being Non-RP.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:jail(playerid, params[])
{
	return callcmd::prison(playerid, params);
}
CMD:prisonic(playerid, params[]) return callcmd::prison(playerid, params);
CMD:prison(playerid, params[])
{
	new targetid, minutes, reason[128];

	if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "uis[128]", targetid, minutes, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /prison [playerid] [minutes] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet. You can wait until they login or use /oprison.");
	}
	if(minutes < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The amount of minutes cannot be below one. Use /release instead.");
	}

    PlayerTextDrawShow(targetid, customHUD[targetid][1]);

    pData[targetid][pJailType] = 2;
    pData[targetid][pJailTime] = minutes * 60;

	SetPlayerInJail(targetid);
	GameTextForPlayer(targetid, "~w~Welcome to~n~~r~admin jail", 5000, 3);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET prisonedby = '%e', prisonreason = '%e' WHERE uid = %i", GetPlayerNameEx(playerid), reason, pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	GetPlayerName(playerid, pData[targetid][pPrisonedBy], MAX_PLAYER_NAME);
	strcpy(pData[targetid][pPrisonReason], reason, 128);

	Log_Write("log_punishments", "%s (uid: %i) prisoned %s (uid: %i) for %i minutes, reason: %s", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], minutes, reason);
    SMA(COLOR_LIGHTRED, "AdmCmd: %s was prisoned for %i minutes by %s, reason: %s", GetRPName(targetid), minutes, GetRPName(playerid), reason);
    SM(targetid, COLOR_AQUA, "** You have been admin prisoned for %i minutes by %s.", minutes, GetRPName(playerid));
    return 1;
}

CMD:oprison(playerid, params[])
{
	new username[MAX_PLAYERS], minutes, reason[128];

	if(pData[playerid][pAdmin] < 1 && pData[playerid][pHelper] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]is[128]", username, minutes, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /oprison [username] [minutes] [reason]");
	}
	if(minutes < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The amount of minutes cannot be below one. Use /release instead.");
	}
	if(IsPlayerOnline(username))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is already online and logged in. Use /prison instead.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT adminlevel, uid FROM users WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminOfflinePrison", "isis", playerid, username, minutes, reason);
	return 1;
}

CMD:release(playerid, params[])
{
    new targetid, reason[128];

	if(pData[playerid][pAdmin] < 3 && !IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_DOC)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /release [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!pData[targetid][pJailType])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is not jailed.");
	}

 	PlayerTextDrawHide(targetid, customHUD[targetid][1]);

 	PlayerTextDrawHide(targetid, customHUD[targetid][1]);
	pData[targetid][pJailTime] = 1;
	SMA(COLOR_LIGHTRED, "AdmCmd: %s was released from jail/prison by %s, reason: %s", GetRPName(targetid), GetRPName(playerid), reason);
	return 1;
}

CMD:fine(playerid, params[])
{
	new targetid, amount, reason[128];

	if(pData[playerid][pAdmin] < 3 && pData[playerid][pHelper] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "uis[128]", targetid, amount, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /fine [playerid] [amount] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(pData[targetid][pAdmin] > pData[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be fined.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(amount < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid amount.");
	}

	GivePlayerCash(targetid, -amount);

	SMA(COLOR_LIGHTRED, "AdmCmd: %s was fined $%i by %s, reason: %s", GetRPName(targetid), amount, GetRPName(playerid), reason);
	Log_Write("log_admin", "%s (uid: %i) fined %s (uid: %i) for $%i, reason: %s", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], amount, reason);
	return 1;
}

CMD:pfine(playerid, params[])
{
	new targetid, percent, reason[128];

	if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "uis[128]", targetid, percent, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /pfine [playerid] [percent] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(!(1 <= percent <= 100))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The percentage value must be between 1 and 100.");
	}

	new amount = ((pData[targetid][pCash] + pData[targetid][pBank]) / 100) * percent;

	GivePlayerCash(targetid, -amount);

	SMA(COLOR_LIGHTRED, "AdmCmd: %s was fined $%i by %s, reason: %s", GetRPName(targetid), amount, GetRPName(playerid), reason);
	Log_Write("log_admin", "%s (uid: %i) fined %s (uid: %i) for $%i (%i percent), reason: %s", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], amount, percent, reason);
	return 1;
}

CMD:ofine(playerid, params[])
{
	new username[MAX_PLAYERS], amount, reason[128];

	if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]is[128]", username, amount, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /ofine [username] [amount] [reason]");
	}
	if(amount < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid amount.");
	}
	if(IsPlayerOnline(username))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is already online and logged in. Use /fine instead.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT adminlevel FROM users WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminOfflineFine", "isis", playerid, username, amount, reason);
	return 1;
}

CMD:sethp(playerid, params[])
{
    new targetid, Float:amount;

    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "uf", targetid, amount))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /sethp [playerid] [amount]");
	    SCM(playerid, COLOR_WHITE, "Warning: Values above 255.0 may not work properly with the server-sided damage system.");
	    return 1;
	}
	/*if(amount == 0.0)
	{
		DamagePlayer(targetid, 300, playerid, WEAPON_EXPLOSION, BODY_PART_UNKNOWN, false);
	}*/
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	SetPlayerHealth(targetid, amount);
	SM(playerid, COLOR_GREY2, "%s's health set to %.1f.", GetRPName(targetid), amount);
	return 1;
}

CMD:setarmor(playerid, params[])
{
    new targetid, Float:amount;

    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "uf", targetid, amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setarmor [playerid] [amount]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	SetScriptArmour(targetid, amount);
	SM(playerid, COLOR_GREY2, "%s's armor set to %.1f.", GetRPName(targetid), amount);
	return 1;
}

CMD:refillcars(playerid, params[])
{
    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	for(new i = 1; i < MAX_VEHICLES; i ++)
	{
	    if(IsValidVehicle(i))
	    {
	        vehicleFuel[i] = 100;
		}
	}

	SMA(COLOR_LIGHTRED, "AdmCmd: %s refilled all vehicles to maximum fuel.", GetRPName(playerid));
	return 1;
}

CMD:refilldrug(playerid, params[])
{
    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(isnull(params))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /refilldrug [seeds | Crack | ephedrine]");
	    SCM(playerid, COLOR_WHITE, "This command refills the specified drug stock to maximum value.");
	    return 1;
	}

	if(!strcmp(params, "seeds", true))
	{
	    gSeedsStock = 1000;
	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has refilled the seeds in the drug den.", GetRPName(playerid));
	}
	else if(!strcmp(params, "crack", true))
	{
	    gCrackStock = 500;
	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has refilled the Crack in the crack house.", GetRPName(playerid));
	}
	else if(!strcmp(params, "ephedrine", true))
	{
	    gEphedrineStock = 250;
	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has refilled the ephedrine in the drug den.", GetRPName(playerid));
	}

	return 1;
}
CMD:purgeme(playerid, params[])
{
	if(pData[playerid][pVerified] == 0)
	{
		return SCM(playerid, COLOR_RED, "You cannot use this command unless you are verified. [Type /settings for your account to be verified]");
	}
	if(!enabledpurge)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The purge is disabled at the moment.");
	}
	GiveWeapon(playerid, 5);
	GiveWeapon(playerid, 22);
	GiveWeapon(playerid, 30);
	SCM(playerid, COLOR_SYNTAX,""SERVER_BOT" given you 9mm, Baseball bat, and AK-47 for the purge.");
	return 1;
}



CMD:top(playerid)
{
	if(pData[playerid][pVerified] == 0)
	{
		return SCM(playerid, COLOR_RED, "You cannot use this command unless you are verified. [Type /settings for your account to be verified]");
	}
	ShowDialogToPlayer(playerid, DIALOG_TOP);
	return 1;
}

CMD:aheadshot(playerid, params[])
{
    if(!IsPlayerAdmin(playerid) && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_ERROR, "You are not authorized to use this command.");
	}
 	if(!HeadShotSystem)
	{
		HeadShotSystem = true;
	    SCMAf(SERVER_COLOR, "** An admin has enabled headshot.");
	}
	else
	{
		HeadShotSystem = false;
	    SCMAf(SERVER_COLOR, "** An admin has disabled headshot.");
	}
	return 1;
}

CMD:togpurge(playerid, params[])
{
    if(pData[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	if(!enabledpurge)
	{
	    enabledpurge = 1;
	    SMA(SERVER_COLOR, "(( Administrator %s enabled the Purge. ))", GetRPName(playerid));
	}
	else
	{
	    enabledpurge = 0;
	    SMA(SERVER_COLOR, "(( Administrator %s disabled the Purge. ))", GetRPName(playerid));
	}
	return 1;
}

CMD:togfactionvc(playerid, params[])
{
    if(pData[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	if(!gFactionVC)
	{
	    gFactionVC = 1;
	    SMA(COLOR_LIGHTRED, "Admcmd: Administrator %s enabled the faction vc.", GetRPName(playerid));
	}
	else
	{
	    gFactionVC = 0;
	    SMA(COLOR_LIGHTRED, "Admcmd: Administrator %s disabled the faction vc.", GetRPName(playerid));
	}
	return 1;
}

CMD:togam(playerid, params[])
{
    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_ERROR, "You are not authorized to use this command.");
	}

	if(!enabledAM)
	{
	    enabledAM = 1;
	    SCMAf(COLOR_WHITE, "(( Administrator %s enabled the Admin Messaging system. ))", GetRPName(playerid));
	}
	else
	{
	    enabledAM = 0;
	    SCMAf(COLOR_WHITE, "(( Administrator %s disabled the Admin Messaging system. ))", GetRPName(playerid));
	}
	return 1;
}


CMD:togooc(playerid, params[])
{
    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	if(!enabledOOC)
	{
	    enabledOOC = 1;
	    SMA(SERVER_COLOR, "(( Administrator %s enabled the Out of Character channel. ))", GetRPName(playerid));
	}
	else
	{
	    enabledOOC = 0;
	    SMA(SERVER_COLOR, "(( Administrator %s disabled the Out of Character channel. ))", GetRPName(playerid));
	}
	return 1;
}

/*CMD:toghs(playerid, params[])
{
    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	HeadShotSystem = !HeadShotSystem;
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has %s the headshot system.", GetRPName(playerid), (HeadShotSystem)?("Enabled"):("Disabled"));
    return 1;
}*/

CMD:togn(playerid, params[])
{
    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	if(!enabledNewbie)
	{
	    enabledNewbie = 1;
	    SMA(SERVER_COLOR, "(( Administrator %s enabled the newbie channel. ))", GetRPName(playerid));
	}
	else
	{
	    enabledNewbie = 0;
	    SMA(SERVER_COLOR, "(( Administrator %s disabled the newbie channel. ))", GetRPName(playerid));
	}
	return 1;
}
CMD:togvip(playerid, params[])
{
    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	if(!enabledNewbie)
	{
	    enabledVip = 1;
	    SMA(SERVER_COLOR, "(( Administrator %s enabled the vip channel. ))", GetRPName(playerid));
	}
	else
	{
	    enabledVip = 0;
	    SMA(SERVER_COLOR, "(( Administrator %s disabled the vip channel. ))", GetRPName(playerid));
	}
	return 1;
}

CMD:togglobal(playerid, params[])
{
    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	if(!enabledGlobal)
	{
	    enabledGlobal = 1;
	    SMA(SERVER_COLOR, "(( Administrator %s enabled the global channel. ))", GetRPName(playerid));
	}
	else
	{
	    enabledGlobal = 0;
	    SMA(SERVER_COLOR, "(( Administrator %s disabled the global channel. ))", GetRPName(playerid));
	}
	return 1;
}

CMD:togadmin(playerid, params[])
{
    if(pData[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	if(!enabledAdmin)
	{
	    enabledAdmin = 1;
	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has enabled the admin channel.", GetRPName(playerid));
	}
	else
	{
	    enabledAdmin = 0;
	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has disabled the admin channel.", GetRPName(playerid));
	}
	return 1;
}

CMD:togreports(playerid, params[])
{
    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	if(!enabledReports)
	{
	    enabledReports = 1;
	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has enabled the report channel.", GetRPName(playerid));
	}
	else
	{
	    enabledReports = 0;
	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has disabled the report channel.", GetRPName(playerid));
	}
	return 1;
}

CMD:listpvehs(playerid, params[])
{
	new targetid;

    if(pData[playerid][pAdmin] < 3)
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /listpvehs [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	SM(playerid, SERVER_COLOR, "%s's Vehicles:", GetRPName(targetid));

    for(new i = 1; i < MAX_VEHICLES; i ++)
    {
        if(IsValidVehicle(i) && VehicleInfo[i][vID] > 0 && IsVehicleOwner(targetid, i))
        {
            SM(playerid, COLOR_GREY2, "ID: %i | Model: %s | Location: %s", i, GetVehicleName(i), GetVehicleZoneName(i));
		}
	}

	return 1;
}

CMD:despawnpveh(playerid, params[])
{
	new vehicleid;

    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /despawnpveh [vehicleid]");
	}
	if(!IsValidVehicle(vehicleid) || !VehicleInfo[vehicleid][vOwnerID])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The vehicle specified is invalid or not owned by any player.");
	}

	SM(playerid, COLOR_WHITE, "** You have despawned %s's %s.", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid));
	DespawnVehicle(vehicleid);
	return 1;
}

CMD:veh(playerid, params[])
{
	new model[20], modelid, color1, color2, Float:x, Float:y, Float:z, Float:a, vehicleid;

	if(pData[playerid][pVerified] == 0)
	{
		return SCM(playerid, COLOR_RED, "You cannot use this command unless you are verified. [Type /settings for your account to be verified]");
	}
	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "s[20]I(-1)I(-1)", model, color1, color2))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /veh [modelid/name] [color1 (optional)] [color2 (optional)]");
	}
	if((modelid = GetVehicleModelByName(model)) == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid vehicle model.");
	}
	if(!(-1 <= color1 <= 255) || !(-1 <= color2 <= 255))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid color. Valid colors range from -1 to 255.");
	}

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	vehicleid = AddStaticVehicleEx(modelid, x, y, z, a, color1, color2, -1);

	if(vehicleid == INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Cannot spawn vehicle. The vehicle pool is currently full.");
	}
	ResetVehicleObjects(vehicleid);
	adminVehicle{vehicleid} = true;
	vehicleFuel[vehicleid] = 100;
	vehicleColors[vehicleid][0] = color1;
	vehicleColors[vehicleid][1] = color2;

	SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
	LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));

	//PutPlayerInVehicle(playerid, vehicleid, 0);
	SAM(COLOR_LIGHTRED, "AdmCmd: %s spawned a %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	SM(playerid, COLOR_WHITE, "** %s (ID %i) spawned. Use '/savevehicle %i' to save this vehicle to the database.", GetVehicleName(vehicleid), vehicleid, vehicleid);
	return 1;
}

CMD:savevehicle(playerid, params[])
{
	new vehicleid, gangid, type, delay, Float:x, Float:y, Float:z, Float:a;

    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "iiii", vehicleid, gangid, type, delay))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /savevehicle [vehicleid] [gangid (0 = none)] [faction type] [respawn delay (seconds)]");
	    SCM(playerid, COLOR_GREY2, "Faction types: (0) None (1) Police (2) Medic (3) News (4) Government (5) Hitman (6) Federal (7) Mechanic (8) Doc (9) Sheriff");
	    return 1;
	}
	if(!IsValidVehicle(vehicleid) || !adminVehicle{vehicleid})
	{
	    return SCM(playerid, COLOR_SYNTAX, "The vehicle specified is either invalid or not an admin spawned vehicle.");
	}
	if(!(-1 <= gangid < MAX_GANGS) || (gangid >= 0 && !GangInfo[gangid][gSetup]))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid gang.");
	}
	if(!(0 <= type <= 9))
	{
		return SendClientMessage(playerid, COLOR_GREY, "Invalid type.");
	}

    SM(playerid, COLOR_WHITE, "** %s saved. This vehicle will now spawn here from now on.", GetVehicleName(vehicleid));

	GetVehiclePos(vehicleid, x, y, z);
	GetVehicleZAngle(vehicleid, a);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO vehicles (modelid, pos_x, pos_y, pos_z, pos_a, color1, color2, gangid, factiontype, respawndelay) VALUES(%i, '%f', '%f', '%f', '%f', %i, %i, %i, %i, %i)", GetVehicleModel(vehicleid), x, y, z, a, vehicleColors[vehicleid][0], vehicleColors[vehicleid][1], gangid, type, delay);
	mysql_tquery(connectionID, queryBuffer);
	mysql_tquery(connectionID, "SELECT * FROM vehicles WHERE id = LAST_INSERT_ID()", "OnQueryFinished", "ii", THREAD_LOAD_VEHICLES, 0);

	adminVehicle{vehicleid} = false;
	DestroyVehicleEx(vehicleid);

	return 1;
}

CMD:tab(playerid) {
    new string[MAX_PLAYER_NAME * 100], title[80], count = 0, name[MAX_PLAYER_NAME+1];
    strcat(string, "ID\tName\tLevel\tPing");
    count++;
    GetPlayerName(playerid, name, sizeof(name));
    format(string, sizeof(string), "%s\n%d\t%s\t%d\t%d", string, playerid, name, GetPlayerScore(playerid), GetPlayerPing(playerid));
    foreach(Player, i)

    {
        if(IsPlayerConnected(i) && i != playerid)
        {
            count++;
            GetPlayerName(i, name, sizeof(name));
            format(string, sizeof(string), "%s\n%d\t%s\t%d\t%d", string, i, name, GetPlayerScore(i), GetPlayerPing(i));
        }
    }
    format(title, sizeof(title), " GTA: PFRP |  Players Online: %d", count);
    ShowPlayerDialog(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, title, string, "Closed", "");
    return 1;
}

CMD:editvehicle(playerid, params[])
{
	new vehicleid, option[14], param[32], value;

	if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[14]S()[32]", vehicleid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Spawn, Tickets, Locked, Plate, Color, Paintjob, Neon, Trunk, Health");
	    SCM(playerid, COLOR_WHITE, "Available options: Gang, Faction, Job, Respawndelay");
	    return 1;
	}
	if(!IsValidVehicle(vehicleid) || !VehicleInfo[vehicleid][vID])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The vehicle specified is invalid or a static vehicle.");
	}

	if(!strcmp(option, "spawn", true))
	{
	    new id = VehicleInfo[vehicleid][vID];

	    if(VehicleInfo[vehicleid][vFactionType] > 0 && GetPlayerInterior(playerid) > 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't set the spawn of a faction vehicle indoors.");
	    }

	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        GetVehiclePos(vehicleid, VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ]);
	    	GetVehicleZAngle(vehicleid, VehicleInfo[vehicleid][vPosA]);
	    }
	    else
	    {
		    GetPlayerPos(playerid, VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ]);
		    GetPlayerFacingAngle(playerid, VehicleInfo[vehicleid][vPosA]);
	    }

	    if(VehicleInfo[vehicleid][vGang] >= 0 || VehicleInfo[vehicleid][vOwnerID] > 0)
	    {
	        VehicleInfo[vehicleid][vInterior] = GetPlayerInterior(playerid);
	        VehicleInfo[vehicleid][vWorld] = GetPlayerVirtualWorld(playerid);
	        SaveVehicleModifications(vehicleid);
	    }

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', interior = %i, world = %i WHERE id = %i", VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ], VehicleInfo[vehicleid][vPosA], VehicleInfo[vehicleid][vInterior], VehicleInfo[vehicleid][vWorld], id);
		mysql_tquery(connectionID, queryBuffer);

	 	SM(playerid, COLOR_AQUA, "** You have moved the spawn point for %s (ID %i).", GetVehicleName(vehicleid), vehicleid);
	 	SCM(playerid, COLOR_WHITE, "Note: The vehicle's ID may have changed in the mean time.");
	 	DespawnVehicle(vehicleid, false);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM vehicles WHERE id = %i", id);
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOAD_VEHICLES, -1);
	}
	/*else if(!strcmp(option, "price", true))
	{
	    if(!VehicleInfo[vehicleid][vOwnerID])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This option can only be adjusted on player owned vehicles.");
		}
		if(sscanf(param, "i", value))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [price] [value]");
		}

		VehicleInfo[vehicleid][vPrice] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET price = %i WHERE id = %i", VehicleInfo[vehicleid][vPrice], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "** You have set the price of %s's %s (ID %i) to $%i.", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid), vehicleid, value);
	}*/
	else if(!strcmp(option, "tickets", true))
	{
	    if(!VehicleInfo[vehicleid][vOwnerID])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This option can only be adjusted on player owned vehicles.");
		}
		if(sscanf(param, "i", value))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [tickets] [value]");
		}

		VehicleInfo[vehicleid][vTickets] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET tickets = %i WHERE id = %i", VehicleInfo[vehicleid][vTickets], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "** You have set the tickets of %s's %s (ID %i) to $%i.", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid), vehicleid, value);
	}
	else if(!strcmp(option, "locked", true))
	{
		if(sscanf(param, "i", value) || !(0 <= value <= 1))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [locked] [0/1]");
		}
		if(VehicleInfo[vehicleid][vFactionType] > 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Faction vehicles can't be locked.");
		}

		VehicleInfo[vehicleid][vLocked] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET locked = %i WHERE id = %i", VehicleInfo[vehicleid][vLocked], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		SetVehicleParams(vehicleid, VEHICLE_DOORS, value);
		SM(playerid, COLOR_AQUA, "** You have set the locked state of %s (ID %i) to %i.", GetVehicleName(vehicleid), vehicleid, value);
	}
	else if(!strcmp(option, "plate", true))
	{
	    if(!VehicleInfo[vehicleid][vOwnerID])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This option can only be adjusted on player owned vehicles.");
		}
		if(isnull(param))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [plate] [text]");
		}

		strcpy(VehicleInfo[vehicleid][vPlate], param, 32);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET plate = '%e' WHERE id = %i", VehicleInfo[vehicleid][vPlate], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		ResyncVehicle(vehicleid);
		SM(playerid, COLOR_AQUA, "** You have set the license plate of %s's %s (ID %i) to %s.", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid), vehicleid, param);
		SCM(playerid, COLOR_WHITE, "Note: The vehicle will need to be respawned for changes to take effect.");
	}
    else if(!strcmp(option, "color", true))
	{
	    new color1, color2;

		if(sscanf(param, "ii", color1, color2))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [color] [color 1] [color 2]");
		}
		if(!(0 <= color1 <= 255) || !(0 <= color2 <= 255))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The colors must range from 0 to 255.");
		}

		VehicleInfo[vehicleid][vColor1] = color1;
		VehicleInfo[vehicleid][vColor2] = color2;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET color1 = %i, color2 = %i WHERE id = %i", VehicleInfo[vehicleid][vColor1], VehicleInfo[vehicleid][vColor2], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		ChangeVehicleColor(vehicleid, color1, color2);
		SM(playerid, COLOR_AQUA, "** You have set the colors of %s (ID %i) to %i, %i.", GetVehicleName(vehicleid), vehicleid, color1, color2);
	}
	else if(!strcmp(option, "paintjob", true))
	{
	    new paintjobid;

		if(sscanf(param, "i", paintjobid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [paintjobid] [value (-1 = none)]");
		}
		if(!(-1 <= paintjobid <= 5))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The paintjob must range from -1 to 5.");
		}
		if(VehicleInfo[vehicleid][vFactionType] > 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can't change the paintjob on a faction vehicle.");
		}

		VehicleInfo[vehicleid][vPaintjob] = paintjobid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET paintjob = %i WHERE id = %i", VehicleInfo[vehicleid][vPaintjob], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		ChangeVehiclePaintjob(vehicleid, paintjobid);
		SM(playerid, COLOR_AQUA, "** You have set the paintjob of %s (ID %i) to %i.", GetVehicleName(vehicleid), vehicleid, paintjobid);
	}
	else if(!strcmp(option, "neon", true))
	{
	    if(!VehicleInfo[vehicleid][vOwnerID])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This option can only be adjusted on player owned vehicles.");
		}
		if(isnull(param))
		{
		    SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [neon] [color]");
		    SCM(playerid, COLOR_GREY2, "List of colors: None, Red, Blue, Green, Yellow, Pink, White");
		    return 1;
		}

		if(!strcmp(param, "neon", true)) {
		    SetVehicleNeon(vehicleid, 0);
		} else if(!strcmp(param, "red", true)) {
			SetVehicleNeon(vehicleid, 18647);
		} else if(!strcmp(param, "blue", true)) {
			SetVehicleNeon(vehicleid, 18648);
		} else if(!strcmp(param, "green", true)) {
			SetVehicleNeon(vehicleid, 18649);
		} else if(!strcmp(param, "yellow", true)) {
			SetVehicleNeon(vehicleid, 18650);
		} else if(!strcmp(param, "pink", true)) {
			SetVehicleNeon(vehicleid, 18651);
		} else if(!strcmp(param, "white", true)) {
			SetVehicleNeon(vehicleid, 18652);
		} else {
		    return SCM(playerid, COLOR_SYNTAX, "Invalid color.");
		}

		SM(playerid, COLOR_AQUA, "** You have set the neon type of %s's %s (ID %i) to %s.", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid), vehicleid, param);
	}
	else if(!strcmp(option, "trunk", true))
	{
	    if(!VehicleInfo[vehicleid][vOwnerID])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This option can only be adjusted on player owned vehicles.");
		}
		if(sscanf(param, "i", value) || !(0 <= value <= 3))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [trunk] [level (0-3)]");
		}

		VehicleInfo[vehicleid][vTrunk] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET trunk = %i WHERE id = %i", VehicleInfo[vehicleid][vTrunk], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "** You have set the trunk of %s's %s (ID %i) to level %i/3.", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid), vehicleid, value);
	}
	else if(!strcmp(option, "health", true))
	{
	    new Float:amount;

		if(sscanf(param, "f", amount))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [health] [amount]");
		}
		if(!(300.0 <= amount <= 10000.0))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The health value must range from 300.0 to 10000.0.");
		}

		VehicleInfo[vehicleid][vHealth] = amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET health = '%f' WHERE id = %i", VehicleInfo[vehicleid][vHealth], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		SetVehicleHealth(vehicleid, amount);
		SM(playerid, COLOR_AQUA, "** You have set the health of %s (ID %i) to %.2f.", GetVehicleName(vehicleid), vehicleid, amount);
	}
	else if(!strcmp(option, "fuel", true))
	{
	    new amount;

		if(sscanf(param, "i", amount))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [fuel] [amount]");
		}
		if(!(0 <= amount <= 100))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The health value must range from 0.0 to 100.0.");
		}

        vehicleFuel[vehicleid] = amount;

		SM(playerid, COLOR_AQUA, "** You have set the fuel of %s (ID %i) to %i.", GetVehicleName(vehicleid), vehicleid, amount);
	}
	else if(!strcmp(option, "gang", true))
	{
	    new gangid;

        if(VehicleInfo[vehicleid][vOwnerID] > 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This option cannot be adjusted on player owned vehicles.");
		}
		if(sscanf(param, "i", gangid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [gang] [gangid (-1 = none)]");
		}
		if(!(-1 <= gangid < MAX_GANGS) || (gangid >= 0 && !GangInfo[gangid][gSetup]))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid gang.");
		}

		VehicleInfo[vehicleid][vGang] = gangid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET gangid = %i WHERE id = %i", VehicleInfo[vehicleid][vGang], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		if(gangid == -1)
		    SM(playerid, COLOR_AQUA, "** You have reset the gang for %s (ID %i).", GetVehicleName(vehicleid), vehicleid);
		else
			SM(playerid, COLOR_AQUA, "** You have set the gang of %s (ID %i) to %s (%i).", GetVehicleName(vehicleid), vehicleid, GangInfo[gangid][gName], gangid);
	}
 	else if(!strcmp(option, "faction", true))
	{
	    new type;

        if(VehicleInfo[vehicleid][vOwnerID] > 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This option cannot be adjusted on player owned vehicles.");
		}
	    if(sscanf(param, "i", type))
	    {
	        SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [faction] [type]");
	        SCM(playerid, COLOR_GREY2, "List of types: (0) None (1) Police (2) Medic (3) News (4) Government (5) Hitman (6) Federal (7) Mechanic (8) DOC (9) Sheriff");
	        return 1;
		}
		if(!(0 <= type <= 9))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
		}

		VehicleInfo[vehicleid][vFactionType] = type;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET factiontype = %i WHERE id = %i", VehicleInfo[vehicleid][vFactionType], VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

		if(type == FACTION_NONE)
		    SM(playerid, COLOR_AQUA, "** You've reset the faction type for %s (ID %i).", GetVehicleName(vehicleid), vehicleid);
		else
	    	SM(playerid, COLOR_AQUA, "** You've set the faction type of %s (ID %i) to %s (%i).", GetVehicleName(vehicleid), vehicleid, factionTypes[type], type);
	}
	else if(!strcmp(option, "job", true))
	{
        if(VehicleInfo[vehicleid][vOwnerID] > 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This option cannot be adjusted on player owned vehicles.");
		}
	    if(sscanf(param, "i", value))
	    {
	        SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [job] [type]");
			SCM(playerid, COLOR_GREY2, "List of jobs: (-1) None (0) Foodpanda (1) Trucker (2) Fisherman (3) Bodyguard (4) Arms Dealer");
			SCM(playerid, COLOR_GREY2, "List of jobs: (5) Miner (6) Taxi Driver (7) Drug Dealer (8) Lawyer (9) Detective (10) Garbageman (11) Forklifter (12) Lumber Jack (13) Construction Job");
			return 1;
		}
		if(!(-1 <= value <= 13))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid job.");
		}

		VehicleInfo[vehicleid][vJob] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET job = %i WHERE id = %i", VehicleInfo[vehicleid][vJob], VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

		if(value == JOB_NONE)
		    SM(playerid, COLOR_AQUA, "** You've reset the job type for %s (ID %i).", GetVehicleName(vehicleid), vehicleid);
		else
	    	SM(playerid, COLOR_AQUA, "** You've set the job type of %s (ID %i) to %s (%i).", GetVehicleName(vehicleid), vehicleid, GetJobName(value), value);
	}
    else if(!strcmp(option, "respawndelay", true))
	{
	    new id = VehicleInfo[vehicleid][vID];

	    if(VehicleInfo[vehicleid][vOwnerID] > 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This option cannot be adjusted on player owned vehicles.");
		}
		if(sscanf(param, "i", value))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [respawndelay] [seconds (-1 = none)]");
		}

	    VehicleInfo[vehicleid][vRespawnDelay] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET respawndelay = %i WHERE id = %i", VehicleInfo[vehicleid][vRespawnDelay], id);
		mysql_tquery(connectionID, queryBuffer);

	 	SM(playerid, COLOR_AQUA, "** You have set the respawn delay of %s (ID %i) to %i seconds.", GetVehicleName(vehicleid), vehicleid, value);
	 	SCM(playerid, COLOR_WHITE, "Note: The vehicle's ID may have changed in the mean time.");
	 	DespawnVehicle(vehicleid, false);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM vehicles WHERE id = %i", id);
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOAD_VEHICLES, -1);
	}

	return 1;
}

CMD:removevehicle(playerid, params[])
{
	new vehicleid;

    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /removevehicle [vehicleid]");
	}
	if(!IsValidVehicle(vehicleid) || !VehicleInfo[vehicleid][vID])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The vehicle specified is invalid or a static vehicle.");
	}

	if(VehicleInfo[vehicleid][vOwnerID]) {
		SM(playerid, COLOR_WHITE, "** You have deleted %s's %s.", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid));
	} else {
		SM(playerid, COLOR_WHITE, "** You have deleted %s (ID %i).", GetVehicleName(vehicleid), vehicleid);
	}

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM vehicles WHERE id = %i", VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	DespawnVehicle(vehicleid, false);
	return 1;
}

CMD:aclearwanted(playerid, params[])
{
    new targetid;

    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /aclearwanted [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!pData[targetid][pWantedLevel])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player has no active charges to clear.");
	}

	pData[targetid][pWantedLevel] = 0;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM charges WHERE uid = %i", pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = 0 WHERE uid = %i", pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(targetid, COLOR_WHITE, "** Your crimes were cleared by %s.", GetRPName(playerid));
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has cleared %s's crimes and wanted level.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:removedm(playerid, params[])
{
    new targetid;

    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /removedm [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!pData[targetid][pDMWarnings] && !pData[targetid][pWeaponRestricted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't been punished for DM recently.");
	}

	PlayerTextDrawHide(targetid, customHUD[targetid][1]);


	pData[targetid][pDMWarnings]--;
	pData[targetid][pWeaponRestricted] = 0;

	if(pData[targetid][pJailType] == 2)
	{
	    pData[targetid][pJailType] = 0;
		pData[targetid][pJailTime] = 0;

		SetPlayerPos(targetid, 1544.4407, -1675.5522, 13.5584);
		SetPlayerFacingAngle(targetid, 90.0000);
		SetPlayerInterior(targetid, 0);
		SetPlayerVirtualWorld(targetid, 0);
		SetCameraBehindPlayer(targetid);
		SetPlayerWeapons(targetid);
	}

	SM(targetid, COLOR_AQUA, "** Your DM punishment has been reversed by %s.", GetRPName(playerid));
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has reversed %s's DM punishment.", GetRPName(playerid), GetRPName(targetid));
	Log_Write("log_admin", "%s (uid: %i) reversed %s's (uid: %i) DM punishment.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET jailtype = 0, jailtime = 0, dmwarnings = %i, weaponrestricted = 0 WHERE uid = %i", pData[targetid][pDMWarnings], pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	return 1;
}

CMD:destroyveh(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

    if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}

	if(adminVehicle{vehicleid})
	{
	    DestroyVehicleEx(vehicleid);
	    adminVehicle{vehicleid} = false;
	    return SCM(playerid, COLOR_SYNTAX, "Admin vehicle destroyed.");
	}

	for(new i = 1; i < MAX_VEHICLES; i ++)
	{
	    if(adminVehicle{i})
	    {
	        DestroyVehicle(i);
	        adminVehicle{i} = false;
		}
	}

	SAM(COLOR_LIGHTRED, "AdmCmd: %s destroyed all admin spawned vehicles.", GetRPName(playerid));
	return 1;
}

CMD:respawncars(playerid, params[])
{
	new option[10], param[12];

    if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[10]S()[12]", option, param))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /respawncars [job | faction | players ]");
	}
	if(!strcmp(option, "players", true))
	{
		for(new i = 1; i < MAX_VEHICLES; i ++)
		{
	    	if(!IsVehicleOccupied(i) && !adminVehicle{i})
		    {
		        if(VehicleInfo[i][vOwnerID] > 0 && !IsVehicleOccupied(i))
		        {
	        		DespawnVehicle(i);
				}
	 		}
		}

		SAM(COLOR_LIGHTRED, "AdmCmd: %s respawned all unoccupied players vehicles.", GetRPName(playerid));
	}
	else if(!strcmp(option, "job", true))
	{
		for(new i = 1; i < MAX_VEHICLES; i ++)
		{
	    	if(!IsVehicleOccupied(i) && !adminVehicle{i})
		    {
		        if((towtruck[0] <= i <= towtruck[2]) || (pizzaVehicles[0] <= i <= pizzaVehicles[5]) || IsAGarbageCar(i) || (forkliftVehicles[0] <= i <= forkliftVehicles[5]) || (courierVehicles[0] <= i <= courierVehicles[6]) || (taxiVehicles[0] <= i <= taxiVehicles[3]) || (VehicleInfo[i][vJob] != JOB_NONE))
		        {
	        		SetVehicleToRespawn(i);
				}
	 		}
		}

		SAM(COLOR_LIGHTRED, "AdmCmd: %s respawned all unoccupied job vehicles.", GetRPName(playerid));
	}
	else if(!strcmp(option, "faction", true))
	{
	    new type;

	    if(sscanf(param, "i", type))
	    {
	        SCM(playerid, COLOR_SYNTAX, "Usage: /respawncars [faction] [type]");
	        SCM(playerid, COLOR_GREY2, "List of options: (1) Police (2) Medic (3) News (4) Government (5) Hitman (6) Federal (7) Mechanic  (8) DOC (9) Sheriff");
	        return 1;
		}
		if(!(1 <= type <= 9))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid faction type.");
		}

		for(new i = 1; i < MAX_VEHICLES; i ++)
		{
	    	if(!IsVehicleOccupied(i) && !adminVehicle{i} && VehicleInfo[i][vFactionType] == type)
	    	{
				SetVehicleToRespawn(i);
			}
		}

		SAM(COLOR_LIGHTRED, "AdmCmd: %s respawned all unoccupied {F7A763}%s vehicles.", GetRPName(playerid), factionTypes[type]);
	}
	else if(!strcmp(option, "nearby", true))
	{
		for(new i = 1; i < MAX_VEHICLES; i ++)
		{
	    	if(!IsVehicleOccupied(i) && !VehicleInfo[i][vOwnerID] && !adminVehicle{i} && IsVehicleStreamedIn(i, playerid))
		    {
				SetVehicleToRespawn(i);
			}
		}

		SAM(COLOR_LIGHTRED, "AdmCmd: %s respawned all unoccupied vehicles in %s.", GetRPName(playerid), GetPlayerZoneName(playerid));
	}
	else if(!strcmp(option, "all", true))
	{
		for(new i = 1; i < MAX_VEHICLES; i ++)
		{
	    	if(!IsVehicleOccupied(i) && !VehicleInfo[i][vOwnerID] && !adminVehicle{i})
		    {
				SetVehicleToRespawn(i);
			}
		}

		SAM(COLOR_LIGHTRED, "AdmCmd: %s respawned all unoccupied vehicles.", GetRPName(playerid));
	}
	return 1;
}

CMD:myangle(playerid, params[])
{
	if(pData[playerid][pAdmin] < 1)
	{
		SendClientMessage(playerid, COLOR_SYNTAX, "You are not authorized to use this command");
	}
    new myString[128], Float:a;
    GetPlayerFacingAngle(playerid, a);

    format(myString, sizeof(myString), "Your angle is: %0.2f", a);
    SendClientMessage(playerid, 0xFFFFFFFF, myString);

    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);

    format(myString, sizeof(myString), "Your position is: %f, %f, %f", x, y, z);
    SendClientMessage(playerid, 0xFFFFFFFF, myString);

   	new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
	if(strcmp(playername, "Zhao", true) == 0 && pData[playerid][pAdmin] == 6) SendClientMessage(playerid, COLOR_WHITE, "Last updated 26 April 2012, reason: Patched a Trucker exploit & Removed tombstone joke");
    return 1;
}

CMD:announce(playerid, params[])
{
	new text[128];
    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[128]", text))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /announce [text]");
	}
	foreach(new i : Player)
	{
		TextDrawSetString(ANN[2], text);
		for(new f = 0; f < 3; f ++)
		{
			TextDrawShowForPlayer(i, ANN[f]);
		}

		SetTimerEx("ANNHIDE", 10000, false, "i", i);
		PlayerPlaySound(i,1150,0.0,0.0,0.0);
	}
	return 1;
}

CMD:broadcast(playerid, params[])
{
	new style, text[128];

    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[128]", style, text))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /broadcast [style (0-6)] [text]");
	}
	if(!(0 <= style <= 6))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid style.");
	}
	if(style == 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Style 2 only disappears after death and is therefore disabled.");
	}

	GameTextForAll(text, 6000, style);
	return 1;
}

CMD:fixvehall(playerid, params[])
{
    if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
    for(new v = 0; v < MAX_VEHICLES; v++) {
        RepairVehicle(v);
    }

	SCM(playerid, COLOR_SYNTAX, "Vehicle fixed.");
	return 1;
}

CMD:fixveh(playerid, params[])
{
    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!IsPlayerInAnyVehicle(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't fix a vehicle if you're not sitting in one.");
	}

	RepairVehicle(GetPlayerVehicleID(playerid));
	SCM(playerid, COLOR_SYNTAX, "Vehicle fixed.");
	return 1;
}

CMD:wipescreen(playerid, params[])
{
	ClearChat(playerid);
	return 1;
}

CMD:clearchat(playerid)
{
    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	foreach(Player, i)
	{
		ClearAllChat(i);
		SendClientMessage(i, COLOR_GREEN, "-----------"SERVER_NAME"-----------");
		SM(i, COLOR_WHITE, "Cleared chat by Admin %s", GetRPName(playerid));
		SendClientMessage(i, COLOR_GREEN, "----------------------");
	}
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has cleared the chat box.", GetRPName(playerid));
	return 1;
}
CMD:fullhunger(playerid, params[])
{
	new targetid;

    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_LIGHTRED, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_LIGHTRED, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_GREY, "USAGE:"WHITE" /fullhunger [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_LIGHTRED, "The player specified is disconnected.");
	}

	pData[targetid][pHunger] = 100;
	pData[targetid][pHungerTimer] = 0;

	SCM(targetid, COLOR_YELLOW, "Your hunger has been filled by an admin!");
	SAM(COLOR_WHITE, "AdmCmd: %s has filled %s's "ORANGE"hunger"WHITE".", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:fullthirst(playerid, params[])
{
	new targetid;

    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_LIGHTRED, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_LIGHTRED, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_GREY, "USAGE: /fullthirst [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_LIGHTRED, "The player specified is disconnected.");
	}

	pData[targetid][pThirst] = 100;
	pData[targetid][pThirstTimer] = 0;

	SCM(targetid, COLOR_YELLOW, "Your thirst has been filled by an admin!");
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has filled %s's thirst.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}
CMD:healnear(playerid, params[]) { return callcmd::healrange(playerid, params); }
CMD:healrange(playerid, params[])
{
	new Float:radius;

	if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "f", radius))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /healrange [radius]");
	}
	if(!(1.0 <= radius <= 50.0))
	{
	    return SCM(playerid, COLOR_WHITE, "The radius can't be below 1.0 or above 50.0.");
	}

	foreach(new i : Player)
	{
		if(IsPlayerInRangeOfPlayer(i, playerid, radius))
		{
		    if(!pData[i][pAdminDuty])
		    {
			    SetPlayerHealth(i, 100.0);
			    pData[i][pBrokenLeg] = 0;

			    if(GetArmor(i) < 100.0)
			    {
				    SetScriptArmour(i, 100.0);
				}
			}

		    SCM(i, COLOR_WHITE, "** An admin has healed everyone nearby.");
		}
	}

	return 1;
}

CMD:revivenear(playerid, params[]) { return callcmd::reviverange(playerid, params); }
CMD:reviverange(playerid, params[])
{
	new Float:radius;

	if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "f", radius))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /healrange [radius]");
	}
	if(!(1.0 <= radius <= 50.0))
	{
	    return SCM(playerid, COLOR_WHITE, "The radius can't be below 1.0 or above 50.0.");
	}

	foreach(new i : Player)
	{
		if(IsPlayerInRangeOfPlayer(i, playerid, radius))
		{
		    if(!pData[i][pAdminDuty])
		    {

			    TextDrawHideForPlayer(i, Text:DieText);
				TextDrawHideForPlayer(i, Text:InjuredText);
				
				pData[i][pInjured] = 0;
				pData[i][pHunger] = 100;
				pData[i][pHungerTimer] = 0;
				pData[i][pThirst] = 100;
				pData[i][pThirstTimer] = 0;

				pData[i][pBrokenLeg] = 0;

				TogglePlayerControllable(i, 1);
				SetPlayerHealth(i, 100.0);
				ClearAnimations(i, 1);
				UpdateDynamic3DTextLabelText(InjuredLabel[i], COLOR_DOCTOR, "");

				SCM(i, COLOR_YELLOW, "You have been revived by an admin!");
				SAM(COLOR_LIGHTRED, "AdmCmd: %s has revived player within the radius of %.1f", GetRPName(playerid), radius);
			}

		    SCM(i, COLOR_WHITE, "** An admin has revived everyone nearby.");
		}
	}

	return 1;
}

CMD:shots(playerid, params[])
{
	new targetid;

    if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /shots [playerid]");
	}
    if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM shots WHERE playerid = %i ORDER BY id DESC LIMIT 20", targetid);
	mysql_tquery(connectionID, queryBuffer, "OnAdminListShots", "ii", playerid, targetid);
	return 1;
}

CMD:adamages(playerid, params[])
{
	new targetid;

    if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /damages [playerid]");
	}
    if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT weaponid, playerid, timestamp FROM shots WHERE hitid = %i AND hittype = 1 ORDER BY id DESC LIMIT 20", targetid);
	mysql_tquery(connectionID, queryBuffer, "OnAdminListDamages", "ii", playerid, targetid);
	return 1;
}

CMD:kills(playerid, params[])
{
	new targetid;

    if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /kills [playerid]");
	}
    if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM kills WHERE killer_uid = %i OR target_uid = %i ORDER BY date DESC LIMIT 20", pData[targetid][pID], pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer, "OnAdminListKills", "ii", playerid, targetid);
	return 1;
}

CMD:resetadtimer(playerid, params[])
{
    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	gLastAd = 0;
	SCM(playerid, COLOR_SYNTAX, "Advertisement timer reset.");
	return 1;
}

CMD:setname(playerid, params[])
{
	new targetid, name[24];

    if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[24]", targetid, name))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setname [playerid] [name]");
	}
    if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
 	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(pData[targetid][pAdminDuty] && strcmp(pData[targetid][pAdminName], "None", true) != 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't change the name of a player on admin duty. They're using their admin name.");
	}
	if(!IsValidName(name))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The name specified is not supported by the SA-MP client.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = '%e'", name);
	mysql_tquery(connectionID, queryBuffer, "OnAdminChangeName", "iis", playerid, targetid, name);
	return 1;
}

CMD:blowup(playerid, params[]) return callcmd::explode(playerid, params);
CMD:explode(playerid, params[])
{
	new targetid, damage;

    if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "ui", targetid, damage))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /explode [playerid] [damage(amount)]");
	}
    if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(targetid, x, y, z);

	CreateExplosionForPlayer(targetid, x, y, z, 6, 20.0);
    DamagePlayer(targetid, damage, playerid, WEAPON_EXPLOSION, BODY_PART_UNKNOWN, false);
	SM(playerid, COLOR_WHITE, "You exploded %s for their client only.", GetRPName(targetid));
	return 1;
}

CMD:countdown(playerid, params[])
{
	if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	SetTimerEx("CountdownAll", 1000, false, "ii", playerid, 3);
 	SAM(COLOR_LIGHTRED, "AdmCmd: %s has initiated a countdown for all players.", GetRPName(playerid));
 	return 1;
}

//------------------------[PRIORITY COOLDOWN BY STEWART]---------------------------------
CMD:priority(playerid, params[])
{
    new option[14], reason[128];
    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(sscanf(params, "s[14]s[128]", option, reason))
	{
	    SCM(playerid, COLOR_SYNTAX, "** Usage: /priority [type] [reason].");
		SCM(playerid, COLOR_WHITE, "** Available Types: hold, end, reset.");
		return 1;
	}

	switch(FactionInfo[pData[playerid][pFaction]][fType])
	{
	    case FACTION_POLICE, FACTION_SHERIFF, FACTION_GOVERNMENT, FACTION_FEDERAL, FACTION_DOC:
	    {
			foreach(new i : Player)
			{
			    if((!pData[i][pToggleRadio]) && (GetFactionType(i) == FACTION_POLICE || GetFactionType(i) == FACTION_SHERIFF || GetFactionType(i) == FACTION_GOVERNMENT || GetFactionType(i) == FACTION_FEDERAL || GetFactionType(i) == FACTION_DOC))
			    {
					if(!strcmp(option, "hold", true))
					{
						KillTimer(gPriority);
						PriorityInfo[prioType] = 2;
						SetPriority(playerid);
						SM(i, COLOR_ROYALBLUE, "HQ: %s %s has hold the Illegal Activity Cooldown. Reason: %s", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), reason);
						
					}
					if(!strcmp(option, "end", true))
					{
						KillTimer(gPriority);
						PriorityInfo[prioType] = 1;
						SetPriority(playerid);
						SM(i, COLOR_ROYALBLUE, "HQ: %s %s has ended the Illegal Activity Cooldown and is now Availanle. Reason: %s", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), reason);
					}
					if(!strcmp(option, "reset", true))
					{
						PriorityInfo[prioType] = 3;
						SetPriority(playerid);
						SM(i, COLOR_ROYALBLUE, "HQ: %s %s has Reseted the Illegal Activity Cooldown for 15 minutes. Reason: %s", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), reason);
					}
				}
			}
		}
	}
	return 1;
}

CMD:event(playerid, params[])
{
	new option[10], param[128];

    if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "s[10]S()[128]", option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /event [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Position, JoinText, Type, Health, Armor, Weapon, Skin, Rules");
		SCM(playerid, COLOR_WHITE, "Available options: Ready, Start, Lock, Countdown, Balance, End");
		return 1;
	}
	if(!strcmp(option, "position", true))
	{
	    if(EventInfo[eType] == 2)
	    {
	        if(isnull(param))
			{
				return SCM(playerid, COLOR_SYNTAX, "Usage: /event [position] [red/blue]");
			}
	        else if(!strcmp(param, "red", true))
	        {
	            GetPlayerPos(playerid, EventInfo[ePosX][RED_TEAM], EventInfo[ePosY][RED_TEAM], EventInfo[ePosZ][RED_TEAM]);
				GetPlayerFacingAngle(playerid, EventInfo[ePosA][RED_TEAM]);
				EventInfo[eInterior] = GetPlayerInterior(playerid);
				EventInfo[eWorld] = GetPlayerVirtualWorld(playerid);
				SCM(playerid, COLOR_AQUA, "You have set the spawn point for {FF0000}Red{CCFFFF} team.");
	        }
	        else if(!strcmp(param, "blue", true))
	        {
	            GetPlayerPos(playerid, EventInfo[ePosX][BLUE_TEAM], EventInfo[ePosY][BLUE_TEAM], EventInfo[ePosZ][BLUE_TEAM]);
				GetPlayerFacingAngle(playerid, EventInfo[ePosA][BLUE_TEAM]);
				EventInfo[eInterior] = GetPlayerInterior(playerid);
				EventInfo[eWorld] = GetPlayerVirtualWorld(playerid);
				SCM(playerid, COLOR_AQUA, "You have set the spawn point for {0000FF}Blue{CCFFFF} team.");
    		}
		}
		else
		{
			GetPlayerPos(playerid, EventInfo[ePosX][0], EventInfo[ePosY][0], EventInfo[ePosZ][0]);
			GetPlayerFacingAngle(playerid, EventInfo[ePosA][0]);
			EventInfo[eInterior] = GetPlayerInterior(playerid);
			EventInfo[eWorld] = GetPlayerVirtualWorld(playerid);
			SCM(playerid, COLOR_AQUA, "You have set the event spawn point.");
	    }
	}
	else if(!strcmp(option, "type", true))
	{
	    new type;

	    if(sscanf(param, "i", type))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /event [type] [1=DM 2=TDM 3=Race 4=Other]");
	    }
	    if(!(1 <= type <= 4))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
	    }
	    /*if(EventInfo[eReady])
		{
		    return SCM(playerid, COLOR_WHITE, "The type can only be adjusted during event setup.");
		}*/

		EventInfo[eType] = type;

	    switch(type)
	    {
	        case 1:
	        {
	            SCM(playerid, COLOR_AQUA, "You have set the event type to "SVRCLR"Deathmatch{CCFFFF}.");
	        }
	        case 2:
	        {
	            SCM(playerid, COLOR_AQUA, "You have set the event type to "SVRCLR"Team Deathmatch{CCFFFF}.");
	            EventInfo[eNext] = RED_TEAM;

	            if(EventInfo[ePosX][RED_TEAM] == 0.0 && EventInfo[ePosY][RED_TEAM] == 0.0 && EventInfo[ePosZ][RED_TEAM] == 0.0)
	                SCM(playerid, COLOR_LIGHTRED, "** Red Team position not set. '/event position red' to set position.");

                if(EventInfo[ePosX][BLUE_TEAM] == 0.0 && EventInfo[ePosY][BLUE_TEAM] == 0.0 && EventInfo[ePosZ][BLUE_TEAM] == 0.0)
	                SCM(playerid, COLOR_LIGHTRED, "** Blue Team position not set. '/event position blue' to set position.");
	        }
            case 3:
	        {
	            SCM(playerid, COLOR_AQUA, "You have set the event type to "SVRCLR"Race{CCFFFF}. /veh to spawn the vehicles.");
	        }
	        case 4:
	        {
	            SCM(playerid, COLOR_AQUA, "You have set the event type to "SVRCLR"Other{CCFFFF}.");
	        }
		}
	}
	else if(!strcmp(option, "health", true))
	{
	    new Float:amount;

	    if(sscanf(param, "f", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /event [health] [amount]");
		}

	    EventInfo[eHealth] = amount;
	    SM(playerid, COLOR_AQUA, "You set the event health to %.1f.", amount);
	}
	else if(!strcmp(option, "armor", true))
	{
	    new Float:amount;

	    if(sscanf(param, "f", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /event [armor] [amount]");
		}

	    EventInfo[eArmor] = amount;
	    SM(playerid, COLOR_AQUA, "You set the event armor to %.1f.", amount);
	}
	else if(!strcmp(option, "jointext", true))
	{
	    if(isnull(param))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /event [jointext] [text]");
		}

		strcpy(EventInfo[eJoinText], param, 128);
		SM(playerid, COLOR_AQUA, "You set the join text to '%s'.", param);
	}
	else if(!strcmp(option, "weapon", true))
	{
	    new slot, weaponid;

	    if(sscanf(param, "ii", slot, weaponid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /event [weapon] [slot (1-5)] [weaponid]");
	    }
	    if(!(1 <= slot <= 5))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Invalid slot.");
	    }
	    if(!(2 <= weaponid <= 46))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Invalid weapon.");
	    }

	    EventInfo[eWeapons][slot-1] = weaponid;
	    SM(playerid, COLOR_AQUA, "You set the weapon in slot %i to %s.", slot, GetWeaponNameEx(weaponid));
	}
	else if(!strcmp(option, "skin", true))
	{
	    new team[6], skinid;

	    if(EventInfo[eType] == 2)
	    {
	        if(sscanf(param, "s[6]i", team, skinid))
	        {
	            return SCM(playerid, COLOR_SYNTAX, "Usage: /event [skin] [red/blue] [skinid]");
			}
			if(!(0 <= skinid <= 311))
			{
			    return SCM(playerid, COLOR_SYNTAX, "Invalid skin ID.");
			}
			if(!strcmp(team, "red", true))
			{
	            EventInfo[eSkin][RED_TEAM] = skinid;
	            SM(playerid, COLOR_AQUA, "You set the skin for {FF0000}Red{CCFFFF} team to %i.", skinid);
	        }
	        else if(!strcmp(team, "blue", true))
			{
	            EventInfo[eSkin][BLUE_TEAM] = skinid;
	            SM(playerid, COLOR_AQUA, "You set the skin for {0000FF}Blue{CCFFFF} team to %i.", skinid);
	        }
		}
		else
		{
		    if(sscanf(param, "i", skinid))
		    {
		        return SCM(playerid, COLOR_SYNTAX, "Usage: /event [skin] [skinid (0 = reset)]");
			}
			if(!(0 <= skinid <= 311))
			{
			    return SCM(playerid, COLOR_SYNTAX, "Invalid skin ID.");
			}

			EventInfo[eSkin][0] = skinid;
   			SM(playerid, COLOR_AQUA, "You set the event skin to %i.", skinid);
		}
	}
	else if(!strcmp(option, "rules", true))
	{
	    new rule[8], toggle;

	    if(sscanf(param, "s[8]i", rule, toggle) || !(0 <= toggle <= 1))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /event [rules] [cs/qs/healing] [0/1]");
		}
		if(EventInfo[eType] != 1 && EventInfo[eType] != 2)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can only set rules for DM & TDM events.");
		}

		if(!strcmp(rule, "cs", true))
		{
		    EventInfo[eCS] = toggle;

		    if(toggle)
		        SCM(playerid, COLOR_AQUA, "You have "SVRCLR"allowed{CCFFFF} crackshooting in the event.");
	        else
	            SCM(playerid, COLOR_AQUA, "You have "SVRCLR"disallowed{CCFFFF} crackshooting in the event.");
		}
		else if(!strcmp(rule, "qs", true))
		{
		    EventInfo[eQS] = toggle;

		    if(toggle)
		        SCM(playerid, COLOR_AQUA, "You have "SVRCLR"allowed{CCFFFF} quickswapping in the event.");
	        else
	            SCM(playerid, COLOR_AQUA, "You have "SVRCLR"disallowed{CCFFFF} quickswapping in the event.");
		}
		else if(!strcmp(rule, "healing", true))
		{
		    EventInfo[eHeal] = toggle;

		    if(toggle)
		        SCM(playerid, COLOR_AQUA, "You have "SVRCLR"allowed{CCFFFF} healing in the event.");
	        else
	            SCM(playerid, COLOR_AQUA, "You have "SVRCLR"disallowed{CCFFFF} healing in the event.");
		}
	}
	else if(!strcmp(option, "ready", true))
	{
		if(isnull(param) || strcmp(param, "confirm", true) != 0)
		{
		    SCM(playerid, COLOR_SYNTAX, "Usage: /event [ready] [confirm]");
		    SCM(playerid, COLOR_WHITE, "This command will announce to the whole server that an event is ready to join.");
			return 1;
	    }
	    if(EventInfo[eReady])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "The event is already marked as ready.");
	    }

		if(EventInfo[eType] == 2)
		{
		    if(EventInfo[ePosX][RED_TEAM] == 0.0 && EventInfo[ePosY][RED_TEAM] == 0.0 && EventInfo[ePosZ][RED_TEAM] == 0.0)
		    {
		        return SCM(playerid, COLOR_SYNTAX, "There is no spawn point set for red team.");
		    }
		    if(EventInfo[ePosX][BLUE_TEAM] == 0.0 && EventInfo[ePosY][BLUE_TEAM] == 0.0 && EventInfo[ePosZ][BLUE_TEAM] == 0.0)
		    {
		        return SCM(playerid, COLOR_SYNTAX, "There is no spawn point set for blue team.");
		    }
		    if(!EventInfo[eSkin][RED_TEAM])
		    {
		        return SCM(playerid, COLOR_SYNTAX, "There is no skin set for red team.");
		    }
		    if(!EventInfo[eSkin][BLUE_TEAM])
		    {
		        return SCM(playerid, COLOR_SYNTAX, "There is no skin set for blue team.");
		    }
		}
		else
		{
		    if(!EventInfo[eType])
		    {
		        return SCM(playerid, COLOR_SYNTAX, "The event type has not been set.");
		    }
  			if(EventInfo[ePosX][0] == 0.0 && EventInfo[ePosY][0] == 0.0 && EventInfo[ePosZ][0] == 0.0)
		    {
		        return SCM(playerid, COLOR_SYNTAX, "The spawn point has not been set.");
		    }
	    }

	    EventInfo[eReady] = 1;

	    switch(EventInfo[eType])
	    {
	    	case 1: SMA(COLOR_AQUA, "%s has started a Deathmatch event, use /joinevent to join!", GetRPName(playerid));
	    	case 2: SMA(COLOR_AQUA, "%s has started a Team-Deathmatch event, use /joinevent to join!", GetRPName(playerid));
	    	case 3: SMA(COLOR_AQUA, "%s has started a Race event, use /joinevent to join!", GetRPName(playerid));
	    	case 4: SMA(COLOR_AQUA, "%s has started an event, use /joinevent to join!", GetRPName(playerid));
	    }

	    SCM(playerid, COLOR_WHITE, "** Use '/event lock' to lock the event and '/event start' to start.");
	}
	else if(!strcmp(option, "lock", true))
	{
        if(!EventInfo[eReady])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "There is no event ready. Please set one up first.");
	    }

		if(!EventInfo[eLocked])
		{
		    EventInfo[eLocked] = 1;
		    SMA(COLOR_AQUA, "The event has been locked by %s.", GetRPName(playerid));
	    }
	    else
	    {
		    EventInfo[eLocked] = 0;
		    SMA(COLOR_AQUA, "The event was unlocked by %s.", GetRPName(playerid));
	    }
	}
	else if(!strcmp(option, "start", true))
	{
	    if(!EventInfo[eReady])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "There is no event ready. Please set one up first.");
	    }
	    if(EventInfo[eStarted])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "The event has already started.");
	    }

	    foreach(new i : Player)
		{
	        if(pData[i][pJoinedEvent])
	        {
				SCM(i, COLOR_AQUA, "The event has started. Good luck!");
    			for(new x = 0; x < 5; x ++)
    			{
        			if(EventInfo[eWeapons][x])
        			{
            			GiveWeapon(i, EventInfo[eWeapons][x], true); // Fixed
					}   // by
        		}
			}
			else
			{
			    SCM(i, COLOR_AQUA, "The event has started. Better luck next time!");
			}
		}

		EventInfo[eStarted] = 1;
	}
	else if(!strcmp(option, "countdown", true))
	{
	    if(!EventInfo[eReady])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "There is no event ready. Please set one up first.");
	    }

	    SetTimerEx("Countdown", 1000, false, "ii", playerid, 3);
	    SCM(playerid, COLOR_AQUA, "You have initiated a countdown for all players in the event.");
	}
	else if(!strcmp(option, "balance", true))
	{
	    new teamid = RED_TEAM;

	    if(!EventInfo[eReady])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "There is no event ready. Please set one up first.");
	    }
	    if(EventInfo[eType] != 2)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "The event currently active is not a TDM event.");
		}

		foreach(new i : Player)
		{
		    if(pData[i][pJoinedEvent])
		    {
				pData[i][pEventTeam] = teamid;

				SetPlayerSkin(i, EventInfo[eSkin][teamid]);
				SetPlayerPos(i, EventInfo[ePosX][teamid], EventInfo[ePosY][teamid], EventInfo[ePosZ][teamid]);
				SetPlayerFacingAngle(i, EventInfo[ePosA][teamid]);

				teamid = teamid == RED_TEAM ? BLUE_TEAM : RED_TEAM;

				if(pData[i][pEventTeam] == RED_TEAM) {
				    GameTextForPlayer(i, "~w~You are on~n~~r~Red Team", 3000, 4);
				} else if(pData[i][pEventTeam] == BLUE_TEAM) {
				    GameTextForPlayer(i, "~w~You are on~n~~b~Blue Team", 3000, 6);
				}

				SM(i, COLOR_AQUA, "%s has balanced the teams. You are now in %s{CCFFFF} team.", GetRPName(playerid), (pData[i][pEventTeam] == RED_TEAM) ? ("{FF0000}Red") : ("{0000FF}Blue"));
		    }
		}

		SCM(playerid, COLOR_AQUA, "You have balanced the event teams.");
	}
	else if(!strcmp(option, "end", true))
	{
	    if(!EventInfo[eReady])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "There is no event ready. Please set one up first.");
	    }

	    ResetEvent();
	    SMA(COLOR_AQUA, "The event was ended by %s.", GetRPName(playerid));
	}

	return 1;
}

CMD:oban(playerid, params[])
{
	new username[MAX_PLAYERS], reason[128];

	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]s[128]", username, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /oban [username] [reason]");
	}
    if(IsPlayerOnline(username))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is already online and logged in. Use /ban instead.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT adminlevel, ip, uid FROM users WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminOfflineBan", "iss", playerid, username, reason);
	return 1;
}

CMD:joinevent(playerid, params[])
{
	if(pData[playerid][pJailType])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are in jail and therefore cannot participate in an event.");
	}
	if(pData[playerid][pJoinedEvent])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You already joined the event. /quitevent to leave.");
	}
	if(!EventInfo[eReady])
	{
	    return SCM(playerid, COLOR_SYNTAX, "There are no events you can join at the moment.");
	}
	if(EventInfo[eLocked])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The event is locked. Better luck next time!");
	}
    if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pAcceptedHelp] || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't join the event at the moment.");
	}
	if(pData[playerid][pPaintball])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't join the event while you are playing paintball.");
	}
    if((pData[playerid][pWeaponRestricted] > 0) && (1 <= EventInfo[eType] <= 2))
    {
        return SCM(playerid, COLOR_SYNTAX, "You are restricted from weapons and therefore can't join this type of event.");
    }

	SetPlayerInEvent(playerid);
	return 1;
}

CMD:quitevent(playerid, params[])
{
    if(!pData[playerid][pJoinedEvent])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in an event which you can quit.");
	}

 	foreach(new i : Player)
	{
	    if(pData[i][pJoinedEvent])
	    {
	        SM(i, COLOR_LIGHTORANGE, "(( %s has left the event. ))", GetPlayerNameEx(playerid));
		}
	}

	ResetPlayerWeapons(playerid);
	pData[playerid][pJoinedEvent] = 0;
	SetPlayerToSpawn(playerid);
	return 1;
}

CMD:permaban(playerid, params[])
{
	new targetid, reason[128];

 	if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /permaban [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(pData[targetid][pAdmin] > pData[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be banned.");
	}
	if(strcmp(pData[targetid][pUsername], "Stewart_Abner", true) != 0 || strcmp(pData[targetid][pUsername], "Stewart", true) != 0)
	{
 		SAM(COLOR_YELLOW, "Warning: %s has been autokicked for trying to ban a Executive Directors(%s).", GetRPName(playerid), GetRPName(targetid));
 		BanPlayer(playerid, GetPlayerNameEx(playerid), "trying to ban an Executive Director");
 		return 1;
	}

    Log_Write("log_punishments", "%s (uid: %i) permabanned %s (uid: %i), reason: %s", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], reason);

	SMA(COLOR_LIGHTRED, "AdmCmd: %s was permanently banned by %s, reason: %s", GetRPName(targetid), GetRPName(playerid), reason);
	BanPlayer(targetid, GetPlayerNameEx(playerid), reason, true);
	return 1;
}

CMD:baninfo(playerid, params[])
{
	new string[MAX_PLAYER_NAME];

	if(pData[playerid][pAdmin] < 7 && !pData[playerid][pBanAppealer])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]", string))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /baninfo [username/ip]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM bans WHERE username = '%e' OR ip = '%e'", string, string);
	mysql_tquery(connectionID, queryBuffer, "OnAdminCheckBan", "is", playerid, string);
	return 1;
}

CMD:banhistory(playerid, params[])
{
	new name[MAX_PLAYER_NAME];

	if(pData[playerid][pAdmin] < 7 && !pData[playerid][pBanAppealer])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]", name))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /banhistory [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT a.date, a.description FROM log_bans a, users b WHERE a.uid = b.uid AND b.username = '%e' ORDER BY a.date DESC", name);
	mysql_tquery(connectionID, queryBuffer, "OnAdminCheckBanHistory", "is", playerid, name);

	return 1;
}

CMD:startlottoex(playerid, params[])
{
    if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_ERROR, "You are not authorized to use this command.");
	}

    if(LottoStarted)
		return SCM(playerid, COLOR_ERROR, "There is already one lottery drawing in process.");

	new minutes;
	if(sscanf(params, "dD(0)", gDrawNumber))
		return SCM(playerid, -1, "USAGE: /startlottoex [draw number (optional)]");

	if(minutes < 3 || minutes > 60)
		return SCM(playerid, COLOR_ERROR, "Draw minutes shouldn't be below 3 minutes and shouldn't be more than 60 minutes.");

	if(gDrawNumber < 1 || gDrawNumber > 99)
		return SCM(playerid, COLOR_ERROR, "Draw Number must be between 1 to 99.");

	KillTimer(gLottoTimer);
	StartLotto(minutes);

	foreach(new i : Player) SCMf(i, COLOR_YELLOW, "A drawing for the lottery has been announced! The numbers will be drawn in %d minutes.", minutes);
	SAM(COLOR_ERROR, "AdmWarning: Administrator %s has started the lottery in %d minutes.", GetPlayerNameEx(playerid), minutes);
    return 1;
}


CMD:startlotto(playerid, params[])
{
    if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_ERROR, "You are not authorized to use this command.");
	}

    if(LottoStarted)
		return SCM(playerid, COLOR_ERROR, "There is already one lottery drawing in process.");

	KillTimer(gLottoTimer);
	PrepareLotto();

	foreach(new i : Player) SCM(i, COLOR_YELLOW, "A drawing for the lottery has been announced! The numbers will be drawn in 60 minutes.");
	SAM(COLOR_ERROR, "AdmWarning: Administrator %s has started the lottery.", GetPlayerNameEx(playerid));
    return 1;
}


CMD:unban(playerid, params[])
{
	new username[MAX_PLAYER_NAME];

	if(pData[playerid][pAdmin] < 2 && !pData[playerid][pBanAppealer])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]", username))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /unban [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id, permanent FROM bans WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminUnbanUser", "is", playerid, username);
	return 1;
}

CMD:unbanip(playerid, params[])
{
	new string[25];

    if(pData[playerid][pAdmin] < 7 && !pData[playerid][pBanAppealer])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!IsAnIP(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /unbanip [ip address]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM bans WHERE ip = '%s'", params);
	mysql_tquery(connectionID, queryBuffer);

	format(string, sizeof(string), "unbanip %s", params);
	SendRconCommand(string);
	SendRconCommand("reloadbans");

	UnBlockIpAddress(params);
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has unbanned IP '%s'.", GetRPName(playerid), params);
	return 1;
}

CMD:banip(playerid, params[])
{
	new ip[16], reason[128];

    if(pData[playerid][pAdmin] < 4 && !pData[playerid][pBanAppealer])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[16]S(N/A)[128]", ip, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /banip [ip address] [reason (optional)]");
	}
	if(!IsAnIP(ip))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid IP address.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id FROM bans WHERE ip = '%s'", ip);
	mysql_tquery(connectionID, queryBuffer, "OnAdminBanIP", "iss", playerid, ip, reason);
	return 1;
}

CMD:whitelist(playerid, params[])
{
	new username[MAX_PLAYER_NAME];

	if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]", username))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /whitelist [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT locked FROM users WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminLockAccount", "is", playerid, username);
	return 1;
}

CMD:unwhitelist(playerid, params[])
{
	new username[MAX_PLAYER_NAME];

	if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]", username))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /unwhitelist [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = '%e' AND locked = 1", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminUnlockAccount", "is", playerid, username);
	return 1;
}

CMD:sprison(playerid, params[])
{
	new targetid, minutes, reason[128];

	if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "uis[128]", targetid, minutes, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /sprison [playerid] [minutes] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(pData[targetid][pAdmin] > pData[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be prisoned.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet. You can wait until they login or use /oprison.");
	}
	if(minutes < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The amount of minutes cannot be below one. Use /release instead.");
	}

    pData[targetid][pJailType] = 2;
    pData[targetid][pJailTime] = minutes * 60;

    PlayerTextDrawShow(targetid, customHUD[targetid][1]);

    ResetPlayerWeaponsEx(targetid);
    ResetPlayer(targetid);
    SetPlayerInJail(targetid);

    Log_Write("log_punishments", "%s (uid: %i) silently prisoned %s (uid: %i) for %i minutes, reason: %s", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], minutes, reason);
    SMA(COLOR_LIGHTRED, "AdmCmd: %s was prisoned for %i minutes by an Admin, reason: %s", GetRPName(targetid), minutes, reason);
    SM(targetid, COLOR_AQUA, "** You have been admin prisoned for %i minutes by an admin.", minutes);
    return 1;
}

CMD:sethpall(playerid, params[])
{
	new Float:amount;

    if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "f", amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /sethpall [amount]");
	}
	if(amount < 1.0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Health can't be under 1.0.");
	}

	foreach(new i : Player)
	{
	    SetPlayerHealth(i, amount);
	}

	SAM(COLOR_LIGHTRED, "AdmCmd: %s set everyone's health to %.1f.", GetRPName(playerid), amount);
	return 1;
}

CMD:setarmorall(playerid, params[])
{
	new Float:amount;

    if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "f", amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setarmorall [amount]");
	}
	if(amount < 0.0 || amount > 150.0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Armor can't be under 0.0 or above 150.0.");
	}

	foreach(new i : Player)
	{
	    SetScriptArmour(i, amount);
	}

	SAM(COLOR_LIGHTRED, "AdmCmd: %s set everyone's armor to %.1f.", GetRPName(playerid), amount);
	return 1;
}

CMD:vweapons(playerid, params[])
{
	if(pData[playerid][pDonator] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not {D909D9}Platinum VIP.");
	}
    if(!IsPlayerInRangeOfPoint(playerid, 3.0, 2556.2113, 1403.7037, 7699.7641))
	{
        return SendClientMessage(playerid, 0xAFAFAFAA, "You are not in the {D909D9}VIP{Afafaf} Lounge.");
	}
	GivePlayerWeaponEx(playerid, 12);
	GivePlayerWeaponEx(playerid, 24);
	GivePlayerWeaponEx(playerid, 25);
	GivePlayerWeaponEx(playerid, 27);
	GivePlayerWeaponEx(playerid, 31);
	GivePlayerWeaponEx(playerid, 34);
	SendClientMessage(playerid, COLOR_AQUA, "You have received a {00AA00}full weapon set{33CCFF} from your vip weapons.");
 	return 1;
}

CMD:givegun(playerid, params[])
{
	new targetid, weaponid;

    if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "ui", targetid, weaponid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /givegun [playerid] [weaponid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(pData[targetid][pWeaponRestricted] > 0)
    {
        return SCM(playerid, COLOR_SYNTAX, "That player is either weapon restricted or played less than two playing hours.");
    }
	if(!(1 <= weaponid <= 46))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid weapon.");
	}

	GiveWeapon(targetid, weaponid);

	SM(targetid, COLOR_AQUA, "You have received a "SVRCLR"%s{CCFFFF} from %s.", GetWeaponNameEx(weaponid), GetRPName(playerid));
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has given a %s to %s.", GetRPName(playerid), GetWeaponNameEx(weaponid), GetRPName(targetid));

	Log_Write("log_admin", "%s (uid: %i) gives a %s to %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], GetWeaponNameEx(weaponid), GetPlayerNameEx(targetid), pData[targetid][pID]);
	return 1;
}

CMD:settime(playerid, params[])
{
	new hour;

	if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", hour))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /settime [hour]");
	}
	if(!(0 <= hour <= 23))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The hour must range from 0 to 23.");
	}

	gWorldTime = hour;

	SetWorldTime(hour);
	SMA(COLOR_GREY2, "Time of day changed to %i hours.", hour);
	return 1;
}

CMD:setweather(playerid, params[])
{
	new weatherid;

	if(pData[playerid][pAdmin] < 4)
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", weatherid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setweather [weatherid]");
	}

	gWeather = weatherid;
	SetWeather(weatherid);
	SM(playerid, COLOR_GREY2, "Weather changed to %i.", weatherid);
	return 1;
}

CMD:setstat(playerid, params[])
{
	new targetid, option[24], param[32], value;

    if(pData[playerid][pAdmin] < 8)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "us[24]S()[32]", targetid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [option]");
	    SM(playerid, COLOR_WHITE, "Available options: Gender, Age, Cash, Bank, Level, Respect, Hours, Warnings");
	    SM(playerid, COLOR_WHITE, "Available options: SpawnHealth, SpawnArmor, FightStyle, Accent, Phone, Crimes, Arrested");
	    SM(playerid, COLOR_WHITE, "Available options: WantedLevel, Materials, Pot, Crack, Meth, Painkillers, Cigars, PortableRadio");
	    SM(playerid, COLOR_WHITE, "Available options: Channel, Spraycans, Boombox, Phonebook, Paycheck, CarLicense, Seeds, Ephedrine");
		SM(playerid, COLOR_WHITE, "Available options: InventoryUpgrade, AddictUpgrade, TraderUpgrade, AssetUpgrade, MP3Player, Job");
        SM(playerid, COLOR_WHITE, "Available options: MuriaticAcid, BakingSoda, HPAmmo, PoisonAmmo, FMJAmmo, DMWarnings, WeaponRestricted");
        SM(playerid, COLOR_WHITE, "Available options: Components, Watch, GPS, GasCan, FishingSkill, TruckerSkill, GuardSkill, WeaponSkill");
        SM(playerid, COLOR_WHITE, "Available options: LawyerSkill, SmugglerSkill, DetectiveSkill");
        SM(playerid, COLOR_WHITE, "Available options: Mask, Marriage, GunLicense, Hunger, Thirst, Skates");
        SM(playerid, COLOR_WHITE, "Available options: Diamonds");
	    return 1;
	}
	if(!strcmp(option, "gender", true))
	{
	    if(isnull(param))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [gender] [male | female]");
		}
		if(!strcmp(param, "male", true))
		{
		    pData[targetid][pGender] = 1;
		    SM(playerid, COLOR_WHITE, "** You have set %s's gender to Male.", GetRPName(targetid));

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gender = 1 WHERE uid = %i", pData[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else if(!strcmp(param, "female", true))
		{
		    pData[targetid][pGender] = 2;
		    SM(playerid, COLOR_WHITE, "** You have set %s's gender to Female.", GetRPName(targetid));

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gender = 2 WHERE uid = %i", pData[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
	}
	else if(!strcmp(option, "skates", true))
	{
	    if(sscanf(param, "i", value) || !(0<=value<=1))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [skates] [1/0]");
		}
		else
		{
			pData[targetid][pSkates] = value;
	    	SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's skates to %i.", GetRPName(targetid), value);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rollerskates = %i WHERE uid = %i", value, pData[targetid][pID]);
	    	mysql_tquery(connectionID, queryBuffer);
		}
	}
	else if(!strcmp(option, "thirst", true))
	{
	    if(sscanf(param, "i", value))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Usage: /setstat [playerid] [thirst] [value]");
		}
		if(value <= 0)
		{
			value = 2;
			pData[playerid][pThirstTimer] = 1799;
		}
		else if(value > 100)
		{
				value = 100;
		}
		pData[targetid][pThirst] = value;

	    SendMessage(playerid, COLOR_WHITE, "** You have set %s's thirst to %i.", GetRPName(targetid), value);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET thirst = %i, thirsttimer = %i WHERE uid = %i", pData[playerid][pThirst], pData[playerid][pThirstTimer], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

	}
	else if(!strcmp(option, "hunger", true))
	{
	    if(sscanf(param, "i", value))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Usage: /setstat [playerid] [hunger] [value]");
		}
		if(value <= 0)
		{
			value = 2;
			pData[playerid][pHungerTimer] = 1799;
		}
		else if(value > 100)
		{
				value = 100;
		}
		pData[targetid][pHunger] = value;

	    SendMessage(playerid, COLOR_WHITE, "** You have set %s's hunger to %i.", GetRPName(targetid), value);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET hunger = %i, hungertimer = %i WHERE uid = %i", pData[playerid][pHunger], pData[playerid][pHungerTimer], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

	}
	else if(!strcmp(option, "marriage", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [marriedto] [playerid(-1 to reset)]");
		}

		if(IsPlayerConnected(value))
		{
			pData[targetid][pMarriedTo] = pData[value][pID];
			strcpy(pData[targetid][pMarriedName], GetPlayerNameEx(value), MAX_PLAYER_NAME);
	    	SM(playerid, COLOR_WHITE, "You have set %s's marriage to %s.", GetRPName(targetid), GetRPName(value));

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET marriedto = %i WHERE uid = %i", pData[value][pID], pData[targetid][pID]);
	    	mysql_tquery(connectionID, queryBuffer);
		}
		else if(value == -1)
		{
			pData[targetid][pMarriedTo] = -1;
			strcpy(pData[targetid][pMarriedName], "Nobody", MAX_PLAYER_NAME);
	    	SM(playerid, COLOR_WHITE, "You have reset %s's marriage.", GetRPName(targetid));

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET marriedto = -1 WHERE uid = %i",  pData[targetid][pID]);
	    	mysql_tquery(connectionID, queryBuffer);
		}
	}
	else if(!strcmp(option, "age", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [age] [value]");
		}
		if(!(0 <= value <= 128))
		{
		    return SCM(playerid, COLOR_WHITE, "The value specified can't be under 0 or above 128.");
		}

		pData[targetid][pAge] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's age to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET age = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "cash", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [cash] [value]");
		}

		pData[targetid][pCash] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's cash to $%i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cash = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "bank", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [bank] [value]");
		}

		pData[targetid][pBank] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's bank money to $%i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "level", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [level] [value]");
		}

		pData[targetid][pLevel] = value;
	    //SCM(playerid, COLOR_WHITE, "I can see you Imao");

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET level = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(option, "respect", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [respect] [value]");
		}

		pData[targetid][pEXP] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's respect points to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET exp = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(option, "hours", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [hours] [value]");
		}

		pData[targetid][pHours] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's playing hours to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET hours = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "playinghours", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [hours] [value]");
		}

		pData[targetid][pPlayingHours] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's playing hours to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET playinghours = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "warnings", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [warnings] [value]");
		}
		if(!(0 <= value <= 3))
		{
		    return SCM(playerid, COLOR_WHITE, "The value specified can't be under 0 or above 3.");
		}

		pData[targetid][pWarnings] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's warnings to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET warnings = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "spawnhealth", true))
	{
	    new Float:amount;

	    if(sscanf(param, "f", amount))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [spawnhealth] [value]");
		}

		pData[targetid][pSpawnHealth] = amount;
	    SM(playerid, COLOR_WHITE, "** You have set %s's spawn health to %.1f.", GetRPName(targetid), amount);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET spawnhealth = '%f' WHERE uid = %i", amount, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "spawnarmor", true))
	{
	    new Float:amount;

	    if(sscanf(param, "f", amount))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [spawnarmor] [value]");
		}

		pData[targetid][pSpawnArmor] = amount;
	    SM(playerid, COLOR_WHITE, "** You have set %s's spawn armor to %.1f.", GetRPName(targetid), amount);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET spawnarmor = '%f' WHERE uid = %i", amount, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "fightstyle", true))
	{
	    if(isnull(param))
	    {
	        SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [fightstyle] [option]");
	        SCM(playerid, COLOR_WHITE, "Available options: Normal, Boxing, Kungfu, Kneehead, Grabkick, Elbow");
	        return 1;
		}
		if(!strcmp(param, "normal", true))
		{
		    pData[targetid][pFightStyle] = FIGHT_STYLE_NORMAL;

		    SM(playerid, COLOR_WHITE, "** You have set %s's fight style to Normal.", GetRPName(targetid));
		    SetPlayerFightingStyle(targetid, pData[targetid][pFightStyle]);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", pData[targetid][pFightStyle], pData[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else if(!strcmp(param, "boxing", true))
		{
		    pData[targetid][pFightStyle] = FIGHT_STYLE_BOXING;

		    SM(playerid, COLOR_WHITE, "** You have set %s's fight style to Boxing.", GetRPName(targetid));
		    SetPlayerFightingStyle(targetid, pData[targetid][pFightStyle]);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", pData[targetid][pFightStyle], pData[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else if(!strcmp(param, "kungfu", true))
		{
		    pData[targetid][pFightStyle] = FIGHT_STYLE_KUNGFU;

		    SM(playerid, COLOR_WHITE, "** You have set %s's fight style to Kung Fu.", GetRPName(targetid));
		    SetPlayerFightingStyle(targetid, pData[targetid][pFightStyle]);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", pData[targetid][pFightStyle], pData[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else if(!strcmp(param, "kneehead", true))
		{
		    pData[targetid][pFightStyle] = FIGHT_STYLE_KNEEHEAD;

		    SM(playerid, COLOR_WHITE, "** You have set %s's fight style to Kneehead.", GetRPName(targetid));
		    SetPlayerFightingStyle(targetid, pData[targetid][pFightStyle]);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", pData[targetid][pFightStyle], pData[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else if(!strcmp(param, "grabkick", true))
		{
		    pData[targetid][pFightStyle] = FIGHT_STYLE_GRABKICK;

		    SM(playerid, COLOR_WHITE, "** You have set %s's fight style to Grabkick.", GetRPName(targetid));
		    SetPlayerFightingStyle(targetid, pData[targetid][pFightStyle]);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", pData[targetid][pFightStyle], pData[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else if(!strcmp(param, "elbow", true))
		{
		    pData[targetid][pFightStyle] = FIGHT_STYLE_ELBOW;

		    SM(playerid, COLOR_WHITE, "** You have set %s's fight style to Elbow.", GetRPName(targetid));
		    SetPlayerFightingStyle(targetid, pData[targetid][pFightStyle]);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", pData[targetid][pFightStyle], pData[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
	}
    else if(!strcmp(option, "accent", true))
	{
	    new accent[16];

	    if(sscanf(param, "s[16]", accent))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [accent] [text]");
		}

		strcpy(pData[targetid][pAccent], accent, 16);
		SM(playerid, COLOR_WHITE, "** You have set %s's accent to '%s'.", GetRPName(targetid), accent);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET accent = '%e' WHERE uid = %i", accent, pData[targetid][pID]);
  		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "diamonds", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [diamonds] [value]");
		}

		pData[targetid][pDiamonds] = value;
	    SM(playerid, COLOR_WHITE, "You have set %s's diamonds to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}

	else if(!strcmp(option, "phone", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [phone] [number]");
		}
		if(value == 911 || value == 6397 || value == 6324 || value == 8294)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid number.");
		}

		pData[targetid][pPhone] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's phone number to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET phone = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "crimes", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [crimes] [value]");
		}

		pData[targetid][pCrimes] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's commited crimes to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crimes = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "arrested", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [arrested] [value]");
		}

		pData[targetid][pArrested] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's arrested count to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET arrested = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "wantedlevel", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [wantedlevel] [value]");
		}
		if(!(0 <= value <= 6))
		{
		    return SCM(playerid, COLOR_WHITE, "The value specified can't be under 0 or above 6.");
		}

		pData[targetid][pWantedLevel] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's wanted level to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "materials", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [materials] [value]");
		}

		pData[targetid][pMaterials] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's materials to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "pot", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [pot] [value]");
		}

		pData[targetid][pPot] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's pot to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "crack", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [Crack] [value]");
		}

		pData[targetid][pCrack] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's Crack to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "meth", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [meth] [value]");
		}

		pData[targetid][pMeth] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's meth to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "painkillers", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [painkillers] [value]");
		}

		pData[targetid][pPainkillers] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's painkillers to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
 	else if(!strcmp(option, "cigars", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [cigars] [value]");
		}

		pData[targetid][pCigars] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's cigars to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cigars = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "portableradio", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [portableradio] [0/1]");
		}

		pData[targetid][pWalkieTalkie] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's Portable Radio to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET walkietalkie = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "channel", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [channel] [value]");
		}

		pData[targetid][pChannel] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's radio channel to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET channel = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "spraycans", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [spraycans] [value]");
		}

		pData[targetid][pSpraycans] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's spraycans to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET spraycans = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(option, "boombox", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [boombox] [0/1]");
		}

		if((value == 0) && pData[targetid][pBoomboxPlaced])
		{
		    DestroyBoombox(targetid);
		}

		pData[targetid][pBoombox] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's boombox to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET boombox = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "phonebook", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [phonebook] [0/1]");
		}

		pData[targetid][pPhonebook] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's phonebook to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET phonebook = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "paycheck", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [paycheck] [value]");
		}

		pData[targetid][pPaycheck] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's paycheck to $%i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET paycheck = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "carlicense", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [carlicense] [0/1]");
		}

		pData[targetid][pCarLicense] = value;
		pData[targetid][pCarLicenseTime] = gettime() + 1209600;
	    SM(playerid, COLOR_WHITE, "** You have set %s's car license to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET carlicense = %i, carlicensetime = %i WHERE uid = %i", value, pData[targetid][pCarLicenseTime], pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "gunlicense", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [gunlicense] [0/1]");
		}

		pData[targetid][pWeaponLicense] = value;
		pData[targetid][pWeaponLicenseTime] = gettime() + 1209600;
	    SM(playerid, COLOR_WHITE, "** You have set %s's gun license to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gunlicense = %i, gunlicensetime = %i WHERE uid = %i", value, pData[targetid][pWeaponLicenseTime], pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "seeds", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [seeds] [value]");
		}

		pData[targetid][pSeeds] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's seeds to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET seeds = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "ephedrine", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [ephedrine] [value]");
		}

		pData[targetid][pEphedrine] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's ephedrine to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ephedrine = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "job", true))
	{
	    if(sscanf(param, "i", value))
	    {
			SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [job] [value (-1 = none)]");
			SCM(playerid, COLOR_GREY2, "List of jobs: (0) Foodpanda (1) Fisherman (2) Bodyguard (3) Arms Dealer (4) Miner");
			SCM(playerid, COLOR_GREY2, "List of jobs: (5) Taxi Driver (6) Drug Dealer (7) Lawyer (8) Detective (10) Garbageman (11) Forklifter (12) Lumber Jack (13) Consturction Job");
			return 1;
		}
		if(!(-1 <= value <= 13))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid job.");
		}

		pData[targetid][pJob] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's job to %s.", GetRPName(targetid), GetJobName(value));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET job = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "mask", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [mask] [0/1]");
		}
		if(!(-1 <= value <= 1))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid value.");
		}

		pData[targetid][pMask] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's mask to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET mask = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "mp3player", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [mp3player] [0/1]");
		}

		pData[targetid][pMP3Player] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's MP3 player to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET mp3player = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "muriaticacid", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [muriaticacid] [value]");
		}

		pData[targetid][pMuriaticAcid] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's muriatic acid to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET muriaticacid = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "bakingsoda", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [bakingsoda] [value]");
		}

		pData[targetid][pBakingSoda] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's baking soda to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bakingsoda = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "hpammo", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [hpammo] [value]");
		}

		SetWeaponAmmo(targetid, AMMO_HP, value);
	    SM(playerid, COLOR_WHITE, "** You have set %s's hollow point ammunition to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET hpammo = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "poisonammo", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [poisonammo] [value]");
		}

		SetWeaponAmmo(targetid, AMMO_POISON, value);
	    SM(playerid, COLOR_WHITE, "** You have set %s's poison tip ammunition to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET poisonammo = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "fmjammo", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [fmjammo] [value]");
		}

		SetWeaponAmmo(targetid, AMMO_FMJ, value);
	    SM(playerid, COLOR_WHITE, "** You have set %s's full metal jacket ammunition to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fmjammo = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "dmwarnings", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [dmwarnings] [value]");
		}
		if(!(0 <= value <= 4))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The value must range from 0 to 4.");
		}

		pData[targetid][pDMWarnings] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's DM warnings to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET dmwarnings = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "weaponrestricted", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [weaponrestricted] [hours]");
		}

		pData[targetid][pWeaponRestricted] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's weapon restriction to %i hours.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET weaponrestricted = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(option, "watch", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [watch] [0/1]");
		}

		pData[targetid][pWatch] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's watch to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET watch = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "gps", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [gps] [0/1]");
		}

		pData[targetid][pGPS] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's GPS to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gps = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "gascan", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [gascan] [value]");
		}

		pData[targetid][pGasCan] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's gas can to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gascan = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(option, "Truckerskill", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [Truckerskill] [value]");
		}

		pData[targetid][pCourierSkill] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's Trucker skill to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET courierskill = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "fishingskill", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [fishingskill] [value]");
		}

		pData[targetid][pFishingSkill] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's fishing skill to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fishingskill = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "guardskill", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [guardskill] [value]");
		}

		pData[targetid][pGuardSkill] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's bodyguard skill to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET guardskill = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "weaponskill", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [weaponskill] [value]");
		}

		pData[targetid][pWeaponSkill] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's weapon skill to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET weaponskill = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "lawyerskill", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [lawyerskill] [value]");
		}

		pData[targetid][pLawyerSkill] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's lawyer skill to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET lawyerskill = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "detectiveskill", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [detectiveskill] [value]");
		}

		pData[targetid][pDetectiveSkill] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's detective skill to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET detectiveskill = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else
	{
	    return 1;
	}

	Log_Write("log_admin", "%s (uid: %i) set %s's (uid: %i) %s to %s", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], option, param);
	return 1;
}

// DIAMONDS SYSTEM
GivePlayerDiamonds(playerid, amount)
{
	if(pData[playerid][pLogged])
	{
		pData[playerid][pDiamonds] = pData[playerid][pDiamonds] + amount;

		if(!pData[playerid][pAdminDuty])
	    {
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = diamonds + %i WHERE uid = %i", amount, pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
	}
}
CMD:givediamond(playerid, params[])
{
	new targetid, amount;

    if(pData[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]{ffffff} /givediamond [playerid] [amount]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} The player specified is disconnected.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} That player hasn't logged in yet.");
	}
    GivePlayerDiamonds(targetid, amount);
	SAM(COLOR_WHITE, "AdmCmd: %s has given %i Diamond/s to %s.", GetRPName(playerid), amount, GetRPName(targetid));
	return 1;
}
CMD:givediamondall(playerid, params[])
{
	new amount;

    if(pData[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /givediamondall [amount]");
    }
	if(amount < 1 || amount > 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The amount specified must range between 1 and 5.");
	}

	foreach(new i : Player)
	{
	    if(pData[i][pLogged])
		{
			GivePlayerDiamonds(i, amount);
			SM(i, COLOR_AQUA, "Administrator %s has given you %i Diamond(s).", GetRPName(playerid), amount);
		}
	}

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has given %i Diamonds to every player online.", GetRPName(playerid), amount);
	SMA(COLOR_WHITE, "Diamonds?! '/exchange' to buy some unique in-game stuffs.");
	return 1;
}
CMD:exchange(playerid, params[])
{
	if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pJoinedEvent] > 0 || pData[playerid][pPaintball])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command at the moment.");
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command from within the vehicle.");
	}

	new string[1536] = "Perk\tDescription\tCost", title[64];

	strcat(string, "\nBoombox\tPlay music you want.\t"TEAL"35 diamonds{FFFFFF}");
	strcat(string, "\nWeapons\tGives you a full weapon set.\t"TEAL"10 diamonds{FFFFFF}");
	strcat(string, "\nDonator\t1 month Diamond VIP subscription\t{F7A763}100 diamonds{FFFFFF}");
	
	format(title, sizeof(title), "Diamonds Items (You have %i diamonds.)", pData[playerid][pDiamonds]);
	ShowPlayerDialog(playerid, DIALOG_USECOOKIES, DIALOG_STYLE_TABLIST_HEADERS, title, string, "Redeem", "Cancel");

	return 1;
}
CMD:givemoney(playerid, params[])
{
	new targetid, amount, reason[128];

	if(pData[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "uis[128]", targetid, amount, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /givemoney [playerid] [amount] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}

	GivePlayerCash(targetid, amount);
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has given $%i to %s. Reason: %s", GetRPName(playerid), amount, GetRPName(targetid), reason);
	Log_Write("log_admin", "%s (uid: %i) has used /givemoney to give $%i to %s (uid: %i).", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	return 1;
}
GivePlayerDirtyCash(playerid, amount)
{
	if(pData[playerid][pLogged])
	{
		pData[playerid][pDirtyCash] = pData[playerid][pDirtyCash] + amount;

		if(!pData[playerid][pAdminDuty])
	    {
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET dirtycash = dirtycash + %i WHERE uid = %i", amount, pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
	}
}
GivePlayerMaterials(playerid, amount)
{
	if(pData[playerid][pLogged])
	{
		pData[playerid][pMaterials] = pData[playerid][pMaterials] + amount;

		if(!pData[playerid][pAdminDuty])
	    {
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = materials + %i WHERE uid = %i", amount, pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
	}
}
CMD:givedirtycash(playerid, params[])
{
	new targetid, amount;

	if(pData[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /givedirtycash [playerid] [amount]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}

	GivePlayerDirtyCash(targetid, amount);
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has given $%i to %s.", GetRPName(playerid), amount, GetRPName(targetid));
	Log_Write("log_admin", "%s (uid: %i) has used /givedirtycash to give $%i to %s (uid: %i).", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	return 1;
}

CMD:givemoneyall(playerid, params[])
{
	new amount;

	if(pData[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /givemoneyall [amount]");
    }
	if(amount < 1 || amount > 100000)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The amount specified must range between $1 and $100000.");
	}

	foreach(new i : Player)
	{
	    if(pData[i][pLogged])
		{
		    GivePlayerCash(i, amount);
		}
	}

	SMA(COLOR_LIGHTRED, "AdmCmd: %s has given $%i to every player online.", GetRPName(playerid), amount);
	return 1;
}

CMD:setdonator(playerid, params[])
{
	new targetid, rank, days;

	if(pData[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "uii", targetid, rank, days))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /setdonator [playerid] [rank] [days]");
	    SCM(playerid, COLOR_GREY2, "List of ranks: (1)VIP I (2)VIP II (3)VIP III (4)VIP IV");
	    return 1;
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(!(1 <= rank <= 4))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid rank.");
	}
	if(!(1 <= days <= 365))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The amount of days must range from 1 to 365.");
	}

	pData[targetid][pDonator] = rank;
	pData[targetid][pVIPTime] = gettime() + (days * 86400);
	pData[targetid][pVIPCooldown] = 0;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vippackage = %i, viptime = %i, vipcooldown = 0 WHERE uid = %i", pData[targetid][pDonator], pData[targetid][pVIPTime], pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	if(days >= 30)
	{
		SAM(COLOR_LIGHTRED, "AdmCmd: %s has given a {C2A2DA}%s{FF6347} Donator package to %s for %i months.", GetRPName(playerid), GetDonatorRank(rank), GetRPName(targetid), days / 30);
		SM(targetid, COLOR_AQUA, "** %s has given you a {C2A2DA}%s{CCFFFF} Donator package for %i months.", GetRPName(playerid), GetDonatorRank(rank), days / 30);
	}
	else
	{
		SAM(COLOR_LIGHTRED, "AdmCmd: %s has given a {C2A2DA}%s{FF6347} Donator package to %s for %i days.", GetRPName(playerid), GetDonatorRank(rank), GetRPName(targetid), days);
		SM(targetid, COLOR_AQUA, "** %s has given you a {C2A2DA}%s{CCFFFF} Donator package for %i days.", GetRPName(playerid), GetDonatorRank(rank), days);
	}

	Log_Write("log_vip", "%s (uid: %i) has given %s (uid: %i) a %s Donator package for %i days.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], GetDonatorRank(rank), days);
	return 1;
}

CMD:setdonatorall(playerid, params[])
{
	new rank, days;

	if(pData[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "ii", rank, days))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /setdonatorall [rank] [days]");
	    SCM(playerid, COLOR_GREY2, "List of ranks: (1)VIP I (2)VIP II (3)VIP III (4)VIP IV");
	    return 1;
	}
	if(!(1 <= rank <= 4))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid rank.");
	}
	if(!(1 <= days <= 365))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The amount of days must range from 1 to 365.");
	}

    foreach(new i : Player)
	{
	    if(pData[i][pLogged])
		{
		    pData[i][pDonator] = rank;
			pData[i][pVIPTime] = gettime() + (days * 86400);
			pData[i][pVIPCooldown] = 0;
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vippackage = %i, viptime = %i, vipcooldown = 0 WHERE uid = %i", pData[i][pDonator], pData[i][pVIPTime], pData[i][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}

		if(days >= 30)
		{
			SM(i, COLOR_AQUA, "** %s has given you a {C2A2DA}%s{CCFFFF} Donator package for %i months.", GetRPName(playerid), GetDonatorRank(rank), days / 30);
		}
		else
		{
			//SAM(COLOR_LIGHTRED, "AdmCmd: %s has given a {C2A2DA}%s{FF6347} Donator package to all for %i days.", GetRPName(playerid), GetDonatorRank(rank), days);
			SM(i, COLOR_AQUA, "** %s has given you a {C2A2DA}%s{CCFFFF} Donator package for %i days.", GetRPName(playerid), GetDonatorRank(rank), days);
		}
	}
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has given a {C2A2DA}%s{FF6347} Donator package to all online players.", GetRPName(playerid));
	Log_Write("log_vip", "%s (uid: %i) has given all Online Players a %s Donator package for %i days.", GetPlayerNameEx(playerid), pData[playerid][pID],  GetDonatorRank(rank), days);
	return 1;
}

CMD:removedonator(playerid, params[])
{
	new targetid;

	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /removedonator [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(!pData[targetid][pDonator])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player doesn't have a donator subscription which you can remove.");
	}

	Log_Write("log_vip", "%s (uid: %i) has removed %s's (uid: %i) %s donator package.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], GetDonatorRank(pData[targetid][pDonator]));

	pData[targetid][pDonator] = 0;
	pData[targetid][pVIPTime] = 0;
	pData[targetid][pVIPColor] = 0;
    pData[targetid][pSecondJob] = JOB_NONE;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vippackage = 0, viptime = 0 WHERE uid = %i", pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has revoked %s's donator subscription.", GetRPName(playerid), GetRPName(targetid));
	SM(targetid, COLOR_AQUA, "** %s has revoked your donator subscription.", GetRPName(playerid));
	return 1;
}

CMD:rangeban(playerid, params[])
{
	new targetid, reason[128];

 	if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /rangeban [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(pData[targetid][pAdmin] > pData[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be banned.");
	}
	if(pData[targetid][pAdmin] == 7)
	{
 		SAM(COLOR_YELLOW, "Warning: %s has been autokicked for trying to ban a Executive Directors(%s).", GetRPName(playerid), GetRPName(targetid));
 		KickPlayer(playerid);
 		return 1;
	}

    Log_Write("log_punishments", "%s (uid: %i) rangebanned %s (uid: %i), reason: %s", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], reason);
	SMA(COLOR_LIGHTRED, "AdmCmd: %s was rangebanned by %s, reason: %s", GetRPName(targetid), GetRPName(playerid), reason);
	Rangeban(targetid, GetPlayerNameEx(playerid), reason);
	return 1;
}

CMD:forcepayday(playerid, params[])
{
    if(pData[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
    if(sscanf(params, "s", "confirm"))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /forcepayday [confirm] (gives everyone a paycheck)");
	}
	foreach(new i : Player)
	{
	    SendPaycheck(i);
	}

	return 1;
}

CMD:createaccount(playerid, params[])
{
	new username[MAX_PLAYER_NAME], password[10];

    if(!pData[playerid][pDeveloper])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]s[10]", username,password))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /createaccount [username] [password]");
	}

	if(cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "That player exist.");
	}
	else
	{
		gTotalRegistered++;
		SaveServerInfo();

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO users WHERE username = '%s', password = '%s'", username, password);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has created %s's account.", GetPlayerNameEx(playerid), username);
	}
	return 1;
}

CMD:deleteaccount(playerid, params[])
{
	new username[MAX_PLAYER_NAME];

    if(pData[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]", username))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /deleteaccount [username]");
	}
	if(IsPlayerOnline(username))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is already online and logged in. You can't delete their account.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT adminlevel FROM users WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminDeleteAccount", "is", playerid, username);
	return 1;
}

CMD:doublexp(playerid, params[])
{
    if(pData[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	if(!gDoubleXP)
	{
		gDoubleXP = true;
	    SMA(COLOR_AQUA, "** Admin enabled double experience. You will now gain double the respect points and job skill points.");
	}
	else
	{
		gDoubleXP = false;
	    SMA(COLOR_AQUA, "** Admin disabled double experience.");
	}

	return 1;
}

CMD:createspeed(playerid, params[])
{
	static
	    Float:limit,
	    Float:range;
    if(pData[playerid][pAdmin] < 6)
	    return SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command.");

	if (sscanf(params, "ff", limit, range))
		return SendClientMessage(playerid, COLOR_GREY, "/createspeed [speed limit] [range] (default range: 30)");

	if (limit < 5.0 || limit > 200.0)
	    return SendClientMessage(playerid, COLOR_GREY, "The speed limit can't be below 5 or above 200.");

	if (range < 5.0 || range > 50.0)
	    return SendClientMessage(playerid, COLOR_GREY, "The range can't be below 5 or above 50.");

	if (Speed_Nearest(playerid) != -1)
	    return SendClientMessage(playerid, COLOR_GREY, "You can't do this in range another speed camera.");

	new id = Speed_Create(playerid, limit, range);

	if (id == -1)
	    return SendClientMessage(playerid, COLOR_GREY, "The server has reached the limit for speed cameras.");

	SM(playerid, COLOR_GREY, "You have created speed camera ID: %d.", id);
	return 1;
}

CMD:gotospeed(playerid, params[])
{
	new houseid;

    if(pData[playerid][pAdmin] < 6)
	    return SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command.");

	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gotogate [gateid]");
	}
	if(!(0 <= houseid < MAX_SPEED_CAMERAS) || !SpeedData[houseid][speedExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid gate.");
	}
	GameTextForPlayer(playerid, "~w~Teleported", 5000, 1);
	SetPlayerPos(playerid, SpeedData[houseid][speedPos][0] - (2.5 * floatsin(-SpeedData[houseid][speedPos][3], degrees)), SpeedData[houseid][speedPos][1] - (2.5 * floatcos(-SpeedData[houseid][speedPos][3], degrees)), SpeedData[houseid][speedPos][2]);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:destroyspeed(playerid, params[])
{
	static
	    id = 0;

    if(pData[playerid][pAdmin] < 6)
	    return SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command.");

	if (sscanf(params, "d", id))
	    return SendClientMessage(playerid, COLOR_GREY, "/destroyspeed [speed id]");

	if ((id < 0 || id >= MAX_SPEED_CAMERAS) || !SpeedData[id][speedExists])
	    return SendClientMessage(playerid, COLOR_GREY, "You have specified an invalid speed camera ID.");

	Speed_Delete(id);
	DestroyDynamicMapIcon(SpeedData[id][sMapIcon]);
	SM(playerid, COLOR_GREY, "You have successfully destroyed speed camera ID: %d.", id);
	return 1;
}

CMD:createhouse(playerid, params[])
{
	new type, Float:x, Float:y, Float:z, Float:a, description[64];
    if(pData[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", type))
	{
	    SM(playerid, COLOR_SYNTAX, "Usage: /createhouse [type (1-%i)]", sizeof(houseInteriors));
		SCM(playerid, COLOR_SYNTAX, "Types: 1-6 Apartment | 7-9 Low Class | 10-12 Med Class | 13-16 Upper | 17-19 Mansion | 20 Custom House");
		return 1;
	}
	if(!(1 <= type <= sizeof(houseInteriors)))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
	}
	if(GetNearbyHouse(playerid) >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is a house in range. Find somewhere else to create this one.");
	}

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	type--;

	for(new i = 0; i < MAX_HOUSES; i ++)
	{
	    if(!HouseInfo[i][hExists])
	    {
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO houses (type, house_desc, price, pos_x, pos_y, pos_z, pos_a, int_x, int_y, int_z, int_a, interior, outsideint, outsidevw) VALUES(%i, '%e', %i, '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', %i, %i, %i)", type, description, houseInteriors[type][intPrice], x, y, z, a - 180.0,
				houseInteriors[type][intX], houseInteriors[type][intY], houseInteriors[type][intZ], houseInteriors[type][intA], houseInteriors[type][intID], GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
			mysql_tquery(connectionID, queryBuffer, "OnAdminCreateHouse", "iiiffffs", playerid, i, type, x, y, z, a, description);
			return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "House slots are currently full. Ask managements to increase the internal limit.");
	return 1;
}

CMD:sethname(playerid, params[])
{
	new string[128], houseid = GetNearbyHouseEx(playerid), ownername[128];

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
		return SendClientMessageEx(playerid, COLOR_YELLOW, "You are not in your house that you own.");

	if(sscanf(params, "s[128]", ownername))
		return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /sethname [name]");

	format(HouseInfo[houseid][hDescription], 128, "%s", ownername);
	format(string, sizeof(string), "You have set your house name to %s", ownername);
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	ReloadHouse(houseid);
	
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET house_desc = '%e' WHERE id = %i", HouseInfo[houseid][hDescription], HouseInfo[houseid][hID]);
    mysql_tquery(connectionID, queryBuffer);
    
	format(string, sizeof(string), "%s has edited HouseID %d's Name to %s.", GetPlayerNameEx(playerid), houseid, ownername);
	//Log("edithouse", string);
	return 1;
}

CMD:setbname(playerid, params[])
{
	new string[128], businessid = GetNearbyBusinessEx(playerid), ownername[128];

    if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're not near any business that you own.");
	}
	if(sscanf(params, "s[128]", ownername))
		return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /setbname [name]");

	format(BusinessInfo[businessid][bDescription], 128, "%s", ownername);
	format(string, sizeof(string), "You have set your house name to %s", ownername);
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	ReloadBusiness(businessid);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET biz_desc = '%e' WHERE id = %i", BusinessInfo[businessid][bDescription], BusinessInfo[businessid][bID]);
    mysql_tquery(connectionID, queryBuffer);

	format(string, sizeof(string), "%s has edited BusinessID %d's Name to %s.", GetPlayerNameEx(playerid), businessid, ownername);
	//Log("edithouse", string);
	return 1;
}

CMD:hname(playerid, params[])
{
	if(pData[playerid][pAdmin] < 5)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command!");
		return 1;
	}

	new string[128], houseid, ownername[128];
	if(sscanf(params, "ds[128]", houseid, ownername)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /hname [houseid] [name]");

	format(HouseInfo[houseid][hDescription], 128, "%s", ownername);
	format(string, sizeof(string), "You have set the house name to %s", ownername);
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	ReloadHouse(houseid);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET house_desc = '%e' WHERE id = %i", HouseInfo[houseid][hDescription], HouseInfo[houseid][hID]);
    mysql_tquery(connectionID, queryBuffer);
    
	format(string, sizeof(string), "%s has edited HouseID %d's Name to %s.", GetPlayerNameEx(playerid), houseid, ownername);
	//Log("edithouse", string);
	return 1;
}

CMD:bname(playerid, params[])
{
	if(pData[playerid][pAdmin] < 5)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command!");
		return 1;
	}

	new string[128], businessid, desc[24];
	if(sscanf(params, "ds[128]", businessid, desc)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /bname [business id] [name]");

	format(BusinessInfo[businessid][bDescription], 128, "%s", desc);
	format(string, sizeof(string), "You have set the business description to %s", desc);
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	ReloadBusiness(businessid);
	
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET biz_desc = '%e' WHERE id = %i", BusinessInfo[businessid][bDescription], BusinessInfo[businessid][bID]);
    mysql_tquery(connectionID, queryBuffer);
    
	format(string, sizeof(string), "%s has edited Business ID %d's description to %s.", GetPlayerNameEx(playerid), businessid, desc);
	//Log("editbiz", string);

	return 1;
}

CMD:edithouse(playerid, params[])
{
	new houseid, option[10], param[32];

	//if(pData[playerid][pAdmin] < 7)
	if(!pData[playerid][pDynamicAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[10]S()[32]", houseid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /edithouse [houseid] [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Outside, Inside, World, Type, Owner, Price, RentPrice, Level, Locked");
	    return 1;
	}
	if(!(0 <= houseid < MAX_HOUSES) || !HouseInfo[houseid][hExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid house.");
	}

	if(!strcmp(option, "outside", true))
	{
	    GetPlayerPos(playerid, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]);
	    GetPlayerFacingAngle(playerid, HouseInfo[houseid][hPosA]);

	    HouseInfo[houseid][hOutsideInt] = GetPlayerInterior(playerid);
	    HouseInfo[houseid][hOutsideVW] = GetPlayerVirtualWorld(playerid);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', outsideint = %i, outsidevw = %i WHERE id = %i", HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], HouseInfo[houseid][hPosA], HouseInfo[houseid][hOutsideInt], HouseInfo[houseid][hOutsideVW], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ReloadHouse(houseid);
	    SM(playerid, COLOR_AQUA, "** You've changed the exterior of house %i.", houseid);
	}
	else if(!strcmp(option, "inside", true))
	{
	    new type = -1;

	    for(new i = 0; i < sizeof(houseInteriors); i ++)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 100.0, houseInteriors[i][intX], houseInteriors[i][intY], houseInteriors[i][intZ]))
	        {
	            type = i;
			}
	    }

	    GetPlayerPos(playerid, HouseInfo[houseid][hIntX], HouseInfo[houseid][hIntY], HouseInfo[houseid][hIntZ]);
	    GetPlayerFacingAngle(playerid, HouseInfo[houseid][hIntA]);

	    HouseInfo[houseid][hInterior] = GetPlayerInterior(playerid);
		HouseInfo[houseid][hType] = type;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET type = %i, int_x = '%f', int_y = '%f', int_z = '%f', int_a = '%f', interior = %i WHERE id = %i", type, HouseInfo[houseid][hIntX], HouseInfo[houseid][hIntY], HouseInfo[houseid][hIntZ], HouseInfo[houseid][hIntA], HouseInfo[houseid][hInterior], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SM(playerid, COLOR_AQUA, "** You've changed the interior of house %i.", houseid);
	}
	else if(!strcmp(option, "world", true))
	{
	    new worldid;

	    if(sscanf(param, "i", worldid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /edithouse [houseid] [world] [vw]");
		}

		HouseInfo[houseid][hWorld] = worldid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET world = %i WHERE id = %i", HouseInfo[houseid][hWorld], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SM(playerid, COLOR_AQUA, "** You've changed the virtual world of house %i to %i.", houseid, worldid);
	}
	else if(!strcmp(option, "type", true))
	{
	    new type;

	    if(sscanf(param, "i", type))
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /edithouse [houseid] [type] [value (1-%i)]", sizeof(houseInteriors));
		}
		if(!(1 <= type <= sizeof(houseInteriors)))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
		}

		type--;

		HouseInfo[houseid][hType] = type;
		HouseInfo[houseid][hInterior] = houseInteriors[type][intID];
		HouseInfo[houseid][hIntX] = houseInteriors[type][intX];
		HouseInfo[houseid][hIntY] = houseInteriors[type][intY];
		HouseInfo[houseid][hIntZ] = houseInteriors[type][intZ];
		HouseInfo[houseid][hIntA] = houseInteriors[type][intA];

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET type = %i, int_x = '%f', int_y = '%f', int_z = '%f', int_a = '%f', interior = %i, world = %i WHERE id = %i", type, HouseInfo[houseid][hIntX], HouseInfo[houseid][hIntY], HouseInfo[houseid][hIntZ], HouseInfo[houseid][hIntA], HouseInfo[houseid][hInterior], HouseInfo[houseid][hWorld], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SM(playerid, COLOR_AQUA, "** You've changed the type of house %i to %i.", houseid, type + 1);
	}
	else if(!strcmp(option, "owner", true))
	{
	    new targetid;

	    if(sscanf(param, "u", targetid))
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /edithouse [houseid] [owner] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
		}
		if(!pData[targetid][pLogged])
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
		}

        SetHouseOwner(houseid, targetid);
	    SM(playerid, COLOR_AQUA, "** You've changed the owner of house %i to %s.", houseid, GetRPName(targetid));
	}
	else if(!strcmp(option, "price", true))
	{
	    new price;

	    if(sscanf(param, "i", price))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /edithouse [houseid] [price] [value]");
		}
		if(price < 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $0.");
		}

		HouseInfo[houseid][hPrice] = price;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET price = %i WHERE id = %i", HouseInfo[houseid][hPrice], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SM(playerid, COLOR_AQUA, "** You've changed the price of house %i to $%i.", houseid, price);
	}
	else if(!strcmp(option, "rentprice", true))
	{
	    new price;

	    if(sscanf(param, "i", price))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /edithouse [houseid] [rentprice] [value]");
		}
		if(price < 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $0.");
		}

		HouseInfo[houseid][hRentPrice] = price;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET rentprice = %i WHERE id = %i", HouseInfo[houseid][hRentPrice], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SM(playerid, COLOR_AQUA, "** You've changed the rent price of house %i to $%i.", houseid, price);
	}
	else if(!strcmp(option, "level", true))
	{
	    new level;

	    if(sscanf(param, "i", level))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /edithouse [houseid] [level] [value (0-5)]");
		}
		if(!(0 <= level <= 5))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid level. Valid levels range from 0 to 5.");
		}

		HouseInfo[houseid][hLevel] = level;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET level = %i WHERE id = %i", HouseInfo[houseid][hLevel], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SM(playerid, COLOR_AQUA, "** You've changed the level of house %i to %i.", houseid, level);
	}
    else if(!strcmp(option, "locked", true))
	{
	    new locked;

	    if(sscanf(param, "i", locked) || !(0 <= locked <= 1))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /edithouse [houseid] [locked] [0/1]");
		}

		HouseInfo[houseid][hLocked] = locked;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET locked = %i WHERE id = %i", HouseInfo[houseid][hLocked], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SM(playerid, COLOR_AQUA, "** You've changed the lock state of house %i to %i.", houseid, locked);
	}

	return 1;
}

CMD:removehouse(playerid, params[])
{
	new houseid;

	if(pData[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /removehouse [houseid]");
	}
	if(!(0 <= houseid < MAX_HOUSES) || !HouseInfo[houseid][hExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid house.");
	}

	DestroyDynamic3DTextLabel(HouseInfo[houseid][hText]);
	DestroyDynamicPickup(HouseInfo[houseid][hPickup]);
	DestroyDynamicMapIcon(HouseInfo[houseid][hMapIcon]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM houses WHERE id = %i", HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer);

	HouseInfo[houseid][hExists] = 0;
	HouseInfo[houseid][hID] = 0;
	HouseInfo[houseid][hOwnerID] = 0;

	SM(playerid, COLOR_AQUA, "** You have removed house %i.", houseid);
	return 1;
}

CMD:gotohouse(playerid, params[])
{
	new houseid;

	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gotohouse [houseid]");
	}
	if(!(0 <= houseid < MAX_HOUSES) || !HouseInfo[houseid][hExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid house.");
	}

	GameTextForPlayer(playerid, "~w~Teleported", 5000, 1);

	SetPlayerPos(playerid, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]);
	SetPlayerFacingAngle(playerid, HouseInfo[houseid][hPosA]);
	SetPlayerInterior(playerid, HouseInfo[houseid][hOutsideInt]);
	SetPlayerVirtualWorld(playerid, HouseInfo[houseid][hOutsideVW]);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:previewint(playerid, params[])
{
	new type, string[32];

	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", type))
	{
	    return SM(playerid, COLOR_SYNTAX, "Usage: /previewint [1-%i]", sizeof(houseInteriors));
	}
	if(!(1 <= type <= sizeof(houseInteriors)))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
	}

	type--;

	format(string, sizeof(string), "~w~%s", houseInteriors[type][intClass]);
	GameTextForPlayer(playerid, string, 5000, 1);

	SetPlayerPos(playerid, houseInteriors[type][intX], houseInteriors[type][intY], houseInteriors[type][intZ]);
	SetPlayerFacingAngle(playerid, houseInteriors[type][intA]);
	SetPlayerInterior(playerid, houseInteriors[type][intID]);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:nearest(playerid, params[])
{
	new id;

	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	SCM(playerid, SERVER_COLOR, "Nearest Items:");

	if((id = GetNearbyHouse(playerid)) >= 0)
	{
	    SM(playerid, COLOR_GREY2, "You are in range of house ID %i.", id);
	}
	if((id = GetNearbyGarage(playerid)) >= 0)
	{
	    SM(playerid, COLOR_GREY2, "You are in range of garage ID %i.", id);
	}
	if((id = GetNearbyBusiness(playerid)) >= 0)
	{
	    SM(playerid, COLOR_GREY2, "You are in range of business ID %i.", id);
	}
	if((id = GetNearbyLand(playerid)) >= 0)
	{
	    SM(playerid, COLOR_GREY2, "You are in range of land ID %i.", id);
	}
	if((id = GetNearbyEntrance(playerid)) >= 0)
	{
	    SM(playerid, COLOR_GREY2, "You are in range of entrance ID %i.", id);
	}
	if((id = GetNearbyTurf(playerid)) >= 0)
	{
	    SM(playerid, COLOR_GREY2, "You are in range of turf ID %i.", id);
	}
	if((id = Gate_Nearest(playerid)) >= 0)
	{
	    SM(playerid, COLOR_GREY2, "You are in range of gate ID %i.", id);
	}
	if((id = Speed_Nearest(playerid)) >= 0)
	{
		SCMf(playerid, COLOR_GREY2, "You are in range of speedcam ID %i", id);
	}
	if((id = GetNearbyAtm(playerid)) >= 0)
	{
		SCMf(playerid, COLOR_GREY2, "You are in range of atm ID %i", id);
	}
	if((id = GetNearbySafezone(playerid)) >= 0)
	{
		SCMf(playerid, COLOR_GREY2, "You are in range of safezone ID %i", id);
	}
	if((id = GetNearbyVen(playerid)) >= 0)
	{
		SCMf(playerid, COLOR_GREY2, "You are in range of vendors ID %i", id);
	}
	if((id = GetNearbyMdc(playerid)) >= 0)
	{
		SCMf(playerid, COLOR_GREY2, "You are in range of mdc ID %i", id);
	}
	if((id = GetNearbySur(playerid)) >= 0)
	{
		SCMf(playerid, COLOR_GREY2, "You are in range of surgery ID %i", id);
	}
	if((id = GetNearbyBar(playerid)) >= 0)
	{
		SCMf(playerid, COLOR_GREY2, "You are in range of bar ID %i", id);
	}
	if((id = GetNearbyPG(playerid)) >= 0)
	{
		SCMf(playerid, COLOR_GREY2, "You are in range of public garage ID %i", id);
	}
	if((id = GetNearbyLocker(playerid)) >= 0)
	{
		SCMf(playerid, COLOR_GREY2, "You are in range of Locker ID %i", id);
	}
	return 1;
}

CMD:dynamichelp(playerid, params[])
{
    if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	SCM(playerid, COLOR_TEAL, "[Houses]"WHITE" /createhouse, /hname, /edithouse, /removehouse, /gotohouse, /asellhouse.");
	SCM(playerid, SERVER_COLOR, "[Garages]"WHITE" /creategarage, /editgarage, /removegarage, /gotogarage, /asellgarage.");
    SCM(playerid, COLOR_TEAL, "[Business]"WHITE" /createbiz, /bname, /editbiz, /removebiz, /gotobiz, /asellbiz.");
	SCM(playerid, SERVER_COLOR, "[Entrances]"WHITE" /createentrance, /editentrance, /removeentrance, /gotoentrance.");
	SCM(playerid, COLOR_TEAL, "[Points]"WHITE" /createpoint, /editpoint, /removepoint, /gotopoint.");
    SCM(playerid, SERVER_COLOR, "[Turfs]"WHITE" /createturf, /turfcancel, /editturf, /removeturf, /gototurf.");
	SCM(playerid, COLOR_TEAL, "[Fires]"WHITE" /randomfire, /killfire, /spawnfire.");
	SCM(playerid, SERVER_COLOR, "[Gates]"WHITE" /creategate, /removegate, /editgate, /gotogate.");
	SCM(playerid, COLOR_TEAL, "[SpeedCameras]"WHITE" /createspeed, /destroyspeed, /gotospeed.");
	SCM(playerid, SERVER_COLOR, "[Lockers]"WHITE" /createlocker, /editlocker, /removelocker, /gotolocker.");
	SCM(playerid, COLOR_TEAL, "[Atm]"WHITE" /createatm, /removeatm");
	SCM(playerid, COLOR_TEAL, "[Safezone]"WHITE" /createsz, /removesz");
	SCM(playerid, SERVER_COLOR, "[Vendor]"WHITE" /createvendor, /removevendor.");
	SCM(playerid, SERVER_COLOR, "[Mdc]"WHITE" /createmdc, /removemdc.");
	SCM(playerid, SERVER_COLOR, "[Surgery]"WHITE" /createsurgey, /removesurgery.");
	SCM(playerid, SERVER_COLOR, "[Public Garage]"WHITE" /createpg, /removepg.");
	SCM(playerid, COLOR_TEAL, "[Bar]"WHITE" /createbar, /removebar.");
	SCM(playerid, SERVER_COLOR, "Labels:"WHITE" /gotolabel, /editlabel, /removelabel.");
	SCM(playerid, SERVER_COLOR, "Impound:"WHITE" /gotoim, /imedit, /imdelete.");
	return 1;
}

CMD:asellhouse(playerid, params[])
{
	new houseid;

	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /asellhouse [houseid]");
	}
	if(!(0 <= houseid < MAX_HOUSES) || !HouseInfo[houseid][hExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid house.");
	}

	SetHouseOwner(houseid, INVALID_PLAYER_ID);
	SM(playerid, COLOR_AQUA, "** You have admin sold house %i.", houseid);
	return 1;
}

CMD:asellgarage(playerid, params[])
{
	new garageid;

	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", garageid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /asellgarage [garageid]");
	}
	if(!(0 <= garageid < MAX_GARAGES) || !GarageInfo[garageid][gExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid garage.");
	}

	SetGarageOwner(garageid, INVALID_PLAYER_ID);
	SM(playerid, COLOR_AQUA, "** You have admin sold garage %i.", garageid);
	return 1;
}

CMD:asellbiz(playerid, params[])
{
	new businessid;

	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", businessid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /asellbiz [businessid]");
	}
	if(!(0 <= businessid < MAX_BUSINESSES) || !BusinessInfo[businessid][bExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid business.");
	}

	SetBusinessOwner(businessid, INVALID_PLAYER_ID);
	SM(playerid, COLOR_AQUA, "** You have admin sold business %i.", businessid);
	return 1;
}
CMD:paintball(playerid, params[]) { return callcmd::enter(playerid, params); }
CMD:joinpaintball(playerid, params[]) { return callcmd::enter(playerid, params); }
CMD:enter(playerid, params[])
{
	if(pData[playerid][pInjured] > 0 || pData[playerid][pTazedTime] > 0 || pData[playerid][pCuffed] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}

	if(IsPlayerInRangeOfPoint(playerid, 3.0, 2114.6918, -1742.9276, 13.5547))
	{
		if(pData[playerid][pAcceptedHelp])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can not enter the paintball arena while on helper duty!");
	    }
	    if(pData[playerid][pWeaponRestricted] > 0)
    	{
        	return SCM(playerid, COLOR_SYNTAX, "You are restricted from weapons and therefore can't join paintball.");
    	}
		new string[128];
	    string =  "Arena\tCurrent Players\tMinutes Left\n";
	    format(string, sizeof(string), "%sWarehouse Arena\t%i\t%i\n", string, GetPBPlayers1(), PaintballTimer1/60);
	    format(string, sizeof(string), "%sBattlefield Arena\t%i\t%i\n", string, GetPBPlayers2(), PaintballTimer2/60);
	    ShowPlayerDialog(playerid, DIALOG_PAINTBALL, DIALOG_STYLE_TABLIST_HEADERS, "Paintball | Choose Arena", string, "Enter", "Cancel");
	}
	else
	{
		EnterCheck(playerid);
	}

	return 1;
}
CMD:pbscore(playerid) {
	if(!pData[playerid][pPaintball] && !pData[playerid][pPaintball2]) return SCM(playerid, COLOR_SYNTAX, "You are not in the paintball arena.");
	if(pData[playerid][pPaintball]) SM(playerid, -1, "Score: %i | Minutes left: %i", pbscore1[playerid], PaintballTimer1/60);
	if(pData[playerid][pPaintball2]) SM(playerid, -1, "Score: %i | Minutes left: %i", pbscore2[playerid], PaintballTimer2/60);
	return 1;
}
CMD:exitpaintball(playerid, params[]) { return callcmd::exitpb(playerid, params); }
CMD:exitpb(playerid, params[])
{
    if(pData[playerid][pInjured] > 0 || pData[playerid][pTazedTime] > 0 || pData[playerid][pCuffed] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}

	if(pData[playerid][pPaintball])
	{
 		foreach(new i : Player)
		{
		    if(pData[i][pPaintball])
	    	{
	        	SM(i, COLOR_LIGHTORANGE, "(( %s has left the Warehouse arena. ))", GetRPName(playerid));
			}
		}

        ResetPlayerWeapons(playerid);
        SetPlayerArmedWeapon(playerid, 0);
		pData[playerid][pPaintball] = 0;
		SetPlayerToSpawn(playerid);
		TogglePlayerControllable(playerid, 0);
		SetTimerEx("UnfreezePlayerEx", 5000, false, "i", playerid);

		// We end the round if there are no players
		if(GetPBPlayers1() == 0) PaintballTimer1 = 0;
	}
	if(pData[playerid][pPaintball2])
	{
 		foreach(new i : Player)
		{
   			if(pData[i][pPaintball2])
	    	{
	        	SM(i, COLOR_LIGHTORANGE, "(( %s has left the Battlefield arena. ))", GetRPName(playerid));
			}
		}

        ResetPlayerWeapons(playerid);
        SetPlayerArmedWeapon(playerid, 0);
		pData[playerid][pPaintball2] = 0;
		SetPlayerToSpawn(playerid);
		TogglePlayerControllable(playerid, 0);
		SetTimerEx("UnfreezePlayerEx", 5000, false, "i", playerid);

		// We end the round if there are no players
		if(GetPBPlayers2() == 0) PaintballTimer2 = 0;
	}
	else
	{
		ExitCheck(playerid);
	}

	return 1;
}

CMD:asellland(playerid, params[])
{
	new landid;

    if (pData[playerid][pAdmin] < 6)
	    return SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command.");

	if(sscanf(params, "i", landid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /asellland [landid]");
	}
	if(!(0 <= landid < MAX_LANDS) || !LandInfo[landid][lExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid land.");
	}

	SetLandOwner(landid, INVALID_PLAYER_ID);
	SM(playerid, COLOR_AQUA, "** You have admin sold land %i.", landid);
	return 1;
}

CMD:buyhouse(playerid, params[])
{
	new houseid, type[16];

	if((houseid = GetNearbyHouse(playerid)) == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is no house in range. You must be near a house.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /buyhouse [confirm]");
	}
	if(HouseInfo[houseid][hOwnerID])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This house already has an owner.");
	}
	if(pData[playerid][pCash] < HouseInfo[houseid][hPrice])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this house.");
	}
	if(GetPlayerAssetCount(playerid, LIMIT_HOUSES) >= GetPlayerAssetLimit(playerid, LIMIT_HOUSES))
	{
	    return SM(playerid, COLOR_SYNTAX, "You currently own %i/%i houses. You can't own anymore unless you upgrade your asset perk.", GetPlayerAssetCount(playerid, LIMIT_HOUSES), GetPlayerAssetLimit(playerid, LIMIT_HOUSES));
	}

	if(HouseInfo[houseid][hType]) {
	    type = "House";
	} else {
		strcpy(type, houseInteriors[HouseInfo[houseid][hType]][intClass]);
	}

	SetHouseOwner(houseid, playerid);
	GivePlayerCash(playerid, -HouseInfo[houseid][hPrice]);

	SM(playerid, COLOR_YELLOW, "You paid $%i to make this house yours! /househelp for a list of commands.", HouseInfo[houseid][hPrice]);
	Log_Write("log_property", "%s (uid: %i) purchased %s (id: %i) for $%i.", GetPlayerNameEx(playerid), pData[playerid][pID], type, HouseInfo[houseid][hID], HouseInfo[houseid][hPrice]);
	return 1;
}
CMD:cafeteria(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 7.0, 2042.9763, -2031.3365, 871.1051))
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "   You are not at the Cafeteria!");
		return 1;
	}
	ShowPlayerDialog(playerid, DIALOG_VENDOR, DIALOG_STYLE_LIST, ""TEAL"Cafeteria", "SISIG "GREEN"85 PHP"WHITE"\nTAPSILOG "GREEN"150 PHP"WHITE"\nMENUDO WITH RICE "GREEN"25 PHP"WHITE"\nDONUT "GREEN"55 PHP"WHITE"\nBUKO JUICE "GREEN"20 PHP"WHITE"\nPINEAPPLE JUICE "GREEN"50 PHP"WHITE"\nSPRITE "GREEN"28 PHP"WHITE"\nNATURE SPRING "GREEN"15 PHP"WHITE"", "Proceed", "Back");
	return 1;
}

CMD:lock(playerid, params[])
{
	new id, houseid = GetInsideHouse(playerid), landid = GetNearbyLand(playerid);
	for(new i = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i <= j; i ++)
	{
    	if(IsValidDynamicObject(i) && IsPlayerInRangeOfDynamicObject(playerid, i, 2.5) && IsDoorObject(i))
    	{
		   	if(houseid >= 0 && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_FURNITURE && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == HouseInfo[houseid][hID])
			{
			    if(!(IsHouseOwner(playerid, houseid) || pData[playerid][pRentingHouse] == HouseInfo[houseid][hID] || pData[playerid][pFurniturePerms] == houseid))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "You don't have permission from the house owner to lock this door.");
			    }

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT door_locked FROM furniture WHERE id = %i", Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
		 		mysql_tquery(connectionID, queryBuffer, "OnPlayerLockFurnitureDoor", "ii", playerid, Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
		    	return 1;
			}
			else if(landid >= 0 && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_LAND && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == LandInfo[landid][lID])
			{
			    if(!(IsLandOwner(playerid, landid) || pData[playerid][pLandPerms] == landid))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "You don't have permission from the land owner to lock this door.");
			    }

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT door_locked FROM landobjects WHERE id = %i", Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
				mysql_tquery(connectionID, queryBuffer, "OnPlayerLockLandDoor", "ii", playerid, Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
			    return 1;
			}
		}
	}
	if((id = GetNearbyVehicle(playerid)) != INVALID_VEHICLE_ID && (IsVehicleOwner(playerid, id) || pData[playerid][pVehicleKeys] == id || (VehicleInfo[id][vGang] >= 0 && VehicleInfo[id][vGang] == pData[playerid][pGang]) || VehicleInfo[id][vFactionType] >= 0 && VehicleInfo[id][vFactionType] == pData[playerid][pFaction]))
	{
		if(!VehicleInfo[id][vLocked])
		{
			new string[24];
			VehicleInfo[id][vLocked] = 1;
			format(string, sizeof(string), "~r~%s locked", GetVehicleName(id));
			GameTextForPlayer(playerid, string, 3000, 3);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s locks their %s.", GetRPName(playerid), GetVehicleName(id));
		}
		else
		{
			VehicleInfo[id][vLocked] = 0;
			new string[24];
			format(string, sizeof(string), "~b~%s unlocked", GetVehicleName(id));
			GameTextForPlayer(playerid, string, 3000, 3);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s unlocks their %s.", GetRPName(playerid), GetVehicleName(id));
		}

		SetVehicleParams(id, VEHICLE_DOORS, VehicleInfo[id][vLocked]);
		PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET locked = %i WHERE id = %i", VehicleInfo[id][vLocked], VehicleInfo[id][vID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}
	else if((id = GetNearbyHouseEx(playerid)) >= 0 && (IsHouseOwner(playerid, id) || pData[playerid][pRentingHouse] == HouseInfo[id][hID]))
	{
	    if(!HouseInfo[id][hLocked])
	    {
			HouseInfo[id][hLocked] = 1;

			GameTextForPlayer(playerid, "~r~House locked", 3000, 6);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s locks their house door.", GetRPName(playerid));
		}
		else
		{
			HouseInfo[id][hLocked] = 0;

			GameTextForPlayer(playerid, "~g~House unlocked", 3000, 6);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s unlocks their house door.", GetRPName(playerid));
		}

		PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET locked = %i WHERE id = %i", HouseInfo[id][hLocked], HouseInfo[id][hID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}
	else if((id = GetNearbyGarageEx(playerid)) >= 0 && IsGarageOwner(playerid, id))
	{
	    if(!GarageInfo[id][gLocked])
	    {
			GarageInfo[id][gLocked] = 1;

			GameTextForPlayer(playerid, "~r~Garage locked", 3000, 6);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s locks their garage door.", GetRPName(playerid));
		}
		else
		{
			GarageInfo[id][gLocked] = 0;

			GameTextForPlayer(playerid, "~g~Garage unlocked", 3000, 6);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s unlocks their garage door.", GetRPName(playerid));
		}

		PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET locked = %i WHERE id = %i", GarageInfo[id][gLocked], GarageInfo[id][gID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}
	else if((id = GetNearbyBusinessEx(playerid)) >= 0 && IsBusinessOwner(playerid, id))
	{
	    if(!BusinessInfo[id][bLocked])
	    {
			BusinessInfo[id][bLocked] = 1;

			GameTextForPlayer(playerid, "~r~Business locked", 3000, 6);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s locks their business door.", GetRPName(playerid));
		}
		else
		{
			BusinessInfo[id][bLocked] = 0;

			GameTextForPlayer(playerid, "~g~Business unlocked", 3000, 6);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s unlocks their business door.", GetRPName(playerid));
		}

		PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET locked = %i WHERE id = %i", BusinessInfo[id][bLocked], BusinessInfo[id][bID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}
	else if((id = GetNearbyEntranceEx(playerid)) >= 0)
	{
	    new correct_pass;

	    if(!IsEntranceOwner(playerid, id) && strcmp(EntranceInfo[id][ePassword], "None", true) != 0)
		{
			if(isnull(params)) {
                return SCM(playerid, COLOR_SYNTAX, "Usage: /lock [password]");
			} else if(strcmp(params, EntranceInfo[id][ePassword]) != 0) {
			    return SCM(playerid, COLOR_SYNTAX, "Incorrect password.");
			} else {
				correct_pass = true;
			}
	    }

	    if((correct_pass) || IsEntranceOwner(playerid, id))
	    {
		    if(!EntranceInfo[id][eLocked])
		    {
				EntranceInfo[id][eLocked] = 1;

				GameTextForPlayer(playerid, "~r~Entrance locked", 3000, 6);
				SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s locks their entrance door.", GetRPName(playerid));
			}
			else
			{
				EntranceInfo[id][eLocked] = 0;

				GameTextForPlayer(playerid, "~g~Entrance unlocked", 3000, 6);
				SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s unlocks their entrance door.", GetRPName(playerid));
			}

            PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET locked = %i WHERE id = %i", EntranceInfo[id][eLocked], EntranceInfo[id][eID]);
			mysql_tquery(connectionID, queryBuffer);
		}

		return 1;
	}

	SCM(playerid, COLOR_SYNTAX, "You are not close to anything which you can lock.");

	return 1;
}

CMD:househelp(playerid, params[])
{
	SCM(playerid, COLOR_LIGHTORANGE, "** House Commands: /buyhouse, /furniture, /lock, /stash, /sellhouse, /sellmyhouse.");
	SCM(playerid, COLOR_LIGHTORANGE, "** House Commands: /lopen, /renthouse, /unrent, /setrent, /tenants, /evict, /evictall.");
	SCM(playerid, COLOR_LIGHTORANGE, "** House Commands: /houseinvite, /sethname");
	return 1;
}

CMD:stash(playerid, params[])
{
	new houseid;

	if((houseid = GetInsideHouse(playerid)) >= 0 && IsHouseOwner(playerid, houseid))
	{
	    new option[14], param[32];

		if(!HouseInfo[houseid][hLevel])
		{
		    return SCM(playerid, COLOR_SYNTAX, "This house has no stash upgrade. '/upgradehouse level' to purchase one.");
	    }
		if(sscanf(params, "s[14]S()[32]", option, param))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [balance | deposit | withdraw]");
	    }
	    if(!strcmp(option, "balance", true))
	    {
	        new count;

	        for(new i = 0; i < 10; i ++)
	        {
	            if(HouseInfo[houseid][hWeapons][i])
	            {
	                count++;
	            }
	        }

	        SCM(playerid, SERVER_COLOR, "Stash Balance:");
	        SM(playerid, COLOR_GREY2, "Cash: $%i/$%i", HouseInfo[houseid][hCash], GetHouseStashCapacity(houseid, STASH_CAPACITY_CASH));
			SM(playerid, COLOR_GREY2, "Materials: %i/%i | Weapons: %i/%i", HouseInfo[houseid][hMaterials], GetHouseStashCapacity(houseid, STASH_CAPACITY_MATERIALS), count, GetHouseStashCapacity(houseid, STASH_CAPACITY_WEAPONS));
	        SM(playerid, COLOR_GREY2, "Pot: %i/%i grams | Crack: %i/%i grams", HouseInfo[houseid][hPot], GetHouseStashCapacity(houseid, STASH_CAPACITY_WEED), HouseInfo[houseid][hCrack], GetHouseStashCapacity(houseid, STASH_CAPACITY_COCAINE));
	        SM(playerid, COLOR_GREY2, "Meth: %i/%i grams | Painkillers: %i/%i pills", HouseInfo[houseid][hMeth], GetHouseStashCapacity(houseid, STASH_CAPACITY_METH), HouseInfo[houseid][hPainkillers], GetHouseStashCapacity(houseid, STASH_CAPACITY_PAINKILLERS));
            SCM(playerid, SERVER_COLOR, "Stash Ammunition:");
			SM(playerid, COLOR_GREY2, "HP Ammo: %i/%i | Poison Ammo: %i/%i", HouseInfo[houseid][hHPAmmo], GetHouseStashCapacity(houseid, STASH_CAPACITY_HPAMMO), HouseInfo[houseid][hPoisonAmmo], GetHouseStashCapacity(houseid, STASH_CAPACITY_POISONAMMO));
            SM(playerid, COLOR_GREY2, "FMJ Ammo: %i/%i", HouseInfo[houseid][hFMJAmmo], GetHouseStashCapacity(houseid, STASH_CAPACITY_FMJAMMO));

			if(count > 0)
			{
				SCM(playerid, SERVER_COLOR, "Stash Weapons:");

            	for(new i = 0; i < 10; i ++)
	            {
    	            if(HouseInfo[houseid][hWeapons][i])
	    	        {
	        	        SM(playerid, COLOR_GREY2, "[%i] Weapon: %s", i + 1, GetWeaponNameEx(HouseInfo[houseid][hWeapons][i]));
					}
				}
	        }
		}
		else if(!strcmp(option, "deposit", true))
	    {
	        new value;

	        if(sscanf(param, "s[14]S()[32]", option, param))
	        {
	            SCM(playerid, COLOR_SYNTAX, "Usage: /stash [deposit] [option]");
	            SCM(playerid, COLOR_WHITE, "Available options: Cash, Materials, Pot, Crack, Meth, Painkillers, Weapon");
	            SCM(playerid, COLOR_WHITE, "Available options: HPAmmo, PoisonAmmo, FMJAmmo");
	            return 1;
	        }
	        if(!strcmp(option, "cash", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [deposit] [cash] [amount]");
				}
				if(value < 1 || value > pData[playerid][pCash])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_CASH) < HouseInfo[houseid][hCash] + value)
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your stash can only hold up to $%i at your house's level.", GetHouseStashCapacity(houseid, STASH_CAPACITY_CASH));
			    }

			    GivePlayerCash(playerid, -value);
			    HouseInfo[houseid][hCash] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET cash = %i WHERE id = %i", HouseInfo[houseid][hCash], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored $%i in your house stash.", value);
			}
			else if(!strcmp(option, "materials", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [deposit] [materials] [amount]");
				}
				if(value < 1 || value > pData[playerid][pMaterials])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_MATERIALS) < HouseInfo[houseid][hMaterials] + value)
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your stash can only hold up to %i materials at your house's level.", GetHouseStashCapacity(houseid, STASH_CAPACITY_MATERIALS));
			    }

			    pData[playerid][pMaterials] -= value;
			    HouseInfo[houseid][hMaterials] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET materials = %i WHERE id = %i", HouseInfo[houseid][hMaterials], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", pData[playerid][pMaterials], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored %i materials in your house stash.", value);
   			}
			else if(!strcmp(option, "pot", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [deposit] [pot] [amount]");
				}
				if(value < 1 || value > pData[playerid][pPot])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_WEED) < HouseInfo[houseid][hPot] + value)
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your stash can only hold up to %i grams of pot at your house's level.", GetHouseStashCapacity(houseid, STASH_CAPACITY_WEED));
			    }

			    pData[playerid][pPot] -= value;
			    HouseInfo[houseid][hPot] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET pot = %i WHERE id = %i", HouseInfo[houseid][hPot], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", pData[playerid][pPot], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored %ig of pot in your house stash.", value);
   			}
   			else if(!strcmp(option, "crack", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [deposit] [Crack] [amount]");
				}
				if(value < 1 || value > pData[playerid][pCrack])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_COCAINE) < HouseInfo[houseid][hCrack] + value)
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your stash can only hold up to %i grams of Crack at your house's level.", GetHouseStashCapacity(houseid, STASH_CAPACITY_COCAINE));
			    }

			    pData[playerid][pCrack] -= value;
			    HouseInfo[houseid][hCrack] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET crack = %i WHERE id = %i", HouseInfo[houseid][hCrack], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", pData[playerid][pCrack], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored %ig of Crack in your house stash.", value);
   			}
   			else if(!strcmp(option, "meth", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [deposit] [meth] [amount]");
				}
				if(value < 1 || value > pData[playerid][pMeth])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_METH) < HouseInfo[houseid][hMeth] + value)
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your stash can only hold up to %i grams of meth at your house's level.", GetHouseStashCapacity(houseid, STASH_CAPACITY_METH));
			    }

			    pData[playerid][pMeth] -= value;
			    HouseInfo[houseid][hMeth] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET meth = %i WHERE id = %i", HouseInfo[houseid][hMeth], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", pData[playerid][pMeth], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored %ig of meth in your house stash.", value);
   			}
   			else if(!strcmp(option, "painkillers", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [deposit] [painkillers] [amount]");
				}
				if(value < 1 || value > pData[playerid][pPainkillers])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_PAINKILLERS) < HouseInfo[houseid][hPainkillers] + value)
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your stash can only hold up to %i painkillers at your house's level.", GetHouseStashCapacity(houseid, STASH_CAPACITY_PAINKILLERS));
			    }

			    pData[playerid][pPainkillers] -= value;
			    HouseInfo[houseid][hPainkillers] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET painkillers = %i WHERE id = %i", HouseInfo[houseid][hPainkillers], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", pData[playerid][pPainkillers], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored %i painkillers in your house stash.", value);
   			}
   			else if(!strcmp(option, "weapon", true))
   			{
   			    new weaponid;

   			    if(sscanf(param, "i", weaponid))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [deposit] [weapon] [weaponid] (/guninv for weapon IDs)");
				}
				if(!(1 <= weaponid <= 46) || pData[playerid][pWeapons][weaponSlotIDs[weaponid]] != weaponid)
				{
				    return SCM(playerid, COLOR_SYNTAX, "You don't have that weapon. /guninv for a list of your weapons.");
				}
				if(GetHealth(playerid) < 60)
				{
				    return SCM(playerid, COLOR_SYNTAX, "You can't store weapons as your health is below 60.");
				}

				for(new i = 0; i < GetHouseStashCapacity(houseid, STASH_CAPACITY_WEAPONS); i ++)
				{
					if(!HouseInfo[houseid][hWeapons][i])
   				    {
						HouseInfo[houseid][hWeapons][i] = weaponid;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET weapon_%i = %i WHERE id = %i", i + 1, HouseInfo[houseid][hWeapons][i], HouseInfo[houseid][hID]);
						mysql_tquery(connectionID, queryBuffer);

						RemovePlayerWeapon(playerid, weaponid);
						SM(playerid, COLOR_AQUA, "** You have stored a %s in slot %i of your house stash.", GetWeaponNameEx(HouseInfo[houseid][hWeapons][i]), value + 1);
						return 1;
					}
				}

				SCM(playerid, COLOR_SYNTAX, "Your house stash has no more slots available for weapons.");
			}
   			else if(!strcmp(option, "hpammo", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [deposit] [hpammo] [amount]");
				}
				if(value < 1 || value > pData[playerid][pHPAmmo])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_HPAMMO) < HouseInfo[houseid][hHPAmmo] + value)
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your stash can only hold up to %i hollow point ammo at your house's level.", GetHouseStashCapacity(houseid, STASH_CAPACITY_HPAMMO));
			    }

			    SetWeaponAmmo(playerid, AMMO_HP, pData[playerid][pHPAmmo] - value);
			    HouseInfo[houseid][hHPAmmo] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET hpammo = %i WHERE id = %i", HouseInfo[houseid][hHPAmmo], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored %i rounds of hollow point ammo in your house stash.", value);
   			}
   			else if(!strcmp(option, "poisonammo", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [deposit] [poisonammo] [amount]");
				}
				if(value < 1 || value > pData[playerid][pPoisonAmmo])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_POISONAMMO) < HouseInfo[houseid][hPoisonAmmo] + value)
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your stash can only hold up to %i poison tip ammo at your house's level.", GetHouseStashCapacity(houseid, STASH_CAPACITY_POISONAMMO));
			    }

			    SetWeaponAmmo(playerid, AMMO_POISON, pData[playerid][pPoisonAmmo] - value);
			    HouseInfo[houseid][hPoisonAmmo] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET poisonammo = %i WHERE id = %i", HouseInfo[houseid][hPoisonAmmo], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored %i rounds of poison tip ammo in your house stash.", value);
   			}
   			else if(!strcmp(option, "fmjammo", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [deposit] [fmjammo] [amount]");
				}
				if(value < 1 || value > pData[playerid][pFMJAmmo])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_FMJAMMO) < HouseInfo[houseid][hFMJAmmo] + value)
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your stash can only hold up to %i FMJ ammo at your house's level.", GetHouseStashCapacity(houseid, STASH_CAPACITY_FMJAMMO));
			    }

			    SetWeaponAmmo(playerid, AMMO_FMJ, pData[playerid][pFMJAmmo] - value);
			    HouseInfo[houseid][hFMJAmmo] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET fmjammo = %i WHERE id = %i", HouseInfo[houseid][hFMJAmmo], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored %i rounds of full metal jacket ammo in your house stash.", value);
   			}
		}
		else if(!strcmp(option, "withdraw", true))
	    {
	        new value;

	        if(sscanf(param, "s[14]S()[32]", option, param))
	        {
	            SCM(playerid, COLOR_SYNTAX, "Usage: /stash [withdraw] [option]");
	            SCM(playerid, COLOR_WHITE, "Available options: Cash, Pot, Crack, Meth, Painkillers, Weapon");
	            SCM(playerid, COLOR_WHITE, "Available options: HPAmmo, PoisonAmmo, FMJAmmo");
	            return 1;
	        }
	        if(!strcmp(option, "cash", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [withdraw] [cash] [amount]");
				}
				if(value < 1 || value > HouseInfo[houseid][hCash])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }

			    GivePlayerCash(playerid, value);
			    HouseInfo[houseid][hCash] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET cash = %i WHERE id = %i", HouseInfo[houseid][hCash], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken $%i from your house stash.", value);
			}
			else if(!strcmp(option, "materials", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [withdraw] [materials] [amount]");
				}
				if(value < 1 || value > HouseInfo[houseid][hMaterials])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(pData[playerid][pMaterials] + value > GetPlayerCapacity(CAPACITY_MATERIALS))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i materials. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pMaterials], GetPlayerCapacity(CAPACITY_MATERIALS));
				}

			    pData[playerid][pMaterials] += value;
			    HouseInfo[houseid][hMaterials] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET materials = %i WHERE id = %i", HouseInfo[houseid][hMaterials], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", pData[playerid][pMaterials], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken %i materials from your house stash.", value);
   			}
			else if(!strcmp(option, "pot", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [withdraw] [pot] [amount]");
				}
				if(value < 1 || value > HouseInfo[houseid][hPot])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(pData[playerid][pPot] + value > GetPlayerCapacity(CAPACITY_WEED))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i pot. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pPot], GetPlayerCapacity(CAPACITY_WEED));
				}

			    pData[playerid][pPot] += value;
			    HouseInfo[houseid][hPot] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET pot = %i WHERE id = %i", HouseInfo[houseid][hPot], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", pData[playerid][pPot], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken %ig of pot from your house stash.", value);
   			}
   			else if(!strcmp(option, "crack", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [withdraw] [Crack] [amount]");
				}
				if(value < 1 || value > HouseInfo[houseid][hCrack])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(pData[playerid][pCrack] + value > GetPlayerCapacity(CAPACITY_COCAINE))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i Crack. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pCrack], GetPlayerCapacity(CAPACITY_COCAINE));
				}

			    pData[playerid][pCrack] += value;
			    HouseInfo[houseid][hCrack] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET crack = %i WHERE id = %i", HouseInfo[houseid][hCrack], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", pData[playerid][pCrack], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken %ig of Crack from your house stash.", value);
   			}
   			else if(!strcmp(option, "meth", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [withdraw] [meth] [amount]");
				}
				if(value < 1 || value > HouseInfo[houseid][hMeth])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(pData[playerid][pMeth] + value > GetPlayerCapacity(CAPACITY_METH))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i meth. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pMeth], GetPlayerCapacity(CAPACITY_METH));
				}

			    pData[playerid][pMeth] += value;
			    HouseInfo[houseid][hMeth] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET meth = %i WHERE id = %i", HouseInfo[houseid][hMeth], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", pData[playerid][pMeth], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken %ig of meth from your house stash.", value);
   			}
   			else if(!strcmp(option, "painkillers", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [withdraw] [painkillers] [amount]");
				}
				if(value < 1 || value > HouseInfo[houseid][hPainkillers])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(pData[playerid][pPainkillers] + value > GetPlayerCapacity(CAPACITY_PAINKILLERS))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i painkillers. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pPainkillers], GetPlayerCapacity(CAPACITY_PAINKILLERS));
				}

			    pData[playerid][pPainkillers] += value;
			    HouseInfo[houseid][hPainkillers] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET painkillers = %i WHERE id = %i", HouseInfo[houseid][hPainkillers], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", pData[playerid][pPainkillers], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken %i painkillers from your house stash.", value);
   			}
   			else if(!strcmp(option, "weapon", true))
   			{
   			    new slots = GetHouseStashCapacity(houseid, STASH_CAPACITY_WEAPONS);

   			    if(sscanf(param, "i", value))
			    {
			        return SM(playerid, COLOR_SYNTAX, "Usage: /stash [withdraw] [weapon] [slot (1-%i)]", slots);
				}
				if(value < 1 || value > slots)
				{
				    return SCM(playerid, COLOR_SYNTAX, "Invalid slot, or the slot specified is locked.");
   			    }
   			    if(!HouseInfo[houseid][hWeapons][value-1])
   			    {
   			        return SCM(playerid, COLOR_SYNTAX, "The slot specified contains no weapon which you can take.");
				}

				GiveWeapon(playerid, HouseInfo[houseid][hWeapons][value-1]);
				SM(playerid, COLOR_AQUA, "** You have taken a %s from slot %i of your house stash.", GetWeaponNameEx(HouseInfo[houseid][hWeapons][value-1]), value);

				HouseInfo[houseid][hWeapons][value-1] = 0;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET weapon_%i = 0 WHERE id = %i", value, HouseInfo[houseid][hID]);
				mysql_tquery(connectionID, queryBuffer);
			}
   			else if(!strcmp(option, "hpammo", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [withdraw] [hpammo] [amount]");
				}
				if(value < 1 || value > HouseInfo[houseid][hHPAmmo])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(pData[playerid][pHPAmmo] + value > GetPlayerCapacity(CAPACITY_HPAMMO))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i HP ammo. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pHPAmmo], GetPlayerCapacity(CAPACITY_HPAMMO));
				}

			    SetWeaponAmmo(playerid, AMMO_HP, pData[playerid][pHPAmmo] + value);
			    HouseInfo[houseid][hHPAmmo] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET hpammo = %i WHERE id = %i", HouseInfo[houseid][hHPAmmo], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken %i rounds of hollow point ammo from your house stash.", value);
   			}
   			else if(!strcmp(option, "poisonammo", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [withdraw] [poisonammo] [amount]");
				}
				if(value < 1 || value > HouseInfo[houseid][hPoisonAmmo])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(pData[playerid][pPoisonAmmo] + value > GetPlayerCapacity(CAPACITY_POISONAMMO))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i poison ammo. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pPoisonAmmo], GetPlayerCapacity(CAPACITY_POISONAMMO));
				}

			    SetWeaponAmmo(playerid, AMMO_POISON, pData[playerid][pPoisonAmmo] + value);
			    HouseInfo[houseid][hPoisonAmmo] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET poisonammo = %i WHERE id = %i", HouseInfo[houseid][hPoisonAmmo], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken %i rounds of poison tip ammo from your house stash.", value);
   			}
   			else if(!strcmp(option, "fmjammo", true))
			{
       			if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [withdraw] [fmjammo] [amount]");
				}
				if(value < 1 || value > HouseInfo[houseid][hFMJAmmo])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(pData[playerid][pFMJAmmo] + value > GetPlayerCapacity(CAPACITY_FMJAMMO))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i FMJ ammo. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pFMJAmmo], GetPlayerCapacity(CAPACITY_FMJAMMO));
				}

			    SetWeaponAmmo(playerid, AMMO_FMJ, pData[playerid][pFMJAmmo] + value);
			    HouseInfo[houseid][hFMJAmmo] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET fmjammo = %i WHERE id = %i", HouseInfo[houseid][hFMJAmmo], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken %i rounds of full metal jacket ammo from your house stash.", value);
   			}
		}
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "You are not in range of any stash which you can use.");
	}

	return 1;
}

CMD:upgradehouse(playerid, params[])
{
	new
		houseid = GetNearbyHouseEx(playerid),
		option[10],
		param[12],
		string[20];

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any house of yours.");
	}
	if(sscanf(params, "s[10]S()[12]", option, param))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /upgradehouse [level]");
	}
	if(!strcmp(option, "level", true))
	{
	    new cost = (HouseInfo[houseid][hLevel] * 500000) + 250000;

	    if(HouseInfo[houseid][hLevel] >= 5)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your house is already at the maximum level possible.");
		}
		if(isnull(param) || strcmp(param, "confirm", true) != 0)
		{
		    SCM(playerid, COLOR_SYNTAX, "Usage: /upgradehouse [level] [confirm]");
		    SM(playerid, COLOR_WHITE, "You are about to upgrade to level %i/5 which will cost you $%i.", HouseInfo[houseid][hLevel] + 1, cost);
			return 1;
		}
		if(pData[playerid][pCash] < cost)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You don't have that much cash.");
		}

		HouseInfo[houseid][hLevel]++;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET level = level + 1 WHERE id = %i", HouseInfo[houseid][hID]);
		mysql_tquery(connectionID, queryBuffer);

		format(string, sizeof(string), "~r~-$%i", cost);
		GameTextForPlayer(playerid, string, 5000, 1);

		GivePlayerCash(playerid, -cost);
		ReloadHouse(houseid);

		if(HouseInfo[houseid][hLevel] == 1)
		{
		    SM(playerid, COLOR_YELLOW, "You have upgraded your house to level %i/5. You unlocked a stash for your house! (/stash)", HouseInfo[houseid][hLevel]);
		}
		else
		{
			SM(playerid, COLOR_YELLOW, "You have upgraded your house to level %i/5. Your stash capacity was increased.", HouseInfo[houseid][hLevel]);
		}

		SM(playerid, COLOR_YELLOW, "Your tenant were also both increased to %i/%i.", GetHouseTenantCapacity(houseid));
		Log_Write("log_property", "%s (uid: %i) upgraded their house (id: %i) to level %i for $%i.", GetPlayerNameEx(playerid), pData[playerid][pID], HouseInfo[houseid][hID], HouseInfo[houseid][hLevel], cost);
	}
	else if(!strcmp(option, "interior", true))
	{
		for(new i = HouseInfo[houseid][hType] + 1; i < sizeof(houseInteriors); i ++)
		{
		    if(!strcmp(houseInteriors[i][intClass], houseInteriors[HouseInfo[houseid][hType]][intClass]))
		    {
		        if(isnull(param) || strcmp(param, "confirm", true) != 0)
				{
				    SCM(playerid, COLOR_SYNTAX, "Usage: /upgradehouse [interior] [confirm]");
				    SM(playerid, COLOR_WHITE, "You are about to upgrade your interior to the next one in the class for $%i.", houseInteriors[i][intPrice]);
					return 1;
				}
				if(pData[playerid][pCash] < houseInteriors[i][intPrice])
				{
				    return SCM(playerid, COLOR_SYNTAX, "You can't afford the upgrade.");
				}

				foreach(new x : Player)
				{
				    if(GetInsideHouse(x) == houseid)
				    {
				        SetPlayerPos(x, houseInteriors[i][intX], houseInteriors[i][intY], houseInteriors[i][intZ]);
				        SetPlayerFacingAngle(x, houseInteriors[i][intA]);
				        SetPlayerInterior(x, houseInteriors[i][intID]);
				        SetCameraBehindPlayer(x);
				    }
				}

				GivePlayerCash(playerid, -houseInteriors[i][intPrice]);

		        HouseInfo[houseid][hType] = i;
		        HouseInfo[houseid][hPrice] = houseInteriors[i][intPrice];
				HouseInfo[houseid][hInterior] = houseInteriors[i][intID];
				HouseInfo[houseid][hIntX] = houseInteriors[i][intX];
				HouseInfo[houseid][hIntY] = houseInteriors[i][intY];
				HouseInfo[houseid][hIntZ] = houseInteriors[i][intZ];
				HouseInfo[houseid][hIntA] = houseInteriors[i][intA];

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET type = %i, price = %i, int_x = '%f', int_y = '%f', int_z = '%f', int_a = '%f', interior = %i, world = %i WHERE id = %i", i, HouseInfo[houseid][hPrice], HouseInfo[houseid][hIntX], HouseInfo[houseid][hIntY], HouseInfo[houseid][hIntZ], HouseInfo[houseid][hIntA], HouseInfo[houseid][hInterior], HouseInfo[houseid][hWorld], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_YELLOW, "You have upgraded to the next interior in the class for $%i.", houseInteriors[i][intPrice]);
			    Log_Write("log_property", "%s (uid: %i) upgraded their house interior (id: %i) to interior %i for $%i.", GetPlayerNameEx(playerid), pData[playerid][pID], HouseInfo[houseid][hID], i, houseInteriors[i][intPrice]);
			    return 1;
		    }
		}

		SCM(playerid, COLOR_SYNTAX, "Your house's interior is already at its maximum in its class. You cannot upgrade it any further.");
	}
	return 1;
}
CMD:houseinfo(playerid, params[])
{
    new houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any house of yours.");
	}

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT (SELECT COUNT(*) FROM furniture WHERE houseid = %i) AS furnitureCount, (SELECT COUNT(*) FROM users WHERE rentinghouse = %i) AS tenantCount", HouseInfo[houseid][hID], HouseInfo[houseid][hID]);
    mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_HOUSE_INFORMATION, playerid);

	return 1;
}
CMD:furniture(playerid, params[])
{
	new houseid = GetInsideHouse(playerid), option[10], param[32];

	if(houseid == -1 || !HasFurniturePerms(playerid, houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside of any house of yours.");
	}
	if(sscanf(params, "s[10]S()[32]", option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /furniture [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Buy, Edit, Sell, Allow, Disallow, Labels");
	    return 1;
	}
	if(!strcmp(option, "buy", true))
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM furniture WHERE houseid = %i", HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_COUNT_FURNITURE, playerid);
	}
	else if(!strcmp(option, "edit", true))
	{
	    new objectid;

	    if(sscanf(param, "i", objectid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /furniture [edit] [objectid]");
		}
		if(!IsValidDynamicObject(objectid) || Streamer_GetExtraInt(objectid, E_OBJECT_TYPE) != E_OBJECT_FURNITURE)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid object. You can find the object IDs for your furniture by enabling labels. [/furniture labels]");
        }
        if(Streamer_GetExtraInt(objectid, E_OBJECT_EXTRA_ID) != HouseInfo[houseid][hID])
        {
            return SCM(playerid, COLOR_SYNTAX, "Invalid object. This furniture object is not inside of your house.");
        }

        pData[playerid][pEditType] = EDIT_FURNITURE;
        pData[playerid][pEditObject] = objectid;
        pData[playerid][pFurnitureHouse] = houseid;

		EditDynamicObject(playerid, objectid);
        GameTextForPlayer(playerid, "~w~Editing Mode~n~~g~Click disk to save~n~~r~Press ESC to cancel", 5000, 1);
	}
	else if(!strcmp(option, "sell", true))
	{
	    new objectid;

	    if(sscanf(param, "i", objectid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /furniture [sell] [objectid] (75%% refund)");
		}
		if(!IsValidDynamicObject(objectid) || Streamer_GetExtraInt(objectid, E_OBJECT_TYPE) != E_OBJECT_FURNITURE)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid object. You can find the object IDs for your furniture by enabling labels. [/furniture labels]");
        }
        if(Streamer_GetExtraInt(objectid, E_OBJECT_EXTRA_ID) != HouseInfo[houseid][hID])
        {
            return SCM(playerid, COLOR_SYNTAX, "Invalid object. This furniture object is not inside of your house.");
        }

        pData[playerid][pSelected] = objectid;

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT name, price FROM furniture WHERE id = %i", Streamer_GetExtraInt(objectid, E_OBJECT_INDEX_ID));
        mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_SELL_FURNITURE, playerid);
	}
	else if(!strcmp(option, "allow", true))
	{
	    new targetid;

	    if(sscanf(param, "u", targetid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /furniture [allow] [playerid]");
		}
		if(!IsHouseOwner(playerid, houseid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This can only be done by the house owner.");
		}
		if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
		}
		if(targetid == playerid)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
		}
		if(pData[targetid][pFurniturePerms] == houseid)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You already allowed that player to access your furniture.");
		}

		pData[targetid][pFurniturePerms] = houseid;

		SM(targetid, COLOR_AQUA, "%s has allowed you to access their home's furniture.", GetRPName(playerid));
		SM(playerid, COLOR_AQUA, "You have allowed %s to access your home's furniture.", GetRPName(targetid));
	}
	else if(!strcmp(option, "disallow", true))
	{
	    new targetid;

	    if(sscanf(param, "u", targetid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /furniture [disallow] [playerid]");
		}
		if(!IsHouseOwner(playerid, houseid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This can only be done by the house owner.");
		}
		if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
		}
		if(targetid == playerid)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
		}
		if(pData[targetid][pFurniturePerms] != houseid)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You haven't allowed that player to access your furniture.");
		}

		pData[targetid][pFurniturePerms] = -1;

		SM(targetid, COLOR_AQUA, "%s has removed your access to their home's furniture.", GetRPName(playerid));
		SM(playerid, COLOR_AQUA, "You have removed %s's access to your home's furniture.", GetRPName(targetid));
	}
	else if(!strcmp(option, "labels", true))
	{
	    if(!HouseInfo[houseid][hLabels])
	    {
	        HouseInfo[houseid][hLabels] = 1;
         	SCM(playerid, COLOR_AQUA, "You will now see labels appear above all of your furniture.");
	    }
	    else
	    {
	        HouseInfo[houseid][hLabels] = 0;
	        SCM(playerid, COLOR_AQUA, "You will no longer see any labels appear above your furniture.");
	    }

	    ReloadAllFurniture(houseid);
	}


	return 1;
}
CMD:sellhouse(playerid, params[])
{
	new houseid = GetNearbyHouseEx(playerid), targetid, amount;

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any house of yours.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /sellhouse [playerid] [amount]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't sell to yourself.");
	}
	if(amount < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must specify an amount above zero.");
	}

	pData[targetid][pHouseOffer] = playerid;
	pData[targetid][pHouseOffered] = houseid;
	pData[targetid][pHousePrice] = amount;

	SM(targetid, COLOR_AQUA, "** %s offered you their house for $%i (/accept house).", GetRPName(playerid), amount);
	SM(playerid, COLOR_AQUA, "** You have offered %s to buy your house for $%i.", GetRPName(targetid), amount);
	return 1;
}

/*CMD:sellmyhouse(playerid, params[])
{
	new houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any house of yours.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /sellmyhouse [confirm]");
	    SM(playerid, COLOR_WHITE, "This command sells your house back to the state. You will receive $%i back.", percent(HouseInfo[houseid][hPrice], 75));
	    return 1;
	}

	SetHouseOwner(houseid, INVALID_PLAYER_ID);
	GivePlayerCash(playerid, percent(HouseInfo[houseid][hPrice], 75));

	SM(playerid, COLOR_YELLOW, "You have sold your house to the state and received $%i back.", percent(HouseInfo[houseid][hPrice], 75));
    Log_Write("log_property", "%s (uid: %i) sold their house (id: %i) to the state for $%i", GetPlayerNameEx(playerid), pData[playerid][pID], HouseInfo[houseid][hID], percent(HouseInfo[houseid][hPrice], 75));
	return 1;
}*/


CMD:ma(playerid, params[]) return callcmd::makeadmin(playerid, params);
CMD:makeadmin(playerid, params[])
{
	new targetid, level;

    if(pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_GREY, "You are not authorized to use this command as you're not the Community Owner.");
	}
	if(sscanf(params, "ui", targetid, level))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /makeadmin [playerid] [level]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(!(0 <= level <= 10))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid level. Valid levels range from 0 to 8.");
	}
	if(level == 0 && pData[targetid][pAdminDuty])
	{
	    SetPlayerName(targetid, pData[targetid][pUsername]);
		pData[targetid][pAdminDuty] = 0;
    }

    pData[targetid][pAdmin] = level;
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has made %s a %s (%i).", GetRPName(playerid), GetRPName(targetid), GetAdminRank(targetid), level);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET adminlevel = %i WHERE uid = %i", level, pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	if(level == 0)
	{
		SM(playerid, COLOR_AQUA, "You have removed %s's administrator powers.", GetRPName(targetid));
		SM(targetid, COLOR_AQUA, "%s has removed your administrator powers.", GetRPName(playerid));
	}
	else
	{
	    SM(playerid, COLOR_AQUA, "You have set %s's admin level to "SVRCLR"%s{CCFFFF} (%i).", GetRPName(targetid), GetAdminRank(targetid), level);
		SM(targetid, COLOR_AQUA, "%s has set your admin level to "SVRCLR"%s{CCFFFF} (%i).", GetRPName(playerid), GetAdminRank(targetid), level);
	}

	Log_Write("log_admin", "%s (uid: %i) set %s's (uid: %i) admin level to %i", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], level);
	return 1;
}

CMD:makehelper(playerid, params[])
{
	new targetid, level;

    if(pData[playerid][pAdmin] < 7 && pData[playerid][pHelper] < 7 && pData[playerid][pAdminPersonnel])
	{
	    return SCM(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "ui", targetid, level))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /makehelper [playerid] [level]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(!(0 <= level <= 7))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid level. Valid levels range from 0 to 4.");
	}
	if((pData[playerid][pAdmin] < 6) && pData[targetid][pHelper] > pData[playerid][pHelper] && level < pData[targetid][pHelper])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher helper level than you. They cannot be demoted.");
	}
	if(level == 0)
	{
		if(pData[targetid][pTagType] == TAG_HELPER)
		{
			SetPlayerSpecialTag(targetid, TAG_NORMAL);
		}
		if(pData[targetid][pAcceptedHelp])
		{
		    callcmd::return(targetid, "\1");
		}
	}


	SendStaffMessage(COLOR_LIGHTRED, "AdmCmd: %s has made %s a level %i helper.", GetRPName(playerid), GetRPName(targetid), level);
	pData[targetid][pHelper] = level;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET helperlevel = %i WHERE uid = %i", level, pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(playerid, COLOR_AQUA, "You have made %s a "SVRCLR"%s{CCFFFF} (%i).", GetRPName(targetid), GetHelperRank(targetid), level);
	SM(targetid, COLOR_AQUA, "%s has made you a "SVRCLR"%s{CCFFFF} (%i).", GetRPName(playerid), GetHelperRank(targetid), level);

	Log_Write("log_admin", "%s (uid: %i) set %s's (uid: %i) helper level to %i", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], level);
	return 1;
}

CMD:omakeadmin(playerid, params[])
{
	new username[MAX_PLAYER_NAME], level;

    if(pData[playerid][pAdmin] < 8)
	{
	    return SCM(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]i", username, level))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /omakeadmin [username] [level]");
	}
	if(!(0 <= level <= 8))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid level. Valid levels range from 0 to 7.");
	}
	if(IsPlayerOnline(username))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is already online and logged in. Use /makeadmin instead.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT adminlevel FROM users WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminSetAdminLevel", "isi", playerid, username, level);
	return 1;
}

CMD:omakehelper(playerid, params[])
{
	new username[MAX_PLAYER_NAME], level;

    if(pData[playerid][pAdmin] < 7 && pData[playerid][pHelper] < 7 && pData[playerid][pAdminPersonnel])
	{
	    return SCM(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]i", username, level))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /omakehelper [username] [level]");
	}
	if(!(0 <= level <= 7))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid level. Valid levels range from 0 to 4.");
	}
	if(IsPlayerOnline(username))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is already online and logged in. Use /makehelper instead.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT helperlevel FROM users WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminSetHelperLevel", "isi", playerid, username, level);
	return 1;
}

CMD:doublesalary(playerid, params[])
{
	new level, string[128];

    if(pData[playerid][pAdmin] < 7 && !pData[playerid][pDynamicAdmin])
	{
	    return SCM(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", level))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /doublesalary [level]");
	}
	if(!(0 <= level <= 10))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid level. Valid levels range from 0 to 10.");
	}
	if(level == 0)
	{
		format(string, sizeof(string), "AdmWarning: %s has just disabled the Double Salary feature.", GetPlayerNameEx(playerid));
		SAM(COLOR_YELLOW, string, 2);

		SendClientMessageToAll(COLOR_LIGHTRED, "Double Salary has been disabled by an Admin.");
		SendClientMessageToAll(COLOR_AQUA, "You will no longer receive double payments after working on your job!");
		Salary = 1;
		DoubleSalary = 0;
	}

	switch(level)
	{
		case 1:
		{
			format(string, sizeof(string), "AdmWarning: %s has just enabled the Single(1) Salary feature.", GetPlayerNameEx(playerid));
			SAM(COLOR_YELLOW, string, 2);

			SendClientMessageToAll(COLOR_LIGHTGREEN, "Single Salary has been enabled by an Admin.");
			SendClientMessageToAll(COLOR_AQUA, "You will now receive Single paychecks after working on your job!!");
		}
		case 2:
		{
			format(string, sizeof(string), "AdmWarning: %s has just enabled the Double(2) Salary feature.", GetPlayerNameEx(playerid));
			SAM(COLOR_YELLOW, string, 2);

			SendClientMessageToAll(COLOR_LIGHTGREEN, "Double Salary has been enabled by an Admin.");
			SendClientMessageToAll(COLOR_AQUA, "You will now receive double payments after working on your job! (Ex: $10,000+) 2X!");
		}
		case 3:
		{
			format(string, sizeof(string), "AdmWarning: %s has just enabled the Triple(3) Salary feature.", GetPlayerNameEx(playerid));
			SAM(COLOR_YELLOW, string, 2);

			SendClientMessageToAll(COLOR_LIGHTGREEN, "Triple Salary has been enabled by an Admin.");
			SendClientMessageToAll(COLOR_AQUA, "You will now receive Triple payments after working on your job! (Ex: $10,000$10,000+) 3X!");
		}
		case 4:
		{
			format(string, sizeof(string), "AdmWarning: %s has just enabled the Quadrople(4) Salary feature.", GetPlayerNameEx(playerid));
			SAM(COLOR_YELLOW, string, 2);

			SendClientMessageToAll(COLOR_LIGHTGREEN, "Quadrople Salary has been enabled by an Admin.");
			SendClientMessageToAll(COLOR_AQUA, "You will now receive Quadrople payments after working on your job! (Ex: $10,000 -> $20,000) 2X!");
		}
		case 5:
		{
			format(string, sizeof(string), "AdmWarning: %s has just enabled the Quintuple(5) Salary feature.", GetPlayerNameEx(playerid));
			SAM(COLOR_YELLOW, string, 2);

			SendClientMessageToAll(COLOR_LIGHTGREEN, "Quintuple Salary has been enabled by an Admin.");
			SendClientMessageToAll(COLOR_AQUA, "You will now receive Quintuple payments after working on your job! (Ex: $10,000 -> $20,000) 2X!");
		}
		case 6:
		{
			format(string, sizeof(string), "AdmWarning: %s has just enabled the Sextuple(6) Salary feature.", GetPlayerNameEx(playerid));
			SAM(COLOR_YELLOW, string, 2);

			SendClientMessageToAll(COLOR_LIGHTGREEN, "Sextuple Salary has been enabled by an Admin.");
			SendClientMessageToAll(COLOR_AQUA, "You will now receive Sextuple payments after working on your job! (Ex: $10,000 -> $20,000) 2X!");
		}
		case 7:
		{
			format(string, sizeof(string), "AdmWarning: %s has just enabled the Septuple(7) Salary feature.", GetPlayerNameEx(playerid));
			SAM(COLOR_YELLOW, string, 2);

			SendClientMessageToAll(COLOR_LIGHTGREEN, "Septuple Salary has been enabled by an Admin.");
			SendClientMessageToAll(COLOR_AQUA, "You will now receive Septuple payments after working on your job! (Ex: $10,000 -> $20,000) 2X!");
		}
		case 8:
		{
			format(string, sizeof(string), "AdmWarning: %s has just enabled the Octuple(8) Salary feature.", GetPlayerNameEx(playerid));
			SAM(COLOR_YELLOW, string, 2);

			SendClientMessageToAll(COLOR_LIGHTGREEN, "Octuple Salary has been enabled by an Admin.");
			SendClientMessageToAll(COLOR_AQUA, "You will now receive Octuple payments after working on your job! (Ex: $10,000 -> $20,000) 2X!");
		}
		case 9:
		{
			format(string, sizeof(string), "AdmWarning: %s has just enabled the Nintuple(9) Salary feature.", GetPlayerNameEx(playerid));
			SAM(COLOR_YELLOW, string, 2);

			SendClientMessageToAll(COLOR_LIGHTGREEN, "Nintuple Salary has been enabled by an Admin.");
			SendClientMessageToAll(COLOR_AQUA, "You will now receive Nintuple payments after working on your job! (Ex: $10,000 -> $20,000) 2X!");
		}
		case 10:
		{
			format(string, sizeof(string), "AdmWarning: %s has just enabled the Tentuple(10) Salary feature.", GetPlayerNameEx(playerid));
			SAM(COLOR_YELLOW, string, 2);

			SendClientMessageToAll(COLOR_LIGHTGREEN, "Tentuple Salary has been enabled by an Admin.");
			SendClientMessageToAll(COLOR_AQUA, "You will now receive Tentuple payments after working on your job! (Ex: $10,000 -> $20,000) 2X!");
		}
	}
	Salary = level;
	DoubleSalary = 1;
	return 1;
}

CMD:addtoevent(playerid, params[])
{
	new targetid;

    if(pData[playerid][pAdmin] < 4)// && pData[playerid][pEventMod] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /addtoevent [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	/*if(!IsPlayerSpawned(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is either not spawned, or spectating.");
	}*/
	if(!EventInfo[eReady])
	{
	    return SCM(playerid, COLOR_SYNTAX, "There are no active events which you can add this player to.");
	}
	if(pData[targetid][pJoinedEvent])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This player is already in the event.");
	}
	if(pData[playerid][pPaintball])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is currently playing paintball.");
	}
	
	SetPlayerInEvent(targetid);

	SM(targetid, COLOR_WHITE, "** %s has added you to the event.", GetRPName(playerid));
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has added %s to the event.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:olisthelpers(playerid, params[])
{
    if(pData[playerid][pAdmin] < 6 && pData[playerid][pHelper] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	mysql_tquery(connectionID, "SELECT username, lastlogin, helperlevel FROM users WHERE helperlevel > 0 ORDER BY lastlogin DESC", "OnQueryFinished", "ii", THREAD_LIST_HELPERS, playerid);
	return 1;
}

CMD:oadmins(playerid, params[])
{
    if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	mysql_tquery(connectionID, "SELECT username, lastlogin, adminlevel FROM users WHERE adminlevel > 0 ORDER BY lastlogin DESC", "OnQueryFinished", "ii", THREAD_LIST_ADMINS, playerid);
	return 1;
}

CMD:selldynamics(playerid, params[])
{
	new houses, garages, businesses;

	if(!IsPlayerAdmin(playerid))
	{
	    return SCM(playerid, COLOR_WHITE, "You are not authorized to use this command.");
	}

	for(new i = 0; i < MAX_HOUSES; i ++)
	{
	    if(HouseInfo[i][hExists])
	    {
	        SetHouseOwner(i, INVALID_PLAYER_ID);
	        houses++;
	    }
	}

	for(new i = 0; i < MAX_GARAGES; i ++)
	{
	    if(GarageInfo[i][gExists])
	    {
	        SetGarageOwner(i, INVALID_PLAYER_ID);
	        garages++;
	    }
	}

	for(new i = 0; i < MAX_BUSINESSES; i ++)
	{
	    if(BusinessInfo[i][bExists])
	    {
	        SetBusinessOwner(i, INVALID_PLAYER_ID);
	        businesses++;
	    }
	}

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has sold all properties.", GetRPName(playerid));
	SM(playerid, COLOR_WHITE, "** You have sell %i houses, %i garages and %i businesses.", houses, garages, businesses);
	return 1;
}

CMD:sellinactive(playerid, params[])
{
	new houses, garages, businesses;

    if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	for(new i = 0; i < MAX_HOUSES; i ++)
	{
	    if(HouseInfo[i][hExists] && HouseInfo[i][hOwnerID] > 0 && (gettime() - HouseInfo[i][hTimestamp]) > 1209600)
	    {
	        SetHouseOwner(i, INVALID_PLAYER_ID);
	        houses++;
	    }
	}

	for(new i = 0; i < MAX_GARAGES; i ++)
	{
	    if(GarageInfo[i][gExists] && GarageInfo[i][gOwnerID] > 0 && (gettime() - GarageInfo[i][gTimestamp]) > 1209600)
	    {
	        SetGarageOwner(i, INVALID_PLAYER_ID);
	        garages++;
	    }
	}

	for(new i = 0; i < MAX_BUSINESSES; i ++)
	{
	    if(BusinessInfo[i][bExists] && BusinessInfo[i][bOwnerID] > 0 && (gettime() - BusinessInfo[i][bTimestamp]) > 1209600)
	    {
	        SetBusinessOwner(i, INVALID_PLAYER_ID);
	        businesses++;
	    }
	}

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has sold all inactive properties.", GetRPName(playerid));
	SM(playerid, COLOR_WHITE, "** You have sold %i inactive houses, %i inactive garages and %i inactive businesses.", houses, garages, businesses);
	return 1;
}

CMD:caplimit(playerid, params[])
{
	new option[8], amount;
    if(pData[playerid][pAdmin] < 7 && pData[playerid][pGangMod] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[8]i", option, amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /caplimit [turfs/points] [amount]");
	}
    if(!strcmp(option, "turfs", true))
	{
	    if(0 > amount > MAX_TURFS)
		{
		    return SM(playerid, COLOR_SYNTAX, "Amount must be above 0 and less then %i.", MAX_TURFS);
		}
		MaxCapCount[0] = amount;
	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the max active turf claim limit for gangs to %i.", GetRPName(playerid), amount);
	}
	if(!strcmp(option, "points", true))
	{
	    if(0 > amount > MAX_POINTS)
		{
		    return SM(playerid, COLOR_SYNTAX, "Amount must be above 0 and less then %i.", MAX_POINTS);
		}
	    MaxCapCount[1] = amount;
	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the max active point cap limit for gangs to %i.", GetRPName(playerid), amount);
	}
	SaveServerInfo();
	return 1;
}

CMD:setmotd(playerid, params[])
{
    if(pData[playerid][pAdmin] < 6 && pData[playerid][pHelper] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	new option[8], newval[128];
	if(sscanf(params, "s[8]s[128]", option, newval))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setmotd [admin/helper/global] [text ('none' to reset)]");
	}
	if(strfind(newval, "|") != -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You may not include the '|' character in the MOTD.");
	}
	if(!strcmp(option, "global", true))
	{
	    if(pData[playerid][pAdmin] < 7) return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
 		if(!strcmp(newval, "none", true))
		{
	    	gServerMOTD[0] = 0;
	    	SAM(COLOR_LIGHTRED, "AdmCmd: %s has reset the global MOTD.", GetRPName(playerid));
		}
		else
		{
	    	strcpy(gServerMOTD, newval, 128);
	    	SAM(COLOR_YELLOW, "AdmCmd: %s has set the global MOTD to '%s'", GetRPName(playerid), gServerMOTD);
		}
	}
	if(!strcmp(option, "admin", true))
	{
	    if(pData[playerid][pAdmin] < 7) return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
 		if(!strcmp(newval, "none", true))
		{
	    	adminMOTD[0] = 0;
      		SAM(COLOR_LIGHTRED, "AdmCmd: %s has reset the admin MOTD.", GetRPName(playerid));
		}
		else
		{
	    	strcpy(adminMOTD, newval, 128);
	    	SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the admin MOTD to '%s'", GetRPName(playerid), adminMOTD);
		}
	}
	if(!strcmp(option, "helper", true))
	{
 		if(!strcmp(newval, "none", true))
		{
	    	helperMOTD[0] = 0;
	    	SAM(COLOR_LIGHTRED, "AdmCmd: %s has reset the helper MOTD.", GetRPName(playerid));
		}
		else
		{
	    	strcpy(helperMOTD, newval, 128);
	    	SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the helper MOTD to '%s'", GetRPName(playerid), helperMOTD);
		}
	}

	SaveServerInfo();
	return 1;
}

CMD:motd(playerid, params[])
{
	if(!isnull(gServerMOTD))
	{
		SM(playerid, COLOR_YELLOW, "News: %s", gServerMOTD);
	}
	if(!isnull(adminMOTD) && pData[playerid][pAdmin] > 0)
	{
		SM(playerid, COLOR_LIGHTRED, "Admin News: %s", adminMOTD);
	}
	if(!isnull(helperMOTD) && (pData[playerid][pHelper] > 0 || pData[playerid][pAdmin] > 0))
	{
		SM(playerid, COLOR_AQUA, "Helper News: %s", helperMOTD);
	}
	if(pData[playerid][pGang] >= 0 && strcmp(GangInfo[pData[playerid][pGang]][gMOTD], "None", true) != 0)
	{
		SM(playerid, COLOR_GREEN, "Gang News: %s", GangInfo[pData[playerid][pGang]][gMOTD]);
	}
	return 1;
}

CMD:setstaff(playerid, params[])
{
	new targetid, option[16], status;

    if(pData[playerid][pAdmin] < 8)
	{
	    return SCM(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[16]i", targetid, option, status) || !(0 <= status <= 1))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /setstaff [playerid] [option] [status (0/1)]");
		SCM(playerid, COLOR_WHITE, "Available options: FactionMod, GangMod, BanAppealer, Developer, DynamicAdmin, AdminPersonnel");
		SCM(playerid, COLOR_WHITE, "PublicRelation(PR), Security(SEC)");
		return 1;
	}
    if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
    if(!strcmp(option, "developer", true))
	{
        if(strcmp(pData[playerid][pUsername], "Stewart_Abner", true) != 0 || strcmp(pData[playerid][pUsername], "Stewart", true) != 0)
		{
			return SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command. Only Stewart can use this.");
		}
	    pData[targetid][pDeveloper] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET developer = %i WHERE uid = %i", pData[targetid][pDeveloper], pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SAM(COLOR_LIGHTRED, "AdmCmd: %s has made %s a developer.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has made %s (uid: %i) a developer.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

	        SM(playerid, COLOR_AQUA, "You have made %s a "SVRCLR"developer{CCFFFF}.", GetRPName(targetid));
		    SM(targetid, COLOR_AQUA, "%s has made you a "SVRCLR"developer{CCFFFF}.", GetRPName(playerid));
		}
		else
	    {
	        SAM(COLOR_LIGHTRED, "AdmCmd: %s has removed %s's developer status.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) developer status.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

	        SM(playerid, COLOR_AQUA, "You have removed %s's "SVRCLR"developer{CCFFFF} status.", GetRPName(targetid));
		    SM(targetid, COLOR_AQUA, "%s has removed your "SVRCLR"developer{CCFFFF} status.", GetRPName(playerid));
		}
	}
	else if(!strcmp(option, "dynamicadmin", true))
	{
        if(!pData[playerid][pDynamicAdmin] && strcmp(pData[playerid][pUsername], "Stewart_Abner", true) != 0 && strcmp(pData[playerid][pUsername], "Stewart", true) != 0)
	    {
	    return SCM(playerid, COLOR_GREY, "You are not authorized to use this command.");
 	    }
	    pData[targetid][pDynamicAdmin] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET dynamicadmin = %i WHERE uid = %i", pData[targetid][pDynamicAdmin], pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SAM(COLOR_LIGHTRED, "AdmCmd: %s has made %s a dynamic admin.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has made %s (uid: %i) a dynamic admin.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

	        SM(playerid, COLOR_AQUA, "You have made %s a "SVRCLR"dynamic admin{CCFFFF}.", GetRPName(targetid));
		    SM(targetid, COLOR_AQUA, "%s has made you a "SVRCLR"dynamic admin{CCFFFF}.", GetRPName(playerid));
		}
		else
	    {
	        SAM(COLOR_LIGHTRED, "AdmCmd: %s has removed %s's dynamic admin status.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) dynamic admin status.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

	        SM(playerid, COLOR_AQUA, "You have removed %s's "SVRCLR"dynamic admin{CCFFFF} status.", GetRPName(targetid));
		    SM(targetid, COLOR_AQUA, "%s has removed your "SVRCLR"dynamic admin{CCFFFF} status.", GetRPName(playerid));
		}
	}
	if(!strcmp(option, "pr", true))
	{
        if(!pData[playerid][pStaffLeader] && !pData[playerid][pPublicRelation])
		{
			return SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command");
		}
	    pData[targetid][pPublicRelation] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET publicrelation = %i WHERE uid = %i", pData[targetid][pPublicRelation], pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SAM(COLOR_LIGHTRED, "AdmCmd: %s has made %s a Public Relation Member.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has made %s (uid: %i) a Public Relation Member.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

	        SM(playerid, COLOR_AQUA, "You have made %s a "SVRCLR"Public Relation Member{CCFFFF}.", GetRPName(targetid));
		    SM(targetid, COLOR_AQUA, "%s has made you a "SVRCLR"Public Relation Member{CCFFFF}.", GetRPName(playerid));
		}
		else
	    {
	        SAM(COLOR_LIGHTRED, "AdmCmd: %s has removed %s's Public Relation Member status.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) Public Relation Member status.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

	        SM(playerid, COLOR_AQUA, "You have removed %s's "SVRCLR"Public Relation Member{CCFFFF} status.", GetRPName(targetid));
		    SM(targetid, COLOR_AQUA, "%s has removed your "SVRCLR"Public Relation Member{CCFFFF} status.", GetRPName(playerid));
		}
	}
	if(!strcmp(option, "sec", true))
	{
        if(!pData[playerid][pSecurity] && !pData[playerid][pStaffLeader])
		{
			return SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command. Only Stewart can use this.");
		}
	    pData[targetid][pSecurity] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET security = %i WHERE uid = %i", pData[targetid][pSecurity], pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SAM(COLOR_LIGHTRED, "AdmCmd: %s has made %s a security team member.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has made %s (uid: %i) a security team member.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

	        SM(playerid, COLOR_AQUA, "You have made %s a "SVRCLR"security team member{CCFFFF}.", GetRPName(targetid));
		    SM(targetid, COLOR_AQUA, "%s has made you a "SVRCLR"security team member{CCFFFF}.", GetRPName(playerid));
		}
		else
	    {
	        SAM(COLOR_LIGHTRED, "AdmCmd: %s has removed %s's security team member status.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) security team member status.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

	        SM(playerid, COLOR_AQUA, "You have removed %s's "SVRCLR"security team member{CCFFFF} status.", GetRPName(targetid));
		    SM(targetid, COLOR_AQUA, "%s has removed your "SVRCLR"security team member{CCFFFF} status.", GetRPName(playerid));
		}
	}
	else if(!strcmp(option, "factionmod", true))
	{
	    pData[targetid][pFactionMod] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET factionmod = %i WHERE uid = %i", pData[targetid][pFactionMod], pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SAM(COLOR_LIGHTRED, "AdmCmd: %s has made %s a faction moderator.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has made %s (uid: %i) a faction moderator.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

	        SM(playerid, COLOR_AQUA, "You have made %s a "SVRCLR"faction moderator{CCFFFF}.", GetRPName(targetid));
		    SM(targetid, COLOR_AQUA, "%s has made you a "SVRCLR"faction moderator{CCFFFF}.", GetRPName(playerid));
		}
		else
	    {
	        SAM(COLOR_LIGHTRED, "AdmCmd: %s has removed %s's faction moderator status.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) faction moderator status.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

	        SM(playerid, COLOR_AQUA, "You have removed %s's "SVRCLR"faction moderator{CCFFFF} status.", GetRPName(targetid));
		    SM(targetid, COLOR_AQUA, "%s has removed your "SVRCLR"faction moderator{CCFFFF} status.", GetRPName(playerid));
		}
	}
	else if(!strcmp(option, "adminpersonnel", true))
	{
	    pData[targetid][pAdminPersonnel] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET adminpersonnel = %i WHERE uid = %i", pData[targetid][pAdminPersonnel], pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SAM(COLOR_LIGHTRED, "AdmCmd: %s has made %s a Admin Personnel.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has made %s (uid: %i) a Admin Personnel.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

	        SCMf(playerid, COLOR_WHITE, "You have made %s a {FFA500}Admin Personnel{FFFFFF}.", GetRPName(targetid));
		    SCMf(targetid, COLOR_WHITE, "%s has made you a {FFA500}Admin Personnel{FFFFFF}.", GetRPName(playerid));
		}
		else
	    {
	        SAM(COLOR_LIGHTRED, "AdmCmd: %s has removed %s's Admin Personnel status.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) Event Moderator status.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

	        SCMf(playerid, COLOR_WHITE, "You have removed %s's {FFA500}Admin Personnel{FFFFFF} status.", GetRPName(targetid));
		    SCMf(targetid, COLOR_WHITE, "%s has removed your {FFA500}Admin Personnel{FFFFFF} status.", GetRPName(playerid));
		}
	}
	else if(!strcmp(option, "eventmod", true))
	{
	    pData[targetid][pEventMod] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET eventmod = %i WHERE uid = %i", pData[targetid][pEventMod], pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SAM(COLOR_LIGHTRED, "AdmCmd: %s has made %s a Event Moderator.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has made %s (uid: %i) a Event Moderator.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

	        SCMf(playerid, COLOR_WHITE, "You have made %s a {FFA500}Event Moderator{FFFFFF}.", GetRPName(targetid));
		    SCMf(targetid, COLOR_WHITE, "%s has made you a {FFA500}Event Moderator{FFFFFF}.", GetRPName(playerid));
		}
		else
	    {
	        SAM(COLOR_LIGHTRED, "AdmCmd: %s has removed %s's Event Moderator status.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) Event Moderator status.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

	        SCMf(playerid, COLOR_WHITE, "You have removed %s's {FFA500}Event Moderator{FFFFFF} status.", GetRPName(targetid));
		    SCMf(targetid, COLOR_WHITE, "%s has removed your {FFA500}Event Moderator{FFFFFF} status.", GetRPName(playerid));
		}
	}
	else if(!strcmp(option, "gangmod", true))
	{
	    pData[targetid][pGangMod] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gangmod = %i WHERE uid = %i", pData[targetid][pGangMod], pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SAM(COLOR_LIGHTRED, "AdmCmd: %s has made %s a gang moderator.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has made %s (uid: %i) a gang moderator.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

	        SM(playerid, COLOR_AQUA, "You have made %s a "SVRCLR"gang moderator{CCFFFF}.", GetRPName(targetid));
		    SM(targetid, COLOR_AQUA, "%s has made you a "SVRCLR"gang moderator{CCFFFF}.", GetRPName(playerid));
		}
		else
	    {
	        SAM(COLOR_LIGHTRED, "AdmCmd: %s has removed %s's gang moderator status.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) gang moderator status.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

	        SM(playerid, COLOR_AQUA, "You have removed %s's "SVRCLR"gang moderator{CCFFFF} status.", GetRPName(targetid));
		    SM(targetid, COLOR_AQUA, "%s has removed your "SVRCLR"gang moderator{CCFFFF} status.", GetRPName(playerid));
		}
	}
	else if(!strcmp(option, "banappealer", true))
	{
	    pData[targetid][pBanAppealer] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET banappealer = %i WHERE uid = %i", pData[targetid][pBanAppealer], pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SAM(COLOR_LIGHTRED, "AdmCmd: %s has made %s a ban appealer.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has made %s (uid: %i) a ban appealer.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

	        SM(playerid, COLOR_AQUA, "You have made %s a "SVRCLR"ban appealer{CCFFFF}.", GetRPName(targetid));
		    SM(targetid, COLOR_AQUA, "%s has made you a "SVRCLR"ban appealer{CCFFFF}.", GetRPName(playerid));
		}
		else
	    {
	        SAM(COLOR_LIGHTRED, "AdmCmd: %s has removed %s's ban appealer status.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) ban appealer status.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

	        SM(playerid, COLOR_AQUA, "You have removed %s's "SVRCLR"ban appealer{CCFFFF} status.", GetRPName(targetid));
		    SM(targetid, COLOR_AQUA, "%s has removed your "SVRCLR"ban appealer{CCFFFF} status.", GetRPName(playerid));
		}
	}

	return 1;
}

CMD:makestaffleader(playerid, params[])
{
	new targetid, option[16], status, string[200];
	if(pData[playerid][pAdmin] < 10)
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[16]i", targetid, option, status) || !(0 <= status <= 1))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /makestaffleader [playerid] [option] [status (0/1)]");
		SCM(playerid, COLOR_WHITE, "Available options: FactionMod, GangMod, BanAppealer, AdminPersonnel");
		SCM(playerid, COLOR_WHITE, "PublicRelation(PR), Security(SEC)");
		return 1;
	}
	if(!pData[targetid][pLogged])
	{
		return SCM(playerid, COLOR_SYNTAX, "That player is not logged-on!");
	}
	if(!IsPlayerConnected(targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "That player is not online!");
	}
	if(!strcmp(option, "factionmod", true))
	{
		pData[targetid][pStaffLeader] = status;

		if(status == 0)
		{
			format(string, sizeof(string), "Your Faction Moderator Leader role has been "RED"reversed{CCFFFF} by Administrator %s.", GetPlayerNameEx(playerid));
			SCM(playerid, COLOR_AQUA, string);
			strcpy(StaffInfo[pFactionModLead], "None", MAX_PLAYER_NAME);
		}
		else
		{
			strcpy(StaffInfo[pFactionModLead], GetPlayerNameEx(targetid), MAX_PLAYER_NAME);
			format(string, sizeof(string), ""GREEN"[SERVER]"WHITE"Administrator %s has made you the Faction Moderation Team Leader. Happy Gaming!!!", GetPlayerNameEx(playerid));
			SCM(playerid, -1, string);
		}
		SaveStaffLeaderName();
	}
	else if(!strcmp(option, "gangmod", true))
	{
		pData[playerid][pStaffLeader] = status;

		if(status == 0)
		{
			format(string, sizeof(string), "Your Gang Moderator Leader role has been "RED"reversed{CCFFFF} by Administrator %s.", GetPlayerNameEx(playerid));
			SCM(playerid, COLOR_AQUA, string);
			strcpy(StaffInfo[pGangModLead], "None", MAX_PLAYER_NAME);
		}
		else
		{
			strcpy(StaffInfo[pGangModLead], GetPlayerNameEx(targetid), MAX_PLAYER_NAME);
			format(string, sizeof(string), ""GREEN"[SERVER]"WHITE"Administrator %s has made you the Gang Moderation Team Leader. Happy Gaming!!!", GetPlayerNameEx(playerid));
			SCM(playerid, -1, string);
		}
		SaveStaffLeaderName();
	}
	else if(!strcmp(option, "banappealer", true))
	{
		pData[playerid][pStaffLeader] = status;

		if(status == 0)
		{
			format(string, sizeof(string), "Your Ban Appealer Leader role has been "RED"reversed{CCFFFF} by Administrator %s.", GetPlayerNameEx(playerid));
			SCM(playerid, COLOR_AQUA, string);
			strcpy(StaffInfo[pBanAppealerLead], "None", MAX_PLAYER_NAME);
		}
		else
		{
			strcpy(StaffInfo[pBanAppealerLead], GetPlayerNameEx(targetid), MAX_PLAYER_NAME);
			format(string, sizeof(string), ""GREEN"[SERVER]"WHITE"Administrator %s has made you the Ban Appealer Team Leader. Happy Gaming!!!", GetPlayerNameEx(playerid));
			SCM(playerid, -1, string);
		}
		SaveStaffLeaderName();
	}
	else if(!strcmp(option, "adminpersonnel", true))
	{
		pData[playerid][pStaffLeader] = status;

		if(status == 0)
		{
			format(string, sizeof(string), "Your Admin Personnel Director role has been "RED"reversed{CCFFFF} by Administrator %s.", GetPlayerNameEx(playerid));
			SCM(playerid, COLOR_AQUA, string);
			strcpy(StaffInfo[pAdminPersonnelLead], "None", MAX_PLAYER_NAME);
		}
		else
		{
			strcpy(StaffInfo[pAdminPersonnelLead], GetPlayerNameEx(targetid), MAX_PLAYER_NAME);
			format(string, sizeof(string), ""GREEN"[SERVER]"WHITE"Administrator %s has made you the Admin Personnel Director. Happy Gaming!!!", GetPlayerNameEx(playerid));
			SCM(playerid, -1, string);
		}
		SaveStaffLeaderName();
	}
	else if(!strcmp(option, "pr", true))
	{
		pData[playerid][pStaffLeader] = status;

		if(status == 0)
		{
			format(string, sizeof(string), "Your Public Relation Director role has been "RED"reversed{CCFFFF} by Administrator %s.", GetPlayerNameEx(playerid));
			SCM(playerid, COLOR_AQUA, string);
			strcpy(StaffInfo[pPublicRelationLead], "None", MAX_PLAYER_NAME);
		}
		else
		{
			strcpy(StaffInfo[pPublicRelationLead], GetPlayerNameEx(targetid), MAX_PLAYER_NAME);
			format(string, sizeof(string), ""GREEN"[SERVER]"WHITE"Administrator %s has made you the Public Relation Team Leader. Happy Gaming!!!", GetPlayerNameEx(playerid));
			SCM(playerid, -1, string);
		}
		SaveStaffLeaderName();
	}
	else if(!strcmp(option, "sec", true))
	{
		pData[playerid][pStaffLeader] = status;

		if(status == 0)
		{
			format(string, sizeof(string), "Your Security Team Director role has been "RED"reversed{CCFFFF} by Administrator %s.", GetPlayerNameEx(playerid));
			SCM(playerid, COLOR_AQUA, string);
			strcpy(StaffInfo[pSecurityLead], "None", MAX_PLAYER_NAME);
		}
		else
		{
			strcpy(StaffInfo[pSecurityLead], GetPlayerNameEx(targetid), MAX_PLAYER_NAME);
			format(string, sizeof(string), ""GREEN"[SERVER]"WHITE"Administrator %s has made you the Security Team Leader. Happy Gaming!!!", GetPlayerNameEx(playerid));
			SCM(playerid, -1, string);
		}
		SaveStaffLeaderName();
	}
	return 1;
}

CMD:updates(playerid,params[])
{
	ShowPlayerDialog(playerid, DIALOG_UPDATES, DIALOG_STYLE_TABLIST_HEADERS, "Updates\tDate",// str, "Okay", "");
	"GTA: A:RP v0.1.73\tJanuary 11, 2022\n\
	GTA: A:RP v0.1.692\tJanuary 11, 2022\n\
	GTA: A:RP v0.1.69\tJanuary 11, 2022\n\
	GTA: A:RP v0.1.685\tJanuary 11, 2022\n\
	GTA: A:RP v0.1.68\tJanuary 11, 2022\n\
	GTA: A:RP v0.1.675\tJanuary 11, 2022\n\
	GTA: A:RP v0.1.66\tJanuary 11, 2022\n\
	GTA: A:RP v0.1.62\tJanuary 11, 2022\n\
	GTA: A:RP v0.1.613\tJanuary 7, 2022\n\
	GTA: A:RP v0.1.59\tJanuary 4, 2022\n\
	GTA: A:RP v0.1.586\tJanuary 3, 2022\n\
	"GREEN"Next {CCFFFF}Page "RED">>",
	"Okay", "");
	return 1;
}

CMD:update(playerid, params[])
{
	mysql_tquery(connectionID, "SELECT * FROM changes ORDER BY slot", "OnQueryFinished", "ii", THREAD_LIST_CHANGES, playerid);
	return 1;
}

CMD:changelist(playerid, params[])
{
	new slot, option[10], param[64];

    if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[10]S()[64]", option, param))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /changelist [view | edit | clear]");
	}
	if(!strcmp(option, "view", true))
	{
	    mysql_tquery(connectionID, "SELECT * FROM changes ORDER BY slot", "OnQueryFinished", "ii", THREAD_LIST_CHANGES, playerid);
	}
	else if(!strcmp(option, "edit", true))
	{
	    if(sscanf(param, "is[64]", slot, param))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /changelist [edit] [slot (1-10)] [text]");
		}
		if(!(1 <= slot <= 10))
		{
	    	return SCM(playerid, COLOR_SYNTAX, "Invalid slot.");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO changes VALUES(%i, '%e') ON DUPLICATE KEY UPDATE text = '%e'", slot, param, param);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "** Change text for slot %i changed to '%s'.", slot, param);
	}
	else if(!strcmp(option, "clear", true))
	{
	    if(sscanf(param, "i", slot))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /changelist [clear] [slot (1-10)]");
		}
		if(!(1 <= slot <= 10))
		{
	    	return SCM(playerid, COLOR_SYNTAX, "Invalid slot.");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM changes WHERE slot = %i", slot);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "** Change text for slot %i cleared.", slot);
	}

	return 1;
}

CMD:forceaduty(playerid, params[])
{
	new targetid;

	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /forceaduty [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(pData[targetid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player needs to be at least a level 2 administrator.");
	}
	if(pData[targetid][pAdmin] > pData[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be forced into admin duty.");
	}

	if(!pData[targetid][pAdminDuty])
	{
		SM(targetid, COLOR_WHITE, "** %s has forced you to be on admin duty.", GetRPName(playerid));
	}
	else
	{
	    SM(targetid, COLOR_WHITE, "** %s has forced you to be off admin duty.", GetRPName(playerid));
	}

	callcmd::aduty(targetid, "\1");
	return 1;
}

CMD:listhelp(playerid, params[])
{
    if(pData[playerid][pHelper] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	SCM(playerid, SERVER_COLOR, "Help Requests:");

	foreach(new i : Player)
	{
	    if(!isnull(pData[i][pHelpRequest]))
	    {
	        SM(playerid, COLOR_GREY2, "** %s[%i] asks: %s", GetRPName(i), i, pData[i][pHelpRequest]);
		}
	}

	SCM(playerid, COLOR_AQUA, "** Use /accepthelp [id] or /denyhelp [id] to handle help requests.");
	SCM(playerid, COLOR_AQUA, "** Use /answerhelp [id] [msg] to PM an answer without the need to teleport.");
	return 1;
}

CMD:clearall(playerid, params[])
{
    if (pData[playerid][pAdmin] >= 4)
	{
		SCM(playerid, COLOR_SYNTAX, "You are not authorized to use that command!");
    }
    foreach(new i : Player)
	{
    	pData[i][pWantedLevel] = 0;

  		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM charges WHERE uid = %i", pData[i][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = 0 WHERE uid = %i", pData[i][pID]);
		mysql_tquery(connectionID, queryBuffer);
    }
    SAM(COLOR_LIGHTRED, "AdmCmd: %s has cleared everyone's Wanted Level.", GetRPName(playerid));
    return 1;
}

CMD:accepthelp(playerid, params[])
{
	new targetid;

	if(pData[playerid][pHelper] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /accepthelp [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(isnull(pData[targetid][pHelpRequest]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't requested any help since they connected.");
	}

	if(pData[playerid][pTagType] == TAG_NORMAL)
	{
 		SetPlayerSpecialTag(playerid, TAG_HELPER);
	}

	if(!pData[playerid][pAcceptedHelp])
	{
		SavePlayerVariables(playerid);
	}

	TeleportToPlayer(playerid, targetid, false);

	TogglePlayerControllable(targetid, 0);
	SetTimerEx("UnfreezeNewbie", 5000, false, "i", targetid);

	SetPlayerHealth(playerid, 32767);

	pData[playerid][pHelpRequests]++;
	pData[playerid][pAcceptedHelp] = 1;
	pData[targetid][pHelpRequest][0] = 0;

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET helprequests = %i WHERE uid = %i", pData[playerid][pHelpRequests], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(playerid, COLOR_WHITE, "** You accepted %s's help request and were sent to their position. /return to go back.", GetRPName(targetid));
	SM(targetid, COLOR_YELLOW, "%s has accepted your help request. They are now assisting you.", GetRPName(playerid));

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has accepted help request %s.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:denyhelp(playerid, params[])
{
	new targetid;

	if(pData[playerid][pHelper] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /denyhelp [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(isnull(pData[targetid][pHelpRequest]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't requested any help since they connected.");
	}

	pData[targetid][pHelpRequest][0] = 0;

	SM(playerid, COLOR_WHITE, "** You denied %s's help request.", GetRPName(targetid));
	SM(targetid, COLOR_LIGHTRED, "** %s has denied your help request.", GetRPName(playerid));

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has denied help request %s.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

/*CMD:sta(playerid, params[])
{
    new targetid;

	if(pData[playerid][pHelper] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /sta [playerid] (Sends /gethelp to admins)");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(isnull(pData[targetid][pHelpRequest]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't requested any help since they connected.");
	}

    AddReportToQueue(targetid, pData[targetid][pHelpRequest]);
    pData[targetid][pHelpRequest][0] = 0;

	SM(playerid, COLOR_WHITE, "** You sent %s's help request to all online admins.", GetRPName(targetid));
	SM(targetid, COLOR_AQUA, "** %s has sent your help request to all online admins.", GetRPName(playerid));
	return 1;
}*/

CMD:return(playerid, params[])
{
    if(pData[playerid][pHelper] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAcceptedHelp])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You haven't accepted any help requests.");
	}

    if(pData[playerid][pTagType] == TAG_HELPER)
	{
	    SetPlayerSpecialTag(playerid, TAG_NORMAL);
	}

	SetPlayerHealth(playerid, pData[playerid][pHealth]);
	SetScriptArmour(playerid, pData[playerid][pArmor]);

	SetPlayerPos(playerid, pData[playerid][pPosX], pData[playerid][pPosY], pData[playerid][pPosZ]);
	SetPlayerFacingAngle(playerid, pData[playerid][pPosA]);
	SetPlayerInterior(playerid, pData[playerid][pInterior]);
	SetPlayerVirtualWorld(playerid, pData[playerid][pWorld]);
	SetCameraBehindPlayer(playerid);

	SCM(playerid, COLOR_WHITE, "** You were returned to your previous position.");
    pData[playerid][pAcceptedHelp] = 0;
	return 1;
}

CMD:answerhelp(playerid, params[])
{
	new targetid, msg[128];

	if(pData[playerid][pHelper] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, msg))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /answerhelp [playerid] [message]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(isnull(pData[targetid][pHelpRequest]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't requested any help since they connected.");
	}

	pData[playerid][pHelpRequests]++;
	pData[targetid][pHelpRequest][0] = 0;

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET helprequests = %i WHERE uid = %i", pData[playerid][pHelpRequests], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

    SCM(playerid, COLOR_WHITE, "You");

	if(strlen(msg) > MAX_SPLIT_LENGTH)
	{
		SM(targetid, COLOR_YELLOW, "** Answer from Helper %s: %.*s... **", GetRPName(playerid), MAX_SPLIT_LENGTH, msg);
		SM(targetid, COLOR_YELLOW, "** Answer from Helper %s: ...%s **", GetRPName(playerid), msg[MAX_SPLIT_LENGTH]);
	}
	else
	{
	    SM(targetid, COLOR_YELLOW, "** Answer from Helper %s: %s **", GetRPName(playerid), msg);
	}

	SendHelperMessage(COLOR_LIGHTRED, "Helper: %s has answered %s's help request.", GetRPName(playerid), GetRPName(targetid));

	return 1;
}

CMD:c(playerid, params[])
{
	if(pData[playerid][pHelper] < 1 && pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /c [staff chat]");
	}
	if(pData[playerid][pToggleHelper])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't speak in the staff chat as you have it toggled.");
	}

	foreach(new i : Player)
	{
		if((pData[i][pHelper] > 0 || pData[playerid][pAdmin] > 0) && !pData[i][pToggleHelper])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
	            SendStaffMessage(0x42f4EEFF, "** %s %s: %.*s... **", GetStaffRank(playerid), GetRPName(playerid), MAX_SPLIT_LENGTH, params);
	            SendStaffMessage(0x42f4EEFF, "** %s: ...%s **", GetStaffRank(playerid), GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
				SendStaffMessage(0x42f4EEFF, "** %s %s: %s **", GetStaffRank(playerid), GetRPName(playerid), params);
			}
			return 1;
		}
	}
	return 1;
}

CMD:hh(playerid, params[])
{
	return callcmd::helperhelp(playerid, params);
}

CMD:hhelp(playerid, params[])
{
	return callcmd::helperhelp(playerid, params);
}


CMD:helperhelp(playerid, params[])
{
	new string[2048];
	if(pData[playerid][pHelper] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	if(pData[playerid][pHelper] >= 1)
	{
		strcat(string, "Trial Helper:"WHITE" /c, /listhelp, /accepthelp, /answerhelp, /prison, /oprison /denyhelp, /sta, /return.\n");
	}
    if(pData[playerid][pHelper] >= 2)
	{
		strcat(string, "Junior Helper:"WHITE" /nmute, /fine, /hmute, /gmute, /admute\n");
	}
    if(pData[playerid][pHelper] >= 3)
	{
		/*strcat(string, "Applcation System:"WHITE"  /reviewapp, /listapp, /acceptapp, /denyapp.\n");
		strcat(string, "Applcation System:"WHITE"  /ra, /la, /aa, /da.\n");*/
		strcat(string, "Senior Helper:"WHITE"  /olisthelpers, /checknewbies.\n");
	}
	if(pData[playerid][pHelper] >= 4)
	{
		strcat(string, "Junior Advisor:"WHITE" /na, /tn, /prisonic, /release.\n");
	}
	if(pData[playerid][pHelper] >= 5)
	{
		strcat(string, "General Advisor:"WHITE" /na, /tn, /spec, /kick, /fakekick.\n");
	}
	if(pData[playerid][pHelper] >= 6)
	{
		strcat(string, "Senior Advisor:"WHITE" /na, /tn, /setmotd.\n");
	}
	if(pData[playerid][pHelper] >= 7)
	{
		strcat(string, "Advisory Director:"WHITE" /na, /tn, /makehelper, /omakehelper.\n");
	}
	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Current commands on "SVRCLR"Alcazar City", string, "Close","");
	return 1;
}

#define INACTIVE_TIME				60 * 60 * 24 * 14 // 2 weeks
#define INACTIVE_TIME_2				60 * 60 * 24 * 21 // 3 weeks
CMD:myproperties(playerid, params[]) return callcmd::properties(playerid, params);
CMD:properties(playerid, params[])
{
	new type[16];

	SCMf(playerid, COLOR_WHITE, "|_______________%s's Properties_______________|", GetPlayerNameEx(playerid));

    for(new i = 0; i < MAX_HOUSES; i ++)
    {
        if(HouseInfo[i][hExists] && IsHouseOwner(playerid, i))
        {
            if(HouseInfo[i][hType] == -1)
			{
			    type = "Other";
			}
			else
			{
			    strcpy(type, houseInteriors[HouseInfo[i][hType]][intClass]);
			}

			if(pData[playerid][pDonator] >= 2) {
				if((gettime() - HouseInfo[i][hTimestamp]) > INACTIVE_TIME_2)
				{
					//SCMf(playerid, COLOR_GREY2, "Your %s (ID: %d) house in %s is currently marked as {FFA500}Inactive{C8C8C8}.", type, i, GetZoneName(HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ]));
					SCMf(playerid, COLOR_WHITE, "%s(ID: %d) - Location: %s - Status: {FFA500}Inactive", type, i, GetZoneName(HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ]));
				}
				else
				{
					//SCMf(playerid, COLOR_GREY2, "Your %s (ID: %d) house in %s is currently marked as {FFFFFF}Active{C8C8C8}.", type, i, GetZoneName(HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ]));
					SCMf(playerid, COLOR_WHITE, "%s"YELLOW"(ID: %d)"WHITE" - Location: %s - Status: "GREEN"Active", type, i, GetZoneName(HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ]));
				}
			} else {
				if((gettime() - HouseInfo[i][hTimestamp]) > INACTIVE_TIME)
				{
					//SCMf(playerid, COLOR_GREY2, "Your %s (ID: %d) house in %s is currently marked as {FFA500}Inactive{C8C8C8}.", type, i, GetZoneName(HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ]));
					SCMf(playerid, COLOR_WHITE, "%s(ID: %d) - Location: %s - Status: {FFA500}Inactive", type, i, GetZoneName(HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ]));
				}
				else
				{
					//SCMf(playerid, COLOR_GREY2, "Your %s (ID: %d) house in %s is currently marked as {FFFFFF}Active{C8C8C8}.", type, i, GetZoneName(HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ]));
					SCMf(playerid, COLOR_WHITE, "%s"YELLOW"(ID: %d)"WHITE" - Location: %s - Status: "GREEN"Active", type, i, GetZoneName(HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ]));
				}
			}
		}
	}

	for(new i = 0; i < MAX_GARAGES; i ++)
    {
        if(GarageInfo[i][gExists] && IsGarageOwner(playerid, i))
        {
			if(pData[playerid][pDonator] >= 2) {
				if((gettime() - GarageInfo[i][gTimestamp]) > INACTIVE_TIME_2)
				{
					//SCMf(playerid, COLOR_GREY2, "Your %s (ID: %d) garage in %s is currently marked as {FFA500}Inactive{C8C8C8}.", garageInteriors[GarageInfo[i][gType]][intName], i, GetZoneName(GarageInfo[i][gPosX], GarageInfo[i][gPosY], GarageInfo[i][gPosZ]));
					SCMf(playerid, COLOR_WHITE, "%s(ID: %d) - Location: %s - Status: {FFA500}Inactive", garageInteriors[GarageInfo[i][gType]][intName], i, GetZoneName(GarageInfo[i][gPosX], GarageInfo[i][gPosY], GarageInfo[i][gPosZ]));
				}
				else
				{
					//SCMf(playerid, COLOR_GREY2, "Your %s (ID: %d) garage in %s is currently marked as {FFFFFF}Active{C8C8C8}.", garageInteriors[GarageInfo[i][gType]][intName], GetZoneName(GarageInfo[i][gPosX], GarageInfo[i][gPosY], GarageInfo[i][gPosZ]));
					SCMf(playerid, COLOR_WHITE, "%s(ID: %d) - Location: %s - Status: "GREEN"Active", garageInteriors[GarageInfo[i][gType]][intName], i, GetZoneName(GarageInfo[i][gPosX], GarageInfo[i][gPosY], GarageInfo[i][gPosZ]));
				}
			} else {
				if((gettime() - GarageInfo[i][gTimestamp]) > INACTIVE_TIME)
				{
					//SCMf(playerid, COLOR_GREY2, "Your %s (ID: %d) garage in %s is currently marked as {FFA500}Inactive{C8C8C8}.", garageInteriors[GarageInfo[i][gType]][intName], i, GetZoneName(GarageInfo[i][gPosX], GarageInfo[i][gPosY], GarageInfo[i][gPosZ]));
					SCMf(playerid, COLOR_WHITE, "%s(ID: %d) - Location: %s - Status: {FFA500}Inactive", garageInteriors[GarageInfo[i][gType]][intName], i, GetZoneName(GarageInfo[i][gPosX], GarageInfo[i][gPosY], GarageInfo[i][gPosZ]));
				}
				else
				{
					//SCMf(playerid, COLOR_GREY2, "Your %s (ID: %d) garage in %s is currently marked as {FFFFFF}Active{C8C8C8}.", garageInteriors[GarageInfo[i][gType]][intName], i, GetZoneName(GarageInfo[i][gPosX], GarageInfo[i][gPosY], GarageInfo[i][gPosZ]));
					SCMf(playerid, COLOR_WHITE, "%s(ID: %d) - Location: %s - Status: "GREEN"Active", garageInteriors[GarageInfo[i][gType]][intName], i, GetZoneName(GarageInfo[i][gPosX], GarageInfo[i][gPosY], GarageInfo[i][gPosZ]));
				}
			}
		}
	}

	for(new i = 0; i < MAX_BUSINESSES; i ++)
    {
        if(BusinessInfo[i][bExists] && IsBusinessOwner(playerid, i))
        {
			if(pData[playerid][pDonator] >= 2) {
				if((gettime() - BusinessInfo[i][bTimestamp]) > INACTIVE_TIME_2)
				{
					//SCMf(playerid, COLOR_GREY2, "Your %s (ID: %d) business in %s is currently marked as {FFA500}Inactive{C8C8C8}.", bizInteriors[BusinessInfo[i][bType]][intType], i, GetZoneName(BusinessInfo[i][bPosX], BusinessInfo[i][bPosY], BusinessInfo[i][bPosZ]));
					SCMf(playerid, COLOR_WHITE, "%s(ID: %d) - Location: %s - Status: {FFA500}Inactive", bizInteriors[BusinessInfo[i][bType]][intType], i, GetZoneName(BusinessInfo[i][bPosX], BusinessInfo[i][bPosY], BusinessInfo[i][bPosZ]));
				}
				else
				{
					SCMf(playerid, COLOR_GREY2, "Your %s (ID: %d) business in %s is currently marked as {FFFFFF}Active{C8C8C8}.", bizInteriors[BusinessInfo[i][bType]][intType], i, GetZoneName(BusinessInfo[i][bPosX], BusinessInfo[i][bPosY], BusinessInfo[i][bPosZ]));
					SCMf(playerid, COLOR_WHITE, "%s(ID: %d) - Location: %s - Status: "GREEN"Active", bizInteriors[BusinessInfo[i][bType]][intType], i, GetZoneName(BusinessInfo[i][bPosX], BusinessInfo[i][bPosY], BusinessInfo[i][bPosZ]));
				}
			} else {
				if((gettime() - BusinessInfo[i][bTimestamp]) > INACTIVE_TIME)
				{
					//SCMf(playerid, COLOR_GREY2, "Your %s (ID: %d) business in %s is currently marked as {FFA500}Inactive{C8C8C8}.", bizInteriors[BusinessInfo[i][bType]][intType], i, GetZoneName(BusinessInfo[i][bPosX], BusinessInfo[i][bPosY], BusinessInfo[i][bPosZ]));
					SCMf(playerid, COLOR_WHITE, "%s(ID: %d) - Location: %s - Status: {FFA500}Inactive", bizInteriors[BusinessInfo[i][bType]][intType], i, GetZoneName(BusinessInfo[i][bPosX], BusinessInfo[i][bPosY], BusinessInfo[i][bPosZ]));
				}
				else
				{
					//SCMf(playerid, COLOR_GREY2, "Your %s (ID: %d) business in %s is currently marked as {FFFFFF}Active{C8C8C8}.", bizInteriors[BusinessInfo[i][bType]][intType], i, GetZoneName(BusinessInfo[i][bPosX], BusinessInfo[i][bPosY], BusinessInfo[i][bPosZ]));
					SCMf(playerid, COLOR_WHITE, "%s(ID: %d) - Location: %s - Status: "GREEN"Active", bizInteriors[BusinessInfo[i][bType]][intType], i, GetZoneName(BusinessInfo[i][bPosX], BusinessInfo[i][bPosY], BusinessInfo[i][bPosZ]));
				}
			}
		}
	}

	if(pData[playerid][pDonator] < 2) SCM(playerid, COLOR_YELLOW, "** Your properties become inactive if you don't enter them for 14+ days.");
	else SCM(playerid, COLOR_YELLOW, "** Since you are VIP, You have 3 weeks (21 days) immunity from having your properties marked as inactive.");
	return 1;
}

CMD:setrent(playerid, params[])
{
	new price, houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any house of yours.");
	}
	if(sscanf(params, "i", price))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setrent [price ('0' to disable)]");
	}
	if(!(0 <= price <= 10000))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid price. The price must range between $0 and $10,000.");
	}

	HouseInfo[houseid][hRentPrice] = price;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET rentprice = %i WHERE id = %i", price, HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadHouse(houseid);
	SM(playerid, COLOR_AQUA, "** You've set the rental price to $%i.", price);
	return 1;
}

CMD:renthouse(playerid, params[])
{
	new houseid;

	if((houseid = GetNearbyHouse(playerid)) == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is no house in range. You must be near a house.");
	}
	/*if(strcmp(params, "confirm", true) != 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /renthouse [confirm]");
	}*/
	if(!HouseInfo[houseid][hOwnerID])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This house is not owned and therefore cannot be rented.");
	}
	if(!HouseInfo[houseid][hRentPrice])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This house's owner has chosen to disable renting for this house.");
	}
	if(pData[playerid][pCash] < HouseInfo[houseid][hRentPrice])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't afford to rent here.");
	}
	if(IsHouseOwner(playerid, houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are the owner of this house. You can't rent here.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM users WHERE rentinghouse = %i", HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerRentHouse", "ii", playerid, houseid);
	return 1;
}

CMD:unrent(playerid, params[])
{
	if(!pData[playerid][pRentingHouse])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not renting at any property. You can't use this command.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rentinghouse = 0 WHERE uid = %i", pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	pData[playerid][pRentingHouse] = 0;
	SCM(playerid, COLOR_WHITE, "** You have ripped up your rental contract.");
	return 1;
}

CMD:tenants(playerid, params[])
{
	new houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any house of yours.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, lastlogin FROM users WHERE rentinghouse = %i ORDER BY lastlogin DESC", HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LIST_TENANTS, playerid);
	return 1;
}

CMD:evict(playerid, params[])
{
    new username[MAX_PLAYER_NAME], houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any house of yours.");
	}
	if(sscanf(params, "s[24]", username))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /evict [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = '%e' AND rentinghouse = %i", username, HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerEvict", "is", playerid, username);
	return 1;
}

CMD:evictall(playerid, params[])
{
    new houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any house of yours.");
	}

	foreach(new i : Player)
    {
        if(pData[i][pLogged] && pData[i][pRentingHouse] == HouseInfo[houseid][hID])
        {
            pData[i][pRentingHouse] = 0;
            SCM(i, COLOR_RED, "You have been evicted from your home by the owner.");
        }
    }

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rentinghouse = 0 WHERE rentinghouse = %i", HouseInfo[houseid][hID]);
    mysql_tquery(connectionID, queryBuffer);

    SCM(playerid, COLOR_WHITE, "** You have evicted all tenants from your home.");
    return 1;
}

CMD:houseinvite(playerid, params[])
{
	new targetid, houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any house of yours.");
	}
	if(sscanf(params, "i", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /houseinvite [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
	    //return SCM(playerid, COLOR_SYNTAX, "You can't invite yourself to your own home.");
	}

	pData[targetid][pInviteOffer] = playerid;
	pData[targetid][pInviteHouse] = houseid;

	SM(targetid, COLOR_AQUA, "** %s has offered you an invitation to their house in %s. (/accept invite)", GetRPName(playerid), GetZoneName(HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]));
	SM(playerid, COLOR_AQUA, "** You have offered %s an invitation to your house.", GetRPName(targetid));
	return 1;
}

CMD:gate(playerid, params[]) return callcmd::open(playerid, params);
CMD:door(playerid, params[]) return callcmd::open(playerid, params);
CMD:open(playerid, params[])
{
	new id = Gate_Nearest(playerid);

	if (id != -1)
	{
		if (strlen(GateData[id][gatePass]))
		{
		    //ShowPlayerDialog(playerid, GatePass, DIALOG_STYLE_INPUT, "Enter Password", "Please enter the password for this gate below:", "Submit", "Cancel");
		}
		else
		{
		    if (GateData[id][gateFaction] != -1 && pData[playerid][pFaction] != GetFactionByID(GateData[id][gateFaction]))
				return SCM(playerid, COLOR_SYNTAX, "You can't open this gate/door.");

			Gate_Operate(id);

			switch (GateData[id][gateOpened])
			{
			    case 0:
				{
				    SCM(playerid, COLOR_SYNTAX, "You have closed the gate/door!");
					SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s uses their card to close the gate/door.", GetRPName(playerid));
				}
                case 1:
				{
				    SCM(playerid, COLOR_SYNTAX, "You have opened the gate/door!");
					SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s uses their card to open the gate/door.", GetRPName(playerid));
				}
			}
		}
	}
	return 1;
}

CMD:maphelp(playerid)
{
	if(pData[playerid][pAdmin] < 7) return SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command.");
	SCM(playerid, COLOR_WHITE, "** Mapper: /createobj, /dupobj, /nearobj, /editobj, /delobj ");
	return 1;
}

CMD:nearobj(playerid, params[])
{
	new id;

    if(pData[playerid][pAdmin] < 7) return SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command.");

	if((id = Object_Nearest(playerid)) >= 0)
	{
		SM(playerid, COLOR_GREY2, "You are in range of object ID %i.", id);
	}
	return 1;
}

CMD:dupobj(playerid, params[])
{
	static id = -1, idx;
    if(pData[playerid][pAdmin] < 7) return SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command.");
	if (sscanf(params, "d", idx)) return SCM(playerid, COLOR_WHITE, "Usage: /dupobj [id]");

	id = Object_Duplicate(playerid, idx);
	if (id == -1) return SCM(playerid, COLOR_SYNTAX, "The server has reached the limit for objects.");
	SM(playerid, COLOR_WHITE, "You have successfully duplicate object ID: %d.", id);
	return 1;
}

CMD:createobj(playerid, params[])
{
	static id = -1, idx;
    if(pData[playerid][pAdmin] < 7) return SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command.");
	if (sscanf(params, "d", idx)) return SCM(playerid, COLOR_WHITE, "Usage: /createobj [objid] | VendorObj ID: 1571");

	id = Object_Create(playerid, idx);
	if (id == -1) return SCM(playerid, COLOR_SYNTAX, "The server has reached the limit for objects.");
	SM(playerid, COLOR_WHITE, "You have successfully created object ID: %d.", id);
	return 1;
}

CMD:editobj(playerid, params[])
{
	static id;
    if(pData[playerid][pAdmin] < 7) return SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command.");
	if (sscanf(params, "d", id)) return SCM(playerid, COLOR_WHITE, "Usage: /editobj [id]");
	if ((id < 0 || id >= MAX_MAPOBJECTS) || !ObjectData[id][mobjExists]) return SCM(playerid, COLOR_SYNTAX, "You have specified an invalid object ID.");

	pData[playerid][pEditmObject] = -1;
	EditDynamicObject(playerid, ObjectData[id][mobjObject]);
	pData[playerid][pEditmObject] = id;
	pData[playerid][pEditType] = EDIT_OBJECT_PREVIEW;
	SM(playerid, COLOR_WHITE, "You are now adjusting the position of object ID: %d.", id);
	return 1;
}

CMD:delobj(playerid, params[])
{
	static id = 0;
    if(pData[playerid][pAdmin] < 7) return SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command.");
	if (sscanf(params, "d", id)) return SCM(playerid, COLOR_WHITE, "Usage: /delobj [id]");
	if ((id < 0 || id >= MAX_MAPOBJECTS) || !ObjectData[id][mobjExists]) return SCM(playerid, COLOR_SYNTAX, "You have specified an invalid object ID.");

	Object_Delete(id);
	SM(playerid, COLOR_WHITE, "You have successfully destroyed object ID: %d.", id);
	return 1;
}

CMD:creategate(playerid, params[])
{
	static
	    id = -1;

	if(pData[playerid][pAdmin] < 7)
		return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");

	id = Gate_Create(playerid);

	if (id == -1)
	    return SCM(playerid, COLOR_SYNTAX, "The server has reached the limit for gates.");

	SM(playerid, COLOR_WHITE, "You have successfully created gate ID: %d.", id);
	return 1;
}

CMD:gotogate(playerid, params[])
{
	new houseid;

	if(pData[playerid][pAdmin] < 5)
		return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");

	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gotogate [gateid]");
	}
	if(!(0 <= houseid < MAX_GATES) || !GateData[houseid][gateExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid gate.");
	}
	GameTextForPlayer(playerid, "~w~Teleported", 5000, 1);
	SetPlayerPos(playerid, GateData[houseid][gatePos][0] - (2.5 * floatsin(-GateData[houseid][gatePos][3], degrees)), GateData[houseid][gatePos][1] - (2.5 * floatcos(-GateData[houseid][gatePos][3], degrees)), GateData[houseid][gatePos][2]);
	SetPlayerInterior(playerid, GateData[houseid][gateInterior]);
	SetPlayerVirtualWorld(playerid, GateData[houseid][gateWorld]);
	SetCameraBehindPlayer(playerid);
	return 1;
}


CMD:removegate(playerid, params[])
{
	static
	    id = 0;

	if(pData[playerid][pAdmin] < 7)
		return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");

	if (sscanf(params, "d", id))
	    return SCM(playerid, COLOR_WHITE, "Usage: /removegate [gate id]");

	if ((id < 0 || id >= MAX_GATES) || !GateData[id][gateExists])
	    return SCM(playerid, COLOR_SYNTAX, "You have specified an invalid gate ID.");

	Gate_Delete(id);
	SM(playerid, COLOR_WHITE, "You have successfully destroyed gate ID: %d.", id);
	return 1;
}

CMD:editgate(playerid, params[])
{
	static
	    id,
	    type[24],
	    string[128];

	//if(pData[playerid][pAdmin] < 7)
	if(!pData[playerid][pDynamicAdmin])
		return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	SCM(playerid, COLOR_WHITE, "Usage: /editgate [id] [name]");
	    SendClientMessage(playerid, COLOR_ORANGE, "Names:{FFFFFF} location, speed, radius, time, model, pos, move, pass, linkid, faction");
		return 1;
	}
	if ((id < 0 || id >= MAX_GATES) || !GateData[id][gateExists])
	    return SCM(playerid, COLOR_SYNTAX, "You have specified an invalid gate ID.");

    if (!strcmp(type, "location", true))
	{
		static
		    Float:x,
		    Float:y,
		    Float:z,
		    Float:angle;

		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, angle);

		x += 3.0 * floatsin(-angle, degrees);
		y += 3.0 * floatcos(-angle, degrees);

		GateData[id][gatePos][0] = x;
		GateData[id][gatePos][1] = y;
		GateData[id][gatePos][2] = z;
		GateData[id][gatePos][3] = 0.0;
		GateData[id][gatePos][4] = 0.0;
		GateData[id][gatePos][5] = angle;

		SetDynamicObjectPos(GateData[id][gateObject], x, y, z);
		SetDynamicObjectRot(GateData[id][gateObject], 0.0, 0.0, angle);

		GateData[id][gateOpened] = false;

		Gate_Save(id);
		SMA(COLOR_LIGHTRED, "ACmd: %s has adjusted the position of gate ID: %d.", GetRPName(playerid), id);
		return 1;
	}
	else if (!strcmp(type, "speed", true))
	{
	    static
	        Float:speed;

		if (sscanf(string, "f", speed))
		    return SCM(playerid, COLOR_WHITE, "Usage: /editgate [id] [speed] [move speed]");

		if (speed < 0.0 || speed > 20.0)
		    return SCM(playerid, COLOR_SYNTAX, "The specified speed can't be below 0 or above 20.");

        GateData[id][gateSpeed] = speed;

		Gate_Save(id);
		SMA(COLOR_LIGHTRED, "ACmd: %s has adjusted the speed of gate ID: %d to %.2f.", GetRPName(playerid), id, speed);
		return 1;
	}
	else if (!strcmp(type, "radius", true))
	{
	    static
	        Float:radius;

		if (sscanf(string, "f", radius))
		    return SCM(playerid, COLOR_WHITE, "Usage: /editgate [id] [radius] [open radius]");

		if (radius < 0.0 || radius > 20.0)
		    return SCM(playerid, COLOR_SYNTAX, "The specified radius can't be below 0 or above 20.");

        GateData[id][gateRadius] = radius;

		Gate_Save(id);
		SMA(COLOR_LIGHTRED, "ACmd: %s has adjusted the radius of gate ID: %d to %.2f.", GetRPName(playerid), id, radius);
		return 1;
	}
	else if (!strcmp(type, "time", true))
	{
	    static
	        time;

		if (sscanf(string, "d", time))
		    return SCM(playerid, COLOR_WHITE, "Usage: /editgate [id] [time] [close time] (0 to disable)");

		if (time < 0 || time > 60000)
		    return SCM(playerid, COLOR_SYNTAX, "The specified time can't be 0 or above 60,000 ms.");

        GateData[id][gateTime] = time;

		Gate_Save(id);
		SMA(COLOR_LIGHTRED, "ACmd: %s has adjusted the close time of gate ID: %d to %d.", GetRPName(playerid), id, time);
		return 1;
	}
	else if (!strcmp(type, "model", true))
	{
	    static
	        model;

		if (sscanf(string, "d", model))
		    return SCM(playerid, COLOR_WHITE, "Usage: /editgate [id] [model] [gate model]");

		/*if (!IsValidObjectModel(model))
		    return SCM(playerid, COLOR_SYNTAX, "Invalid object model.");*/

        GateData[id][gateModel] = model;

		DestroyDynamicObject(GateData[id][gateObject]);
		GateData[id][gateObject] = CreateDynamicObject(GateData[id][gateModel], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5], GateData[id][gateWorld], GateData[id][gateInterior]);

		Gate_Save(id);
		SMA(COLOR_LIGHTRED, "ACmd: %s has adjusted the model of gate ID: %d to %d.", GetRPName(playerid), id, model);
		return 1;
	}
    else if (!strcmp(type, "pos", true))
	{
	    pData[playerid][pEditGate] = -1;
	   	EditDynamicObject(playerid, GateData[id][gateObject]);

		pData[playerid][pEditGate] = id;
		pData[playerid][pEditType] = 1;

		SM(playerid, COLOR_WHITE, "You are now adjusting the position of gate ID: %d.", id);
		return 1;
	}
	else if (!strcmp(type, "move", true))
	{
	    pData[playerid][pEditGate] = -1;
	   	EditDynamicObject(playerid, GateData[id][gateObject]);

		pData[playerid][pEditGate] = id;
		pData[playerid][pEditType] = 2;

		SM(playerid, COLOR_WHITE, "You are now adjusting the moving position of gate ID: %d.", id);
		return 1;
	}
	else if (!strcmp(type, "linkid", true))
	{
	    static
	        linkid = -1;

		if (sscanf(string, "d", linkid))
		    return SCM(playerid, COLOR_WHITE, "Usage: /editgate [id] [linkid] [gate link] (-1 for none)");

        if ((linkid < -1 || linkid >= MAX_GATES) || (linkid != -1 && !GateData[linkid][gateExists]))
	    	return SCM(playerid, COLOR_SYNTAX, "You have specified an invalid gate ID.");

        GateData[id][gateLinkID] = (linkid == -1) ? (-1) : (GateData[linkid][gateID]);
		Gate_Save(id);

		if (id == -1)
			SMA(COLOR_LIGHTRED, "ACmd: %s has adjusted the faction of gate ID: %d to no gate.", GetRPName(playerid), id);

		else
		    SMA(COLOR_LIGHTRED, "ACmd: %s has adjusted the faction of gate ID: %d to ID: %d.", GetRPName(playerid), id, linkid);

		return 1;
	}
	else if (!strcmp(type, "faction", true))
	{
	    static
	        factionid = 0;

		if (sscanf(string, "d", factionid))
		    return SCM(playerid, COLOR_WHITE, "Usage: /editgate [id] [faction] [gate faction] (-1 for none)");

		if(!(1 <= factionid < MAX_FACTIONS) || FactionInfo[factionid][fType] == FACTION_NONE)
			return SCM(playerid, COLOR_SYNTAX, "Invalid faction.");


        GateData[id][gateFaction] = (factionid == -1) ? (-1) : (FactionInfo[factionid][fType]);
		Gate_Save(id);

		if (factionid == -1)
			SMA(COLOR_LIGHTRED, "ACmd: %s has adjusted the faction of gate ID: %d to no faction.", GetRPName(playerid), id);

		else
		    SMA(COLOR_LIGHTRED, "ACmd: %s has adjusted the faction of gate ID: %d to \"%s\".", GetRPName(playerid), id, FactionInfo[factionid][fName]);

		return 1;
	}
	else if (!strcmp(type, "pass", true))
	{
	    static
	        pass[32];

		if (sscanf(string, "s[32]", pass))
		    return SCM(playerid, COLOR_WHITE, "Usage: /editgate [id] [pass] [gate password] (Use 'none' to disable)");

		if (!strcmp(params, "none", true))
			GateData[id][gatePass][0] = 0;

		else format(GateData[id][gatePass], 32, pass);

		Gate_Save(id);
		SAM(COLOR_LIGHTRED, "ACmd: %s has adjusted the password of gate ID: %d to %s.", GetRPName(playerid), id, pass);
		return 1;
	}
	return 1;
}

CMD:creategarage(playerid, params[])
{
	new size[8], type = -1, Float:x, Float:y, Float:z, Float:a;

    if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[8]", size))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /creategarage [small/medium/large]");
	}
	if(GetNearbyGarage(playerid) >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is a garage in range. Find somewhere else to create this one.");
	}
	if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot create garages indoors.");
	}

	if(!strcmp(size, "small", true)) {
	    type = 0;
	} else if(!strcmp(size, "medium", true)) {
	    type = 1;
	} else if(!strcmp(size, "large", true)) {
	    type = 2;
	}

	if(type == -1)
	{
	     SCM(playerid, COLOR_SYNTAX, "Invalid size. Valid sizes range from Small, Medium and Large.");
	}
	else
	{
		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);

		for(new i = 0; i < MAX_GARAGES; i ++)
		{
		    if(!GarageInfo[i][gExists])
		    {
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO garages (type, price, pos_x, pos_y, pos_z, pos_a, exit_x, exit_y, exit_z, exit_a) VALUES(%i, %i, '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f')", type, garageInteriors[type][intPrice], x, y, z, a, x - 3.0 * floatsin(-a, degrees), y - 3.0 * floatcos(-a, degrees), z, a - 180.0);
				mysql_tquery(connectionID, queryBuffer, "OnAdminCreateGarage", "iiiffff", playerid, i, type, x, y, z, a);
				return 1;
			}
		}

		SCM(playerid, COLOR_SYNTAX, "Garage slots are currently full. Ask managements to increase the internal limit.");
	}

	return 1;
}

CMD:editgarage(playerid, params[])
{
	new garageid, option[10], param[32];

	//if(pData[playerid][pAdmin] < 4)
	if(!pData[playerid][pDynamicAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[10]S()[32]", garageid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /editgarage [garageid] [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Entrance, Exit, Type, Owner, Price, Locked");
	    return 1;
	}
	if(!(0 <= garageid < MAX_GARAGES) || !GarageInfo[garageid][gExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid garage.");
	}

	if(!strcmp(option, "entrance", true))
	{
	    if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You cannot create garages indoors.");
		}

	    GetPlayerPos(playerid, GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ]);
	    GetPlayerFacingAngle(playerid, GarageInfo[garageid][gPosA]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f' WHERE id = %i", GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ], GarageInfo[garageid][gPosA], GarageInfo[garageid][gID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ReloadGarage(garageid);
	    SM(playerid, COLOR_AQUA, "** You've changed the entrance of garage %i.", garageid);
	}
	else if(!strcmp(option, "exit", true))
	{
	    if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You cannot create garages indoors.");
		}

	    GetPlayerPos(playerid, GarageInfo[garageid][gExitX], GarageInfo[garageid][gExitY], GarageInfo[garageid][gExitZ]);
	    GetPlayerFacingAngle(playerid, GarageInfo[garageid][gExitA]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET exit_x = '%f', exit_y = '%f', exit_z = '%f', exit_a = '%f' WHERE id = %i", GarageInfo[garageid][gExitX], GarageInfo[garageid][gExitY], GarageInfo[garageid][gExitZ], GarageInfo[garageid][gExitA], GarageInfo[garageid][gID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ReloadGarage(garageid);
	    SM(playerid, COLOR_AQUA, "** You've changed the vehicle exit spawn of garage %i.", garageid);
	}
	else if(!strcmp(option, "type", true))
	{
	    new size[8], type = -1;

	    if(sscanf(param, "s[8]", size))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editgarage [garageid] [type] [small/medium/large]");
		}

		if(!strcmp(size, "small", true)) {
		    type = 0;
		} else if(!strcmp(size, "medium", true)) {
		    type = 1;
		} else if(!strcmp(size, "large", true)) {
		    type = 2;
		}

		if(type == -1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
		}

		GarageInfo[garageid][gType] = type;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET type = %i WHERE id = %i", type, GarageInfo[garageid][gID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadGarage(garageid);
	    SM(playerid, COLOR_AQUA, "** You've changed the type of garage %i to %s.", garageid, size);
	}
	else if(!strcmp(option, "owner", true))
	{
	    new targetid;

	    if(sscanf(param, "u", targetid))
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /editgarage [garageid] [owner] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
		}
		if(!pData[targetid][pLogged])
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
		}

        SetGarageOwner(garageid, targetid);
	    SM(playerid, COLOR_AQUA, "** You've changed the owner of garage %i to %s.", garageid, GetRPName(targetid));
	}
	else if(!strcmp(option, "price", true))
	{
	    new price;

	    if(sscanf(param, "i", price))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editgarage [garageid] [price] [value]");
		}
		if(price < 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $0.");
		}

		GarageInfo[garageid][gPrice] = price;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET price = %i WHERE id = %i", GarageInfo[garageid][gPrice], GarageInfo[garageid][gID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadGarage(garageid);
	    SM(playerid, COLOR_AQUA, "** You've changed the price of garage %i to $%i.", garageid, price);
	}
    else if(!strcmp(option, "locked", true))
	{
	    new locked;

	    if(sscanf(param, "i", locked) || !(0 <= locked <= 1))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editgarage [garageid] [locked] [0/1]");
		}

		GarageInfo[garageid][gLocked] = locked;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET locked = %i WHERE id = %i", GarageInfo[garageid][gLocked], GarageInfo[garageid][gID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadGarage(garageid);
	    SM(playerid, COLOR_AQUA, "** You've changed the lock state of garage %i to %i.", garageid, locked);
	}

	return 1;
}

CMD:removegarage(playerid, params[])
{
	new garageid;

	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", garageid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /removegarage [garageid]");
	}
	if(!(0 <= garageid < MAX_GARAGES) || !GarageInfo[garageid][gExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid garage.");
	}

	DestroyDynamic3DTextLabel(GarageInfo[garageid][gText]);
	DestroyDynamicPickup(GarageInfo[garageid][gPickup]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM garages WHERE id = %i", GarageInfo[garageid][gID]);
	mysql_tquery(connectionID, queryBuffer);

	GarageInfo[garageid][gExists] = 0;
	GarageInfo[garageid][gID] = 0;
	GarageInfo[garageid][gOwnerID] = 0;

	SM(playerid, COLOR_AQUA, "** You have removed garage %i.", garageid);
	return 1;
}

CMD:gotogarage(playerid, params[])
{
	new garageid;

	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", garageid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gotogarage [garageid]");
	}
	if(!(0 <= garageid < MAX_GARAGES) || !GarageInfo[garageid][gExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid garage.");
	}

	GameTextForPlayer(playerid, "~w~Teleported", 5000, 1);

	SetPlayerPos(playerid, GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ]);
	SetPlayerFacingAngle(playerid, GarageInfo[garageid][gPosA]);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:garagehelp(playerid, params[])
{
	SCM(playerid, COLOR_WHITE, "** GARAGE: /buygarage, /lock, /sellgarage, /sellmygarage, /garageinfo.");
	SCM(playerid, COLOR_WHITE, "** GARAGE: /repair, /refuel, /tune.");
	return 1;
}

CMD:buygarage(playerid, params[])
{
	new garageid;

	if((garageid = GetNearbyGarage(playerid)) == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is no garage in range. You must be near a garage.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /buygarage [confirm]");
	}
	if(GarageInfo[garageid][gOwnerID])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This garage already has an owner.");
	}
	if(pData[playerid][pCash] < GarageInfo[garageid][gPrice])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this garage.");
	}
	if(GetPlayerAssetCount(playerid, LIMIT_GARAGES) >= GetPlayerAssetLimit(playerid, LIMIT_GARAGES))
	{
	    return SM(playerid, COLOR_SYNTAX, "You currently own %i/%i garages. You can't own anymore unless you upgrade your asset perk.", GetPlayerAssetCount(playerid, LIMIT_GARAGES), GetPlayerAssetLimit(playerid, LIMIT_GARAGES));
	}

	SetGarageOwner(garageid, playerid);
	GivePlayerCash(playerid, -GarageInfo[garageid][gPrice]);

	SM(playerid, COLOR_YELLOW, "You paid $%i to make this garage yours! /garagehelp for a list of commands.", GarageInfo[garageid][gPrice]);
    Log_Write("log_property", "%s (uid: %i) purchased %s garage (id: %i) for $%i.", GetPlayerNameEx(playerid), pData[playerid][pID], garageInteriors[GarageInfo[garageid][gType]][intName], GarageInfo[garageid][gID], GarageInfo[garageid][gPrice]);
	return 1;
}

/*
CMD:upgradegarage(playerid, params[])
{
	new garageid = GetNearbyGarageEx(playerid);

	if(garageid == -1 || !IsGarageOwner(playerid, garageid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any garage of yours.");
	}
	if(GarageInfo[garageid][gType] >= 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Your garage is already at its maximum possible size. You cannot upgrade it further.");
	}
	if(isnull(params) || strcmp(params, "confirm", true) != 0)
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /upgradegarage [confirm]");
	    SM(playerid, COLOR_WHITE, "The next garage size available is %s and costs $%i to upgrade to.", garageInteriors[GarageInfo[garageid][gType] + 1][intName], garageInteriors[GarageInfo[garageid][gType] + 1][intPrice]);
		return 1;
	}
	if(pData[playerid][pCash] < garageInteriors[GarageInfo[garageid][gType] + 1][intPrice])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't afford to upgrade your garage.");
	}

	for(new i = 1; i < MAX_VEHICLES; i ++)
	{
	    if(IsValidVehicle(i) && IsVehicleInGarage(i, garageid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You must remove all vehicles from your garage before proceeding.");
		}
	}

	foreach(new i : Player)
	{
	    if(GetInsideGarage(i) == garageid)
	    {
			SetPlayerPos(i, garageInteriors[GarageInfo[garageid][gType] + 1][intVX], garageInteriors[GarageInfo[garageid][gType] + 1][intVY], garageInteriors[GarageInfo[garageid][gType] + 1][intVZ]);
			SetPlayerFacingAngle(i, garageInteriors[GarageInfo[garageid][gType] + 1][intVA]);
			SetPlayerInterior(i, garageInteriors[GarageInfo[garageid][gType] + 1][intID]);
			SetCameraBehindPlayer(i);
		}
	}

	GarageInfo[garageid][gType]++;
	GarageInfo[garageid][gPrice] = garageInteriors[GarageInfo[garageid][gType]][intPrice];

	GivePlayerCash(playerid, -garageInteriors[GarageInfo[garageid][gType]][intPrice]);
	SM(playerid, COLOR_YELLOW, "You have upgraded your garage's size to %s for $%i.", garageInteriors[GarageInfo[garageid][gType]][intName], garageInteriors[GarageInfo[garageid][gType]][intPrice]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET type = %i, price = %i WHERE id = %i", GarageInfo[garageid][gType], GarageInfo[garageid][gPrice], GarageInfo[garageid][gID]);
	mysql_tquery(connectionID, queryBuffer);

	Log_Write("log_property", "%s (uid: %i) upgraded their garage (id: %i) to %s size for $%i.", GetPlayerNameEx(playerid), pData[playerid][pID], GarageInfo[garageid][gID], garageInteriors[GarageInfo[garageid][gType]][intName], garageInteriors[GarageInfo[garageid][gType]][intPrice]);
	return 1;
}*/

CMD:sellgarage(playerid, params[])
{
	new garageid = GetNearbyGarageEx(playerid), targetid, amount;

	if(garageid == -1 || !IsGarageOwner(playerid, garageid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any garage of yours.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /sellgarage [playerid] [amount]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't sell to yourself.");
	}
	if(amount < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must specify an amount above zero.");
	}

	pData[targetid][pGarageOffer] = playerid;
	pData[targetid][pGarageOffered] = garageid;
	pData[targetid][pGaragePrice] = amount;

	SM(targetid, COLOR_AQUA, "** %s offered you their garage for $%i (/accept garage).", GetRPName(playerid), amount);
	SM(playerid, COLOR_AQUA, "** You have offered %s to buy your garage for $%i.", GetRPName(targetid), amount);
	return 1;
}

CMD:sellmygarage(playerid, params[])
{
	new garageid = GetNearbyGarageEx(playerid);

	if(garageid == -1 || !IsGarageOwner(playerid, garageid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any garage of yours.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /sellmygarage [confirm]");
	    SM(playerid, COLOR_WHITE, "This command sells your garage back to the state. You will receive $%i back.", percent(GarageInfo[garageid][gPrice], 75));
	    return 1;
	}

	SetGarageOwner(garageid, INVALID_PLAYER_ID);
	GivePlayerCash(playerid, percent(GarageInfo[garageid][gPrice], 75));

	SM(playerid, COLOR_YELLOW, "You have sold your garage to the state and received $%i back.", percent(GarageInfo[garageid][gPrice], 75));
    Log_Write("log_property", "%s (uid: %i) sold their %s garage (id: %i) to the state for $%i", GetPlayerNameEx(playerid), pData[playerid][pID], garageInteriors[GarageInfo[garageid][gType]][intName], GarageInfo[garageid][gID], percent(GarageInfo[garageid][gPrice], 75));
	return 1;
}

CMD:garageinfo(playerid, params[])
{
    new garageid = GetNearbyGarageEx(playerid);

	if(garageid == -1 || !IsGarageOwner(playerid, garageid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any garage of yours.");
	}

    SM(playerid, SERVER_COLOR, "Garage ID %i:", garageid);
	SM(playerid, COLOR_GREY2, "(Value: $%i) - (Size: %s) - (Location: %s) - (Active: %s) - (Locked: %s)", GarageInfo[garageid][gPrice], garageInteriors[GarageInfo[garageid][gType]][intName], GetZoneName(GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ]), (gettime() - GarageInfo[garageid][gTimestamp] > 1209600) ? (""SVRCLR"No{C8C8C8}") : ("Yes"), (GarageInfo[garageid][gLocked]) ? ("Yes") : ("No"));
	return 1;
}

CMD:createbiz(playerid, params[])
{
	new type, Float:x, Float:y, Float:z, Float:a, description[64];

    if(pData[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", type))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /createbiz [type]");
	    SCM(playerid, COLOR_SYNTAX, "List of options: (1) 24/7 (2) Gun Shop (3) Clothes Shop (4) Gym (5) Restaurant (6) Ad Agency (7) Club/Bar (8) Dealership");
		SCM(playerid, COLOR_WHITE, "Note: If you want to have your biz an interior, create an entrance and put the biz inside of it.");
	    return 1;
	}
	if(!(1 <= type <= sizeof(bizInteriors)))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
	}
	if(GetNearbyBusiness(playerid) >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is a business in range. Find somewhere else to create this one.");
	}

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	type--;

 	for(new i = 0; i < MAX_BUSINESSES; i ++)
	{
	    if(!BusinessInfo[i][bExists])
	    {
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO businesses (type, biz_desc, price, pos_x, pos_y, pos_z, pos_a, int_x, int_y, int_z, int_a, interior, outsideint, outsidevw) VALUES(%i, '%e', %i, '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', %i, %i, %i)", type, description, bizInteriors[type][intPrice], x, y, z, a - 180.0,
				bizInteriors[type][intX], bizInteriors[type][intY], bizInteriors[type][intZ], bizInteriors[type][intA], bizInteriors[type][intID], GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
			mysql_tquery(connectionID, queryBuffer, "OnAdminCreateBusiness", "iiiffffs", playerid, i, type, x, y, z, a, description);
			return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "Business slots are currently full. Ask developers to increase the internal limit.");
	return 1;
}

CMD:editbiz(playerid, params[])
{
	new businessid, option[14], param[32];

	//if(pData[playerid][pAdmin] < 7)
	if(!pData[playerid][pDynamicAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[14]S()[32]", businessid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /editbiz [businessid] [option]");
	    SCM(playerid, COLOR_GREY2, "List of options: Entrance, Exit, Interior, World, Type, Owner, Price, EntryFee, Products, Materials, Locked");
	    return 1;
	}
	if(!(0 <= businessid < MAX_BUSINESSES) || !BusinessInfo[businessid][bExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid business.");
	}

	if(!strcmp(option, "entrance", true))
	{
	    GetPlayerPos(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ]);
	    GetPlayerFacingAngle(playerid, BusinessInfo[businessid][bPosA]);

	    BusinessInfo[businessid][bOutsideInt] = GetPlayerInterior(playerid);
	    BusinessInfo[businessid][bOutsideVW] = GetPlayerVirtualWorld(playerid);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', outsideint = %i, outsidevw = %i WHERE id = %i", BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], BusinessInfo[businessid][bPosA], BusinessInfo[businessid][bOutsideInt], BusinessInfo[businessid][bOutsideVW], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ReloadBusiness(businessid);
	    SM(playerid, COLOR_AQUA, "** You've changed the entrance of business %i.", businessid);
	}
	else if(!strcmp(option, "exit", true))
	{
	    new type = -1;

	    for(new i = 0; i < sizeof(bizInteriors); i ++)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 100.0, bizInteriors[i][intX], bizInteriors[i][intY], bizInteriors[i][intZ]))
	        {
	            type = i;
			}
	    }

	    GetPlayerPos(playerid, BusinessInfo[businessid][bIntX], BusinessInfo[businessid][bIntY], BusinessInfo[businessid][bIntZ]);
	    GetPlayerFacingAngle(playerid, BusinessInfo[businessid][bIntA]);

	    BusinessInfo[businessid][bInterior] = GetPlayerInterior(playerid);
		BusinessInfo[businessid][bType] = type;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET type = %i, int_x = '%f', int_y = '%f', int_z = '%f', int_a = '%f', interior = %i WHERE id = %i", type, BusinessInfo[businessid][bIntX], BusinessInfo[businessid][bIntY], BusinessInfo[businessid][bIntZ], BusinessInfo[businessid][bIntA], BusinessInfo[businessid][bInterior], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SM(playerid, COLOR_AQUA, "** You've changed the exit of business %i.", businessid);
	}
	else if(!strcmp(option, "interior", true))
	{
		new string[1024];

		for(new i = 0; i < sizeof(bizInteriorArray); i ++)
		{
		    format(string, sizeof(string), "%s\n%s", string, bizInteriorArray[i][intName]);
	    }

	    pData[playerid][pSelected] = businessid;
	    ShowPlayerDialog(playerid, DIALOG_BIZINTERIOR, DIALOG_STYLE_LIST, "Choose an interior to set for this business.", string, "Select", "Cancel");
	}
	else if(!strcmp(option, "world", true))
	{
	    new worldid;

	    if(sscanf(param, "i", worldid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editbiz [businessid] [world] [vw]");
		}

		BusinessInfo[businessid][bWorld] = worldid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET world = %i WHERE id = %i", BusinessInfo[businessid][bWorld], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SM(playerid, COLOR_AQUA, "** You've changed the virtual world of business %i to %i.", businessid, worldid);
	}
	else if(!strcmp(option, "type", true))
	{
	    new type;

	    if(sscanf(param, "i", type))
	    {
	        SM(playerid, COLOR_SYNTAX, "Usage: /editbiz [businessid] [type] [value (1-%i)]", sizeof(bizInteriors));
	        SCM(playerid, COLOR_GREY2, "List of options: (1) 24/7 (2) Gun Shop (3) Clothes Shop (4) Gym (5) Restaurant (6) Ad Agency (7) Club/Bar");
	        return 1;
		}
		if(!(1 <= type <= sizeof(bizInteriors)))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
		}

		BusinessInfo[businessid][bType] = type-1;
		BusinessInfo[businessid][bInterior] = bizInteriors[type][intID];
		BusinessInfo[businessid][bIntX] = bizInteriors[type][intX];
		BusinessInfo[businessid][bIntY] = bizInteriors[type][intY];
		BusinessInfo[businessid][bIntZ] = bizInteriors[type][intZ];
		BusinessInfo[businessid][bIntA] = bizInteriors[type][intA];

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET type = %i, int_x = '%f', int_y = '%f', int_z = '%f', int_a = '%f', interior = %i, world = %i WHERE id = %i", type-1, BusinessInfo[businessid][bIntX], BusinessInfo[businessid][bIntY], BusinessInfo[businessid][bIntZ], BusinessInfo[businessid][bIntA], BusinessInfo[businessid][bInterior], BusinessInfo[businessid][bWorld], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SM(playerid, COLOR_AQUA, "** You've changed the type of business %i to %i.", businessid, type);
	}
	else if(!strcmp(option, "owner", true))
	{
	    new targetid;

	    if(sscanf(param, "u", targetid))
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /editbiz [businessid] [owner] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
		}
		if(!pData[targetid][pLogged])
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
		}

        SetBusinessOwner(businessid, targetid);
	    SM(playerid, COLOR_AQUA, "** You've changed the owner of business %i to %s.", businessid, GetRPName(targetid));
	}
	else if(!strcmp(option, "price", true))
	{
	    new price;

	    if(sscanf(param, "i", price))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editbiz [businessid] [price] [value]");
		}
		if(price < 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $0.");
		}

		BusinessInfo[businessid][bPrice] = price;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET price = %i WHERE id = %i", BusinessInfo[businessid][bPrice], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SM(playerid, COLOR_AQUA, "** You've changed the price of business %i to $%i.", businessid, price);
	}
	else if(!strcmp(option, "entryfee", true))
	{
	    new price;

	    if(sscanf(param, "i", price))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editbiz [businessid] [entryfee] [value]");
		}
		if(price < 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $0.");
		}

		BusinessInfo[businessid][bEntryFee] = price;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET entryfee = %i WHERE id = %i", BusinessInfo[businessid][bEntryFee], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SM(playerid, COLOR_AQUA, "** You've changed the entry fee of business %i to $%i.", businessid, price);
	}
	else if(!strcmp(option, "products", true))
	{
	    new amount;

	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editbiz [businessid] [products] [value]");
		}

		BusinessInfo[businessid][bProducts] = amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET products = %i WHERE id = %i", BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SM(playerid, COLOR_AQUA, "** You've changed the products amount of business %i to %i.", businessid, amount);
	}
    else if(!strcmp(option, "locked", true))
	{
	    new locked;

	    if(sscanf(param, "i", locked) || !(0 <= locked <= 1))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editbiz [businessid] [locked] [0/1]");
		}

		BusinessInfo[businessid][bLocked] = locked;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET locked = %i WHERE id = %i", BusinessInfo[businessid][bLocked], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SM(playerid, COLOR_AQUA, "** You've changed the lock state of business %i to %i.", businessid, locked);
	}

	return 1;
}

CMD:removebiz(playerid, params[])
{
	new businessid;

	if(pData[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", businessid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /removebiz [businessid]");
	}
	if(!(0 <= businessid < MAX_HOUSES) || !BusinessInfo[businessid][bExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid business.");
	}

	DestroyDynamic3DTextLabel(BusinessInfo[businessid][bText]);
	DestroyDynamicPickup(BusinessInfo[businessid][bPickup]);
	DestroyDynamicMapIcon(BusinessInfo[businessid][bMapIcon]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM businesses WHERE id = %i", BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

	BusinessInfo[businessid][bExists] = 0;
	BusinessInfo[businessid][bID] = 0;
	BusinessInfo[businessid][bOwnerID] = 0;

	SM(playerid, COLOR_AQUA, "** You have removed business %i.", businessid);
	return 1;
}

CMD:gotobiz(playerid, params[])
{
	new businessid;

	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", businessid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gotobiz [businessid]");
	}
	if(!(0 <= businessid < MAX_HOUSES) || !BusinessInfo[businessid][bExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid business.");
	}

	GameTextForPlayer(playerid, "~w~Teleported", 5000, 1);

	SetPlayerPos(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ]);
	SetPlayerFacingAngle(playerid, BusinessInfo[businessid][bPosA]);
	SetPlayerInterior(playerid, BusinessInfo[businessid][bOutsideInt]);
	SetPlayerVirtualWorld(playerid, BusinessInfo[businessid][bOutsideVW]);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:bizhelp(playerid, params[])
{
	SCM(playerid, COLOR_LIGHTORANGE, "** BUSINESS: /buybiz, /lock, /bwithdraw, /bdeposit, /sellbiz, /sellmybiz, /bizinfo.");
	SCM(playerid, COLOR_LIGHTORANGE, "** BUSINESS: /entryfee, /sethname, /businessmenu, /products.");
	return 1;
}

CMD:buybiz(playerid, params[])
{
	new businessid;

	if((businessid = GetNearbyBusiness(playerid)) == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is no business in range. You must be near a business.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /buybiz [confirm]");
	}
	if(BusinessInfo[businessid][bOwnerID])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This business already has an owner.");
	}
	if(pData[playerid][pCash] < BusinessInfo[businessid][bPrice])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this business.");
	}
    if(GetPlayerAssetCount(playerid, LIMIT_BUSINESSES) >= GetPlayerAssetLimit(playerid, LIMIT_BUSINESSES))
	{
	    return SM(playerid, COLOR_SYNTAX, "You currently own %i/%i businesses. You can't own anymore unless you upgrade your asset perk.", GetPlayerAssetCount(playerid, LIMIT_BUSINESSES), GetPlayerAssetLimit(playerid, LIMIT_BUSINESSES));
	}

	SetBusinessOwner(businessid, playerid);
	GivePlayerCash(playerid, -BusinessInfo[businessid][bPrice]);

	SM(playerid, COLOR_YELLOW, "You paid $%i for this %s. /bizhelp for a list of commands.", BusinessInfo[businessid][bPrice], bizInteriors[BusinessInfo[businessid][bType]][intType]);
    Log_Write("log_property", "%s (uid: %i) purchased %s (id: %i) for $%i.", GetPlayerNameEx(playerid), pData[playerid][pID], bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bID], BusinessInfo[businessid][bPrice]);
	return 1;
}

CMD:bwithdraw(playerid, params[])
{
	new businessid = GetInsideBusiness(playerid), amount;

	if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside any business of yours.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SM(playerid, COLOR_SYNTAX, "Usage: /bwithdraw [amount] ($%i available)", BusinessInfo[businessid][bCash]);
	}
	if(amount < 1 || amount > BusinessInfo[businessid][bCash])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
	}

	BusinessInfo[businessid][bCash] -= amount;
	GivePlayerCash(playerid, amount);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(playerid, COLOR_AQUA, "** You have withdrawn $%i from the business vault. There is now $%i remaining.", amount, BusinessInfo[businessid][bCash]);
	return 1;
}

CMD:bdeposit(playerid, params[])
{
	new businessid = GetInsideBusiness(playerid), amount;

	if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside any business of yours.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SM(playerid, COLOR_SYNTAX, "Usage: /bdeposit [amount] ($%i available)", BusinessInfo[businessid][bCash]);
	}
	if(amount < 1 || amount > pData[playerid][pCash])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
	}

	BusinessInfo[businessid][bCash] += amount;
	GivePlayerCash(playerid, -amount);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(playerid, COLOR_AQUA, "** You have deposited $%i in the business vault. There is now $%i available.", amount, BusinessInfo[businessid][bCash]);
	return 1;
}

CMD:sellbiz(playerid, params[])
{
	new businessid = GetNearbyBusinessEx(playerid), targetid, amount;

	if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any business of yours.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /sellbiz [playerid] [amount]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't sell to yourself.");
	}
	if(amount < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must specify an amount above zero.");
	}

	pData[targetid][pBizOffer] = playerid;
	pData[targetid][pBizOffered] = businessid;
	pData[targetid][pBizPrice] = amount;

	SM(targetid, COLOR_AQUA, "** %s offered you their business for $%i (/accept business).", GetRPName(playerid), amount);
	SM(playerid, COLOR_AQUA, "** You have offered %s to buy your business for $%i.", GetRPName(targetid), amount);
	return 1;
}

/*CMD:sellmybiz(playerid, params[])
{
	new businessid = GetNearbyBusinessEx(playerid);

	if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any business of yours.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /sellmybiz [confirm]");
	    SM(playerid, COLOR_WHITE, "This command sells your business back to the state. You will receive $%i back.", percent(BusinessInfo[businessid][bPrice], 75));
	    return 1;
	}

	SetBusinessOwner(businessid, INVALID_PLAYER_ID);
	GivePlayerCash(playerid, percent(BusinessInfo[businessid][bPrice], 75));

	SM(playerid, COLOR_YELLOW, "You have sold your business to the state and received $%i back.", percent(BusinessInfo[businessid][bPrice], 75));
    Log_Write("log_property", "%s (uid: %i) sold their %s business (id: %i) to the state for $%i", GetPlayerNameEx(playerid), pData[playerid][pID], bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bID], percent(BusinessInfo[businessid][bPrice], 75));
	return 1;
}*/

CMD:bizinfo(playerid, params[])
{
    new businessid = GetNearbyBusinessEx(playerid);

	if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any business of yours.");
	}

    SM(playerid, SERVER_COLOR, "Business ID %i:", businessid);
	SM(playerid, COLOR_GREY2, "(Value: $%i) - (Type: %s) - (Location: %s) - (Active: %s) - (Status: %s)", BusinessInfo[businessid][bPrice], bizInteriors[BusinessInfo[businessid][bType]][intType], GetZoneName(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ]), (gettime() - BusinessInfo[businessid][bTimestamp] > 1209600) ? (""SVRCLR"No{C8C8C8}") : ("Yes"), (BusinessInfo[businessid][bLocked]) ? ("Closed") : ("Opened"));
	SM(playerid, COLOR_GREY2, "(Vault: $%i) - (Entry Fee: $%i) - (Products: %i)", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bEntryFee], BusinessInfo[businessid][bProducts]);
	return 1;
}

CMD:businessmenu(playerid, params[])
{
    new businessid = GetNearbyBusinessEx(playerid);

    if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're not near any business that you own.");
	}
	ShowPlayerDialog(playerid, DIALOG_BIZMENU, DIALOG_STYLE_LIST, "Business Menu","Change Store Name\nChange Message\nSafe\nLock Business", "Select", "Cancel");
	return 1;
}
CMD:entryfee(playerid, params[])
{
	new businessid = GetNearbyBusinessEx(playerid), amount;

	if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any business of yours.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /entryfee [amount]");
	}
	if(amount < 0 || amount > 15000)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The entry fee can't be below $0 or above $15,000.");
	}

	BusinessInfo[businessid][bEntryFee] = amount;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET entryfee = %i WHERE id = %i", BusinessInfo[businessid][bEntryFee], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadBusiness(businessid);
	SM(playerid, COLOR_AQUA, "** You have set the entry fee to $%i.", amount);
	return 1;
}

CMD:buyclothes(playerid, params[]) return callcmd::buy(playerid, params);
CMD:buy(playerid, params[])
{
	new businessid = GetInsideBusiness(playerid), title[64], string[1024];

	if(businessid == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside of any business where you can buy stuff.");
	}
	if(BusinessInfo[businessid][bLocked])
	{
		return SCM(playerid, COLOR_SYNTAX, "The store is closed. Try again later.");
	}
	if(BusinessInfo[businessid][bProducts] <= 0)
 	{
	 	return SCM(playerid, COLOR_SYNTAX, "This business is out of stock.");
   	}

	format(title, sizeof(title), "%s's %s (( %i Products ))", BusinessInfo[businessid][bOwner], bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bProducts]);

	switch(BusinessInfo[businessid][bType])
	{
	    case BUSINESS_STORE:
	    {
			format(string, sizeof(string), "Mobile Phone\t%s\nPortable Radio\t%s\nCigars\t%s\nSpraycans\t%s\nPhonebook\t%s\nCamera\t%s\nMP3 player\t%s\nFishing rod\t%s\nFish bait\t%s\nMuriatic acid\t%s\nBaking soda\t%s\nPocket watch\t%s\nGPS system\t%s\nGasoline can\t%s\nRope\t%s\nBlindfold\t%s\nSmall Backpack\t%s\nToolkit\t%s\nFlashlight\t%s\nLottery Ticket\t%s\nMask\t%s",
				FormatNumber(BusinessInfo[businessid][bPrices][0]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][2]),
				FormatNumber(BusinessInfo[businessid][bPrices][3]),
				FormatNumber(BusinessInfo[businessid][bPrices][4]),
				FormatNumber(BusinessInfo[businessid][bPrices][5]),
				FormatNumber(BusinessInfo[businessid][bPrices][6]),
				FormatNumber(BusinessInfo[businessid][bPrices][7]),
				FormatNumber(BusinessInfo[businessid][bPrices][8]),
				FormatNumber(BusinessInfo[businessid][bPrices][9]),
				FormatNumber(BusinessInfo[businessid][bPrices][10]),
				FormatNumber(BusinessInfo[businessid][bPrices][11]),
				FormatNumber(BusinessInfo[businessid][bPrices][12]),
				FormatNumber(BusinessInfo[businessid][bPrices][13]),
				FormatNumber(BusinessInfo[businessid][bPrices][14]),
				FormatNumber(BusinessInfo[businessid][bPrices][15]),
				FormatNumber(BusinessInfo[businessid][bPrices][16]),
				FormatNumber(BusinessInfo[businessid][bPrices][17]),
				FormatNumber(BusinessInfo[businessid][bPrices][18]),
				FormatNumber(BusinessInfo[businessid][bPrices][19]),
				FormatNumber(BusinessInfo[businessid][bPrices][20]));

	        ShowPlayerDialog(playerid, DIALOG_BUY, DIALOG_STYLE_TABLIST, title, string, "Select", "Cancel");
		}
		case BUSINESS_GUNSHOP:
		{
			format(string, sizeof(string), "Baseball Bat\t%s\n9mm Pistol\t%s\nShotgun\t%s\nMp5\t%s\nDesert Eagle\t%s\nM4A1\t%s\nVest\t%s\nBouquet\t%s\nCrowbar\t%s\nHelmet\t%s",
				FormatNumber(BusinessInfo[businessid][bPrices][0]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][2]),
				FormatNumber(BusinessInfo[businessid][bPrices][3]),
				FormatNumber(BusinessInfo[businessid][bPrices][4]),
				FormatNumber(BusinessInfo[businessid][bPrices][5]),
				FormatNumber(BusinessInfo[businessid][bPrices][6]),
				FormatNumber(BusinessInfo[businessid][bPrices][7]),
				FormatNumber(BusinessInfo[businessid][bPrices][8]),
				FormatNumber(BusinessInfo[businessid][bPrices][9]));

	        ShowPlayerDialog(playerid, DIALOG_BUY, DIALOG_STYLE_TABLIST, title, string, "Select", "Cancel");

		}
		case BUSINESS_CLOTHES:
		{
			format(string, sizeof(string), "Clothes\t%s\nGlasses\t%s\nBandanas & Masks\t%s\nHats & Caps\t%s\nMisc Clothing\t%s",
				FormatNumber(BusinessInfo[businessid][bPrices][0]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]));
	        ShowPlayerDialog(playerid, DIALOG_BUY, DIALOG_STYLE_TABLIST, title, string, "Select", "Cancel");
		}
		case BUSINESS_GYM:
		{
			format(string, sizeof(string), "Normal\tFree\nBoxing\t%s\nKung Fu\t%s\nKneehead\t%s\nGrabkick\t%s\nElbow\t%s",
				FormatNumber(BusinessInfo[businessid][bPrices][0]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][2]),
				FormatNumber(BusinessInfo[businessid][bPrices][3]),
				FormatNumber(BusinessInfo[businessid][bPrices][4]));

	        ShowPlayerDialog(playerid, DIALOG_BUY, DIALOG_STYLE_TABLIST, title, string, "Select", "Cancel");
		}
		case BUSINESS_RESTAURANT:
		{
			format(string, sizeof(string), "Water\t%s\nSprunk\t%s\nKid's Meal\t%s\nMedium Meal\t%s\nBig Meal\t%s",
				FormatNumber(BusinessInfo[businessid][bPrices][0]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][2]),
				FormatNumber(BusinessInfo[businessid][bPrices][3]),
				FormatNumber(BusinessInfo[businessid][bPrices][4]));

	        ShowPlayerDialog(playerid, DIALOG_BUY, DIALOG_STYLE_TABLIST, title, string, "Select", "Cancel");
		}
		case BUSINESS_BARCLUB:
		{
			format(string, sizeof(string), "Water\t%s\nSprunk\t%s\nBeer\t%s\nWine\t%s\nWhiskey\t%s",
				FormatNumber(BusinessInfo[businessid][bPrices][0]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][2]),
				FormatNumber(BusinessInfo[businessid][bPrices][3]),
				FormatNumber(BusinessInfo[businessid][bPrices][4]));

	        ShowPlayerDialog(playerid, DIALOG_BUY, DIALOG_STYLE_TABLIST, title, string, "Select", "Cancel");
		}
	}
	return 1;
}

CMD:products(playerid, parmas[]) {

    new businessid = GetInsideBusiness(playerid), string[1024], title[64];
    if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're not near any business that you own.");
	}
	format(title, sizeof(title), "%s's %s (( %i Products ))", BusinessInfo[businessid][bOwner], bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bProducts]);
	switch(BusinessInfo[businessid][bType])
	{
	    case BUSINESS_STORE:
	    {
			format(string, sizeof(string), "Mobile Phone\t%s\nPortable Radio\t%s\nCigars\t%s\nSpraycans\t%s\nPhonebook\t%s\nCamera\t%s\nMP3 player\t%s\nFishing rod\t%s\nFish bait\t%s\nMuriatic acid\t%s\nBaking soda\t%s\nPocket watch\t%s\nGPS system\t%s\nGasoline can\t%s\nRope\t%s\nBlindfold\t%s\nSmall Backpack\t%s\nToolkit\t%s\nFlashlight\t%s\nLottery Ticket\t%s\nMask\t%s",
				FormatNumber(BusinessInfo[businessid][bPrices][0]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][2]),
				FormatNumber(BusinessInfo[businessid][bPrices][3]),
				FormatNumber(BusinessInfo[businessid][bPrices][4]),
				FormatNumber(BusinessInfo[businessid][bPrices][5]),
				FormatNumber(BusinessInfo[businessid][bPrices][6]),
				FormatNumber(BusinessInfo[businessid][bPrices][7]),
				FormatNumber(BusinessInfo[businessid][bPrices][8]),
				FormatNumber(BusinessInfo[businessid][bPrices][9]),
				FormatNumber(BusinessInfo[businessid][bPrices][10]),
				FormatNumber(BusinessInfo[businessid][bPrices][11]),
				FormatNumber(BusinessInfo[businessid][bPrices][12]),
				FormatNumber(BusinessInfo[businessid][bPrices][13]),
				FormatNumber(BusinessInfo[businessid][bPrices][14]),
				FormatNumber(BusinessInfo[businessid][bPrices][15]),
				FormatNumber(BusinessInfo[businessid][bPrices][16]),
				FormatNumber(BusinessInfo[businessid][bPrices][17]),
				FormatNumber(BusinessInfo[businessid][bPrices][18]),
				FormatNumber(BusinessInfo[businessid][bPrices][19]),
				FormatNumber(BusinessInfo[businessid][bPrices][20]));

	        ShowPlayerDialog(playerid, DIALOG_EDITBUY, DIALOG_STYLE_TABLIST, title, string, "Select", "Cancel");
		}
		case BUSINESS_GUNSHOP:
		{
			format(string, sizeof(string), "Baseball Bat\t%s\n9mm Pistol\t%s\nShotgun\t%s\nRiffle\t%s\nMp5\t%s\nDesert Eagle\t%s\nM4A1\t%s\nVest\t%s\nBouquet\t%s",
				FormatNumber(BusinessInfo[businessid][bPrices][0]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][2]),
				FormatNumber(BusinessInfo[businessid][bPrices][3]),
				FormatNumber(BusinessInfo[businessid][bPrices][4]),
				FormatNumber(BusinessInfo[businessid][bPrices][5]),
				FormatNumber(BusinessInfo[businessid][bPrices][6]),
				FormatNumber(BusinessInfo[businessid][bPrices][7]),
				FormatNumber(BusinessInfo[businessid][bPrices][8]));

	        ShowPlayerDialog(playerid, DIALOG_EDITBUY, DIALOG_STYLE_TABLIST, title, string, "Select", "Cancel");

		}
		case BUSINESS_CLOTHES:
		{
			format(string, sizeof(string), "Clothes\t%s\nGlasses\t%s\nBandanas & Masks\t%s\nHats & Caps\t%s\nMisc Clothing\t%s",
				FormatNumber(BusinessInfo[businessid][bPrices][0]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]));
	        ShowPlayerDialog(playerid, DIALOG_EDITBUY, DIALOG_STYLE_TABLIST, title, string, "Select", "Cancel");
		}
		case BUSINESS_GYM:
		{
			format(string, sizeof(string), "Normal\tFree\nBoxing\t%s\nKung Fu\t%s\nKneehead\t%s\nGrabkick\t%s\nElbow\t%s",
				FormatNumber(BusinessInfo[businessid][bPrices][0]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][2]),
				FormatNumber(BusinessInfo[businessid][bPrices][3]),
				FormatNumber(BusinessInfo[businessid][bPrices][4]));

	        ShowPlayerDialog(playerid, DIALOG_EDITBUY, DIALOG_STYLE_TABLIST, title, string, "Select", "Cancel");
		}
		case BUSINESS_RESTAURANT:
		{
			format(string, sizeof(string), "Water\t%s\nSprunk\t%s\nKid's Meal\t%s\nMedium Meal\t%s\nBig Meal\t%s",
				FormatNumber(BusinessInfo[businessid][bPrices][0]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][2]),
				FormatNumber(BusinessInfo[businessid][bPrices][3]),
				FormatNumber(BusinessInfo[businessid][bPrices][4]));

	        ShowPlayerDialog(playerid, DIALOG_EDITBUY, DIALOG_STYLE_TABLIST, title, string, "Select", "Cancel");
		}
		case BUSINESS_BARCLUB:
		{
			format(string, sizeof(string), "Water\t%s\nSprunk\t%s\nBeer\t%s\nWine\t%s\nWhiskey\t%s",
				FormatNumber(BusinessInfo[businessid][bPrices][0]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][2]),
				FormatNumber(BusinessInfo[businessid][bPrices][3]),
				FormatNumber(BusinessInfo[businessid][bPrices][4]));

	        ShowPlayerDialog(playerid, DIALOG_EDITBUY, DIALOG_STYLE_TABLIST, title, string, "Select", "Cancel");
		}
	}
	return 1;
}

CMD:phoneadvertise(playerid, params[]) return callcmd::phonead(playerid, params);
CMD:phonead(playerid, params[])
{
    new price = strlen(params) * 10;

	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /(phonead)vertise [advertisement] ($10/char)");
	}
	if(pData[playerid][pAdMuted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are muted from submitting advertisements. /report for an unmute.");
	}
	if(!pData[playerid][pPhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a mobile phone. You need a phone so people can contact you.");
	}
	if(pData[playerid][pTogglePhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use your mobile phone right now as you have it toggled ((/tog phone)).");
	}
	if(gettime() - gLastAd < 30)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Advertisements can only be posted every 30 seconds.");
	}
	if(pData[playerid][pDonator] < 1 && pData[playerid][pCash] < price)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need $%i in order to place the advertisement. You can't afford that.", price);
	}

	new
		string[20];

	gLastAd = gettime();

	if(pData[playerid][pDonator] == 1)
	{
	    SCM(playerid, COLOR_VIP, "** VIP Perk: Your advertisement was posted free of charge!");
	}
	else
	{
		format(string, sizeof(string), "~r~-$%i", price);
		GameTextForPlayer(playerid, string, 5000, 1);

		GivePlayerCash(playerid, -price);
	}

	SMA(COLOR_WHITE, "["ORANGE"Phone Advert"WHITE"]: %s - Contact: (%i) (%s)", params, pData[playerid][pPhone], GetRPName(playerid));
	return 1;
}

CMD:advertise(playerid, params[])
{
	return callcmd::ad(playerid, params);
}

CMD:ad(playerid, params[])
{
    new businessid = GetInsideBusiness(playerid), price = strlen(params) * 10;

	if((businessid == -1 || BusinessInfo[businessid][bType] != 5))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside of any advertisement business.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /(ad)vertise [advertisement] ($10/char)");
	}
	if(pData[playerid][pAdMuted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are muted from submitting advertisements. /report for an unmute.");
	}
	if(!pData[playerid][pPhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a mobile phone. You need a phone so people can contact you.");
	}
	if(gettime() - gLastAd < 30)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Advertisements can only be posted every 30 seconds.");
	}
	if(pData[playerid][pDonator] < 1 && pData[playerid][pCash] < price)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need $%i in order to place the advertisement. You can't afford that.", price);
	}

	new
		string[20];

	gLastAd = gettime();

	format(string, sizeof(string), "~r~-$%i", price);
	GameTextForPlayer(playerid, string, 5000, 1);

	GivePlayerCash(playerid, -price);

	if(businessid >= 0)
	{
		BusinessInfo[businessid][bCash] += price;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
		mysql_tquery(connectionID, queryBuffer);
	}

	SMA(COLOR_GREEN, "Advert: %s - Contact: %i", params, GetRPName(playerid), pData[playerid][pPhone]);
	return 1;
}

CMD:mark(playerid, params[])
{
	new slot;

    if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", slot))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /mark [slot (1-3)]");
	}
	if(!(1 <= slot <= 3))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid slot.");
	}

	slot--;

	GetPlayerPos(playerid, MarkedPositions[playerid][slot][mPosX], MarkedPositions[playerid][slot][mPosY], MarkedPositions[playerid][slot][mPosZ]);
	GetPlayerFacingAngle(playerid, MarkedPositions[playerid][slot][mPosA]);

	MarkedPositions[playerid][slot][mInterior] = GetPlayerInterior(playerid);
	MarkedPositions[playerid][slot][mWorld] = GetPlayerVirtualWorld(playerid);

	SM(playerid, COLOR_AQUA, "** Position saved in slot %i.", slot + 1);
	return 1;
}

CMD:gotomark(playerid, params[])
{
	new slot;

    if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", slot))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gotomark [slot (1-3)]");
	}
	if(!(1 <= slot <= 3))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid slot.");
	}
	if(MarkedPositions[playerid][slot-1][mPosX] == 0.0 && MarkedPositions[playerid][slot-1][mPosY] == 0.0 && MarkedPositions[playerid][slot-1][mPosZ] == 0.0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is no position in the slot selected.");
	}

	slot--;

	GameTextForPlayer(playerid, "~w~Loading objects...", 5000, 1);

	TeleportToCoords(playerid, MarkedPositions[playerid][slot][mPosX], MarkedPositions[playerid][slot][mPosY], MarkedPositions[playerid][slot][mPosZ], MarkedPositions[playerid][slot][mPosA], MarkedPositions[playerid][slot][mInterior], MarkedPositions[playerid][slot][mWorld], true);
	SetCameraBehindPlayer(playerid);

	return 1;
}


CMD:createdoor(playerid, params[]) { return callcmd::createentrance(playerid, params); }
CMD:createentrance(playerid, params[])
{
	new name[40], Float:x, Float:y, Float:z, Float:a;

    if(pData[playerid][pAdmin] < 7 && pData[playerid][pGangMod] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[40]", name))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /createentrance [name]");
	}
	if(GetNearbyEntrance(playerid) >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is an entrance in range. Find somewhere else to create this one.");
	}

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	for(new i = 0; i < MAX_ENTRANCES; i ++)
	{
	    if(!EntranceInfo[i][eExists])
	    {
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO entrances (name, pos_x, pos_y, pos_z, pos_a, outsideint, outsidevw) VALUES('%e', '%f', '%f', '%f', '%f', %i, %i)", name, x, y, z, a - 180.0, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
			mysql_tquery(connectionID, queryBuffer, "OnAdminCreateEntrance", "iisffff", playerid, i, name, x, y, z, a);
			return 1;
		}
	}
	
	Log_Write("log_createentrance", "%s (uid: %i) has create an entrance", GetPlayerNameEx(playerid), pData[playerid][pID]);
	SCM(playerid, COLOR_SYNTAX, "Entrance slots are currently full. Ask managements to increase the internal limit.");
	return 1;
}

CMD:editdoor(playerid, params[]) { return callcmd::editentrance(playerid, params); }
CMD:editentrance(playerid, params[])
{
	new entranceid, option[14], param[64];

    //if(pData[playerid][pAdmin] < 7 && pData[playerid][pGangMod] < 1)
    if(!pData[playerid][pDynamicAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[14]S()[64]", entranceid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Outside, Inside, Name, Icon, World, Owner, Locked, Radius, AdminLevel");
		SCM(playerid, COLOR_WHITE, "Available options: Faction, VIP, Vehicles, Freeze, Label, Password, Mapicon");
	    return 1;
	}
	if(!(0 <= entranceid < MAX_ENTRANCES) || !EntranceInfo[entranceid][eExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid entrance.");
	}

	if(!strcmp(option, "outside", true))
	{
	    GetPlayerPos(playerid, EntranceInfo[entranceid][ePosX], EntranceInfo[entranceid][ePosY], EntranceInfo[entranceid][ePosZ]);
	    GetPlayerFacingAngle(playerid, EntranceInfo[entranceid][ePosA]);

	    EntranceInfo[entranceid][eOutsideInt] = GetPlayerInterior(playerid);
	    EntranceInfo[entranceid][eOutsideVW] = GetPlayerVirtualWorld(playerid);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', outsideint = %i, outsidevw = %i WHERE id = %i", EntranceInfo[entranceid][ePosX], EntranceInfo[entranceid][ePosY], EntranceInfo[entranceid][ePosZ], EntranceInfo[entranceid][ePosA], EntranceInfo[entranceid][eOutsideInt], EntranceInfo[entranceid][eOutsideVW], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ReloadEntrance(entranceid);
	    SM(playerid, COLOR_AQUA, "** You've changed the exterior of entrance %i.", entranceid);
	}
	else if(!strcmp(option, "inside", true))
	{
	    GetPlayerPos(playerid, EntranceInfo[entranceid][eIntX], EntranceInfo[entranceid][eIntY], EntranceInfo[entranceid][eIntZ]);
	    GetPlayerFacingAngle(playerid, EntranceInfo[entranceid][eIntA]);

	    EntranceInfo[entranceid][eInterior] = GetPlayerInterior(playerid);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET int_x = '%f', int_y = '%f', int_z = '%f', int_a = '%f', interior = %i WHERE id = %i", EntranceInfo[entranceid][eIntX], EntranceInfo[entranceid][eIntY], EntranceInfo[entranceid][eIntZ], EntranceInfo[entranceid][eIntA], EntranceInfo[entranceid][eInterior], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SM(playerid, COLOR_AQUA, "** You've changed the interior of entrance %i.", entranceid);
	}
	else if(!strcmp(option, "name", true))
	{
	    new name[32];

	    if(sscanf(param, "s[32]", name))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [name] [text]");
		}

		strcpy(EntranceInfo[entranceid][eName], name, 32);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET name = '%e' WHERE id = %i", EntranceInfo[entranceid][eName], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SM(playerid, COLOR_AQUA, "** You've changed the name of entrance %i to '%s'.", entranceid, name);
	}
	else if(!strcmp(option, "icon", true))
	{
	    new iconid;

	    if(sscanf(param, "i", iconid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [icon] [iconid (19300 = hide)]");
		}
		if(!IsValidModel(iconid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid model ID.");
		}

		EntranceInfo[entranceid][eIcon] = iconid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET iconid = %i WHERE id = %i", EntranceInfo[entranceid][eIcon], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SM(playerid, COLOR_AQUA, "** You've changed the pickup icon model of entrance %i to %i.", entranceid, iconid);
	}
	else if(!strcmp(option, "world", true))
	{
	    new worldid;

	    if(sscanf(param, "i", worldid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [world] [vw]");
		}

		EntranceInfo[entranceid][eWorld] = worldid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET world = %i WHERE id = %i", EntranceInfo[entranceid][eWorld], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SM(playerid, COLOR_AQUA, "** You've changed the virtual world of entrance %i to %i.", entranceid, worldid);
	}
	else if(!strcmp(option, "owner", true))
	{
	    new targetid;

	    if(!isnull(param) && !strcmp(param, "none", true))
		{
 			SetEntranceOwner(entranceid, INVALID_PLAYER_ID);
	    	return SM(playerid, COLOR_AQUA, "** You've reset the owner of entrance %i.", entranceid);
		}
		if(sscanf(param, "u", targetid))
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [owner] [playerid/none]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
		}
		if(!pData[targetid][pLogged])
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
		}

        SetEntranceOwner(entranceid, targetid);
	    SM(playerid, COLOR_AQUA, "** You've changed the owner of entrance %i to %s.", entranceid, GetRPName(targetid));
	}
    else if(!strcmp(option, "locked", true))
	{
	    new locked;

	    if(sscanf(param, "i", locked) || !(0 <= locked <= 1))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [locked] [0/1]");
		}

		EntranceInfo[entranceid][eLocked] = locked;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET locked = %i WHERE id = %i", EntranceInfo[entranceid][eLocked], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SM(playerid, COLOR_AQUA, "** You've changed the lock state of entrance %i to %i.", entranceid, locked);
	}
	else if(!strcmp(option, "radius", true))
	{
	    new Float:radius;

	    if(sscanf(param, "f", radius))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [radius] [range]");
		}
		if(!(1.0 <= radius <= 20.0))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The entry radius must range between 1.0 and 20.0.");
		}

		EntranceInfo[entranceid][eRadius] = radius;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET radius = '%f' WHERE id = %i", EntranceInfo[entranceid][eRadius], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SM(playerid, COLOR_AQUA, "** You've changed the entry radius of entrance %i to %.1f.", entranceid, radius);
	}
	else if(!strcmp(option, "adminlevel", true))
	{
	    new level;

	    if(sscanf(param, "i", level))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [adminlevel] [level]");
		}
		if(!(0 <= level <= 7))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid level. Valid levels range from 0 to 7.");
		}

		EntranceInfo[entranceid][eAdminLevel] = level;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET adminlevel = %i WHERE id = %i", EntranceInfo[entranceid][eAdminLevel], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SM(playerid, COLOR_AQUA, "** You've changed the admin level of entrance %i to %i.", entranceid, level);
	}
	else if(!strcmp(option, "faction", true))
	{
	    new type;

	    if(sscanf(param, "i", type))
	    {
	        SCM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [faction] [type]");
	        SCM(playerid, COLOR_GREY2, "List of types: (0) None (1) Police (2) Medic (3) News (4) Government (5) Hitman (6) Federal (7) Mechanic (9) Doc (9) Sheriff");
	        return 1;
		}
		if(!(0 <= type <= 9))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
		}

		EntranceInfo[entranceid][eFactionType] = type;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET factiontype = %i WHERE id = %i", EntranceInfo[entranceid][eFactionType], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);

		if(type == FACTION_NONE)
		    SM(playerid, COLOR_AQUA, "** You've reset the faction type of entrance %i.", entranceid);
		else
	    	SM(playerid, COLOR_AQUA, "** You've changed the faction type of entrance %i to %s (%i).", entranceid, factionTypes[type], type);
	}
	else if(!strcmp(option, "vip", true))
	{
	    new rankid;

	    if(sscanf(param, "i", rankid))
	    {
	        SCM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [vip] [rankid]");
	        SCM(playerid, COLOR_GREY2, "List of ranks: (0)None (1) Silver (2) Diamond (3) Platinum");
	        return 1;
		}
		if(!(0 <= rankid <= 3))
		{
			return SCM(playerid, COLOR_SYNTAX, "Invalid VIP rank.");
		}

		EntranceInfo[entranceid][eVIP] = rankid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET vip = %i WHERE id = %i", EntranceInfo[entranceid][eVIP], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SM(playerid, COLOR_AQUA, "** You've changed the VIP rank of entrance %i to {C2A2DA}%s{CCFFFF} (%i).", entranceid, GetDonatorRank(rankid), rankid);
	}
	else if(!strcmp(option, "vehicles", true))
	{
	    new status;

	    if(sscanf(param, "i", status) || !(0 <= status <= 1))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [vehicles] [0/1]");
		}

		EntranceInfo[entranceid][eVehicles] = status;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET vehicles = %i WHERE id = %i", EntranceInfo[entranceid][eVehicles], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);

		if(status)
		    SM(playerid, COLOR_AQUA, "** You've allowed vehicle entry for entrance %i.", entranceid);
		else
		    SM(playerid, COLOR_AQUA, "** You've disallowed vehicle entry for entrance %i.", entranceid);
	}
	else if(!strcmp(option, "freeze", true))
	{
	    new status;

	    if(sscanf(param, "i", status) || !(0 <= status <= 1))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [freeze] [0/1]");
		}

		EntranceInfo[entranceid][eFreeze] = status;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET freeze = %i WHERE id = %i", EntranceInfo[entranceid][eFreeze], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);

		if(status)
		    SM(playerid, COLOR_AQUA, "** You've enabled freeze & object loading for entrance %i.", entranceid);
		else
		    SM(playerid, COLOR_AQUA, "** You've disabled freeze & object loading for entrance %i.", entranceid);
	}
	else if(!strcmp(option, "label", true))
	{
	    new status;

	    if(sscanf(param, "i", status) || !(0 <= status <= 1))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [label] [0/1]");
		}

		EntranceInfo[entranceid][eLabel] = status;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET label = %i WHERE id = %i", EntranceInfo[entranceid][eLabel], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);

		if(status)
		    SM(playerid, COLOR_AQUA, "** You've enabled the 3D text label for entrance %i.", entranceid);
		else
		    SM(playerid, COLOR_AQUA, "** You've disabled the 3D text label for entrance %i.", entranceid);
	}
	else if(!strcmp(option, "password", true))
	{
	    if(isnull(param))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [password] [text ('none' to reset)]");
		}

		strcpy(EntranceInfo[entranceid][ePassword], param, 64);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET password = '%e' WHERE id = %i", EntranceInfo[entranceid][ePassword], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SM(playerid, COLOR_AQUA, "** You've changed the password of entrance %i to '%s'.", entranceid, param);
	}
	else if(!strcmp(option, "mapicon", true))
	{
	    new type;

	    if(sscanf(param, "i", type))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [mapicon] [type (0-63)]");
		}
		if(!(0 <= type <= 63))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid map icon.");
		}

		EntranceInfo[entranceid][eMapIcon] = type;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET mapicon = %i WHERE id = %i", EntranceInfo[entranceid][eMapIcon], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SM(playerid, COLOR_AQUA, "** You've changed the map icon of entrance %i to %i.", entranceid, type);
	}
	else if(!strcmp(option, "color", true))
	{
	    new color;

	    if(sscanf(param, "h", color))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editentrance [entranceid] [color] [0xRRGGBBAA]");
		}

		EntranceInfo[entranceid][eColor] = (color & ~0xFF) | 0xFF;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET color = %i WHERE id = %i", EntranceInfo[entranceid][eColor], EntranceInfo[entranceid][eID]);
		mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
		SM(playerid, COLOR_AQUA, "** You have set the {%06x}color{33CCFF} of entrance ID %i.", color >>> 8, entranceid);
	}

	return 1;
}

CMD:removedoor(playerid, params[]) { return callcmd::removeentrance(playerid, params); }
CMD:removeentrance(playerid, params[])
{
	new entranceid;

    if(pData[playerid][pAdmin] < 7 && pData[playerid][pGangMod] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", entranceid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /removeentrance [entranceid]");
	}
	if(!(0 <= entranceid < MAX_ENTRANCES) || !EntranceInfo[entranceid][eExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid entrance.");
	}

	DestroyDynamic3DTextLabel(EntranceInfo[entranceid][eText]);
	DestroyDynamicPickup(EntranceInfo[entranceid][ePickup]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM entrances WHERE id = %i", EntranceInfo[entranceid][eID]);
	mysql_tquery(connectionID, queryBuffer);

	EntranceInfo[entranceid][eExists] = 0;
	EntranceInfo[entranceid][eID] = 0;
	EntranceInfo[entranceid][eOwnerID] = 0;

	SM(playerid, COLOR_AQUA, "** You have removed entrance %i.", entranceid);
	return 1;
}

CMD:gotodoor(playerid, params[]) { return callcmd::gotoentrance(playerid, params); }
CMD:gotoentrance(playerid, params[])
{
	new entranceid;

	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", entranceid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gotoentrance [entranceid]");
	}
	if(!(0 <= entranceid < MAX_ENTRANCES) || !EntranceInfo[entranceid][eExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid entrance.");
	}

	GameTextForPlayer(playerid, "~w~Teleported", 5000, 1);

	SetPlayerPos(playerid, EntranceInfo[entranceid][ePosX], EntranceInfo[entranceid][ePosY], EntranceInfo[entranceid][ePosZ]);
	SetPlayerFacingAngle(playerid, EntranceInfo[entranceid][ePosA]);
	SetPlayerInterior(playerid, EntranceInfo[entranceid][eOutsideInt]);
	SetPlayerVirtualWorld(playerid, EntranceInfo[entranceid][eOutsideVW]);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:join(playerid, params[])
{
	for(new i = 0; i < sizeof(jobLocations); i ++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, jobLocations[i][jobX], jobLocations[i][jobY], jobLocations[i][jobZ]))
	    {
	        if(pData[playerid][pJob] != JOB_NONE)
	        {
				if(pData[playerid][pVerified] == 0)
				{
					return SendClientMessage(playerid, COLOR_AQUA, "You must verify account to your Discord before Joining a Job.");
				}
	            if(pData[playerid][pDonator] >= 1)
	        	{
	        	    if(pData[playerid][pSecondJob] != JOB_NONE)
	        	    {
	        	        return SCM(playerid, COLOR_SYNTAX, "You have two jobs already. Please quit one of them before getting another one.");
	        	    }
	        	    if(pData[playerid][pJob] == i)
	        	    {
	        	        return SCM(playerid, COLOR_SYNTAX, "You have this job already.");
	        	    }

	        	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET secondjob = %i WHERE uid = %i", i, pData[playerid][pID]);
					mysql_tquery(connectionID, queryBuffer);

					pData[playerid][pSecondJob] = i;
					SM(playerid, COLOR_AQUA, "You are now a "SVRCLR"%s{CCFFFF}. Use /jobhelp for a list of commands related to your new job.", jobLocations[i][jobName]);
	            }
	            else
	            {
	            	SCM(playerid, COLOR_SYNTAX, "You have a job already. Please quit your current job before getting another one.");
				}

				return 1;
			}

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET job = %i WHERE uid = %i", i, pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			pData[playerid][pJob] = i;
			SM(playerid, COLOR_AQUA, "You are now a "SVRCLR"%s{CCFFFF}. Use /jobhelp for a list of commands related to your new job.", jobLocations[i][jobName]);
			return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "You are not in range of any job icon.");
	return 1;
}

CMD:quitjob(playerid, params[])
{
	new slot;

	if(pData[playerid][pDonator] >= 1 && sscanf(params, "i", slot))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /quitjob [1/2]");
	}

	if((pData[playerid][pDonator] < 1) || (pData[playerid][pDonator] >= 1 && slot == 1))
	{
	    if(pData[playerid][pJob] == JOB_NONE)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have a job which you can quit.");
	    }

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET job = -1 WHERE uid = %i", pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "You have quit your job as a "SVRCLR"%s{CCFFFF}.", GetJobName(pData[playerid][pJob]));
		pData[playerid][pJob] = JOB_NONE;
		
		if(pData[playerid][pCarrying])
		{
			pData[playerid][pCarry] = 0;
			pData[playerid][pCarrying] = false;

			RemovePlayerAttachedObject(playerid, 1);
		}
	}
	else if(slot == 2 && pData[playerid][pDonator] >= 1)
	{
	    if(pData[playerid][pSecondJob] == JOB_NONE)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have a job in this slot which you can quit.");
	    }

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET secondjob = -1 WHERE uid = %i", pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "You have quit your secondary job as a "SVRCLR"%s{CCFFFF}.", GetJobName(pData[playerid][pSecondJob]));
		pData[playerid][pSecondJob] = JOB_NONE;

		if(pData[playerid][pCarrying])
		{
			pData[playerid][pCarry] = 0;
			pData[playerid][pCarrying] = false;

			RemovePlayerAttachedObject(playerid, 1);
		}
	}

	return 1;
}

CMD:getorder(playerid, params[])
{
    if(!PlayerHasJob(playerid, JOB_FOODPANDA))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you are not a "SVRCLR"Foodpanda.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 6.0, jobLocations[JOB_FOODPANDA][jobX], jobLocations[JOB_FOODPANDA][jobY], jobLocations[JOB_FOODPANDA][jobZ]))
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not in range of the Foodpanda Manager.");
	}
	if(pData[playerid][pCarrying])
		return SCM(playerid, COLOR_SYNTAX, "You are already carrying a meal to be put on your Wayfarer for delivery!");

	if(pData[playerid][pPizzaCooldown] > 0)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need to wait %i more seconds before you can load another order.", pData[playerid][pPizzaCooldown]);
	}
	
	pData[playerid][pCarry] = 1;
	pData[playerid][pCarrying] = true;
	SetPlayerAttachedObject(playerid, 1, 2663, 6, 0.308999, 0.020000, 0.000000, 15.600001, -103.199974, -2.500001, 1.000000, 1.000000, 1.000000);
	SCM(playerid, -1, "** You have grabbed the order to be delivered, head outside and put the order into one of the Wayfarer that you'll be driving.");
	SCM(playerid, SERVER_COLOR, "type the command "WHITE"'/putorder'"SVRCLR" at the back of the Wayfarer's carrying basket to put the order inside.");
	return 1;
}

CMD:putorder(playerid, params[])
{
	new houseid;

    if(!PlayerHasJob(playerid, JOB_FOODPANDA))
	    return SCM(playerid, SERVER_COLOR, "You can't use this command as you are not working on Foodpanda.");

	if(!pData[playerid][pCarrying])
		return SCM(playerid, SERVER_COLOR, "You are not carrying a meal with you.");

	if(pData[playerid][pCarry] != 1)
		return SCM(playerid, SERVER_COLOR, "That is not a meal that you are carrying with you! (or you are about to give deliver it)");

	new i = GetNearbyVehicle(playerid);

	if((IsACluckNBellVehicle(i) && IsVehicleOccupied(i)) || !IsACluckNBellVehicle(i))
		return SCM(playerid, SERVER_COLOR, "You are not near the basket of a Wayfarer (that is not occupied).");

	if(VehicleInfo[i][vMeal])
		return SCM(playerid, SERVER_COLOR, "This vehicle has a meal loaded into it already!");

	if((houseid = GetRandomHouse(playerid)) == -1)
		return SCM(playerid, SERVER_COLOR, "There are no houses in the server to deliver meal to. Ask an admin to set them up.");

	pData[playerid][pCarry] = 0;
	pData[playerid][pCarrying] = false;

	VehicleInfo[i][vMeal] = true;

	RemovePlayerAttachedObject(playerid, 1);
	pData[playerid][pDistance] = GetPlayerDistanceFromPoint(playerid, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]);
    pData[playerid][pPizzas] = 1;
	pData[playerid][pLastPizza] = gettime();
    pData[playerid][pPizzaTime] = 0;
    pData[playerid][pPizzaCooldown] = 60;

	SetPlayerCheckpoint(playerid, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], 2.0);
    pData[playerid][pCP] = CHECKPOINT_FOODPANDA;

	GameTextForPlayer(playerid, "~w~Deliver to ~r~marker", 5000, 1);
	SCMf(playerid, SERVER_COLOR, "** You have loaded the bike with the meal ordered. Deliver it to %s.", GetZoneName(HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]));
	SCM(playerid, SERVER_COLOR, "type "WHITE"'/graborder'"SVRCLR" from the Wayfarer after reaching the destination before entering the marker.");
	return 1;
}

CMD:graborder(playerid, params[])
{
    if(!PlayerHasJob(playerid, JOB_FOODPANDA))
	    return SCM(playerid, SERVER_COLOR, "You can't use this command as you are not working on Foodpanda.");

	if(pData[playerid][pCarrying])
		return SCM(playerid, SERVER_COLOR, "You are already carrying something.");

	new i = GetNearbyVehicle(playerid);

	if((IsACluckNBellVehicle(i) && IsVehicleOccupied(i)) || !IsACluckNBellVehicle(i))
		return SCM(playerid, SERVER_COLOR, "You are not near the basket of a Wayfarer (that is not occupied).");

	if(!VehicleInfo[i][vMeal])
		return SCM(playerid, SERVER_COLOR, "This vehicle has no order loaded into it!");

	pData[playerid][pCarry] = 2;
	pData[playerid][pCarrying] = true;
	SetPlayerAttachedObject(playerid, 1, 2663, 6, 0.308999, 0.020000, 0.000000, 15.600001, -103.199974, -2.500001, 1.000000, 1.000000, 1.000000);

	VehicleInfo[i][vMeal] = false;

	SCM(playerid, COLOR_YELLOW, "** You grabbed the order to be delivered, You may now enter the destination marker.");
	return 1;
}

CMD:garbage(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!PlayerHasJob(playerid, JOB_GARBAGEMAN))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you are not a Garbage Man.");
	}

	if(!IsPlayerInRangeOfPoint(playerid, 8.0, 2449.1167,-2090.1445,13.5469))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not at the starting point");
	}
	if(pData[playerid][pGarbage] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're already doing a garbage run!");
	}
	if(GetVehicleModel(vehicleid) == 408 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{

		GameTextForPlayer(playerid, "Proceed to the~n~Checkpoint", 5000, 3);
		pData[playerid][pGarbage] = 1;
		pData[playerid][pCP] = CHECKPOINT_GARBAGE;
	 	SetPlayerCheckpoint(playerid, 2382.1963,-1937.9064,13.5469, 5.0);
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GREY, "You must be in a trashmaster vehicle as a driver");
	}
	return 1;
}

CMD:checkcargo(playerid, params[])
{
	new targetid;
	if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /checkcargo [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(pData[targetid][pShipment] == -1)
	{
	    return SCM(playerid, COLOR_WHITE, "The player currently doesn't have a cargo to deliver.");
	}
	if(pData[targetid][pIllegalCargo] == -1)
	{
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s checks the cargo load of %s.", GetRPName(playerid), GetRPName(targetid));
		SCM(playerid, COLOR_WHITE, "Cargo Check: {28c12d}LEGAL PRODUCTS");
	}
	if(pData[targetid][pIllegalCargo] == ILLEGAL_GUNS)
	{
 		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s checks the cargo load of %s.", GetRPName(playerid), GetRPName(targetid));
		SCM(playerid, COLOR_WHITE, "Cargo Check: {ff4242}ILLEGAL WEAPONS");
	}
	if(pData[targetid][pIllegalCargo] == ILLEGAL_MATS)
	{
 		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s checks the cargo load of %s.", GetRPName(playerid), GetRPName(targetid));
		SCM(playerid, COLOR_WHITE, "Cargo Check: {ff4242}ILLEGAL MATERIALS");
	}
	if(pData[targetid][pIllegalCargo] == ILLEGAL_DRUGS)
	{
   		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s checks the cargo load of %s.", GetRPName(playerid), GetRPName(targetid));
		SCM(playerid, COLOR_WHITE, "Cargo Check: {ff4242}ILLEGAL DRUGS");
	}
	return 1;
}

CMD:deliver(playerid, params[])
{
	new businessid, products, amount;

    if(!PlayerHasJob(playerid, JOB_COURIER))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you are not a Trucker.");
	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 414 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 498 && GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need to be driving a Mule or a Boxville.");
	}
	if(pData[playerid][pShipment] == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have no shipment loaded which you can deliver.");
	}
	if((businessid = GetNearbyBusiness(playerid, 7.0)) == -1 || BusinessInfo[businessid][bType] != pData[playerid][pShipment])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of a business which accepts this type of load.");
	}

	if(gettime() - pData[playerid][pLastLoad] < 20 && pData[playerid][pAdmin] < 2 && !pData[playerid][pKicked])
    {
        pData[playerid][pACWarns]++;

        if(pData[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
        {
            SAM(COLOR_YELLOW, "AdmWarning: %s[%i] is possibly teleport delivering (time: %i).", GetRPName(playerid), playerid, gettime() - pData[playerid][pLastLoad]);
		}
		else
		{
		    SMA(COLOR_LIGHTRED, "AdmCmd: %s was autobanned by %s, reason: Teleport delivering", GetRPName(playerid), SERVER_BOT);
		    BanPlayer(playerid, SERVER_BOT, "Teleport delivering");
		}
    }

	products = (GetJobLevel(playerid, JOB_COURIER) * 5) + 5;

	if(pData[playerid][pShipment] == BUSINESS_STORE) {
		amount = (GetJobLevel(playerid, JOB_COURIER) * 650) + 270;
  	} else if(pData[playerid][pShipment] == BUSINESS_GUNSHOP) {
	  	amount = (GetJobLevel(playerid, JOB_COURIER) * 650) + 325;
    } else if(pData[playerid][pShipment] == BUSINESS_CLOTHES) {
		amount = (GetJobLevel(playerid, JOB_COURIER) * 650) + 345;
  	} else if(pData[playerid][pShipment] == BUSINESS_RESTAURANT) {
	  	amount = (GetJobLevel(playerid, JOB_COURIER) * 650) + 390;
 	} else if(pData[playerid][pShipment] == BUSINESS_BARCLUB) {
	 	amount = (GetJobLevel(playerid, JOB_COURIER) * 650) + 240;
	}

	/*amount += floatround(GetPlayerDistanceFromPoint(playerid, -63.4372, -1121.4932, 1.1103) / 2.0);

	SM(playerid, COLOR_AQUA, "** You have earned "SVRCLR"$%i{33CCFF}  for delivering %i products.", amount, products);
	GivePlayerCash(playerid, amount);*/
	if(DoubleSalary)
	{
	    new string[128];
		new double_pay = amount * Salary;
		format(string, sizeof(string), "[DOUBLE-SALARY] You earned $%s instead of $%s since the Double Salary is turned on.", number_format(double_pay), number_format(amount));
		SendClientMessageEx(playerid, COLOR_YELLOW, string);
		AddToPaycheck(playerid, double_pay);
		format(string, sizeof(string), "~g~+$%i", double_pay);
		GameTextForPlayer(playerid, string, 5000, 1);
	}
	else
	{
	    new string[128];
		format(string, sizeof(string), "  You have earned $%i...", amount);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		GivePlayerCash(playerid, amount);
	}
	if(pData[playerid][pIllegalCargo] == ILLEGAL_DRUGS)
	{
		switch(random(4))
		{
	    	case 0:
			{
				SCM(playerid, COLOR_TEAL, "You have received "WHITE"3 grams of pot"TEAL" as a reward for delivering illegal drugs.");
				pData[playerid][pPot] += 3;
			}
	    	case 1:
			{
				SCM(playerid, COLOR_TEAL, "You have received "WHITE"3 grams of meth"TEAL" as a reward for delivering illegal drugs.");
    			pData[playerid][pMeth] += 3;
			}
	    	case 2:
	    	{
				SCM(playerid, COLOR_TEAL, "You have received "WHITE"3 grams of crack"TEAL" as a reward for delivering illegal drugs.");
   				pData[playerid][pCrack] += 3;
			}
	    	case 3:
			{
				SCM(playerid, COLOR_TEAL, "SPECIAL REWARD: You have received "WHITE"3 grams of crack, pot & meth"TEAL" for delivering the drugs.");
   				pData[playerid][pCrack] += 3;
      			pData[playerid][pMeth] += 3;
      			pData[playerid][pPot] += 3;
      		}
		}
	}
	if(pData[playerid][pIllegalCargo] == ILLEGAL_MATS)
	{
		switch(random(3))
		{
	    	case 0:
			{
				SCM(playerid, COLOR_TEAL, "You have received "WHITE"999 materials"TEAL" as a reward for delivering illegal materials.");
    			pData[playerid][pMaterials] += 999;
			}
	    	case 1:
			{
				SCM(playerid, COLOR_TEAL, "You have received "WHITE"250 materials"TEAL" as a reward for delivering illegal materials.");
    			pData[playerid][pMaterials] += 250;
			}
		}
	}
	if(pData[playerid][pIllegalCargo] == ILLEGAL_GUNS)
	{
		switch(random(7))
		{
	    	case 0:
			{
				SCM(playerid, COLOR_TEAL, "SPECIAL REWARD:"WHITE" Shotgun");
    			GiveWeapon(playerid, 25);
			}
	    	case 1:
			{
				SCM(playerid, COLOR_TEAL, "SPECIAL REWARD:"WHITE" Desert Eagle");
    			GiveWeapon(playerid, 24);
			}
  			case 2:
			{
				SCM(playerid, COLOR_TEAL, "SPECIAL REWARD:"WHITE" SPAS-12");
    			GiveWeapon(playerid, 27);
			}
  			case 3:
			{
				SCM(playerid, COLOR_TEAL, "SPECIAL REWARD:"WHITE" Micro Uzi");
    			GiveWeapon(playerid, 28);
			}
  			case 4:
			{
				SCM(playerid, COLOR_TEAL, "SPECIAL REWARD:"WHITE" M4A1");
    			GiveWeapon(playerid, 31);
			}
  			case 5:
			{
				SCM(playerid, COLOR_TEAL, "SPECIAL REWARD:"WHITE" Tec-9");
    			GiveWeapon(playerid, 29);
			}
  			case 6:
			{
				SCM(playerid, COLOR_TEAL, "SPECIAL REWARD:"WHITE" Country rifle");
    			GiveWeapon(playerid, 29);
			}
		}
	}
	BusinessInfo[businessid][bProducts] += products;
	pData[playerid][pShipment] = -1;
	pData[playerid][pCourierCooldown] = 120;
	pData[playerid][pIllegalCargo] = -1;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET products = %i WHERE id = %i", BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

    IncreaseJobSkill(playerid, JOB_COURIER);

	return 1;
}
CMD:loadtruck(playerid, params[])
{
	if(!PlayerHasJob(playerid, JOB_COURIER))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you are not a Trucker.");
	}
	if(pData[playerid][pCourierCooldown] > 0)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need to wait %i more seconds before you can load another delivery.", pData[playerid][pCourierCooldown]);
	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 414 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 498 && GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need to be driving a Mule or a Boxville.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 8.0, 2460.9790,-2119.2590,13.5530))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not at the loading dock.");
	}
	if(pData[playerid][pShipment] >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have a shipment loaded already. You need to deliver it first.");
	}

	ShowPlayerDialog(playerid, DIALOG_PICKLOAD, DIALOG_STYLE_LIST, "Choose the load you want to deliver.", "Grocery supplies\nAmmunition\nClothing items\nFood & drinks\nBeverages\nIllegal Weapons\nIllegal Materials\nIllegal Drugs\nGasoline", "Select", "Cancel");
	return 1;
}

CMD:skill(playerid, params[]) return callcmd::skills(playerid, params);
CMD:skills(playerid, params[])
{
	new string[1024], jobstring1[64], jobstring2[64], jobstring3[64], jobstring4[64],
	jobstring6[64], jobstring7[64], jobstring8[64];
	if(GetJobLevel(playerid, JOB_COURIER) < 5)
	{
		if(pData[playerid][pCourierSkill] < 50) {
			format(jobstring1, sizeof(jobstring1), "Deliver %i more shipments to level up.", 50 - pData[playerid][pCourierSkill]);
		} else if(pData[playerid][pCourierSkill] < 100) {
			format(jobstring1, sizeof(jobstring1), "Deliver %i more shipments to level up.", 100 - pData[playerid][pCourierSkill]);
		} else if(pData[playerid][pCourierSkill] < 200) {
			format(jobstring1, sizeof(jobstring1), "Deliver %i more shipments to level up.", 200 - pData[playerid][pCourierSkill]);
		} else if(pData[playerid][pCourierSkill] < 350) {
			format(jobstring1, sizeof(jobstring1), "Deliver %i more shipments to level up.", 350 - pData[playerid][pCourierSkill]);
		}
	}
	else
	{
		format(jobstring1, sizeof(jobstring1), "You have reached the maximum skill level for this job.");
	}

	if(GetJobLevel(playerid, JOB_FISHERMAN) < 5)
	{
		if(pData[playerid][pFishingSkill] < 50) {
			format(jobstring2, sizeof(jobstring2), "Catch %i more fish to level up.", 50 - pData[playerid][pFishingSkill]);
		} else if(pData[playerid][pFishingSkill] < 100) {
			format(jobstring2, sizeof(jobstring2), "Catch %i more fish to level up.", 100 - pData[playerid][pFishingSkill]);
		} else if(pData[playerid][pFishingSkill] < 200) {
			format(jobstring2, sizeof(jobstring2), "Catch %i more fish to level up.", 200 - pData[playerid][pFishingSkill]);
		} else if(pData[playerid][pFishingSkill] < 350) {
			format(jobstring2, sizeof(jobstring2), "Catch %i more fish to level up.", 350 - pData[playerid][pFishingSkill]);
		}
	}
	else
	{
		format(jobstring2, sizeof(jobstring2), "You have reached the maximum skill level for this job.");
	}

	if(GetJobLevel(playerid, JOB_BODYGUARD) < 5)
	{
		if(pData[playerid][pGuardSkill] < 25) {
			format(jobstring3, sizeof(jobstring3), "Sell %i more vests to level up.", 25 - pData[playerid][pGuardSkill]);
		} else if(pData[playerid][pGuardSkill] < 50) {
			format(jobstring3, sizeof(jobstring3), "Sell %i more vests to level up.", 50 - pData[playerid][pGuardSkill]);
		} else if(pData[playerid][pGuardSkill] < 100) {
			format(jobstring3, sizeof(jobstring3), "Sell %i more vests to level up.", 100 - pData[playerid][pGuardSkill]);
		} else if(pData[playerid][pGuardSkill] < 200) {
			format(jobstring3, sizeof(jobstring3), "Sell %i more vests to level up.", 200 - pData[playerid][pGuardSkill]);
		}
	}
	else
	{
		format(jobstring3, sizeof(jobstring3),"You have reached the maximum skill level for this job.");
	}

	if(GetJobLevel(playerid, JOB_ARMSDEALER) < 5)
	{
		if(pData[playerid][pWeaponSkill] < 50) {
			format(jobstring4, sizeof(jobstring4), "Sell %i more weapons to level up.", 50 - pData[playerid][pWeaponSkill]);
		} else if(pData[playerid][pWeaponSkill] < 100) {
			format(jobstring4, sizeof(jobstring4), "Sell %i more weapons to level up.", 100 - pData[playerid][pWeaponSkill]);
		} else if(pData[playerid][pWeaponSkill] < 200) {
			format(jobstring4, sizeof(jobstring4), "Sell %i more weapons to level up.", 200 - pData[playerid][pWeaponSkill]);
		} else if(pData[playerid][pWeaponSkill] < 500) {
			format(jobstring4, sizeof(jobstring4), "Sell %i more weapons to level up.", 500 - pData[playerid][pWeaponSkill]);
		}
	}
	else
	{
		format(jobstring4, sizeof(jobstring4), "You have reached the maximum skill level for this job.");
	}

	if(GetJobLevel(playerid, JOB_DRUGDEALER) < 5)
	{
		if(pData[playerid][pSmugglerSkill] < 25) {
			format(jobstring6, sizeof(jobstring6), "Smuggle %i more packages to level up.", 25 - pData[playerid][pSmugglerSkill]);
		} else if(pData[playerid][pSmugglerSkill] < 50) {
			format(jobstring6, sizeof(jobstring6), "Smuggle %i more packages to level up.", 50 - pData[playerid][pSmugglerSkill]);
		} else if(pData[playerid][pSmugglerSkill] < 75) {
			format(jobstring6, sizeof(jobstring6), "Smuggle %i more packages to level up.", 75 - pData[playerid][pSmugglerSkill]);
		} else if(pData[playerid][pSmugglerSkill] < 100) {
			format(jobstring6, sizeof(jobstring6), "Smuggle %i more packages to level up.", 100 - pData[playerid][pSmugglerSkill]);
		}
	}
	else
	{
		format(jobstring6, sizeof(jobstring6), "You have reached the maximum skill level for this job.");
	}

	if(GetJobLevel(playerid, JOB_LAWYER) < 5)
	{
		if(pData[playerid][pLawyerSkill] < 25) {
			format(jobstring7, sizeof(jobstring7), "Defend %i more clients to level up.", 25 - pData[playerid][pLawyerSkill]);
		} else if(pData[playerid][pLawyerSkill] < 50) {
			format(jobstring7, sizeof(jobstring7), "Defend %i more clients to level up.", 50 - pData[playerid][pLawyerSkill]);
		} else if(pData[playerid][pLawyerSkill] < 100) {
			format(jobstring7, sizeof(jobstring7), "Defend %i more clients to level up.", 100 - pData[playerid][pLawyerSkill]);
		} else if(pData[playerid][pLawyerSkill] < 200) {
			format(jobstring7, sizeof(jobstring7), "Defend %i more clients to level up.", 200 - pData[playerid][pLawyerSkill]);
		}
	}
	else
	{
		format(jobstring7, sizeof(jobstring7), "You have reached the maximum skill level for this job.");
	}


	if(GetJobLevel(playerid, JOB_DETECTIVE) < 5)
	{
		if(pData[playerid][pDetectiveSkill] < 50) {
			format(jobstring8, sizeof(jobstring8), "Find %i more people to level up.", 50 - pData[playerid][pDetectiveSkill]);
		} else if(pData[playerid][pDetectiveSkill] < 100) {
			format(jobstring8, sizeof(jobstring8), "Find %i more people to level up.", 100 - pData[playerid][pDetectiveSkill]);
		} else if(pData[playerid][pDetectiveSkill] < 200) {
			format(jobstring8, sizeof(jobstring8), "You need to find %i more people to level up.", 200 - pData[playerid][pDetectiveSkill]);
		} else if(pData[playerid][pDetectiveSkill] < 400) {
			format(jobstring8, sizeof(jobstring8), "Find %i more people to level up.", 400 - pData[playerid][pDetectiveSkill]);
		}
	}
	else
	{
		format(jobstring8, sizeof(jobstring8), "You have reached the maximum skill level for this job.");
	}


	format(string, sizeof(string), "Job Courier\t{ffff00}Level: %d\t%s\n" \
									"Job Lawyer\t{ffff00}Level: %d\t%s\n" \
									"Job Detective\t{ffff00}Level: %d\t%s\n" \
									"Job Fisherman\t{ffff00}Level: %d\t%s\n" \
									"Job Arms Dealer\t{ffff00}Level: %d\t%s\n" \
									"Job Drug Dealer\t{ffff00}Level: %d\t%s\n" \
									"Job Bodyguard\t{ffff00}Level: %d\t%s\n",
									GetJobLevel(playerid, JOB_COURIER), jobstring1,
									GetJobLevel(playerid, JOB_LAWYER), jobstring7,
									GetJobLevel(playerid, JOB_DETECTIVE), jobstring8,
									GetJobLevel(playerid, JOB_FISHERMAN), jobstring2,
									GetJobLevel(playerid, JOB_ARMSDEALER), jobstring4,
									GetJobLevel(playerid, JOB_DRUGDEALER), jobstring6,
									GetJobLevel(playerid, JOB_BODYGUARD), jobstring3);
	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_TABLIST, ""SVRCLR"Job Skills", string, "Close", "");
	return 1;
}

CMD:fish(playerid, params[])
{
	if(!PlayerHasJob(playerid, JOB_FISHERMAN))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a Fisherman.");
	}
	if(!IsPlayerAtFishingPlace(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not close to anywhere where you can fish.");
	}
	if(!pData[playerid][pFishingRod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a fishing rod. You need a fishing rod to fish!");
	}
	if(pData[playerid][pFishTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are fishing already. Wait for your line to be reeled in first.");
	}
	if(pData[playerid][pFishWeight] >= 30)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have too much fish and can't fish any longer.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be onfoot in order to use this command.");
	}

	//ApplyAnimation(playerid, "SAMP", "FishingIdle", 4.1, 0, 0, 0, 1, 0, 1);

	SetPlayerAttachedObject(playerid, 9, 18632, 6, 0.112999, 0.024000, 0.000000, -172.999954, 28.499994, 0.000000);
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s reels the line of their fishing rod into the water.", GetRPName(playerid));
	GameTextForPlayer(playerid, "~w~Fishing...", 6000, 3);
	MiningProgress(playerid);

	pData[playerid][pFishTime] = 6;

	if(pData[playerid][pFishingBait] > 0)
	{
	    pData[playerid][pFishingBait]--;
	    pData[playerid][pUsedBait] = 1;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fishingbait = fishingbait - 1 WHERE uid = %i", pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else
	{
	    pData[playerid][pUsedBait] = 0;
	}

	return 1;
}

CMD:sellfish(playerid, params[])
{
	new businessid;

	if(!PlayerHasJob(playerid, JOB_FISHERMAN))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a Fisherman.");
	}
	if((businessid = GetInsideBusiness(playerid)) == -1 || BusinessInfo[businessid][bType] != BUSINESS_STORE)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside any Supermarket business.");
	}
	if(!pData[playerid][pFishWeight])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have no fish which you can sell.");
	}

	new amount = (pData[playerid][pFishWeight]) + random(250);

	SM(playerid, COLOR_AQUA, "** You earned $%i  for selling %i kg of fish.", amount, pData[playerid][pFishWeight]);
	GivePlayerCash(playerid, amount);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fishweight = 0 WHERE uid = %i", pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	pData[playerid][pFishWeight] = 0;
	return 1;
}

CMD:myfish(playerid, params[])
{
    if(!PlayerHasJob(playerid, JOB_FISHERMAN))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a Fisherman.");
	}

	SCM(playerid, COLOR_GREEN, "My Fish:");
	SM(playerid, COLOR_GREY2, "You have %i/%i kg of fish in your inventory.", pData[playerid][pFishWeight], GetJobLevel(playerid, JOB_FISHERMAN) * 50);
	return 1;
}

CMD:sellvest(playerid, params[])
{
	new targetid, amount;

	if(!PlayerHasJob(playerid, JOB_BODYGUARD))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a Bodyguard.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /sellvest [playerid] [amount]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't sell to yourself.");
	}
	if(amount < 100 || amount > 500)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The amount specified must range between $100 and $500.");
	}
	if(gettime() - pData[playerid][pLastSell] < 10)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can only use this command every 10 seconds. Please wait %i more seconds.", 10 - (gettime() - pData[playerid][pLastSell]));
	}

	pData[playerid][pLastSell] = gettime();
	pData[targetid][pVestOffer] = playerid;
	pData[targetid][pVestPrice] = amount;

	SM(targetid, COLOR_AQUA, "** %s offered you a vest with 50 points of armor for $%i (/accept vest).", GetRPName(playerid), amount);
	SM(playerid, COLOR_AQUA, "** You offered %s a vest with 50 points of armor for $%i.", GetRPName(targetid), amount);
	return 1;
}

CMD:getmats(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1421.6913, -1318.4719, 13.5547) && !IsPlayerInRangeOfPoint(playerid, 3.0, 2393.4885, -2008.5726, 13.3467))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any materials pickup.");
	}
	if(pData[playerid][pCP] != CHECKPOINT_NONE)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must cancel your active checkpoint first. /cancelcp to cancel it.");
	}
	if(pData[playerid][pCash] < 7500)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need at least $7500 in cash to smuggle materials.");
	}
    if(pData[playerid][pMaterials] + 150 > GetPlayerCapacity(CAPACITY_MATERIALS))
	{
	    return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i materials. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pMaterials], GetPlayerCapacity(CAPACITY_MATERIALS));
	}

	pData[playerid][pCP] = CHECKPOINT_MATS;
	pData[playerid][pSmuggleTime] = gettime();

	GivePlayerCash(playerid, -7500);
	SCM(playerid, COLOR_AQUA, "** You paid $7500 for a load of materials. Smuggle them to the depot to collect them.");

	if(IsPlayerInRangeOfPoint(playerid, 3.0, 1421.6913, -1318.4719, 13.5547))
	{
	    AddPointMoney(POINT_MATPICKUP1, 7500);
		SetPlayerCheckpoint(playerid, 2173.2129, -2264.1548, 13.3467, 3.0);
		pData[playerid][pSmuggleMats] = 1;
	}
	else if(IsPlayerInRangeOfPoint(playerid, 3.0, 2393.4885, -2008.5726, 13.3467))
	{
	    AddPointMoney(POINT_MATPICKUP2, 7500);
		SetPlayerCheckpoint(playerid, 2288.0918, -1105.6555, 37.9766, 3.0);
		pData[playerid][pSmuggleMats] = 2;
	}

	return 1;
}

CMD:sellgun(playerid, params[])
{
	new targetid, weapon[10], price;
    if(pData[playerid][pGang] == -1 && pData[playerid][pDonator] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not apart of any gang at the moment.");
	}
	if(pData[playerid][pWeaponRestricted] > 0)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are either weapon restricted or you played less than two playing hours.");
    }
	if(IsPlayerInAnyVehicle(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't sell weapons from within a vehicle.");
	}
	if(gettime() - pData[playerid][pLastSell] < 10)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can only use this command every 10 seconds. Please wait %i more seconds.", 10 - (gettime() - pData[playerid][pLastSell]));
	}
	if(sscanf(params, "us[10]I(0)", targetid, weapon, price))
	{
		SM(playerid, SERVER_COLOR, "Available Craftable Weapons:");

		if(GetJobLevel(playerid, JOB_ARMSDEALER) >= 1)
		{
		    SCM(playerid, COLOR_YELLOW, "Level 1:"WHITE" Bat [50], Shovel [50], Golfclub [50], Poolcue [50]");
			SCM(playerid, COLOR_YELLOW, "Level 1:"WHITE" Katana [50] Cane [50] Knuckles [25]");
		}
		if(GetJobLevel(playerid, JOB_ARMSDEALER) >= 2)
		{
			SCM(playerid, COLOR_YELLOW, "Level 2:"WHITE" 9mm [100], Sdpistol [125], Shotgun [250]");
		}
		if(GetJobLevel(playerid, JOB_ARMSDEALER) >= 3)
		{
			SCM(playerid, COLOR_YELLOW, "Level 3:"WHITE" MP5 [500], Uzi [500], Tec9 [500]");
		}
		if(GetJobLevel(playerid, JOB_ARMSDEALER) >= 4)
		{
			SCM(playerid, COLOR_YELLOW, "Level 4:"WHITE" Deagle[1250] , Rifle[350]");
		}
		if(GetJobLevel(playerid, JOB_ARMSDEALER) >= 5)
		{
			SCM(playerid, COLOR_YELLOW, "Level 5:"WHITE" AK47 [2500]");
		}
		/*if(pData[playerid][pDonator] >= 1)
		{
			SCM(playerid, COLOR_VIP, "Donator:"WHITE" Sniper [4000]");
		}*/

		SCM(playerid, COLOR_SYNTAX, "Usage: /sellgun [playerid] [name] [price]");
		return 1;
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(pData[targetid][pWeaponRestricted] > 0)
    {
        return SCM(playerid, COLOR_SYNTAX, "That player is either weapon restricted or played less than two playing hours.");
    }
	if(gettime() - pData[playerid][pLastSell] < 10)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can only use this command every 10 seconds. Please wait %i more seconds.", 10 - (gettime() - pData[playerid][pLastSell]));
	}
    if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pJailTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are unable to use this command at the moment.");
	}
	if(price < 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $0.");
	}

    if(!strcmp(weapon, "bat", true))
	{
	    if(pData[playerid][pMaterials] < 50)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 5))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 5);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
		    pData[playerid][pLastSell] = gettime();
   			pData[targetid][pSellOffer] = playerid;
   			pData[targetid][pSellType] = ITEM_SELLGUN;
   			pData[targetid][pSellExtra] = 5;
   			pData[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you a baseball bat for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s a baseball bat for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "shovel", true))
	{
	    if(pData[playerid][pMaterials] < 50)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 6))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 6);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
		    pData[playerid][pLastSell] = gettime();
   			pData[targetid][pSellOffer] = playerid;
   			pData[targetid][pSellType] = ITEM_SELLGUN;
   			pData[targetid][pSellExtra] = 6;
   			pData[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you a shovel for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s a shovel for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "knuckles", true))
	{
	    if(pData[playerid][pMaterials] < 25)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 1))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 1);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
		    pData[playerid][pLastSell] = gettime();
   			pData[targetid][pSellOffer] = playerid;
   			pData[targetid][pSellType] = ITEM_SELLGUN;
   			pData[targetid][pSellExtra] = 1;
   			pData[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you knuckles for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s knuckles for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "golfclub", true))
	{
	    if(pData[playerid][pMaterials] < 50)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 2))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 2);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
		    pData[playerid][pLastSell] = gettime();
   			pData[targetid][pSellOffer] = playerid;
   			pData[targetid][pSellType] = ITEM_SELLGUN;
   			pData[targetid][pSellExtra] = 2;
   			pData[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you a golf club for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s a golf club for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "poolcue", true))
	{
	    if(pData[playerid][pMaterials] < 50)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 7))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 7);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
		    pData[playerid][pLastSell] = gettime();
   			pData[targetid][pSellOffer] = playerid;
   			pData[targetid][pSellType] = ITEM_SELLGUN;
   			pData[targetid][pSellExtra] = 7;
   			pData[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you a pool cue for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s a pool cue for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "katana", true))
	{
	    if(pData[playerid][pMaterials] < 50)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 8))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 8);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
		    pData[playerid][pLastSell] = gettime();
   			pData[targetid][pSellOffer] = playerid;
   			pData[targetid][pSellType] = ITEM_SELLGUN;
   			pData[targetid][pSellExtra] = 8;
   			pData[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you a katana for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s a katana for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "cane", true))
	{
	    if(pData[playerid][pMaterials] < 50)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 15))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 15);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
		    pData[playerid][pLastSell] = gettime();
   			pData[targetid][pSellOffer] = playerid;
   			pData[targetid][pSellType] = ITEM_SELLGUN;
   			pData[targetid][pSellExtra] = 15;
   			pData[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you a cane for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s a cane for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "9mm", true))
	{
	    if(GetJobLevel(playerid, JOB_ARMSDEALER) < 2)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your skill level is not high enough to craft this weapon.");
		}
	    if(pData[playerid][pMaterials] < 100)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 22))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 22);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
		    pData[playerid][pLastSell] = gettime();
   			pData[targetid][pSellOffer] = playerid;
   			pData[targetid][pSellType] = ITEM_SELLGUN;
   			pData[targetid][pSellExtra] = 22;
   			pData[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you a 9mm for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s a 9mm for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "sdpistol", true))
	{
	    if(GetJobLevel(playerid, JOB_ARMSDEALER) < 2)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your skill level is not high enough to craft this weapon.");
		}
	    if(pData[playerid][pMaterials] < 125)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 23))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 23);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
   			pData[targetid][pSellOffer] = playerid;
   			pData[targetid][pSellType] = ITEM_SELLGUN;
   			pData[targetid][pSellExtra] = 23;
   			pData[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you a silenced pistol for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s a silenced pistol for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "shotgun", true))
	{
	    if(GetJobLevel(playerid, JOB_ARMSDEALER) < 2)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your skill level is not high enough to craft this weapon.");
		}
	    if(pData[playerid][pMaterials] < 250)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 25))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 25);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
   			pData[targetid][pSellOffer] = playerid;
   			pData[targetid][pSellType] = ITEM_SELLGUN;
   			pData[targetid][pSellExtra] = 25;
   			pData[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you a shotgun for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s a shotgun for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "mp5", true))
	{
	    if(GetJobLevel(playerid, JOB_ARMSDEALER) < 3)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your skill level is not high enough to craft this weapon.");
		}
	    if(pData[playerid][pMaterials] < 500)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 29))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 29);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
   			pData[targetid][pSellOffer] = playerid;
   			pData[targetid][pSellType] = ITEM_SELLGUN;
   			pData[targetid][pSellExtra] = 29;
   			pData[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you an MP5 for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s an MP5 for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "deagle", true))
	{
	    if(GetJobLevel(playerid, JOB_ARMSDEALER) < 4)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your skill level is not high enough to craft this weapon.");
		}
	    if(pData[playerid][pMaterials] < 1250)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 24))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 24);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
   			pData[targetid][pSellOffer] = playerid;
   			pData[targetid][pSellType] = ITEM_SELLGUN;
   			pData[targetid][pSellExtra] = 24;
   			pData[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you a Desert Eagle for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s a Desert Eagle for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "rifle", true))
	{
	    if(GetJobLevel(playerid, JOB_ARMSDEALER) < 4)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your skill level is not high enough to craft this weapon.");
		}
	    if(pData[playerid][pMaterials] < 350)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 33))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 33);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
   			pData[targetid][pSellOffer] = playerid;
   			pData[targetid][pSellType] = ITEM_SELLGUN;
   			pData[targetid][pSellExtra] = 24;
   			pData[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you a Rifle for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s a Rifle for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "uzi", true))
	{
	    if(GetJobLevel(playerid, JOB_ARMSDEALER) < 3)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your skill level is not high enough to craft this weapon.");
		}
	    if(pData[playerid][pMaterials] < 500)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 28))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 28);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
   			pData[targetid][pSellOffer] = playerid;
   			pData[targetid][pSellType] = ITEM_SELLGUN;
   			pData[targetid][pSellExtra] = 28;
   			pData[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you a Micro Uzi for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s a Micro Uzi for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "tec9", true))
	{
	    if(GetJobLevel(playerid, JOB_ARMSDEALER) < 3)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your skill level is not high enough to craft this weapon.");
		}
	    if(pData[playerid][pMaterials] < 500)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 32))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 32);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
   			pData[targetid][pSellOffer] = playerid;
   			pData[targetid][pSellType] = ITEM_SELLGUN;
   			pData[targetid][pSellExtra] = 32;
   			pData[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you a Tec-9 for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s a Tec-9 for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "ak47", true))
	{
	    if(GetJobLevel(playerid, JOB_ARMSDEALER) < 5)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your skill level is not high enough to craft this weapon.");
		}
	    if(pData[playerid][pMaterials] < 2500)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 30))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 30);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
   			pData[targetid][pSellOffer] = playerid;
   			pData[targetid][pSellType] = ITEM_SELLGUN;
   			pData[targetid][pSellExtra] = 30;
   			pData[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you an AK-47 for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s an AK-47 for $%i.", GetRPName(targetid), price);
		}
	}
	/*else if(!strcmp(weapon, "sniper", true))
	{
	    new cost = 4000;

	    if(pData[playerid][pDonator] < 1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your are not Donator to craft this weapon.");
		}
	    if(pData[playerid][pMaterials] < cost)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 34))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 34);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
   			pData[targetid][pSellOffer] = playerid;
   			pData[targetid][pSellType] = ITEM_SELLGUN;
   			pData[targetid][pSellExtra] = 34;
   			pData[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you a sniper rifle or $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s a sniper rifle for $%i.", GetRPName(targetid), price);
		}
	}*/

	return 1;
}

CMD:repair(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), Float:health;

	if((FactionInfo[pData[playerid][pFaction]][fType] != FACTION_MECHANIC))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be a mechanic to use this command.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(gettime() - pData[playerid][pLastRepair] < 20)
	{
		return SM(playerid, COLOR_SYNTAX, "You can only repair a vehicle every 20 seconds. Please wait %i more seconds.", 20 - (gettime() - pData[playerid][pLastRepair]));
	}
	if(!vehicleid)
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not inside of any vehicle.");
	}
	if(!VehicleHasEngine(vehicleid))
	{
		return SCM(playerid, COLOR_SYNTAX, "This vehicle has no engine which can be repaired.");
	}

	if(GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	{
		return SCM(playerid, COLOR_SYNTAX, "The engine needs to be shut down before you repair this vehicle.");
	}

	GetVehicleHealth(vehicleid, health);

	if(health >= 1000.0)
	{
		SCM(playerid, COLOR_SYNTAX, "This vehicle doesn't need to be repaired.");
	}
	else
	{
		pData[playerid][pLastRepair] = gettime();

		RepairVehicle(vehicleid);
		SCM(playerid, COLOR_WHITE, "You have repaired the health and bodywork on this vehicle..");

		SetVehicleHealth(vehicleid, 1000.0);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s repairs the vehicle.", GetRPName(playerid));
		PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	}
	return 1;
}

CMD:refill(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

    if((FactionInfo[pData[playerid][pFaction]][fType] != FACTION_MECHANIC))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command unless you're a Mechanic.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(gettime() - pData[playerid][pLastRefuel] < 20)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can only refuel a vehicle every 20 seconds. Please wait %i more seconds.", 20 - (gettime() - pData[playerid][pLastRefuel]));
	}
	if(!vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside of any vehicle.");
	}
	if(!VehicleHasEngine(vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "This vehicle has no engine which can be refueled.");
	}
	if(vehicleFuel[vehicleid] >= 100)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This vehicle doesn't need to be refueled.");
	}
	if(GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	{
		return SCM(playerid, COLOR_SYNTAX, "The engine needs to be shut down before you repair this vehicle.");
	}

	if(vehicleFuel[vehicleid] + 10 >= 100)
	{
		vehicleFuel[vehicleid] = 100;
	}
	else
	{
	    vehicleFuel[vehicleid] += 10;
	}

	pData[playerid][pLastRefuel] = gettime();

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s pours some gasoline to the vehicle.", GetRPName(playerid));
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	return 1;
}

CMD:nos(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

    if((FactionInfo[pData[playerid][pFaction]][fType] != FACTION_MECHANIC))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command unless you're a Mechanic.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(!vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside of any vehicle.");
	}
	if(GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	{
		return SCM(playerid, COLOR_SYNTAX, "The engine needs to be shut down before you repair this vehicle.");
	}

	switch(GetVehicleModel(vehicleid))
    {
		case 581, 523, 462, 521, 463, 522, 461, 448, 468, 586, 509, 481, 510, 472, 473, 493, 595, 484, 430, 453, 452, 446, 454, 590, 569, 537, 538, 570, 449:
		    return SCM(playerid, COLOR_SYNTAX, "This vehicle can't be modified with nitrous.");
    }

	AddVehicleComponent(vehicleid, 1009);

	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s attaches a 2x NOS Canister on the engine feed.", GetRPName(playerid));
	return 1;
}

CMD:hyd(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

    if((FactionInfo[pData[playerid][pFaction]][fType] != FACTION_MECHANIC))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command unless you're a Mechanic.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(!vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside of any vehicle.");
	}
	if(GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	{
		return SCM(playerid, COLOR_SYNTAX, "The engine needs to be shut down before you repair this vehicle.");
	}

	AddVehicleComponent(vehicleid, 1087);

	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s attaches a set of hydraulics to the vehicle.", GetRPName(playerid));
	return 1;
}

CMD:tow(playerid, params[])
{
    if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 525)
	{
		return SCM(playerid, COLOR_SYNTAX, "You must be in a tow truck to use this command.");
	}
 	if((FactionInfo[pData[playerid][pFaction]][fType] != FACTION_MECHANIC) && !IsLawEnforcement(playerid))
 	{
		return SCM(playerid, COLOR_SYNTAX, "You must be a Mechanic or a Law Enforcement Officer to use this command.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}

	new Float:pX, Float:pY, Float:pZ;
    GetPlayerPos(playerid, pX, pY, pZ);
    new Float:vX, Float:vY, Float:vZ;
    new Found = 0;
    new vid = 0;
    while ((vid<MAX_VEHICLES) && (!Found)) {
        vid++;
        GetVehiclePos(vid, vX, vY, vZ);
        if ((floatabs(pX - vX)<7.0) && (floatabs(pY - vY)<7.0) && (floatabs(pZ - vZ)<7.0) && (vid != GetPlayerVehicleID(playerid))) {
            Found = 1;
            if (IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) {
                DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
            }
            AttachTrailerToVehicle(vid, GetPlayerVehicleID(playerid));
            //SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s lowers their tow hook, attaching it to the vehicle.", GetRPName(playerid));
            //SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s raises the tow hook, locking the vehicle in place..", GetRPName(playerid));
        }
    }
    if (!Found) {
        SCM(playerid, COLOR_SYNTAX, "There is no vehicle in range that you can tow.");
    }
    return 1;
}

CMD:impound(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);
    if((FactionInfo[pData[playerid][pFaction]][fType] != FACTION_MECHANIC) && GetFactionType(playerid) != FACTION_POLICE)
    {
        return SCM(playerid, COLOR_ERROR, "You can't use this command as you aren't a mechanic.");
	}
	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_ERROR, "You must be driving a vehicle to use this command.");
	}
    if(!VehicleInfo[vehicleid][vOwnerID] || !IsValidVehicle(vehicleid))
    {
        return SCM(playerid, COLOR_ERROR, "You can only impound player owned vehicles.");
	}
	SendFactionMessage(pData[playerid][pFaction], COLOR_ROYALBLUE, "> Dispatch: %s %s has impounded a %s with %s unpaid tickets.", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), GetVehicleName(vehicleid), FormatNumber(VehicleInfo[vehicleid][vTickets]));

	VehicleInfo[vehicleid][vPosX] = 2062.1909;
	VehicleInfo[vehicleid][vPosY] = -1919.9170;
	VehicleInfo[vehicleid][vPosZ] = 13.1196;
	VehicleInfo[vehicleid][vPosA] = 0.0000;
    VehicleInfo[vehicleid][vInterior] = 0;
    VehicleInfo[vehicleid][vWorld] = 0;
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET impounded = '1', pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', interior = %i, world = %i WHERE id = %i", VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ], VehicleInfo[vehicleid][vPosA], VehicleInfo[vehicleid][vInterior], VehicleInfo[vehicleid][vWorld], VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);
	DespawnVehicle(vehicleid);
	return 1;
}

CMD:untow(playerid, params[])
{
	if((FactionInfo[pData[playerid][pFaction]][fType] != FACTION_MECHANIC) && !IsLawEnforcement(playerid))
 	{
		return SCM(playerid, COLOR_SYNTAX, "You must be a Mechanic or a Law Enforcement Officer to use this command.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 525)
	{
		return SCM(playerid, COLOR_SYNTAX, "You must be in a tow truck to use this command.");
	}
	if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
	{
		SCM(playerid, COLOR_SYNTAX, "You are not towing a vehicle.");
	}
	DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s lowers their tow hook, detaching it from the vehicle.", GetRPName(playerid));
    return 1;
}

CMD:fill(playerid, params[])
{
	return callcmd::refuel(playerid, params);
}

CMD:refuel(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	new id = GetNearbyGas(playerid);

	if(GetNearbyGas(playerid) != 1)//&& GetInsideGarage(playerid) == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need to be at a gas station.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not driving any vehicle.");
	}
	if(!VehicleHasEngine(vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "This vehicle has no engine and can't be refilled.");
	}
	if(vehicleFuel[vehicleid] >= 100)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The fuel tank in this vehicle is already full.");
	}
	if(pData[playerid][pCash] < (100 - vehicleFuel[vehicleid]) * 2)
	{
	    return SM(playerid, COLOR_SYNTAX, "You don't have enough cash. It will cost you at least $%i.", (100 - vehicleFuel[vehicleid]) * 2);
	}
	if(GasolineInfo[id][gsContents] < (100 - vehicleFuel[vehicleid]))
	{
		return SM(playerid, COLOR_SYNTAX, "This gas station has only %i contents in it. Please ask some of our truckers to fill this gas station.", GasolineInfo[id][gsContents]);
	}

	if(pData[playerid][pRefuel] != INVALID_VEHICLE_ID)
	{
		new price = pData[playerid][pRefuel]+GasolineInfo[id][gsPrice];
	    GivePlayerCash(playerid, -price);
        SM(playerid, COLOR_AQUA, "** You've refilled your vehicle's gas tank for $%i.", pData[playerid][pRefuelAmount]);
		GasolineInfo[id][gsContents] -= GasCap[playerid];
		GasCap[playerid] = 0;

        pData[playerid][pRefuel] = INVALID_VEHICLE_ID;
        pData[playerid][pRefuelAmount] = 0;
	}
	else
	{
	    if(GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	    {
         	return SCM(playerid, COLOR_SYNTAX, "The engine needs to be shut down before proceeding.");
	    }

		pData[playerid][pRefuel] = vehicleid;
		pData[playerid][pRefuelAmount] = 0;

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s begins to refuel their vehicle's gas tank.", GetRPName(playerid));
		SM(playerid, COLOR_WHITE, "** This will take about %i seconds. You will be notified once completed.", 100 - vehicleFuel[vehicleid]);
	}

	return 1;
}
CMD:bank(playerid, params[])
{
 	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1667.4260, -972.6691, 683.6873))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the bank.");
	}
	if(pData[playerid][pToggleAtm] == 0)
	{
		pData[playerid][pToggleAtm] = 1;
 		for(new g = 0; g < 7; g++) {
			TextDrawShowForPlayer(playerid, ATMTD[g]);
		}
 		for(new g = 0; g < 2; g++) {
			PlayerTextDrawShow(playerid, ATMTD2[playerid][g]);
		}
		TextDrawShowForPlayer(playerid, withdrawtd);
		TextDrawShowForPlayer(playerid, deposittd);
		TextDrawShowForPlayer(playerid, transfertd);
		SelectTextDraw(playerid, COLOR_LIGHTBLUE);
		SendClientMessage(playerid, COLOR_BLUE, "[TIP] {FFFFFF}Press ESC to disable the cursor and use /cursor to get your cursor back active.");
		//ShowDialogToPlayer(playerid, DIALOG_ATM);
	}
	else
	{
		pData[playerid][pToggleAtm] = 0;
		for(new d = 0; d < 7; d++) 
		{
			TextDrawHideForPlayer(playerid, ATMTD[d]);
		}
 		for(new d = 0; d < 2; d++) {
			PlayerTextDrawHide(playerid, ATMTD2[playerid][d]);
		}
 		TextDrawHideForPlayer(playerid, withdrawtd);
		TextDrawHideForPlayer(playerid, deposittd);
		TextDrawHideForPlayer(playerid, transfertd);
		CancelSelectTextDraw(playerid);
	}     	
 	return 1;
}
/*CMD:withdraw(playerid, params[])
{
	new amount;

	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1667.4260, -972.6691, 683.6873))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the bank.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SM(playerid, COLOR_WHITE, "USAGE /withdraw [amount] ($%i available)", pData[playerid][pBank]);
	}
	if(amount < 1 || amount > pData[playerid][pBank])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
	}

	pData[playerid][pBank] -= amount;
	GivePlayerCash(playerid, amount);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", pData[playerid][pBank], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(playerid, COLOR_AQUA, "** You have withdrawn $%i from your bank account. Your new balance is $%i.", amount, pData[playerid][pBank]);
	return 1;
}

CMD:deposit(playerid, params[])
{
	new amount;

	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1667.4260, -972.6691, 683.6873))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the bank.");
	}
	if(pData[playerid][pAdminDuty] == 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Command wont work as you're on duty.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SCM(playerid, COLOR_WHITE, "USAGE /deposit [amount]");
	}
	if(amount < 1 || amount > pData[playerid][pCash])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
	}

	pData[playerid][pBank] += amount;
	GivePlayerCash(playerid, -amount);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", pData[playerid][pBank], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(playerid, COLOR_AQUA, "** You have deposited $%i into your bank account. Your new balance is $%i.", amount, pData[playerid][pBank]);
	return 1;
}

CMD:wiretransfer(playerid, params[])
{
	new targetid, amount;

	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1667.4260, -972.6691, 683.6873))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the bank.");
	}
	if(pData[playerid][pLevel] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can only use this command if you are level 2+.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SCM(playerid, COLOR_WHITE, "USAGE /wiretransfer [playerid] [amount]");
	}
	if(!IsPlayerConnected(targetid) || !pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or hasn't logged in yet.");
	}
	if(amount < 1 || amount > pData[playerid][pBank])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't transfer funds to yourself.");
	}

	pData[targetid][pBank] += amount;
	pData[playerid][pBank] -= amount;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", pData[playerid][pBank], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", pData[targetid][pBank], pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(playerid, COLOR_AQUA, "** You have transferred $%i to %s. Your new balance is $%i.", amount, GetRPName(targetid), pData[playerid][pBank]);
	SM(targetid, COLOR_AQUA, "** %s has transferred $%i to your bank account.", GetRPName(playerid), amount);
	Log_Write("log_give", "%s (uid: %i) (IP: %s) transferred $%i to %s (uid: %i) (IP: %s)", GetRPName(playerid), pData[playerid][pID], GetPlayerIP(playerid), amount, GetRPName(targetid), pData[targetid][pID], GetPlayerIP(targetid));

    if(!strcmp(GetPlayerIP(playerid), GetPlayerIP(targetid)))
	{
	    SAM(COLOR_YELLOW, "AdmWarning: %s (IP: %s) has transferred $%i to %s (IP: %s).", GetRPName(playerid), GetPlayerIP(playerid), amount, GetRPName(targetid), GetPlayerIP(targetid));
	}

	return 1;
}

CMD:balance(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1667.4260, -972.6691, 683.6873))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the bank.");
	}

	SM(playerid, COLOR_YELLOW, "Your bank account balance is $%i.", pData[playerid][pBank]);
	return 1;
}*/

/*CMD:rt(playerid, params[])
{
	return callcmd::rsms(playerid, params);
}*/

//CMD:rs(playerid, params[])
//{
	//return callcmd::rsms(playerid, params);
//}

/*CMD:rsms(playerid, params[])
{
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /rsms [text]");
	}
	if(pData[playerid][pTextFrom] == INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You haven't received a text by anyone since you joined the server.");
	}
    if(pData[pData[playerid][pTextFrom]][pJailType] > 0)
    {
        return SCM(playerid, COLOR_SYNTAX, "That player is currently imprisoned and cannot use their phone.");
    }
    if(pData[pData[playerid][pTextFrom]][pTogglePhone])
    {
        return SCM(playerid, COLOR_SYNTAX, "That player has their mobile phone switched off.");
	}
	if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pJailTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are unable to use your cellphone at the moment.");
	}

	pData[pData[playerid][pTextFrom]][pTextFrom] = playerid;
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes out a cellphone and sends a message.", GetRPName(playerid));

    SM(pData[playerid][pTextFrom], COLOR_YELLOW, "** SMS from %s (%i): %s **", GetRPName(playerid), pData[playerid][pPhone], params);
    SM(playerid, COLOR_YELLOW, "** SMS to %s (%i): %s **", GetRPName(pData[playerid][pTextFrom]), pData[pData[playerid][pTextFrom]][pPhone], params);

    GivePlayerCash(playerid, -1);
    GameTextForPlayer(playerid, "~w~Text sent!~n~~r~-$1", 5000, 1);
    return 1;
}*/

CMD:t(playerid, params[])
{
	return callcmd::sms(playerid, params);
}
CMD:sms(playerid, params[])
{
	new number, msg[128];
	if(pData[playerid][pJailTime] > 0) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-jail.");
	if(sscanf(params, "is[128]", number, msg))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /sms");
	}
	if(!pData[playerid][pPhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a cellphone and therefore can't use this command.");
	}
	SCM(playerid, COLOR_SYNTAX, "/phone to reply/text someone");
	return 1;
}

/*CMD:sms(playerid, params[])
{
	new number, msg[128];
	if(pData[playerid][pJailTime] > 0) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-jail.");
	if(sscanf(params, "is[128]", number, msg))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /sms [number] [message]");
	}
	if(!pData[playerid][pPhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a cellphone and therefore can't use this command.");
	}
	if(pData[playerid][pTogglePhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use your mobile phone right now as you have it toggled.");
	}
	if(number == 0 || number == pData[playerid][pPhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid number.");
	}
	if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pJailTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are unable to use your cellphone at the moment.");
	}

	foreach(new i : Player)
	{
	    if(pData[i][pPhone] == number)
	    {
	        if(pData[i][pJailType] > 0)
	        {
	            return SCM(playerid, COLOR_SYNTAX, "That player is currently imprisoned and cannot use their phone.");
	        }
	        if(pData[i][pTogglePhone])
	        {
	            return SCM(playerid, COLOR_SYNTAX, "That player has their mobile phone switched off.");
			}

			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes out a cellphone and sends a message.", GetRPName(playerid));

			if(strlen(msg) > MAX_SPLIT_LENGTH)
			{
			    SM(i, COLOR_YELLOW, "** SMS from %s (%i): %.*s... **", GetRPName(playerid), pData[playerid][pPhone], MAX_SPLIT_LENGTH, msg);
			    SM(i, COLOR_YELLOW, "** SMS from %s (%i): ...%s **", GetRPName(playerid), pData[playerid][pPhone], msg[MAX_SPLIT_LENGTH]);

			    SM(playerid, COLOR_YELLOW, "** SMS to %s (%i): %.*s... **", GetRPName(i), pData[i][pPhone], MAX_SPLIT_LENGTH, msg);
			    SM(playerid, COLOR_YELLOW, "** SMS to %s (%i): ...%s **", GetRPName(i), pData[i][pPhone], msg[MAX_SPLIT_LENGTH]);
			}
			else
			{
		        SM(i, COLOR_YELLOW, "** SMS from %s (%i): %s **", GetRPName(playerid), pData[playerid][pPhone], msg);
		        SM(playerid, COLOR_YELLOW, "** SMS to %s (%i): %s **", GetRPName(i), pData[i][pPhone], msg);
			}

			if(pData[i][pTextFrom] == INVALID_PLAYER_ID)
			{
			    SCM(i, COLOR_WHITE, "** You can use '/rsms [message]' to reply to this text message.");
			}

			pData[i][pTextFrom] = playerid;

	        GivePlayerCash(playerid, -1);
	        GameTextForPlayer(playerid, "~w~Text sent!~n~~r~-$1", 5000, 1);
	        return 1;
		}
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, jailtype, togglephone FROM users WHERE phone = %i", number);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerSendTextMessage", "iis", playerid, number, msg);
	return 1;
}*/

CMD:texts(playerid, params[])
{
    if(!pData[playerid][pPhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a cellphone and therefore can't use this command.");
	}

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM texts WHERE recipient_number = %i ORDER BY date DESC", pData[playerid][pPhone]);
    mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_VIEW_TEXTS, playerid);
	return 1;
}
CMD:phone(playerid, params[])
{
	if(pData[playerid][pTogglePhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use your mobile phone right now as you have it toggled ((/tog phone)).");
	}
	if(!pData[playerid][pPhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a cellphone and therefore can't use this command.");
	}
    if(pData[playerid][pJailTime] > 0) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-jail.");
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED || pData[playerid][pMiningTime] > 0 || pData[playerid][pConstructionTime] > 0 || pData[playerid][pTazedTime] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pLootTime] > 0)
	    return SCM(playerid, COLOR_GREY, "You're currently unable to use phone at this moment.");

	SendClientMessage(playerid, COLOR_BLUE, "[TIP] {FFFFFF}Press ESC to disable the cursor and use /cursor to get your cursor back active.");

	for(new i = 0; i < 20; i++) {
		TextDrawShowForPlayer(playerid, PhoneTD[i]);
	}
	TextDrawShowForPlayer(playerid, banktd);
	TextDrawShowForPlayer(playerid, mesaagetd);
	TextDrawShowForPlayer(playerid, calltd);
	TextDrawShowForPlayer(playerid, contactstd);
	TextDrawShowForPlayer(playerid, phoneclosetd);
	TextDrawShowForPlayer(playerid, musictd);
	TextDrawShowForPlayer(playerid, twittertd);
	SelectTextDraw(playerid, COLOR_LIGHTBLUE);
	ShowActionBubble(playerid, "* %s takes out their phone.", GetRPName(playerid));
	return 1;
}
/*CMD:call(playerid, params[])
{
	new number;
	if(pData[playerid][pJailTime] > 0) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-jail.");
	if(sscanf(params, "i", number))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /call [number]");
	    SCM(playerid, COLOR_WHITE, "Special numbers: 911 = Emergency hotline, 6397 = News, 6324 = Mechanic, 8294 = Taxi");
	    return 1;
	}
	if(!pData[playerid][pPhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a cellphone and therefore can't use this command.");
	}
	if(pData[playerid][pTogglePhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use your mobile phone right now as you have it toggled.");
	}
	if(pData[playerid][pCallLine] != INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have a call in session. /(h)angup to end that call.");
	}
	if(number == 0 || number == pData[playerid][pPhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid number.");
	}
	if(pData[playerid][pTazedTime] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pJailTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are unable to use your cellphone at the moment.");
	}

	if(number == 911)
	{
	    pData[playerid][pCallLine] = playerid;
		pData[playerid][pCallStage] = 911;

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s dials a number on their keypad and begins a call.", GetRPName(playerid));
		SCM(playerid, COLOR_DISPATCH, "911, what is your emergency? Enter 'police' or 'medic'.");
		return 1;
	}
	else if(number == 6397)
	{
	    pData[playerid][pCallLine] = playerid;
		pData[playerid][pCallStage] = 6397;

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s dials a number on their keypad and begins a call.", GetRPName(playerid));
		SCM(playerid, COLOR_DISPATCH, "This is SANews here. Leave a message and we'll get back to you! *BEEP*");
		return 1;
	}
	else if(number == 6324)
	{
	    pData[playerid][pCallLine] = playerid;
		pData[playerid][pCallStage] = 6324;

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s dials a number on their keypad and begins a call.", GetRPName(playerid));
		SCM(playerid, COLOR_DISPATCH, "This is the mechanic hotline. Please explain your situation to us.");
		return 1;
	}
	else if(number == 8294)
	{
	    pData[playerid][pCallLine] = playerid;
		pData[playerid][pCallStage] = 8294;

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s dials a number on their keypad and begins a call.", GetRPName(playerid));
		SCM(playerid, COLOR_DISPATCH, "This is the cab company. Please state your location and destination.");
		return 1;
	}
	else if(number == 666)
	{
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s dials a number on their keypad and begins a call.", GetRPName(playerid));
	    SCM(playerid, COLOR_WHITE, "** They hung up their phone and ended the call.");
	    return 1;
	}

	foreach(new i : Player)
	{
	    if(pData[i][pPhone] == number)
	    {
	        if(pData[i][pJailType] > 0)
	        {
	            return SCM(playerid, COLOR_SYNTAX, "That player is currently imprisoned and cannot use their phone.");
	        }
	        if(pData[i][pCallLine] != INVALID_PLAYER_ID)
	        {
	            return SCM(playerid, COLOR_SYNTAX, "This player is currently in a call. Wait until they hang up.");
	        }
	        if(pData[i][pTogglePhone])
	        {
	            return SCM(playerid, COLOR_SYNTAX, "That player has their mobile phone switched off.");
			}
			if(pData[i][pLiveBroadcast] != INVALID_PLAYER_ID)
			{
			    return SCM(playerid, COLOR_SYNTAX, "That player is currently in a live interview and can't talk on the phone.");
	        }

	        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);

			pData[playerid][pCallLine] = i;
			pData[playerid][pCallStage] = 0;

			pData[i][pCallLine] = playerid;
			pData[i][pCallStage] = 1;

			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s dials a number on their keypad and begins a call.", GetRPName(playerid));
			SendProximityMessage(i, 20.0, SERVER_COLOR, "**{C2A2DA} %s's mobile phone begins to ring.", GetRPName(i));

	        SM(playerid, COLOR_YELLOW, "** You've placed a call to number: %i. Please wait for your call to be answered.", number);
	        SM(i, COLOR_YELLOW, "** Incoming call from #%i. Use /pickup to take this call.", pData[playerid][pPhone]);
	        return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "That number is either not in service or the owner is offline.");
	return 1;
}*/

CMD:call(playerid, params[])
{
	new number;
	if(pData[playerid][pJailTime] > 0) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-jail.");
	if(sscanf(params, "i", number))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /call [number]");
	    SCM(playerid, COLOR_WHITE, "Special numbers: 911 = Emergency hotline, 6397 = News, 6324 = Mechanic, 8294 = Taxi");
	    return 1;
	}
	if(!pData[playerid][pPhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a cellphone and therefore can't use this command.");
	}
	SCM(playerid, COLOR_SYNTAX, "/phone to call someone");
	return 1;
}

/*CMD:p(playerid, params[])
{
	return callcmd::pickup(playerid, params);
}

CMD:pickup(playerid, params[])
{
	if(pData[playerid][pCallStage] != 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have no incoming calls which you can answer right now.");
	}
    if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pJailTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are unable to use your cellphone at the moment.");
	}

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s presses a button and answers their mobile phone.", GetRPName(playerid));
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);

	pData[pData[playerid][pCallLine]][pCallStage] = 2;
	pData[playerid][pCallStage] = 2;

	SCM(playerid, COLOR_WHITE, "** You have answered the call. You can now speak in chat to talk to the caller.");
	SCM(pData[playerid][pCallLine], COLOR_WHITE, "** They answered the call. You can now speak in chat to talk to them.");
	CALL_VoicePickup(playerid);
	return 1;
}*/

CMD:h(playerid, params[])
{
	return callcmd::hangup(playerid, params);
}

CMD:hangup(playerid, params[])
{
	if(pData[playerid][pCallLine] == INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have no calls in session which you can hangup.");
	}
	for(new i = 0; i < 20; i++) {
	TextDrawHideForPlayer(playerid, PhoneTD[i]);
	}
	TextDrawHideForPlayer(playerid, banktd);
	TextDrawHideForPlayer(playerid, mesaagetd);
	TextDrawHideForPlayer(playerid, calltd);
	TextDrawHideForPlayer(playerid, contactstd);
	TextDrawHideForPlayer(playerid, phoneclosetd);
	TextDrawHideForPlayer(playerid, musictd);
	TextDrawHideForPlayer(playerid, twittertd);
	CancelSelectTextDraw(playerid);
	for(new i = 0; i < 13; i ++)
	{
		TextDrawHideForPlayer(playerid, CallingTD[i]);
	}
	for(new g = 0; g < 5; g++) {
		PlayerTextDrawHide(playerid, CallingPlayerTD[playerid][g]);
	}
	TextDrawHideForPlayer(playerid, CloseCallTD);
	TextDrawHideForPlayer(playerid, PICKUP);
	TextDrawHideForPlayer(playerid, HANGUP);
	HangupCall(playerid, HANGUP_USER);
	return 1;
}
CMD:stats(playerid, params[]) return DisplayStats(playerid);
CMD:toggc(playerid) return callcmd::tog(playerid, "global");
CMD:inv(playerid, params[]) return callcmd::inventory(playerid, params);
CMD:inventory(playerid, params[]) return DisplayInventory(playerid);
CMD:ddedit(playerid, params[]) return callcmd::editentrance(playerid, params);
CMD:gotoid(playerid, params[]) return callcmd::goto(playerid, params);

CMD:togturfs(playerid) return callcmd::toggle(playerid, "turfs");
CMD:togpm(playerid) return callcmd::toggle(playerid, "pm");
CMD:togfam(playerid) return callcmd::toggle(playerid, "gang");
CMD:togcrew(playerid) return callcmd::toggle(playerid, "crew");
CMD:togwhisper(playerid) return callcmd::toggle(playerid, "whisper");
CMD:tognews(playerid) return callcmd::toggle(playerid, "news");
CMD:tognewbie(playerid) return callcmd::toggle(playerid, "newbie");
CMD:togchatanim(playerid) return callcmd::toggle(playerid, "chatanim");
CMD:tog(playerid, params[]) return callcmd::toggle(playerid, params);
CMD:toggle(playerid, params[])
{
	if(isnull(params))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /(tog)gle [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Textdraws, OOC, Global, Phone, Newbie, PortableRadio, Radio, Streams, News");
		SCM(playerid, COLOR_WHITE, "Available options: SpawnCam, HUD, Admin, Helper, VIP, Faction, Gang, Whisper, Turfs, ChatAnim");
	}
	else if(!strcmp(params, "textdraws", true))
	{
	    if(!pData[playerid][pToggleTextdraws])
	    {
	        HideGPSTextdraw(playerid);
	       	/*for(new i = 0; i < 2; i++) {
				TextDrawHideForPlayer(playerid, HTTD[i]);
			}*/
     		//HidePlayerProgressBar(playerid, HungerBar[playerid]);
			//HidePlayerProgressBar(playerid, ThirstBar[playerid]);
	        PlayerTextDrawHide(playerid, pData[playerid][pText][3]);
	        PlayerTextDrawHide(playerid, pData[playerid][pText][4]);
	        PlayerTextDrawHide(playerid, pData[playerid][pText][5]);
			for(new i = 0; i < 5; i ++)
			{
				PlayerTextDrawHide(playerid, HungerandThirstTD[playerid][i]);
			}

			for(new i = 0; i < 16; i ++) {
				PlayerTextDrawHide(playerid, SpeedTD[playerid][i]);
				pData[playerid][pGPSOn] = 0;
				HideGPSTextdraw(playerid);
				pData[playerid][pWatchOn] = 0;
				TextDrawHideForPlayer(playerid, TimeTD);
			}

			/*for(new i = 0; i < 4; i ++)
			{
				TextDrawHideForPlayer(playerid, HTSTD[i]);
			}*/
			/*#if defined Christmas
	#else
  				PlayerTextDrawHide(playerid, EventTextdraw[playerid]);
			#endif*/
	        TextDrawHideForPlayer(playerid, TimeTD);
	     	/*for(new i = 0; i < 5; i++) {
				PlayerTextDrawHide(playerid, CCRPMENU[playerid][i]);
			}*/
			
			//PlayerTextDrawHide(playerid, SampvoiceTD[playerid][0]);
			
			/*for(new i = 0; i < 3; i++) {
				TextDrawHideForPlayer(playerid, LogoTD[i]);
			}*/
			/*for(new i = 0; i < 4; i ++)
			{
				TextDrawHideForPlayer(playerid, HTSTD[i]);
			}*/
	        pData[playerid][pToggleTextdraws] = 1;
	        SCM(playerid, COLOR_AQUA, "Textdraws toggled. You will no longer see any textdraws.");
	    }
	    else
	    {
	        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && VehicleHasEngine(GetPlayerVehicleID(playerid)))
	        {
				for(new i = 0; i < 16; i ++) {
					PlayerTextDrawShow(playerid, SpeedTD[playerid][i]);
        			pData[playerid][pGPSOn] = 1;
	    			PlayerTextDrawSetString(playerid, pData[playerid][pText][0], "Loading...");
					ShowGPSTextdraw(playerid);
					pData[playerid][pWatchOn] = 1;
					TextDrawShowForPlayer(playerid, TimeTD);
				}
	        }
	        if(pData[playerid][pGPSOn])
	        {
	            ShowGPSTextdraw(playerid);
	        }
	        if(pData[playerid][pWatchOn])
	        {
	            TextDrawShowForPlayer(playerid, TimeTD);
	        }
	        if(!pData[playerid][pToggleHUD])
	        {
	            PlayerTextDrawShow(playerid, pData[playerid][pText][3]);
	            PlayerTextDrawShow(playerid, pData[playerid][pText][4]);
	        }

			/*#if defined Christmas
	#else
  				PlayerTextDrawShow(playerid, EventTextdraw[playerid]);
			#endif*/
  			/*for(new i = 0; i < 2; i++) {
				TextDrawShowForPlayer(playerid, HTTD[i]);
			}*/
   

			/*for(new i = 0; i < 5; i++) {
				PlayerTextDrawShow(playerid, CCRPMENU[playerid][i]);
			}*/
			/*for(new i = 0; i < 4; i ++)
			{
				TextDrawShowForPlayer(playerid, HTSTD[i]);
			}*/
			/*for(new i = 0; i < 3; i++) {
				TextDrawShowForPlayer(playerid, LogoTD[i]);
			}*/
			for(new i = 0; i < 5; i ++)
			{
				PlayerTextDrawShow(playerid, HungerandThirstTD[playerid][i]);
			}
	        pData[playerid][pToggleTextdraws] = 0;
	        SCM(playerid, COLOR_AQUA, "Textdraws enabled. You will now see textdraws again.");
	    }
	}
	else if(!strcmp(params, "ooc", true))
	{
	    if(!pData[playerid][pToggleOOC])
	    {
	        pData[playerid][pToggleOOC] = 1;
	        SCM(playerid, COLOR_AQUA, "OOC chat toggled. You will no longer see any messages in /o.");
	    }
	    else
	    {
	        pData[playerid][pToggleOOC] = 0;
	        SCM(playerid, COLOR_AQUA, "OOC chat enabled. You will now see messages in /o again.");
	    }
	}
	else if(!strcmp(params, "chatanim", true))
	{
	    if(!pData[playerid][pChatAnim])
	    {
	        pData[playerid][pChatAnim] = 1;
	        SCM(playerid, COLOR_AQUA, "Chat animation enabled.");
	    }
	    else
	    {
	        pData[playerid][pChatAnim] = 0;
	        SCM(playerid, COLOR_AQUA, "Chat animation disabled.");
	    }
	}
	else if(!strcmp(params, "global", true))
	{
	    if(!pData[playerid][pToggleGlobal])
	    {
	        pData[playerid][pToggleGlobal] = 1;
	        SCM(playerid, COLOR_AQUA, "Global chat toggled. You will no longer see any messages in /g.");
	    }
	    else
	    {
	        pData[playerid][pToggleGlobal] = 0;
	        SCM(playerid, COLOR_AQUA, "Global chat enabled. You can now speak to other players in /g.");
	    }
	}
	else if(!strcmp(params, "phone", true))
	{
	    if(!pData[playerid][pTogglePhone])
	    {
	        if(pData[playerid][pCallLine] != INVALID_PLAYER_ID)
	        {
	            return SCM(playerid, COLOR_SYNTAX, "You can't do this while in a call.");
	        }

	        pData[playerid][pTogglePhone] = 1;
	        SCM(playerid, COLOR_AQUA, "Phone toggled. You will no longer receive calls or texts.");
	    }
	    else
	    {
	        pData[playerid][pTogglePhone] = 0;
	        SCM(playerid, COLOR_AQUA, "Phone enabled. You can now receive calls and texts again.");
	    }
	}
    else if(!strcmp(params, "admin", true))
	{
	    if(!pData[playerid][pAdmin])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You are not an admin and therefore cannot toggle this feature.");
		}

	    if(!pData[playerid][pToggleAdmin])
	    {
	        pData[playerid][pToggleAdmin] = 1;
	        SCM(playerid, COLOR_AQUA, "Admin chat toggled. You will no longer see any messages in admin chat.");
	    }
	    else
	    {
	        pData[playerid][pToggleAdmin] = 0;
	        SCM(playerid, COLOR_AQUA, "Admin chat enabled. You will now see messages in admin chat again.");
	    }
	}
	else if(!strcmp(params, "helper", true))
	{
	    if(!pData[playerid][pHelper])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You are not a helper and therefore cannot toggle this feature.");
		}

	    if(!pData[playerid][pToggleHelper])
	    {
	        pData[playerid][pToggleHelper] = 1;
	        SCM(playerid, COLOR_AQUA, "Helper chat toggled. You will no longer see any messages in helper chat.");
	    }
	    else
	    {
	        pData[playerid][pToggleHelper] = 0;
	        SCM(playerid, COLOR_AQUA, "Helper chat enabled. You will now see messages in helper chat again.");
	    }
	}
	else if(!strcmp(params, "newbie", true))
	{
	    if(!pData[playerid][pToggleNewbie])
	    {
	        pData[playerid][pToggleNewbie] = 1;
	        SCM(playerid, COLOR_AQUA, "Newbie chat toggled. You will no longer see any messages in newbie chat.");
	    }
	    else
	    {
	        pData[playerid][pToggleNewbie] = 0;
	        SCM(playerid, COLOR_AQUA, "Newbie chat enabled. You will now see messages in newbie chat again.");
	    }
	}
    else if(!strcmp(params, "portableradio", true))
	{
	    if(!pData[playerid][pWalkieTalkie])
		{
	    	return SCM(playerid, COLOR_SYNTAX, "You don't have a Portable Radio.");
		}

	    if(!pData[playerid][pToggleWT])
	    {
	        pData[playerid][pToggleWT] = 1;
	        SCM(playerid, COLOR_AQUA, "Portable Radio toggled. You will no longer receive any messages on your Portable Radio.");
	    }
	    else
	    {
	        pData[playerid][pToggleWT] = 0;
	        SCM(playerid, COLOR_AQUA, "Portable Radio enabled. You will now receive messages on your Portable Radio again.");
	    }
	}
	else if(!strcmp(params, "radio", true))
	{
 		if(pData[playerid][pFaction] == -1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You are not apart of a faction and therefore can't toggle your radio.");
		}

	    if(!pData[playerid][pToggleRadio])
	    {
	        pData[playerid][pToggleRadio] = 1;
	        SCM(playerid, COLOR_AQUA, "Radio chat toggled. You will no longer receive any messages on your radio.");
	    }
	    else
	    {
	        pData[playerid][pToggleRadio] = 0;
	        SCM(playerid, COLOR_AQUA, "Radio chat enabled. You will now receive messages on your radio again.");
	    }
	}
	else if(!strcmp(params, "streams", true))
	{
	    if(!pData[playerid][pToggleMusic])
	    {
	        pData[playerid][pToggleMusic] = 1;
	        StopAudioStreamForPlayer(playerid);
	        SCM(playerid, COLOR_AQUA, "Music streams toggled. You will no longer hear any music played locally & globally.");
	    }
	    else
	    {
	        pData[playerid][pToggleMusic] = 0;
	        SCM(playerid, COLOR_AQUA, "Music streams enabled. You will now hear music played locally & globally again.");
	    }
	}
	else if(!strcmp(params, "vip", true))
	{
	    if(!pData[playerid][pDonator])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You are not a VIP member and therefore cannot toggle this feature.");
		}

	    if(!pData[playerid][pToggleVIP])
	    {
	        pData[playerid][pToggleVIP] = 1;
	        SCM(playerid, COLOR_AQUA, "VIP chat toggled. You will no longer see any messages in VIP chat.");
	    }
	    else
	    {
	        pData[playerid][pToggleVIP] = 0;
	        SCM(playerid, COLOR_AQUA, "VIP chat enabled. You will now see messages in VIP chat again.");
	    }
	}
	else if(!strcmp(params, "faction", true))
	{
	    if(pData[playerid][pFaction] == -1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You are not apart of a faction and therefore can't toggle this chat.");
		}

	    if(!pData[playerid][pToggleFaction])
	    {
	        pData[playerid][pToggleFaction] = 1;
	        SCM(playerid, COLOR_AQUA, "Faction chat toggled. You will no longer see any messages in faction chat.");
	    }
	    else
	    {
	        pData[playerid][pToggleFaction] = 0;
	        SCM(playerid, COLOR_AQUA, "Faction chat enabled. You will now see messages in faction chat again.");
	    }
	}
	else if(!strcmp(params, "gang", true))
	{
	    if(pData[playerid][pGang] == -1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You are not a gang member and therefore can't toggle this chat.");
		}

	    if(!pData[playerid][pToggleGang])
	    {
	        pData[playerid][pToggleGang] = 1;
	        SCM(playerid, COLOR_AQUA, "Gang chat toggled. You will no longer see any messages in gang chat.");
	    }
	    else
	    {
	        pData[playerid][pToggleGang] = 0;
	        SCM(playerid, COLOR_AQUA, "Gang chat enabled. You will now see messages in gang chat again.");
	    }
	}
	else if(!strcmp(params, "news", true))
	{
	    if(!pData[playerid][pToggleNews])
	    {
	        pData[playerid][pToggleNews] = 1;
	        SCM(playerid, COLOR_AQUA, "News chat toggled. You will no longer see any news broadcasts.");
	    }
	    else
	    {
	        pData[playerid][pToggleNews] = 0;
	        SCM(playerid, COLOR_AQUA, "News chat enabled. You will now see news broadcasts again.");
	    }
	}
	else if(!strcmp(params, "whisper", true))
	{
	    if(pData[playerid][pToggleWhisper] == 0)
	    {
	        pData[playerid][pToggleWhisper] = 1;
	        SCM(playerid, COLOR_AQUA, "Whisper chat disabled. You have blocked all incoming whispers.");
		}
		else
		{
		    pData[playerid][pToggleWhisper] = 0;
		    SCM(playerid, COLOR_AQUA, "Whisper chat enabled. You will now receive whisper messages again.");
		}
	}
	else if(!strcmp(params, "spawncam", true))
	{
	    if(!pData[playerid][pToggleCam])
	    {
	        pData[playerid][pToggleCam] = 1;
	        SCM(playerid, COLOR_AQUA, "Spawn camera toggled. You will no longer see the camera effects upon spawning.");
	    }
	    else
	    {
	        pData[playerid][pToggleCam] = 0;
	        SCM(playerid, COLOR_AQUA, "Spawn camera enabled. You will now see the camera effects when you spawn again.");
	    }
	}
	else if(!strcmp(params, "hud", true))
	{
	    if(!pData[playerid][pToggleHUD])
	    {
	        pData[playerid][pToggleHUD] = 1;
	        SCM(playerid, COLOR_AQUA, "HUD toggled. You will no longer see your health & armor indicators.");

	        PlayerTextDrawHide(playerid, pData[playerid][pText][3]);
	        PlayerTextDrawHide(playerid, pData[playerid][pText][4]);
	        PlayerTextDrawHide(playerid, pData[playerid][pText][5]);
	    }
	    else
	    {
	        pData[playerid][pToggleHUD] = 0;
	        SCM(playerid, COLOR_AQUA, "HUD enabled. You will now see your health & armor indicators again.");

	        PlayerTextDrawShow(playerid, pData[playerid][pText][3]);
	        PlayerTextDrawShow(playerid, pData[playerid][pText][4]);
	    }
	}
	else if(!strcmp(params, "turfs", true))
	{
		if(!pData[playerid][pShowTurfs])
		{
	    	ShowTurfsOnMap(playerid, true);
			ShowLandsOnMap(playerid, false);
	    	SCM(playerid, COLOR_AQUA, "You will now see turfs on your mini-map.");
		}
		else
		{
	    	ShowTurfsOnMap(playerid, false);
	    	SCM(playerid, COLOR_AQUA, "You will no longer see any turfs on your mini-map.");
		}
	}
	else if(!strcmp(params, "points", true))
	{
		if(!ShowingBounds[playerid])
		{
		    GangZoneShowForPlayer(playerid, pointboundaries[0], 0xFF00008C);
		    GangZoneShowForPlayer(playerid, pointboundaries[1], 0xFF00008C);
		    GangZoneShowForPlayer(playerid, pointboundaries[2], 0xFF00008C);
		    GangZoneShowForPlayer(playerid, pointboundaries[3], 0xFF00008C);
		    GangZoneShowForPlayer(playerid, pointboundaries[4], 0xFF00008C);
		    GangZoneShowForPlayer(playerid, pointboundaries[5], 0xFF00008C);
		    GangZoneShowForPlayer(playerid, pointboundaries[6], 0xFF00008C);
		    GangZoneShowForPlayer(playerid, pointboundaries[7], 0xFF00008C);
		    GangZoneShowForPlayer(playerid, pointboundaries[8], 0xFF00008C);
	    	ShowTurfsOnMap(playerid, false);
			ShowLandsOnMap(playerid, false);
	    	SCM(playerid, COLOR_AQUA, "You will now see points on your mini-map.");
		}
		else
		{
			GangZoneHideForPlayer(playerid, pointboundaries[0]); // FFC
			GangZoneHideForPlayer(playerid, pointboundaries[1]); // MP1
			GangZoneHideForPlayer(playerid, pointboundaries[2]); // MF1
			GangZoneHideForPlayer(playerid, pointboundaries[3]); // MP2
			GangZoneHideForPlayer(playerid, pointboundaries[4]); // MF2
			GangZoneHideForPlayer(playerid, pointboundaries[5]); // AEC
			GangZoneHideForPlayer(playerid, pointboundaries[6]); // DH
			GangZoneHideForPlayer(playerid, pointboundaries[7]); // CL
			GangZoneHideForPlayer(playerid, pointboundaries[8]); // DF
			ShowingBounds[playerid] = 0;
	    	SCM(playerid, COLOR_AQUA, "You will no longer see any points on your mini-map.");
		}
	}
	return 1;
}

CMD:help(playerid, params[])
{
	SCM(playerid, SERVER_COLOR, "Help Commands: /report /reportdm (/newb)ie /tognewbie");

	SCM(playerid, COLOR_WHITE, "Account Commands: /rules /serverstats /inventory /buylevel /upgrade /myupgrades /changepass /killcheckpoint");

	SCM(playerid, COLOR_WHITE, "Chat Commands: /setbind /bind /b1-10 /w(hisper) /o(oc) /s(hout) /l(ow) /b /ad(vertise) /f(amily) /me /toggc /togfam /togcrew /togwhisper /tognews");

	SCM(playerid, COLOR_WHITE, "Bank Commands /bankhelp /bank");

	SCM(playerid, COLOR_WHITE, "General Commands: /pay /charity /time /buy /id /music /showlicenses /clothes /buyclothes /finddealership /locate");

	SCM(playerid, COLOR_WHITE, "Sabong Commands: /bet");

	SCM(playerid, COLOR_WHITE, "General Commands: /skill /stopani /do /me /kill /drop /calculate /car /families /requesthelp /members /togchatanim");
	SCM(playerid, COLOR_WHITE, "General Commands: /cancel /accept /eject /usepot /usecrack /blindfold /tie /contract /call /info /clearmyscreen");

	switch(pData[playerid][pJob])
	{
		case JOB_FOODPANDA: SendClientMessage(playerid, COLOR_LIGHTORANGE, "Job Commands: /getorder, /cancelcp.");
		case JOB_COURIER: SendClientMessage(playerid, COLOR_LIGHTORANGE, "Job Commands: /load, /deliver, /cancelcp.");
		case JOB_FISHERMAN: SendClientMessage(playerid, COLOR_LIGHTORANGE, "Job Commands: /fish, /myfish, /sellfish.");
		case JOB_BODYGUARD: SendClientMessage(playerid, COLOR_LIGHTORANGE, "Job Commands: /sellvest, /frisk.");
		case JOB_ARMSDEALER: SendClientMessage(playerid, COLOR_LIGHTORANGE, "Job Commands: /smugglemats, /craftgun.");
		case JOB_MINER: SendClientMessage(playerid, COLOR_LIGHTORANGE, "Job Commands: /mine, /cancelcp.");
		case JOB_TAXIDRIVER: SendClientMessage(playerid, COLOR_LIGHTORANGE, "Job Commands: /setfare, /takecall.");
        case JOB_DRUGDEALER: SendClientMessage(playerid, COLOR_LIGHTORANGE, "Job Commands: /getdrug, /planthelp, /cookmeth, /smuggledrugs.");
        case JOB_LAWYER: SendClientMessage(playerid, COLOR_LIGHTORANGE, "Job Commands: /defend, /free, /wanted.");
        case JOB_DETECTIVE: SendClientMessage(playerid, COLOR_LIGHTORANGE, "Job Commands: /find.");
        case JOB_CONSTRUCTION: SendClientMessage(playerid, COLOR_LIGHTORANGE, "Job Commands: cancelcp.");
 	}

 	if(pData[playerid][pSecondJob] != JOB_NONE)
 	{
 	    switch(pData[playerid][pSecondJob])
		{
			case JOB_FOODPANDA: SendClientMessage(playerid, COLOR_LIGHTORANGE, "Secondary Commands: /getorder.");
			case JOB_COURIER: SendClientMessage(playerid, COLOR_LIGHTORANGE, "Secondary Commands: /load, /deliver.");
			case JOB_FISHERMAN: SendClientMessage(playerid, COLOR_LIGHTORANGE, "Secondary Commands: /fish, /myfish, /sellfish.");
			case JOB_BODYGUARD: SendClientMessage(playerid, COLOR_LIGHTORANGE, "Secondary Commands: /sellvest, /frisk.");
			case JOB_ARMSDEALER: SendClientMessage(playerid, COLOR_LIGHTORANGE, "Secondary Commands: /smugglemats, /craftgun.");
			case JOB_MINER: SendClientMessage(playerid, COLOR_LIGHTORANGE, "Secondary Commands: /mine.");
			case JOB_TAXIDRIVER: SendClientMessage(playerid, COLOR_LIGHTORANGE, "Secondary Commands: /setfare.");
	        case JOB_DRUGDEALER: SendClientMessage(playerid, COLOR_LIGHTORANGE, "Secondary Commands: /getdrug, /planthelp, /cookmeth, /smuggledrugs.");
	        case JOB_LAWYER: SendClientMessage(playerid, COLOR_LIGHTORANGE, "Secondary Commands: /defend, /free, /wanted.");
	        case JOB_DETECTIVE: SendClientMessage(playerid, COLOR_LIGHTORANGE, "Secondary Commands: /find.");
	        case JOB_CONSTRUCTION: SendClientMessage(playerid, COLOR_LIGHTORANGE, "Secondary Job Commands: cancelcp.");
	 	}
	}
	SCM(playerid, COLOR_WHITE, "Other Commands: /cellphonehelp /carhelp /househelp /toyhelp /renthelp /jobhelp /leaderhelp /animhelp /fishhelp /insurehelp /businesshelp /bankhelp");
}
/*CMD:help(playerid)
{
	ShowDialogToPlayer(playerid, DIALOG_HELP);
	return 1;
}*/

CMD:locate(playerid, params[])
{
	if(!pData[playerid][pGPS])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a GPS. You can buy one at 24/7.");
	}
	if(isnull(params)) ShowDialogToPlayer(playerid, DIALOG_LOCATE);
	else LocateMethod(playerid, params);
	return 1;
}

CMD:findjob(playerid, params[])
{
	return ShowPlayerDialog(playerid, DIALOG_LOCATELIST1, DIALOG_STYLE_LIST, "Select Destination", "Foodpanda\nTrucker\nFisherman\nBodyguard\nArms Dealer\nMiner\nTaxi Driver\nDrug Dealer\nLawyer\nDetective\nGarbageman\nForklifter\nLumber Jack\nConstruction Job\nTailor Job", "Select", "Close");
}

CMD:ccp(playerid, params[]) return callcmd::cancelcp(playerid, params);
CMD:kcp(playerid, params[]) return callcmd::cancelcp(playerid, params);
CMD:killcp(playerid, params[]) return callcmd::cancelcp(playerid, params);
CMD:killcheckpoint(playerid, params[]) return callcmd::cancelcp(playerid, params);
CMD:cancelcp(playerid, params[])
{
	if(lumberman{playerid} == true)
	{
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		if(IsPlayerAttachedObjectSlotUsed(playerid, 8)) RemovePlayerAttachedObject(playerid, 8);
		SetPlayerSkin(playerid, pData[playerid][pSkin]);
    	Lumber1[playerid] = 0;
		lumberman{playerid} = false;
		Lumbered[playerid] = 0;
	}
	CancelActiveCheckpoint(playerid);
	pData[playerid][pRobCash] = 0;
	SCM(playerid, COLOR_WHITE, "You have cancelled all active checkpoints.");
	return 1;
}

CMD:afk(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /afk [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	if(pData[targetid][pAFK])
	{
	    SM(playerid, COLOR_WHITE, "** %s has been marked as Away from keyboard for %i minutes.", GetRPName(targetid), pData[targetid][pAFKTime] / 60);
	}
	else
	{
	    SM(playerid, COLOR_WHITE, "** %s is currently not marked as Away from keyboard.", GetRPName(targetid));
	}

	return 1;
}

CMD:afklist(playerid, params[])
{
	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	SCM(playerid, SERVER_COLOR, "Away from Keyboard:");

	foreach(new i : Player)
	{
	    if(pData[i][pAFK])
	    {
	        SM(playerid, COLOR_TEAL, "(ID: "WHITE"%i"TEAL") "WHITE"%s"TEAL" - Time: "WHITE"%i seconds", i, GetRPName(i), pData[i][pAFKTime]);
		}
	}

	return 1;
}
CMD:cursor(playerid, params) {
	SelectTextDraw(playerid, -1);
	return 1;
}
CMD:atm(playerid, params[])
{
    for(new i = 0; i < sizeof(atmMachines); i ++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, atmMachines[i][atmX], atmMachines[i][atmY], atmMachines[i][atmZ]))
		{
			if(pData[playerid][pToggleAtm] == 0)
			{
				pData[playerid][pToggleAtm] = 1;
		 		for(new g = 0; g < 7; g++) {
					TextDrawShowForPlayer(playerid, ATMTD[g]);
				}
		 		for(new g = 0; g < 2; g++) {
					PlayerTextDrawShow(playerid, ATMTD2[playerid][g]);
				}
				TextDrawShowForPlayer(playerid, withdrawtd);
				TextDrawShowForPlayer(playerid, deposittd);
				TextDrawShowForPlayer(playerid, transfertd);
				SelectTextDraw(playerid, COLOR_LIGHTBLUE);
				SendClientMessage(playerid, COLOR_BLUE, "[TIP] {FFFFFF}Press ESC to disable the cursor and use /cursor to get your cursor back active.");
				//ShowDialogToPlayer(playerid, DIALOG_ATM);
			}
			else
			{
				pData[playerid][pToggleAtm] = 0;
				for(new f = 0; f < 7; f++) 
				{
					TextDrawHideForPlayer(playerid, ATMTD[f]);
				}
		 		for(new f = 0; f < 2; f++) {
					PlayerTextDrawHide(playerid, ATMTD2[playerid][f]);
				}
		 		TextDrawHideForPlayer(playerid, withdrawtd);
				TextDrawHideForPlayer(playerid, deposittd);
				TextDrawHideForPlayer(playerid, transfertd);
				CancelSelectTextDraw(playerid);
			}
		}
	}
	if(GetNearbyAtm(playerid) >= 0)
	{
		if(pData[playerid][pToggleAtm] == 0)
		{
			pData[playerid][pToggleAtm] = 1;
	 		for(new g = 0; g < 7; g++) {
				TextDrawShowForPlayer(playerid, ATMTD[g]);
			}
	 		for(new g = 0; g < 2; g++) {
				PlayerTextDrawShow(playerid, ATMTD2[playerid][g]);
			}
			TextDrawShowForPlayer(playerid, withdrawtd);
			TextDrawShowForPlayer(playerid, deposittd);
			TextDrawShowForPlayer(playerid, transfertd);
			SelectTextDraw(playerid, COLOR_LIGHTBLUE);
			SendClientMessage(playerid, COLOR_BLUE, "[TIP] {FFFFFF}Press ESC to disable the cursor and use /cursor to get your cursor back active.");
			//ShowDialogToPlayer(playerid, DIALOG_ATM);
		}
		else
		{
			pData[playerid][pToggleAtm] = 0;
			for(new d = 0; d < 7; d++) 
			{
				TextDrawHideForPlayer(playerid, ATMTD[d]);
			}
	 		for(new d = 0; d < 2; d++) {
				PlayerTextDrawHide(playerid, ATMTD2[playerid][d]);
			}
	 		TextDrawHideForPlayer(playerid, withdrawtd);
			TextDrawHideForPlayer(playerid, deposittd);
			TextDrawHideForPlayer(playerid, transfertd);
			CancelSelectTextDraw(playerid);
		}     	
	}
	SendClientMessage(playerid, COLOR_GREY, "You are not in range of any ATM machines.");
	return 1;
}
/*CMD:awithdraw(playerid, params[])
{
    for(new i = 0; i < sizeof(atmMachines); i ++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, atmMachines[i][atmX], atmMachines[i][atmY], atmMachines[i][atmZ]))
	    {
			ShowDialogToPlayer(playerid, DIALOG_ATM);
	        return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "You are not in range of any ATM machines.");
	return 1;
}*/

CMD:fixplayerid(playerid, params[])
{
	new targetid;

	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", targetid))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /fixplayerid [playerid]");
	    SCM(playerid, COLOR_WHITE, "Sometimes player IDs can become bugged causing sscanf to not identify that ID until server restart.");
    	SCM(playerid, COLOR_WHITE, "(e.g. a command used upon a valid player ID saying the player is disconnected, invalid or offline.)");
        return 1;
	}
	if(!IsPlayerConnected(targetid))
	{
	    SSCANF_Leave(targetid);
	}
	else
	{
		SSCANF_Join(targetid, GetPlayerNameEx(targetid), IsPlayerNPC(targetid));
	}

	SM(playerid, COLOR_WHITE, "** Player ID %i has been fixed.", targetid);
	return 1;
}

CMD:anticheat(playerid, params[])
{
	new status;

	if(pData[playerid][pAdmin] < 8)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", status) || !(0 <= status <= 1))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /anticheat [0/1]");
	}

	if(status) {
		SAM(COLOR_LIGHTRED, "AdmCmd: %s has enabled the server anticheat.", GetRPName(playerid));
	} else {
		SAM(COLOR_LIGHTRED, "AdmCmd: %s has disabled the server anticheat.", GetRPName(playerid));
	}

	gAnticheat = status;
	return 1;
}

/*CMD:gmx(playerid, params[])
{
	if(pData[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /gmx [confirm]");
	    SCM(playerid, COLOR_WHITE, "This command save all player accounts and restarts the server.");
	    return 1;
	}
	if(gGMX)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have already called for a server restart. You can't cancel it.");
	}

	gGMX = 1;

	foreach(new i : Player)
	{
	    Maskara[i] = 0;
	    if(i != playerid)
	    {
     		if(pData[i][pAdminDuty])
			{
	    	    callcmd::aduty(i, "");
			}
	    	TogglePlayerControllable(i, 0);
	    	SM(i, COLOR_AQUA, "** %s has initated a server restart. You have been frozen.", GetRPName(playerid));
		}

		SavePlayerVariables(i);
		GameTextForPlayer(i, "~w~Updating server...", 4000, 3);
	}

	SCM(playerid, COLOR_WHITE, "** The server will restart once all accounts have been saved.");
	return 1;
}*/

new GMXName[128];

CMD:gmx(playerid, params[])
{
	//if(pData[playerid][pAdmin] < 8)
	if(!pData[playerid][pDeveloper])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /gmx [confirm]");
	    SCM(playerid, COLOR_WHITE, "This command save all player accounts and restarts the server.");
	    return 1;
	}
	if(gGMX)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have already called for a server restart. You can't cancel it.");
	}

    foreach(new i : Player)
	{
		new string2[128];
		format(string2, sizeof(string2), " We will be having a quick restart after 15 seconds. Please ~b~park~w~ your vehicles.");
		PlayerTextDrawSetString(i, DyuzeeeTD[i][0], string2);
		PlayerTextDrawShow(i, DyuzeeeTD[i][0]);
		SetTimerEx("GMX", 15000, false, "i", playerid);
		GMXName = GetRPName(playerid);
	}
	return 1;
}

forward GMX(playerid);
public GMX(playerid)
{
	foreach(new i : Player)
	{
	    Maskara[i] = 0;
	    if(i != playerid)
	    {
     		if(pData[i][pAdminDuty])
			{
	    	    callcmd::aduty(i, "");
			}
			pData[i][pBrokenLeg] = 0;
	    	TogglePlayerControllable(i, 0);
			if(dInfo[dcGMX] == 1)
			{
				SM(i, COLOR_AQUA, "** %s has initated a server restart. You have been frozen.", dInfo[dcGMXName]);
				dInfo[dcGMX] = 0;
			}
			else
			{
				SM(i, COLOR_AQUA, "** %s has initated a server restart. You have been frozen.", GMXName);
				GMXName = "None";
			}


		}
		SavePlayerVariables(i);
		//GameTextForPlayer(i, "~w~Updating server...", 4000, 3);
	}
	foreach(Player, i)
	{
	 	SetTimerEx("GMX1", 3000, false, "i", playerid);
		new string2[128];
		format(string2, sizeof(string2), "** ~b~%s~w~ has initated a server restart. You have been ~y~frozen.", GetRPName(playerid));
		PlayerTextDrawSetString(i, DyuzeeeTD[i][0], string2);
		PlayerTextDrawShow(i, DyuzeeeTD[i][0]);
		TogglePlayerControllable(i, 0);
	}
}

forward GMX1(playerid);
public GMX1(playerid)
{
    gGMX = 1;
}

forward OnAdminChangePassword(playerid, username[], password[]);
public OnAdminChangePassword(playerid, username[], password[])
{
	if(!cache_get_row_count(connectionID))
	{
	    SendClientMessage(playerid, COLOR_GREY, "The player specified doesn't exist.");
	}
	else
	{
	    new
	        hashed[129];

	    WP_Hash(hashed, sizeof(hashed), password);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET password = '%s' WHERE username = '%e'", hashed, username);
	    mysql_tquery(connectionID, queryBuffer);

	    SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s %s has changed %s's account password.",GetAdminRank(playerid), GetRPName(playerid), username);
	}
}
CMD:setpassword(playerid, params[])
{
	new username[MAX_PLAYER_NAME], password[128];

    if(pData[playerid][pAdmin] < 8)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]s[128]", username, password))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setpassword [username] [new password]");
	}
	if(IsPlayerOnline(username))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is already online and logged in. You can't change their password.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminChangePassword", "iss", playerid, username, password);
	return 1;
}

CMD:changepass(playerid, params[])
{
	ShowPlayerDialog(playerid, DIALOG_CHANGEPASS, DIALOG_STYLE_INPUT, "Change password", "Enter your new password:", "Submit", "Cancel");
	return 1;
}

CMD:toys(playerid, params[]) return callcmd::clothing(playerid, params);
CMD:clothes(playerid, params[]) return callcmd::clothing(playerid, params);
CMD:clothing(playerid, params[])
{
	new string[MAX_PLAYER_CLOTHING * 64];

	for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
	{
	    if(ClothingInfo[playerid][i][cExists])
	    {
	        if(ClothingInfo[playerid][i][cAttached]) {
				format(string, sizeof(string), "%s\n{C8C8C8}%i) "SVRCLR"%s {FFD700}(Attached)", string, i + 1, ClothingInfo[playerid][i][cName]);
			} else {
			    format(string, sizeof(string), "%s\n{C8C8C8}%i) "SVRCLR"%s", string, i + 1, ClothingInfo[playerid][i][cName]);
	        }
		}
		else
		{
			format(string, sizeof(string), "%s\n{C8C8C8}%i) {AFAFAF}Empty Slot"WHITE"", string, i + 1);
		}
	}

	ShowPlayerDialog(playerid, DIALOG_CLOTHING, DIALOG_STYLE_LIST, "My clothing items", string, "Select", "Cancel");
	return 1;
}

CMD:wat(playerid, params[])
{
	for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
	{
	    ClothingInfo[playerid][i][cAttached] = 1;
	    SetPlayerClothing(playerid);
	}
}

CMD:dat(playerid, params[])
{
	for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
	{
	    if(ClothingInfo[playerid][i][cExists] && ClothingInfo[playerid][i][cAttached])
	    {
	        RemovePlayerAttachedObject(playerid, ClothingInfo[playerid][i][cAttachedIndex]);
		}
	}
}

/*CMD:getweplic(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, -2772.9460, 376.7526, 3000.6462) && !IsPlayerInRangeOfPoint(playerid, 5.0, -709.9255, 2606.4180, 1005.7650))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not at the desk in the Police department.");
	}
	new string[1024];
	if(pData[playerid][pWeaponLicense])
		return SendClientMessageEx(playerid, COLOR_GREY, "You already have an existing weapon license, you don't need one.");
 	if(pData[playerid][pCash] < 25000)
		return SendClientMessageEx(playerid, COLOR_GREY, "You need at least $25,000 in order to register yourself..");

	strcat(string, "You are about to take a weapon license.\n");
	strcat(string, "You need to perfect all of the answers that is asked to you otherwise you will fail.\n\n");

	strcat(string, "Weapon License Test: $25,000\n");
	strcat(string, "Passing Score: 90 score or above.\n");
	strcat(string, "Finish the weapon license test in less than 4 minutes.\n\n");

	strcat(string, "If you fail the weapon license test 2 times, You will have to register again to take another test.\n\n");
	strcat(string, "So are you sure, ready to take the weapon license test?\n");
	strcat(string, "Click 'Yes' if you are ready to proceed.\n");
	strcat(string, "Click 'No' if you aren't ready");

	ShowPlayerDialog(playerid, DIALOG_WEP_TEST, DIALOG_STYLE_MSGBOX, "{FF6347}Weapon Test", string, "Yes", "No");
	return 1;
}*/

CMD:taketest(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, -2039.2168, -123.6363, -50.9141))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not at the desk in the Licensing department.");
	}
	if(pData[playerid][pCarLicense])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have your drivers license already.");
	}
	if(pData[playerid][pDrivingTest])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are already taking your drivers test.");
	}
	if(pData[playerid][pCash] < 2500)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need $8,500 to pay the licensing fee if you pass the test.");
	}

	SCM(playerid, COLOR_WHITE, "** You've taken on the drivers test. Go outside and enter one of the vehicles to begin.");
	SCM(playerid, COLOR_WHITE, "** Once you have passed the test, you will receive your license and pay a $8,500 licensing fee.");

	pData[playerid][pTestVehicle] = INVALID_VEHICLE_ID;
	pData[playerid][pDrivingTest] = 1;
	pData[playerid][pTestCP] = 0;
	return 1;
}

CMD:dmvmenu(playerid, params[])
{
    if(!IsPlayerInRangeOfPoint(playerid, 4.0, -2039.2168, -123.6363, -50.9141))
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not in range of Licensing Department.");
	}
	else
	{
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT tickets, modelid FROM vehicles WHERE ownerid = %i AND impounded = 1", pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_DMVRELEASE, playerid);
	}
	return 1;
}

CMD:buyvehicle(playerid, params[])
{
	pData[playerid][pGangCar] = 0;
	if(pData[playerid][pCarLicense] == 0)
	{
		return SendClientMessage(playerid, -1, "You need a car license to purchase a vehicle.");
	}
    if(GetSpawnedVehicles(playerid) >= MAX_SPAWNED_VEHICLES)
    {
        return SCMf(playerid, COLOR_ERROR, "[ERROR]{ffffff} You can't have more than %i vehicles spawned at a time.", MAX_SPAWNED_VEHICLES);
    }
	//if(IsPlayerInRangeOfPoint(playerid, 3.0, 542.0433, -1293.5909, 17.2422))
	if(IsPlayerInRangeOfPoint(playerid, 3.0, 1490.2845, 1305.7607, 1093.2964))
	{
		ShowDialogToPlayer(playerid, DIALOG_BUYVEHICLENEW);
	}
	/*else if(IsPlayerInRangeOfPoint(playerid, 3.0, 1892.6315, -2328.6721, 13.5469))
	{
     	string = "Vehicle\tPrice";

		for(new i = 0; i < sizeof(vehicleArray); i ++)
	  	{
	  		if(!strcmp(vehicleArray[i][carCategory], "Aircraft"))
	  		{
		    	format(string, sizeof(string), "%s\n%s\t"SVRCLR"%s", string, vehicleNames[vehicleArray[i][carModel] - 400], FormatNumber(vehicleArray[i][carPrice]));
			}
		}
		ShowPlayerDialog(playerid, DIALOG_BUYAIRCRAFT, DIALOG_STYLE_TABLIST_HEADERS, "Aircraft Dealership", string, "Buy", "Cancel");
	}*/
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "You are not in range of any dealership.");
	}
	return 1;
}
CMD:v(playerid, params[])
{
	new option[60], param[128];
	new string[MAX_SPAWNED_VEHICLES * 64], count;
    new vehicleid = GetPlayerVehicleID(playerid);

	if(sscanf(params, "s[60]S()[128]", option, param))
	{
		SendClientMessage(playerid, SERVER_COLOR, "____________________________________________________");
		SendClientMessage(playerid, COLOR_LIGHTRED, "USAGE: /v(ehicle) [action]");
		SendClientMessage(playerid, COLOR_LIGHTRED, "[Actions]"WHITE" storage, neon");
		SendClientMessage(playerid, COLOR_LIGHTRED, "[Actions]"WHITE" trunk, hood, windows");
		SendClientMessage(playerid, COLOR_LIGHTRED, "[Actions]"WHITE" find, info, lights");
		SendClientMessage(playerid, SERVER_COLOR, "____________________________________________________");
		return true;
	}

	if(!strcmp(option, "windows", true))
	{
		if(!IsPlayerInAnyVehicle(playerid))
		{
		    return SCM(playerid, COLOR_ERROR, "You must be inside a vehicle to use this command.");
		}
		if(pData[playerid][pCuffed])
		{
		    return SCM(playerid, COLOR_ERROR, "You cannot use this command while cuffed");
		}
		if(pData[playerid][pTied])
		{
		    return SCM(playerid, COLOR_ERROR, "You cannot use this command while tied.");
		}
	    if(!VehicleHasWindows(vehicleid))
		{
		    return SCM(playerid, COLOR_ERROR, "This vehicle does not have any windows.");
		}
		if(CarWindows[vehicleid])
		{
		    CarWindows[vehicleid] = 0;
		    SCM(playerid, COLOR_WHITE, "You have ~g~rolled down~w~ the windows!");
	        SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s rolls down the vehicle windows of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		}
		else
		{
		    CarWindows[vehicleid] = 1;
		    SCM(playerid, COLOR_WHITE, "You have ~r~rolled up~w~ the windows!");
		    SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s rolls up the vehicle windows of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		}
	}
	if(!strcmp(option, "lights", true))
	{
		if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		{
		    return SCM(playerid, COLOR_ERROR, "You must be driving a vehicle to use this command.");
		}
		if(!VehicleHasEngine(vehicleid))
		{
		    return SCM(playerid, COLOR_ERROR, "This vehicle has no lights which can be turned on.");
		}

		if(!GetVehicleParams(vehicleid, VEHICLE_LIGHTS))
		{
		    SetVehicleParams(vehicleid, VEHICLE_LIGHTS, true);
		    SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s turns on the headlights of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		}
		else
		{
		    SetVehicleParams(vehicleid, VEHICLE_LIGHTS, false);
		    SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s turns off the headlights of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		}
	}
	else if(!strcmp(option, "storage", true))
	{
		if(GetNearbyPG(playerid) >= 0 || GetNearbyGarage(playerid) >= 0)
		{
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id, modelid, pos_x, pos_y, pos_z, world, impounded FROM vehicles WHERE ownerid = %i", pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_CAR_STORAGE, playerid);
			return 1;
		}
		else
		{
			return SendClientMessage(playerid, COLOR_SYNTAX, "You are not in any of a garage.");
		}
	}
	else if(!strcmp(option, "neon", true))
	{
		if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		{
		    return SCM(playerid, COLOR_ERROR, "You are not driving any vehicle of yours.");
		}
		if(!IsVehicleOwner(playerid, vehicleid) && pData[playerid][pVehicleKeys] != vehicleid)
		{
		    return SCM(playerid, COLOR_ERROR, "You can't use this command as this vehicle doesn't belong to you.");
		}
		if(!VehicleInfo[vehicleid][vNeon])
		{
		    return SCM(playerid, COLOR_ERROR, "This vehicle has no neon installed.");
		}

		if(!VehicleInfo[vehicleid][vNeonEnabled])
		{
		    VehicleInfo[vehicleid][vNeonEnabled] = 1;
		    GameTextForPlayer(playerid, "~g~Neon activated", 3000, 3);

		    SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s presses a button to activate their neon tubes.", GetRPName(playerid));
		    //SCM(playerid, SERVER_COLOR, "** Neon enabled. The tubes appear under your vehicle.");
		}
		else
		{
		    VehicleInfo[vehicleid][vNeonEnabled] = 0;
		    GameTextForPlayer(playerid, "~r~Neon deactivated", 3000, 3);

		    SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s presses a button to deactivate their neon tubes.", GetRPName(playerid));
		    //SCM(playerid, SERVER_COLOR, "** Neon disabled.");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET neonenabled = %i WHERE id = %i", VehicleInfo[vehicleid][vNeonEnabled], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		ReloadVehicleNeon(vehicleid);
	}
	else if(!strcmp(option, "info", true))
	{
		if(!vehicleid || !IsVehicleOwner(playerid, vehicleid))
		{
		    return SCM(playerid, COLOR_ERROR, "You are not inside any vehicle of yours.");
		}

		new neon[12], Float:health;

		GetVehicleHealth(vehicleid, health);

		switch(VehicleInfo[vehicleid][vNeon])
		{
		    case 18647: neon = "Red";
			case 18648: neon = "Blue";
			case 18649: neon = "Green";
			case 18650: neon = "Yellow";
			case 18651: neon = "Pink";
			case 18652: neon = "White";
			default: neon = "None";
		}

		SCMf(playerid, SERVER_COLOR, "%s Stats:", GetVehicleName(vehicleid));
		SCMf(playerid, COLOR_GREY2, "(Owner: %s) - (Value: $%i) - (Tickets: $%i) - (Plate: %s)", VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vPrice], VehicleInfo[vehicleid][vTickets], VehicleInfo[vehicleid][vPlate]);
		SCMf(playerid, COLOR_GREY2, "(Neon: %s) - (Trunk: %i/3) - (Health: %.1f) - (Fuel: %i)", neon, VehicleInfo[vehicleid][vTrunk], health, vehicleFuel[vehicleid]);
	}
	else if(!strcmp(option, "find", true))
	{
		string = "#\tModel\tLocation";

	 	for(new i = 1; i < MAX_VEHICLES; i ++)
	 	{
	 	    if(IsValidVehicle(i) && VehicleInfo[i][vID] > 0 && IsVehicleOwner(playerid, i))
	 	    {
	 	        format(string, sizeof(string), "%s\n%i\t%s\t%s", string, count + 1, GetVehicleName(i), GetVehicleZoneName(i));
	 	        count++;
			}
		}

		if(!count)
		{
		    SCM(playerid, COLOR_ERROR, "You have no vehicles spawned at the moment.");
		}
		else
		{
		    ShowPlayerDialog(playerid, DIALOG_FINDCAR, DIALOG_STYLE_TABLIST_HEADERS, ""SVRCLR"Choose a vehicle to track.", string, "Select", "Cancel");
		}
	}
	else if(!strcmp(option, "trunk", true))
	{
		if(!IsPlayerInAnyVehicle(playerid)) {
			vehicleid = GetNearbyVehicle(playerid);
		}

		if(vehicleid == INVALID_VEHICLE_ID || !vehicleid)
		{
			return SCM(playerid, COLOR_ERROR, "You are not in range or inside of any vehicle.");
		}
		if(!VehicleHasWindows(vehicleid))
		{
			return SCM(playerid, COLOR_ERROR, "This vehicle has no boot.");
		}

		if(!GetVehicleParams(vehicleid, VEHICLE_BOOT))
		{
			SetVehicleParams(vehicleid, VEHICLE_BOOT, true);
			SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s opens the boot of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		}
		else
		{
			SetVehicleParams(vehicleid, VEHICLE_BOOT, false);
			SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s closes the boot of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		}
	}
	else if(!strcmp(option, "hood", true))
	{
		if(!IsPlayerInAnyVehicle(playerid)) {
			vehicleid = GetNearbyVehicle(playerid);
		}

		if(vehicleid == INVALID_VEHICLE_ID || !vehicleid)
		{
			return SCM(playerid, COLOR_ERROR, "You are not in range of any vehicle.");
		}
		if(!VehicleHasWindows(vehicleid))
		{
			return SCM(playerid, COLOR_ERROR, "This vehicle has no hood.");
		}

		if(!GetVehicleParams(vehicleid, VEHICLE_BONNET))
		{
			SetVehicleParams(vehicleid, VEHICLE_BONNET, true);
			SCM(playerid, COLOR_WHITE, "You have ~g~opened~w~ the hood!");
			SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s opens the hood of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		}
		else
		{
			SetVehicleParams(vehicleid, VEHICLE_BONNET, false);
			SCM(playerid, COLOR_WHITE, "You have ~g~closed~w~ the hood!");
			SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s closes the hood of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		}
	}
	/*else if(!strcmp(option, "park", true))
	{
		new id = VehicleInfo[vehicleid][vID];

		if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		{
			return SCM(playerid, COLOR_ERROR, "You are not driving any vehicle of yours.");
		}
		if(!IsVehicleOwner(playerid, vehicleid) && pData[playerid][pVehicleKeys] != vehicleid)
		{
			return SCM(playerid, COLOR_ERROR, "You can't park this vehicle as it doesn't belong to you.");
		}

		SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s parks their %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		SCMf(playerid, SERVER_COLOR, "You have parked your %s which will spawn in this spot from now on.", GetVehicleName(vehicleid));

		// Save the vehicle's information.
		GetVehiclePos(vehicleid, VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ]);
		GetVehicleZAngle(vehicleid, VehicleInfo[vehicleid][vPosA]);

		VehicleInfo[vehicleid][vInterior] = GetPlayerInterior(playerid);
		VehicleInfo[vehicleid][vWorld] = GetPlayerVirtualWorld(playerid);

		// Update the database record with the new information, then despawn the vehicle.
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', interior = %i, world = %i WHERE id = %i", VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ], VehicleInfo[vehicleid][vPosA], VehicleInfo[vehicleid][vInterior], VehicleInfo[vehicleid][vWorld], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);
		DespawnVehicle(vehicleid);

		// Finally, we reload the vehicle from the database.
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM vehicles WHERE id = %i", id);
		mysql_tquery(connectionID, queryBuffer, "OnPlayerSpawnVehicle", "ii", playerid, true);
	}*/
	return 1;
}

CMD:windows(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!IsPlayerInAnyVehicle(playerid))
	{
		return SCM(playerid, COLOR_ERROR, "You must be inside a vehicle to use this command.");
	}
	if(pData[playerid][pCuffed])
	{
		return SCM(playerid, COLOR_ERROR, "You cannot use this command while cuffed");
	}
	if(pData[playerid][pTied])
	{
		return SCM(playerid, COLOR_ERROR, "You cannot use this command while tied.");
	}
	if(!VehicleHasWindows(vehicleid))
	{
		return SCM(playerid, COLOR_ERROR, "This vehicle does not have any windows.");
	}
	if(CarWindows[vehicleid])
	{
		CarWindows[vehicleid] = 0;
		SCM(playerid, COLOR_WHITE, "You have ~g~rolled down~w~ the windows!");
		SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s rolls down the vehicle windows of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}
	else
	{
		CarWindows[vehicleid] = 1;
		SCM(playerid, COLOR_WHITE, "You have ~r~rolled up~w~ the windows!");
		SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s rolls up the vehicle windows of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}
	return 1;
}

CMD:lights(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
		return SCM(playerid, COLOR_ERROR, "You must be driving a vehicle to use this command.");
	}
	if(!VehicleHasEngine(vehicleid))
	{
		return SCM(playerid, COLOR_ERROR, "This vehicle has no lights which can be turned on.");
	}

	if(!GetVehicleParams(vehicleid, VEHICLE_LIGHTS))
	{
		SetVehicleParams(vehicleid, VEHICLE_LIGHTS, true);
		SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s turns on the headlights of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}
	else
	{
		SetVehicleParams(vehicleid, VEHICLE_LIGHTS, false);
		SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s turns off the headlights of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}
	return 1;
}

CMD:neon(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);
    if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_ERROR, "You are not driving any vehicle of yours.");
	}
	if(!IsVehicleOwner(playerid, vehicleid) && pData[playerid][pVehicleKeys] != vehicleid)
	{
	    return SCM(playerid, COLOR_ERROR, "You can't use this command as this vehicle doesn't belong to you.");
	}
	if(!VehicleInfo[vehicleid][vNeon])
	{
	    return SCM(playerid, COLOR_ERROR, "This vehicle has no neon installed.");
	}

	if(!VehicleInfo[vehicleid][vNeonEnabled])
	{
	    VehicleInfo[vehicleid][vNeonEnabled] = 1;
	    GameTextForPlayer(playerid, "~g~Neon activated", 3000, 3);

	    SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s presses a button to activate their neon tubes.", GetRPName(playerid));
	    //SCM(playerid, SERVER_COLOR, "** Neon enabled. The tubes appear under your vehicle.");
	}
	else
	{
	    VehicleInfo[vehicleid][vNeonEnabled] = 0;
	    GameTextForPlayer(playerid, "~r~Neon deactivated", 3000, 3);

	    SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s presses a button to deactivate their neon tubes.", GetRPName(playerid));
	    //SCM(playerid, SERVER_COLOR, "** Neon disabled.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET neonenabled = %i WHERE id = %i", VehicleInfo[vehicleid][vNeonEnabled], VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadVehicleNeon(vehicleid);
	return 1;
}

CMD:carinfo(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), neon[12], Float:health;
	
    if(!vehicleid || !IsVehicleOwner(playerid, vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside any vehicle of yours.");
	}

	//new neon[12], Float:health;

	GetVehicleHealth(vehicleid, health);

	switch(VehicleInfo[vehicleid][vNeon])
	{
	    case 18647: neon = "Red";
		case 18648: neon = "Blue";
		case 18649: neon = "Green";
		case 18650: neon = "Yellow";
		case 18651: neon = "Pink";
		case 18652: neon = "White";
		default: neon = "None";
	}

	SCMf(playerid, SERVER_COLOR, "%s Stats:", GetVehicleName(vehicleid));
	SCMf(playerid, COLOR_GREY2, "(Owner: %s) - (Value: $%i) - (Tickets: $%i) - (Plate: %s)", VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vPrice], VehicleInfo[vehicleid][vTickets], VehicleInfo[vehicleid][vPlate]);
	SCMf(playerid, COLOR_GREY2, "(Neon: %s) - (Trunk: %i/3) - (Health: %.1f) - (Fuel: %i)", neon, VehicleInfo[vehicleid][vTrunk], health, vehicleFuel[vehicleid]);
	return 1;
}

CMD:trunk(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!IsPlayerInAnyVehicle(playerid)) {
		vehicleid = GetNearbyVehicle(playerid);
	}

	if(vehicleid == INVALID_VEHICLE_ID || !vehicleid)
	{
		return SCM(playerid, COLOR_ERROR, "You are not in range or inside of any vehicle.");
	}
	if(!VehicleHasWindows(vehicleid))
	{
		return SCM(playerid, COLOR_ERROR, "This vehicle has no boot.");
	}

	if(!GetVehicleParams(vehicleid, VEHICLE_BOOT))
	{
		SetVehicleParams(vehicleid, VEHICLE_BOOT, true);
		SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s opens the boot of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}
	else
	{
		SetVehicleParams(vehicleid, VEHICLE_BOOT, false);
		SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s closes the boot of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}
	return 1;
}

CMD:hood(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!IsPlayerInAnyVehicle(playerid)) {
		vehicleid = GetNearbyVehicle(playerid);
	}

	if(vehicleid == INVALID_VEHICLE_ID || !vehicleid)
	{
		return SCM(playerid, COLOR_ERROR, "You are not in range of any vehicle.");
	}
	if(!VehicleHasWindows(vehicleid))
	{
		return SCM(playerid, COLOR_ERROR, "This vehicle has no hood.");
	}

	if(!GetVehicleParams(vehicleid, VEHICLE_BONNET))
	{
		SetVehicleParams(vehicleid, VEHICLE_BONNET, true);
		SCM(playerid, COLOR_WHITE, "You have ~g~opened~w~ the hood!");
		SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s opens the hood of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}
	else
	{
		SetVehicleParams(vehicleid, VEHICLE_BONNET, false);
		SCM(playerid, COLOR_WHITE, "You have ~g~closed~w~ the hood!");
		SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s closes the hood of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}
	return 1;
}

/*CMD:park(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid), id = VehicleInfo[vehicleid][vID];

	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not driving any vehicle of yours.");
	}
	if(!IsVehicleOwner(playerid, vehicleid) && pData[playerid][pVehicleKeys] != vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't park this vehicle as it doesn't belong to you.");
	}

	SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s parks their %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	SCMf(playerid, COLOR_AQUA, "You have parked your %s which will spawn in this spot from now on.", GetVehicleName(vehicleid));

	// Save the vehicle's information.
	GetVehiclePos(vehicleid, VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ]);
	GetVehicleZAngle(vehicleid, VehicleInfo[vehicleid][vPosA]);

	VehicleInfo[vehicleid][vInterior] = GetPlayerInterior(playerid);
	VehicleInfo[vehicleid][vWorld] = GetPlayerVirtualWorld(playerid);

	// Update the database record with the new information, then despawn the vehicle.
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', interior = %i, world = %i WHERE id = %i", VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ], VehicleInfo[vehicleid][vPosA], VehicleInfo[vehicleid][vInterior], VehicleInfo[vehicleid][vWorld], VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);
	DespawnVehicle(vehicleid);

	// Finally, we reload the vehicle from the database.
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM vehicles WHERE id = %i", id);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerSpawnVehicle", "ii", playerid, true);
	return 1;
}*/

//CHOP CHOP VEHICLE
stock UpdatePlayerVehicleParkPosition(playerid, vehicleid, Float:newx, Float:newy, Float:newz, Float:newangle)
{
	if(VehicleInfo[playerid][vID] != 0)
	{
		/*if(!isnull(VehicleInfo[playerid][playervehicleid][pvPlate])) {
			SetVehicleNumberPlate(playervehicleid, VehicleInfo[playerid][playervehicleid][pvPlate]);
		}*/

		VehicleInfo[playerid][vPosX] = newx;
		VehicleInfo[playerid][vPosY] = newy;
		VehicleInfo[playerid][vPosZ] = newz;
		VehicleInfo[playerid][vPosA] = newangle;
		GetVehicleHealth(VehicleInfo[playerid][vID], VehicleInfo[playerid][vHealth]);

		VehicleInfo[playerid][vWorld] = GetPlayerVirtualWorld(playerid);
		VehicleInfo[playerid][vInterior] = GetPlayerInterior(playerid);

		/*mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', interior = %i, world = %i WHERE id = %i", VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ], VehicleInfo[vehicleid][vPosA], VehicleInfo[vehicleid][vInterior], VehicleInfo[vehicleid][vWorld], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);*/

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', nterior = %i, world = %i, health = '%f' WHERE id = %i", vehicleid, newx, vehicleid, newy, vehicleid, newz, vehicleid, newangle, vehicleid, VehicleInfo[playerid][vWorld], vehicleid, VehicleInfo[playerid][vInterior], vehicleid, VehicleInfo[playerid][vHealth], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}
	return 0;
}

// END OF CHOP CHOP
/*CMD:vstorage(playerid, params[])
{
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id, modelid, pos_x, pos_y, pos_z, world FROM vehicles WHERE ownerid = %i", pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_CAR_STORAGE, playerid);
	return 1;
}

CMD:vst(playerid, params[])
{
	return callcmd::vstorage(playerid, params);
}*/

CMD:sb(playerid, params[])
{
	return callcmd::seatbelt(playerid, params);
}
CMD:hm(playerid, params[])
{
	return callcmd::seatbelt(playerid, params);
}
CMD:helmet(playerid, params[])
{
	return callcmd::seatbelt(playerid, params);
}
CMD:givekeys(playerid, params[])
{
	new targetid, vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid || !IsVehicleOwner(playerid, vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside any vehicle of yours.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /givekeys [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't give keys to yourself.");
	}
	if(pData[targetid][pVehicleKeys] == vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player already has keys to your vehicle.");
	}

	pData[targetid][pVehicleKeys] = vehicleid;

	SendProximityMessage(playerid, 20.0, COLOR_TEAL, "**"WHITE" %s"TEAL" gives "WHITE"%s "TEAL"the keys to their "WHITE"%s.", GetRPName(playerid), GetRPName(targetid), GetVehicleName(vehicleid));
	SM(targetid, COLOR_TEAL, ""WHITE"%s"TEAL" has given you the keys to their "WHITE"%s"TEAL".", GetRPName(playerid), GetVehicleName(vehicleid));
	SM(playerid, COLOR_TEAL, "You have given "WHITE"%s"TEAL" the keys to your "WHITE"%s"TEAL".", GetRPName(targetid), GetVehicleName(vehicleid));
	return 1;
}

CMD:takekeys(playerid, params[])
{
	new targetid, vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid || !IsVehicleOwner(playerid, vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside any vehicle of yours.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /takekeys [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't take keys from yourself.");
	}
	if(pData[targetid][pVehicleKeys] != vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player doesn't have the keys to your vehicle.");
	}

	pData[targetid][pVehicleKeys] = INVALID_VEHICLE_ID;

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes back the keys to their %s from %s.", GetRPName(playerid), GetRPName(targetid), GetVehicleName(vehicleid));
	SM(targetid, COLOR_AQUA, "%s has taken back the keys to their "SVRCLR"%s{CCFFFF}.", GetRPName(playerid), GetVehicleName(vehicleid));
	SM(playerid, COLOR_AQUA, "You have taken back the keys to your "SVRCLR"%s{CCFFFF} from %s.", GetRPName(targetid), GetVehicleName(vehicleid));
	return 1;
}

/*CMD:trackcar(playerid, params[])
{
	return callcmd::findcar(playerid, params);
}*/

CMD:trackcar(playerid, params[])
{
    new string[128], count;

 	string = "#\tModel\tLocation";

 	for(new i = 1; i < MAX_VEHICLES; i ++)
 	{
 	    if(IsValidVehicle(i) && VehicleInfo[i][vID] > 0 && IsVehicleOwner(playerid, i))
 	    {
 	        format(string, sizeof(string), "%s\n%i\t%s\t%s", string, count + 1, GetVehicleName(i), GetVehicleZoneName(i));
 	        count++;
		}
	}

	if(!count)
	{
	    SCM(playerid, COLOR_SYNTAX, "You have no vehicles spawned at the moment.");
	}
	else
	{
	    ShowPlayerDialog(playerid, DIALOG_FINDCAR, DIALOG_STYLE_TABLIST_HEADERS, "Choose a vehicle to track.", string, "Select", "Cancel");
	}

	return 1;
}

CMD:tune(playerid, params[]) {
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!IsPlayerInTuneArea(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the tunning place.");
	}
	if((FactionInfo[pData[playerid][pFaction]][fType] != FACTION_MECHANIC))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be a mechanic to use this command.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	{
		return SCM(playerid, COLOR_SYNTAX, "The engine needs to be shut down before you tune this vehicle.");
	}
	if(!vehicleid)
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not inside of any vehicle.");
	}
	ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, ""SVRCLR"Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
	return 1;
}
CMD:eat(playerid, params[])
{
	new option[10], param[32];
    if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pJailTime] > 0 || pData[playerid][pJoinedEvent] > 0 || pData[playerid][pDueling] != INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_ERROR, "You can't use this command at the moment.");
	}
	if(sscanf(params, "s[8]S()[32]", option, param))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]{ffffff} /eat sisig, piattos, burger, tapsilog");
	}

	if(!strcmp(option, "sisig", true))
	{
		if(!pData[playerid][pFood])
		{
		    return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You don't have sisig on your lunch box.");
		}
		pData[playerid][pFood]--;
		pData[playerid][pHunger] += 20;
		pData[playerid][pHungerTimer] = 0;
		if (pData[playerid][pHunger] > 100)
		{
			pData[playerid][pHunger] = 100;
		}

		ApplyAnimationEx(playerid, "FOOD", "EAT_Burger", 3.0, 1, 0, 0, 0, 0);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s takes out a sisig meal from their lunch box, and start eating it.", GetRPName(playerid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET hunger = %i, hungertimer = %i WHERE uid = %i", pData[playerid][pHunger], pData[playerid][pHungerTimer], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET food = %i WHERE uid = %i", pData[playerid][pFood], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "piattos", true))
	{
		if(!pData[playerid][pFood])
		{
		    return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You don't have piattos on your lunch box.");
		}
		pData[playerid][pFood]--;
		pData[playerid][pHunger] += 20;
		pData[playerid][pHungerTimer] = 0;
		if (pData[playerid][pHunger] > 100)
		{
			pData[playerid][pHunger] = 100;
		}
		ApplyAnimationEx(playerid, "FOOD", "EAT_Burger", 3.0, 1, 0, 0, 0, 0);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s takes out a piattos from their lunch box, and start eating it.", GetRPName(playerid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET hunger = %i, hungertimer = %i WHERE uid = %i", pData[playerid][pHunger], pData[playerid][pHungerTimer], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET food = %i WHERE uid = %i", pData[playerid][pFood], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "burger", true))
	{
		if(!pData[playerid][pFood])
		{
		    return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You don't have burger on your lunch box.");
		}
		pData[playerid][pFood]--;
		pData[playerid][pHunger] += 20;
		pData[playerid][pHungerTimer] = 0;
		if (pData[playerid][pHunger] > 100)
		{
			pData[playerid][pHunger] = 100;
		}
		ApplyAnimationEx(playerid, "FOOD", "EAT_Burger", 3.0, 1, 0, 0, 0, 0);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s takes out a burger from their lunch box, and start eating it.", GetRPName(playerid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET hunger = %i, hungertimer = %i WHERE uid = %i", pData[playerid][pHunger], pData[playerid][pHungerTimer], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET food = %i WHERE uid = %i", pData[playerid][pFood], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "tapsilog", true))
	{
		if(!pData[playerid][pFood])
		{
		    return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You don't have tapsilog on your lunch box.");
		}
		pData[playerid][pFood]--;
		pData[playerid][pHunger] += 20;
		pData[playerid][pHungerTimer] = 0;
		if (pData[playerid][pHunger] > 100)
		{
			pData[playerid][pHunger] = 100;
		}
		ApplyAnimationEx(playerid, "FOOD", "EAT_Burger", 3.0, 1, 0, 0, 0, 0);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s takes out a tapsilog meal from their lunch box, and start eating it.", GetRPName(playerid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET hunger = %i, hungertimer = %i WHERE uid = %i", pData[playerid][pHunger], pData[playerid][pHungerTimer], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET food = %i WHERE uid = %i", pData[playerid][pFood], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	return 1;
}
CMD:drink(playerid, params[])
{
	new option[10], param[32];
    if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pJailTime] > 0 || pData[playerid][pJoinedEvent] > 0 || pData[playerid][pDueling] != INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_ERROR, "You can't use this command at the moment.");
	}
	if(sscanf(params, "s[8]S()[32]", option, param))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]{ffffff} /eat water, royal, zesto");
	}

	if(!strcmp(option, "water", true))
	{
		if(!pData[playerid][pDrink])
		{
		    return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You don't have water on your lunch box.");
		}
		pData[playerid][pDrink]--;
		pData[playerid][pThirst] += 20;
		pData[playerid][pThirstTimer] = 0;
		if (pData[playerid][pThirst] > 100)
		{
			pData[playerid][pThirst] = 100;
		}
		
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET thirst = %i, thirsttimer = %i WHERE uid = %i", pData[playerid][pThirst], pData[playerid][pThirstTimer], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		
		
		ApplyAnimationEx(playerid, "BAR", "dnk_stndF_loop", 4.0, 1, 0, 0, 0, 0);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s takes out a water jog from their lunch box, and start drinking it.", GetRPName(playerid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET drink = %i WHERE uid = %i", pData[playerid][pDrink], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "royal", true))
	{
		if(!pData[playerid][pDrink])
		{
		    return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You don't have can of royal on your lunch box.");
		}
		pData[playerid][pDrink]--;
		pData[playerid][pThirst] += 20;
		pData[playerid][pThirstTimer] = 0;
		if (pData[playerid][pThirst] > 100)
		{
			pData[playerid][pThirst] = 100;
		}

		ApplyAnimationEx(playerid, "BAR", "dnk_stndF_loop", 4.0, 1, 0, 0, 0, 0);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s takes out a can of royal from their lunch box, and start drinking it.", GetRPName(playerid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET thirst = %i, thirsttimer = %i WHERE uid = %i", pData[playerid][pThirst], pData[playerid][pThirstTimer], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET drink = %i WHERE uid = %i", pData[playerid][pDrink], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "zesto", true))
	{
		if(!pData[playerid][pDrink])
		{
		    return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You don't have zest0 on your lunch box.");
		}
		pData[playerid][pDrink]--;
		pData[playerid][pThirst] += 20;
		pData[playerid][pThirstTimer] = 0;
		if (pData[playerid][pThirst] > 100)
		{
			pData[playerid][pThirst] = 100;
		}

		ApplyAnimationEx(playerid, "BAR", "dnk_stndF_loop", 4.0, 1, 0, 0, 0, 0);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s takes out a zest0 from their lunch box, and start drinking it.", GetRPName(playerid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET thirst = %i, thirsttimer = %i WHERE uid = %i", pData[playerid][pThirst], pData[playerid][pThirstTimer], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET drink = %i WHERE uid = %i", pData[playerid][pDrink], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	return 1;
}
CMD:upgradevehicle(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), option[8], param[32];

	if((FactionInfo[pData[playerid][pFaction]][fType] != FACTION_MECHANIC))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be a mechanic to use this command.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	{
		return SCM(playerid, COLOR_SYNTAX, "The engine needs to be shut down before you upgrade this vehicle.");
	}
	if(!vehicleid)
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not inside of any vehicle.");
	}
	if(!IsPlayerInTuneArea(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the tunning place.");
	}
	if(sscanf(params, "s[8]S()[32]", option, param))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /upgradevehicle [stash | neon | plate]");
	}

	if(!strcmp(option, "stash", true))
	{
	    if(isnull(param) || strcmp(param, "confirm", true) != 0)
	    {
	        SCM(playerid, COLOR_SYNTAX, "Usage: /upgradevehicle [stash] [confirm]");
	        SM(playerid, COLOR_WHITE, "Your vehicle's stash level is at %i/3. Upgrading your stash will cost you $1000.", VehicleInfo[vehicleid][vTrunk]);
	        return 1;
		}
		if(VehicleInfo[vehicleid][vTrunk] >= 3)
		{
		    return SCM(playerid, COLOR_SYNTAX, "This vehicle's stash is already at its maximum level.");
		}
		if(pData[playerid][pCash] < 1000)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You don't have enough money to upgrade your trunk.");
		}

		VehicleInfo[vehicleid][vTrunk]++;

		GivePlayerCash(playerid, -1000);
		GameTextForPlayer(playerid, "~r~-$1000", 5000, 1);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET trunk = %i WHERE id = %i", VehicleInfo[vehicleid][vTrunk], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_YELLOW, "You have paid $1000 for stash level %i/3. '/vstash balance' to see your new capacities.", VehicleInfo[vehicleid][vTrunk]);
		Log_Write("log_property", "%s (uid: %i) upgraded the stash of their %s (id: %i) to level %i/3.", GetPlayerNameEx(playerid), pData[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID], VehicleInfo[vehicleid][vTrunk]);
	}
	else if(!strcmp(option, "neon", true))
	{
	    if(isnull(param))
	    {
	        SCM(playerid, COLOR_SYNTAX, "Usage: /upgradevehicle [neon] [color] (costs $3000)");
			SCM(playerid, COLOR_GREY2, "List of colors: Red, Blue, Green, Yellow, Pink, White");
			return 1;
	    }
	    if(pData[playerid][pCash] < 3000)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You need at least $30,000 to upgrade your neon.");
		}
		if(!VehicleHasWindows(vehicleid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "This vehicle doesn't support neon.");
		}

		if(!strcmp(param, "red", true))
		{
		    SetVehicleNeon(vehicleid, 18647);
		    GivePlayerCash(playerid, -3000);
			GameTextForPlayer(playerid, "~r~-$3000", 5000, 1);

			SCM(playerid, COLOR_YELLOW, "You have paid $3000 for red neon. You can use /v neon to toggle your neon.");
			Log_Write("log_property", "%s (uid: %i) purchased red neon for their %s (id: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
		}
		else if(!strcmp(param, "blue", true))
		{
		    SetVehicleNeon(vehicleid, 18648);
		    GivePlayerCash(playerid, -3000);
			GameTextForPlayer(playerid, "~r~-$3000", 5000, 1);

			SCM(playerid, COLOR_YELLOW, "You have paid $3000 for blue neon. You can use /v neon to toggle your neon.");
			Log_Write("log_property", "%s (uid: %i) purchased blue neon for their %s (id: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
		}
		else if(!strcmp(param, "green", true))
		{
		    SetVehicleNeon(vehicleid, 18649);
		    GivePlayerCash(playerid, -3000);
			GameTextForPlayer(playerid, "~r~-$3000", 5000, 1);

			SCM(playerid, COLOR_YELLOW, "You have paid $3000 for green neon. You can use /v neon to toggle your neon.");
			Log_Write("log_property", "%s (uid: %i) purchased green neon for their %s (id: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
		}
		else if(!strcmp(param, "yellow", true))
		{
		    SetVehicleNeon(vehicleid, 18650);
		    GivePlayerCash(playerid, -3000);
			GameTextForPlayer(playerid, "~r~-$3000", 5000, 1);

			SCM(playerid, COLOR_YELLOW, "You have paid $3000 for yellow neon. You can use /v neon to toggle your neon.");
			Log_Write("log_property", "%s (uid: %i) purchased yellow neon for their %s (id: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
		}
		else if(!strcmp(param, "pink", true))
		{
		    SetVehicleNeon(vehicleid, 18651);
		    GivePlayerCash(playerid, -3000);
			GameTextForPlayer(playerid, "~r~-$3000", 5000, 1);

			SCM(playerid, COLOR_YELLOW, "You have paid $3000 for pink neon. You can use /v neon to toggle your neon.");
			Log_Write("log_property", "%s (uid: %i) purchased pink neon for their %s (id: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
		}
		else if(!strcmp(param, "white", true))
		{
		    SetVehicleNeon(vehicleid, 18652);
		    GivePlayerCash(playerid, -3000);
			GameTextForPlayer(playerid, "~r~-$3000", 5000, 1);

			SCM(playerid, COLOR_YELLOW, "You have paid $3000 for white neon. You can use /v neon to toggle your neon.");
			Log_Write("log_property", "%s (uid: %i) purchased white neon for their %s (id: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
		}
	}
	else if(!strcmp(option, "plate", true))
	{
	    if(isnull(param))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /upgradevehicle [plate] [text] (costs $2000)");
	    }
	    if(!VehicleHasEngine(vehicleid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This vehicle has no license plate. Therefore you can't buy this upgrade.");
	    }

	    strcpy(VehicleInfo[vehicleid][vPlate], param, 32);

		SetVehicleNumberPlate(vehicleid, param);
	    ResyncVehicle(vehicleid);

	    GivePlayerCash(playerid, -2000);
		GameTextForPlayer(playerid, "~r~-$2000", 5000, 1);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET plate = '%e' WHERE id = %i", param, VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_YELLOW, "You have paid $2000 for license plate '%s'. Changes will take effect once vehicle is parked.", param);
		Log_Write("log_property", "%s (uid: %i) paid $2000 to set the license plate of their %s (id: %i) to %s.", GetPlayerNameEx(playerid), pData[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID], param);
	}

	return 1;
}

/*CMD:neon(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);
	if(!vehicleid)
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not inside of any vehicle.");
	}
	if(!VehicleInfo[vehicleid][vNeon])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This vehicle has no neon installed.");
	}

	if(!VehicleInfo[vehicleid][vNeonEnabled])
	{
	    VehicleInfo[vehicleid][vNeonEnabled] = 1;
	    GameTextForPlayer(playerid, "~g~Neon activated", 3000, 3);

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s presses a button to activate their neon tubes.", GetRPName(playerid));
	    //SCM(playerid, COLOR_AQUA, "** Neon enabled. The tubes appear under your vehicle.");
	}
	else
	{
	    VehicleInfo[vehicleid][vNeonEnabled] = 0;
	    GameTextForPlayer(playerid, "~r~Neon deactivated", 3000, 3);

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s presses a button to deactivate their neon tubes.", GetRPName(playerid));
	    //SCM(playerid, COLOR_AQUA, "** Neon disabled.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET neonenabled = %i WHERE id = %i", VehicleInfo[vehicleid][vNeonEnabled], VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadVehicleNeon(vehicleid);
	return 1;
}*/

CMD:bp(playerid, params[]) { return callcmd::backpack(playerid, params); }
CMD:backpack(playerid, params[])
{
    if(pData[playerid][pBackpack] != 0)
    {
		new option[14], param[32];
	 	if(sscanf(params, "s[14]S()[32]", option, param))
		{
	 		return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [wear | balance | deposit | withdraw]");
	 	}
		if(!strcmp(option, "wear", true))
		{
		    if(pData[playerid][pPaintball] || pData[playerid][pPaintball2] || pData[playerid][pJoinedEvent])
			    {
		        return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
			}
		    if(!pData[playerid][bpWearing])
		    {
		        if(pData[playerid][pBackpack] == 1)
		    	{
					SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s wears his small backpack on his back.", GetRPName(playerid));
					SetPlayerAttachedObject(playerid, 1, 371, 1, -0.002, -0.140999, -0.01, 8.69999, 88.8, -8.79993, 1.11, 0.963);
				}
				else if(pData[playerid][pBackpack] == 2)
		  		{
					SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s wears his medium backpack on his back.", GetRPName(playerid));
					SetPlayerAttachedObject(playerid, 1, 371, 1, -0.002, -0.140999, -0.01, 8.69999, 88.8, -8.79993, 1.11, 0.963);
				}
				else if(pData[playerid][pBackpack] == 3)
		  		{
					SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s wears his large backpack on his back.", GetRPName(playerid));
					SetPlayerAttachedObject(playerid, 1, 3026, 1, -0.254999, -0.109, -0.022999, 10.6, -1.20002, 3.4, 1.265, 1.242, 1.062);
				}
    			pData[playerid][bpWearing] = 1;
			}
			else
			{
		        if(pData[playerid][pBackpack] == 1)
		    	{
					SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes off his small backpack from his back.", GetRPName(playerid));
					pData[playerid][bpWearing] = 0;
				}
				else if(pData[playerid][pBackpack] == 2)
		  		{
					SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes off his medium backpack from his back.", GetRPName(playerid));
					pData[playerid][bpWearing] = 0;
				}
				else if(pData[playerid][pBackpack] == 3)
		  		{
					SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes off his large backpack from his back.", GetRPName(playerid));
					pData[playerid][bpWearing] = 0;
				}
				RemovePlayerAttachedObject(playerid, 1);
				return 1;
			}
		}
		if(pData[playerid][bpWearing])
		{
			if(!strcmp(option, "balance", true))
		 	{
    			new count;

				for(new i = 0; i < 15; i ++)
    			{
		        	if(pData[playerid][bpWeapons][i])
          			{
            			count++;
          			}
       			}
				SCM(playerid, SERVER_COLOR, "Backpack Balance:");
    			SM(playerid, COLOR_GREY2, "(Cash: $%i/$%i)", pData[playerid][bpCash], GetBackpackCapacity(playerid, STASH_CAPACITY_CASH));
				SM(playerid, COLOR_GREY2, "(Materials: %i/%i) | (Weapons: %i/%i)", pData[playerid][bpMaterials], GetBackpackCapacity(playerid, STASH_CAPACITY_MATERIALS), count, GetBackpackCapacity(playerid, STASH_CAPACITY_WEAPONS));
		        SM(playerid, COLOR_GREY2, "(Pot: %i/%i grams) | (Crack: %i/%i grams)", pData[playerid][bpPot], GetBackpackCapacity(playerid, STASH_CAPACITY_WEED), pData[playerid][bpCrack], GetBackpackCapacity(playerid, STASH_CAPACITY_COCAINE));
		        SM(playerid, COLOR_GREY2, "(Meth: %i/%i grams) | (Painkillers: %i/%i pills)", pData[playerid][bpMeth], GetBackpackCapacity(playerid, STASH_CAPACITY_METH), pData[playerid][bpPainkillers], GetBackpackCapacity(playerid, STASH_CAPACITY_PAINKILLERS));
          		SCM(playerid, SERVER_COLOR, "Backpack Ammunition:");
				SM(playerid, COLOR_GREY2, "(HP Ammo: %i/%i) | (Poison Ammo: %i/%i)", pData[playerid][bpHPAmmo], GetBackpackCapacity(playerid, STASH_CAPACITY_HPAMMO), pData[playerid][bpPoisonAmmo], GetBackpackCapacity(playerid, STASH_CAPACITY_POISONAMMO));
	            SM(playerid, COLOR_GREY2, "(FMJ Ammo: %i/%i)", pData[playerid][bpFMJAmmo], GetBackpackCapacity(playerid, STASH_CAPACITY_FMJAMMO));
				return 1;
			}
			else if(!strcmp(option, "deposit", true))
		 	{
				new value;

				if(sscanf(param, "s[14]S()[32]", option, param))
		  		{
		    		SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [deposit] [option]");
		      		SCM(playerid, COLOR_WHITE, "Available options: Cash, Materials, Pot, Crack, Meth, Painkillers, Weapon");
		        	SCM(playerid, COLOR_WHITE, "Available options: HPAmmo, PoisonAmmo, FMJAmmo");
			        return 1;
		    	}
			    if(!strcmp(option, "cash", true))
				{
		  			if(sscanf(param, "i", value))
					{
						return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [deposit] [cash] [amount]");
					}
					if(value < 1 || value > pData[playerid][pCash])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(pData[playerid][bpCash] + value > GetBackpackCapacity(playerid, STASH_CAPACITY_CASH))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Your backpack can only hold up to $%i at its level.", GetBackpackCapacity(playerid, STASH_CAPACITY_CASH));
				    }

				    GivePlayerCash(playerid, -value);
				    pData[playerid][bpCash] += value;

				    SM(playerid, COLOR_AQUA, "** You have stored $%i in your backpack.", value);
				}
				else if(!strcmp(option, "materials", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [deposit] [materials] [amount]");
					}
					if(value < 1 || value > pData[playerid][pMaterials])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(pData[playerid][bpMaterials] + value > GetBackpackCapacity(playerid, STASH_CAPACITY_MATERIALS))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Your backpack can only hold up to %i materials at its level.", GetBackpackCapacity(playerid, STASH_CAPACITY_MATERIALS));
				    }

				    pData[playerid][pMaterials] -= value;
				    pData[playerid][bpMaterials] += value;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", pData[playerid][pMaterials], pData[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    SM(playerid, COLOR_AQUA, "** You have stored %i materials in your backpack.", value);
	   			}
				else if(!strcmp(option, "pot", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [deposit] [pot] [amount]");
					}
					if(value < 1 || value > pData[playerid][pPot])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(pData[playerid][bpPot] + value > GetBackpackCapacity(playerid, STASH_CAPACITY_WEED))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Your backpack can only hold up to %i grams of pot at its level.", GetBackpackCapacity(playerid, STASH_CAPACITY_WEED));
				    }

				    pData[playerid][pPot] -= value;
				    pData[playerid][bpPot] += value;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", pData[playerid][pPot], pData[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    SM(playerid, COLOR_AQUA, "** You have stored %ig of pot in your backpack.", value);
	   			}
	   			else if(!strcmp(option, "crack", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [deposit] [Crack] [amount]");
					}
					if(value < 1 || value > pData[playerid][pCrack])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(pData[playerid][bpCrack] + value > GetBackpackCapacity(playerid, STASH_CAPACITY_COCAINE))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Your backpack can only hold up to %i grams of Crack at its level.", GetBackpackCapacity(playerid, STASH_CAPACITY_COCAINE));
				    }

				    pData[playerid][pCrack] -= value;
				    pData[playerid][bpCrack] += value;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", pData[playerid][pCrack], pData[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    SM(playerid, COLOR_AQUA, "** You have stored %ig of Crack in your backpack.", value);
	   			}
	   			else if(!strcmp(option, "meth", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [deposit] [meth] [amount]");
					}
					if(value < 1 || value > pData[playerid][pMeth])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(pData[playerid][bpMeth] + value > GetBackpackCapacity(playerid, STASH_CAPACITY_METH))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Your backpack can only hold up to %i grams of meth at its level.", GetBackpackCapacity(playerid, STASH_CAPACITY_METH));
				    }

				    pData[playerid][pMeth] -= value;
				    pData[playerid][bpMeth] += value;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", pData[playerid][pMeth], pData[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    SM(playerid, COLOR_AQUA, "** You have stored %ig of meth in your backpack.", value);
	   			}
	   			else if(!strcmp(option, "painkillers", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [deposit] [painkillers] [amount]");
					}
					if(value < 1 || value > pData[playerid][pPainkillers])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(pData[playerid][bpPainkillers] + value > GetBackpackCapacity(playerid, STASH_CAPACITY_PAINKILLERS))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Your backpack can only hold up to %i painkillers at its level.", GetBackpackCapacity(playerid, STASH_CAPACITY_PAINKILLERS));
				    }

				    pData[playerid][pPainkillers] -= value;
				    pData[playerid][bpPainkillers] += value;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", pData[playerid][pPainkillers], pData[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    SM(playerid, COLOR_AQUA, "** You have stored %i painkillers in your backpack.", value);
	   			}
	   			else if(!strcmp(option, "weapon", true))
	   			{
	   			    new weaponid;

	   			    if(sscanf(param, "i", weaponid))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [deposit] [weapon] [weaponid] (/guninv for weapon IDs)");
					}
					if(!(1 <= weaponid <= 46) || pData[playerid][pWeapons][weaponSlotIDs[weaponid]] != weaponid)
					{
					    return SCM(playerid, COLOR_SYNTAX, "You don't have that weapon. /guninv for a list of your weapons.");
					}
					if(GetHealth(playerid) < 60)
					{
					    return SCM(playerid, COLOR_SYNTAX, "You can't store weapons as your health is below 60.");
					}
					for(new i = 0; i < GetBackpackCapacity(playerid, STASH_CAPACITY_WEAPONS); i ++)
					{
						if(!pData[playerid][bpWeapons][i])
	   				    {
							pData[playerid][bpWeapons][i] = weaponid;

							RemovePlayerWeapon(playerid, weaponid);
							SM(playerid, COLOR_AQUA, "** You have stored a %s in slot %i of your backpack.", GetWeaponNameEx(pData[playerid][bpWeapons][i]), i + 1);
							return 1;
						}
					}

					SCM(playerid, COLOR_SYNTAX, "This backpack has no more slots available for weapons.");
				}
	            else if(!strcmp(option, "hpammo", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [deposit] [hpammo] [amount]");
					}
					if(value < 1 || value > pData[playerid][pHPAmmo])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(pData[playerid][bpHPAmmo] + value > GetBackpackCapacity(playerid, STASH_CAPACITY_HPAMMO))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Your backpack can only hold up to %i HP ammo at its level.", GetBackpackCapacity(playerid, STASH_CAPACITY_HPAMMO));
				    }

				    SetWeaponAmmo(playerid, AMMO_HP, pData[playerid][pHPAmmo] - value);
				    pData[playerid][bpHPAmmo] += value;

				    SM(playerid, COLOR_AQUA, "** You have stored %i rounds of hollow point ammo in your backpack.", value);
	   			}
	   			else if(!strcmp(option, "poisonammo", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [deposit] [poisonammo] [amount]");
					}
					if(value < 1 || value > pData[playerid][pPoisonAmmo])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(pData[playerid][bpPoisonAmmo] + value > GetBackpackCapacity(playerid, STASH_CAPACITY_POISONAMMO))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Your backpack can only hold up to %i  at its level.", GetBackpackCapacity(playerid, STASH_CAPACITY_POISONAMMO));
				    }

				    SetWeaponAmmo(playerid, AMMO_POISON, pData[playerid][pPoisonAmmo] - value);
				    pData[playerid][bpPoisonAmmo] += value;

				    SM(playerid, COLOR_AQUA, "** You have stored %i rounds of poison tip ammo in your backpack.", value);
	   			}
	   			else if(!strcmp(option, "fmjammo", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [deposit] [fmjammo] [amount]");
					}
					if(value < 1 || value > pData[playerid][pFMJAmmo])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(pData[playerid][bpFMJAmmo] + value > GetBackpackCapacity(playerid, STASH_CAPACITY_FMJAMMO))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Your backpack can only hold up to %i FMJ ammo at its level.", GetBackpackCapacity(playerid, STASH_CAPACITY_FMJAMMO));
				    }

				    SetWeaponAmmo(playerid, AMMO_FMJ, pData[playerid][pFMJAmmo] - value);
				    pData[playerid][bpFMJAmmo] += value;

				    SM(playerid, COLOR_AQUA, "** You have stored %i rounds of full metal jacket ammo in your backpack.", value);
	   			}
			}
	        else if(!strcmp(option, "withdraw", true))
		    {
		        new value;

		        if(sscanf(param, "s[14]S()[32]", option, param))
		        {
		            SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [withdraw] [option]");
		            SCM(playerid, COLOR_WHITE, "Available options: Cash, Pot, Crack, Meth, Painkillers, Weapon");
		            SCM(playerid, COLOR_WHITE, "Available options: HPAmmo, PoisonAmmo, FMJAmmo");
		            return 1;
		        }
		        if(!strcmp(option, "cash", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [withdraw] [cash] [amount]");
					}
					if(value < 1 || value > pData[playerid][bpCash])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }

				    GivePlayerCash(playerid, value);
				    pData[playerid][bpCash] -= value;

				    SM(playerid, COLOR_AQUA, "** You have taken $%i from your backpack.", value);
				}
				else if(!strcmp(option, "materials", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [withdraw] [materials] [amount]");
					}
					if(value < 1 || value > pData[playerid][bpMaterials])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(pData[playerid][bpMaterials] + value > GetPlayerCapacity(CAPACITY_MATERIALS))
				    {
				        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i materials. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pMaterials], GetPlayerCapacity(CAPACITY_MATERIALS));
					}

				    pData[playerid][pMaterials] += value;
				    pData[playerid][bpMaterials] -= value;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", pData[playerid][pMaterials], pData[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    SM(playerid, COLOR_AQUA, "** You have taken %i materials from your backpack.", value);
	   			}
				else if(!strcmp(option, "pot", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [withdraw] [pot] [amount]");
					}
					if(value < 1 || value > pData[playerid][bpPot])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(pData[playerid][pPot] + value > GetPlayerCapacity(CAPACITY_WEED))
				    {
				        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i pot. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pPot], GetPlayerCapacity(CAPACITY_WEED));
					}

				    pData[playerid][pPot] += value;
				    pData[playerid][bpPot] -= value;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", pData[playerid][pPot], pData[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    SM(playerid, COLOR_AQUA, "** You have taken %ig of pot from your backpack stash.", value);
	   			}
	   			else if(!strcmp(option, "crack", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [withdraw] [Crack] [amount]");
					}
					if(value < 1 || value > pData[playerid][bpCrack])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(pData[playerid][pCrack] + value > GetPlayerCapacity(CAPACITY_COCAINE))
				    {
				        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i Crack. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pCrack], GetPlayerCapacity(CAPACITY_COCAINE));
					}

				    pData[playerid][pCrack] += value;
				    pData[playerid][bpCrack] -= value;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", pData[playerid][pCrack], pData[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    SM(playerid, COLOR_AQUA, "** You have taken %ig of Crack from your backpack.", value);
	   			}
	   			else if(!strcmp(option, "meth", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [withdraw] [meth] [amount]");
					}
					if(value < 1 || value > pData[playerid][bpMeth])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(pData[playerid][bpMeth] + value > GetPlayerCapacity(CAPACITY_METH))
				    {
				        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i meth. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pMeth], GetPlayerCapacity(CAPACITY_METH));
					}

				    pData[playerid][pMeth] += value;
				    pData[playerid][bpMeth] -= value;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", pData[playerid][pMeth], pData[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    SM(playerid, COLOR_AQUA, "** You have taken %ig of meth from your backpack.", value);
	   			}
	   			else if(!strcmp(option, "painkillers", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [withdraw] [painkillers] [amount]");
					}
					if(value < 1 || value > pData[playerid][bpPainkillers])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(pData[playerid][pPainkillers] + value > GetPlayerCapacity(CAPACITY_PAINKILLERS))
				    {
				        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i painkillers. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pPainkillers], GetPlayerCapacity(CAPACITY_PAINKILLERS));
					}

				    pData[playerid][pPainkillers] += value;
				    pData[playerid][bpPainkillers] -= value;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", pData[playerid][pPainkillers], pData[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    SM(playerid, COLOR_AQUA, "** You have taken %i painkillers from your backpack stash.", value);
	   			}
	   			else if(!strcmp(option, "weapon", true))
	   			{
	   			    new slots = GetBackpackCapacity(playerid, STASH_CAPACITY_WEAPONS);

	   			    if(sscanf(param, "i", value))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Usage: /backpack [withdraw] [weapon] [slot (1-%i)]", slots);
					}
					if(!(1 <= value <= slots))
					{
					    return SCM(playerid, COLOR_SYNTAX, "Invalid slot, or the slot specified is locked.");
	   			    }
	   			    if(!pData[playerid][bpWeapons][value-1])
	   			    {
	   			        return SCM(playerid, COLOR_SYNTAX, "The slot specified contains no weapon which you can take.");
					}

					GiveWeapon(playerid, pData[playerid][bpWeapons][value-1]);
					SM(playerid, COLOR_AQUA, "** You have taken a %s from slot %i of your backpack.", GetWeaponNameEx(pData[playerid][bpWeapons][value-1]), value);

					pData[playerid][bpWeapons][value-1] = 0;
				}
	   			else if(!strcmp(option, "hpammo", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [withdraw] [hpammo] [amount]");
					}
					if(value < 1 || value > pData[playerid][bpHPAmmo])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(pData[playerid][pHPAmmo] + value > GetPlayerCapacity(CAPACITY_HPAMMO))
				    {
				        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i HP ammo. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pHPAmmo], GetPlayerCapacity(CAPACITY_HPAMMO));
					}

				    SetWeaponAmmo(playerid, AMMO_HP, pData[playerid][pHPAmmo] + value);
				    pData[playerid][bpHPAmmo] -= value;

				    SM(playerid, COLOR_AQUA, "** You have taken %i rounds of hollow point ammo from your backpack.", value);
	   			}
	   			else if(!strcmp(option, "poisonammo", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [withdraw] [poisonammo] [amount]");
					}
					if(value < 1 || value > pData[playerid][bpPoisonAmmo])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(pData[playerid][pPoisonAmmo] + value > GetPlayerCapacity(CAPACITY_POISONAMMO))
				    {
				        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i poison ammo. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pPoisonAmmo], GetPlayerCapacity(CAPACITY_POISONAMMO));
					}

				    SetWeaponAmmo(playerid, AMMO_POISON, pData[playerid][pPoisonAmmo] + value);
				    pData[playerid][bpPoisonAmmo] -= value;

				    SM(playerid, COLOR_AQUA, "** You have taken %i rounds of poison tip ammo from your backpack.", value);
	   			}
	   			else if(!strcmp(option, "fmjammo", true))
				{
	       			if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [withdraw] [fmjammo] [amount]");
					}
					if(value < 1 || value > pData[playerid][bpFMJAmmo])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(pData[playerid][pFMJAmmo] + value > GetPlayerCapacity(CAPACITY_FMJAMMO))
				    {
				        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i FMJ ammo. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pFMJAmmo], GetPlayerCapacity(CAPACITY_FMJAMMO));
					}

				    SetWeaponAmmo(playerid, AMMO_FMJ, pData[playerid][pFMJAmmo] + value);
				    pData[playerid][bpFMJAmmo] -= value;

				    SM(playerid, COLOR_AQUA, "** You have taken %i rounds of full metal jacket ammo from your backpack stash.", value);
	   			}
			}
		}
		else
		{
	 		return SCM(playerid, COLOR_SYNTAX, "You must be wearing your backpack to use these commands.");
	 	}
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "You are not in possession of a backpack.");
	}
	return 1;
}

CMD:vstash(playerid, params[])
{
	new vehicleid = GetNearbyVehicle(playerid);

	if(vehicleid != INVALID_VEHICLE_ID && IsVehicleOwner(playerid, vehicleid))
	{
	    new option[14], param[32];

		if(!VehicleInfo[vehicleid][vTrunk])
		{
		    return SCM(playerid, COLOR_SYNTAX, "This vehicle has no trunk installed. /upgradevehicle to purchase one.");
	    }
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't use this command from within the vehicle.");
		}
		if(sscanf(params, "s[14]S()[32]", option, param))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [balance | deposit | withdraw]");
	    }
	    if(!strcmp(option, "balance", true))
	    {
	        new count;

	        for(new i = 0; i < 3; i ++)
	        {
	            if(VehicleInfo[vehicleid][vWeapons][i])
	            {
	                count++;
	            }
	        }

	        SCM(playerid, SERVER_COLOR, "Stash Balance:");
	        SM(playerid, COLOR_GREY2, "Cash: $%i/$%i", VehicleInfo[vehicleid][vCash], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_CASH));
			SM(playerid, COLOR_GREY2, "Materials: %i/%i | Weapons: %i/%i", VehicleInfo[vehicleid][vMaterials], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_MATERIALS), count, GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEAPONS));
	        SM(playerid, COLOR_GREY2, "Pot: %i/%i grams | Crack: %i/%i grams", VehicleInfo[vehicleid][vPot], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEED), VehicleInfo[vehicleid][vCrack], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_COCAINE));
	        SM(playerid, COLOR_GREY2, "Meth: %i/%i grams | Painkillers: %i/%i pills", VehicleInfo[vehicleid][vMeth], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_METH), VehicleInfo[vehicleid][vPainkillers], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_PAINKILLERS));
            SCM(playerid, SERVER_COLOR, "Stash Ammunition:");
			SM(playerid, COLOR_GREY2, "HP Ammo: %i/%i | Poison Ammo: %i/%i", VehicleInfo[vehicleid][vHPAmmo], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_HPAMMO), VehicleInfo[vehicleid][vPoisonAmmo], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_POISONAMMO));
            SM(playerid, COLOR_GREY2, "FMJ Ammo: %i/%i", VehicleInfo[vehicleid][vFMJAmmo], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_FMJAMMO));

			if(count > 0)
			{
				SCM(playerid, SERVER_COLOR, "Stash Weapons:");

            	for(new i = 0; i < 3; i ++)
	            {
    	            if(VehicleInfo[vehicleid][vWeapons][i])
	    	        {
	        	        SM(playerid, COLOR_GREY2, "[%i] Weapon: %s", i + 1, GetWeaponNameEx(VehicleInfo[vehicleid][vWeapons][i]));
					}
				}
	        }
		}
		else if(!strcmp(option, "deposit", true))
	    {
	        new value;

	        if(sscanf(param, "s[14]S()[32]", option, param))
	        {
	            SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [deposit] [option]");
	            SCM(playerid, COLOR_WHITE, "Available options: Cash, Materials, Pot, Crack, Meth, Painkillers, Weapon");
	            SCM(playerid, COLOR_WHITE, "Available options: HPAmmo, PoisonAmmo, FMJAmmo");
	            return 1;
	        }
	        if(!strcmp(option, "cash", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [deposit] [cash] [amount]");
				}
				if(value < 1 || value > pData[playerid][pCash])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(VehicleInfo[vehicleid][vCash] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_CASH))
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your vehicle's stash can only hold up to $%i at its level.", GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_CASH));
			    }

			    GivePlayerCash(playerid, -value);
			    VehicleInfo[vehicleid][vCash] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET cash = %i WHERE id = %i", VehicleInfo[vehicleid][vCash], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored $%i in your vehicle stash.", value);
			}
			else if(!strcmp(option, "materials", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [deposit] [materials] [amount]");
				}
				if(value < 1 || value > pData[playerid][pMaterials])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(VehicleInfo[vehicleid][vMaterials] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_MATERIALS))
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your vehicle's stash can only hold up to %i materials at its level.", GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_MATERIALS));
			    }

			    pData[playerid][pMaterials] -= value;
			    VehicleInfo[vehicleid][vMaterials] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET materials = %i WHERE id = %i", VehicleInfo[vehicleid][vMaterials], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", pData[playerid][pMaterials], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored %i materials in your vehicle stash.", value);
   			}
			else if(!strcmp(option, "pot", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [deposit] [pot] [amount]");
				}
				if(value < 1 || value > pData[playerid][pPot])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(VehicleInfo[vehicleid][vPot] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEED))
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your vehicle's stash can only hold up to %i grams of pot at its level.", GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEED));
			    }

			    pData[playerid][pPot] -= value;
			    VehicleInfo[vehicleid][vPot] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET pot = %i WHERE id = %i", VehicleInfo[vehicleid][vPot], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", pData[playerid][pPot], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored %ig of pot in your vehicle stash.", value);
   			}
   			else if(!strcmp(option, "crack", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [deposit] [Crack] [amount]");
				}
				if(value < 1 || value > pData[playerid][pCrack])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(VehicleInfo[vehicleid][vCrack] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_COCAINE))
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your vehicle's stash can only hold up to %i grams of Crack at its level.", GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_COCAINE));
			    }

			    pData[playerid][pCrack] -= value;
			    VehicleInfo[vehicleid][vCrack] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET crack = %i WHERE id = %i", VehicleInfo[vehicleid][vCrack], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", pData[playerid][pCrack], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored %ig of Crack in your vehicle stash.", value);
   			}
   			else if(!strcmp(option, "meth", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [deposit] [meth] [amount]");
				}
				if(value < 1 || value > pData[playerid][pMeth])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(VehicleInfo[vehicleid][vMeth] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_METH))
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your vehicle's stash can only hold up to %i grams of meth at its level.", GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_METH));
			    }

			    pData[playerid][pMeth] -= value;
			    VehicleInfo[vehicleid][vMeth] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET meth = %i WHERE id = %i", VehicleInfo[vehicleid][vMeth], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", pData[playerid][pMeth], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored %ig of meth in your vehicle stash.", value);
   			}
   			else if(!strcmp(option, "painkillers", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [deposit] [painkillers] [amount]");
				}
				if(value < 1 || value > pData[playerid][pPainkillers])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(VehicleInfo[vehicleid][vPainkillers] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_PAINKILLERS))
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your vehicle's stash can only hold up to %i painkillers at its level.", GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_PAINKILLERS));
			    }

			    pData[playerid][pPainkillers] -= value;
			    VehicleInfo[vehicleid][vPainkillers] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET painkillers = %i WHERE id = %i", VehicleInfo[vehicleid][vPainkillers], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", pData[playerid][pPainkillers], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored %i painkillers in your vehicle stash.", value);
   			}
   			else if(!strcmp(option, "weapon", true))
   			{
   			    new weaponid;

   			    if(sscanf(param, "i", weaponid))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [deposit] [weapon] [weaponid] (/guninv for weapon IDs)");
				}
				if(!(1 <= weaponid <= 46) || pData[playerid][pWeapons][weaponSlotIDs[weaponid]] != weaponid)
				{
				    return SCM(playerid, COLOR_SYNTAX, "You don't have that weapon. /guninv for a list of your weapons.");
				}
				if(GetHealth(playerid) < 60)
				{
				    return SCM(playerid, COLOR_SYNTAX, "You can't store weapons as your health is below 60.");
				}

				for(new i = 0; i < GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEAPONS); i ++)
				{
					if(!VehicleInfo[vehicleid][vWeapons][i])
   				    {
						VehicleInfo[vehicleid][vWeapons][i] = weaponid;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET weapon_%i = %i WHERE id = %i", i + 1, VehicleInfo[vehicleid][vWeapons][i], VehicleInfo[vehicleid][vID]);
						mysql_tquery(connectionID, queryBuffer);

						RemovePlayerWeapon(playerid, weaponid);
						SM(playerid, COLOR_AQUA, "** You have stored a %s in slot %i of your vehicle stash.", GetWeaponNameEx(VehicleInfo[vehicleid][vWeapons][i]), i + 1);
						return 1;
					}
				}

				SCM(playerid, COLOR_SYNTAX, "This vehicle has no more slots available for weapons.");
			}
            else if(!strcmp(option, "hpammo", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [deposit] [hpammo] [amount]");
				}
				if(value < 1 || value > pData[playerid][pHPAmmo])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(VehicleInfo[vehicleid][vHPAmmo] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_HPAMMO))
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your vehicle's stash can only hold up to %i HP ammo at its level.", GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_HPAMMO));
			    }

			    SetWeaponAmmo(playerid, AMMO_HP, pData[playerid][pHPAmmo] - value);
			    VehicleInfo[vehicleid][vHPAmmo] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET hpammo = %i WHERE id = %i", VehicleInfo[vehicleid][vHPAmmo], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored %i rounds of hollow point ammo in your vehicle stash.", value);
   			}
   			else if(!strcmp(option, "poisonammo", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [deposit] [poisonammo] [amount]");
				}
				if(value < 1 || value > pData[playerid][pPoisonAmmo])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(VehicleInfo[vehicleid][vPoisonAmmo] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_POISONAMMO))
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your vehicle's stash can only hold up to %i  at its level.", GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_POISONAMMO));
			    }

			    SetWeaponAmmo(playerid, AMMO_POISON, pData[playerid][pPoisonAmmo] - value);
			    VehicleInfo[vehicleid][vPoisonAmmo] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET poisonammo = %i WHERE id = %i", VehicleInfo[vehicleid][vPoisonAmmo], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored %i rounds of poison tip ammo in your vehicle stash.", value);
   			}
   			else if(!strcmp(option, "fmjammo", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [deposit] [fmjammo] [amount]");
				}
				if(value < 1 || value > pData[playerid][pFMJAmmo])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(VehicleInfo[vehicleid][vFMJAmmo] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_FMJAMMO))
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your vehicle's stash can only hold up to %i FMJ ammo at its level.", GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_FMJAMMO));
			    }

			    SetWeaponAmmo(playerid, AMMO_FMJ, pData[playerid][pFMJAmmo] - value);
			    VehicleInfo[vehicleid][vFMJAmmo] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET fmjammo = %i WHERE id = %i", VehicleInfo[vehicleid][vFMJAmmo], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored %i rounds of full metal jacket ammo in your vehicle stash.", value);
   			}
		}
		else if(!strcmp(option, "withdraw", true))
	    {
	        new value;

	        if(sscanf(param, "s[14]S()[32]", option, param))
	        {
	            SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [withdraw] [option]");
	            SCM(playerid, COLOR_WHITE, "Available options: Cash, Pot, Crack, Meth, Painkillers, Weapon");
	            SCM(playerid, COLOR_WHITE, "Available options: HPAmmo, PoisonAmmo, FMJAmmo");
	            return 1;
	        }
	        if(!strcmp(option, "cash", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [withdraw] [cash] [amount]");
				}
				if(value < 1 || value > VehicleInfo[vehicleid][vCash])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }

			    GivePlayerCash(playerid, value);
			    VehicleInfo[vehicleid][vCash] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET cash = %i WHERE id = %i", VehicleInfo[vehicleid][vCash], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken $%i from your vehicle stash.", value);
			}
			else if(!strcmp(option, "materials", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [withdraw] [materials] [amount]");
				}
				if(value < 1 || value > VehicleInfo[vehicleid][vMaterials])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(pData[playerid][pMaterials] + value > GetPlayerCapacity(CAPACITY_MATERIALS))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i materials. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pMaterials], GetPlayerCapacity(CAPACITY_MATERIALS));
				}

			    pData[playerid][pMaterials] += value;
			    VehicleInfo[vehicleid][vMaterials] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET materials = %i WHERE id = %i", VehicleInfo[vehicleid][vMaterials], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", pData[playerid][pMaterials], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken %i materials from your vehicle stash.", value);
   			}
			else if(!strcmp(option, "pot", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [withdraw] [pot] [amount]");
				}
				if(value < 1 || value > VehicleInfo[vehicleid][vPot])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(pData[playerid][pPot] + value > GetPlayerCapacity(CAPACITY_WEED))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i pot. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pPot], GetPlayerCapacity(CAPACITY_WEED));
				}

			    pData[playerid][pPot] += value;
			    VehicleInfo[vehicleid][vPot] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET pot = %i WHERE id = %i", VehicleInfo[vehicleid][vPot], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", pData[playerid][pPot], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken %ig of pot from your vehicle stash.", value);
   			}
   			else if(!strcmp(option, "crack", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [withdraw] [Crack] [amount]");
				}
				if(value < 1 || value > VehicleInfo[vehicleid][vCrack])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(pData[playerid][pCrack] + value > GetPlayerCapacity(CAPACITY_COCAINE))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i Crack. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pCrack], GetPlayerCapacity(CAPACITY_COCAINE));
				}

			    pData[playerid][pCrack] += value;
			    VehicleInfo[vehicleid][vCrack] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET crack = %i WHERE id = %i", VehicleInfo[vehicleid][vCrack], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", pData[playerid][pCrack], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken %ig of Crack from your vehicle stash.", value);
   			}
   			else if(!strcmp(option, "meth", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [withdraw] [meth] [amount]");
				}
				if(value < 1 || value > VehicleInfo[vehicleid][vMeth])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(pData[playerid][pMeth] + value > GetPlayerCapacity(CAPACITY_METH))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i meth. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pMeth], GetPlayerCapacity(CAPACITY_METH));
				}

			    pData[playerid][pMeth] += value;
			    VehicleInfo[vehicleid][vMeth] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET meth = %i WHERE id = %i", VehicleInfo[vehicleid][vMeth], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", pData[playerid][pMeth], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken %ig of meth from your vehicle stash.", value);
   			}
   			else if(!strcmp(option, "painkillers", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [withdraw] [painkillers] [amount]");
				}
				if(value < 1 || value > VehicleInfo[vehicleid][vPainkillers])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(pData[playerid][pPainkillers] + value > GetPlayerCapacity(CAPACITY_PAINKILLERS))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i painkillers. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pPainkillers], GetPlayerCapacity(CAPACITY_PAINKILLERS));
				}

			    pData[playerid][pPainkillers] += value;
			    VehicleInfo[vehicleid][vPainkillers] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET painkillers = %i WHERE id = %i", VehicleInfo[vehicleid][vPainkillers], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", pData[playerid][pPainkillers], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken %i painkillers from your vehicle stash.", value);
   			}
   			else if(!strcmp(option, "weapon", true))
   			{
   			    new slots = GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEAPONS);

   			    if(sscanf(param, "i", value))
			    {
			        return SM(playerid, COLOR_SYNTAX, "Usage: /vstash [withdraw] [weapon] [slot (1-%i)]", slots);
				}
				if(!(1 <= value <= slots))
				{
				    return SCM(playerid, COLOR_SYNTAX, "Invalid slot, or the slot specified is locked.");
   			    }
   			    if(!VehicleInfo[vehicleid][vWeapons][value-1])
   			    {
   			        return SCM(playerid, COLOR_SYNTAX, "The slot specified contains no weapon which you can take.");
				}

				GiveWeapon(playerid, VehicleInfo[vehicleid][vWeapons][value-1]);
				SM(playerid, COLOR_AQUA, "** You have taken a %s from slot %i of your vehicle stash.", GetWeaponNameEx(VehicleInfo[vehicleid][vWeapons][value-1]), value);

				VehicleInfo[vehicleid][vWeapons][value-1] = 0;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET weapon_%i = 0 WHERE id = %i", value, VehicleInfo[vehicleid][vID]);
				mysql_tquery(connectionID, queryBuffer);
			}
   			else if(!strcmp(option, "hpammo", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [withdraw] [hpammo] [amount]");
				}
				if(value < 1 || value > VehicleInfo[vehicleid][vHPAmmo])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(pData[playerid][pHPAmmo] + value > GetPlayerCapacity(CAPACITY_HPAMMO))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i HP ammo. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pHPAmmo], GetPlayerCapacity(CAPACITY_HPAMMO));
				}

			    SetWeaponAmmo(playerid, AMMO_HP, pData[playerid][pHPAmmo] + value);
			    VehicleInfo[vehicleid][vHPAmmo] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET hpammo = %i WHERE id = %i", VehicleInfo[vehicleid][vHPAmmo], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken %i rounds of hollow point ammo from your vehicle stash.", value);
   			}
   			else if(!strcmp(option, "poisonammo", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [withdraw] [poisonammo] [amount]");
				}
				if(value < 1 || value > VehicleInfo[vehicleid][vPoisonAmmo])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(pData[playerid][pPoisonAmmo] + value > GetPlayerCapacity(CAPACITY_POISONAMMO))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i poison ammo. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pPoisonAmmo], GetPlayerCapacity(CAPACITY_POISONAMMO));
				}

			    SetWeaponAmmo(playerid, AMMO_POISON, pData[playerid][pPoisonAmmo] + value);
			    VehicleInfo[vehicleid][vPoisonAmmo] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET poisonammo = %i WHERE id = %i", VehicleInfo[vehicleid][vPoisonAmmo], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken %i rounds of poison tip ammo from your vehicle stash.", value);
   			}
   			else if(!strcmp(option, "fmjammo", true))
			{
       			if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [withdraw] [fmjammo] [amount]");
				}
				if(value < 1 || value > VehicleInfo[vehicleid][vFMJAmmo])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(pData[playerid][pFMJAmmo] + value > GetPlayerCapacity(CAPACITY_FMJAMMO))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i FMJ ammo. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pFMJAmmo], GetPlayerCapacity(CAPACITY_FMJAMMO));
				}

			    SetWeaponAmmo(playerid, AMMO_FMJ, pData[playerid][pFMJAmmo] + value);
			    VehicleInfo[vehicleid][vFMJAmmo] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET fmjammo = %i WHERE id = %i", VehicleInfo[vehicleid][vFMJAmmo], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken %i rounds of full metal jacket ammo from your vehicle stash.", value);
   			}
		}
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "You are not in range of any vehicle of yours.");
	}

	return 1;
}

CMD:unmod(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);

	if((FactionInfo[pData[playerid][pFaction]][fType] != FACTION_MECHANIC))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be a mechanic to use this command.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	{
		return SCM(playerid, COLOR_SYNTAX, "The engine needs to be shut down before you repair this vehicle.");
	}
	if(!vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not sitting inside any vehicle.");
	}
	if(!IsVehicleOwner(playerid, vehicleid) && pData[playerid][pVehicleKeys] != vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as this vehicle doesn't belong to you.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /unmod [color | paintjob | mods | neon]");
	}

	if(!strcmp(params, "color", true))
	{
	    VehicleInfo[vehicleid][vColor1] = 0;
	    VehicleInfo[vehicleid][vColor2] = 0;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET color1 = 0, color2 = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ChangeVehicleColor(vehicleid, 0, 0);
	    SCM(playerid, COLOR_WHITE, "** Vehicle color has been set back to default.");
	}
	else if(!strcmp(params, "paintjob", true))
	{
	    VehicleInfo[vehicleid][vPaintjob] = -1;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET paintjob = -1 WHERE id = %i", VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ChangeVehiclePaintjob(vehicleid, -1);
	    SCM(playerid, COLOR_WHITE, "** Vehicle paintjob has been set back to default.");
	}
	else if(!strcmp(params, "mods", true))
	{
	    for(new i = 0; i < 14; i ++)
	    {
	        if(VehicleInfo[vehicleid][vMods][i] >= 1000)
	        {
	            RemoveVehicleComponent(vehicleid, VehicleInfo[vehicleid][vMods][i]);
	        }
	    }

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET mod_1 = 0, mod_2 = 0, mod_3 = 0, mod_4 = 0, mod_5 = 0, mod_6 = 0, mod_7 = 0, mod_8 = 0, mod_9 = 0, mod_10 = 0, mod_11 = 0, mod_12 = 0, mod_13 = 0, mod_14 = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

	    SCM(playerid, COLOR_WHITE, "** All vehicle modifications have been removed.");
	}
	else if(!strcmp(params, "neon", true))
	{
	    if(!VehicleInfo[vehicleid][vNeon])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This vehicle has no neon which you can remove.");
		}

		if(VehicleInfo[vehicleid][vNeonEnabled])
		{
		    DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][0]);
		    DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][1]);
		}

		VehicleInfo[vehicleid][vNeon] = 0;
		VehicleInfo[vehicleid][vNeonEnabled] = 0;
		VehicleInfo[vehicleid][vObjects][0] = INVALID_OBJECT_ID;
		VehicleInfo[vehicleid][vObjects][1] = INVALID_OBJECT_ID;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET neon = 0, neonenabled = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

	    SCM(playerid, COLOR_WHITE, "** Neon has been removed from vehicle.");
	}

	return 1;
}

CMD:colorcar(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), color1, color2;
	if((FactionInfo[pData[playerid][pFaction]][fType] != FACTION_MECHANIC))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be a mechanic to use this command.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	{
		return SCM(playerid, COLOR_SYNTAX, "The engine needs to be shut down before you repair this vehicle.");
	}
	if(sscanf(params, "ii", color1, color2))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /colorcar [color1] [color2]");
	}
	if(!vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not sitting inside any vehicle.");
	}
	if(!(0 <= color1 <= 255) || !(0 <= color2 <= 255))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The color specified must range between 0 and 255.");
	}

    if(VehicleInfo[vehicleid][vOwnerID] > 0 || VehicleInfo[vehicleid][vGang] >= 0)
	{
	    VehicleInfo[vehicleid][vColor1] = color1;
	    VehicleInfo[vehicleid][vColor2] = color2;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET color1 = %i, color2 = %i WHERE id = %i", color1, color2, VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);
	}

	ChangeVehicleColor(vehicleid, color1, color2);
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s uses their spraycan to spray their vehicle a different color.", GetRPName(playerid));

	PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
	return 1;
}

CMD:paintcar(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), paintjobid;

	if((FactionInfo[pData[playerid][pFaction]][fType] != FACTION_MECHANIC))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be a mechanic to use this command.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	{
		return SCM(playerid, COLOR_SYNTAX, "The engine needs to be shut down before you repair this vehicle.");
	}
	if(sscanf(params, "i", paintjobid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /paintcar [paintjobid (-1 = none)]");
	}
	if(!vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not sitting inside any vehicle.");
	}
	if(!(-1 <= paintjobid <= 5))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The paintjob specified must range between -1 and 5.");
	}
	if(paintjobid == -1) paintjobid = 3;

	if(VehicleInfo[vehicleid][vOwnerID] > 0 || VehicleInfo[vehicleid][vGang] >= 0)
	{
		VehicleInfo[vehicleid][vPaintjob] = paintjobid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET paintjob = %i WHERE id = %i", paintjobid, VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s uses their spraycan to spray their vehicle a different color.", GetRPName(playerid));
	ChangeVehiclePaintjob(vehicleid, paintjobid);
	PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);

	return 1;
}

CMD:sellcar(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), targetid, amount;

	if(!vehicleid || !IsVehicleOwner(playerid, vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside any vehicle of yours.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /sellcar [playerid] [amount]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't sell to yourself.");
	}
	if(amount < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must specify an amount above zero.");
	}

	pData[targetid][pCarOffer] = playerid;
	pData[targetid][pCarOffered] = vehicleid;
	pData[targetid][pCarPrice] = amount;

	SM(targetid, COLOR_AQUA, "** %s offered you their %s for $%i (/accept vehicle).", GetRPName(playerid), GetVehicleName(vehicleid), amount);
	SM(playerid, COLOR_AQUA, "** You have offered %s to buy your %s for $%i.", GetRPName(targetid), GetVehicleName(vehicleid), amount);
	return 1;
}

/*CMD:sellmycar(playerid, params[])
{
 	new vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid || !IsVehicleOwner(playerid, vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside any vehicle of yours.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 8.0, 542.0433, -1293.5909, 17.2422))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the Grotti car dealership.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /sellmycar [confirm]");
	    SM(playerid, COLOR_WHITE, "This command permanently deletes your vehicle. You will receive $%i back.", percent(VehicleInfo[vehicleid][vPrice], 75));
	    return 1;
	}

	GivePlayerCash(playerid, percent(VehicleInfo[vehicleid][vPrice], 75));

	SM(playerid, COLOR_YELLOW, "You have sold your %s to the dealership and received $%i back.", GetVehicleName(vehicleid), percent(VehicleInfo[vehicleid][vPrice], 75));
    Log_Write("log_property", "%s (uid: %i) sold their %s (id: %i) to the dealership for $%i", GetPlayerNameEx(playerid), pData[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID], percent(VehicleInfo[vehicleid][vPrice], 75));

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM vehicles WHERE id = %i", VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	DespawnVehicle(vehicleid, false);

	return 1;
}*/

CMD:chop(playerid, params[])
{
	if(pData[playerid][pJob] == JOB_LUMBERJACK)
	{
	    if(IsAtChopPlace(playerid))
    	{
		    if(lumberman[playerid] == true) return SendClientMessage(playerid, COLOR_GREY, " You are already on Duty as a Lumber Man!");
			lumberman[playerid] = true;
   			//SetPlayerSkin(playerid, 16);
		    SetPlayerAttachedObject(playerid, 8, 341, 6,-0.240999, 0.004999, 0.053000,0.0,0.0,0.0,1.5,1.5,1.46);
		    SendClientMessage(playerid, COLOR_YELLOW,"HINT:Press 'n' of your button to begin cutting");
		    return 1;
		}
		else SendClientMessage(playerid, COLOR_WHITE, "You are not at the  Chopping Point");
	}
	return 1;
}

CMD:mine(playerid, params[])
{
	if(!PlayerHasJob(playerid, JOB_MINER))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a Miner.");
	}
	if(pData[playerid][pMiningTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are mining already. Wait until you are done.");
	}
	if(pData[playerid][pMiningRock] > 0 && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need to drop off your current rock first.");
	}
	if(!IsPlayerInMiningArea(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the mining area.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be onfoot in order to use this command.");
	}

    GameTextForPlayer(playerid, "~w~Mining...", 6000, 3);
    ApplyAnimation(playerid, "BASEBALL", "BAT_4", 4.1, 1, 0, 0, 0, 0, 1);
    MiningProgress(playerid);

	DisablePlayerCheckpoint(playerid);
	SetPlayerAttachedObject(playerid, 9, 337, 6);

	pData[playerid][pMiningTime] = 6;
	return 1;
}

forward MiningProgress(playerid);
public MiningProgress(playerid)
{
    SetPlayerProgressBarValue(playerid, ProgressfreeBar[playerid][0], 16.6);
    ShowPlayerProgressBar(playerid, PlayerBar:ProgressfreeBar[playerid][0]);
    SetTimerEx("MiningProgress2", 1000, false, "i", playerid);
}

forward MiningProgress2(playerid);
public MiningProgress2(playerid)
{
    SetPlayerProgressBarValue(playerid, ProgressfreeBar[playerid][0], 32.2);
    ShowPlayerProgressBar(playerid, PlayerBar:ProgressfreeBar[playerid][0]);
    SetTimerEx("MiningProgress3", 1000, false, "i", playerid);
}

forward MiningProgress3(playerid);
public MiningProgress3(playerid)
{
    SetPlayerProgressBarValue(playerid, ProgressfreeBar[playerid][0], 49.8);
    ShowPlayerProgressBar(playerid, PlayerBar:ProgressfreeBar[playerid][0]);
    SetTimerEx("MiningProgress4", 1000, false, "i", playerid);
}

forward MiningProgress4(playerid);
public MiningProgress4(playerid)
{
    SetPlayerProgressBarValue(playerid, ProgressfreeBar[playerid][0], 66.4);
    ShowPlayerProgressBar(playerid, PlayerBar:ProgressfreeBar[playerid][0]);
    SetTimerEx("MiningProgress5", 1000, false, "i", playerid);
}

forward MiningProgress5(playerid);
public MiningProgress5(playerid)
{
    SetPlayerProgressBarValue(playerid, ProgressfreeBar[playerid][0], 83.0);
    ShowPlayerProgressBar(playerid, PlayerBar:ProgressfreeBar[playerid][0]);
    SetTimerEx("MiningProgress6", 1000, false, "i", playerid);
}

forward MiningProgress6(playerid);
public MiningProgress6(playerid)
{
    SetPlayerProgressBarValue(playerid, ProgressfreeBar[playerid][0], 100.0);
    ShowPlayerProgressBar(playerid, PlayerBar:ProgressfreeBar[playerid][0]);
    SetTimerEx("MiningProgress7", 1000, false, "i", playerid);
}

forward MiningProgress7(playerid);
public MiningProgress7(playerid)
{
    //SetPlayerProgressBarValue(playerid, ProgressfreeBar[playerid][0], 100.0);
    HidePlayerProgressBar(playerid, PlayerBar:ProgressfreeBar[playerid][0]);
    //SetTimerEx("MiningProgress6", 1000, false, "i", playerid);
}
//
forward LootBoxProgress(playerid);
public LootBoxProgress(playerid)
{
    SetPlayerProgressBarValue(playerid, ProgressfreeBar[playerid][0], 20.0);
    ShowPlayerProgressBar(playerid, PlayerBar:ProgressfreeBar[playerid][0]);
    SetTimerEx("LootBoxProgress2", 1000, false, "i", playerid);
}

forward LootBoxProgress2(playerid);
public LootBoxProgress2(playerid)
{
    SetPlayerProgressBarValue(playerid, ProgressfreeBar[playerid][0], 40.0);
    ShowPlayerProgressBar(playerid, PlayerBar:ProgressfreeBar[playerid][0]);
    SetTimerEx("LootBoxProgress3", 1000, false, "i", playerid);
}

forward LootBoxProgress3(playerid);
public LootBoxProgress3(playerid)
{
    SetPlayerProgressBarValue(playerid, ProgressfreeBar[playerid][0], 60.0);
    ShowPlayerProgressBar(playerid, PlayerBar:ProgressfreeBar[playerid][0]);
    SetTimerEx("LootBoxProgress4", 1000, false, "i", playerid);
}

forward LootBoxProgress4(playerid);
public LootBoxProgress4(playerid)
{
    SetPlayerProgressBarValue(playerid, ProgressfreeBar[playerid][0], 80.0);
    ShowPlayerProgressBar(playerid, PlayerBar:ProgressfreeBar[playerid][0]);
    SetTimerEx("LootBoxProgress5", 1000, false, "i", playerid);
}

forward LootBoxProgress5(playerid);
public LootBoxProgress5(playerid)
{
    SetPlayerProgressBarValue(playerid, ProgressfreeBar[playerid][0], 100.0);
    ShowPlayerProgressBar(playerid, PlayerBar:ProgressfreeBar[playerid][0]);
    SetTimerEx("LootBoxProgress6", 1000, false, "i", playerid);
}

forward LootBoxProgress6(playerid);
public LootBoxProgress6(playerid)
{
    HidePlayerProgressBar(playerid, PlayerBar:ProgressfreeBar[playerid][0]);
}

CMD:vip(playerid, params[])
{
	if(pData[playerid][pJailTime] > 0) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-jail.");
	if(!pData[playerid][pDonator])
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you don't have a VIP subscription.");
	}
	if(!enabledVip)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The VIP Chat is disabled by an administrator.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /(v)ip [vip chat]");
	}
    if(pData[playerid][pToggleVIP])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't speak in the VIP chat as you have it toggled.");
	}

	foreach(new i : Player)
	{
	    if(pData[i][pDonator] > 0 && !pData[i][pToggleVIP])
	    {
			SM(i, COLOR_VIP, "** %s{6a86b5} %s: %s **", GetDonatorRank(pData[playerid][pDonator]), GetRPName(playerid), params);
		}
	}

	return 1;
}
CMD:viplocker(playerid, params[])
{
	if(!pData[playerid][pDonator])
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you don't have a VIP subscription.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 6.0, 2556.2113, 1403.7037, 7699.7641))
	{
		return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You are not in range of the VIP.");
	}
 	if(pData[playerid][pDonator] == 1)
	{
		ShowPlayerDialog(playerid, DIALOG_VIPLOCKER, DIALOG_STYLE_LIST, "Bronze Locker", "Firstaid\nArmor\nKatana\nDeagle\nMP5", "Select", "Cancel");
	}
 	if(pData[playerid][pDonator] == 2)
	{
		ShowPlayerDialog(playerid, DIALOG_VIPLOCKER1, DIALOG_STYLE_LIST, "Silver Locker", "Firstaid\nArmor\nKatana\nDeagle\nMP5\nCountry Rifle\nRare Skins", "Select", "Cancel");
	}
	else if(pData[playerid][pDonator] == 3)
	{
		ShowPlayerDialog(playerid, DIALOG_VIPLOCKER2, DIALOG_STYLE_LIST, "Diamond Locker", "Firstaid\nAmor\nKatana\nDeagle\nMP5\nCountry Rifle\nAK-47\nM4\nSniper\nSpas\nRare Skins", "Select", "Cancel");
	}
	return 1;
}
CMD:vipcolor(playerid, params[])
{
    if(!pData[playerid][pDonator])
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you don't have a VIP subscription.");
	}

	if(!pData[playerid][pVIPColor])
	{
        pData[playerid][pVIPColor] = 1;
	    SCM(playerid, COLOR_AQUA, "** You have enabled the VIP nametag.");
	}
	else
	{

	    pData[playerid][pVIPColor] = 0;
	    SCM(playerid, COLOR_AQUA, "** You have disabled the VIP nametag.");
	}

	return 1;
}

CMD:vipinvite(playerid, params[])
{
	new targetid;

	if(!pData[playerid][pDonator])
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you don't have a VIP subscription.");
	}
	if((pData[playerid][pVIPTime] - gettime()) < 259200)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Your VIP subscription expires in less than 3 days. You can't do this now.");
	}

	if(sscanf(params, "u", targetid))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /vipinvite [playerid]");
	    SCM(playerid, COLOR_WHITE, "This command grants a temporary VIP subscription which lasts one hour to a player of your choice.");

	    if(pData[playerid][pVIPCooldown] > gettime()) {
			SM(playerid, COLOR_WHITE, "You can only use this command once every 24 hours. You have %i hours left until you can use it again.", (pData[playerid][pVIPCooldown] - gettime()) / 3600);
		} else {
		    SCM(playerid, COLOR_WHITE, "You can only use this command once every 24 hours. You currently have no cooldown for this command.");
		}

		return 1;
	}
	if(pData[playerid][pVIPCooldown] > gettime())
	{
	    return SM(playerid, COLOR_SYNTAX, "You have already used this command today. Please wait another %i hours.", (pData[playerid][pVIPCooldown] - gettime()) / 3600);
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(pData[targetid][pDonator])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player already has a VIP subscription.");
	}

	pData[targetid][pDonator] = 1;
	pData[targetid][pVIPTime] = gettime() + 3600;
	pData[playerid][pVIPCooldown] = gettime() + 86400;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vippackage = 1, viptime = 3600 WHERE uid = %i", pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vipcooldown = %i WHERE uid = %i", pData[playerid][pVIPCooldown], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(targetid, COLOR_AQUA, "** %s has given you a temporary one hour donator package.", GetRPName(playerid));
	SM(playerid, COLOR_AQUA, "** You have given %s a temporary one hour donator package.", GetRPName(targetid));

	Log_Write("log_vip", "%s Donator %s (uid: %i) has given %s (uid: %i) a temporary one hour package.", GetDonatorRank(pData[playerid][pDonator]), GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);
	return 1;
}

CMD:vipinfo(playerid, params[])
{
	new time = pData[playerid][pVIPTime] - gettime(), cooldown[24] = "{33CC33}No cooldown", string[32];

	if(!pData[playerid][pDonator])
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you don't have a VIP subscription.");
	}

	SCM(playerid, COLOR_LIGHTORANGE, "My Package:");

	if(1 <= time <= 3599)
	{
		format(string, sizeof(string), "{AA3333}%i minutes", time / 60);
	}
	else if(3600 <= time <= 86399)
	{
	    format(string, sizeof(string), ""SVRCLR"%i hours", time / 3600);
	}
	else
	{
	    if(time / 86400 <= 7)
		{
	        format(string, sizeof(string), "{FFD700}%i days", time / 86400);
	    }
		else
		{
		    format(string, sizeof(string), "{33CC33}%i days", time / 86400);
		}
	}

	if(pData[playerid][pVIPCooldown] > gettime())
	{
	    time = pData[playerid][pVIPCooldown] - gettime();

	    if(time > 3600) {
	        format(cooldown, sizeof(cooldown), "{F7A763}%i hours", time / 3600);
		} else {
			format(cooldown, sizeof(cooldown), "{F7A763}%i minutes", time / 60);
	    }
	}

	SM(playerid, COLOR_WHITE, "Package: {C2A2DA}%s Donator", GetDonatorRank(pData[playerid][pDonator]));
	SM(playerid, COLOR_WHITE, "Expires In: %s", string);
	SM(playerid, COLOR_WHITE, "Next Invite: %s", cooldown);
	return 1;
}
CMD:vipnumber(playerid, params[])
{
	new number;

	if(!pData[playerid][pDonator])
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you don't have a VIP subscription.");
	}
	if(sscanf(params, "i", number))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /vipnumber [phone number]");
	    SCM(playerid, COLOR_WHITE, "This command costs $100,000 and changes your phone number to your chosen one.");
	    return 1;
	}
	if(pData[playerid][pCash] < 100000)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need at least $100,000 for pay for this.");
	}
	if(number == 0 || number == 911 || number == 6397 || number == 6324 || number == 8294)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid number.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE phone = %i", number);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerBuyPhoneNumber", "ii", playerid, number);
	return 1;
}

CMD:setfare(playerid, params[])
{
	new amount;

	if(!PlayerHasJob(playerid, JOB_TAXIDRIVER))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a Taxi Driver.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setfare [amount]");
	}
	if(!(100 <= amount <= 2500))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The fare must range between $100 and $2500.");
	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 420 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 438)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in a taxi type vehicle.");
	}

	if(amount == 0)
	{
	    if(pData[playerid][pTaxiFare] == 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "The fare is already set to zero.");
	    }

	    pData[playerid][pTaxiFare] = 0;
	    SCM(playerid, COLOR_YELLOW, "** You have set the fare to $0 and went off duty.");
	}
	else
	{
	    if(pData[playerid][pTaxiFare] == amount)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "The fare is already set to this amount.");
	    }

	    pData[playerid][pTaxiFare] = amount;
	    SMA(COLOR_YELLOW, "** Taxi driver %s is now on duty, fare: $%i. /call 8294 for a ride.", GetRPName(playerid), amount);
	}

	return 1;
}

CMD:createfaction(playerid, params[])
{
	new type[12], name[48], type_id = -1;

    if(!pData[playerid][pFactionMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[12]s[48]", type, name))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /createfaction [type] [name]");
		SCM(playerid, COLOR_GREY2, "List of types: Police, Sheriff, Medic, News, Government, Hitman, Federal, Mechanic");
		return 1;
	}

	if(!strcmp(type, "police", true))
	{
	    type_id = FACTION_POLICE;
	}
	else if(!strcmp(type, "medic", true))
	{
	    type_id = FACTION_MEDIC;
	}
	else if(!strcmp(type, "news", true))
	{
	    type_id = FACTION_NEWS;
	}
	else if(!strcmp(type, "government", true))
	{
	    type_id = FACTION_GOVERNMENT;
	}
	else if(!strcmp(type, "hitman", true))
	{
	    type_id = FACTION_HITMAN;
	}
	else if(!strcmp(type, "federal", true))
	{
	    type_id = FACTION_FEDERAL;
	}
	else if(!strcmp(type, "mechanic", true))
	{
	    type_id = FACTION_MECHANIC;
	}
	else if(!strcmp(type, "doc", true))
	{
	    type_id = FACTION_DOC;
	}
	else if(!strcmp(type, "sheriff", true))
	{
	    type_id = FACTION_SHERIFF;
	}
	if(type_id == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
	}

	for(new i = 1; i < MAX_FACTIONS; i ++)
	{
	    if(!FactionInfo[i][fType])
	    {
	        SetupFaction(i, name, type_id);

	        SAM(COLOR_LIGHTRED, "AdmCmd: %s has created a {F7A763}%s faction named '%s'.", GetRPName(playerid), factionTypes[type_id], name);
	        SM(playerid, COLOR_WHITE, "** This faction's ID is %i. /editfaction to edit.", i);
	        return 1;
		}
	}

	return 1;
}

CMD:editfaction(playerid, params[])
{
	new factionid, option[12], param[48];

	if(!pData[playerid][pFactionMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[12]S()[48]", factionid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /editfaction [factionid] [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Name, Shortname, Type, Color, RankCount, RankName, Skin, Paycheck, Leader, Locker, TurfTokens");
		return 1;
	}
	if(!(1 <= factionid < MAX_FACTIONS) || FactionInfo[factionid][fType] == FACTION_NONE)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid faction.");
	}

	if(!strcmp(option, "name", true))
	{
	    if(isnull(param))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editfaction [factionid] [name] [text]");
		}

		strcpy(FactionInfo[factionid][fName], param, 48);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET name = '%e' WHERE id = %i", param, factionid);
		mysql_tquery(connectionID, queryBuffer);

		ReloadLockers(factionid);
		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the name of faction ID %i to '%s'.", GetRPName(playerid), factionid, param);
	}
	else if(!strcmp(option, "shortname", true))
	{
	    if(isnull(param) || strlen(param) > 24)
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editfaction [factionid] [shortname] [text]");
		}

		strcpy(FactionInfo[factionid][fShortName], param, 24);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET shortname = '%e' WHERE id = %i", param, factionid);
		mysql_tquery(connectionID, queryBuffer);

  		ReloadLockers(factionid);
		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set the short name of faction ID %i to '%s'.", GetRPName(playerid), factionid, param);
	}
	else if(!strcmp(option, "type", true))
	{
	    new type_id;

	    if(isnull(param))
	    {
	        SCM(playerid, COLOR_SYNTAX, "Usage: /editfaction [factionid] [type] [option]");
			SCM(playerid, COLOR_GREY2, "List of types: Police, Sheriff, Medic, News, Government, Hitman, Federal, Mechanic");
			return 1;
		}

		if(!strcmp(param, "police", true))
		{
		    type_id = FACTION_POLICE;
		}
		else if(!strcmp(param, "medic", true)) {
		    type_id = FACTION_MEDIC;
		} else if(!strcmp(param, "news", true)) {
		    type_id = FACTION_NEWS;
		} else if(!strcmp(param, "government", true)) {
		    type_id = FACTION_GOVERNMENT;
		} else if(!strcmp(param, "hitman", true)) {
		    type_id = FACTION_HITMAN;
		} else if(!strcmp(param, "federal", true)) {
		    type_id = FACTION_FEDERAL;
		} else if(!strcmp(param, "mechanic", true)) {
		    type_id = FACTION_MECHANIC;
		} else if(!strcmp(param, "doc", true)) {
		    type_id = FACTION_DOC;
		}
		else if(!strcmp(param, "sheriff", true))
		{
		    type_id = FACTION_SHERIFF;
		}
		
		if(type_id == -1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
		}

		FactionInfo[factionid][fType] = type_id;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET type = %i WHERE id = %i", type_id, factionid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the type of faction ID %i to %s.", GetRPName(playerid), factionid, factionTypes[type_id]);
	}
	else if(!strcmp(option, "color", true))
	{
	    new color;

	    if(sscanf(param, "h", color))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editfaction [factionid] [color] [0xRRGGBBAA]");
		}

		FactionInfo[factionid][fColor] = color & ~0xff;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET color = %i WHERE id = %i", FactionInfo[factionid][fColor], factionid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the {%06x}color{FF6347} of faction ID %i.", GetRPName(playerid), color >>> 8, factionid);
	}
	else if(!strcmp(option, "rankcount", true))
	{
	    new ranks;

	    if(sscanf(param, "i", ranks))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editfaction [factionid] [rankcount] [amount]");
		}
		if(!(1 <= ranks <= MAX_FACTION_RANKS))
		{
		    return SM(playerid, COLOR_SYNTAX, "The amount of ranks must range from 1 to %i.", MAX_FACTION_RANKS);
		}

		FactionInfo[factionid][fRankCount] = ranks;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET rankcount = %i WHERE id = %i", ranks, factionid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the rank count of faction ID %i to %i.", GetRPName(playerid), factionid, ranks);
	}
	else if(!strcmp(option, "rankname", true))
	{
	    new rankid, rank[32];

	    if(sscanf(param, "is[32]", rankid, rank))
	    {
	        SCM(playerid, SERVER_COLOR, "Rank Names:");

	        for(new i = 0; i < FactionInfo[factionid][fRankCount]; i ++)
	        {
	            if(isnull(FactionRanks[factionid][i]))
	            	SM(playerid, COLOR_GREY2, "Rank %i: (empty)", i);
				else
				    SM(playerid, COLOR_GREY2, "Rank %i: %s", i, FactionRanks[factionid][i]);
	        }

	        return SM(playerid, COLOR_SYNTAX, "Usage: /editfaction [factionid] [rankname] [slot (0-%i)] [name]", FactionInfo[factionid][fRankCount] - 1);
	    }
	    if(!(0 <= rankid < FactionInfo[factionid][fRankCount]))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Invalid rank.");
		}

	    strcpy(FactionRanks[factionid][rankid], rank, 32);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO factionranks VALUES(%i, %i, '%e') ON DUPLICATE KEY UPDATE name = '%e'", factionid, rankid, rank, rank);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has set rank %i's name of faction ID %i to '%s'.", GetRPName(playerid), rankid, factionid, rank);
	}
	else if(!strcmp(option, "skin", true))
	{
	    new slot, skinid;

	    if(sscanf(param, "ii", slot, skinid))
	    {
	        SCM(playerid, SERVER_COLOR, "Faction Skins:");

	        for(new i = 0; i < MAX_FACTION_SKINS; i ++)
	        {
	            if(FactionInfo[factionid][fSkins][i] == 0)
	            	SM(playerid, COLOR_GREY2, "Skin %i: (none)", i + 1);
				else
				    SM(playerid, COLOR_GREY2, "Skin %i: %i", i + 1, FactionInfo[factionid][fSkins][i]);
	        }

	        return SM(playerid, COLOR_SYNTAX, "Usage: /editfaction [factionid] [skin] [slot (1-%i)] [skinid]", MAX_FACTION_SKINS);
	    }
	    if(!(1 <= slot <= MAX_FACTION_SKINS))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Invalid slot.");
		}
		if(!(0 <= skinid <= 311))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid skin.");
		}

		slot--;

		FactionInfo[factionid][fSkins][slot] = skinid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO factionskins VALUES(%i, %i, %i) ON DUPLICATE KEY UPDATE skinid = %i", factionid, slot, skinid, skinid);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_WHITE, "** You have set the skin in slot %i to ID %i.", slot + 1, skinid);
	}
	else if(!strcmp(option, "paycheck", true))
	{
	    new rankid, amount;

        if(FactionInfo[factionid][fType] == FACTION_HITMAN)
		{
	    	return SCM(playerid, COLOR_SYNTAX, "You can't set the paychecks for hitman factions.");
		}
	    if(sscanf(param, "ii", rankid, amount))
	    {
	        SCM(playerid, SERVER_COLOR, "Rank Paychecks:");

	        for(new i = 0; i < FactionInfo[factionid][fRankCount]; i ++)
	        {
	            if(isnull(FactionRanks[factionid][i]))
	            	SM(playerid, COLOR_GREY2, "Rank %i: (empty)", i);
				else
				    SM(playerid, COLOR_GREY2, "Rank %i: %s ($%i)", i, FactionRanks[factionid][i], FactionInfo[factionid][fPaycheck][i]);
	        }

	        return SM(playerid, COLOR_SYNTAX, "Usage: /editfaction [factionid] [paycheck] [slot (0-%i)] [amount]", FactionInfo[factionid][fRankCount] - 1);
	    }
	    if(!(0 <= rankid < FactionInfo[factionid][fRankCount]))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Invalid rank.");
		}

	    FactionInfo[factionid][fPaycheck][rankid] = amount;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO factionpay VALUES(%i, %i, %i) ON DUPLICATE KEY UPDATE amount = %i", factionid, rankid, amount, amount);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has set rank %i's paycheck of faction ID %i to $%i.", GetRPName(playerid), rankid, factionid, amount);
	}
	else if(!strcmp(option, "leader", true))
	{
	    new leader[MAX_PLAYER_NAME];

	    if(sscanf(param, "s[24]", leader))
	    {
	        SCM(playerid, COLOR_SYNTAX, "Usage: /editfaction [factionid] [leader] [name]");
	        SCM(playerid, COLOR_SYNTAX, "This only updates the text for the leader's name in /factions. Use /setfaction to appoint someone as faction leader.");
			return 1;
		}

		strcpy(FactionInfo[factionid][fLeader], leader, MAX_PLAYER_NAME);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET leader = '%e' WHERE id = %i", leader, factionid);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the leader of faction ID %i to %s.", GetRPName(playerid), factionid, leader);
	}
	else if(!strcmp(option, "locker", true))
	{
	    SCM(playerid, COLOR_WHITE, "This option has been removed in favor of the dynamic locker system.");
	    SCM(playerid, COLOR_WHITE, "Use /dynamichelp for a list of commands related to dynamic lockers.");
	}
    else if(!strcmp(option, "turftokens", true))
	{
	    new amount;

	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editfaction [factionid] [turftokens] [amount]");
		}
		if(FactionInfo[factionid][fType] != FACTION_POLICE)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can only set the turf tokens for police factions.");
		}

		FactionInfo[factionid][fTurfTokens] = amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET turftokens = %i WHERE id = %i", amount, factionid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the turf tokens of faction ID %i to %i.", GetRPName(playerid), factionid, amount);
	}

	return 1;
}

CMD:purgefaction(playerid, params[])
{
	new factionid;

	if(!pData[playerid][pFactionMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", factionid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /purgefaction [factionid]");
	}
	if(!(1 <= factionid < MAX_FACTIONS) || FactionInfo[factionid][fType] == FACTION_NONE)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid faction.");
	}

	foreach(new i : Player)
	{
	    if(pData[i][pFaction] == factionid)
	    {
	        ResetPlayerWeaponsEx(i);
	        SM(i, COLOR_LIGHTRED, "The faction you were apart of has been purged by an administrator.");
            SetPlayerSkin(i, 230);

	        pData[i][pFaction] = -1;
	        pData[i][pFactionRank] = 0;
	        pData[i][pDivision] = -1;
	        pData[i][pDuty] = 0;
		}
	}

	strcpy(FactionInfo[factionid][fLeader], "Pending", MAX_PLAYER_NAME);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET faction = -1, factionrank = 0, division = -1 WHERE faction = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET leader = 'Pending' WHERE id = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has purged faction %s.", GetRPName(playerid), FactionInfo[factionid][fName]);
	return 1;
}

CMD:removefaction(playerid, params[])
{
	new factionid;

	if(!pData[playerid][pFactionMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", factionid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /removefaction [factionid]");
	}
	if(!(1 <= factionid < MAX_FACTIONS) || FactionInfo[factionid][fType] == FACTION_NONE)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid faction.");
	}

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has deleted faction %s.", GetRPName(playerid), FactionInfo[factionid][fName]);
	RemoveFaction(factionid);
	return 1;
}

CMD:setfaction(playerid, params[])
{
	new targetid, factionid, rankid;

	if(!pData[playerid][pFactionMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "uiI(-1)", targetid, factionid, rankid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setfaction [playerid] [factionid (-1 = none)] [rank (optional)]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(!(0 <= factionid < MAX_FACTIONS) || (factionid >= 0 && FactionInfo[factionid][fType] == FACTION_NONE))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid faction.");
	}
	if((factionid != -1 && !(-1 <= rankid < FactionInfo[factionid][fRankCount])))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid rank.");
	}

	if(factionid == -1)
	{
     	ResetPlayerWeaponsEx(targetid);
        SetPlayerSkin(targetid, 230);

        pData[targetid][pFaction] = -1;
        pData[targetid][pFactionRank] = 0;
        pData[targetid][pDivision] = -1;
        pData[targetid][pDuty] = 0;

		SM(targetid, COLOR_AQUA, "%s has removed you from your faction.", GetRPName(playerid));
		SAM(COLOR_LIGHTRED, "AdmCmd: %s has removed %s from their faction.", GetRPName(playerid), GetRPName(targetid));
	}
	else// if(factionid != 0)
	{
		if(rankid == -1)
		{
	    	rankid = FactionInfo[factionid][fRankCount] - 1;
		}

	    /*if(rankid == FactionInfo[factionid][fRankCount] - 1)
	    {
	        GetPlayerName(targetid, FactionInfo[factionid][fLeader], MAX_PLAYER_NAME);

	    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET leader = '%e' WHERE id = %i", FactionInfo[factionid][fLeader], factionid);
			mysql_tquery(connectionID, queryBuffer);
		}*/

		pData[targetid][pFaction] = factionid;
		pData[targetid][pFactionRank] = rankid;
		pData[targetid][pDivision] = -1;

		SM(targetid, COLOR_AQUA, "%s has made you a "SVRCLR"%s{CCFFFF} in %s.", GetRPName(playerid), FactionRanks[factionid][rankid], FactionInfo[factionid][fName]);
		SAM(COLOR_LIGHTRED, "AdmCmd: %s has made %s a %s in %s.", GetRPName(playerid), GetRPName(targetid), FactionRanks[factionid][rankid], FactionInfo[factionid][fName]);
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET faction = %i, factionrank = %i, division = %i WHERE uid = %i", factionid, rankid, pData[playerid][pDivision], pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	return 1;
}

CMD:factions(playerid, params[])
{
	new string[(1024 * 2)], color, idx;

	for(new factionid = 1; factionid < MAX_FACTIONS; factionid++)
	{
		if(FactionInfo[factionid][fType] != FACTION_NONE) {
			if(FactionInfo[factionid][fColor] == -1 || FactionInfo[factionid][fColor] == -256)
			{
				color = 0xC8C8C8FF;
			}
			else
			{
				color = FactionInfo[factionid][fColor];
			}

			if(FactionInfo[factionid][fType] == FACTION_HITMAN && !IsPlayerAdmin(playerid))
			{
				format(string, sizeof(string), "%s%i\t{%06x}%s\tConfidential\t%s\n", string, factionid, color >>> 8, FactionInfo[factionid][fName]);
			}
			else
			{
				format(string, sizeof(string), "%s%i\t{%06x}%s\t%s\t%s\n", string, factionid, color >>> 8, FactionInfo[factionid][fName], FactionInfo[factionid][fLeader]);
			}
			idx++;
		}
	}

	if(idx > 0) {
		format(string, sizeof(string), "ID\tName\tLeader\n%s", string);
		ShowPlayerDialog(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, "Factions", string, "Confirm", "Close");
	} else {
		ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Factions", "There are no factions created.", "Confirm", "Close");
	}
	return 1;
}

CMD:factions1(playerid, params[])
{
	new string[(1024 * 2)], color, idx;

	for(new factionid = 1; factionid < MAX_FACTIONS; factionid++)
	{
		if(FactionInfo[factionid][fType] != FACTION_NONE) {
			if(FactionInfo[factionid][fColor] == -1 || FactionInfo[factionid][fColor] == -256)
			{
				color = 0xC8C8C8FF;
			}
			else
			{
				color = FactionInfo[factionid][fColor];
			}

			if(FactionInfo[factionid][fType] == FACTION_HITMAN && !IsPlayerAdmin(playerid))
			{
				format(string, sizeof(string), "%s%i\t{%06x}%s\tConfidential\t%s\n", string, factionid, color >>> 8, FactionInfo[factionid][fName]);
			}
			else
			{
				format(string, sizeof(string), "%s%i\t{%06x}%s\t%s\t%s\n", string, factionid, color >>> 8, FactionInfo[factionid][fName], FactionInfo[factionid][fLeader]);
			}
			idx++;
		}
	}

	if(idx > 0) {
		format(string, sizeof(string), "ID\tName\tLeader\n%s", string);
		ShowPlayerDialog(playerid, DIALOG_FACTIONS2, DIALOG_STYLE_TABLIST_HEADERS, "Factions", string, "Confirm", "Close");
	} else {
		ShowPlayerDialog(playerid, DIALOG_FACTIONS2, DIALOG_STYLE_MSGBOX, "Factions", "There are no factions created.", "Confirm", "Close");
	}
	//ShowDialogToPlayer(playerid, DIALOG_FACTIONS);
	return 1;
}

CMD:channel(playerid, params[])
{
	new channel;

	if(!pData[playerid][pWalkieTalkie])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a Portable Radio.");
	}
	if(sscanf(params, "i", channel))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /channel [freq]");
	}
	if(!(0 <= channel <= 9999999))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The channel must range from 0 to 9999999.");
	}

	pData[playerid][pChannel] = channel;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET channel = %i WHERE uid = %i", channel, pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	if(channel == 0)
	{
	    SCM(playerid, COLOR_WHITE, "** You have set the channel to 0 and disabled your Portable Radio.");
	}
	else
	{
	    SM(playerid, COLOR_WHITE, "** Channel set to %i, use /pr to broadcast over this channel.", channel);
	}

	return 1;
}

CMD:pr(playerid, params[])
{
    if(!pData[playerid][pWalkieTalkie])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a Portable Radio.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /pr [Portable Radio]");
	}
	if(!pData[playerid][pChannel])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Your Portable Radio is not tuned into any channel. /channel to set one.");
	}
    if(pData[playerid][pToggleWT])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't speak in your Portable Radio as you have it toggled.");
	}
	if(pData[playerid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while dead.");
	}
	if(pData[playerid][pCuffed])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while cuffed");
	}
	if(pData[playerid][pTied])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while tied.");
	}

	foreach(new i : Player)
	{
		if(pData[i][pWalkieTalkie] && pData[i][pChannel] == pData[playerid][pChannel] && !pData[i][pToggleWT])
		{
		    if(strlen(params) > MAX_SPLIT_LENGTH)
		    {
				SM(i, 0x6DFB6DFF, "** Radio (%i mhz) ** %s: %.*s...", pData[playerid][pChannel], GetRPName(playerid), MAX_SPLIT_LENGTH, params);
				SM(i, 0x6DFB6DFF, "** Radio (%i mhz) ** %s: ...%s", pData[playerid][pChannel], GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SM(i, 0x6DFB6DFF, "** Radio (%i mhz) ** %s: %s", pData[playerid][pChannel], GetRPName(playerid), params);
			}
		}
	}

    SetPlayerBubbleText(playerid, 5.0, 0x6DFB6DFF, "(Radio) %s",params);
	return 1;
}

GetPlayerPlatform(playerid)
{
	new platform[64];
	if(IsPlayerAndroid(playerid))
	{
		platform = "Mobile";
	} else {
		platform = "PC/Desktop";
	}
	return platform;
}

CMD:f(playerid, params[])
{
    if(pData[playerid][pFaction] != -1)
    {
        callcmd::fc(playerid, params);
    }
    if(pData[playerid][pGang] != -1)
    {
        callcmd::gcc(playerid, params);
    }
    return 1;
}

CMD:fc(playerid, params[])
{
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /fc [faction chat]");
	}
	if(pData[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any faction at the moment.");
	}
    if(pData[playerid][pToggleFaction])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't speak in the faction chat as you have it toggled.");
	}
	if(pData[playerid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while dead.");
	}
	if(pData[playerid][pCuffed])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while cuffed");
	}
	if(pData[playerid][pTied])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while tied.");
	}

	foreach(new i : Player)
	{
	    if(pData[i][pFaction] == pData[playerid][pFaction] && !pData[i][pToggleFaction])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
		        SM(i, 0x00FFFFFF, "(( [%s] %s: %.*s... ))", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), MAX_SPLIT_LENGTH, params);
		        SM(i, 0x00FFFFFF, "(( [%s] %s: ...%s ))", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SM(i, 0x00FFFFFF, "(( [%s] %s: %s ))", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), params);
			}
		}
	}

	return 1;
}

CMD:div(playerid, params[])
{
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /div [division chat]");
	}
	if(pData[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any faction at the moment.");
	}
	if(pData[playerid][pDivision] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any divisions in your faction.");
	}

	foreach(new i : Player)
	{
	    if(pData[i][pFaction] == pData[playerid][pFaction] && pData[i][pDivision] == pData[playerid][pDivision])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
		        SM(i, COLOR_LIGHTORANGE, "** [%s] %s %s: %.*s... **", FactionDivisions[pData[playerid][pFaction]][pData[playerid][pDivision]], FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), MAX_SPLIT_LENGTH, params);
		        SM(i, COLOR_LIGHTORANGE, "** [%s] %s %s: ...%s **", FactionDivisions[pData[playerid][pFaction]][pData[playerid][pDivision]], FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SM(i, COLOR_LIGHTORANGE, "** [%s] %s %s: %s **", FactionDivisions[pData[playerid][pFaction]][pData[playerid][pDivision]], FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), params);
			}
		}
	}

	return 1;
}

CMD:r(playerid, params[])
{
	return callcmd::radio(playerid, params);
}

CMD:radio(playerid, params[])
{
	//new string1[128], string2[128], string3[128];

    if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /(r)adio [faction radio]");
	}
	if(pData[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any faction at the moment.");
	}
	if(pData[playerid][pToggleRadio])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't speak in your radio as you have it toggled.");
	}
	if(pData[playerid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while dead.");
	}
	if(pData[playerid][pCuffed])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while cuffed");
	}
	if(pData[playerid][pTied])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while tied.");
	}

    new color = (FactionInfo[pData[playerid][pFaction]][fType] == FACTION_MEDIC) ? (COLOR_DOCTOR) : (COLOR_ROYALBLUE);
	foreach(new i : Player)
	{
	    if(pData[i][pFaction] == pData[playerid][pFaction] && !pData[i][pToggleRadio])
	    {
	        //new color = (FactionInfo[pData[playerid][pFaction]][fType] == FACTION_MEDIC) ? (COLOR_DOCTOR) : (COLOR_ROYALBLUE);

	        /*if(pData[playerid][pDivision] == -1)
	    	{
	    	    if(strlen(params) > MAX_SPLIT_LENGTH)
				{
				    format(string1, sizeof(string1), "** %s %s(%s): %.*s... **", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], FactionDivisions[pData[playerid][pFaction]][pData[playerid][pDivision]], GetRPName(playerid), MAX_SPLIT_LENGTH, params);
				    format(string2, sizeof(string2), "** %s %s: ...%s **", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
				}
				else
				{
				    format(string3, sizeof(string3), "** %s %s(%s): %s **", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], FactionDivisions[pData[playerid][pFaction]][pData[playerid][pDivision]], GetRPName(playerid), params);
				}
			}
			else
			{
				if(strlen(params) > MAX_SPLIT_LENGTH)
				{
				    format(string1, sizeof(string1), "** %s %s: %.*s... **", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), MAX_SPLIT_LENGTH, params);
				    format(string2, sizeof(string2), "** %s %s: ...%s **", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
				}
				else
				{
				    format(string3, sizeof(string3), "** %s %s: %s **", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), params);
				}
   			}*/
   			if(strlen(params) > MAX_SPLIT_LENGTH)
			{
				SM(i, color, "** %s %s: %.*s... **", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), MAX_SPLIT_LENGTH, params);
				SM(i, color, "** %s %s: ...%s **", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
	            SM(i, color, "** %s %s: %s **", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), params);
			}
		}
		/*if(strlen(params) > MAX_SPLIT_LENGTH)
		{
			SM(i, color, string1);
			SM(i, color, string2);
		}
		else
		{
            SM(i, color, string3);
		}*/
	}

	SetPlayerBubbleText(playerid, 20.0, color, "(Radio) %s",params);

	return 1;
}

/*CMD:d(playerid, params[])
{
    if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /d [department radio]");
	}
	if(pData[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any faction at the moment.");
	}
	if(pData[playerid][pToggleRadio])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't speak in your radio as you have it toggled.");
	}
	if(pData[playerid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while dead.");
	}
	if(pData[playerid][pCuffed])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while cuffed");
	}
	if(pData[playerid][pTied])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while tied.");
	}

	switch(FactionInfo[pData[playerid][pFaction]][fType])
	{
	    case FACTION_POLICE, FACTION_MEDIC, FACTION_GOVERNMENT, FACTION_FEDERAL:
	    {
			foreach(new i : Player)
			{
			    if((!pData[i][pToggleRadio]) && (GetFactionType(i) == FACTION_POLICE || GetFactionType(i) == FACTION_MEDIC || GetFactionType(i) == FACTION_GOVERNMENT || GetFactionType(i) == FACTION_FEDERAL))
			    {
			        if(strlen(params) > MAX_SPLIT_LENGTH)
			        {
			        	SM(i, COLOR_YELLOW, "** [%s] %s: %.*s... **", FactionInfo[pData[playerid][pFaction]][fName], GetRPName(playerid), MAX_SPLIT_LENGTH, params);
			        	SM(i, COLOR_YELLOW, "** [%s] %s: ...%s **", FactionInfo[pData[playerid][pFaction]][fName], GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
					}
					else
					{
					    SM(i, COLOR_YELLOW, "** [%s] %s: %s **", FactionInfo[pData[playerid][pFaction]][fName], GetRPName(playerid), params);
					}
				}
			}
		}
		default:
		{
		    SCM(playerid, COLOR_SYNTAX, "Your faction is not authorized to speak in department radio.");
		}
	}

    SetPlayerBubbleText(playerid, 5.0, COLOR_YELLOW, "(Radio) %s",params);
	return 1;
}*/

CMD:d(playerid, params[])
{
	new header[128];

    if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /d [department radio]");
	}
	if(pData[playerid][pFaction] == -1)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not apart of any faction at the moment.");
	}
	if(pData[playerid][pToggleRadio])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't speak in your radio as you have it toggled.");
	}
	if(pData[playerid][pInjured])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't speak in /d if you're dead!");
	}
	if(pData[playerid][pTied])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command while tied.");
	}
	if(pData[playerid][pCuffed])
	{
		return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command while cuffed.");
	}

    if(!strcmp(FactionInfo[pData[playerid][pFaction]][fShortName], "None", true))
	{
	    if(pData[playerid][pDivision] == -1)
	    {
		    format(header, sizeof(header), "** %s %s", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid));
		}
		else
		{
		    format(header, sizeof(header), "** %s %s", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid));
		}
	}
	else
	{
		if(pData[playerid][pDivision] == -1)
	    {
		    format(header, sizeof(header), "** %s %s", FactionInfo[pData[playerid][pFaction]][fShortName], FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid));
		}
		else
		{
		    format(header, sizeof(header), "** %s %s", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid));
		}
	}

	switch(FactionInfo[pData[playerid][pFaction]][fType])
	{
	    case FACTION_POLICE, FACTION_SHERIFF, FACTION_MEDIC, FACTION_GOVERNMENT, FACTION_FEDERAL, FACTION_DOC:
	    {
			foreach(new i : Player)
			{
			    if((!pData[i][pToggleRadio]) && (GetFactionType(i) == FACTION_POLICE || GetFactionType(i) == FACTION_SHERIFF || GetFactionType(i) == FACTION_MEDIC || GetFactionType(i) == FACTION_GOVERNMENT || GetFactionType(i) == FACTION_FEDERAL || GetFactionType(i) == FACTION_DOC))
			    {
			        if(strlen(params) > MAX_SPLIT_LENGTH)
			        {
			        	SM(i, COLOR_YELLOW, "** %s: %.*s... **", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), MAX_SPLIT_LENGTH, params);
			        	SM(i, COLOR_YELLOW, "** %s: ...%s **", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
					}
					else
					{
					    SM(i, COLOR_YELLOW, "** [%s] %s: %s **", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), params);
					}
				}
			}
		}
		default:
		{
		    SCM(playerid, COLOR_SYNTAX, "Your faction is not authorized to speak in department radio.");
		}
	}

    SetPlayerBubbleText(playerid, 20.0, COLOR_YELLOW, "[Radio]: %s", params);
	return 1;
}

CMD:faction(playerid, params[])
{
	new targetid, option[14], param[32];

	if(pData[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any faction at the moment.");
	}
	if(sscanf(params, "s[14]S()[32]", option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /faction [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Invite, Kick, Rank, RankName, Roster, Online, Quit, Offlinekick, Respawncars, Skin");
	    return 1;
	}
	if(!strcmp(option, "invite", true))
	{
		if(pData[playerid][pFactionRank] < FactionInfo[pData[playerid][pFaction]][fRankCount] - 2)
		{
		    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[pData[playerid][pFaction]][fRankCount] - 2);
		}
		if(sscanf(param, "u", targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /faction [invite] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
		}
		if(pData[targetid][pFaction] != -1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player is already apart of a faction.");
		}
		if(pData[targetid][pGang] >= 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player is apart of a gang and therefore can't join a faction.");
		}

		pData[targetid][pFactionOffer] = playerid;
		pData[targetid][pFactionOffered] = pData[playerid][pFaction];

		SM(targetid, COLOR_AQUA, "** %s has invited you to join "SVRCLR"%s{CCFFFF} (/accept faction).", GetRPName(playerid), FactionInfo[pData[playerid][pFaction]][fName]);
		SM(playerid, COLOR_AQUA, "** You have invited %s to join your faction.", GetRPName(targetid));
	}
	else if(!strcmp(option, "kick", true))
	{
		if(pData[playerid][pFactionRank] < FactionInfo[pData[playerid][pFaction]][fRankCount] - 2)
		{
		    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[pData[playerid][pFaction]][fRankCount] - 2);
		}
		if(sscanf(param, "u", targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /faction [kick] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
		}
		if(pData[targetid][pFaction] != pData[playerid][pFaction])
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player is not apart of your faction.");
		}
		if(pData[targetid][pFactionRank] > pData[playerid][pFactionRank])
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has a higher rank than you.");
		}

		Log_Write("log_faction", "%s (uid: %i) kicked %s (uid: %i) from %s (id: %i) as rank %s (%i).", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], FactionInfo[pData[playerid][pFaction]][fName], pData[playerid][pFaction], FactionRanks[pData[targetid][pFaction]][pData[targetid][pFactionRank]], pData[targetid][pFactionRank]);
		RemovePlayerAttachedObject(playerid, 0);
		ResetPlayerWeaponsEx(targetid);
        SetPlayerSkin(targetid, 230);

        pData[targetid][pFaction] = -1;
        pData[targetid][pFactionRank] = 0;
        pData[targetid][pDivision] = -1;
        pData[targetid][pDuty] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET faction = -1, factionrank = 0, division = -1 WHERE uid = %i", pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has kicked you from the faction.", GetRPName(playerid));
		SM(playerid, COLOR_AQUA, "You have kicked %s from your faction.", GetRPName(targetid));
	}
	else if(!strcmp(option, "rank", true))
	{
	    new rankid;

		if(pData[playerid][pFactionRank] < FactionInfo[pData[playerid][pFaction]][fRankCount] - 2)
		{
		    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[pData[playerid][pFaction]][fRankCount] - 2);
		}
		if(sscanf(param, "ui", targetid, rankid))
		{
		    return SM(playerid, COLOR_SYNTAX, "Usage: /faction [rank] [playerid] [rankid (0-%i)]", pData[playerid][pFactionRank]);
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
		}
		if(rankid < 0 || rankid > pData[playerid][pFactionRank])
		{
		    return SCM(playerid, COLOR_SYNTAX, "The rank specified is either invalid or higher than your rank.");
		}
		if(pData[targetid][pFaction] != pData[playerid][pFaction])
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player is not apart of your faction.");
		}
		if(pData[targetid][pFactionRank] > pData[playerid][pFactionRank])
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has a higher rank than you.");
		}

		pData[targetid][pFactionRank] = rankid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET factionrank = %i WHERE uid = %i", rankid, pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has set your rank to "SVRCLR"%s{CCFFFF} (%i).", GetRPName(playerid), FactionRanks[pData[playerid][pFaction]][rankid], rankid);
		SM(playerid, COLOR_AQUA, "You have set %s's rank to "SVRCLR"%s{CCFFFF} (%i).", GetRPName(targetid), FactionRanks[pData[playerid][pFaction]][rankid], rankid);
		Log_Write("log_faction", "%s (uid: %i) has set %s's (uid: %i) rank in %s (id: %i) to %s (%i).", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], FactionInfo[pData[playerid][pFaction]][fName], pData[playerid][pFaction], FactionRanks[pData[playerid][pFaction]][rankid], rankid);
	}
	else if(!strcmp(option, "roster", true))
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, lastlogin, factionrank FROM users WHERE faction = %i ORDER BY factionrank DESC", pData[playerid][pFaction]);
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_FACTION_ROSTER, playerid);
	}
	else if(!strcmp(option, "online", true))
	{
	    callcmd::fmembers(playerid, "\1");
	}
	else if(!strcmp(option, "quit", true))
	{
	    if(isnull(param) || strcmp(param, "confirm", true) != 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /faction [quit] [confirm]");
	    }

	    SM(playerid, COLOR_AQUA, "You have quit %s as a "SVRCLR"%s{CCFFFF} (%i).", FactionInfo[pData[playerid][pFaction]][fName], FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], pData[playerid][pFactionRank]);
		Log_Write("log_faction", "%s (uid: %i) has quit %s (id: %i) has rank %s (%i).", GetPlayerNameEx(playerid), pData[playerid][pID], FactionInfo[pData[playerid][pFaction]][fName], pData[playerid][pFaction], FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], pData[playerid][pFactionRank]);

	    ResetPlayerWeaponsEx(playerid);
        SetPlayerSkin(playerid, 230);
		RemovePlayerAttachedObject(playerid, 0);
        pData[playerid][pFaction] = -1;
        pData[playerid][pFactionRank] = 0;
        pData[playerid][pDivision] = -1;
        pData[playerid][pDuty] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET faction = -1, factionrank = 0, division = -1 WHERE uid = %i", pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "respawncars", true))
	{
	    if(pData[playerid][pFactionRank] < FactionInfo[pData[playerid][pFaction]][fRankCount] - 2)
		{
		    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[pData[playerid][pFaction]][fRankCount] - 2);
		}

 		for(new i = 1; i < MAX_VEHICLES; i ++)
		{
		    if(!IsVehicleOccupied(i) && VehicleInfo[i][vFactionType] == FactionInfo[pData[playerid][pFaction]][fType])
		    {
		        SetVehicleToRespawn(i);
			}
		}

     	SendFactionMessage(pData[playerid][pFaction], COLOR_FACTIONCHAT, "(( %s %s has respawned all unoccupied faction vehicles. ))", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid));
        SAM(COLOR_YELLOW, "AdmWarning: %s[%i] has respawned their faction vehicles.", GetRPName(playerid), playerid);
	}
	else if(!strcmp(option, "offlinekick", true))
	{
	    new username[MAX_PLAYER_NAME];

		if(pData[playerid][pFactionRank] < FactionInfo[pData[playerid][pFaction]][fRankCount] - 2)
		{
		    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[pData[playerid][pFaction]][fRankCount] - 2);
		}
		if(sscanf(param, "s[24]", username))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /faction [offlinekick] [username]");
		}
		if(IsPlayerOnline(username))
		{
	    	return SCM(playerid, COLOR_SYNTAX, "That player is already online and logged in. Use '/faction kick' instead.");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid, faction, factionrank FROM users WHERE username = '%e'", username);
		mysql_tquery(connectionID, queryBuffer, "OnPlayerOfflineKickFaction", "is", playerid, username);
	}
	else if(!strcmp(option, "skin", true))
	{
	    new slot, skinid;
		if(pData[playerid][pFactionRank] < FactionInfo[pData[playerid][pFaction]][fRankCount] - 1)
		{
		    return SM(playerid, COLOR_GREY2, "You need to be rank %i to use this command.", FactionInfo[pData[playerid][pFaction]][fRankCount] - 1);
		}
	    if(sscanf(param, "ii", slot, skinid))
	    {
	        SCM(playerid, SERVER_COLOR, "Faction Skins:");

	        for(new i = 0; i < MAX_FACTION_SKINS; i ++)
	        {
	            if(FactionInfo[pData[playerid][pFaction]][fSkins][i] == 0)
	            	SM(playerid, COLOR_GREY2, "Skin %i: (none)", i + 1);
				else
				    SM(playerid, COLOR_GREY2, "Skin %i: %i", i + 1, FactionInfo[pData[playerid][pFaction]][fSkins][i]);
	        }

	        return SM(playerid, COLOR_GREY2, "Usage: /faction [skin] [slot (1-%i)] [skinid]", MAX_FACTION_SKINS);
	    }

	    if(!(1 <= slot <= MAX_FACTION_SKINS))
	    {
	        return SCM(playerid, COLOR_GREY2, "Invalid slot.");
		}
		if(!(0 <= skinid <= 311))
		{
		    return SCM(playerid, COLOR_GREY2, "Invalid skin.");
		}

		slot--;

		FactionInfo[pData[playerid][pFaction]][fSkins][slot] = skinid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO factionskins VALUES(%i, %i, %i) ON DUPLICATE KEY UPDATE skinid = %i", pData[playerid][pFaction], slot, skinid, skinid);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_WHITE, "** You have set the skin in slot %i to ID %i.", slot + 1, skinid);
	}
	else if(!strcmp(option, "rankname", true))
	{
		if(pData[playerid][pFactionRank] < FactionInfo[pData[playerid][pFaction]][fRankCount] - 1)
		{
		    return SM(playerid, COLOR_GREY2, "You need to be rank %i to use this command.", FactionInfo[pData[playerid][pFaction]][fRankCount] - 1);
		}
	    new rankid, rank[32];

	    if(sscanf(param, "is[32]", rankid, rank))
	    {
	        SCM(playerid, SERVER_COLOR, "Rank Names:");

	        for(new i = 0; i < FactionInfo[pData[playerid][pFaction]][fRankCount]; i ++)
	        {
	            if(isnull(FactionRanks[pData[playerid][pFaction]][i]))
	            	SM(playerid, COLOR_GREY2, "Rank %i: (empty)", i);
				else
				    SM(playerid, COLOR_GREY2, "Rank %i: %s", i, FactionRanks[pData[playerid][pFaction]][i]);
	        }

	        return SM(playerid, COLOR_GREY2, "Usage: /faction [rankname] [slot (0-%i)] [name]", FactionInfo[pData[playerid][pFaction]][fRankCount] - 1);
	    }
	    if(!(0 <= rankid < FactionInfo[pData[playerid][pFaction]][fRankCount]))
	    {
	        return SCM(playerid, COLOR_GREY2, "Invalid rank.");
		}
	    strcpy(FactionRanks[pData[playerid][pFaction]][rankid], rank, 32);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO factionranks VALUES(%i, %i, '%e') ON DUPLICATE KEY UPDATE name = '%e'", pData[playerid][pFaction], rankid, rank, rank);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_YELLOW, "AdmWarning: %s has set rank %i's name of faction ID %i to '%s'.", GetPlayerNameEx(playerid), rankid, pData[playerid][pFaction], rank);
	}

	return 1;
}

CMD:division(playerid, params[])
{
	new targetid, divisionid, option[10], param[32];

	if(pData[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any faction at the moment.");
	}
	if(FactionInfo[pData[playerid][pFaction]][fType] == FACTION_HITMAN)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Hitman factions do not have access to the division system.");
	}
	if(sscanf(params, "s[10]S()[32]", option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /division [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Create, Remove, List, Assign, Kick");
	    return 1;
	}
	if(!strcmp(option, "create", true))
	{
		if(pData[playerid][pFactionRank] < FactionInfo[pData[playerid][pFaction]][fRankCount] - 2)
		{
		    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[pData[playerid][pFaction]][fRankCount] - 2);
		}
		if(isnull(param))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /division [create] [name]");
		}

		for(new i = 0; i < MAX_FACTION_DIVISIONS; i ++)
		{
		    if(isnull(FactionDivisions[pData[playerid][pFaction]][i]))
		    {
		        strcpy(FactionDivisions[pData[playerid][pFaction]][i], param, 32);
		        SM(playerid, COLOR_AQUA, "You have created division {FFA763}%s{CCFFFF}. The ID of this division is %i.", param, i);

		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO divisions VALUES(%i, %i, '%e')", pData[playerid][pFaction], i, param);
		        mysql_tquery(connectionID, queryBuffer);
		        return 1;
			}
		}

		SM(playerid, COLOR_SYNTAX, "Your faction can only have up to %i divisions.", MAX_FACTION_DIVISIONS);
	}
	else if(!strcmp(option, "remove", true))
	{
	    if(pData[playerid][pFactionRank] < FactionInfo[pData[playerid][pFaction]][fRankCount] - 2)
		{
		    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[pData[playerid][pFaction]][fRankCount] - 2);
		}
		if(sscanf(param, "i", divisionid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /division [remove] [divisionid]");
		}
		if(!(0 <= divisionid < MAX_FACTION_DIVISIONS) || isnull(FactionDivisions[pData[playerid][pFaction]][divisionid]))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid division ID.");
	    }

	    foreach(new i : Player)
	    {
	        if(pData[i][pFaction] == pData[playerid][pFaction] && pData[i][pDivision] == divisionid)
	        {
	            pData[i][pDivision] = -1;
	            SCM(i, COLOR_LIGHTRED, "The division you were apart of has been deleted by the faction owner.");
		    }
		}

		SM(playerid, COLOR_AQUA, "You have deleted division {F7A763}%s{CCFFFF} (%i).", FactionDivisions[pData[playerid][pFaction]][divisionid], divisionid);
		FactionDivisions[pData[playerid][pFaction]][divisionid][0] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM divisions WHERE id = %i AND divisionid = %i", pData[playerid][pFaction], divisionid);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET division = -1 WHERE faction = %i", pData[playerid][pFaction]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "list", true))
	{
	    SCM(playerid, SERVER_COLOR, "Divisions List:");

	    for(new i = 0; i < MAX_FACTION_DIVISIONS; i ++)
	    {
	        if(isnull(FactionDivisions[pData[playerid][pFaction]][i]))
	        {
	            SM(playerid, COLOR_GREY1, "ID: %i | Name: Empty Slot", i);
	        }
	        else
	        {
	            SM(playerid, COLOR_GREY1, "ID: %i | Name: %s", i, FactionDivisions[pData[playerid][pFaction]][i]);
	        }
	    }
	}
	else if(!strcmp(option, "assign", true))
	{
	    if(pData[playerid][pFactionRank] < FactionInfo[pData[playerid][pFaction]][fRankCount] - 2)
		{
		    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[pData[playerid][pFaction]][fRankCount] - 2);
		}
		if(sscanf(param, "ui", targetid, divisionid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /division [assign] [playerid] [divisionid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
		}
		if(pData[targetid][pFaction] != pData[playerid][pFaction])
		{
			return SCM(playerid, COLOR_SYNTAX, "That player is not apart of your faction.");
		}
		if(!(0 <= divisionid < MAX_FACTION_DIVISIONS) || isnull(FactionDivisions[pData[playerid][pFaction]][divisionid]))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid division ID.");
	    }
	    if(pData[targetid][pDivision] == divisionid)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player is already apart of that division.");
	    }
	    if(pData[targetid][pDivision] >= 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player is already apart of another division.");
	    }

	    pData[targetid][pDivision] = divisionid;

	    SM(targetid, COLOR_AQUA, "%s has assigned you to the {F7A763}%s{CCFFFF} division.", GetRPName(playerid), FactionDivisions[pData[playerid][pFaction]][divisionid]);
	    SM(playerid, COLOR_AQUA, "You have assigned %s to the {F7A763}%s{CCFFFF} division.", GetRPName(targetid), FactionDivisions[pData[playerid][pFaction]][divisionid]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET division = %i WHERE uid = %i", divisionid, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "kick", true))
	{
	    if(pData[playerid][pFactionRank] < FactionInfo[pData[playerid][pFaction]][fRankCount] - 2)
		{
		    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[pData[playerid][pFaction]][fRankCount] - 2);
		}
		if(sscanf(param, "u", targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /division [kick] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
		}
		if(pData[targetid][pFaction] != pData[playerid][pFaction])
		{
			return SCM(playerid, COLOR_SYNTAX, "That player is not apart of your faction.");
		}
	    if(pData[targetid][pDivision] == -1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player is not apart of any division.");
	    }

	    SM(targetid, COLOR_AQUA, "%s has removed you from the {F7A763}%s{CCFFFF} division.", GetRPName(playerid), FactionDivisions[pData[playerid][pFaction]][pData[targetid][pDivision]]);
	    SM(playerid, COLOR_AQUA, "You have removed %s from the {F7A763}%s{CCFFFF} division.", GetRPName(targetid), FactionDivisions[pData[playerid][pFaction]][pData[targetid][pDivision]]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET division = -1 WHERE uid = %i", pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

        pData[targetid][pDivision] = -1;
	}

	return 1;
}

CMD:cells(playerid, params[])
{
	new status;

    if(GetFactionType(playerid) != FACTION_DOC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}

    for(new i = 0; i < sizeof(gPrisonCells); i ++)
	{
		if(!Streamer_GetExtraInt(gPrisonCells[i], E_OBJECT_OPENED))
		{
		    MoveDynamicObject(gPrisonCells[i], cellPositions[i][3], cellPositions[i][4], cellPositions[i][5], 2.0);
		    Streamer_SetExtraInt(gPrisonCells[i], E_OBJECT_OPENED, 1);
		    status = true;
		}
		else
		{
		    MoveDynamicObject(gPrisonCells[i], cellPositions[i][0], cellPositions[i][1], cellPositions[i][2], 2.0);
		    Streamer_SetExtraInt(gPrisonCells[i], E_OBJECT_OPENED, 0);
		    status = false;
		}
	}

	if(status)
		SendFactionMessage(pData[playerid][pFaction], COLOR_ROYALBLUE, "HQ: %s %s has opened all cells in the prison.", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid));
	else
	    SendFactionMessage(pData[playerid][pFaction], COLOR_ROYALBLUE, "HQ: %s %s has closed all cells in the prison.", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid));

	return 1;
}


CMD:cell(playerid, params[])
{
	for(new i = 0; i < sizeof(gPrisonCells); i ++)
	{
	    if(IsPlayerInRangeOfDynamicObject(playerid, gPrisonCells[i], 2.0))
	    {
		    if(GetFactionType(playerid) != FACTION_DOC)
		    {
		        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
			}
			if(pData[playerid][pDuty] == 0)
			{
				return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
			}

			if(!Streamer_GetExtraInt(gPrisonCells[i], E_OBJECT_OPENED))
			{
			    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s uses their key to open the cell door.", GetRPName(playerid));
			    MoveDynamicObject(gPrisonCells[i], cellPositions[i][3], cellPositions[i][4], cellPositions[i][5], 2.0);
			    Streamer_SetExtraInt(gPrisonCells[i], E_OBJECT_OPENED, 1);
			}
			else
			{
			    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s uses their key to close the cell door.", GetRPName(playerid));
			    MoveDynamicObject(gPrisonCells[i], cellPositions[i][0], cellPositions[i][1], cellPositions[i][2], 2.0);
			    Streamer_SetExtraInt(gPrisonCells[i], E_OBJECT_OPENED, 0);
			}

			return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "You are not in range of any prison cells.");
	return 1;
}

CMD:lopen(playerid, params[])
{
	if(!LandDoorCheck(playerid))
	{
	    SCM(playerid, COLOR_SYNTAX, "You are not in range of any land door/gate which you can open.");
	}
	return 1;
}

CMD:locker(playerid, params[])
{
    if(pData[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_ERROR, "You are not a part of any faction at the moment.");
	}
	if(!IsPlayerInRangeOfLocker(playerid, pData[playerid][pFaction]))
	{
	    return SCM(playerid, COLOR_ERROR, "You are not in range of your faction locker.");
	}

	switch(FactionInfo[pData[playerid][pFaction]][fType])
	{
	    case FACTION_POLICE, FACTION_SHERIFF, FACTION_MEDIC, FACTION_FEDERAL:
	    {
	        ShowPlayerDialog(playerid, DIALOG_FACTIONLOCKER, DIALOG_STYLE_LIST, ""SVRCLR"Locker", "Toggle duty\nEquipment\nUniforms\nClothing", "Select", "Cancel");
		}
		case FACTION_GOVERNMENT, FACTION_NEWS:
		{
		    ShowPlayerDialog(playerid, DIALOG_FACTIONLOCKER, DIALOG_STYLE_LIST, ""SVRCLR"Locker", "Equipment\nUniforms\nClothing", "Select", "Cancel");
		}
 		case FACTION_DOC:
		{
	        ShowPlayerDialog(playerid, DIALOG_FACTIONLOCKER, DIALOG_STYLE_LIST, ""SVRCLR"Locker", "Equipment\nUniforms\nClothing", "Select", "Cancel");
		}
 		case FACTION_MECHANIC:
		{
		    ShowPlayerDialog(playerid, DIALOG_FACTIONLOCKER, DIALOG_STYLE_LIST, ""SVRCLR"Locker", "Toggle duty\nEquipment\nUniforms", "Select", "Cancel");
		}
		case FACTION_HITMAN:
		{
		    ShowPlayerDialog(playerid, DIALOG_FACTIONLOCKER, DIALOG_STYLE_LIST, ""SVRCLR"Locker", "Order weapons\nChange clothes", "Select", "Cancel");
		}
	}
	return 1;
}

CMD:showbadge(playerid, params[])
{
	new targetid, factionid, rankid;

    if(pData[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any faction at the moment.");
	}

	if(GetFactionType(playerid) == FACTION_HITMAN)
	{
	    if(sscanf(params, "uii", targetid, factionid, rankid))
	    {
	        SCM(playerid, COLOR_SYNTAX, "Usage: /showbadge [playerid] [factionid] [rankid]");
	        SCM(playerid, COLOR_WHITE, "Use /factions for a list of factions to use with factionid parameter.");
	        return 1;
		}
		if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
		}
		if(!(1 <= factionid < MAX_FACTIONS) || FactionInfo[factionid][fType] == FACTION_NONE)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid faction.");
	    }
	    if(!(0 <= rankid < FactionInfo[factionid][fRankCount]))
	    {
	        return SM(playerid, COLOR_SYNTAX, "Invalid rank. Valid ranks for this faction range from 0 to %i.", FactionInfo[factionid][fRankCount] - 1);
	    }
	    if(FactionInfo[factionid][fType] == FACTION_HITMAN)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't use this faction for your fake badge.");
	    }

	    SM(targetid, COLOR_WHITE, "** %s is rank %s (%i) in %s. **", GetRPName(playerid), FactionRanks[factionid][rankid], rankid, FactionInfo[factionid][fName]);
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s shows their badge to %s.", GetRPName(playerid), GetRPName(targetid));
	}
	else
	{
		if(sscanf(params, "u", targetid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /showbadge [playerid]");
		}
		if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
		}

	    SM(targetid, COLOR_WHITE, "** %s is rank %s (%i) in %s. **", GetRPName(playerid), FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], pData[playerid][pFactionRank], FactionInfo[pData[playerid][pFaction]][fName]);
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s shows their badge to %s.", GetRPName(playerid), GetRPName(targetid));
	}

	return 1;
}

CMD:m(playerid, params[]) return callcmd::megaphone(playerid, params);
CMD:megaphone(playerid, params[])
{
	if(pData[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any faction at the moment.");
	}
	if((!IsPlayerInRangeOfPoint(playerid, 50.0, 1229.3544, -1311.8627, 796.7859)) && !(596 <= GetVehicleModel(GetPlayerVehicleID(playerid)) <= 599) && GetVehicleModel(GetPlayerVehicleID(playerid)) != 415 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 490 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 427 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 523 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 497)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside a police car.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /(m)egaphone [text]");
	}

	SendProximityMessage(playerid, 50.0, COLOR_TEAL, "[>]"YELLOW" %s: %s", GetRPName(playerid), params);
	SetPlayerBubbleText(playerid, 50.0, COLOR_TEAL, "(Megaphone)"YELLOW" %s",params);
	return 1;
}

CMD:sto(playerid, params[])
{
	if(pData[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any faction at the moment.");
	}

	switch(FactionInfo[pData[playerid][pFaction]][fType])
	{
	    case FACTION_POLICE, FACTION_SHERIFF, FACTION_FEDERAL:
	    {
	        SendProximityMessage(playerid, 50.0, COLOR_YELLOW, "[>] %s: Driver! Step out of the vehicle with your hands above your head!", GetRPName(playerid));
			SetPlayerBubbleText(playerid, 50.0, COLOR_YELLOW, "(Megaphone) %s",params);
		}
	}
	return 1;
}
CMD:greet(playerid, params[])
{
    new string[128], giveplayerid;

	if(IsLawEnforcement(playerid))
	{
	    if(sscanf(params, "d", giveplayerid))
			return SCM(playerid, -1, "USAGE: /greet [1-3]");

		switch(giveplayerid)
		{
			case 1:
			{
				if(!strcmp(pData[playerid][pAccent], "None", true))
				{
					format(string, sizeof(string), "%s says: Hello I'm %s %s with the %s", GetRPName(playerid), FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), FactionInfo[pData[playerid][pFaction]][fName]);
					SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
					format(string, sizeof(string), "%s says: I need to see your drivers license, vehicle registration and proof of insurance.", GetRPName(playerid));
					SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
					SetPlayerChatBubble(playerid, string, COLOR_WHITE, 20.0, 5000);
				}
				else
				{
					format(string, sizeof(string), "(%s) %s says: Hello I'm %s %s with the %s", pData[playerid][pAccent], GetRPName(playerid), FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), FactionInfo[pData[playerid][pFaction]][fName]);
					SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
					format(string, sizeof(string), "(%s) %s says: I need to see your drivers license, vehicle registration and proof of insurance.", pData[playerid][pAccent], GetRPName(playerid));
					SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
					SetPlayerChatBubble(playerid, string, COLOR_WHITE, 20.0, 5000);
				}
			}
			case 2:
			{
				if(!strcmp(pData[playerid][pAccent], "None", true))
				{
					format(string, sizeof(string), "%s says: Hello I'm %s %s with the %s", GetRPName(playerid), FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), FactionInfo[pData[playerid][pFaction]][fName]);
					SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
					format(string, sizeof(string), "%s says: Do you know why I pulled you over today?", GetRPName(playerid));
					SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
					SetPlayerChatBubble(playerid, string, COLOR_WHITE, 20.0, 5000);
				}
				else
				{
					format(string, sizeof(string), "(%s) %s says: Hello I'm %s %s with the %s", pData[playerid][pAccent], GetRPName(playerid), FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), FactionInfo[pData[playerid][pFaction]][fName]);
					SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
					format(string, sizeof(string), "(%s) %s says: Do you know why I pulled you over today?", pData[playerid][pAccent], GetRPName(playerid), FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), FactionInfo[pData[playerid][pFaction]][fName]);
					SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
					SetPlayerChatBubble(playerid, string, COLOR_WHITE, 20.0, 5000);
				}
			}
			case 3:
			{
				if(!strcmp(pData[playerid][pAccent], "None", true))
				{
					format(string, sizeof(string), "%s says: Hello I'm %s %s with the %s", GetRPName(playerid), FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), FactionInfo[pData[playerid][pFaction]][fName]);
					SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
					SetPlayerChatBubble(playerid, string, COLOR_WHITE, 20.0, 5000);
				}
				else
				{
					format(string, sizeof(string), "(%s) %s says: Hello I'm %s %s with the %s", pData[playerid][pAccent], GetRPName(playerid), FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), FactionInfo[pData[playerid][pFaction]][fName]);
					SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
					SetPlayerChatBubble(playerid, string, COLOR_WHITE, 20.0, 5000);
				}
			}
			default:
			{
			    SCM(playerid, -1, "USAGE: /greet [1-3]");
			}
		}
	}
	else if(GetFactionType(playerid) == FACTION_MEDIC)
	{
		if(!strcmp(pData[playerid][pAccent], "None", true))
		{
		    format(string, sizeof(string), "%s says: Hello I'm %s %s with the %s", GetRPName(playerid), FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), FactionInfo[pData[playerid][pFaction]][fName]);
			SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
			format(string, sizeof(string), "%s says: Can you hear me?", GetPlayerNameEx(playerid));
			SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
			SetPlayerChatBubble(playerid, string, COLOR_WHITE, 20.0, 5000);
		}
		else
		{
			format(string, sizeof(string), "(%s) %s says: Hello I'm %s %s with the %s", pData[playerid][pAccent], GetRPName(playerid), FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), FactionInfo[pData[playerid][pFaction]][fName]);
			SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
			format(string, sizeof(string), "(%s) %s says: Can you hear me?", pData[playerid][pAccent], GetRPName(playerid));
			SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
			SetPlayerChatBubble(playerid, string, COLOR_WHITE, 20.0, 5000);
		}
	}
	else
	{
		SCM(playerid, COLOR_ERROR, "You are not authorized to use that command!");
	}
	return 1;
}
CMD:medic(playerid, params[])
{
    new string[128], giveplayerid;

	if(GetFactionType(playerid) == FACTION_MEDIC || GetFactionType(playerid) == FACTION_DOC)
	{
	    if(sscanf(params, "d", giveplayerid))
			return SCM(playerid, -1, "USAGE: /medic [1-4]");

		switch(giveplayerid)
		{
			case 1:
			{
				format(string, sizeof(string), "**{C2A2DA} %s checks patient's condition.", GetRPName(playerid));
				SendProximityFadeMessage(playerid, 20.0, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_GREY4, COLOR_PURPLE);
				format(string, sizeof(string), "what injuries could i see? (( %s ))", GetRPName(playerid));
				SendProximityFadeMessage(playerid, 20.0, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 20.0, 5000);
			}
			case 2:
			{
				format(string, sizeof(string), "**{C2A2DA} %s grabs a paddings from their ALS bag", GetRPName(playerid));
				SendProximityFadeMessage(playerid, 20.0, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_GREY4, COLOR_PURPLE);
				format(string, sizeof(string), "**{C2A2DA} %s puts the paddings onto patient's chest with pressure in it.", GetRPName(playerid));
				SendProximityFadeMessage(playerid, 20.0, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 20.0, 5000);
			}
			case 3:
			{
				format(string, sizeof(string), "**{C2A2DA} %s grabs a roll of bandage from their ALS bag, as he puts it gently to patient's wounds.", GetRPName(playerid));
				SendProximityFadeMessage(playerid, 20.0, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_GREY4, COLOR_PURPLE);
				SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 20.0, 5000);
			}
			case 4:
			{
				format(string, sizeof(string), "**{C2A2DA} %s stands up, as he jogs back to their RA.", GetRPName(playerid));
				SendProximityFadeMessage(playerid, 20.0, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				format(string, sizeof(string), "**{C2A2DA} %s opens the backdoor of their RA, as they grab a single stretcher, jogging back to patient's", GetRPName(playerid));
				SendProximityFadeMessage(playerid, 20.0, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				format(string, sizeof(string), "**{C2A2DA} %s lowers the stretcher next to patient's body, as they lifts them up, putting onto the stretcher, tightening them up.", GetRPName(playerid));
				SendProximityFadeMessage(playerid, 20.0, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				format(string, sizeof(string), "**{C2A2DA} %s loads patient's into their RA with the stretcher on them.", GetRPName(playerid));
				SendProximityFadeMessage(playerid, 20.0, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 20.0, 5000);
			}
			default:
			{
			    SCM(playerid, -1, "USAGE: /medic [1-4]");
			}
		}
	}
	else
	{
		SCM(playerid, COLOR_ERROR, "You are not authorized to use that command!");
	}
	return 1;
}

CMD:po(playerid, params[])
{
	if(pData[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any faction at the moment.");
	}

	switch(FactionInfo[pData[playerid][pFaction]][fType])
	{
	    case FACTION_POLICE, FACTION_SHERIFF, FACTION_FEDERAL:
	    {
	        SendProximityMessage(playerid, 50.0, COLOR_YELLOW, "[>] %s: Pull your vehicle over to the side of the road and turn off the ignition!", GetRPName(playerid));
			SetPlayerBubbleText(playerid, 50.0, COLOR_YELLOW, "(Megaphone) %s",params);
		}
		case FACTION_MEDIC:
		{
		    SendProximityMessage(playerid, 50.0, COLOR_YELLOW, "[>] %s: Move to the right! FMD passing on your left!", GetRPName(playerid), params);
			SetPlayerBubbleText(playerid, 50.0, COLOR_YELLOW, "(Megaphone) %s",params);
		}
	}
	return 1;
}

forward showMirandaRights(playerid, step);
public showMirandaRights(playerid, step)
{
	new string[128];
    switch(step)
    {
        case 1:
        {
            format(string, sizeof(string), "%s says: You have the right to remain silent.", GetRPName(playerid));
			SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
            SetTimerEx("showMirandaRights", 3000, false, "ii", playerid, 2);
        }
        case 2:
        {
            format(string, sizeof(string), "%s says: Anything you say can and will be used against you in a court of law.", GetRPName(playerid));
			SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
            SetTimerEx("showMirandaRights", 4000, false, "ii", playerid, 3);
        }
        case 3:
        {
            format(string, sizeof(string), "%s says: You have the right to to an attorney, If you can not afford one, one will be appointed for you.", GetRPName(playerid));
			SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
        }
	}
}

CMD:mir(playerid, params[])
{
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(IsLawEnforcement(playerid))
	{
	    SetTimerEx("showMirandaRights", 1000, false, "ii", playerid, 1);
	}
	return 1;
}

CMD:taser(playerid, params[]) return callcmd::tazer(playerid, params);
CMD:tazer(playerid, params[])
{
	if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_DOC && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pJailTime] > 0 || pData[playerid][pJoinedEvent] > 0 || IsPlayerInAnyVehicle(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command at the moment.");
	}
	if(pData[playerid][pWeaponRestricted] > 0)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command when you are weapon restricted.");
	}

	if(!pData[playerid][pTazer])
	{
	    pData[playerid][pTazer] = 1;
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s reaches for their tazer.", GetRPName(playerid));

		GetPlayerWeaponData(playerid, 2, pTazerReplace[playerid], pTazerAmmo[playerid]);

		GiveWeapon(playerid, 23, true);
  		SetPlayerArmedWeapon(playerid, 23);
	}
	else
	{
	    pData[playerid][pTazer] = 0;
	    RemovePlayerWeapon(playerid, 23);
		SetPlayerWeapons(playerid);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s puts their tazer back in their duty belt.", GetRPName(playerid));

		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			SetPlayerArmedWeapon(playerid, pData[playerid][pWeapons][2]);
		}
	}
	return 1;
}

CMD:beanbag(playerid, params[]) return callcmd::rubberbullets(playerid, params);
CMD:rubberbullets(playerid, params[])
{
	if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_DOC && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(pData[playerid][pBeanbagTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pJailTime] > 0 || pData[playerid][pJoinedEvent] > 0 || IsPlayerInAnyVehicle(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command at the moment.");
	}
	if(pData[playerid][pWeaponRestricted] > 0)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command when you are weapon restricted.");
	}

	if(!pData[playerid][pBeanbag])
	{
	    pData[playerid][pBeanbag] = 1;
		ShowActionBubble(playerid, "* %s reaches for their tazer.", GetRPName(playerid));

		GetPlayerWeaponData(playerid, 2, pBeanbagReplace[playerid], pBeanbagAmmo[playerid]);

		GiveWeapon(playerid, 25, true);
  		SetPlayerArmedWeapon(playerid, 23);
	}
	else
	{
	    pData[playerid][pBeanbag] = 0;
	    RemovePlayerWeapon(playerid, 25);
		SetPlayerWeapons(playerid);
		ShowActionBubble(playerid, "* %s slings his rubber bullets from their back..", GetRPName(playerid));

		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			SetPlayerArmedWeapon(playerid, pData[playerid][pWeapons][2]);
		}
	}
	return 1;
}

CMD:cuff(playerid, params[])
{
	new targetid;
    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_DOC && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /cuff [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't cuff yourself.");
	}
	if(pData[targetid][pCuffed])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is already handcuffed.");
	}
	if(pData[targetid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't handcuff an injured player.");
	}

	if(pData[targetid][pCallLine] != INVALID_PLAYER_ID)
	{
 		HangupCall(pData[targetid][pCallLine], HANGUP_DROPPED);
	}

	pData[targetid][pCuffed] = 1;
	SetPlayerSpecialAction(targetid, SPECIAL_ACTION_CUFFED);
	TogglePlayerControllable(targetid, 0);

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s tightens a pair of handcuffs around %s's wrists.", GetRPName(playerid), GetRPName(targetid));
	GameTextForPlayer(targetid, "~r~Cuffed", 3000, 3);
	return 1;
}

CMD:uncuff(playerid, params[])
{
	new targetid;

    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_DOC && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /uncuff [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid && pData[playerid][pAdminDuty] == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't uncuff yourself.");
	}
	if(!pData[targetid][pCuffed])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is not handcuffed.");
	}

	pData[targetid][pCuffed] = 0;
 	pData[targetid][pDraggedBy] = INVALID_PLAYER_ID;

	SetPlayerSpecialAction(targetid, SPECIAL_ACTION_NONE);
	TogglePlayerControllable(targetid, 1);

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s loosens the pair of handcuffs from around %s's wrists.", GetRPName(playerid), GetRPName(targetid));
	GameTextForPlayer(targetid, "~g~Uncuffed", 3000, 3);
	return 1;
}
CMD:carry(playerid, params[])
{
    new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /carry [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't carry yourself.");
	}
	if(!pData[targetid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is not injured, handcuffed or tied.");
	}

	if(pData[targetid][pDraggedBy] == INVALID_PLAYER_ID)
	{
		pData[targetid][pDraggedBy] = playerid;
		TogglePlayerControllable(targetid, 0);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs onto %s and begins to carry them.", GetRPName(playerid), GetRPName(targetid));
	}
	else
	{
	    pData[targetid][pDraggedBy] = INVALID_PLAYER_ID;
	    TogglePlayerControllable(targetid, 1);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s stops carrying %s.", GetRPName(playerid), GetRPName(targetid));
	}

	return 1;
}

CMD:drag(playerid, params[])
{
    new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /drag [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't drag yourself.");
	}
	if(!pData[targetid][pInjured] && !pData[targetid][pCuffed] && !pData[targetid][pTied])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is not injured, handcuffed or tied.");
	}

	if(pData[targetid][pDraggedBy] == INVALID_PLAYER_ID)
	{
		pData[targetid][pDraggedBy] = playerid;
		TogglePlayerControllable(targetid, 0);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs onto %s and begins to drag them.", GetRPName(playerid), GetRPName(targetid));
	}
	else
	{
	    pData[targetid][pDraggedBy] = INVALID_PLAYER_ID;
	    TogglePlayerControllable(targetid, 1);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s stops dragging %s.", GetRPName(playerid), GetRPName(targetid));
	}

	return 1;
}

CMD:detain(playerid, params[])
{
	new targetid, vehicleid = GetPlayerVehicleID(playerid);

    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_DOC && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /detain [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 15.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't detain yourself.");
	}
	if(!pData[targetid][pCuffed])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is not handcuffed.");
	}
	if(IsPlayerInAnyVehicle(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is already in a vehicle.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not driving any vehicle.");
	}

	for(new i = (GetVehicleSeatCount(vehicleid) == 4) ? 2 : 1; i < GetVehicleSeatCount(vehicleid); i ++)
	{
	    if(!IsSeatOccupied(vehicleid, i))
	    {
			pData[targetid][pDraggedBy] = INVALID_PLAYER_ID;
			pData[targetid][pVehicleCount] = 0;

	        TogglePlayerControllable(targetid, 0);
	        PutPlayerInVehicle(targetid, vehicleid, i);

			SetPlayerSpecialAction(targetid, SPECIAL_ACTION_NONE);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s throws %s into their vehicle.", GetRPName(playerid), GetRPName(targetid));
			return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "There are no unoccupied back seats left. Find another vehicle.");
	return 1;
}

CMD:charge(playerid, params[])
{
	new targetid, reason[128];

	if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_DOC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /charge [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	/*if(targetid == playerid)
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't charge yourself.");
	}*/
	if(pData[targetid][pWantedLevel] >= 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This player is already at the maximum wanted level (6).");
	}

	pData[targetid][pWantedLevel]++;
	pData[targetid][pCrimes]++;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = %i, crimes = %i WHERE uid = %i", pData[targetid][pWantedLevel], pData[targetid][pCrimes], pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO charges VALUES(null, %i, '%s', NOW(), '%e')", pData[targetid][pID], GetPlayerNameEx(playerid), reason);
	mysql_tquery(connectionID, queryBuffer);

    //format(string, sizeof(string), "> Breaking News"WHITE": %s %s has charged %s with %s.", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), GetRPName(targetid), reason);
	//SMA(COLOR_LIGHTGREEN, string);

	SendFactionMessage(pData[playerid][pFaction], COLOR_ROYALBLUE, "> HQ"WHITE": %s %s has charged %s with {0080FF}%s{9999FF}. **", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), GetRPName(targetid), reason);
	SM(targetid, COLOR_LIGHTRED, "** Officer %s has charged you with %s.", GetRPName(playerid), reason);
	Log_Write("log_faction", "%s (uid: %i) has charged %s (uid: %i) with %s", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], reason);
	return 1;
}

/*CMD:arrest(playerid, params[])
{
	new string[128], targetid, minutes, fine;

	if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /arrest [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't arrest yourself.");
	}
	if(!pData[targetid][pCuffed])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is not handcuffed.");
	}
	if(!pData[targetid][pWantedLevel])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't arrest a player with no active charges. /charge to add them.");
	}

	for(new i = 0; i < sizeof(arrestPoints); i ++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 5.0, arrestPoints[i][0], arrestPoints[i][1], arrestPoints[i][2]))
	    {
	        minutes = pData[targetid][pWantedLevel] * 5;
	        fine = pData[targetid][pWantedLevel] * 200;

	        if(pData[targetid][pDonator] == 1)
			{
	            SM(targetid, COLOR_VIP, "** Donator perk: Your %i minutes of jail time has been reduced by 25 percent to %i minutes.", minutes, percent(minutes, 25));
	            minutes = percent(minutes, 75);
	        }
	        else if(pData[targetid][pDonator] >= 2)
			{
	            SM(targetid, COLOR_VIP, "** Donator perk: Your %i minutes of jail time has been reduced by 50 percent to %i minutes.", minutes, percent(minutes, 50));
	            minutes = percent(minutes, 50);
	        }

		    pData[targetid][pJailType] = 3;
    		pData[targetid][pJailTime] = minutes * 20;
			pData[targetid][pWantedLevel] = 0;
			pData[targetid][pArrested]++;

			SetPlayerInJail(targetid);
			GivePlayerCash(targetid, -fine);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = 0, arrested = %i WHERE uid = %i", pData[targetid][pArrested], pData[targetid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM charges WHERE uid = %i", pData[targetid][pID]);
			mysql_tquery(connectionID, queryBuffer);

		    format(string, sizeof(string), "> News"WHITE": %s %s has completed their arrest. %s has been sent to jail for %i weeks.", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), GetRPName(targetid), minutes);
			SMA(COLOR_LIGHTGREEN, string);

    		SM(targetid, COLOR_AQUA, "** You've been arrested for %i minutes, fine: $%i.", minutes, fine);
    		Log_Write("log_faction", "%s (uid: %i) has arrested %s (uid: %i) for %i minutes, fine: $%i.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], minutes, fine);
    		return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "You are not in range of any arrest points.");
    return 1;
}*/
CMD:addjailtime(playerid, params[])
{
	new targetid, minutes, reason[128];

	if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_DOC)
    {
        return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You are not a part of law enforcement.");
	}
	if(sscanf(params, "uis[128]", targetid, minutes, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /addjailtime [layerid] [amount] [reason]");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
    {
        return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
    }
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(minutes < 1)
	{
	    return SCM(playerid, COLOR_ERROR, "The amount of minutes cannot be below one. Use /release instead.");
	}

	AddJailTime(targetid, minutes);

    Log_Write("log_punishments", "%s was added %i minutes jail time to %s", GetPlayerNameEx(playerid), minutes, GetPlayerNameEx(targetid));
    SCMAf(SERVER_COLOR, "AdmCmd: %s was added %i minutes jail time to %s", GetPlayerNameEx(playerid), minutes, GetPlayerNameEx(targetid));
    SCMf(targetid, SERVER_COLOR, "** You was add %i minutes jail time to %s", minutes, GetPlayerNameEx(targetid));
	return 1;
}
CMD:arrest(playerid, params[])
{
	new targetid, minutes, amount, reason[128];

	if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_DOC)
    {
        return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You are not a part of law enforcement.");
	}
	if(sscanf(params, "uis[128]", targetid, minutes, amount, reason))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /arrest [playerid] [minutes] [fine] [reason]");
 		return 1;
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
    {
        return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
    }
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet. You can wait until they login or use /ojail.");
	}
	if(minutes < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The amount of minutes cannot be below one. Use /release instead.");
	}

    pData[targetid][pJailType] = 3;
    pData[targetid][pJailTime] = minutes * 60;
    AddToTaxVault(amount);
	GivePlayerCash(targetid, -amount);
	PlayerTextDrawShow(targetid, customHUD[targetid][1]);

    ResetPlayerWeaponsEx(targetid);
	ResetPlayer(targetid);
	SetPlayerInJail(targetid);

    Log_Write("log_punishments", "%s (uid: %i) jailed %s (uid: %i) for %i minutes, and fined $%i reason: %s", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], minutes, amount, reason);
    SMA(COLOR_LIGHTRED, "AdmCmd: %s was jailed for %i minutes and fined $%i, by %s, reason: %s", GetRPName(targetid), minutes, amount, GetRPName(playerid), reason);
    SM(targetid, COLOR_AQUA, "** You have been jailed for %i minutes, and fined $%i by %s.", minutes, amount, GetRPName(playerid));
    return 1;
}
CMD:bed(playerid, params[])
{
	new targetid, minutes;

	if(GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic.");
	}
	if(sscanf(params, "ui", targetid, minutes))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /bed [playerid] [minutes]");
 		return 1;
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 10.0))
    {
        return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
    }

    pData[targetid][pBedType] = 1;
    pData[targetid][pBedTime] = minutes * 60;

	SetPlayerInBed(targetid);

	SMA(COLOR_DOCTOR, "%s was detained on their hospital room for %i minutes by %s", GetRPName(targetid), minutes, GetRPName(playerid));
    SM(targetid, COLOR_AQUA, "** You have been detained for %i minutes by %s.", minutes, GetRPName(playerid));
    return 1;
}
/*CMD:wanted(playerid, params[])
{
    if(!IsLawEnforcement(playerid) && !PlayerHasJob(playerid, JOB_LAWYER))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement or a lawyer.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}

	SCM(playerid, SERVER_COLOR, "Wanted Players:");

	foreach(new i : Player)
	{
	    if(pData[i][pWantedLevel] > 0)
	    {
	        SM(playerid, COLOR_GREY2, "(ID: %i) %s - Wanted Level: %i", i, GetRPName(i), pData[i][pWantedLevel]);
		}
	}

	return 1;
}*/

CMD:hfind(playerid, params[])
{
	new targetid;
 	if(GetFactionType(playerid) != FACTION_HITMAN)
 	{
  		return SCM(playerid, COLOR_SYNTAX, "You are not a hitman!");
 	}
 	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /hfind [playerid]");
	}
	if(pData[playerid][pDetectiveCooldown] > 0)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need to wait %i more seconds to use this command again.", pData[playerid][pDetectiveCooldown]);
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
	}
	if(GetPlayerInterior(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "This player is an interior. You can't find them at the moment.");
	}
	if(pData[targetid][pAdminDuty])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on an on-duty administrator.");
	}
 	pData[playerid][pFindTime] = 20;
  	pData[playerid][pDetectiveCooldown] = 28;
   	SetPlayerMarkerForPlayer(playerid, targetid, 0xFF0000FF);
	SM(playerid, COLOR_WHITE, "** %s's location marked on your radar. %i seconds remain until the marker disappears.", GetRPName(targetid), pData[playerid][pFindTime]);
	pData[playerid][pFindPlayer] = targetid;
	return 1;
}

CMD:find(playerid, params[])
{
	new targetid;

    if(!PlayerHasJob(playerid, JOB_DETECTIVE))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command unless you're a Detective.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /find [playerid]");
	}
	if(pData[playerid][pDetectiveCooldown] > 0)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need to wait %i more seconds to use this command again.", pData[playerid][pDetectiveCooldown]);
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
	}
	if(GetPlayerInterior(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "This player is an interior. You can't find them at the moment.");
	}
	if(pData[targetid][pAdminDuty])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on an on-duty administrator.");
	}

	switch(GetJobLevel(playerid, JOB_DETECTIVE))
	{
	    case 1:
	    {
	        pData[playerid][pFindTime] = 6;
	        pData[playerid][pDetectiveCooldown] = 120;
		}
		case 2:
	    {
	        pData[playerid][pFindTime] = 8;
	        pData[playerid][pDetectiveCooldown] = 90;
		}
		case 3:
	    {
	        pData[playerid][pFindTime] = 10;
	        pData[playerid][pDetectiveCooldown] = 60;
		}
		case 4:
	    {
	        pData[playerid][pFindTime] = 12;
	        pData[playerid][pDetectiveCooldown] = 30;
		}
		case 5:
	    {
	        pData[playerid][pFindTime] = 14;
	        pData[playerid][pDetectiveCooldown] = 15;
		}
	}

    SetPlayerMarkerForPlayer(playerid, targetid, 0xFF0000FF);
	SM(playerid, COLOR_WHITE, "** %s's location marked on your radar. %i seconds remain until the marker disappears.", GetRPName(targetid), pData[playerid][pFindTime]);

	IncreaseJobSkill(playerid, JOB_DETECTIVE);
	pData[playerid][pFindPlayer] = targetid;
	return 1;
}

/*CMD:robplayer(playerid, params[])
{
	new targetid;
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_GREY2, "Usage: /robplayer [playerid]");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_GREY2, "You can't use this command on yourself.");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}

	pData[targetid][pSendRob] = playerid;

	SM(targetid, COLOR_AQUA, "** %s has initiated a rob with you (/accept rob).", GetRPName(playerid));
	SM(playerid, COLOR_AQUA, "** You have initiated a rob against %s.", GetRPName(targetid));
	return 1;
}*/

CMD:frisk(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SM(playerid, COLOR_SYNTAX, "Usage: /frisk [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(IsLawEnforcement(playerid) || pData[playerid][pDuty] == 0)
	{
	    FriskPlayer(playerid, targetid);
	}
	else
	{
	    pData[targetid][pFriskOffer] = playerid;

	    SM(targetid, COLOR_AQUA, "** %s is attempting to frisk you for illegal items. (/accept frisk)", GetRPName(playerid));
	    SM(playerid, COLOR_AQUA, "** You have sent a frisk offer to %s.", GetRPName(targetid));
	}

	return 1;
}

CMD:take(playerid, params[])
{
	new targetid, option[14];

    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_DOC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "us[14]", targetid, option))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /take [playerid] [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Weapons, Pot, Crack, Meth, Painkillers, CarLicense");
	    SCM(playerid, COLOR_WHITE, "Available options: DirtyCash, GunLicense, Materials");
		return 1;
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}

	if(!strcmp(option, "weapons", true))
	{
	    ResetPlayerWeaponsEx(targetid);
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes away %s's weapons.", GetRPName(playerid), GetRPName(targetid));

	    SM(targetid, COLOR_AQUA, "%s has taken your weapons.", GetRPName(playerid));
        Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) weapons.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "pot", true))
	{
	    if(!pData[targetid][pPot])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player has no pot on them.");
		}

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes away %s's pot.", GetRPName(playerid), GetRPName(targetid));
	    SM(targetid, COLOR_AQUA, "%s has taken your %i grams of pot.", GetRPName(playerid), pData[targetid][pPot]);
	    Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) %i grams of pot.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], pData[targetid][pPot]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = 0 WHERE uid = %i", pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    pData[targetid][pPot] = 0;
	}
	else if(!strcmp(option, "crack", true))
	{
	    if(!pData[targetid][pCrack])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player has no Crack on them.");
		}

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes away %s's Crack.", GetRPName(playerid), GetRPName(targetid));
	    SM(targetid, COLOR_AQUA, "%s has taken your %i grams of Crack.", GetRPName(playerid), pData[targetid][pPot]);
        Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) %i grams of Crack.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], pData[targetid][pCrack]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = 0 WHERE uid = %i", pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    pData[targetid][pCrack] = 0;
	}
	else if(!strcmp(option, "materials", true))
	{
	    if(!pData[targetid][pMaterials])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player has no materials on them.");
		}

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes away %s's materials.", GetRPName(playerid), GetRPName(targetid));
	    SM(targetid, COLOR_AQUA, "%s has taken your %i materials.", GetRPName(playerid), pData[targetid][pMaterials]);
        Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) %i materials.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], pData[targetid][pMaterials]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = 0 WHERE uid = %i", pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    pData[targetid][pMaterials] = 0;
	}
	else if(!strcmp(option, "meth", true))
	{
	    if(!pData[targetid][pMeth])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player has no meth on them.");
		}

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes away %s's meth.", GetRPName(playerid), GetRPName(targetid));
	    SM(targetid, COLOR_AQUA, "%s has taken your %i grams of meth.", GetRPName(playerid), pData[targetid][pPot]);
        Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) %i grams of meth.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], pData[targetid][pMeth]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = 0 WHERE uid = %i", pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    pData[targetid][pMeth] = 0;
	}
	else if(!strcmp(option, "painkillers", true))
	{
	    if(!pData[targetid][pPainkillers])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player has no painkillers on them.");
		}

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes away %s's painkillers.", GetRPName(playerid), GetRPName(targetid));
	    SM(targetid, COLOR_AQUA, "%s has taken your %i painkillers.", GetRPName(playerid), pData[targetid][pPot]);
        Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) %i painkillers.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], pData[targetid][pPainkillers]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = 0 WHERE uid = %i", pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    pData[targetid][pPainkillers] = 0;
	}
	else if(!strcmp(option, "carlicense", true))
	{
	    if(!pData[targetid][pCarLicense])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player has no driving license on them.");
		}

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes away %s's drivers license.", GetRPName(playerid), GetRPName(targetid));
	    SM(targetid, COLOR_AQUA, "%s has taken your drivers license.", GetRPName(playerid));
	    Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) drivers license.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET carlicense = 0 WHERE uid = %i", pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    pData[targetid][pCarLicense] = 0;
	}
	else if(!strcmp(option, "gunlicense", true))
	{
	    if(!pData[targetid][pWeaponLicense])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player has no gun license on them.");
		}

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes away %s's gun license.", GetRPName(playerid), GetRPName(targetid));
	    SM(targetid, COLOR_AQUA, "%s has taken your gun license.", GetRPName(playerid));
	    Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) gun license.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gunlicense = 0 WHERE uid = %i", pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    pData[targetid][pWeaponLicense] = 0;
	}
	else if(!strcmp(option, "dirtycash", true))
	{
	    if(!pData[targetid][pDirtyCash])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player has no dirty cash on them.");
		}

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes away %s's dirty cash.", GetRPName(playerid), GetRPName(targetid));
	    SM(targetid, COLOR_AQUA, "%s has taken your dirty cash.", GetRPName(playerid));
	    Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) dirty cash.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET dirtycash = 0 WHERE uid = %i", pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    pData[targetid][pDirtyCash] = 0;
	}

	return 1;
}

CMD:ticket(playerid, params[])
{
	new targetid, amount, reason[128];

    if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "uis[128]", targetid, amount, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /ticket [playerid] [amount] [reason]");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't ticket yourself.");
	}

	pData[targetid][pTicketOffer] = playerid;
	pData[targetid][pTicketPrice] = amount;

	SM(targetid, COLOR_AQUA, "** %s writes you a $%i ticket for %s. (/accept ticket)", GetRPName(playerid), amount, reason);
	SM(playerid, COLOR_AQUA, "** You have offered a $%i ticket to %s for %s.", amount, GetRPName(targetid), reason);
	return 1;
}

CMD:gov(playerid, params[])
{
    if(pData[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any faction at the moment.");
	}
	if(pData[playerid][pFactionRank] < FactionInfo[pData[playerid][pFaction]][fRankCount] - 2)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[pData[playerid][pFaction]][fRankCount] - 2);
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gov [text]");
	}

	switch(FactionInfo[pData[playerid][pFaction]][fType])
	{
	    case FACTION_MEDIC:
	    {
	        SCMA(COLOR_WHITE, "---------- * Public Service Announcement * ----------");
	        SMA(COLOR_DOCTOR, "** %s %s: %s", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), params);
		}
		case FACTION_POLICE:
		{
	        SCMA(COLOR_WHITE, "---------- * Public Service Announcement * ----------");
	        SMA(COLOR_BLUE, "** %s %s: %s", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), params);
		}
 		case FACTION_SHERIFF:
		{
	        SCMA(COLOR_WHITE, "---------- * Public Service Announcement * ----------");
	        SMA(COLOR_BLUE, "** %s %s: %s", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), params);
		}
        case FACTION_GOVERNMENT:
		{
	        SCMA(COLOR_WHITE, "---------- * Government News Announcement * ----------");
	        SMA(COLOR_YELLOW2, "** %s %s: %s", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), params);
		}
		case FACTION_FEDERAL:
		{
	        SCMA(COLOR_WHITE, "---------- * Public Service Announcement * ----------");
	        SMA(COLOR_ROYALBLUE, "** %s %s: %s", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), params);
		}
		case FACTION_MECHANIC:
		{
	        SCMA(COLOR_WHITE, "---------- * Mechanic Service Announcement * ----------");
	        SMA(COLOR_GREEN, "** %s %s: %s", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), params);
		}
 		case FACTION_DOC:
		{
	        SCMA(COLOR_WHITE, "---------- * Mechanic Service Announcement * ----------");
	        SMA(COLOR_GREEN, "** %s %s: %s", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), params);
		}
		default:
		{
		    SCM(playerid, COLOR_SYNTAX, "Your faction is not authorized to use this command.");
		}
	}

	return 1;
}

CMD:ram(playerid, params[])
{
	new id;

	if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}

    for(new i = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i <= j; i ++)
	{
    	if(IsValidDynamicObject(i) && IsPlayerInRangeOfDynamicObject(playerid, i, 2.5) && IsDoorObject(i))
		{
		    if((id = GetInsideHouse(playerid)) >= 0 && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_FURNITURE && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == HouseInfo[id][hID])
			{
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT door_opened FROM furniture WHERE id = %i", Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
		 		mysql_tquery(connectionID, queryBuffer, "OnPlayerRamFurnitureDoor", "iii", playerid, i, Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
		    	return 1;
			}
			/*else if((id = GetNearbyLand(playerid)) >= 0 && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_LAND && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == LandInfo[id][lID])
			{
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT door_opened FROM landobjects WHERE id = %i", Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
				mysql_tquery(connectionID, queryBuffer, "OnPlayerRamLandDoor", "iii", playerid, i, Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
			    return 1;
			}*/
		}
	}	
	if((id = GetNearbyHouse(playerid)) >= 0)
	{
	    if(!HouseInfo[id][hLocked])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This house is unlocked. You don't need to ram the door.");
		}

		HouseInfo[id][hLocked] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET locked = 0 WHERE id = %i", HouseInfo[id][hID]);
		mysql_tquery(connectionID, queryBuffer);

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s rams down %s's house door.", GetRPName(playerid), HouseInfo[id][hOwner]);
	}
	else if((id = GetNearbyBusiness(playerid)) >= 0)
	{
	    if(!BusinessInfo[id][bLocked])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This business is unlocked. You don't need to ram the door.");
		}

		BusinessInfo[id][bLocked] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET locked = 0 WHERE id = %i", BusinessInfo[id][bID]);
		mysql_tquery(connectionID, queryBuffer);

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s rams down %s's business door.", GetRPName(playerid), BusinessInfo[id][bOwner]);
	}
	else if((id = GetNearbyGarage(playerid)) >= 0)
	{
	    if(!GarageInfo[id][gLocked])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This garage is unlocked. You don't need to ram the door.");
		}

		GarageInfo[id][gLocked] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET locked = 0 WHERE id = %i", GarageInfo[id][gID]);
		mysql_tquery(connectionID, queryBuffer);

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s rams down %s's garage door.", GetRPName(playerid), GarageInfo[id][gOwner]);
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "You are not in range of any door which can be rammed.");
	}

	return 1;
}

CMD:deploy(playerid, params[])
{
	new type[12], type_id = -1, Float:x, Float:y, Float:z, Float:a;

   	if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_DOC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic or law enforcer.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "s[12]", type))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /deploy [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Spikestrip, Cone, Roadblock, Barrel, Flare");
	    return 1;
	}
	if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't deploy objects inside.");
	}

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	if(!strcmp(type, "spikestrip", true)) {
	    type_id = DEPLOY_SPIKESTRIP;
	} else if(!strcmp(type, "cone", true)) {
		type_id = DEPLOY_CONE;
	} else if(!strcmp(type, "roadblock", true)) {
	    type_id = DEPLOY_ROADBLOCK;
	} else if(!strcmp(type, "barrel", true)) {
	    type_id = DEPLOY_BARREL;
	} else if(!strcmp(type, "flare", true)) {
	    type_id = DEPLOY_FLARE;
	}

	if(type_id == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
	}
	if(DeployObject(type_id, x, y, z, a) == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The deployable objects pool is full. Try deleting some first.");
	}

	if(IsLawEnforcement(playerid))
		SendFactionMessage(pData[playerid][pFaction], COLOR_ROYALBLUE, "HQ: %s %s has deployed a %s in %s.", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), deployableItems[type_id], GetZoneName(x, y, z));
	else
	    SendFactionMessage(pData[playerid][pFaction], COLOR_DOCTOR, "HQ: %s %s has deployed a %s in %s.", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), deployableItems[type_id], GetZoneName(x, y, z));

	return 1;
}

CMD:undeployall(playerid, params[])
{
   	if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_DOC)
    {
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic or law enforcer.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}

	for(new i = 0; i < MAX_DEPLOYABLES; i ++)
	{
		if(DeployInfo[i][dExists])
	 	{
			DestroyDynamicObject(DeployInfo[i][dObject]);
			DeployInfo[i][dExists] = 0;
   			DeployInfo[i][dType] = -1;
		}
	}
	SendFactionMessage(pData[playerid][pFaction], (IsLawEnforcement(playerid)) ? (COLOR_ROYALBLUE) : (COLOR_DOCTOR), "HQ: %s %s has removed all deployed objects.", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid));
	return 1;
}

CMD:undeploy(playerid, params[])
{
    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_DOC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic or law enforcer.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}

    for(new i = 0; i < MAX_DEPLOYABLES; i ++)
    {
        if(DeployInfo[i][dExists])
        {
            new Float:range;

            if(DeployInfo[i][dType] == DEPLOY_SPIKESTRIP || DeployInfo[i][dType] == DEPLOY_BARREL || DeployInfo[i][dType] == DEPLOY_FLARE || DeployInfo[i][dType] == DEPLOY_CONE) {
                range = 2.0;
            } else if(DeployInfo[i][dType] == DEPLOY_ROADBLOCK) {
                range = 5.0;
            }

        	if(IsPlayerInRangeOfPoint(playerid, range, DeployInfo[i][dPosX], DeployInfo[i][dPosY], DeployInfo[i][dPosZ]))
        	{
      	  		SendFactionMessage(pData[playerid][pFaction], (IsLawEnforcement(playerid)) ? (COLOR_ROYALBLUE) : (COLOR_DOCTOR), "HQ: %s %s has removed a %s in %s.", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), deployableItems[DeployInfo[i][dType]], GetZoneName(DeployInfo[i][dPosX], DeployInfo[i][dPosY], DeployInfo[i][dPosZ]));
				DestroyDynamicObject(DeployInfo[i][dObject]);

        	    DeployInfo[i][dExists] = 0;
        	    DeployInfo[i][dType] = -1;
        	    return 1;
			}
		}
	}

	SCM(playerid, COLOR_SYNTAX, "You are not in range of any deployed objects.");
	return 1;
}

CMD:gbackup(playerid, params[])
{
    if(pData[playerid][pGang] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any gang at the moment.");
	}
	if(pData[playerid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot call for backup when you are dead.");
	}
	if(pData[playerid][pCuffed])
	{
 		return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while cuffed.");
	}
	if(pData[playerid][pTied])
	{
		return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while tied.");
	}
	if(!pData[playerid][pBackup])
	{
        pData[playerid][pBackup] = 1;
	}
	else
	{
	    pData[playerid][pBackup] = 0;
	}

	foreach(new i : Player)
	{
        if(pData[i][pGang] == pData[playerid][pGang])
        {
    	    if(pData[playerid][pBackup])
    	    {
    	        SM(i, COLOR_AQUA, "** %s %s is requesting backup in %s (marked on map). **", GangRanks[pData[playerid][pGang]][pData[playerid][pGangRank]], GetRPName(playerid), GetPlayerZoneName(playerid));
    	        SetPlayerMarkerForPlayer(i, playerid, (GangInfo[pData[playerid][pGang]][gColor] & ~0xff) + 0xFF);
			}
			else
			{
    	        SM(i, COLOR_AQUA, "** %s %s has cancelled their backup request. **", GangRanks[pData[playerid][pGang]][pData[playerid][pGangRank]], GetRPName(playerid), GetPlayerZoneName(playerid));
    	        SetPlayerMarkerForPlayer(i, playerid, GetPlayerColor(playerid));
			}
		}
	}

	return 1;
}

/*CMD:bk(playerid, params[])
{
	return callcmd::backup(playerid, params);
}

CMD:backup(playerid, params[])
{
    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic or law enforcer.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(pData[playerid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while dead.");
	}
	if(pData[playerid][pCuffed])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while cuffed");
	}
	if(pData[playerid][pTied])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while tied.");
	}

	if(!pData[playerid][pBackup])
	{
        pData[playerid][pBackup] = 1;

        if(GetFactionType(playerid) != FACTION_MEDIC)
	        SendFactionMessage(pData[playerid][pFaction], COLOR_ROYALBLUE, "HQ: %s %s is requesting backup in %s (marked on map).", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), GetPlayerZoneName(playerid));
		else
		    SendFactionMessage(pData[playerid][pFaction], COLOR_DOCTOR, "HQ: %s %s is requesting backup in %s (marked on map).", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), GetPlayerZoneName(playerid));
	}
	else
	{
	    pData[playerid][pBackup] = 0;

	    if(GetFactionType(playerid) != FACTION_MEDIC)
	        SendFactionMessage(pData[playerid][pFaction], COLOR_ROYALBLUE, "HQ: %s %s has cancelled their backup request.", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid));
	    else
			SendFactionMessage(pData[playerid][pFaction], COLOR_DOCTOR, "HQ: %s %s has cancelled their backup request.", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid));
	}

    foreach(new i : Player)
	{
        if(pData[playerid][pLogged])
		{
  			if(pData[playerid][pBackup])
    			SetPlayerMarkerForPlayer(i, playerid, (FactionInfo[pData[playerid][pFaction]][fColor] & ~0xff) + 0xFF);
			else
   				SetPlayerMarkerForPlayer(i, playerid, GetPlayerColor(playerid));
		}
    }

	return 1;
}*/

CMD:mdc(playerid, params[])
{
   	if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_DOC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic or law enforcer.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(GetNearbyMdc(playerid) >= 0)
	{
		ShowPlayerDialog(playerid, DIALOG_MDC, DIALOG_STYLE_LIST, "Mobile data computer", "Wanted suspects\nPlayer lookup\nVehicle lookup", "Select", "Cancel");
    	return 1;
	}
	if((!IsPlayerInRangeOfPoint(playerid, 50.0, 1229.3544, -1311.8627, 796.7859)) && !(596 <= GetVehicleModel(GetPlayerVehicleID(playerid)) <= 599) && GetVehicleModel(GetPlayerVehicleID(playerid)) != 415 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 490 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 427 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 523 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 497)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside a police car or the police station.");
	}

	//SendFactionMessage(pData[playerid][pFaction], FACTION_DUTY, "HQ: %s %s has login in to mdc....", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid));
	ShowPlayerDialog(playerid, DIALOG_MDC, DIALOG_STYLE_LIST, "Mobile data computer", "Wanted suspects\nPlayer lookup\nVehicle lookup", "Select", "Cancel");
	return 1;
}

/*CMD:clearwanted(playerid, params[])
{
    new targetid;

    if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /clearwanted [playerid]");
	}
	if((!IsPlayerInRangeOfPoint(playerid, 50.0, 1229.3544, -1311.8627, 796.7859)) && !(596 <= GetVehicleModel(GetPlayerVehicleID(playerid)) <= 599))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside a police car or the police station.");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't clear yourself.");
	}
	if(!pData[targetid][pWantedLevel])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player has no active charges to clear.");
	}

	pData[targetid][pWantedLevel] = 0;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM charges WHERE uid = %i", pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = 0 WHERE uid = %i", pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(targetid, COLOR_WHITE, "** Your crimes were cleared by %s.", GetRPName(playerid));
	SendFactionMessage(pData[playerid][pFaction], COLOR_ROYALBLUE, "HQ: %s %s has cleared %s's charges and wanted level.", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), GetRPName(targetid));
	return 1;
}*/

CMD:vticket(playerid, params[])
{
 	new amount, vehicleid;

    if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /vticket [amount]");
	}
	if((vehicleid = GetNearbyVehicle(playerid)) == INVALID_VEHICLE_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any vehicle.");
	}
	if(!VehicleInfo[vehicleid][vOwnerID])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This vehicle isn't owned by any particular person.");
	}
	
	VehicleInfo[vehicleid][vTickets] += amount;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET tickets = %i WHERE id = %i", VehicleInfo[vehicleid][vTickets], VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s writes up a $%i ticket and attaches it to the %s.", GetRPName(playerid), amount, GetVehicleName(vehicleid));
	return 1;
}

CMD:siren(playerid, params[])
{
	new panels,doors,lights,tires;
	new vehicleid = GetPlayerVehicleID(playerid), Float:x, Float:y, Float:z, Float:tmp;

    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic or law enforcer.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(!vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside of any vehicle.");
	}
	if(!VehicleHasWindows(vehicleid))
	{
 		return SCM(playerid, COLOR_SYNTAX, "This vehicle cannot have a siren attached to it.");
	}

	if(!IsValidDynamicObject(vehicleSiren[vehicleid]))
	{
	    GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, z, z, z);
		GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_FRONTSEAT, x, y, tmp);

		vehicleSiren[vehicleid] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		AttachDynamicObjectToVehicle(vehicleSiren[vehicleid], vehicleid, -x, y, z / 1.9, 0.0, 0.0, 0.0);

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s places a detachable siren on the roof of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}
	else
	{
	    DestroyDynamicObject(vehicleSiren[vehicleid]);
	    vehicleSiren[vehicleid] = INVALID_OBJECT_ID;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s detaches the siren from the roof of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}
	if(!Flasher[vehicleid])
	{
		GetVehicleDamageStatus(vehicleid,panels,doors,lights,tires);
		SetVehicleParams(vehicleid, VEHICLE_LIGHTS, true);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s turns on the emergency lights of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		Flasher[vehicleid] = 1;
	}
	else
	{
		GetVehicleDamageStatus(vehicleid,panels,doors,lights,tires);
		UpdateVehicleDamageStatus(vehicleid, panels, doors, 5, tires);
		Flasher[vehicleid] = 0;
		SetVehicleParams(vehicleid, VEHICLE_LIGHTS, false);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s turns off the emergency lights of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}
	return 1;
}

CMD:vfrisk(playerid, params[])
{
    new vehicleid;

    if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if((vehicleid = GetNearbyVehicle(playerid)) == INVALID_VEHICLE_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any vehicle.");
	}

    new count;

    for(new i = 0; i < 3; i ++)
    {
        if(VehicleInfo[vehicleid][vWeapons][i])
        {
            count++;
        }
    }

    SCM(playerid, SERVER_COLOR, "Trunk Balance:");
    SM(playerid, COLOR_GREY2, "Cash: $%i/$%i", VehicleInfo[vehicleid][vCash], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_CASH));
	SM(playerid, COLOR_GREY2, "Materials: %i/%i | Weapons: %i/%i", VehicleInfo[vehicleid][vMaterials], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_MATERIALS), count, GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEAPONS));
    SM(playerid, COLOR_GREY2, "Pot: %i/%i grams | Crack: %i/%i grams", VehicleInfo[vehicleid][vPot], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEED), VehicleInfo[vehicleid][vCrack], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_COCAINE));
    SM(playerid, COLOR_GREY2, "Meth: %i/%i grams | Painkillers: %i/%i pills", VehicleInfo[vehicleid][vMeth], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_METH), VehicleInfo[vehicleid][vPainkillers], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_PAINKILLERS));
    //SCM(playerid, SERVER_COLOR, "Trunk Ammunition:");
	SM(playerid, COLOR_GREY2, "HP Ammo: %i/%i | Poison Ammo: %i/%i", VehicleInfo[vehicleid][vHPAmmo], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_HPAMMO), VehicleInfo[vehicleid][vPoisonAmmo], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_POISONAMMO));
    SM(playerid, COLOR_GREY2, "FMJ Ammo: %i/%i", VehicleInfo[vehicleid][vFMJAmmo], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_FMJAMMO));
	SM(playerid, SERVER_COLOR, "Vehicle Info:");
	SM(playerid, COLOR_GREY2, "Vehicle Plate: %s | Vehicle Owner: %s | Vehicle Gang: %s | Vehicle Faction: %s", VehicleInfo[vehicleid][vPlate], VehicleInfo[vehicleid][vOwner], GangInfo[VehicleInfo[vehicleid][vGang]][gName], FactionInfo[VehicleInfo[vehicleid][vFactionType]][fType]);
	if(count > 0)
	{
		SCM(playerid, COLOR_GREEN, "Trunk Weapons:");

    	for(new i = 0; i < 3; i ++)
        {
            if(VehicleInfo[vehicleid][vWeapons][i])
	        {
    	        SM(playerid, COLOR_GREY2, "[%i] Weapon: %s", i + 1, GetWeaponNameEx(VehicleInfo[vehicleid][vWeapons][i]));
			}
		}
    }

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s prys open the trunk of the %s and takes a look inside.", GetRPName(playerid), GetVehicleName(vehicleid));
	return 1;
}

CMD:vtake(playerid, params[])
{
    new vehicleid, option[14];

    if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "s[14]", option))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /vtake [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Weapons, Ammo, Pot, Crack, Meth, Painkillers");
	    return 1;
	}
	if((vehicleid = GetNearbyVehicle(playerid)) == INVALID_VEHICLE_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any vehicle.");
	}
	if(!VehicleInfo[vehicleid][vOwnerID])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This vehicle isn't owned by any particular person.");
	}

	if(!strcmp(option, "weapons", true))
	{
        VehicleInfo[vehicleid][vWeapons][0] = 0;
        VehicleInfo[vehicleid][vWeapons][1] = 0;
        VehicleInfo[vehicleid][vWeapons][2] = 0;

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET weapon_1 = 0, weapon_2 = 0, weapon_3 = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
        mysql_tquery(connectionID, queryBuffer);

        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes the weapons from the trunk of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		SCM(playerid, COLOR_AQUA, "You have taken the weapons from the trunk.");
		Log_Write("log_faction", "%s (uid: %i) has taken the weapons from %s's (uid: %i) %s trunk (id: %i).", GetRPName(playerid), pData[playerid][pID], VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vOwnerID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
	}
	else if(!strcmp(option, "ammo", true))
	{
        VehicleInfo[vehicleid][vHPAmmo] = 0;
		VehicleInfo[vehicleid][vPoisonAmmo] = 0;
		VehicleInfo[vehicleid][vFMJAmmo] = 0;

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET hpammo = 0, poisonammo = 0, fmjammo = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
        mysql_tquery(connectionID, queryBuffer);

        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes the ammunition from the trunk of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		SCM(playerid, COLOR_AQUA, "You have taken the ammunition from the trunk.");
		Log_Write("log_faction", "%s (uid: %i) has taken the ammunition from %s's (uid: %i) %s trunk (id: %i).", GetRPName(playerid), pData[playerid][pID], VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vOwnerID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
	}
	else if(!strcmp(option, "pot", true))
	{
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes the pot from the trunk of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		SM(playerid, COLOR_AQUA, "You have taken the %i grams of pot from the trunk.", VehicleInfo[vehicleid][vPot]);
		Log_Write("log_faction", "%s (uid: %i) has taken the %i grams of pot from %s's (uid: %i) %s trunk (id: %i).", GetRPName(playerid), pData[playerid][pID], VehicleInfo[vehicleid][vPot], VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vOwnerID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET pot = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
        mysql_tquery(connectionID, queryBuffer);

        VehicleInfo[vehicleid][vPot] = 0;
	}
	else if(!strcmp(option, "crack", true))
	{
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes the Crack from the trunk of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		SM(playerid, COLOR_AQUA, "You have taken the %i grams of Crack from the trunk.", VehicleInfo[vehicleid][vCrack]);
		Log_Write("log_faction", "%s (uid: %i) has taken the %i grams of Crack from %s's (uid: %i) %s trunk (id: %i).", GetRPName(playerid), pData[playerid][pID], VehicleInfo[vehicleid][vCrack], VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vOwnerID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET crack = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
        mysql_tquery(connectionID, queryBuffer);

        VehicleInfo[vehicleid][vCrack] = 0;
	}
	else if(!strcmp(option, "meth", true))
	{
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes the meth from the trunk of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		SM(playerid, COLOR_AQUA, "You have taken the %i grams of meth from the trunk.", VehicleInfo[vehicleid][vMeth]);
		Log_Write("log_faction", "%s (uid: %i) has taken the %i grams of meth from %s's (uid: %i) %s trunk (id: %i).", GetRPName(playerid), pData[playerid][pID], VehicleInfo[vehicleid][vMeth], VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vOwnerID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET meth = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
        mysql_tquery(connectionID, queryBuffer);

        VehicleInfo[vehicleid][vMeth] = 0;
	}
	else if(!strcmp(option, "painkillers", true))
	{
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes the painkillers from the trunk of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		SM(playerid, COLOR_AQUA, "You have taken the %i painkillers from the trunk.", VehicleInfo[vehicleid][vPainkillers]);
		Log_Write("log_faction", "%s (uid: %i) has taken the %i painkillers from %s's (uid: %i) %s trunk (id: %i).", GetRPName(playerid), pData[playerid][pID], VehicleInfo[vehicleid][vPainkillers], VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vOwnerID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET painkillers = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
        mysql_tquery(connectionID, queryBuffer);

        VehicleInfo[vehicleid][vPainkillers] = 0;
	}

	return 1;
}

CMD:firstaid(playerid, params[])
{
	new targetid;

    if(GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /firstaid [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't heal yourself.");
	}
	if(pData[targetid][pBandage])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This player already has first aid effects.");
	}

	pData[targetid][pBandage] = 1;
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s administers first aid to %s.", GetRPName(playerid), GetRPName(targetid));

	SM(targetid, COLOR_AQUA, "You have received first aid from %s. Your health will now regenerate until full.", GetRPName(playerid));
	SM(playerid, COLOR_AQUA, "You have administered first aid to %s.", GetRPName(targetid));
	return 1;
}
CMD:loadpt(playerid, params[]) { return callcmd::stretcher(playerid, params); }
CMD:stretcher(playerid, params[])
{
    new targetid, vehicleid = GetPlayerVehicleID(playerid);

	if(GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /stretcher [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 15.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
	}
	if(!pData[targetid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is not injured.");
	}
	if(IsPlayerInAnyVehicle(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is already in a vehicle.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER && GetVehicleModel(GetPlayerVehicleID(playerid)) != 416 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 490)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need to be driving an ambulance.");
	}

	for(new i = 2; i < GetVehicleSeatCount(vehicleid); i ++)
	{
	    if(!IsSeatOccupied(vehicleid, i))
	    {
	        pData[targetid][pVehicleCount] = 0;
	        pData[targetid][pDraggedBy] = INVALID_PLAYER_ID;

	        ClearAnimations(targetid, 1);
	        ApplyAnimation(targetid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 0, 1);

	        TogglePlayerControllable(targetid, 0);
	        PutPlayerInVehicle(targetid, vehicleid, i);
			UpdateDynamic3DTextLabelText(InjuredLabel[targetid], COLOR_DOCTOR, "");

			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s places %s on a stretcher in the Ambulance.", GetRPName(playerid), GetRPName(targetid));
			return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "There are no unoccupied seats left. Find another vehicle.");
	return 1;
}
/*
CMD:cleanbody(playerid, params[])
{
	new targetid;
	if(GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /cleanbody [playerid]");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_GREY2, "You can't use this command on yourself.");
	}
    if(!PlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, pData[targetid][pBodyPosX], pData[targetid][pBodyPosX], pData[targetid][pBodyPosX])) {
		return SCM(playerid, COLOR_SYNTAX, "You are not in range of any dead bodies.");
	}
	GameTextForPlayer(playerid, "~g~Cleaning...", 10000, 3);
	ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Loop", 4.1, 1, 0, 0, 0, 0, 1);
	TogglePlayerControllable(playerid, 0);
	SetTimerEx("DEATHACTOREX", 10000, false, "ii", playerid, targetid);
	return 1;
}
*/
/*CMD:deliverpatient(playerid, params[])
{
	new targetid, amount = 5000;

	if(GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /deliverpatient [playerid]");
	}
    if(!IsPlayerInRangeOfPoint(playerid, 5.0, 2007.6256, -1410.2455, 16.9922) && !IsPlayerInRangeOfPoint(playerid, 5.0, 1141.6477, -1326.3889, 13.6398) && !IsPlayerInRangeOfPoint(playerid, 5.0, 2070.4307, -1422.8580, 48.331) && !IsPlayerInRangeOfPoint(playerid, 5.0, 1161.1458,-1364.4767,26.6485)
	&& !IsPlayerInRangeOfPoint(playerid, 5.0, 1510.7773, -2151.7322, 13.7483) && !IsPlayerInRangeOfPoint(playerid, 5.0, 1480.4819, -2166.9712, 35.2578) && !IsPlayerInRangeOfPoint(playerid, 5.0, 1539.1060, -2167.2058, 35.2578))
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not in range of any delivery points at the hospital.");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 7.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
	}
	if(!pData[targetid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is not injured.");
	}

    pData[targetid][pInjured] = 0;
	pData[targetid][pDelivered] = 0;
	pData[playerid][pTotalPatients]++;

	if(IsPlayerInRangeOfPoint(playerid, 5.0, 2007.6256, -1410.2455, 16.9922) || IsPlayerInRangeOfPoint(playerid, 5.0, 2070.4307,-1422.8580,48.331))
	{
	    SetPlayerVirtualWorld(targetid, HOSPITAL_COUNTY);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1147.3577, -1345.3729, 13.6328) || IsPlayerInRangeOfPoint(playerid, 5.0, 1161.1458,-1364.4767,26.6485))
	{
		SetPlayerVirtualWorld(targetid, HOSPITAL_ALLSAINTS);
	}

	if(GetFactionType(targetid) == FACTION_POLICE || GetFactionType(targetid) == FACTION_MEDIC)
	{
        SCM(targetid, COLOR_DOCTOR, "You have not been billed for your stay. You also keep all of your weapons!");
    }
	else
	{
		SCM(targetid, COLOR_DOCTOR, "You have been billed $200 for your stay. You also keep all of your weapons!");
	}

	new rand = random(sizeof(hospitalspawns));
	SetFreezePos(targetid, hospitalspawns[rand][0], hospitalspawns[rand][1], hospitalspawns[rand][2]);
	SetPlayerFacingAngle(targetid, hospitalspawns[rand][3]);

	SetPlayerInterior(targetid, 1);
	SetCameraBehindPlayer(targetid);

	if(!(GetFactionType(targetid) == FACTION_POLICE || GetFactionType(targetid) == FACTION_MEDIC))
	{
		GivePlayerCash(targetid, -200);
		GameTextForPlayer(targetid, "~w~Discharged~n~~r~-$200", 5000, 1);
	}

	//TogglePlayerControllable(targetid, 1);

	SetPlayerHealth(targetid, pData[targetid][pSpawnHealth]);
	SetScriptArmour(targetid, pData[targetid][pSpawnArmor]);
	UpdateDynamic3DTextLabelText(InjuredLabel[targetid], COLOR_DOCTOR, "");
    pData[targetid][pAcceptedEMS] = INVALID_PLAYER_ID;
	GivePlayerCash(playerid, amount);
	SM(playerid, COLOR_AQUA, "You have delivered %s to the hospital and earned "SVRCLR"$%i{CCFFFF}.", GetRPName(targetid), amount);
	return 1;
}*/

forward UseMedkit(playerid);
public UseMedkit(playerid)
{
	TogglePlayerControllable(playerid, 1);
	ClearAnimations(playerid, 1);
	pData[playerid][pMedkit] -= 1;
	SetPlayerHealth(playerid, 100.0);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET medkit = %i WHERE uid = %i", pData[playerid][pMedkit], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	SM(playerid,COLOR_GREY2, "** The vehicle has been successfuly repaired. You have %i medkit left.",pData[playerid][pMedkit]);
	return 1;
}
forward Surgery(playerid);
public Surgery(playerid)
{
	pData[playerid][pInjured] = 0;
	SetPlayerHealth(playerid, 100.0);
	pData[playerid][pBrokenLeg] = 0;
	ClearAnimations(playerid, 1);
	GivePlayerCash(playerid, -2500);
	GameTextForPlayer(playerid, "~w~Discharged~n~~g~-$2500", 5000, 1);
	SCM(playerid, COLOR_DOCTOR, "You have been revived by an Doctor!");
	return 1;
}
forward UseRepairkit(playerid);
public UseRepairkit(playerid)
{
    new vehicleid = GetPlayerVehicleID(playerid);
	TogglePlayerControllable(playerid, 1);
	ClearAnimations(playerid, 1);
	pData[playerid][pRepairKit] -= 1;
	SetVehicleHealth(vehicleid, 1000.0);
	RepairVehicle(vehicleid);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET repairkit = %i WHERE uid = %i", pData[playerid][pRepairKit], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	SM(playerid,COLOR_GREY2, "** The vehicle has been successfuly repaired. You have %i repairkit left.",pData[playerid][pRepairKit]);
	return 1;
}
CMD:surgery(playerid, params[])
{
	new targetid;

	if(GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_DOC)
    {
        return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You can't use this command as you aren't a medic.");
	}
	if(pData[playerid][pMedkit] <= 0)
	{
	    return SCM(playerid, COLOR_ERROR, "You have no medkit left.");
	}
	if(!GetNearbySur(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not at the surgery room.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /surgery [playerid]");
	}
	if((gettime() - pData[playerid][pLastAM]) < 30)
	{
		return SCM(playerid, COLOR_ERROR, "Error:"WHITE"Someone's doing an operation.");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
    {
        return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} The player specified is disconnected or out of range.");
    }
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You can't use this command on yourself.");
	}
	if(!pData[targetid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is not injured.");
	}
	TextDrawHideForPlayer(targetid, Text:DieText);
	TextDrawHideForPlayer(targetid, Text:InjuredText);
	GivePlayerCash(playerid, 2500);
 	SCM(targetid, COLOR_DOCTOR, "You have been paid $2,500 from the government");
 	SCM(playerid, COLOR_DOCTOR, "/bed [playerid] [time]");
	pData[playerid][pLastAM] = gettime();
	pData[playerid][pTotalPatients]++;
	ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 1, 0, 0, 0, 0, 1);
	SetTimerEx("Surgery", 15000, false, "i", targetid);
	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s begins the surgery.", GetRPName(playerid));
	pData[playerid][pMedkit] -= 1;
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET medkit = %i WHERE uid = %i", pData[playerid][pMedkit], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}


CMD:listpt(playerid, params[])
{
	if(GetFactionType(playerid) != FACTION_MEDIC)
	{
	    SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic.");
	    return 1;
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	SCM(playerid, COLOR_GREEN, "Injured - (/injuries):");
	foreach(new i : Player)
	{
		if(pData[i][pInjured])
		{
		    new accepted[24];
		    if(IsPlayerConnected(pData[i][pAcceptedEMS]))
		    {
				accepted = GetRPName(pData[i][pAcceptedEMS]);
		    }
		    else
		    {
		        accepted = "None";
		    }
		    SM(playerid, COLOR_SYNTAX, "Name: %s - Location: %s - Medic: %s", GetRPName(i), GetPlayerZoneName(i), accepted);
		}
	}
	SCM(playerid, COLOR_AQUA, "Use /getpt [playerid] to track them!");
	return 1;
}

CMD:heal(playerid, params[])
{
	new targetid;

    if(GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /heal [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't heal yourself.");
	}
	if(pData[targetid][pBandage])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This player already has first aid effects.");
	}

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s administers first aid to %s.", GetRPName(playerid), GetRPName(targetid));

	SM(targetid, COLOR_AQUA, "You have received first aid from %s. Your health will now regenerate until full.", GetRPName(playerid));
	SM(playerid, COLOR_AQUA, "You have administered first aid to %s.", GetRPName(targetid));
	return 1;
}

CMD:getpt(playerid, params[])
{
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(GetFactionType(playerid) == FACTION_MEDIC)
	{
		new targetid;
		if(sscanf(params, "u", targetid))
		{
			return SCM(playerid, COLOR_SYNTAX, "Usage: /getpt [playerid]");
		}
		if(IsPlayerConnected(targetid))
		{
		    if(targetid == playerid)
		    {
		        SCM(playerid, COLOR_AQUA, "You can't accept your own Emergency Dispatch call!");
				return 1;
		    }
		    if(!pData[targetid][pInjured])
		    {
		        SCM(playerid, COLOR_SYNTAX, "That person is not injured!");
		        return 1;
		    }
			if(!IsPlayerConnected(pData[targetid][pAcceptedEMS]))
			{
				if(pData[targetid][pJailTime] > 0) return SCM(playerid, COLOR_SYNTAX, "You can't use this command on jailed players.");
				SendFactionMessage(pData[playerid][pFaction], COLOR_DOCTOR, "EMS Driver %s has accepted the Emergency Dispatch call for %s.", GetRPName(playerid), GetRPName(targetid));
				SM(playerid, COLOR_AQUA, "* You have accepted EMS Call from %s, you will see the marker until you have reached it.", GetRPName(targetid));
				SM(targetid, COLOR_AQUA, "* EMS Driver %s has accepted your EMS Call; please be patient as they are on the way!", GetPlayerNameEx(playerid));
				pData[targetid][pAcceptedEMS] = playerid;
				GameTextForPlayer(playerid, "~w~EMS Caller~n~~r~Go to the red marker.", 5000, 1);
                pData[playerid][pCP] = CHECKPOINT_MISC;
                new Float:ppos[3];
				GetPlayerPosEx(targetid, ppos[0], ppos[1], ppos[2]);
	    		SetPlayerCheckpoint(playerid, ppos[0],ppos[1],ppos[2], 3.0);
			}
			else
			{
				SCM(playerid, COLOR_WHITE, "Someone has already accepted that call!");
			}
		}
	}
	return 1;
}

CMD:injuries(playerid, params[])
{
	new targetid;
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
    if(GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /injuries [playerid]");
	}
    if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT weaponid, timestamp FROM shots WHERE hitid = %i AND hittype = 1 ORDER BY id DESC LIMIT 20", targetid);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerListInjuries", "ii", playerid, targetid);
	return 1;
}

CMD:news(playerid, params[])
{
    if(FactionInfo[pData[playerid][pFaction]][fType] != FACTION_NEWS)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not a news reporter.");
	}
	if(pData[playerid][pFactionRank] < FactionInfo[pData[playerid][pFaction]][fRankCount] - 1)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[pData[playerid][pFaction]][fRankCount] - 2);
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /news [text]");
	}
	foreach(new i : Player)
	{
		if(!pData[playerid][pToggleNews])
		{
 			SM(i, 0x489348FF, "** %s %s: %s", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), params);
		}
	}

	return 1;
}

CMD:cctv(playerid, params[])
{
    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_DOC && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOVERNMENT && GetFactionType(playerid) != FACTION_MECHANIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(isnull(params))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /cctv [on/off]");
	}
	else if(!strcmp(params, "on", true))
	{
		PlayerMenu[playerid] = 0;
		TogglePlayerControllable(playerid, 0);
		ShowMenuForPlayer(CCTVMenu[0], playerid);
	}
	else if(!strcmp(params, "off", true))
	{
		if(CurrentCCTV[playerid] > -1)
		{
			SetPlayerPos(playerid, LastPos[playerid][LX], LastPos[playerid][LY], LastPos[playerid][LZ]);
			SetPlayerFacingAngle(playerid, LastPos[playerid][LA]);
			SetPlayerInterior(playerid, LastPos[playerid][LInterior]);
			TogglePlayerControllable(playerid, 1);
			KillTimer(KeyTimer[playerid]);
			SetCameraBehindPlayer(playerid);
			TextDrawHideForPlayer(playerid, TD);
			CurrentCCTV[playerid] = -1;
		}
	}
	return 1;
}

CMD:live(playerid, params[])
{
	new targetid;

    if(GetFactionType(playerid) != FACTION_NEWS)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a news reporter.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /live [playerid]");
	}
	if(pData[playerid][pLiveMuted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are banned from live interviews. Ask a higher rank to lift your ban.");
	}
	if(pData[playerid][pLiveBroadcast] != INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are already doing a live interview. /endlive to finish it.");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't interview yourself.");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(pData[targetid][pLiveMuted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is banned from live interviews.");
	}
	if(pData[targetid][pCallLine] != INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is on a phone call at the moment.");
	}

	pData[targetid][pLiveOffer] = playerid;

	SM(targetid, COLOR_AQUA, "** %s offered you a live interview. (/accept live)", GetRPName(playerid));
	SM(playerid, COLOR_AQUA, "** You have offered %s a live interview.", GetRPName(targetid));
	return 1;
}

CMD:endlive(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_NEWS)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a news reporter.");
	}
    if(pData[playerid][pLiveBroadcast] == INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are currently not doing a live interview.");
	}

	SCM(playerid, COLOR_AQUA, "You have ended the live interview.");
	SM(pData[playerid][pLiveBroadcast], COLOR_AQUA, "%s has ended the live interview.", GetRPName(playerid));

	pData[pData[playerid][pLiveBroadcast]][pLiveBroadcast] = INVALID_PLAYER_ID;
	pData[playerid][pLiveBroadcast] = INVALID_PLAYER_ID;
	return 1;
}

CMD:liveban(playerid, params[])
{
	new targetid;

    if(GetFactionType(playerid) != FACTION_NEWS)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a news reporter.");
	}
	if(pData[playerid][pFactionRank] < FactionInfo[pData[playerid][pFaction]][fRankCount] - 2)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[pData[playerid][pFaction]][fRankCount] - 2);
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /liveban [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
	}

	if(!pData[targetid][pLiveMuted])
	{
		if(pData[targetid][pLiveBroadcast] != INVALID_PLAYER_ID)
		{
	    	pData[pData[targetid][pLiveBroadcast]][pLiveBroadcast] = INVALID_PLAYER_ID;
	    	pData[targetid][pLiveBroadcast] = INVALID_PLAYER_ID;
		}

		pData[targetid][pLiveMuted] = 1;
		SM(targetid, COLOR_LIGHTRED, "%s has banned you from live interviews.", GetPlayerNameEx(playerid));
		SM(playerid, COLOR_AQUA, "You have banned %s from live interviews.", GetPlayerNameEx(targetid));
	}
	else
	{
	    pData[targetid][pLiveMuted] = 0;
		SM(targetid, COLOR_YELLOW, "%s has unbanned you from live interviews.", GetPlayerNameEx(playerid));
		SM(playerid, COLOR_AQUA, "You have unbanned %s from live interviews.", GetPlayerNameEx(targetid));
	}

	return 1;
}

CMD:settax(playerid, params[])
{
	new string[128], amount;

	if(GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of government.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(pData[playerid][pFactionRank] < FactionInfo[pData[playerid][pFaction]][fRankCount] - 1)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[pData[playerid][pFaction]][fRankCount] - 1);
	}
	if(sscanf(params, "i", amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /settax [rate]");
	}
	if(!(10 <= amount <= 90))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The tax percentage must range from 10 to 90.");
	}

	gTax = amount;
	SaveServerInfo();

	format(string, sizeof(string), "Breaking News"WHITE": Mayor changed the income tax rate to %i percent.", amount);
	SMA(COLOR_LIGHTGREEN, string);

	SAM(COLOR_YELLOW, "AdmWarning: %s has adjusted the income tax rate to %i percent.", GetRPName(playerid), amount);
	SM(playerid, COLOR_AQUA, "You have set the income tax rate to %i percent.", amount);
	Log_Write("log_faction", "%s (uid: %i) set the income tax rate to %i percent.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
	return 1;
}

CMD:factionpay(playerid, params[])
{
	new factionid;

	if(GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of government.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(pData[playerid][pFactionRank] < FactionInfo[pData[playerid][pFaction]][fRankCount] - 1)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[pData[playerid][pFaction]][fRankCount] - 1);
	}
	if(sscanf(params, "i", factionid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /factionpay [factionid] (Use /factions for list.)");
	}
	if(!(1 <= factionid < MAX_FACTIONS) || !FactionInfo[factionid][fType])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid faction.");
	}
	if(FactionInfo[factionid][fType] == FACTION_GOVERNMENT)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't set the paychecks for government factions.");
	}
	if(FactionInfo[factionid][fType] == FACTION_HITMAN)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't set the paychecks for hitman factions.");
	}

	pData[playerid][pFactionEdit] = factionid;
	ShowDialogToPlayer(playerid, DIALOG_FACTIONPAY1);
	return 1;
}

CMD:taxwithdraw(playerid, params[])
{
	new amount, reason[64];

    if(GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of government.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
    if(pData[playerid][pFactionRank] < FactionInfo[pData[playerid][pFaction]][fRankCount] - 1)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[pData[playerid][pFaction]][fRankCount] - 1);
	}
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1667.4260, -972.6691, 683.6873))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the bank.");
	}
	if(sscanf(params, "is[64]", amount, reason))
	{
	    return SM(playerid, COLOR_WHITE, "USAGE /taxwithdraw [amount] [reason] ($%i available)", gVault);
	}
	if(amount < 1 || amount > gVault)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
	}

	AddToTaxVault(-amount);
	GivePlayerCash(playerid, amount);

	SM(playerid, COLOR_AQUA, "** You have withdrawn $%i from the tax vault. The new balance is $%i.", amount, gVault);
	SAM(COLOR_YELLOW, "AdmWarning: %s has withdrawn $%i from the tax vault, reason: %s", GetRPName(playerid), amount, reason);
	Log_Write("log_faction", "%s (uid: %i) has withdrawn $%i from the tax vault, reason: %s", GetPlayerNameEx(playerid), pData[playerid][pID], amount, reason);
	return 1;
}

CMD:taxdeposit(playerid, params[])
{
	new amount;

    if(GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of government.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
    if(pData[playerid][pFactionRank] < FactionInfo[pData[playerid][pFaction]][fRankCount] - 1)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[pData[playerid][pFaction]][fRankCount] - 1);
	}
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1667.4260, -972.6691, 683.6873))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the bank.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SM(playerid, COLOR_WHITE, "USAGE /taxdeposit [amount] ($%i available)", gVault);
	}
	if(amount < 1 || amount > pData[playerid][pCash])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
	}

	AddToTaxVault(amount);
	GivePlayerCash(playerid, -amount);

	SM(playerid, COLOR_AQUA, "** You have deposited $%i in the tax vault. The new balance is $%i.", amount, gVault);
	SAM(COLOR_YELLOW, "AdmWarning: %s has deposited $%i in the tax vault.", GetRPName(playerid), amount);
	Log_Write("log_faction", "%s (uid: %i) has deposited $%i in the tax vault.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
	return 1;
}

/*CMD:contract(playerid, params[])
{
	new targetid, amount, reason[64];

	if(sscanf(params, "iis[64]", targetid, amount, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /contract [playerid] [amount] [reason]");
	}
	if(pData[playerid][pLevel] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be at least level 3+ to contract players.");
	}
	if(GetFactionType(playerid) == FACTION_HITMAN)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are a hitman and therefore can't contract other players.");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't contract yourself.");
	}
	if(pData[targetid][pLevel] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can only contract level 3+ players.");
	}
	if(!(2000 <= amount <= 15000))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The amount must range from $2000 to $15000.");
	}
	if(pData[playerid][pCash] < amount)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have that much money.");
	}
    if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pJailTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}

	foreach(new i : Player)
	{
	    if(GetFactionType(i) == FACTION_HITMAN)
	    {
	        SM(i, COLOR_YELLOW, "** %s has contracted %s for $%i, reason: %s [/contracts]", GetRPName(playerid), GetRPName(targetid), amount, reason);
		}
	}

	GivePlayerCash(playerid, -amount);

	pData[targetid][pContracted] += amount;
	GetPlayerName(playerid, pData[targetid][pContractBy], MAX_PLAYER_NAME);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET contracted = %i, contractby = '%e' WHERE uid = %i", pData[targetid][pContracted], pData[targetid][pContractBy], pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(playerid, COLOR_AQUA, "You have placed a contract on %s for $%i, reason: %s", GetRPName(targetid), amount, reason);
	SAM(COLOR_YELLOW, "AdmWarning: %s placed a contract on %s for $%i, reason: %s", GetRPName(playerid), GetRPName(targetid), amount, reason);
 	Log_Write("log_contracts", "%s (uid: %i) placed a contract on %s (uid: %i) for $%i, reason: %s", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], amount, reason);
 	return 1;
}

CMD:contracts(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_HITMAN && pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	SCM(playerid, SERVER_COLOR, "Pending Contracts:");

	foreach(new i : Player)
	{
	    if(pData[i][pContracted] > 0)
	    {
	        SM(playerid, COLOR_GREY2, "ID: %i | Target: %s | Bounty price: $%i | Last contracter: %s", i, GetRPName(i), pData[i][pContracted], pData[i][pContractBy]);
		}
	}

	SCM(playerid, COLOR_YELLOW, "** Use /takehit [id] or /denyhit [id] to handle contracts.");
	return 1;
}

CMD:denyhit(playerid, params[])
{
	new targetid;

	if(GetFactionType(playerid) != FACTION_HITMAN && pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a hitman.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /denyhit [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!pData[targetid][pContracted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't been contracted.");
	}

    SAM(COLOR_LIGHTRED, "AdmCmd: %s has cancelled the contract on %s for $%i.", GetRPName(playerid), GetRPName(targetid), pData[targetid][pContracted]);

	if(GetFactionType(playerid) == FACTION_HITMAN)
	{
		SendFactionMessage(pData[playerid][pFaction], COLOR_YELLOW, "** Hitman %s has cancelled the contract on %s for $%i. **", GetRPName(playerid), GetRPName(targetid), pData[targetid][pContracted]);
	}

	pData[targetid][pContracted] = 0;
    strcpy(pData[targetid][pContractBy], "Pending", MAX_PLAYER_NAME);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET contracted = 0, contractby = 'Pending' WHERE uid = %i", pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}

CMD:takehit(playerid, params[])
{
	new targetid;

	if(GetFactionType(playerid) != FACTION_HITMAN)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a hitman.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /takehit [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
	}
	if(!pData[targetid][pContracted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't been contracted.");
	}

	pData[playerid][pContractTaken] = targetid;
	SendFactionMessage(pData[playerid][pFaction], COLOR_YELLOW, "** Hitman %s has accepted the contract to kill %s for $%i. **", GetRPName(playerid), GetRPName(targetid), pData[targetid][pContracted]);
	SM(playerid, COLOR_AQUA, "You have taken the hit. You will receive $%i once you have assassinated "SVRCLR"%s{CCFFFF}.", pData[targetid][pContracted], GetRPName(targetid));
	return 1;
}*/

CMD:mask(playerid, params[])
{
	//new rand = Random(500, 900);
	if(!pData[playerid][pMask])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a Mask.");
	}
	for(new Sz; Sz < MAX_SAFEZONES; Sz++)
	{
		if(IsPlayerInRangeOfPoint(playerid, SafezoneInfo[Sz][szSize], SafezoneInfo[Sz][szPosX], SafezoneInfo[Sz][szPosY], SafezoneInfo[Sz][szPosZ]))
		{
			SCM(playerid, COLOR_YELLOW, "Wearing a mask inside the greenzone is prohibited");
			return 0;
		}
	}
	if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pTied] > 0 ||  pData[playerid][pCuffed] > 0 || pData[playerid][pJailTime] > 0 || pData[playerid][pJoinedEvent] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}
	if(pData[playerid][pAdminDuty]) return SCM(playerid, COLOR_SYNTAX, "You can't use this while on admin duty.");

	if(Maskara[playerid] == 0)
	{
		foreach(new i : Player)
		{
			ShowPlayerNameTagForPlayer(i, playerid, 0);
		}
		Maskara[playerid] = 1;
		MaskaraID[playerid] = playerid;
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s puts on his mask.", GetRPName(playerid));
		ApplyAnimation(playerid, "goggles", "goggles_put_on", 4.1, 0, 0, 0, 0, 0);
  		SetPlayerAttachedObject(playerid, 9, 19036,2, 0.093999, 0.026000, -0.004999, 93.800018, 82.199951, -3.300001, 1.098000, 1.139999, 1.173000);
	}
	else
	{
	    foreach(new i : Player)
		{
			ShowPlayerNameTagForPlayer(i, playerid, 1);
		}
    	Maskara[playerid] = 0;
     	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} Stranger takes off his mask.");
     	ApplyAnimation(playerid, "goggles", "goggles_put_on", 4.1, 0, 0, 0, 0, 0);
		if(IsPlayerAttachedObjectSlotUsed(playerid, 9)) RemovePlayerAttachedObject(playerid, 9);
	}
	return 1;
}

CMD:masked(playerid, params[])
{
	if(pData[playerid][pAdmin] >= 2) {
		new string[128], name[MAX_PLAYER_NAME+1];
		foreach(new i : Player)
		{
			if(IsPlayerConnected(i))
			{
				if(Maskara[i] == 1)
				{
					GetPlayerName(i, name, sizeof(name));
					format(string, sizeof(string),"%s %s (%d)\n", string, name, MaskaraID[i]);
				}
			}
		}
		SCM(playerid, -1, string);
	}
	return 1;
}

/*CMD:hbadge(playerid, params[])
{
	new factionid;
	if(GetFactionType(playerid) != FACTION_HITMAN)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a hitman.");
	}
	if(sscanf(params, "i", factionid))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /hbadge [factionid]");
		return 1;
	}
	SetPlayerColor(playerid, FactionInfo[factionid][fColor] & ~0xff);
    return 1;
}*/
CMD:dmvrelease(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 4.0, 2050.3113, -1911.2911, 12.8366))
	{
		return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You're not at the impound area");
	}
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT tickets, modelid FROM vehicles WHERE ownerid = %i AND impounded = 1", pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_DMVRELEASE, playerid);
	return 1;
}

CMD:registervehicle(playerid, params[])
{
	new vehid;
    new price = 5000;
    GivePlayerCash(playerid, -price);
	if((!IsPlayerInRangeOfPoint(playerid, 50.0, -2772.9460, 376.7526, 3000.6462) && !IsPlayerInRangeOfPoint(playerid, 5.0, -709.9255, 2606.4180, 1005.7650)))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not the police station.");
	}
	if(sscanf(params, "i", vehid))
	{
	    return SendClientMessage(playerid, COLOR_GREY3, "[Usage]: /registervehicle [vehid]");
	}
    if(pData[playerid][pCash] < price)
    {
        return SCM(playerid, COLOR_SYNTAX, "You don't have enough money....");
    }
	if(!VehicleHasEngine(vehid))
	{
		return SendClientMessage(playerid, COLOR_GREY, "This vehicle has no license plate, therefore it can't be registered.");
	}
	if(strcmp(VehicleInfo[vehid][vPlate], "None") != 0)
	{
		return SendClientMessageEx(playerid, COLOR_GREY, "This vehicle is already registered.");
	}
	if(!VehicleInfo[vehid][vOwnerID])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This vehicle isn't owned by any particular person.");
	}
	GetUniquePlate(vehid);
	GivePlayerCash(playerid, -5000);
    GameTextForPlayer(playerid, "-$5000", 5000, 1);
	SendClientMessageEx(playerid, COLOR_GREY3, "Added plates to vehicle id %d", vehid);
	SendClientMessageEx(playerid, COLOR_GREY3, "Vehicle ID: %d, Plates: %s", vehid, VehicleInfo[vehid][vPlate]);
//    SendClientMessageEx(VehicleInfo[vehid][vOwnerID], VehicleInfo[vehid][vOwner], Car Dealership: %s has registered your vehicle plate to $i", GetPlayerNameRP(playerid), GetUniquePlate(vehid)); // someone should do this, i cant find the right code :( - Pedro
	return 1; // i didnt commented new string so you can check this command HAHAHAHHA whoever are you watching this word, fuck you again!.
}


CMD:propose(playerid, params[])
{
	new id, targetid;
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /propose [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 3.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if((id = GetInsideBusiness(playerid)) == -1 || BusinessInfo[id][bType] != BUSINESS_RESTAURANT)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need to be at a restaurant to commence a wedding.");
	}
	if(pData[playerid][pCash] < 750 || pData[targetid][pCash] < 750)
	{
		return SCM(playerid, COLOR_SYNTAX, "You both need to have atleast $750 to have a wedding.");
	}
	if(pData[playerid][pMarriedTo] != -1)
	{
	    return SM(playerid, COLOR_SYNTAX, "You're already married to %s.", pData[playerid][pMarriedName]);
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't marry yourself faggot.");
	}
	pData[targetid][pMarriageOffer] = playerid;

	SM(targetid, COLOR_AQUA, "** %s has asked you to marry them, Please be careful when chosing a partner, It will cost both parties $750. (/accept marriage)", GetRPName(playerid));
	SM(playerid, COLOR_AQUA, "** You have sent %s a proposal for marriage.", GetRPName(targetid));
	return 1;
}

CMD:divorce(playerid, params[])
{
	new targetid;
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /divorce [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 3.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(pData[playerid][pMarriedTo] == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You aren't even married.");
	}
	if(pData[playerid][pMarriedTo] != pData[targetid][pID])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You aren't married to that person.");
	}
	pData[targetid][pMarriageOffer] = playerid;

	SM(targetid, COLOR_AQUA, "** %s has asked you to divorce them (/accept divorce)", GetRPName(playerid));
	SM(playerid, COLOR_AQUA, "** You have sent %s a request for divorce.", GetRPName(targetid));
	return 1;
}

CMD:profile(playerid, params[])
{
    new targetid;

	if(GetFactionType(playerid) != FACTION_HITMAN)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a hitman.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /profile [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	SM(playerid, SERVER_COLOR, "%s:", GetRPName(targetid));
	SM(playerid, COLOR_GREY2, "Gender: %s", (pData[targetid][pGender] == 2) ? ("Female") : ("Male"));
	SM(playerid, COLOR_GREY2, "Age: %i years old", pData[targetid][pAge]);

	if(pData[targetid][pFaction] != -1)
	{
	    SM(playerid, COLOR_GREY2, "Faction: %s", FactionInfo[pData[targetid][pFaction]][fName]);
	    SM(playerid, COLOR_GREY2, "Rank: %s (%i)", FactionRanks[pData[targetid][pFaction]][pData[targetid][pFactionRank]], pData[targetid][pFactionRank]);
	}
	else
	{
	    SM(playerid, COLOR_GREY2, "Faction: None");
	}

	if(pData[targetid][pContracted] > 0)
	{
		SM(playerid, COLOR_GREY2, "Contract: $%i", pData[targetid][pContracted]);
		SM(playerid, COLOR_GREY2, "Last Contracter: %s", pData[targetid][pContractBy]);
	}

	SM(playerid, COLOR_GREY2, "Completed Hits: %i", pData[targetid][pCompletedHits]);
	SM(playerid, COLOR_GREY2, "Failed Hits: %i", pData[targetid][pFailedHits]);
	return 1;
}
CMD:createlocker(playerid, params[])
{
	new factionid, Float:x, Float:y, Float:z;

    if(pData[playerid][pAdmin] < 5 && !pData[playerid][pFactionMod])
	{
	    return SCM(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", factionid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "USAGE: /createlocker [factionid]");
	}
    if(!(0 <= factionid < MAX_FACTIONS) || FactionInfo[factionid][fType] == FACTION_NONE)
	{
	    return SCM(playerid, COLOR_GREY, "Invalid faction.");
	}

    GetPlayerPos(playerid, x, y, z);

	for(new i = 0; i < MAX_LOCKERS; i ++)
	{
		if(!LockerInfo[i][lExists])
		{
		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO factionlockers (factionid, pos_x, pos_y, pos_z, interior, world) VALUES(%i, '%f', '%f', '%f', %i, %i)", factionid, x, y, z, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
		    mysql_tquery(connectionID, queryBuffer, "OnAdminCreateLocker", "iiifffii", playerid, i, factionid, x, y, z, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
		    return 1;
		}
	}

	SCM(playerid, COLOR_GREY, "Locker slots are currently full. Ask developers to increase the internal limit.");
	return 1;
}

CMD:editlocker(playerid, params[])
{
	new lockerid, option[32], param[32];

	if(!pData[playerid][pFactionMod])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[32]S()[32]", lockerid, option, param))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editlocker [lockerid] [option]");
		SendClientMessage(playerid, COLOR_GREY, "OPTIONS: Position, FactionID, Icon, Label, Uniform");
		return 1;
	}
	if(!(0 <= lockerid < MAX_LOCKERS) || !LockerInfo[lockerid][lExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid locker.");
	}
    if(!strcmp(option, "position", true))
    {
		GetPlayerPos(playerid, LockerInfo[lockerid][lPosX], LockerInfo[lockerid][lPosY], LockerInfo[lockerid][lPosZ]);
		LockerInfo[lockerid][lInterior] = GetPlayerInterior(playerid);
		LockerInfo[lockerid][lWorld] = GetPlayerVirtualWorld(playerid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET pos_x = '%f', pos_y = '%f', pos_z = '%f', interior = %i, world = %i WHERE id = %i", LockerInfo[lockerid][lPosX], LockerInfo[lockerid][lPosY], LockerInfo[lockerid][lPosZ], LockerInfo[lockerid][lInterior], LockerInfo[lockerid][lWorld], LockerInfo[lockerid][lID]);
		mysql_tquery(connectionID, queryBuffer);

		SCMf(playerid, COLOR_AQUA, "* You have moved locker %i to your position.", lockerid);
		ReloadLocker(lockerid);
	}
	else if(!strcmp(option, "factionid", true))
	{
	    new value;
		if(sscanf(param, "i", value))
	    {
			return SCMf(playerid, COLOR_SYNTAX, "USAGE: /editlocker [%i] [%s] [value]", lockerid, option);
		}
	    LockerInfo[lockerid][lFaction] = value;
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET factionid = %i WHERE id = %i", LockerInfo[lockerid][lFaction], LockerInfo[lockerid][lID]);
		mysql_tquery(connectionID, queryBuffer);

		SCMf(playerid, COLOR_AQUA, "* You set locker %i's faction to %i.", lockerid, value);
		ReloadLocker(lockerid);
	}
	else if(!strcmp(option, "icon", true))
	{
	    new iconid;

	    if(sscanf(param, "i", iconid))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editlocker [lockerid] [icon] [iconid (19300 = hide)]");
		}
		if(!IsValidModel(iconid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid model ID.");
		}

		LockerInfo[lockerid][lIcon] = iconid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET iconid = %i WHERE id = %i", LockerInfo[lockerid][lIcon], LockerInfo[lockerid][lID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadLocker(lockerid);
	    SCMf(playerid, COLOR_AQUA, "* You've changed the pickup icon model of locker %i to %i.", lockerid, iconid);
	}
	else if(!strcmp(option, "label", true))
	{
	    new status;

	    if(sscanf(param, "i", status) || !(0 <= status <= 1))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editlocker [lockerid] [label] [0/1]");
		}

		LockerInfo[lockerid][lLabel] = status;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET label = %i WHERE id = %i", LockerInfo[lockerid][lLabel], LockerInfo[lockerid][lID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadLocker(lockerid);

		if(status)
		    SCMf(playerid, COLOR_AQUA, "* You've enabled the 3D text label for locker %i.", lockerid);
		else
		    SCMf(playerid, COLOR_AQUA, "* You've disabled the 3D text label for locker %i.", lockerid);
	}
	else if(!strcmp(option, "uniform", true))
	{
	    if(FactionInfo[LockerInfo[lockerid][lFaction]][fType] == FACTION_HITMAN)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Weapons for hitman agency lockers cannot be edited in-game.");
	    }

		SCM(playerid, COLOR_ERROR, "use the command /editfaction skin for the uniforms!");
	}
	/*else if(!strcmp(option, "weapons", true))
	{
	    if(FactionInfo[LockerInfo[lockerid][lFaction]][fType] == FACTION_HITMAN)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Weapons for hitman agency lockers cannot be edited in-game.");
	    }
	    new inputtext[24], opt2[8], amount;
	    if(sscanf(param, "s[24]s[8]i", inputtext, opt2, amount))
	    {
	        SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editlocker [lockerid] [weapons] [weaponname] [option] [amount]");
            SendClientMessage(playerid, COLOR_GREEN, "Weapon Name: Kevlar, Medkit, Nitestick, Mace, Deagle, Shotgun, M4, MP5, Spas12, Sniper, Camera, FireExt, Painkillers");
			SendClientMessage(playerid, COLOR_YELLOW, "Options: Allow, Price");
			SendClientMessage(playerid, COLOR_ORANGE, "Amount: Price (amount), Allow (1 or 0)");
	        return 1;
	    }
		if(!strcmp(opt2, "allow", true))
		{
		    if(!(0 <= amount <= 1)) return SendClientMessage(playerid, COLOR_GREY, "Amount can be 1 or 0");
			if(!strcmp(inputtext, "Kevlar", true))
			{
				LockerInfo[lockerid][locKevlar][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_kevlar = %i WHERE id = %i", LockerInfo[lockerid][locKevlar][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Medkit", true))
			{
                LockerInfo[lockerid][locMedKit][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_medkit = %i WHERE id = %i", LockerInfo[lockerid][locMedKit][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Nitestick", true))
			{
                LockerInfo[lockerid][locNitestick][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_nitestick = %i WHERE id = %i", LockerInfo[lockerid][locNitestick][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Mace", true))
			{
                LockerInfo[lockerid][locMace][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_mace = %i WHERE id = %i", LockerInfo[lockerid][locMace][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
            else if(!strcmp(inputtext, "Deagle", true))
			{
                LockerInfo[lockerid][locDeagle][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_deagle = %i WHERE id = %i", LockerInfo[lockerid][locDeagle][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Shotgun", true))
			{
			    LockerInfo[lockerid][locShotgun][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_shotgun = %i WHERE id = %i", LockerInfo[lockerid][locShotgun][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "MP5", true))
			{
                LockerInfo[lockerid][locMP5][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_mp5 = %i WHERE id = %i", LockerInfo[lockerid][locMP5][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "M4", true))
			{
                LockerInfo[lockerid][locM4][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_m4 = %i WHERE id = %i", LockerInfo[lockerid][locM4][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Spas12", true))
			{
                LockerInfo[lockerid][locSpas12][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_spas12 = %i WHERE id = %i", LockerInfo[lockerid][locSpas12][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Sniper", true))
			{
                LockerInfo[lockerid][locSniper][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_sniper = %i WHERE id = %i", LockerInfo[lockerid][locSniper][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Camera", true))
			{
                LockerInfo[lockerid][locCamera][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_camera = %i WHERE id = %i", LockerInfo[lockerid][locCamera][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "FireExt", true))
			{
                LockerInfo[lockerid][locFireExt][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_fire_extinguisher = %i WHERE id = %i", LockerInfo[lockerid][locFireExt][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Painkillers", true))
			{
                LockerInfo[lockerid][locPainKillers][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_painkillers = %i WHERE id = %i", LockerInfo[lockerid][locPainKillers][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			SCMf(playerid, COLOR_GREY, "Locker %i's %s status set to %i", lockerid, inputtext, amount);
		}
		else if(!strcmp(opt2, "price", true))
		{
            if(!strcmp(inputtext, "Kevlar", true))
			{
				LockerInfo[lockerid][locKevlar][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_kevlar = %i WHERE id = %i", LockerInfo[lockerid][locKevlar], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Medkit", true))
			{
                LockerInfo[lockerid][locMedKit][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_medkit = %i WHERE id = %i", LockerInfo[lockerid][locMedKit], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Nitestick", true))
			{
                LockerInfo[lockerid][locNitestick][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_nitestick = %i WHERE id = %i", LockerInfo[lockerid][locNitestick][1], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Mace", true))
			{
                LockerInfo[lockerid][locMace][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_mace = %i WHERE id = %i", LockerInfo[lockerid][locMace][1], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
            else if(!strcmp(inputtext, "Deagle", true))
			{
                LockerInfo[lockerid][locDeagle][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_deagle = %i WHERE id = %i", LockerInfo[lockerid][locDeagle][1], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Shotgun", true))
			{
			    LockerInfo[lockerid][locShotgun][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_shotgun = %i WHERE id = %i", LockerInfo[lockerid][locShotgun][1], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "MP5", true))
			{
                LockerInfo[lockerid][locMP5][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_mp5 = %i WHERE id = %i", LockerInfo[lockerid][locMP5][1], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "M4", true))
			{
                LockerInfo[lockerid][locM4][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_m4 = %i WHERE id = %i", LockerInfo[lockerid][locM4][1], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Spas12", true))
			{
                LockerInfo[lockerid][locSpas12][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_spas12 = %i WHERE id = %i", LockerInfo[lockerid][locSpas12][1], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Sniper", true))
			{
                LockerInfo[lockerid][locSniper][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_sniper = %i WHERE id = %i", LockerInfo[lockerid][locSniper][1], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Camera", true))
			{
                LockerInfo[lockerid][locCamera][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_camera = %i WHERE id = %i", LockerInfo[lockerid][locCamera][1], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "FireExt", true))
			{
                LockerInfo[lockerid][locFireExt][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_fire_extinguisher = %i WHERE id = %i", LockerInfo[lockerid][locFireExt][1], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Painkillers", true))
			{
                LockerInfo[lockerid][locPainKillers][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_painkillers = %i WHERE id = %i", LockerInfo[lockerid][locPainKillers][1], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
		    SCMf(playerid, COLOR_GREY, "Locker %i's %s price set to %i", lockerid, inputtext, amount);
		}*/
	return 1;
}
CMD:removelocker(playerid, params[])
{
	new lockerid;

	if(pData[playerid][pAdmin] < 5 && !pData[playerid][pFactionMod])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", lockerid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removelocker [lockerid]");
	}
	if(!(0 <= lockerid < MAX_LOCKERS) || !LockerInfo[lockerid][lExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid locker.");
	}

	DestroyDynamic3DTextLabel(LockerInfo[lockerid][lText]);
	DestroyDynamicPickup(LockerInfo[lockerid][lPickup]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM factionlockers WHERE id = %i", LockerInfo[lockerid][lID]);
	mysql_tquery(connectionID, queryBuffer);

	LockerInfo[lockerid][lExists] = 0;
	LockerInfo[lockerid][lID] = 0;

	SCMf(playerid, COLOR_AQUA, "* You have removed locker %i.", lockerid);
	return 1;
}

CMD:gotolocker(playerid, params[])
{
	new lockerid;

	if(pData[playerid][pAdmin] < 4)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	if(sscanf(params, "i", lockerid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gotolocker [lockerid]");
	}
	if(!(0 <= lockerid < MAX_LOCKERS) || !LockerInfo[lockerid][lExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid locker.");
	}

	GameTextForPlayer(playerid, "~w~Teleported", 5000, 1);

	SetPlayerPos(playerid, LockerInfo[lockerid][lPosX], LockerInfo[lockerid][lPosY], LockerInfo[lockerid][lPosZ]);
	SetPlayerInterior(playerid, LockerInfo[lockerid][lInterior]);
	SetPlayerVirtualWorld(playerid, LockerInfo[lockerid][lWorld]);
	SetCameraBehindPlayer(playerid);
	return 1;
}
CMD:passport(playerid, params[])
{
	new name[24], level, skinid;

    if(pData[playerid][pPassport])
	{
  		Namechange(playerid, GetPlayerNameEx(playerid), pData[playerid][pPassportName]);
  		SetScriptSkin(playerid, pData[playerid][pPassportSkin]);
		SCM(playerid, COLOR_AQUA, "You have burned your passport and received your old name, clothes, level and number back.");

		pData[playerid][pLevel] = pData[playerid][pPassportLevel];
		pData[playerid][pPhone] = pData[playerid][pPassportPhone];
		pData[playerid][pPassport] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET passport = 0, passportname = 'None', passportlevel = 0, passportskin = 0, passportphone = 0, level = %i, phone = %i WHERE uid = %i", pData[playerid][pLevel], pData[playerid][pPhone], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}

	if(GetFactionType(playerid) != FACTION_HITMAN && GetFactionType(playerid) != FACTION_FEDERAL)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a hitman or federal agent.");
	}
	if(sscanf(params, "s[24]ii", name, level, skinid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /passport [name] [level] [skinid]");
	}
	if(!(3 <= strlen(name) <= 20))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Your name must range from 3 to 20 characters.");
	}
	if(strfind(name, "_") == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Your name needs to contain at least one underscore.");
	}
	if(!IsValidName(name))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid characters. Your name may only contain letters and underscores.");
	}
	if(pData[playerid][pAdminDuty])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You aren't allowed to change your name while on admin duty,");
	}
	if(!(1 <= level <= 10))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Your level must range from 1 to 10.");
	}
	if(!(0 <= skinid <= 311))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The skin ID must range from 0 to 311.");
	}
	if(!isnull(pData[playerid][pNameChange]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have already requested a namechange. Please wait for a response.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = '%e'", name);
	mysql_tquery(connectionID, queryBuffer, "OnHitmanPassport", "isii", playerid, name, level, skinid);
	return 1;
}

CMD:plantbomb(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_HITMAN)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a hitman.");
	}
	if(!pData[playerid][pBombs])
	{
		return SCM(playerid, COLOR_SYNTAX, "You don't have any bombs.");
	}
	if(pData[playerid][pPlantedBomb])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have planted a bomb already.");
	}
    if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't plant a bomb inside.");
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't plant a bomb while inside of a vehicle");
	}

	GetPlayerPos(playerid, pData[playerid][pBombX], pData[playerid][pBombY], pData[playerid][pBombZ]);
    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0);

	pData[playerid][pPlantedBomb] = 1;
	pData[playerid][pBombObject] = CreateDynamicObject(19602, pData[playerid][pBombX], pData[playerid][pBombY], pData[playerid][pBombZ] - 1.0, 0.0, 0.0, 0.0);
	pData[playerid][pBombs]--;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bombs = %i WHERE uid = %i", pData[playerid][pBombs], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SCM(playerid, COLOR_WHITE, "** Bomb has been planted, use /detonate to make it go BOOM!");
	return 1;
}

CMD:pickupbomb(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_HITMAN)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a hitman.");
	}
	if(!pData[playerid][pPlantedBomb])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You haven't planted a bomb which you can pickup.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, pData[playerid][pBombX], pData[playerid][pBombY], pData[playerid][pBombZ]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of your planted bomb.");
	}

    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0);
	DestroyDynamicObject(pData[playerid][pBombObject]);

    pData[playerid][pBombObject] = INVALID_OBJECT_ID;
	pData[playerid][pPlantedBomb] = 0;
	pData[playerid][pBombs]++;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bombs = %i WHERE uid = %i", pData[playerid][pBombs], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SCM(playerid, COLOR_WHITE, "** You have picked up your bomb.");
	return 1;
}

CMD:detonate(playerid, params[])
{
	if(!pData[playerid][pPlantedBomb])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You haven't planted a bomb which you can detonate.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 50.0, pData[playerid][pBombX], pData[playerid][pBombY], pData[playerid][pBombZ]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are too far away from your planted bomb.");
	}

	CreateExplosion(pData[playerid][pBombX], pData[playerid][pBombY], pData[playerid][pBombZ], 11, 10.0);
    DestroyDynamicObject(pData[playerid][pBombObject]);

	if(pData[playerid][pContractTaken] != INVALID_PLAYER_ID && IsPlayerInRangeOfPoint(pData[playerid][pContractTaken], 10.0, pData[playerid][pBombX], pData[playerid][pBombY], pData[playerid][pBombZ]))
	{
	    SetPlayerHealth(pData[playerid][pContractTaken], 0.0);
	    HandleContract(pData[playerid][pContractTaken], playerid);
	}

    pData[playerid][pBombObject] = INVALID_OBJECT_ID;
	pData[playerid][pPlantedBomb] = 0;

	SCM(playerid, COLOR_WHITE, "** You have detonated your bomb!");
	return 1;
}

CMD:saveaccounts(playerid, params[])
{
	if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
    if(gettime() - gLastSave < 359 && pData[playerid][pAdmin] < 7)
	{
	    return SM(playerid, COLOR_SYNTAX, "This command can only be used every 6 minutes. Please wait %i more seconds.", 359 - (gettime() - gLastSave));
	}
	foreach(new i : Player)
	{
	    SavePlayerVariables(i);
	}
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has saved all player accounts.", GetRPName(playerid));
	gLastSave = gettime();
	return 1;
}
CMD:forcesave(playerid, params[]) return callcmd::saveaccounts(playerid, params);
CMD:saveall(playerid, params[]) return callcmd::saveaccounts(playerid, params);
CMD:adestroyboombox(playerid, params[])
{
	new boomboxid;

	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if((boomboxid = GetNearbyBoombox(playerid)) == INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is no boombox in range.");
	}

	SM(playerid, COLOR_AQUA, "You have destroyed "SVRCLR"%s{CCFFFF}'s boombox.", GetRPName(boomboxid));
	DestroyBoombox(boomboxid);

	return 1;
}

//Rob Commands for admins - Stewart
CMD:setbanktimer(playerid, params[])
{
	new hours;
	new rows = cache_get_row_count(connectionID);

    if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", hours))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setbanktimer [hours]");
	}
	if(hours < 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Hours can't be below 0.");
	}

	RobberyInfo[rTime] = hours;
	for(new i = 0; i < rows && i < MAX_ENTRANCES; i ++)
	{
		ReloadEntrance(i);
	}
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has reset the bank robbery timer to %i hours.", GetRPName(playerid), hours);
	return 1;
}
CMD:resetactiverobbery(playerid, params[])
{
    if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	ResetRobbery();
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has reset the active bank robbery.", GetRPName(playerid));
	return 1;
}
CMD:resetrobbery(playerid, params[])
{
	new rows = cache_get_row_count(connectionID);
	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	RobberyInfo[rTime] = 0;
	for(new i = 0; i < rows && i < MAX_ENTRANCES; i ++)
	{
		ReloadEntrance(i);
	}
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has reset the bank robbery timer.", GetRPName(playerid));
	return 1;
}
CMD:resetchop(playerid, params[])
{
	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	ChopInfo[cTime] = 0;
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has reset the chop chop timer.", GetRPName(playerid));
	return 1;
}
CMD:resetrob(playerid, params[])
{
	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	RobInfo[rTime] = 0;
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has reset the robbery timer.", GetRPName(playerid));
	return 1;
}
CMD:resetrobbiz(playerid, params[])
{
	new businessid;
	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_GREY2, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", businessid))
	{
	    SCM(playerid, COLOR_GREY2, "Usage: /resetrobbiz [businessid]");
	    return 1;
	}
	BusinessInfo[businessid][bRobbed] = 0;
	BusinessInfo[businessid][bRobbing] = 0;
	ReloadBusiness(businessid);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET robbed = %i, robbing = %i WHERE id = %i", BusinessInfo[businessid][bRobbed], BusinessInfo[businessid][bRobbing], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has reset business (ID: %d) the business robbery timer.", GetRPName(playerid), businessid);
	return 1;
}
CMD:resetrobhouse(playerid, params[])
{
	new businessid;
	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_GREY2, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", businessid))
	{
	    SCM(playerid, COLOR_GREY2, "Usage: /resetrobhouse [businessid]");
	    return 1;
	}
	HouseInfo[businessid][hRobbed] = 0;
	HouseInfo[businessid][hRobbing] = 0;
	ReloadHouse(businessid);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET robbed = %i, robbing = %i WHERE id = %i", HouseInfo[businessid][hRobbed], HouseInfo[businessid][hRobbing], HouseInfo[businessid][hID]);
	mysql_tquery(connectionID, queryBuffer);

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has reset house (ID: %d) the house robbery timer.", GetRPName(playerid), businessid);
	return 1;
}

CMD:givepayday(playerid, params[])
{
    new targetid;

	if(pData[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /givepayday [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	SendPaycheck(targetid);
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has forced a payday for %s.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:givepveh(playerid, params[])
{
	new model[20], modelid, targetid, color1, color2, Float:x, Float:y, Float:z, Float:a;

	if(pData[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[20]ii", targetid, model, color1, color2))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /givepveh [playerid] [modelid/name] [color1] [color2]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if((modelid = GetVehicleModelByName(model)) == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid vehicle model.");
	}
	if(!(0 <= color1 <= 255) || !(0 <= color2 <= 255))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid color. Valid colors range from 0 to 255.");
	}

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO vehicles (ownerid, owner, modelid, pos_x, pos_y, pos_z, pos_a, color1, color2) VALUES(%i, '%s', %i, '%f', '%f', '%f', '%f', %i, %i)", pData[targetid][pID], GetPlayerNameEx(targetid), modelid, x + 2.0 * floatsin(-a, degrees), y + 2.0 * floatcos(-a, degrees), z, a, color1, color2);
	mysql_tquery(connectionID, queryBuffer);

	SM(targetid, COLOR_AQUA, "%s has given you your own "SVRCLR"%s{CCFFFF}...", GetRPName(playerid), vehicleNames[modelid - 400]);
	SM(playerid, COLOR_AQUA, "You have given %s their own "SVRCLR"%s{CCFFFF}.", GetRPName(targetid), vehicleNames[modelid - 400]);

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has given %s their own %s.", GetRPName(playerid), GetRPName(targetid), vehicleNames[modelid - 400]);
	Log_Write("log_admin", "%s (uid: %i) has given %s (uid: %i) their own %s.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], vehicleNames[modelid - 400]);
	return 1;
}

CMD:givedoublexp(playerid, params[])
{
	new targetid, hours;

    if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "ui", targetid, hours))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /givedoublexp [playerid] [hours]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(hours < 1 && pData[targetid][pDoubleXP] - hours < 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player can't have under 0 hours of double XP.");
	}

	pData[targetid][pDoubleXP] += hours;

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has given %i hours of double XP to %s.", GetRPName(playerid), hours, GetRPName(targetid));
	SM(targetid, COLOR_YELLOW, "%s has given you %i hours of double XP.", GetRPName(playerid), hours);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET doublexp = %i WHERE uid = %i", pData[targetid][pDoubleXP], pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}

CMD:randomfire(playerid, params[])
{
    if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(IsFireActive())
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is a fire active already. /killfire to kill it!");
	}

	new
	    Float:x,
	    Float:y,
	    Float:z;

	RandomFire(0);

	GetDynamicObjectPos(gFireObjects[0], x, y, z);
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has started a random fire in %s.", GetRPName(playerid), GetZoneName(x, y, z));
	return 1;
}

CMD:killfire(playerid, params[])
{
    if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!IsFireActive())
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is currently no fire active.");
	}

	for(new i = 0; i < MAX_FIRES; i ++)
	{
	    DestroyDynamicObject(gFireObjects[i]);
	    gFireObjects[i] = INVALID_OBJECT_ID;
	    gFireHealth[i] = 0.0;
	}

	gFires = 0;
	SCM(playerid, COLOR_SYNTAX, "Active fire killed.");
	return 1;
}

CMD:spawnfire(playerid, params[])
{
	new Float:px, Float:py, Float:pz;

    if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't create fires indoors.");
	}

	for(new x = 0; x < MAX_FIRES; x ++)
	{
	    if(gFireObjects[x] == INVALID_OBJECT_ID)
	    {
	        GetPlayerPos(playerid, px, py, pz);

	        if(!IsFireActive())
	        {
	            foreach(new i : Player)
	            {
	                if(GetFactionType(i) == FACTION_MEDIC)
	                {
	            		pData[i][pCP] = CHECKPOINT_MISC;
               			SetPlayerCheckpoint(i, px, py, pz, 3.0);
		   				SM(i, COLOR_DOCTOR, "** All units, a fire has been reported in %s. Please head to the beacon on your map. **", GetZoneName(px, py, pz));
					}
	            }
	        }

	        gFireObjects[x] = CreateDynamicObject(18691, px, py, pz - 2.4, 0.0, 0.0, 0.0, .streamdistance = 50.0);
	        gFireHealth[x] = 50.0;
			gFires++;

			return SCM(playerid, COLOR_SYNTAX, "Fire created!");
		}
	}

	SM(playerid, COLOR_SYNTAX, "You can't create anymore fires. The limit is %i fires.", MAX_FIRES);
	return 1;
}

CMD:number(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /number [playerid]");
	}
	if(!pData[playerid][pPhonebook])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you don't have a phonebook.");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	SM(playerid, COLOR_GREY2, "(Name): %s, (Ph): %i", GetRPName(targetid), pData[targetid][pPhone]);
	return 1;
}

CMD:boombox(playerid, params[])
{
	new option[10], param[128];

	if(!pData[playerid][pBoombox])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have no boombox and therefore can't use this command.");
	}
	if(sscanf(params, "s[10]S()[128]", option, param))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /boombox [place | pickup | play]");
	}
	if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pJailTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command from within the vehicle.");
	}

	if(!strcmp(option, "place", true))
	{
	    if(pData[playerid][pBoomboxPlaced])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have placed down a boombox already.");
	    }
	    if(GetNearbyBoombox(playerid) != INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "There is already a boombox nearby. Place this one somewhere else.");
        }

		new
		    Float:x,
	    	Float:y,
	    	Float:z,
	    	Float:a,
			string[128];

		format(string, sizeof(string), "Boombox placed by:\n"SVRCLR"%s{F7A763}\n/boombox for more options.", GetPlayerNameEx(playerid));

		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);

	    pData[playerid][pBoomboxPlaced] = 1;
    	pData[playerid][pBoomboxObject] = CreateDynamicObject(2102, x, y, z - 1.0, 0.0, 0.0, a, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
    	pData[playerid][pBoomboxText] = CreateDynamic3DTextLabel(string, COLOR_LIGHTORANGE, x, y, z - 0.8, 10.0, .worldid = GetPlayerVirtualWorld(playerid), .interiorid = GetPlayerInterior(playerid));
        pData[playerid][pBoomboxURL] = 0;

    	ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s places a boombox on the ground.", GetRPName(playerid));
	}
	else if(!strcmp(option, "pickup", true))
	{
	    if(!pData[playerid][pBoomboxPlaced])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have not placed down a boombox.");
	    }
	    if(!IsPlayerInRangeOfDynamicObject(playerid, pData[playerid][pBoomboxObject], 3.0))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You are not in range of your boombox.");
		}

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s picks up their boombox and switches it off.", GetRPName(playerid));
		DestroyBoombox(playerid);
	}
    else if(!strcmp(option, "play", true))
	{
        if(!pData[playerid][pBoomboxPlaced])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have not placed down a boombox.");
	    }
	    if(!IsPlayerInRangeOfDynamicObject(playerid, pData[playerid][pBoomboxObject], 3.0))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You are not in range of your boombox.");
		}

    	pData[playerid][pMusicType] = MUSIC_BOOMBOX;
    	ShowDialogToPlayer(playerid, DIALOG_MP3PLAYER);
	}

	return 1;
}

/*CMD:switchspeedo(playerid, params[])
{
	if(isnull(params))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /switchspeedo [kmh/mph]");
	}
	else if(!strcmp(params, "kmh", true))
	{
		pData[playerid][pSpeedometer] = 1;
		SCM(playerid, COLOR_AQUA, "Your speedometer will now display speed as "SVRCLR"Kilometers per hour{CCFFFF}.");

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET speedometer = 1 WHERE uid = %i", pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(params, "mph", true))
	{
		pData[playerid][pSpeedometer] = 2;
		SCM(playerid, COLOR_AQUA, "Your speedometer will now display speed as "SVRCLR"Miles per hour{CCFFFF}.");

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET speedometer = 2 WHERE uid = %i", pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}

	return 1;
}*/

CMD:shakehand(playerid, params[])
{
	new targetid, type;

	if(sscanf(params, "ui", targetid, type))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /shakehand [playerid] [type (1-6)]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't shake your own hand.");
	}
	if(!(1 <= type <= 6))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid type. Valid types range from 1 to 6.");
	}

	pData[targetid][pShakeOffer] = playerid;
	pData[targetid][pShakeType] = type;

	SM(targetid, COLOR_AQUA, "** %s has offered to shake your hand. (/accept handshake)", GetRPName(playerid));
	SM(playerid, COLOR_AQUA, "** You have sent %s a handshake offer.", GetRPName(targetid));
	return 1;
}
CMD:dropgun(playerid, params[])
{
	new weaponid = GetScriptWeapon(playerid), objectid, Float:x, Float:y, Float:z;

	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need to be onfoot in order to drop weapons.");
	}
	if(!weaponid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be holding the weapon you're willing to drop.");
	}
    if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pJailTime] > 0 || pData[playerid][pJoinedEvent] > 0 || pData[playerid][pDueling] != INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}
	if(GetHealth(playerid) < 60)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't drop weapons as your health is below 60.");
	}

	GetPlayerPos(playerid, x, y, z);

	objectid = CreateDynamicObject(weaponModelIDs[weaponid], x, y, z - 1.0, 93.7, 93.7, 120.0);
	new str[92];
	format(str, sizeof(str), "%s\nType '/grabgun' to grab this weapon.", GetWeaponNameEx(weaponid));
	Streamer_SetExtraInt(objectid, E_OBJECT_3DTEXT_ID, _:CreateDynamic3DTextLabel(str, -1, x, y, z - 1.0, 20.0, .worldid = GetPlayerVirtualWorld(playerid), .interiorid = GetPlayerInterior(playerid)));
	Streamer_SetExtraInt(objectid, E_OBJECT_TYPE, E_OBJECT_WEAPON);
	Streamer_SetExtraInt(objectid, E_OBJECT_WEAPONID, weaponid);
	Streamer_SetExtraInt(objectid, E_OBJECT_FACTION, pData[playerid][pFaction]);
	RemovePlayerWeapon(playerid, weaponid);

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s drops their %s on the ground.", GetRPName(playerid), GetWeaponNameEx(weaponid));
	SM(playerid, COLOR_AQUA, "You have dropped your "SVRCLR"%s{CCFFFF}.", GetWeaponNameEx(weaponid));
	return 1;
}

CMD:pickupgun(playerid, params[]) return callcmd::grabgun(playerid, params);
CMD:grabgun(playerid, params[])
{
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need to be onfoot in order to pickup weapons.");
	}
    if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pJailTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}
    if(pData[playerid][pWeaponRestricted] > 0)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are either weapon restricted or you played less than two playing hours.");
    }

	for(new i = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i <= j; i ++)
	{
	    if(!IsValidDynamicObject(i) || !IsPlayerInRangeOfDynamicObject(playerid, i, 2.0) || Streamer_GetExtraInt(i, E_OBJECT_TYPE) != E_OBJECT_WEAPON)
			continue;

	    if(Streamer_GetExtraInt(i, E_OBJECT_FACTION) >= 0 && pData[playerid][pFaction] != Streamer_GetExtraInt(i, E_OBJECT_FACTION))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This weapon belongs to a specific faction. You may not pick it up.");
	    }

	    new weaponid = Streamer_GetExtraInt(i, E_OBJECT_WEAPONID);
	    new Text3D:textid = Text3D:Streamer_GetExtraInt(i, E_OBJECT_3DTEXT_ID);

	    GiveWeapon(playerid, weaponid);
	    DestroyDynamicObject(i);
        if(IsValidDynamic3DTextLabel(textid))
        {
            DestroyDynamic3DTextLabel(textid);
        }
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s picks up a %s from the ground.", GetRPName(playerid), GetWeaponNameEx(weaponid));
	    SM(playerid, COLOR_AQUA, "You have picked up a %s.", GetWeaponNameEx(weaponid));
	    return 1;
	}

	SCM(playerid, COLOR_SYNTAX, "You are not in range of any dropped weapons.");
	return 1;
}

CMD:createland(playerid, params[])
{
	new price;

    if(pData[playerid][pAdmin] < 6)
	    return SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command.");

	if(sscanf(params, "i", price))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /createland [price]");
	}
	if(price < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $500,000.");
	}
	if(GetNearbyLand(playerid) >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is a land in range. Find somewhere else to create this one.");
	}
	if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot create lands indoors.");
	}

	pData[playerid][pLandCost] = price;
	pData[playerid][pZoneType] = ZONETYPE_LAND;
	ShowPlayerDialog(playerid, DIALOG_CREATEZONE, DIALOG_STYLE_MSGBOX, "Land System", "You have entered land creation mode. In order to create a land you need\nto mark four points around the area you want your land to be in, forming\na square. You must make a square or your outcome won't be as expected.\n\nPress "SVRCLR"Confirm{A9C4E4} to set the land spawn.", "Confirm", "Cancel");
	return 1;
}

CMD:confirm(playerid, params[])
{
	new Float:x, Float:y, Float:z;

	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pZoneCreation])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not creating any turf at the moment.");
	}

    if(pData[playerid][pMinX] == 0.0)
	{
        GetPlayerPos(playerid, pData[playerid][pMinX], y, z);
        pData[playerid][pZonePickups][0] = CreateDynamicPickup(1239, 1, pData[playerid][pMinX], y, z, .playerid = playerid);
		SCM(playerid, COLOR_WHITE, "** Boundary 1/4 set (min X).");
	}
	else if(pData[playerid][pMinY] == 0.0)
	{
        GetPlayerPos(playerid, x, pData[playerid][pMinY], z);
        pData[playerid][pZonePickups][1] = CreateDynamicPickup(1239, 1, x, pData[playerid][pMinY], z, .playerid = playerid);
        SCM(playerid, COLOR_WHITE, "** Boundary 2/4 set (min Y).");
	}
	else if(pData[playerid][pMaxX] == 0.0)
	{
        GetPlayerPos(playerid, pData[playerid][pMaxX], y, z);
        pData[playerid][pZonePickups][2] = CreateDynamicPickup(1239, 1, pData[playerid][pMaxX], y, z, .playerid = playerid);
        SCM(playerid, COLOR_WHITE, "** Boundary 3/4 set (max X).");
	}
	else if(pData[playerid][pMaxY] == 0.0)
	{
        GetPlayerPos(playerid, x, pData[playerid][pMaxY], z);
        SCM(playerid, COLOR_WHITE, "** Boundary 4/4 set (max Y).");

        pData[playerid][pZonePickups][3] = CreateDynamicPickup(1239, 1, x, pData[playerid][pMaxY], z, .playerid = playerid);
        pData[playerid][pZoneID] = GangZoneCreate(pData[playerid][pMinX], pData[playerid][pMinY], pData[playerid][pMaxX], pData[playerid][pMaxY]);

        GangZoneShowForPlayer(playerid, pData[playerid][pZoneID], 0x33CC33FF);

		if(pData[playerid][pZoneCreation] == ZONETYPE_LAND) {
	        ShowPlayerDialog(playerid, DIALOG_CONFIRMZONE, DIALOG_STYLE_MSGBOX, "Land System", "You have set the four boundary points. The green zone on your mini-map\nrepresents the area of your land. You can choose to start over or complete\nthe creation of your land.\n\nWhat would you like to do now?", "Create", "Restart");
		} else if(pData[playerid][pZoneCreation] == ZONETYPE_TURF) {
	        ShowPlayerDialog(playerid, DIALOG_CONFIRMZONE, DIALOG_STYLE_MSGBOX, "Turf System", "You have set the four boundary points. The green zone on your mini-map\nrepresents the area of your turf. You can choose to start over or complete\nthe creation of your turf.\n\nWhat would you like to do now?", "Create", "Restart");
		}
	}

	return 1;
}

CMD:landcancel(playerid, params[])
{
    if (pData[playerid][pAdmin] < 6)
	    return SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command.");

	if(pData[playerid][pZoneCreation] != ZONETYPE_LAND)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not creating a land at the moment.");
	}

	CancelZoneCreation(playerid);
	SCM(playerid, COLOR_LIGHTRED, "** Land creation cancelled.");
	return 1;
}

CMD:gotoland(playerid, params[])
{
	new landid;

	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", landid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gotoland [landid]");
	}
	if(!(0 <= landid < MAX_LANDS) || !LandInfo[landid][lExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid land.");
	}

	GameTextForPlayer(playerid, "~w~Teleported", 5000, 1);

	SetPlayerPos(playerid, LandInfo[landid][lX], LandInfo[landid][lY], LandInfo[landid][lZ]);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:removelandobjects(playerid, params[])
{
	new landid;

    if (pData[playerid][pAdmin] < 6)
	    return SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command.");

	if(sscanf(params, "i", landid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /removelandobjects [landid]");
	}
	if(!(0 <= landid < MAX_LANDS) || !LandInfo[landid][lExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid land.");
	}

	RemoveAllLandObjects(landid);
    SM(playerid, COLOR_AQUA, "** You have removed all land objects for land %i.", landid);
	return 1;
}

CMD:removeland(playerid, params[])
{
	new landid;

    if (pData[playerid][pAdmin] < 6)
	    return SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command.");

	if(sscanf(params, "i", landid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /removeland [landid]");
	}
	if(!(0 <= landid < MAX_LANDS) || !LandInfo[landid][lExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid land.");
	}
	RemoveAllLandObjects(landid);

	GangZoneDestroy(LandInfo[landid][lGangZone]);
	DestroyDynamicArea(LandInfo[landid][lArea]);
	DestroyDynamic3DTextLabel(LandInfo[landid][lText]);
	DestroyDynamicPickup(LandInfo[landid][lPickup]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM lands WHERE id = %i", LandInfo[landid][lID]);
	mysql_tquery(connectionID, queryBuffer);

	LandInfo[landid][lID] = 0;
	LandInfo[landid][lExists] = 0;
	LandInfo[landid][lOwnerID] = 0;

    SM(playerid, COLOR_AQUA, "** You have removed land %i.", landid);
	return 1;
}

CMD:buyland(playerid, params[])
{
	new landid = GetNearbyLand(playerid);

	if(landid == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not in range of any lands.");
    }
    if(LandInfo[landid][lOwnerID] > 0)
    {
        return SCM(playerid, COLOR_SYNTAX, "This land is already owned.");
	}
    if(strcmp(params, "confirm", true))
    {
        return SM(playerid, COLOR_SYNTAX, "Usage: /buyland [confirm] (This land costs $%i.)", LandInfo[landid][lPrice]);
	}
	if(pData[playerid][pCash] < LandInfo[landid][lPrice])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this land.");
	}

    SetLandOwner(landid, playerid);
	GivePlayerCash(playerid, -LandInfo[landid][lPrice]);

	SM(playerid, COLOR_YELLOW, "You paid $%i for this land! /landhelp to see the available commands for your land.", LandInfo[landid][lPrice]);
	Log_Write("log_property", "%s (uid: %i) purchased a land (id: %i) in %s for $%i.", GetPlayerNameEx(playerid), pData[playerid][pID], LandInfo[landid][lID], GetPlayerZoneName(playerid), LandInfo[landid][lPrice]);
	return 1;
}

CMD:sellland(playerid, params[])
{
	new landid = GetNearbyLand(playerid), targetid, amount;

    if(landid == -1 || !IsLandOwner(playerid, landid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not in range of any lands of yours.");
    }
    if(sscanf(params, "ui", targetid, amount))
    {
        return SCM(playerid, COLOR_SYNTAX, "Usage: /sellland [playerid] [amount]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't sell to yourself.");
	}
	if(amount < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must specify an amount above zero.");
	}

	pData[targetid][pLandOffer] = playerid;
	pData[targetid][pLandOffered] = landid;
	pData[targetid][pLandPrice] = amount;

	SM(targetid, COLOR_AQUA, "** %s offered you to buy their land for $%i. (/accept land)", GetRPName(playerid), amount);
	SM(playerid, COLOR_AQUA, "** You offered %s to buy your land for $%i.", GetRPName(targetid), amount);
	return 1;
}

CMD:sellmyland(playerid, params[])
{
	new landid = GetNearbyLand(playerid);

    if(landid == -1 || !IsLandOwner(playerid, landid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not in range of any lands of yours.");
    }
	if(strcmp(params, "confirm", true) != 0)
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /sellmyland [confirm]");
	    SM(playerid, COLOR_WHITE, "This command sells your land back to the state. You will receive $%i back.", percent(LandInfo[landid][lPrice], 75));
	    return 1;
	}

	SetLandOwner(landid, INVALID_PLAYER_ID);
	GivePlayerCash(playerid, percent(LandInfo[landid][lPrice], 75));

	SM(playerid, COLOR_YELLOW, "You have sold your land to the state and received $%i back.", percent(LandInfo[landid][lPrice], 75));
    Log_Write("log_property", "%s (uid: %i) sold their land (id: %i) to the state for $%i", GetPlayerNameEx(playerid), pData[playerid][pID], LandInfo[landid][lID], percent(LandInfo[landid][lPrice], 75));
	return 1;
}

CMD:landinfo(playerid, params[])
{
    new landid = GetNearbyLand(playerid);

	if(landid == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not in range of any lands.");
    }

    if(!LandInfo[landid][lOwnerID])
	{
        SM(playerid, COLOR_WHITE, "** This land is currently not owned and is for sale, price: "SVRCLR"$%i"WHITE".", LandInfo[landid][lPrice]);
	}
	else if(!IsLandOwner(playerid, landid))
	{
	    SM(playerid, COLOR_WHITE, "** This land is owned by %s.", LandInfo[landid][lOwner]);
	}
	else
	{
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM landobjects WHERE landid = %i", LandInfo[landid][lID]);
    	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LAND_INFORMATION, playerid);
	}

	return 1;
}

CMD:land(playerid, params[])
{
	new landid = GetNearbyLand(playerid);

	if(landid == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not in range of a land.");
    }
    if(!HasLandPerms(playerid, landid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You don't have permission to build in this land.");
	}

	ShowDialogToPlayer(playerid, DIALOG_LANDMENU);
	return 1;
}

CMD:mp3(playerid, params[])
{
	if(!pData[playerid][pMP3Player])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have an MP3 player.");
	}

	pData[playerid][pMusicType] = MUSIC_MP3PLAYER;
	ShowDialogToPlayer(playerid, DIALOG_MP3PLAYER);
	return 1;
}

CMD:setradio(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in any vehicle.");
	}

	pData[playerid][pMusicType] = MUSIC_VEHICLE;
	ShowDialogToPlayer(playerid, DIALOG_MP3PLAYER);
	return 1;
}

/*CMD:changename(playerid, params[])
{
	if(!pData[playerid][pDonator])
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you don't have a VIP subscription.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 2703.8176, -596.6273, -72.1423))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the desk at city hall.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /changename [new name]");
	}
	if(!(3 <= strlen(params) <= 20))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Your name must range from 3 to 20 characters.");
	}
	if(strfind(params, "_") == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Your name needs to contain at least one underscore.");
	}
	if(!IsValidName(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid characters. Your name may only contain letters and underscores.");
	}
	if(pData[playerid][pCash] < pData[playerid][pLevel] * 50000)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need at least $%i to change your name at your level.", pData[playerid][pLevel] * 500);
	}
	if(pData[playerid][pAdminDuty])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You aren't allowed to change your name while on admin duty,");
	}

    pData[playerid][pFreeNamechange] = 0;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = '%e'", params);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerAttemptNameChange", "is", playerid, params);
	return 1;
}*/

CMD:acceptname(playerid, params[])
{
    new targetid;

	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /acceptname [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(isnull(pData[targetid][pNameChange]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't requested a namechange.");
	}
	if(pData[targetid][pFreeNamechange] == 0 && pData[targetid][pCash] < pData[targetid][pLevel] * 7500)
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player can't afford the namechange.");
	}

	new cost = pData[targetid][pLevel] * 500;

	if(pData[targetid][pFreeNamechange])
	{
	    if(pData[targetid][pFreeNamechange] == 2 && (GetFactionType(targetid) == FACTION_HITMAN || GetFactionType(targetid) == FACTION_FEDERAL))
	    {
	        GetPlayerName(targetid, pData[targetid][pPassportName], MAX_PLAYER_NAME);

	        pData[targetid][pPassport] = 1;
	        pData[targetid][pPassportLevel] = pData[targetid][pLevel];
	        pData[targetid][pPassportSkin] = pData[targetid][pSkin];
	        pData[targetid][pPassportPhone] = pData[targetid][pPhone];
			pData[targetid][pLevel] = pData[targetid][pChosenLevel];
			pData[targetid][pSkin] = pData[targetid][pChosenSkin];
			pData[targetid][pPhone] = random(100000) + 899999;

			SetPlayerSkin(targetid, pData[targetid][pSkin]);
			Log_Write("log_faction", "%s (uid: %i) used the /passport command to change their name to %s, level to %i and skin to %i.", GetPlayerNameEx(targetid), pData[targetid][pID], pData[targetid][pNameChange], pData[targetid][pLevel], pData[targetid][pSkin]);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET level = %i, skin = %i, phone = %i, passport = 1, passportname = '%s', passportlevel = %i, passportskin = %i, passportphone = %i WHERE uid = %i", pData[targetid][pLevel], pData[targetid][pSkin], pData[targetid][pPhone], pData[targetid][pPassportName], pData[targetid][pPassportLevel], pData[targetid][pPassportSkin], pData[targetid][pPassportPhone], pData[targetid][pID]);
			mysql_tquery(connectionID, queryBuffer);
	    }

		Log_Write("log_admin", "%s (uid: %i) accepted %s's (uid: %i) free namechange to %s.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], pData[targetid][pNameChange]);
		Log_Write("log_namechanges", "%s (uid: %i) accepted %s's (uid: %i) free namechange to %s.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], pData[targetid][pNameChange]);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has accepted %s's free namechange to %s.", GetRPName(playerid), GetRPName(targetid), pData[targetid][pNameChange]);
		SM(targetid, COLOR_YELLOW, "Your namechange request to %s was approved for free.", pData[targetid][pNameChange]);
		if(!pData[playerid][pLogged])
		{
  			ShowDialogToPlayer(targetid, DIALOG_REGISTER);
		}
		if(pData[targetid][pFreeNamechange] == 2)
		{
		    SCM(targetid, COLOR_WHITE, "** You can use /passport again to return to your old name and stats.");
		}
	}
	else
	{
	    Log_Write("log_admin", "%s (uid: %i) accepted %s's (uid: %i) namechange to %s for $%i.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], pData[targetid][pNameChange], cost);
		Log_Write("log_namechanges", "%s (uid: %i) accepted %s's (uid: %i) namechange to %s for $%i.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], pData[targetid][pNameChange], cost);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has accepted %s's namechange to %s for %s.", GetRPName(playerid), GetRPName(targetid), pData[targetid][pNameChange], FormatNumber(cost));
		SM(targetid, COLOR_YELLOW, "Your namechange request to %s was approved for %s.", pData[targetid][pNameChange], FormatNumber(cost));

        GivePlayerCash(targetid, -cost);
	}
	Namechange(targetid, GetPlayerNameEx(targetid), pData[targetid][pNameChange]);
	pData[targetid][pNameChange] = 0;
	pData[targetid][pFreeNamechange] = 0;
	return 1;
}


CMD:denyname(playerid, params[])
{
    new targetid;

	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /denyname [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(isnull(pData[targetid][pNameChange]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't requested a namechange.");
	}

	if(pData[targetid][pFreeNamechange])
	{
	    ShowPlayerDialog(targetid, DIALOG_FREENAMECHANGE, DIALOG_STYLE_INPUT, "Non-RP Name", "An administrator has came to the conclusion that your name is non-RP.\nTherefore you have been given this free namechange in order to correct it.\n\nEnter a name in the Firstname_Lastname format in the box below:", "Submit", "Cancel");
	}

    Log_Write("log_admin", "%s (uid: %i) denied %s's (uid: %i) namechange to %s.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], pData[targetid][pNameChange]);

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has denied %s's namechange to %s.", GetRPName(playerid), GetRPName(targetid), pData[targetid][pNameChange]);
	SM(targetid, COLOR_LIGHTRED, "Your namechange request to %s was denied.", pData[targetid][pNameChange]);

	pData[targetid][pNameChange] = 0;
	pData[targetid][pFreeNamechange] = 0;
	return 1;
}

CMD:namechanges(playerid, params[])
{
    if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	SCM(playerid, SERVER_COLOR, "Pending Namechanges:");

	foreach(new i : Player)
	{
	    if(!isnull(pData[i][pNameChange]))
	    {
	        SM(playerid, COLOR_GREY1, "(ID: %i) %s - Requested name: %s", i, GetRPName(i), pData[i][pNameChange]);
		}
	}

	return 1;
}

CMD:paytickets(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), amount;

	if(!vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside of any vehicle of yours.");
	}
	if(!IsVehicleOwner(playerid, vehicleid) && pData[playerid][pVehicleKeys] != vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as this vehicle doesn't belong to you.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SM(playerid, COLOR_SYNTAX, "Usage: /paytickets [amount] (There is $%i in unpaid tickets.)", VehicleInfo[vehicleid][vTickets]);
	}
	if(amount < 1 || amount > pData[playerid][pCash])
	{
		return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
	}
	if(amount > VehicleInfo[vehicleid][vTickets])
	{
	    return SCM(playerid, COLOR_SYNTAX, "There isn't that much in unpaid tickets to pay.");
	}

    VehicleInfo[vehicleid][vTickets] -= amount;
	GivePlayerCash(playerid, -amount);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET tickets = %i WHERE id = %i", VehicleInfo[vehicleid][vTickets], VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(playerid, COLOR_AQUA, "You have paid $%i in unpaid tickets. This vehicle now has $%i left in unpaid tickets.", amount, VehicleInfo[vehicleid][vTickets]);
	return 1;
}

CMD:getcrate(playerid, params[])
{
	if(pData[playerid][pGang] == -1)
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a gang member.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 415.5813,-1726.8542,9.0025))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the smuggle point.");
	}
	if(pData[playerid][pCP] != CHECKPOINT_NONE)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must cancel your active checkpoint first. /cancelcp to cancel it.");
	}
	if(pData[playerid][pCash] < 75)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have enough money.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /getcrate [seeds | ephedrine]");
	}

	if(!strcmp(params, "seeds", true))
	{
	    pData[playerid][pSmuggleDrugs] = 1;
	    pData[playerid][pSmuggleTime] = gettime();
	    pData[playerid][pCP] = CHECKPOINT_DRUGS;

	    GivePlayerCash(playerid, -75);
	    AddPointMoney(POINT_DRUGFACTORY, 75);

	    SetPlayerCheckpoint(playerid, 2167.7371, -1670.6298, 15.0804, 3.0);
	    SCM(playerid, COLOR_AQUA, "You have paid $75 for a package of marijuana seeds. Deliver it to the marker.");
	}
	/*else if(!strcmp(params, "crack", true))
	{
	    pData[playerid][pSmuggleDrugs] = 2;
	    pData[playerid][pSmuggleTime] = gettime();
	    pData[playerid][pCP] = CHECKPOINT_DRUGS;

	    GivePlayerCash(playerid, -75);
	    AddPointMoney(POINT_DRUGFACTORY, 75);

	    SetPlayerCheckpoint(playerid, 2349.7727, -1169.6304, 28.0243, 3.0);
	    SCM(playerid, COLOR_AQUA, "You have paid $75 for a package of Crack. Deliver it to the marker.");
	}*/
	else if(!strcmp(params, "ephedrine", true))
	{
	    pData[playerid][pSmuggleDrugs] = 3;
	    pData[playerid][pSmuggleTime] = gettime();
	    pData[playerid][pCP] = CHECKPOINT_DRUGS;

	    GivePlayerCash(playerid, -75);
	    AddPointMoney(POINT_DRUGFACTORY, 75);

	    SetPlayerCheckpoint(playerid, 2167.7371, -1670.6298, 15.0804, 3.0);
	    SCM(playerid, COLOR_AQUA, "You have paid $75 for a package of raw ephedrine. Deliver it to the marker.");
	}

	return 1;
}

CMD:getdrug(playerid, params[])
{
	new option[10], amount, cost;
	if(pData[playerid][pGang] == -1)
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a gang member.");
	}

	if(sscanf(params, "s[10]i", option, amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /getdrug [seeds(pot) | Crack | ephedrine(raw meth)] [amount]");
	}

	if(!strcmp(option, "seeds", true))
	{
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, 323.7289, 1117.4187, 1083.8828))
		{
		    return SCM(playerid, COLOR_SYNTAX, "You are not inside of the drug den.");
		}
		if(amount < 1 || amount > 10)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can't buy less than 1 or more than 10 seeds at a time.");
		}
		if(amount > gSeedsStock)
		{
		    return SCM(playerid, COLOR_SYNTAX, "There aren't that many seeds left in stock.");
		}
		if(pData[playerid][pCash] < (cost = amount * 5))
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can't afford to buy that many seeds.");
		}
		if(pData[playerid][pSeeds] + amount > GetPlayerCapacity(CAPACITY_SEEDS))
		{
		    return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i seeds. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pSeeds], GetPlayerCapacity(CAPACITY_SEEDS));
		}

		gSeedsStock -= amount;
		pData[playerid][pSeeds] += amount;

		GivePlayerCash(playerid, -cost);
		AddPointMoney(POINT_DRUGDEN, cost);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET seeds = %i WHERE uid = %i", pData[playerid][pSeeds], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "You have purchased %i marijuana seeds for $%i. /planthelp for more help.", amount, cost);
	}
	else if(!strcmp(option, "ephedrine", true))
	{
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, 321.6007, 1117.3717, 1083.8828))
		{
		    return SCM(playerid, COLOR_SYNTAX, "You are not inside of the drug den.");
		}
		if(amount < 1 || amount > 5)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can't buy less than 1 or more than 5 grams at a time.");
		}
		if(amount > gEphedrineStock)
		{
		    return SCM(playerid, COLOR_SYNTAX, "There isn't that much ephedrine left in stock.");
		}
		if(pData[playerid][pCash] < (cost = amount * 150))
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can't afford to buy that many grams.");
		}
		if(pData[playerid][pEphedrine] + amount > GetPlayerCapacity(CAPACITY_EPHEDRINE))
		{
		    return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i ephedrine. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pEphedrine], GetPlayerCapacity(CAPACITY_EPHEDRINE));
		}

		gEphedrineStock -= amount;
		pData[playerid][pEphedrine] += amount;

		GivePlayerCash(playerid, -cost);
		AddPointMoney(POINT_DRUGDEN, cost);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ephedrine = %i WHERE uid = %i", pData[playerid][pEphedrine], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "You have purchased %i grams of raw ephedrine for $%i.", amount, cost);
	}
	else if(!strcmp(option, "crack", true))
	{
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, 2345.8250,-1185.5159,1031.9766))
		{
		    return SCM(playerid, COLOR_SYNTAX, "You are not inside of the crack house.");
		}
		if(amount < 1 || amount > 10)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can't buy less than 1 or more than 10 grams at a time.");
		}
		if(amount > gCrackStock)
		{
		    return SCM(playerid, COLOR_SYNTAX, "There isn't that much Crack left in stock.");
		}
		if(pData[playerid][pCash] < (cost = amount * 250))
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can't afford to buy that many grams.");
		}
		if(pData[playerid][pCrack] + amount > GetPlayerCapacity(CAPACITY_COCAINE))
		{
		    return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i Crack. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pCrack], GetPlayerCapacity(CAPACITY_COCAINE));
		}

		gCrackStock -= amount;
		pData[playerid][pCrack] += amount;

		GivePlayerCash(playerid, -cost);
        AddPointMoney(POINT_CRACKHOUSE, cost);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", pData[playerid][pCrack], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "You have purchased %i grams of Crack for $%i.", amount, cost);
	}

	return 1;
}

CMD:plantpot(playerid, params[])
{
	if(pData[playerid][pGang] == -1)
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a gang member.");
	}
	if(pData[playerid][pPotPlanted])
	{
		return SCM(playerid, COLOR_SYNTAX, "You have an active pot plant already.");
	}
	if(pData[playerid][pSeeds] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have enough seeds. You need at least 10 seeds in order to plant them.");
	}
	if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't plant indoors.");
	}

	GetPlayerPos(playerid, pData[playerid][pPotX], pData[playerid][pPotY], pData[playerid][pPotZ]);
	GetPlayerFacingAngle(playerid, pData[playerid][pPotA]);

	pData[playerid][pSeeds] -= 10;
	pData[playerid][pPotPlanted] = 1;
	pData[playerid][pPotTime] = 60;
	pData[playerid][pPotGrams] = 0;
	pData[playerid][pPotObject] = CreateDynamicObject(3409, pData[playerid][pPotX], pData[playerid][pPotY], pData[playerid][pPotZ] - 1.8, 0.0, 0.0, pData[playerid][pPotA]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET seeds = %i, potplanted = 1, pottime = %i, potgrams = %i, pot_x = '%f', pot_y = '%f', pot_z = '%f', pot_a = '%f' WHERE uid = %i", pData[playerid][pSeeds], pData[playerid][pPotTime], pData[playerid][pPotGrams], pData[playerid][pPotX], pData[playerid][pPotY], pData[playerid][pPotZ], pData[playerid][pPotA], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s plants some seeds into the ground.", GetRPName(playerid));
	SCM(playerid, COLOR_YELLOW, "You have planted a pot plant. Every two minutes your plant will grow one gram of pot.");
	SCM(playerid, COLOR_YELLOW, "Your plant will be ready in 60 minutes. Be careful, as anyone who sees your plant can pick it!");
	return 1;
}

CMD:plantinfo(playerid, params[])
{
	if(pData[playerid][pGang] == -1)
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a gang member.");
	}
	foreach(new i : Player)
	{
	    if(pData[i][pPotPlanted] && IsPlayerInRangeOfPoint(playerid, 3.0, pData[i][pPotX], pData[i][pPotY], pData[i][pPotZ]))
	    {
	        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s inspects the plant.", GetRPName(playerid));
	        SM(playerid, COLOR_WHITE, "** This plant has so far grown %i grams of pot. It will be ready in %i/60 minutes.", pData[i][pPotGrams], pData[i][pPotTime]);
	        return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "You are not in range of any plants.");
	return 1;
}

CMD:pickplant(playerid, params[])
{
    foreach(new i : Player)
	{
	    if(pData[i][pPotPlanted] && IsPlayerInRangeOfPoint(playerid, 3.0, pData[i][pPotX], pData[i][pPotY], pData[i][pPotZ]))
	    {
	        if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
	        {
	            return SCM(playerid, COLOR_SYNTAX, "You need to be crouched in order to pick a plant.");
			}
			if(pData[i][pPotGrams] < 2)
			{
			    return SCM(playerid, COLOR_SYNTAX, "This plant hasn't grown that much yet. Wait a little while first.");
			}
			if(pData[playerid][pPot] + pData[i][pPotGrams] > GetPlayerCapacity(CAPACITY_WEED))
			{
			    return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i pot. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pPot], GetPlayerCapacity(CAPACITY_WEED));
			}

			pData[playerid][pPickPlant] = i;
			pData[playerid][pPickTime] = 5;

			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s crouches down and starts picking at the pot plant.", GetRPName(playerid));
			SCM(playerid, COLOR_WHITE, "** Allow up to five seconds for you to pick the plant.");
			return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "You are not in range of any plants.");
	return 1;
}

CMD:seizeplant(playerid, params[])
{
    if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}

    foreach(new i : Player)
	{
	    if(pData[i][pPotPlanted] && IsPlayerInRangeOfPoint(playerid, 3.0, pData[i][pPotX], pData[i][pPotY], pData[i][pPotZ]))
	    {
	        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s seizes a pot plant weighing %i grams.", GetRPName(playerid), pData[i][pPotGrams]);
	        DestroyPotPlant(i);
	        return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "You are not in range of any plants.");
	return 1;
}

CMD:cookmeth(playerid, params[])
{
	if(pData[playerid][pGang] == -1)
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a gang member.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 333.5727, 1121.8536, 1083.8903))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in drug den. You can't use this command.");
	}
	if(!pData[playerid][pCookMeth])
	{
		if(!pData[playerid][pEphedrine])
		{
	    	return SCM(playerid, COLOR_SYNTAX, "You don't have any raw ephedrine which you could turn into meth.");
		}
	    if(!pData[playerid][pMuriaticAcid])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You need muriatic acid in order to cook meth. Go buy some at 24/7.");
		}
 	    if(!pData[playerid][pBakingSoda])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You need baking soda in order to cook meth. Go buy some at 24/7.");
		}
		pData[playerid][pCookMeth] = 1;
		pData[playerid][pCookTime] = 15;
		pData[playerid][pCookGrams] = 0;

		SCM(playerid, COLOR_YELLOW, "You have started cooking meth. 2 gram of ephedrine will turn into 2 gram of meth every 15 seconds.");
	    SCM(playerid, COLOR_YELLOW, "Type the /cookmeth command again in order to stop cooking.");
	}
	else
	{
	    SM(playerid, COLOR_AQUA, "You have stopped cooking. You converted %i grams of ephedrine into %i grams of meth.", pData[playerid][pCookGrams] / 2, pData[playerid][pCookGrams]);
	    ResetCooking(playerid);
	}
	return 1;
}
forward OnPlayerEquipVest(playerid);
public OnPlayerEquipVest(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		SetScriptArmour(playerid, 100);
		TogglePlayerControllable(playerid, 1);
		GameTextForPlayer(playerid, "~g~equipped", 2000, 1);
	}

	pData[playerid][pEquipVest] = false;
	KillTimer(pData[playerid][pEquipTimer]);
	pData[playerid][pEquipTimer] = -1;
	return 1;
}
CMD:use(playerid, params[])
{
	if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pJailTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}
	if(pData[playerid][pJoinedEvent] > 0 && !EventInfo[eHeal])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The administrator has chosen to disable healing in this event.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /use [bandage | medkit | repairkit | Cigar | Vest | Helmet | waterbottle | food]");
	}
	if(!strcmp(params, "bandage", true))
	{
		if(pData[playerid][pBandage] <= 0)
		{
		    return SCM(playerid, COLOR_ERROR, "You have no bandage left.");
		}
		if(pData[playerid][pBandage])
		{
		    return SCM(playerid, COLOR_SYNTAX, "You're still bandaging your self..");
		}
		pData[playerid][pBandage] -= 1;
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s begins bandaging their self", GetRPName(playerid));
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bandage = %i WHERE uid = %i", pData[playerid][pBandage], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(params, "medkit", true))
	{
		if(pData[playerid][pMedkit] <= 0)
		{
		    return SCM(playerid, COLOR_ERROR, "You have no medkit left.");
		}

		GameTextForPlayer(playerid, "~g~Applying Medkit...", 15000, 3);
		ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 1, 0, 0, 0, 0, 1);
		TogglePlayerControllable(playerid, 0);
		SetTimerEx("UseMedkit", 15000, false, "i", playerid);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s begins bandaging their self", GetRPName(playerid));
	}
    else if(!strcmp(params, "repairkit", true))
	{
		new vehicleid = GetPlayerVehicleID(playerid), Float:health;
		if(pData[playerid][pRepairKit] <= 0)
		{
		    return SCM(playerid, COLOR_ERROR, "You have no repairkit left.");
		}
		if(!vehicleid)
		{
	 		return SCM(playerid, COLOR_ERROR, "You are not inside of any vehicle.");
		}
		if(health >= 1000.0)
		{
			SCM(playerid, COLOR_ERROR, "This vehicle doesn't need to be repaired.");
		}

		GameTextForPlayer(playerid, "~g~Repairing...", 15000, 3);
		ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 1, 0, 0, 0, 0, 1);
		TogglePlayerControllable(playerid, 0);
		SetTimerEx("UseRepairkit", 15000, false, "i", playerid);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s starts repairing the vehicle.", GetRPName(playerid));
	}
    else if(!strcmp(params, "cigar", true))
	{
		if(!pData[playerid][pCigars])
		{
		    return SCM(playerid, COLOR_SYNTAX, "You don't have any cigars left.");
		}

		pData[playerid][pCigars]--;

		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s lights up a cigar and starts to smoke it.", GetRPName(playerid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cigars = %i WHERE uid = %i", pData[playerid][pCigars], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(params, "vest", true))
	{
		if(pData[playerid][pVest] <= 0)
		{
		    return SCM(playerid, COLOR_ERROR, "You have no vest left.");
		}
		if(pData[playerid][pEquipVest] == true)
			return SendClientMessageEx(playerid, COLOR_GREY, "You are already equipping a vest.");
			
		new string[128];
		pData[playerid][pVest]--;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vest = %i WHERE uid = %i", pData[playerid][pVest], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		format(string, sizeof(string), "* %s has takes off their vest, dropping it on the ground.", GetPlayerNameEx(playerid));
		SendProximityMessage(playerid, 20.0, COLOR_ORANGE, string);
		format(string, sizeof(string), "* %s picks up the vest equipping it to themselves.", GetPlayerNameEx(playerid));
		SendProximityMessage(playerid, 20.0, COLOR_ORANGE, string);

		SendClientMessageEx(playerid, COLOR_ORANGE, " Equipping your kevalar vest, This will take 20 seconds. Keep cover! ");

		pData[playerid][pEquipVest] = true;
		pData[playerid][pEquipTimer] = SetTimerEx("OnPlayerEquipVest", 20000, 0, "d", playerid);

		GameTextForPlayer(playerid, "~g~Wearing Vest ~n~ ~r~20 seconds", 20000, 1);
		TogglePlayerControllable(playerid, 0);
	}
    else if(!strcmp(params, "helmet", true))
	{
		if(pData[playerid][pHelmet] <= 0)
		{
		    return SCM(playerid, COLOR_ERROR, "You dont have a helmet.");
		}

		pData[playerid][pHelmet]--;
		pData[playerid][pUseHelmet] = 1;
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET helmet = %i WHERE uid = %i", pData[playerid][pHelmet], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

	    SetPlayerAttachedObject(playerid, 7, 18978, 2, 0.1, 0.02, 0.0, 0.0, 90.0, 90.0, 1.0, 1.0, 1.0);
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "* %s reaches for their helmet, and puts it on.", GetRPName(playerid));
		SCM(playerid, COLOR_WHITE, "You have put on your helmet.");
	}
	else if(!strcmp(params, "waterbottle", true))
	{
		if(!pData[playerid][pDrink])
		{
		    return SCM(playerid, COLOR_SYNTAX, "You don't have waterbottle.");
		}
		pData[playerid][pDrink] -= 1;
		pData[playerid][pThirst] += 20;
		pData[playerid][pThirstTimer] = 0;
		if (pData[playerid][pThirst] > 100)
		{
			pData[playerid][pThirst] = 100;
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET thirst = %i, thirsttimer = %i WHERE uid = %i", pData[playerid][pThirst], pData[playerid][pThirstTimer], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);


		ApplyAnimationEx(playerid, "BAR", "dnk_stndF_loop", 4.0, 1, 0, 0, 0, 0);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s takes out a waterbottle from their inventory, and start drinking it.", GetRPName(playerid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET drink = %i WHERE uid = %i", pData[playerid][pDrink], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(params, "food", true))
	{
		if(!pData[playerid][pFood])
		{
		    return SCM(playerid, COLOR_SYNTAX, "You don't have food.");
		}
		pData[playerid][pFood]--;
		pData[playerid][pHunger] += 20;
		pData[playerid][pHungerTimer] = 0;
		if (pData[playerid][pHunger] > 100)
		{
			pData[playerid][pHunger] = 100;
		}

		ApplyAnimationEx(playerid, "FOOD", "EAT_Burger", 3.0, 1, 0, 0, 0, 0);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s takes out a food from their inventory, and start eating it.", GetRPName(playerid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET hunger = %i, hungertimer = %i WHERE uid = %i", pData[playerid][pHunger], pData[playerid][pHungerTimer], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET food = %i WHERE uid = %i", pData[playerid][pFood], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	return 1;
}

CMD:usedrug(playerid, params[])
{
    if(gettime() - pData[playerid][pLastDrug] < 10)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can only consume drugs every 10 seconds. Please wait %i more seconds.", 10 - (gettime() - pData[playerid][pLastDrug]));
	}
	if(pData[playerid][pDrugsUsed] >= 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are stoned and therefore can't consume anymore drugs right now.");
	}
	if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pJailTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}
	if(pData[playerid][pJoinedEvent] > 0 && !EventInfo[eHeal])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The administrator has chosen to disable healing in this event.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /usedrug [meth | painkillers | pot | crack]");
	}

	if(!strcmp(params, "meth", true))
	{
	    if(pData[playerid][pMeth] < 2)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You need at least two grams of meth.");
		}

		if(pData[playerid][pAddictUpgrade] > 0)
	    {
			SM(playerid, COLOR_YELLOW, "Addict Perk: Your level %i/3 addict perk gave you %.1f/%.1f extra health & armor.", pData[playerid][pAddictUpgrade], (pData[playerid][pAddictUpgrade] * 5.0), (pData[playerid][pAddictUpgrade] * 5.0));
	    }

		GivePlayerHealth(playerid, 10.0 + (pData[playerid][pAddictUpgrade] * 5.0));
		GivePlayerArmour(playerid, 10.0 + (pData[playerid][pAddictUpgrade] * 5.0));

		pData[playerid][pMeth] -= 2;
		pData[playerid][pDrugsUsed] += 2;
		pData[playerid][pLastDrug] = gettime();

		if(pData[playerid][pDrugsUsed] >= 4)
	    {
	        GameTextForPlayer(playerid, "~p~shit... you stoned as hell duuuude...", 5000, 1);
			pData[playerid][pDrugsTime] = 30;
		}

        ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s smokes two grams of meth.", GetRPName(playerid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", pData[playerid][pMeth], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(params, "painkillers", true))
	{
	    if(pData[playerid][pPainkillers] <= 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have any painkillers left.");
		}

		if(pData[playerid][pAddictUpgrade] > 0)
	    {
			SM(playerid, COLOR_YELLOW, "Addict Perk: Your level %i/3 addict perk gave you %.1f extra health.", pData[playerid][pAddictUpgrade], (pData[playerid][pAddictUpgrade] * 5.0));
	    }

		GivePlayerHealth(playerid, 25.0 + (pData[playerid][pAddictUpgrade] * 5.0));

		pData[playerid][pPainkillers] -= 1;
		pData[playerid][pDrugsUsed] += 2;
		pData[playerid][pLastDrug] = gettime();
		pData[playerid][pBrokenLeg] = 0;

		if(pData[playerid][pDrugsUsed] >= 4)
	    {
	        GameTextForPlayer(playerid, "~p~shit... you stoned as hell duuuude...", 5000, 1);
	        pData[playerid][pDrugsTime] = 30;
		}

        ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s pops a painkiller in their mouth.", GetRPName(playerid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", pData[playerid][pPainkillers], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(params, "pot", true))
	{
	    if(pData[playerid][pPot] < 2) return SCM(playerid, COLOR_SYNTAX, "You need at least one gram of pot.");
		GivePlayerHealth(playerid, 10.0);

		pData[playerid][pPot] -= 1;
		pData[playerid][pDrugsUsed]++;
		pData[playerid][pLastDrug] = gettime();

		if(pData[playerid][pDrugsUsed] >= 4)
	    {
	        GameTextForPlayer(playerid, "~p~shit... you stoned as hell duuuude...", 5000, 1);
			pData[playerid][pDrugsTime] = 30;
		}

	    ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s smokes one gram of pot.", GetRPName(playerid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", pData[playerid][pPot], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(params, "crack", true))
	{
		if(pData[playerid][pCrack] < 2)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You need at least one gram of crack.");
		}

		GivePlayerArmour(playerid, 10.0);

		pData[playerid][pCrack] -= 1;
		pData[playerid][pDrugsUsed]++;
		pData[playerid][pLastDrug] = gettime();

		if(pData[playerid][pDrugsUsed] >= 4)
	    {
	        GameTextForPlayer(playerid, "~p~shit... you stoned as hell duuuude...", 5000, 1);
			pData[playerid][pDrugsTime] = 30;
		}

	    ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s snorts one gram of crack.", GetRPName(playerid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", pData[playerid][pCrack], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	return 1;
}
CMD:usepot(playerid) return callcmd::usedrug(playerid, "pot");
CMD:usecrack(playerid) return callcmd::usedrug(playerid, "crack");

CMD:rules(playerid, params[])
{
	return ShowPlayerDialog(playerid, DIALOG_RULES, DIALOG_STYLE_LIST, "List of Rules", "Server\nTraffic Laws\nSpeed Laws", "Select", "Close");
}

CMD:showslaws(playerid, params[])
{
	new targetid, str[1024];

	if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /showslaws [playerid]");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}

	strcat(str, ""WHITE"- This server has limitations. -\n");
	strcat(str, "1. 50 MPH if you are in the City.\n");
	strcat(str, "2. 70 MPH on the County roads.\n");
	strcat(str, "3. 90 MPH on the Highways and Interstates.\n");
	strcat(str, "4. Box trucks cannot exceed 50 MPH.\n");
	strcat(str, "5. Any vehicles with 3 or more axles aren't allowed to go more than 55 mph. Regardless of roadway limits.\n");
	strcat(str, "Note: This is a short version of our speed laws. Please visit  to see a full list of "SERVER_URL"");
	ShowPlayerDialog(targetid, 0, DIALOG_STYLE_MSGBOX, ""WHITE"List of Speed Enforcement Laws", str, "Okay", "");

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s shows the speed rules to %s.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:showtlaws(playerid, params[])
{
	new targetid, str[1024];

	if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /showtlaws [playerid]");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}

	strcat(str, ""WHITE"1. Drive on the right side of the road at all times or else you will get punishment.\n");
	strcat(str, "2. Yield to emergency vehicles.\n");
	strcat(str, "3. Move over and slow down for stopped emergency vehicles.\n");
	strcat(str, "4. Turn your headlights on at night. Type (/v lights) to turn it.\n");
	strcat(str, "5. Wear your seatbelt or helmet always. Type (/seatbelt) to wear it.\n");
	strcat(str, "6. Traffic lights are synced Red is for Stop, Yellow is for Slow down and Green is for Go\n");
	strcat(str, "7. Only follow traffic lights above a junction. (Marked with a solid white line)\n");
	strcat(str, "8. Remain at a safe distance from other vehicles when driving, atleast 3 car lengths\n");
	strcat(str, "9. Only follow traffic lights above a junction. (Marked with a solid white line)\n");
	strcat(str, "10. Pedistrians always have the right of way, regardless of the situation.\n");
	strcat(str, "11. Drive how you would in real life, dont be a moron.\n");
	strcat(str, "- If you fail at driving you will be jailed or banned. -\n");
	strcat(str, "Note: This is a short version of our traffic laws. Please visit  to see a full list at "SERVER_URL"");
	ShowPlayerDialog(targetid, 0, DIALOG_STYLE_MSGBOX, ""WHITE"List of Traffic Laws", str, "Okay", "");

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s shows the traffic rules to %s.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

/*CMD:showlicenses(playerid, params[]) return callcmd::showid(playerid, params);
CMD:showid(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /showid [playerid]");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}

	SCM(targetid, SERVER_COLOR, "ID Card:");
	SM(targetid, COLOR_GREY1, "Name: %s", GetRPName(playerid));
	SM(targetid, COLOR_GREY1, "Gender: %s", (pData[playerid][pGender] == 2) ? ("Female") : ("Male"));
	SM(targetid, COLOR_GREY1, "Age: %i Years Old", pData[playerid][pAge]);
	SM(targetid, COLOR_GREY1, "Drivers License: %s", (pData[playerid][pCarLicense]) ? (""SVRCLR"Yes") : (""SVRCLR"No"));
	SM(targetid, COLOR_GREY1, "Weapon License: %s", (pData[playerid][pWeaponLicense]) ? (""SVRCLR"Yes") : (""SVRCLR"No"));
	if(targetid != playerid) SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s shows their ID card to %s.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}*/
stock GetGenderString(gender) {
	new sex[7];
	switch(gender) {
        case 2: sex = "Female";
        default: sex = "Male";
    }

    return sex;
}
stock id_ShowCitizen(playerid, name[], skin, age, sex) {
	new value[20];
	// Skin
	PlayerTextDrawSetPreviewModel(playerid, SHOWID[playerid][15], skin);
	PlayerTextDrawShow(playerid, SHOWID[playerid][15]);

	// Name
	PlayerTextDrawSetString(playerid, SHOWID[playerid][4], name);
	PlayerTextDrawShow(playerid, SHOWID[playerid][4]);

	// Age
	format(value, sizeof(value), "%i", age);
	PlayerTextDrawSetString(playerid, SHOWID[playerid][7], value);
	PlayerTextDrawShow(playerid, SHOWID[playerid][7]);

	// Gender
	PlayerTextDrawSetString(playerid, SHOWID[playerid][9], GetGenderString(sex));
	PlayerTextDrawShow(playerid, SHOWID[playerid][9]);
}
stock GetPlayerSkinScript(playerid) return GetPlayerSkin(playerid);
stock calling(playerid, name[], skin, phoneNumber) {
	new value[20];
	// Skin
	PlayerTextDrawSetPreviewModel(playerid, CallingPlayerTD[playerid][0], skin);
	PlayerTextDrawShow(playerid, CallingPlayerTD[playerid][0]);

	// Name
	PlayerTextDrawSetString(playerid, CallingPlayerTD[playerid][1], name);
	PlayerTextDrawShow(playerid, CallingPlayerTD[playerid][1]);

	format(value, sizeof(value), "(%i)", phoneNumber);
	PlayerTextDrawSetString(playerid, CallingPlayerTD[playerid][2], value);
	PlayerTextDrawShow(playerid, CallingPlayerTD[playerid][2]);
}
CMD:showid(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /showid [playerid]");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}

	new str[500], titlestr[128], string[500];
	format(string, sizeof(string), "Identification Card of %s[%s]", GetRPName(targetid), GetDate());
	strcat(titlestr, string);

	format(string, sizeof(string), "Drivers License: %s\n", TimeConvert(pData[playerid][pCarLicenseTime]));
	strcat(str, string);
	format(string, sizeof(string), "Weapon License: %s\n", TimeConvert(pData[playerid][pWeaponLicenseTime]));
	strcat(str, string);
	ShowPlayerDialog(targetid, 0, DIALOG_STYLE_TABLIST, titlestr, str, "Confirm", "");
	return 1;
}

CMD:cc(playerid) return callcmd::clearchat(playerid);

CMD:drop(playerid, params[])
{
	new option[12], confirm[10];

	if(sscanf(params, "s[12]S()[10]", option, confirm))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /drop [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Materials, Pot, Crack, Meth, Painkillers, Cigars, Spraycans");
	    SCM(playerid, COLOR_WHITE, "Available options: Seeds, Ephedrine, HPAmmo, PoisonAmmo, FMJAmmo");
	    return 1;
	}
	if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pJailTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}

	/*if(!strcmp(option, "weapons", true))
	{
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /drop [weapons] [confirm]");
	    }

	    ResetPlayerWeaponsEx(playerid);
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s throws away their weapons.", GetRPName(playerid));
	}*/
	if(!strcmp(option, "materials", true))
	{
	    if(!pData[playerid][pMaterials])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have no materials which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /drop [materials] [confirm] (You have %i materials.)", pData[playerid][pMaterials]);
	    }

	    pData[playerid][pMaterials] = 0;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s throws away their materials.", GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = 0 WHERE uid = %i", pData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "pot", true))
	{
	    if(!pData[playerid][pPot])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have no pot which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /drop [pot] [confirm] (You have %i grams of pot.)", pData[playerid][pPot]);
	    }

	    pData[playerid][pPot] = 0;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s throws away their pot.", GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = 0 WHERE uid = %i", pData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "crack", true))
	{
	    if(!pData[playerid][pCrack])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have no Crack which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /drop [Crack] [confirm] (You have %i grams of Crack.)", pData[playerid][pCrack]);
	    }

	    pData[playerid][pCrack] = 0;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s throws away their Crack.", GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = 0 WHERE uid = %i", pData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "meth", true))
	{
	    if(!pData[playerid][pMeth])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have no meth which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /drop [meth] [confirm] (You have %i grams of meth.)", pData[playerid][pMeth]);
	    }

	    pData[playerid][pMeth] = 0;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s throws away their meth.", GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = 0 WHERE uid = %i", pData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "painkillers", true))
	{
	    if(!pData[playerid][pPainkillers])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have no painkillers which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /drop [painkillers] [confirm] (You have %i painkillers.)", pData[playerid][pPainkillers]);
	    }

	    pData[playerid][pPainkillers] = 0;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s throws away their painkillers.", GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = 0 WHERE uid = %i", pData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "cigars", true))
	{
	    if(!pData[playerid][pCigars])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have no cigars which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /drop [cigars] [confirm] (You have %i cigars.)", pData[playerid][pCigars]);
	    }

	    pData[playerid][pCigars] = 0;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s throws away their cigars.", GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cigars = 0 WHERE uid = %i", pData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "spraycans", true))
	{
	    if(!pData[playerid][pSpraycans])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have no spraycans which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /drop [spraycans] [confirm] (You have %i spraycans.)", pData[playerid][pSpraycans]);
	    }

	    pData[playerid][pSpraycans] = 0;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s throws away their spraycanss.", GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET spraycans = 0 WHERE uid = %i", pData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "seeds", true))
	{
	    if(!pData[playerid][pSeeds])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have no seeds which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /drop [seeds] [confirm] (You have %i seeds.)", pData[playerid][pSeeds]);
	    }

	    pData[playerid][pSeeds] = 0;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s throws away their seeds.", GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET seeds = 0 WHERE uid = %i", pData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "ephedrine", true))
	{
	    if(!pData[playerid][pEphedrine])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have no ephedrine which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /drop [ephedrine] [confirm] (You have %i grams of ephedrine.)", pData[playerid][pEphedrine]);
	    }

	    pData[playerid][pEphedrine] = 0;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s throws away their ephedrine.", GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ephedrine = 0 WHERE uid = %i", pData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(option, "hpammo", true))
	{
	    if(!pData[playerid][pHPAmmo])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have no hollow point ammo which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /drop [hpammo] [confirm] (You have %i rounds of HP ammo.)", pData[playerid][pHPAmmo]);
	    }

	    SetWeaponAmmo(playerid, AMMO_HP, 0);
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s throws away their hollow point ammo.", GetRPName(playerid));
	}
	else if(!strcmp(option, "poisonammo", true))
	{
	    if(!pData[playerid][pPoisonAmmo])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have no poison tip ammo which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /drop [poisonammo] [confirm] (You have %i rounds of poison ammo.)", pData[playerid][pPoisonAmmo]);
	    }

	    SetWeaponAmmo(playerid, AMMO_POISON, 0);
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s throws away their poison tip ammo.", GetRPName(playerid));
	}
	else if(!strcmp(option, "fmjammo", true))
	{
	    if(!pData[playerid][pFMJAmmo])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have no FMJ ammo which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /drop [fmjammo] [confirm] (You have %i rounds of FMJ ammo.)", pData[playerid][pFMJAmmo]);
	    }

	    SetWeaponAmmo(playerid, AMMO_FMJ, 0);
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s throws away their full metal jacket ammo.", GetRPName(playerid));
	}

	return 1;
}

CMD:creategraffiti(playerid, params[])
{
	static
	    id = -1,
		Float:x,
		Float:y,
		Float:z,
		Float:angle;

    if(pData[playerid][pAdmin] < 6)
    {
	    return SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command.");
	}
	if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
 		return SCM(playerid, COLOR_SYNTAX, "You can only create graffiti points outside interiors.");
	}

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);

	id = Graffiti_Create(x, y, z, angle);

	if(id == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The server has reached the limit for graffiti points.");
	}

	EditDynamicObject(playerid, GraffitiData[id][graffitiObject]);

	pData[playerid][pEditGraffiti] = id;
	SM(playerid, COLOR_SYNTAX, "You have successfully created graffiti ID: %d.", id);
	return 1;
}

CMD:editgraffiti(playerid, params[])
{
	static
	    id = 0;

    if(pData[playerid][pAdmin] < 6)
    {
	    return SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command.");
	}
	if(sscanf(params, "d", id))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /editgangtag [graffiti id]");
	}

	EditDynamicObject(playerid, GraffitiData[id][graffitiObject]);
	pData[playerid][pEditGraffiti] = id;
	SM(playerid, COLOR_SYNTAX, "You have successfully editing graffiti ID: %d.", id);
	return 1;
}

CMD:destroygraffiti(playerid, params[])
{
	static
	    id = 0;

    if(pData[playerid][pAdmin] < 6)
    {
	    return SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command.");
	}
	if(sscanf(params, "d", id))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /destroygraffiti [graffiti id]");
	}

	if((id < 0 || id >= MAX_GRAFFITI_POINTS) || !GraffitiData[id][graffitiExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have specified an invalid graffiti ID.");
	}
	Graffiti_Delete(id);
	SM(playerid, COLOR_SYNTAX, "You have successfully destroyed graffiti ID: %d.", id);
	return 1;
}

CMD:gspray(playerid, params[])
{
	new id = Graffiti_Nearest(playerid);

	if (id == -1)
	    return SCM(playerid, COLOR_SYNTAX, "You are not near any graffiti point.");

	if(pData[playerid][pGang] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any gang at the moment.");
	}
	if(pData[playerid][pGangRank] < 5)
	{
		return SCM(playerid, COLOR_SYNTAX, "You must be at least rank 5 to tag a wall");
	}
	if(pData[playerid][pSpraycans] <= 0)
	{
		return SCM(playerid, COLOR_SYNTAX, "You don't have enough spraycans for this.");
	}
	ShowPlayerDialog(playerid, DIALOG_GRAFFITICOLOR, DIALOG_STYLE_LIST, "Select Color", ""WHITE"White\n{FF0000}Red\n{FFFF00}Yellow\n{33CC33}Green\n{33CCFF}Light Blue\n"SVRCLR"Orange\n{1394BF}Dark Blue\n{000000}Black", "Select", "Cancel");
	return 1;
}

CMD:creategang(playerid, params[])
{
	new name[32];

    if(!pData[playerid][pGangMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[32]", name))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /creategang [name]");
	}

	for(new i = 1; i < MAX_GANGS; i ++)
	{
	    if(!GangInfo[i][gSetup])
	    {
	        SetupGang(i, name);

	        SAM(COLOR_LIGHTRED, "AdmCmd: %s has setup gang {F7A763}%s in slot ID %i.", GetRPName(playerid), name, i);
	        SM(playerid, COLOR_WHITE, "** This gang's ID is %i. /editgang to edit.", i);
	        return 1;
		}
	}

	return 1;
}

CMD:editgang(playerid, params[])
{
	new gangid, option[14], param[128];

	if(!pData[playerid][pGangMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[14]S()[128]", gangid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /editgang [gangid] [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Name, MOTD, Leader, Level, Color, Points, TurfTokens, RankName, Skin, Strikes, Alliance");
		return 1;
	}
	if(!(1 <= gangid < MAX_GANGS) || !GangInfo[gangid][gSetup])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid gang.");
	}

	if(!strcmp(option, "name", true))
	{
	    if(isnull(param) || strlen(params) > 32)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editgang [gangid] [name] [text]");
		}

		strcpy(GangInfo[gangid][gName], param, 32);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET name = '%e' WHERE id = %i", param, gangid);
		mysql_tquery(connectionID, queryBuffer);

		ReloadGang(gangid);
		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the name of gang ID %i to '%s'.", GetRPName(playerid), gangid, param);
	}
	else if(!strcmp(option, "motd", true))
	{
	    if(isnull(param))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editgang [gangid] [motd] [text]");
		}

		strcpy(GangInfo[gangid][gMOTD], param, 128);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET motd = '%e' WHERE id = %i", param, gangid);
		mysql_tquery(connectionID, queryBuffer);

		ReloadGang(gangid);
		SAM(COLOR_LIGHTRED, "AdmCmd: %s has adjusted the MOTD of gang ID %i.", GetRPName(playerid), gangid);
	}
	else if(!strcmp(option, "leader", true))
	{
	    new leader[MAX_PLAYER_NAME];

	    if(sscanf(param, "s[24]", leader))
	    {
	        SCM(playerid, COLOR_SYNTAX, "Usage: /editgang [gangid] [leader] [name]");
	        SCM(playerid, COLOR_SYNTAX, "This only updates the text for the leader's name in /gangs. Use /setgang to appoint someone as gang leader.");
			return 1;
		}

		strcpy(GangInfo[gangid][gLeader], leader, MAX_PLAYER_NAME);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET leader = '%e' WHERE id = %i", leader, gangid);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the leader of gang ID %i to %s.", GetRPName(playerid), gangid, leader);
	}
	else if(!strcmp(option, "level", true))
	{
	    new value;

	    if(sscanf(param, "i", value))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editgang [gangid] [level] [value (1-3)]");
		}
		if(!(1 <= value <= 3))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid level.");
		}

		GangInfo[gangid][gLevel] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET level = %i WHERE id = %i", GangInfo[gangid][gLevel], gangid);
		mysql_tquery(connectionID, queryBuffer);

		ReloadGang(gangid);
		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the level of gang ID %i to %i/3.", GetRPName(playerid), gangid, value);
	}
	else if(!strcmp(option, "color", true))
	{
	    new color;

	    if(sscanf(param, "h", color))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editgang [gangid] [color] [0xRRGGBBAA]");
		}

		GangInfo[gangid][gColor] = color & ~0xff;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET color = %i WHERE id = %i", GangInfo[gangid][gColor], gangid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the {%06x}color{FF6347} of gang ID %i.", GetRPName(playerid), color >>> 8, gangid);
	}
	else if(!strcmp(option, "points", true))
	{
	    new value;

	    if(sscanf(param, "i", value))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editgang [gangid] [points] [value]");
		}

		GangInfo[gangid][gPoints] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET points = %i WHERE id = %i", GangInfo[gangid][gPoints], gangid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the gang points of gang ID %i to %i.", GetRPName(playerid), gangid, value);
	}
	else if(!strcmp(option, "turftokens", true))
	{
	    new value;

	    if(sscanf(param, "i", value))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editgang [gangid] [turftokens] [value]");
		}

		GangInfo[gangid][gTurfTokens] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET turftokens = %i WHERE id = %i", GangInfo[gangid][gTurfTokens], gangid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the turf tokens of gang ID %i to %i.", GetRPName(playerid), gangid, value);
	}
	else if(!strcmp(option, "rankname", true))
	{
	    new rankid, rank[32];

	    if(sscanf(param, "is[32]", rankid, rank))
	    {
	        SCM(playerid, SERVER_COLOR, "Rank Names:");

	        for(new i = 0; i < 7; i ++)
	        {
	            if(isnull(GangRanks[gangid][i]))
	            	SM(playerid, COLOR_GREY2, "Rank %i: (empty)", i);
				else
				    SM(playerid, COLOR_GREY2, "Rank %i: %s", i, GangRanks[gangid][i]);
	        }

	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editgang [gangid] [rankname] [slot (0-6)] [name]");
	    }
	    if(!(0 <= rankid <= 6))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Invalid rank.");
		}

	    strcpy(GangRanks[gangid][rankid], rank, 32);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO gangranks VALUES(%i, %i, '%e') ON DUPLICATE KEY UPDATE name = '%e'", gangid, rankid, rank, rank);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_LIGHTRED, "AdmCmd: %s has set rank %i's name of gang ID %i to '%s'.", GetRPName(playerid), rankid, gangid, rank);
	}
	else if(!strcmp(option, "skin", true))
	{
	    new slot, skinid;

	    if(sscanf(param, "ii", slot, skinid))
	    {
	        SCM(playerid, SERVER_COLOR, "Gang Skins:");

	        for(new i = 0; i < MAX_GANG_SKINS; i ++)
	        {
	            if(GangInfo[gangid][gSkins][i] == 0)
	            	SM(playerid, COLOR_GREY2, "Skin %i: (none)", i + 1);
				else
				    SM(playerid, COLOR_GREY2, "Skin %i: %i", i + 1, GangInfo[gangid][gSkins][i]);
	        }

	        return SM(playerid, COLOR_SYNTAX, "Usage: /editgang [gangid] [skin] [slot (1-%i)] [skinid]", MAX_GANG_SKINS);
	    }
	    if(!(1 <= slot <= MAX_GANG_SKINS))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Invalid slot.");
		}
		if(!(0 <= skinid <= 311))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid skin.");
		}

		slot--;

		GangInfo[gangid][gSkins][slot] = skinid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO gangskins VALUES(%i, %i, %i) ON DUPLICATE KEY UPDATE skinid = %i", gangid, slot, skinid, skinid);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_WHITE, "** You have set the skin in slot %i to ID %i.", slot + 1, skinid);
	}
	else if(!strcmp(option, "strikes", true))
	{
	    new amount;

	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editgang [gangid] [strikes] [amount]");
		}
		if(!(0 <= amount <= 3))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The amount must range from 0 to 3.");
		}

		GangInfo[gangid][gStrikes] = amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET strikes = %i WHERE id = %i", amount, gangid);
		mysql_tquery(connectionID, queryBuffer);

		ReloadGang(gangid);
		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the strikes of gang ID %i to %i.", GetRPName(playerid), gangid, amount);
	}
	else if(!strcmp(option, "alliance", true))
	{
		new allyid;

	    if(sscanf(param, "i", allyid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editgang [gangid] [alliance] [gangid]");
		}

		if(allyid == -1)
		{
		    if(GangInfo[gangid][gAlliance] >= 0)
		    {
		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = -1 WHERE id = %i", GangInfo[gangid][gAlliance]);
				mysql_tquery(connectionID, queryBuffer);
		        GangInfo[GangInfo[gangid][gAlliance]][gAlliance] = -1;
			}

			GangInfo[gangid][gAlliance] = -1;

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = -1 WHERE id = %i", gangid);
			mysql_tquery(connectionID, queryBuffer);

			ReloadGang(gangid);
			SAM(COLOR_LIGHTRED, "AdmCmd: %s has reset the alliance of gang ID %i.", GetRPName(playerid), gangid);
		}
		else
		{
		    if(!(1 <= allyid < MAX_GANGS) || GangInfo[allyid][gSetup] == 0)
		    {
		        return SCM(playerid, COLOR_SYNTAX, "Invalid gang.");
		    }

			GangInfo[gangid][gAlliance] = allyid;
			GangInfo[allyid][gAlliance] = gangid;

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = %i WHERE id = %i", allyid, gangid);
			mysql_tquery(connectionID, queryBuffer);
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = %i WHERE id = %i", gangid, allyid);
			mysql_tquery(connectionID, queryBuffer);

			ReloadGang(gangid);
			SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the alliance of gang ID %i to gang %i.", GetRPName(playerid), gangid, allyid);
		}
	}
	return 1;
}

CMD:removegang(playerid, params[])
{
	new gangid;

	if(!pData[playerid][pGangMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", gangid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /removegang [gangid]");
	}
	if(!(1 <= gangid < MAX_GANGS) || !GangInfo[gangid][gSetup])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid gang.");
	}

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has deleted gang %s.", GetRPName(playerid), GangInfo[gangid][gName]);
	SM(playerid, COLOR_LIGHTRED, "You have permanently deleted the {F7A763}%s gang slot.", GangInfo[gangid][gName]);
	RemoveGang(gangid);
	return 1;
}

CMD:gangg(playerid, params[])
{
	new string[1000], color2, color, allyname[64], idx;

	for(new gangid = 1; gangid < MAX_GANGS; gangid++)
	{
		if(GangInfo[gangid][gColor] == -1 || GangInfo[gangid][gColor] == -256)
		{
			color = 0xC8C8C8FF;
		}
		else
		{
			color = GangInfo[gangid][gColor];
		}
		new alliance = GangInfo[gangid][gAlliance];

		if(alliance >= 0)
		{
			strcpy(allyname, GangInfo[alliance][gName]);
			if(GangInfo[alliance][gColor] == -1 || GangInfo[alliance][gColor] == -256)
			{
				color2 = 0xC8C8C8FF;
			}
			else
			{
				color2 = GangInfo[alliance][gColor];
			}
		}
		if(alliance >= 0)
		{
			format(string, sizeof(string), "{%06x}%i. %s\t%s\t%i/3\t{%06x}%s", color >>> 8, gangid, GangInfo[gangid][gName], GangInfo[gangid][gLeader], GangInfo[gangid][gStrikes], color2 >>> 8, allyname);
		}
		else if(alliance >= 0)
		{
			format(string, sizeof(string), "{%06x}%i. %s\t%s\t%i/3\t{%06x}%s", color >>> 8, gangid, GangInfo[gangid][gName], GangInfo[gangid][gLeader], GangInfo[gangid][gStrikes], color2 >>> 8, allyname);
		}
		else
		{
			format(string, sizeof(string), "{%06x}%i. %s\t%s\t%i/3", color >>> 8, gangid, GangInfo[gangid][gName], GangInfo[gangid][gLeader], GangInfo[gangid][gStrikes]);
		}
		idx++;
	}
	if(idx > 0) {
		format(string, sizeof(string), "ID\tName\tLeader\tStrikes\tAlly\n%s", string);
		ShowPlayerDialog(playerid, DIALOG_GANGS, DIALOG_STYLE_TABLIST_HEADERS, "Gang List of "SERVER_NAME"", string, "Confirm", "Close");
	} else {
		ShowPlayerDialog(playerid, DIALOG_GANGS, DIALOG_STYLE_MSGBOX, "Gang List of "SERVER_NAME"", "There are no gangs created.", "Confirm", "Close");
	}
	return 1;
}

CMD:gangstrike(playerid, params[])
{
	new gangid, reason[128];

	if(!pData[playerid][pGangMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[128]", gangid, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gangstrike [gangid] [reason]");
	}
	if(!(1 <= gangid < MAX_GANGS) || !GangInfo[gangid][gSetup])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid gang.");
	}
	if(GangInfo[gangid][gStrikes] >= 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This gang already has 3 strikes.");
	}

	GangInfo[gangid][gStrikes]++;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET strikes = %i WHERE id = %i", GangInfo[gangid][gStrikes], gangid);
	mysql_tquery(connectionID, queryBuffer);

	switch(GangInfo[gangid][gStrikes])
	{
		case 1:
		{
			SMA(0x4F9C4FFF, "====================================================================");
			SMA(COLOR_GREEN, "Gang News: "WHITE"%s has received their 1st strike.", GangInfo[gangid][gName]);
			SMA(COLOR_GREEN, "Issued by: "WHITE"%s.", pData[playerid][pAdminName]);
			SMA(COLOR_GREEN, "Issued date: "WHITE"%s.", GetDate());
			SMA(COLOR_GREEN, "Reason: "WHITE"%s", reason);
			SMA(0x4F9C4FFF, "====================================================================");
			GangStrikeLog(playerid, gangid, reason);
		}
		case 2:
		{
			SMA(0x4F9C4FFF, "====================================================================");
			SMA(COLOR_GREEN, "Gang News: "WHITE"%s has received their 2nd strike.", GangInfo[gangid][gName]);
			SMA(COLOR_GREEN, "Issued by: "WHITE"%s.", pData[playerid][pAdminName]);
			SMA(COLOR_GREEN, "Issued date: "WHITE"%s.", GetDate());
			SMA(COLOR_GREEN, "Reason: "WHITE"%s", reason);
			SMA(0x4F9C4FFF, "====================================================================");
			GangStrikeLog(playerid, gangid, reason);
		}
		case 3:
		{
			SMA(0x4F9C4FFF, "====================================================================");
			SMA(COLOR_GREEN, "Gang News: "WHITE"%s has received their 3rd strike and has been automatically removed from the family lists.", GangInfo[gangid][gName]);
			SMA(COLOR_GREEN, "Issued by: "WHITE"%s.", pData[playerid][pAdminName]);
			SMA(COLOR_GREEN, "Issued date: "WHITE"%s.", GetDate());
			SMA(COLOR_GREEN, "Reason: "WHITE"%s", reason);
			SMA(0x4F9C4FFF, "====================================================================");
			RemoveGang(gangid);
			GangStrikeLog(playerid, gangid, reason);
		}
	}
	return 1;
}

GangStrikeLog(playerid, gangid, reason[])
{
	new DCC_Channel:gangstrikelog = DCC_FindChannelById("931373674689347605");
	new DCC_Embed:embed = DCC_CreateEmbed();
	new string[500];

	switch(GangInfo[gangid][gStrikes])
	{
		case 1:
		{
			format(string, sizeof(string), "Gang News: %s has received their 1st strike.\nIssued by: <@%s>.\nIssued date: %s.\nReason: %s", GangInfo[gangid][gName], pData[playerid][pDiscordID], GetDate(), reason);
		}
		case 2:
		{
			format(string, sizeof(string), "Gang News: %s has received their 2nd strike.\nIssued by: <@%s>.\nIssued date: %s.\nReason: %s", GangInfo[gangid][gName], pData[playerid][pDiscordID], GetDate(), reason);
		}
		case 3:
		{
			format(string, sizeof(string), "Gang News: %s has received their 3rd strike and has been automatically\nremoved from the family lists.\nIssued by: <@%s>.\nIssued date: %s.\nReason: %s", GangInfo[gangid][gName], pData[playerid][pDiscordID], GetDate(), reason);
		}
	}
	DCC_SetEmbedTitle(embed, "New Gang Strike");
	DCC_SetEmbedDescription(embed, string);
	DCC_SetEmbedImage(embed, "https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.gtabase.com%2Fgta-san-andreas%2Fgangs%2F&psig=AOvVaw1cC2bkp32MkR8dTyiyeIEp&ust=1648631377210000&source=images&cd=vfe&ved=0CAsQjRxqFwoTCJDVyM_86vYCFQAAAAAdAAAAABAD");
	DCC_SetEmbedFooter(embed, "Gang news brought to you by `The Alcazar Staff`");
	DCC_SendChannelEmbedMessage(gangstrikelog, embed);
}

CMD:setgang(playerid, params[])
{
	new targetid, gangid, rankid;

	if(!pData[playerid][pGangMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "uiI(-1)", targetid, gangid, rankid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setgang [playerid] [gangid (-1 = none)] [rank (optional)]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(!(0 <= gangid < MAX_GANGS) || (gangid >= 0 && !GangInfo[gangid][gSetup]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid gang.");
	}
	if((gangid != -1 && !(-1 <= rankid <= 6)))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid rank.");
	}

	if(gangid == -1)
	{
	    pData[targetid][pGang] = -1;
		pData[targetid][pGangRank] = 0;

		SM(targetid, COLOR_AQUA, "%s has removed you from your gang.", GetRPName(playerid));
		SAM(COLOR_LIGHTRED, "AdmCmd: %s has removed %s from their gang.", GetRPName(playerid), GetRPName(targetid));
	}
	else
	{
		if(rankid == -1)
		{
	    	rankid = 6;
		}

	    /*if(rankid == 6)
	    {
	        GetPlayerName(targetid, GangInfo[gangid][gLeader], MAX_PLAYER_NAME);

	    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET leader = '%e' WHERE id = %i", GangInfo[gangid][gLeader], gangid);
			mysql_tquery(connectionID, queryBuffer);
		}*/

		pData[targetid][pGang] = gangid;
		pData[targetid][pGangRank] = rankid;

		SM(targetid, COLOR_AQUA, "%s has made you a "SVRCLR"%s{CCFFFF} in %s.", GetRPName(playerid), GangRanks[gangid][rankid], GangInfo[gangid][gName]);
		SAM(COLOR_LIGHTRED, "AdmCmd: %s has made %s a %s in %s.", GetRPName(playerid), GetRPName(targetid), GangRanks[gangid][rankid], GangInfo[gangid][gName]);
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gang = %i, gangrank = %i WHERE uid = %i", gangid, rankid, pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	return 1;
}

DCMD:fam(user, channel, params[]) return calldcmd::gangs(user, channel, params);
DCMD:gangs(user, channel, params[])
{
    new gangid;
	new DCC_Guild:guild = DCC_FindGuildById("905667779103977522");
	new DCC_Role:role = DCC_FindRoleById("921313269321457684"); // Developer role
	new bool:hasRole;
	DCC_HasGuildMemberRole(guild, user, role, hasRole);
	if(!hasRole)// If user doesn't have the role needed
	{
		return 1;
	}
    if(sscanf(params, "i", gangid))
	{
	    DCC_SendChannelMessage(channel, "Gangs:");

		for(new i = 0; i < MAX_GANGS; i ++)
		{
		    if(GangInfo[i][gSetup])
		    {
		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM users WHERE gang = %i", i);
		        mysql_tquery(connectionID, queryBuffer, "OnPlayerListGangsDiscord", "i", i);
		    }
		}
		return 1;
	}
    return 1;
}

CMD:gangs(playerid, params[]) { return SendClientMessage(playerid, COLOR_AQUA, "/gangs has been revised to /families. Happy Gaming!!"); }
CMD:families(playerid, params[])
{
	new gangid;

	if(sscanf(params, "i", gangid))
	{
	    SCM(playerid, SERVER_COLOR, "Gangs:");

		for(new i = 0; i < MAX_GANGS; i ++)
		{
		    if(GangInfo[i][gSetup])
		    {
		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM users WHERE gang = %i", i);
		        mysql_tquery(connectionID, queryBuffer, "OnPlayerListGangs", "ii", playerid, i);
		    }
		}
		return 1;
	}
	if(!(1 <= gangid < MAX_GANGS) || !GangInfo[gangid][gSetup])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid gang.");
	}
	if(GangInfo[gangid][gAlliance] != -1)
	{
	    SM(playerid, COLOR_GREY, "Name: %s - Leader: %s - Strikes: %i/3 - Alliance: %s", GangInfo[gangid][gName], GangInfo[gangid][gLeader], GangInfo[gangid][gStrikes], GangInfo[GangInfo[gangid][gAlliance]][gName]);
	}

	SCM(playerid, SERVER_COLOR, "Members Online:");

	foreach(new i : Player)
	{
	    if(pData[i][pLogged] && pData[i][pGang] == gangid)
	    {
	        SM(playerid, COLOR_GREY2, "(%i) %s %s", pData[i][pGangRank], GangRanks[gangid][pData[i][pGangRank]], GetRPName(i));
		}
	}

	return 1;
}

CMD:turfinfo(playerid, params[])
{
	new
		iCount,
		szMessage[280];

	SCM(playerid, SERVER_COLOR, "Turf Info:");
	for(new i; i < MAX_TURFS; i++)
	{
		if(TurfInfo[i][tExists])
		{
		    if(TurfInfo[i][tCapturer] != INVALID_PLAYER_ID)
			{
				if(TurfInfo[i][tCaptureTime] == 1)
				{
					format(szMessage, sizeof(szMessage), "* %s | Capper: %s | %s | Time left: Less than 1 minute", TurfInfo[i][tName], GetRPName(TurfInfo[i][tCapturer]), GangInfo[pData[TurfInfo[i][tCapturer]][pGang]][gName]);
					SCM(playerid, COLOR_WHITE, szMessage);
					iCount++;
				}
				else
				{
					format(szMessage, sizeof(szMessage), "* %s | Capper: %s | %s | Time left: %d minutes", TurfInfo[i][tName], GetRPName(TurfInfo[i][tCapturer]), GangInfo[pData[TurfInfo[i][tCapturer]][pGang]][gName], TurfInfo[i][tCaptureTime]);
					SCM(playerid, COLOR_WHITE, szMessage);
					iCount++;
				}
			}
		}
	}
	if(iCount == 0)
		return SCM(playerid, COLOR_SYNTAX, "No gang has attempted to capture a turf at this time.");
	return 1;
}

CMD:pointinfo(playerid, params[])
{
	new
		iCount,
		szMessage[1080];

	SCM(playerid, SERVER_COLOR, "Point Info:");
	for(new i; i < MAX_POINTS; i++)
	{
		if(PointInfo[i][pExists])
		{
		    if(PointInfo[i][pCapturer] != INVALID_PLAYER_ID)
			{
				if(PointInfo[i][pCaptureTime] == 1) {
					format(szMessage, sizeof(szMessage), "* "WHITE"%s"GREY" | Capper: "WHITE"%s"GREY" | "WHITE"%s"GREY" | Time left: "RED"Less than 1 minute", PointInfo[i][pName], GetRPName(PointInfo[i][pCapturer]), GangInfo[pData[PointInfo[i][pCapturer]][pGang]][gName]);
					SCM(playerid, COLOR_GREY, szMessage);
					iCount++;
				} else {
					format(szMessage, sizeof(szMessage), "* "WHITE"%s"GREY" | Capper: "WHITE"%s"GREY" | "WHITE"%s"GREY" | Time left: "WHITE"%d minutes", PointInfo[i][pName], GetRPName(PointInfo[i][pCapturer]), GangInfo[pData[PointInfo[i][pCapturer]][pGang]][gName], PointInfo[i][pCaptureTime]);
					SCM(playerid, COLOR_GREY, szMessage);
					iCount++;
				}
			}
		}
	}
	if(iCount == 0)
		return SCM(playerid, COLOR_SYNTAX, "No gang has attempted to capture a point at this time.");
	return 1;
}

CMD:gangwarinfo(playerid, params[])
{
	new
		iCount;
	for(new i; i < MAX_TURFS; i++)
	{
		if(TurfInfo[i][tCapturer] != INVALID_PLAYER_ID)
		{
			callcmd::turfinfo(playerid, params);
		}
	}
	for(new i; i < MAX_POINTS; i++)
	{
		if(PointInfo[i][pCapturer] != INVALID_PLAYER_ID)
		{
			callcmd::gcc(playerid, params);
		}
	}
	if(iCount == 0)
		return SCM(playerid, COLOR_SYNTAX, "No gang has attempted to capture a turf/point at this time.");
	return 1;
}

CMD:points(playerid, params[])
{
	new name[280], color, string[2048];
	psstring = "";
	for(new i = 0; i < MAX_POINTS; i ++)
	{
		if(PointInfo[i][pExists])
		{
			if(PointInfo[i][pCapturedGang] == -1)
			{
				name = "None";
				color = 0xFFFFFF00;
			}
			else
			{
				strcpy(name, GangInfo[PointInfo[i][pCapturedGang]][gName]);
				color = GangInfo[PointInfo[i][pCapturedGang]][gColor];
			}
			if(strlen(string) < 1950)
			{
			    format(string, sizeof(string), "%s{%06x}%i. %s | %s | Claimer: %s | Profits: $%i | Time: %ih\n", string, color >>> 8, i, PointInfo[i][pName], name, PointInfo[i][pCapturedBy], PointInfo[i][pProfits], PointInfo[i][pTime]);
			}
			else
			{
			    format(psstring, sizeof(psstring), "%s{%06x}%i. %s | %s | Claimer: %s | Profits: $%i | Time: %ih\n", psstring, color >>> 8, i, PointInfo[i][pName], name, PointInfo[i][pCapturedBy], PointInfo[i][pProfits], PointInfo[i][pTime]);
			}

		}
	}
	ShowPlayerDialog(playerid, DIALOG_POINTLIST, DIALOG_STYLE_MSGBOX, ""SVRCLR"Point List"WHITE" ("REVISION")", string, "Next", "Cancel");
	return 1;
}

CMD:lands(playerid, params[])
{
	if(!pData[playerid][pShowLands])
	{
        ShowLandsOnMap(playerid, true);
        ShowTurfsOnMap(playerid, false);
        SCM(playerid, COLOR_AQUA, "You will now see lands on your mini-map.");
	}
	else
	{
        ShowLandsOnMap(playerid, false);
        SCM(playerid, COLOR_AQUA, "You will no longer see any lands on your mini-map.");
	}

	return 1;
}

CMD:gcc(playerid, params[])
{
    if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /f [gang chat]");
	}
	if(pData[playerid][pGang] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any gang at the moment.");
	}
    if(pData[playerid][pToggleGang])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't speak in the gang chat as you have it toggled.");
	}
	if(pData[playerid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while dead.");
	}
	if(pData[playerid][pCuffed])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while cuffed");
	}
	if(pData[playerid][pTied])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while tied.");
	}

	foreach(new i : Player)
	{
	    if(pData[i][pGang] == pData[playerid][pGang] && !pData[i][pToggleGang])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
	            SM(i, 0x00FFFFFF, "** (%i) %s %s: %.*s... **", pData[playerid][pGangRank], GangRanks[pData[playerid][pGang]][pData[playerid][pGangRank]], GetRPName(playerid), MAX_SPLIT_LENGTH, params);
	            SM(i, 0x00FFFFFF, "** (%i) %s %s: ...%s **", pData[playerid][pGangRank], GangRanks[pData[playerid][pGang]][pData[playerid][pGangRank]], GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SM(i, COLOR_YELLOW, "** (%i) %s %s:"WHITE" %s **", pData[playerid][pGangRank], GangRanks[pData[playerid][pGang]][pData[playerid][pGangRank]], GetRPName(playerid), params);
			}
		}
	}

	return 1;
}

CMD:ally(playerid, params[])
{
	new gangid = pData[playerid][pGang];

	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /ally [Alliance chat]");
	}
	if(pData[playerid][pGang] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any gang at the moment.");
	}
	if(GangInfo[gangid][gAlliance] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "Your gang isn't a part of an alliance.");
	}
    if(pData[playerid][pToggleGang])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't speak in the alliance chat as you have gang chat toggled.");
	}
	if(pData[playerid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while dead.");
	}
	if(pData[playerid][pCuffed])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while cuffed");
	}
	if(pData[playerid][pTied])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while tied.");
	}

	foreach(new i : Player)
	{
	    if((pData[i][pGang] == pData[playerid][pGang] || pData[i][pGang] == GangInfo[gangid][gAlliance])  && !pData[i][pToggleGang])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
	            SM(i, 0x6DFB6DFF, "** (A-Radio] %s %s: %.*s... **", GangRanks[pData[playerid][pGang]][pData[playerid][pGangRank]], GetRPName(playerid), MAX_SPLIT_LENGTH, params);
	            SM(i, 0x6DFB6DFF, "** (A-Radio] %s %s: ...%s **", GangRanks[pData[playerid][pGang]][pData[playerid][pGangRank]], GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SM(i, 0x6DFB6DFF, "** (A-Radio) %s %s: %s **", GangRanks[pData[playerid][pGang]][pData[playerid][pGangRank]], GetRPName(playerid), params);
			}
		}
	}

	return 1;
}

CMD:members(playerid, params[])
{
	if(pData[playerid][pGang] != -1)
	{
		callcmd::gmembers(playerid, params);
	}
	if(pData[playerid][pFaction] != -1)
	{
 		callcmd::fmembers(playerid, params);
	}
	return 1;
}

CMD:fmembers(playerid, params[])
{
	if(pData[playerid][pFaction] == -1)
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not apart of any faction.");
	}

    SCM(playerid, SERVER_COLOR, "Factions Online:");
    new string[128], color = FactionInfo[pData[playerid][pFaction]][fColor];

    foreach(new i : Player)
    {
        if(pData[i][pFaction] == pData[playerid][pFaction])
        {
            format(string, sizeof(string), "(ID: %i) %s {%06x}%s", i, FactionRanks[pData[i][pFaction]][pData[i][pFactionRank]], color >>> 8, GetRPName(i));
			if(pData[i][pDivision] >= 0)
			{
			    format(string, sizeof(string), "%s | Division: %s", string, FactionDivisions[pData[i][pFaction]][pData[i][pDivision]]);
			}
			if(FactionInfo[pData[i][pFaction]][fType] == FACTION_MEDIC)
			{
			    SCM(playerid, COLOR_WHITE, string);
			    format(string, sizeof(string), "%s | Total Patients: %i | Total Fires: %i", string, pData[i][pTotalPatients], pData[i][pTotalFires]);
			}
			format(string, sizeof(string), "%s | Location: %s", string, GetPlayerZoneName(i));
			if(pData[i][pAFK])
            {
				format(string, sizeof(string), "%s | "SVRCLR"AFK"WHITE" (%d secs)", string, pData[i][pAFKTime]);
			}
			SCM(playerid, COLOR_WHITE, string);
		}
    }

	return 1;
}
CMD:gmembers(playerid, params[])
{
	if(pData[playerid][pGang] == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not apart of a gang at the moment.");
	}

    SCM(playerid, SERVER_COLOR, "Gangs Online:");
	new string[128], color = GangInfo[pData[playerid][pGang]][gColor];
    foreach(new i : Player)
    {
        if(pData[i][pGang] == pData[playerid][pGang])
        {
            format(string, sizeof(string), "(%i) %s {%06x}%s", pData[i][pGangRank], GangRanks[pData[i][pGang]][pData[i][pGangRank]], color >>> 8, GetRPName(i));
   			format(string, sizeof(string), "%s | Location: %s", string, GetPlayerZoneName(i));
			if(pData[i][pAFK])
            {
				format(string, sizeof(string), "%s | "SVRCLR"AFK"WHITE" (%d secs)", string, pData[i][pAFKTime]);
			}
			SCM(playerid, COLOR_WHITE, string);
		}
    }

    return 1;
}

CMD:gang(playerid, params[])
{
	new targetid, option[16], param[128];

	if(pData[playerid][pGang] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any gang at the moment.");
	}
	if(sscanf(params, "s[16]S()[128]", option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /gang [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Invite, Kick, Rank, Roster, Online, Quit, Offlinekick");
	    SCM(playerid, COLOR_WHITE, "Available options: MOTD, Stash, Stats, Rankname, Skin, Upgrade, Allience");
	    return 1;
	}
	if(!strcmp(option, "invite", true))
	{
		if(pData[playerid][pGangRank] < 5)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You need to be at least rank 5+ to use this command.");
		}
		if(sscanf(param, "u", targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /gang [invite] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
		}
		if(pData[targetid][pGang] != -1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player is already apart of a gang.");
		}
		if(pData[targetid][pFaction] >= 0 && FactionInfo[pData[targetid][pFaction]][fType] != FACTION_HITMAN)
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player is a part of a faction and therefore can't join your gang.");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM users WHERE gang = %i", pData[playerid][pGang]);
		mysql_tquery(connectionID, queryBuffer, "OnPlayerAttemptInviteGang", "ii", playerid, targetid);
	}
	else if(!strcmp(option, "skin", true))
	{
	    new slot, skinid;
		if(pData[playerid][pGangRank] < 5)
		{
		    return SCM(playerid, COLOR_GREY2, "You need to be at least rank 5+ to use this command.");
		}
	    if(sscanf(param, "ii", slot, skinid))
	    {
	        SCM(playerid, SERVER_COLOR, "Gang Skins:");

	        for(new i = 0; i < MAX_GANG_SKINS; i ++)
	        {
	            if(GangInfo[pData[playerid][pGang]][gSkins][i] == 0)
	            	SM(playerid, COLOR_GREY2, "Skin %i: (none)", i + 1);
				else
				    SM(playerid, COLOR_GREY2, "Skin %i: %i", i + 1, GangInfo[pData[playerid][pGang]][gSkins][i]);
	        }

	        return SM(playerid, COLOR_GREY2, "Usage: /gang [skin] [slot (1-%i)] [skinid]", MAX_GANG_SKINS);
	    }
	    if(!(1 <= slot <= MAX_GANG_SKINS))
	    {
	        return SCM(playerid, COLOR_GREY2, "Invalid slot.");
		}
		if(!(0 <= skinid <= 311))
		{
		    return SCM(playerid, COLOR_GREY2, "Invalid skin.");
		}

		slot--;

		GangInfo[pData[playerid][pGang]][gSkins][slot] = skinid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO gangskins VALUES(%i, %i, %i) ON DUPLICATE KEY UPDATE skinid = %i", pData[playerid][pGang], slot, skinid, skinid);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_WHITE, "** You have set the skin in slot %i to ID %i.", slot + 1, skinid);
	}
	else if(!strcmp(option, "kick", true))
	{
		if(pData[playerid][pGangRank] < 5)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You need to be at least rank 5+ to use this command.");
		}
		if(sscanf(param, "u", targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /gang [kick] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
		}
		if(pData[targetid][pGang] != pData[playerid][pGang])
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player is not apart of your gang.");
		}
		if(pData[targetid][pGangRank] > pData[playerid][pGangRank])
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has a higher rank than you.");
		}

		Log_Write("log_gang", "%s (uid: %i) kicked %s (uid: %i) from %s (id: %i) as rank %s (%i).", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang], GangRanks[pData[targetid][pGang]][pData[targetid][pGangRank]], pData[targetid][pGangRank]);

		pData[targetid][pGang] = -1;
		pData[targetid][pGangRank] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gang = -1, gangrank = 0 WHERE uid = %i", pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has kicked you from the gang.", GetRPName(playerid));
		SM(playerid, COLOR_AQUA, "You have kicked %s from your gang.", GetRPName(targetid));
	}
	else if(!strcmp(option, "rank", true))
	{
	    new rankid;

		if(pData[playerid][pGangRank] < 5)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You need to be at least rank 5+ to use this command.");
		}
		if(sscanf(param, "ui", targetid, rankid))
		{
		    return SM(playerid, COLOR_SYNTAX, "Usage: /gang [rank] [playerid] [rankid (0-6)]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
		}
		if(rankid < 0 || rankid > pData[playerid][pGangRank])
		{
		    return SCM(playerid, COLOR_SYNTAX, "The rank specified is either invalid or higher than your rank.");
		}
		if(pData[targetid][pGang] != pData[playerid][pGang])
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player is not apart of your gang.");
		}
		if(pData[targetid][pGangRank] > pData[playerid][pGangRank])
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has a higher rank than you.");
		}

		pData[targetid][pGangRank] = rankid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gangrank = %i WHERE uid = %i", rankid, pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has set your rank to "SVRCLR"%s{CCFFFF} (%i).", GetRPName(playerid), GangRanks[pData[playerid][pGang]][rankid], rankid);
		SM(playerid, COLOR_AQUA, "You have set %s's rank to "SVRCLR"%s{CCFFFF} (%i).", GetRPName(targetid), GangRanks[pData[playerid][pGang]][rankid], rankid);
		Log_Write("log_gang", "%s (uid: %i) has set %s's (uid: %i) rank in %s (id: %i) to %s (%i).", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang], GangRanks[pData[playerid][pGang]][rankid], rankid);
	}
	else if(!strcmp(option, "stash", true))
	{
	    if(pData[playerid][pAdmin] < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Contact an admin via /am");
		}
		if(isnull(param) || strcmp(param, "confirm", true) != 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /gang [stash] [confirm] (Moves the gang stash.)");
		}

		GetPlayerPos(playerid, GangInfo[pData[playerid][pGang]][gStashX], GangInfo[pData[playerid][pGang]][gStashY], GangInfo[pData[playerid][pGang]][gStashZ]);
		GangInfo[pData[playerid][pGang]][gStashInterior] = GetPlayerInterior(playerid);
		GangInfo[pData[playerid][pGang]][gStashWorld] = GetPlayerVirtualWorld(playerid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET stash_x = '%f', stash_y = '%f', stash_z = '%f', stashinterior = %i, stashworld = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gStashX], GangInfo[pData[playerid][pGang]][gStashY], GangInfo[pData[playerid][pGang]][gStashZ], GangInfo[pData[playerid][pGang]][gStashInterior], GangInfo[pData[playerid][pGang]][gStashWorld], pData[playerid][pGang]);
		mysql_tquery(connectionID, queryBuffer);

		ReloadGang(pData[playerid][pGang]);
		SM(playerid, COLOR_AQUA, "You have moved the gang stash to your location. /gstash to access your stash.");
	}
	else if(!strcmp(option, "stats", true))
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM users WHERE gang = %i", pData[playerid][pGang]);
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_GANG_INFORMATION, playerid);
	}
	else if(!strcmp(option, "roster", true))
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, lastlogin, gangrank FROM users WHERE gang = %i ORDER BY gangrank DESC", pData[playerid][pGang]);
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_GANG_ROSTER, playerid);
	}
	else if(!strcmp(option, "online", true))
	{
	    callcmd::gmembers(playerid, "\1");
	}
	else if(!strcmp(option, "quit", true))
	{
	    if(isnull(param) || strcmp(param, "confirm", true) != 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /gang [quit] [confirm]");
	    }


	    SM(playerid, COLOR_AQUA, "You have quit %s as a "SVRCLR"%s{CCFFFF} (%i).", GangInfo[pData[playerid][pGang]][gName], GangRanks[pData[playerid][pGang]][pData[playerid][pGangRank]], pData[playerid][pGangRank]);
		Log_Write("log_gang", "%s (uid: %i) has quit %s (id: %i) has rank %s (%i).", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang], GangRanks[pData[playerid][pGang]][pData[playerid][pGangRank]], pData[playerid][pGangRank]);

	    pData[playerid][pGang] = -1;
		pData[playerid][pGangRank] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gang = -1, gangrank = 0 WHERE uid = %i", pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "offlinekick", true))
	{
	    new username[MAX_PLAYER_NAME];

		if(pData[playerid][pGangRank] < 5)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You need to be at least rank 5+ to use this command.");
		}
		if(sscanf(param, "s[24]", username))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /gang [offlinekick] [username]");
		}
		if(IsPlayerOnline(username))
		{
	    	return SCM(playerid, COLOR_SYNTAX, "That player is already online and logged in. Use '/gang kick' instead.");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid, gang, gangrank FROM users WHERE username = '%e'", username);
		mysql_tquery(connectionID, queryBuffer, "OnPlayerOfflineKickGang", "is", playerid, username);
	}
	else if(!strcmp(option, "motd", true))
	{
	    if(pData[playerid][pGangRank] < 6)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You need to be at least rank 6+ to use this command.");
		}
	    if(isnull(param))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /gang [motd] [text]");
		}

		strcpy(GangInfo[pData[playerid][pGang]][gMOTD], param, 128);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET motd = '%e' WHERE id = %i", param, pData[playerid][pGang]);
		mysql_tquery(connectionID, queryBuffer);

		ReloadGang(pData[playerid][pGang]);
		SCM(playerid, COLOR_AQUA, "You have changed the MOTD for your gang.");
	}
	else if(!strcmp(option, "rankname", true))
	{
	    new rankid, rank[32];

        if(pData[playerid][pGangRank] < 6)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You need to be at least rank 6+ to use this command.");
		}
	    if(sscanf(param, "is[32]", rankid, rank))
	    {
	        SCM(playerid, SERVER_COLOR, "Rank Names:");

	        for(new i = 0; i < 7; i ++)
	        {
	            if(isnull(GangRanks[pData[playerid][pGang]][i]))
	            	SM(playerid, COLOR_GREY2, "Rank %i: (empty)", i);
				else
				    SM(playerid, COLOR_GREY2, "Rank %i: %s", i, GangRanks[pData[playerid][pGang]][i]);
	        }

	        return SCM(playerid, COLOR_SYNTAX, "Usage: /gang [rankname] [slot (0-6)] [name]");
	    }
	    if(!(0 <= rankid <= 6))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Invalid rank.");
		}

	    strcpy(GangRanks[pData[playerid][pGang]][rankid], rank, 32);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO gangranks VALUES(%i, %i, '%e') ON DUPLICATE KEY UPDATE name = '%e'", pData[playerid][pGang], rankid, rank, rank);
	    mysql_tquery(connectionID, queryBuffer);

	    SM(playerid, COLOR_AQUA, "You have set the name of rank %i to "SVRCLR"%s{CCFFFF}.", rankid, rank);
	}
/*  else if(!strcmp(option, "npc", true))
	{
	    new type, confirm[10];

	    if(pData[playerid][pGangRank] < 6)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You need to be at least rank 6+ to use this command.");
		}
		if(sscanf(param, "is[10]", type, confirm))
		{
		    SCM(playerid, COLOR_SYNTAX, "Usage: /gang [npc] [slot] [confirm]");
		    SCM(playerid, COLOR_GREY2, "List of slots: (1) Arms Dealer (2) Drug Dealer");
		    return 1;
		}
		if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pJailTime] > 0 || pData[playerid][pJoinedEvent] > 0 || pData[playerid][pPaintball])
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
		}
		if(IsPlayerInAnyVehicle(playerid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can't use this command from within the vehicle.");
		}

		if(!isnull(confirm) && !strcmp(confirm, "confirm", true))
		{
			if(type == 1)
			{
			    if(!GangInfo[pData[playerid][pGang]][gArmsDealer])
				{
		    		return SCM(playerid, COLOR_SYNTAX, "Your gang doesn't have the arms dealer upgrade. (/gang upgrade)");
				}

				GetPlayerPos(playerid, GangInfo[pData[playerid][pGang]][gArmsX], GangInfo[pData[playerid][pGang]][gArmsY], GangInfo[pData[playerid][pGang]][gArmsZ]);
				SetPlayerPos(playerid, GangInfo[pData[playerid][pGang]][gArmsX] + 1.0, GangInfo[pData[playerid][pGang]][gArmsY], GangInfo[pData[playerid][pGang]][gArmsZ] + 1.0);
		        GetPlayerFacingAngle(playerid, GangInfo[pData[playerid][pGang]][gArmsA]);
		        GangInfo[pData[playerid][pGang]][gArmsWorld] = GetPlayerVirtualWorld(playerid);

		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET arms_x = '%f', arms_y = '%f', arms_z = '%f', arms_a = '%f', armsworld = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gArmsX], GangInfo[pData[playerid][pGang]][gArmsY], GangInfo[pData[playerid][pGang]][gArmsZ], GangInfo[pData[playerid][pGang]][gArmsA], GangInfo[pData[playerid][pGang]][gArmsWorld], pData[playerid][pGang]);
		        mysql_tquery(connectionID, queryBuffer);

		        ReloadGang(pData[playerid][pGang]);
		        SCM(playerid, COLOR_AQUA, "You have moved the position of the arms dealer for your gang.");
			}
			else if(type == 2)
			{
			    if(!GangInfo[pData[playerid][pGang]][gDrugDealer])
				{
		    		return SCM(playerid, COLOR_SYNTAX, "Your gang doesn't have the drug dealer upgrade. (/gang upgrade)");
				}

				GetPlayerPos(playerid, GangInfo[pData[playerid][pGang]][gDrugX], GangInfo[pData[playerid][pGang]][gDrugY], GangInfo[pData[playerid][pGang]][gDrugZ]);
				SetPlayerPos(playerid, GangInfo[pData[playerid][pGang]][gDrugX] + 1.0, GangInfo[pData[playerid][pGang]][gDrugY], GangInfo[pData[playerid][pGang]][gDrugZ] + 1.0);
		        GetPlayerFacingAngle(playerid, GangInfo[pData[playerid][pGang]][gDrugA]);
		        GangInfo[pData[playerid][pGang]][gDrugWorld] = GetPlayerVirtualWorld(playerid);

		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drug_x = '%f', drug_y = '%f', drug_z = '%f', drug_a = '%f', drugworld = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gDrugX], GangInfo[pData[playerid][pGang]][gDrugY], GangInfo[pData[playerid][pGang]][gDrugZ], GangInfo[pData[playerid][pGang]][gDrugA], GangInfo[pData[playerid][pGang]][gDrugWorld], pData[playerid][pGang]);
		        mysql_tquery(connectionID, queryBuffer);

		        ReloadGang(pData[playerid][pGang]);
		        SCM(playerid, COLOR_AQUA, "You have moved the position of the drug dealer for your gang.");
			}
		}
	}*/
	else if(!strcmp(option, "upgrade", true))
	{
	    if(pData[playerid][pGangRank] < 6)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You need to be at least rank 6+ to use this command.");
		}

		new
		    title[48],
			string[1024] = "Perk\tDescription\tCost";

		strcat(string, "\nDrug dealer\tAn NPC which sells individually stocked drugs\t{F7A763}500 GP "WHITE"+"SVRCLR" $50,000");
		strcat(string, "\nArms dealer\tAn NPC which sells individually stocked weapons\t{F7A763}500 GP "WHITE"+"SVRCLR" $50,000");

		if(GangInfo[pData[playerid][pGang]][gLevel] == 1)
		{
		    strcat(string, "\nLevel Up\tAdvance your gang's level to 2/3.\t{F7A763}6000 GP "WHITE"+"SVRCLR" $75,000");
		}
		else if(GangInfo[pData[playerid][pGang]][gLevel] == 2)
		{
		    strcat(string, "\nLevel Up\tAdvance your gang's level to 3/3.\t{F7A763}12000 GP "WHITE"+"SVRCLR" $100,000");
		}

		format(title, sizeof(title), "Gang upgrades (Your gang has %i GP.)", GangInfo[pData[playerid][pGang]][gPoints]);
		ShowPlayerDialog(playerid, DIALOG_GANGPOINTSHOP, DIALOG_STYLE_TABLIST_HEADERS, title, string, "Select", "Cancel");
	}
	else if(!strcmp(option, "alliance", true))
	{
	    new gangid = pData[playerid][pGang];

		if(pData[playerid][pGangRank] < 6)
		{
			return SCM(playerid, COLOR_SYNTAX, "You need to be at least rank 6+ to use this command.");
	  	}
		if(sscanf(param, "u", targetid))
	  	{
	   		return SCM(playerid, COLOR_SYNTAX, "Usage: /gang [alliance] [playerid]");
	  	}
  	 	if(GangInfo[gangid][gAlliance] >= 0)
		{
			return SCM(playerid, COLOR_SYNTAX, "You're already in an alliance, end it first! (/endalliance)");
	  	}
	  	if(pData[targetid][pGangRank] < 6)
	  	{
			return SCM(playerid, COLOR_SYNTAX, "The player you're offering to ally with must be R6 in their gang!");
	  	}
        if(pData[targetid][pGang] == gangid)
		{
			return SCM(playerid, COLOR_SYNTAX, "You cannot form an alliance with your own gang!");
		}

		if(GangInfo[gangid][gAlliance] == -1)
		{
			SM(playerid, COLOR_AQUA, "You've offered to form a gang alliance with %s.", GetRPName(targetid));
			SM(targetid, COLOR_AQUA, "%s has offered to form an alliance with your gang. (/accept alliance)", GetRPName(playerid));
			pData[targetid][pAllianceOffer] = playerid;
		}
	}

	return 1;
}


CMD:gstash(playerid, params[])
{
	if(pData[playerid][pGang] == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not apart of a gang at the moment.");
	}
	if(pData[playerid][pFaction] >= 0)
	{
	    return SCM(playerid, COLOR_GREY, "You cannot use this command while in a faction.");
	}
    if(!IsPlayerInRangeOfPoint(playerid, 5.0, GangInfo[pData[playerid][pGang]][gStashX], GangInfo[pData[playerid][pGang]][gStashY], GangInfo[pData[playerid][pGang]][gStashZ]))
    {
		return SCM(playerid, COLOR_SYNTAX, "You are not in range of your gang stash.");
	}

	ShowDialogToPlayer(playerid, DIALOG_GANGSTASH);
	return 1;
}

CMD:bandana(playerid, params[])
{
    if(pData[playerid][pGang] == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not apart of a gang at the moment.");
	}
	new gang = pData[playerid][pGang], color, string[128];
	if(pData[playerid][pBandana])
	{
		UpdateDynamic3DTextLabelText(PlayerLabel[playerid], COLOR_WHITE, "");
 		pData[playerid][pBandana] = 0;
     	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes off their bandana and puts it back to their pocket.", GetRPName(playerid));
		ApplyAnimation(playerid, "goggles", "goggles_put_on", 4.1, 0, 0, 0, 0, 0);
	}
	else
	{
		if(pData[playerid][pJoinedEvent])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You can not put on your bandana on while in a event or paintball match.");
		}
		if(GangInfo[gang][gColor] == -1 || GangInfo[gang][gColor] == -256)
		{
			color = 0xC8C8C8FF;
		}
		else
		{
		    color = GangInfo[gang][gColor];
		}

		format(string, sizeof(string), "{%06x}%s\n"WHITE"%s", color >>> 8, GangInfo[gang][gName],GangRanks[gang][pData[playerid][pGangRank]]);
		UpdateDynamic3DTextLabelText(PlayerLabel[playerid], COLOR_WHITE, string);
 		pData[playerid][pBandana] = 1;
       	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes out their bandana and wraps it around their forehead.", GetRPName(playerid));
		ApplyAnimation(playerid, "goggles", "goggles_put_on", 4.1, 0, 0, 0, 0, 0);
	}
	return 1;
}

/*CMD:gbuyvehicle(playerid, params[])
{
	static string[4096];
    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not rank 5+ in any gang at the moment.");
	}
	if(GetGangVehicles(pData[playerid][pGang]) >= GetGangVehicleLimit(pData[playerid][pGang]))
    {
        return SM(playerid, COLOR_SYNTAX, "Your gang can't have more than %i vehicles at its level.", GetGangVehicleLimit(pData[playerid][pGang]));
    }

	pData[playerid][pGangCar] = 1;

	if(IsPlayerInRangeOfPoint(playerid, 3.0, 542.0433, -1293.5909, 17.2422))
	{
  		string = "Category\tVehicle\tPrice";

		for(new i = 0; i < sizeof(vehicleArray); i ++)
	  	{
	  		if(strcmp(vehicleArray[i][carCategory], "Boats") != 0 && strcmp(vehicleArray[i][carCategory], "Aircraft") != 0)
	  		{
		    	format(string, sizeof(string), "%s\n%s\t%s\t"SVRCLR"%s", string, vehicleArray[i][carCategory], vehicleNames[vehicleArray[i][carModel] - 400], FormatNumber(vehicleArray[i][carPrice]));
			}
		}
		ShowPlayerDialog(playerid, DIALOG_BUYVEHICLE, DIALOG_STYLE_TABLIST_HEADERS, "Grotti Dealership", string, "Buy", "Cancel");
	}
	return 1;
}

CMD:gpark(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), id = VehicleInfo[vehicleid][vID];

	if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not rank 5+ in any gang at the moment.");
	}
	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not driving any of your gang vehicles.");
	}
	if(VehicleInfo[vehicleid][vGang] != pData[playerid][pGang])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't park this vehicle as it doesn't belong to your gang.");
	}

	// Save the vehicle's information.
	GetVehiclePos(vehicleid, VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ]);
	GetVehicleZAngle(vehicleid, VehicleInfo[vehicleid][vPosA]);

    VehicleInfo[vehicleid][vInterior] = GetPlayerInterior(playerid);
    VehicleInfo[vehicleid][vWorld] = GetPlayerVirtualWorld(playerid);

	SCM(playerid, COLOR_AQUA, "** Gang vehicle parked. It will now spawn here.");

	// Update the database record with the new information, then despawn the vehicle.
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', interior = %i, world = %i WHERE id = %i", VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ], VehicleInfo[vehicleid][vPosA], VehicleInfo[vehicleid][vInterior], VehicleInfo[vehicleid][vWorld], VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	SaveVehicleModifications(vehicleid);
 	DespawnVehicle(vehicleid, false);

	// Finally, we reload the vehicle from the database.
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM vehicles WHERE id = %i", id);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOAD_VEHICLES, -1);

	return 1;
}

CMD:gfindcar(playerid, params[])
{
	new string[512], count;

    if(pData[playerid][pGang] == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not apart of a gang at the moment.");
	}

	string = "#\tModel\tLocation";

	for(new i = 1; i < MAX_VEHICLES; i ++)
	{
	    if(IsValidVehicle(i) && VehicleInfo[i][vID] > 0 && VehicleInfo[i][vGang] == pData[playerid][pGang])
	    {
	        format(string, sizeof(string), "%s\n%i\t%s\t%s", string, count + 1, GetVehicleName(i), GetVehicleZoneName(i));
	        count++;
		}
	}

	if(!count)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Your gang has no vehicles which you can track.");
	}

	ShowPlayerDialog(playerid, DIALOG_GANGFINDCAR, DIALOG_STYLE_TABLIST_HEADERS, "Gang vehicles", string, "Track", "Cancel");
	return 1;
}

CMD:grespawncars(playerid, params[])
{
    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not rank 5+ in any gang at the moment.");
	}

    for(new i = 1; i < MAX_VEHICLES; i ++)
	{
	    if(IsValidVehicle(i) && VehicleInfo[i][vID] > 0 && VehicleInfo[i][vGang] == pData[playerid][pGang] && !IsVehicleOccupied(i))
	    {
	        SetVehicleToRespawn(i);
		}
	}

	SAM(COLOR_YELLOW, "AdmWarning: %s[%i] has respawned their gang vehicles.", GetRPName(playerid), playerid);
	SCM(playerid, COLOR_YELLOW, "You have respawned all of your unoccupied gang vehicles.");
	return 1;
}

CMD:gsellcar(playerid, params[])
{
  	new vehicleid = GetPlayerVehicleID(playerid);

	if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not rank 5+ in any gang at the moment.");
	}
	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not driving any of your gang vehicles.");
	}
	if(VehicleInfo[vehicleid][vGang] != pData[playerid][pGang])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't sell this vehicle as it doesn't belong to your gang.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 8.0, 542.0433, -1293.5909, 17.2422))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the Grotti car dealership.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /gsellcar [confirm]");
	    SM(playerid, COLOR_WHITE, "This command permanently deletes your gang vehicle. You will receive $%i back.", percent(VehicleInfo[vehicleid][vPrice], 75));
	    return 1;
	}

	GivePlayerCash(playerid, percent(VehicleInfo[vehicleid][vPrice], 75));

	SM(playerid, COLOR_YELLOW, "You have sold your %s to the dealership and received $%i back.", GetVehicleName(vehicleid), percent(VehicleInfo[vehicleid][vPrice], 75));
    Log_Write("log_gang", "%s (uid: %i) sold their gang owned %s (id: %i) to the dealership for $%i", GetPlayerNameEx(playerid), pData[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID], percent(VehicleInfo[vehicleid][vPrice], 75));

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM vehicles WHERE id = %i", VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	DespawnVehicle(vehicleid, false);
	return 1;
}*/

CMD:createpoint(playerid, params[])
{
    new type, name[32];

    if(pData[playerid][pAdmin] < 5 && !pData[playerid][pGangMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[32]", type, name))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /createpoint [type] [name]");
	    SCM(playerid, COLOR_GREY2, "List of types: (1) Drug factory (2) Drug den (3) Crack house (4) Auto export (5) Fuel");
		SCM(playerid, COLOR_GREY2, "List of types: (6) Mat pickup 1 (7) Mat pickup 2 (8) Mat factory 1 (9) Mat factory 2");
	    return 1;
	}
	if(!(0 <= type <= 9))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
	}

	for(new i = 0; i < MAX_POINTS; i ++)
	{
	    if(!PointInfo[i][pExists])
	    {
			GetPlayerPos(playerid, PointInfo[i][pPointX], PointInfo[i][pPointY], PointInfo[i][pPointZ]);

	        strcpy(PointInfo[i][pName], name, 32);
	        strcpy(PointInfo[i][pCapturedBy], "Pending", MAX_PLAYER_NAME);

	        PointInfo[i][pExists] = 1;
	        PointInfo[i][pType] = type;
	        PointInfo[i][pProfits] = 0;
	        PointInfo[i][pCapturedGang] = -1;
	        PointInfo[i][pTime] = 24;
	        PointInfo[i][pPointInterior] = GetPlayerInterior(playerid);
	        PointInfo[i][pPointWorld] = GetPlayerVirtualWorld(playerid);
	        PointInfo[i][pCaptureTime] = 0;
        	PointInfo[i][pCapturer] = INVALID_PLAYER_ID;
	        PointInfo[i][pText] = Text3D:INVALID_3DTEXT_ID;
	        PointInfo[i][pPickup] = -1;

	        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO points (id, name, type, point_x, point_y, point_z, pointinterior, pointworld) VALUES(%i, '%e', %i, '%f', '%f', '%f', %i, %i)", i, name, type, PointInfo[i][pPointX], PointInfo[i][pPointY], PointInfo[i][pPointZ], PointInfo[i][pPointInterior], PointInfo[i][pPointWorld]);
	        mysql_tquery(connectionID, queryBuffer);

	        ReloadPoint(i);

	        SAM(COLOR_LIGHTRED, "AdmCmd: %s has created point {F7A763}%s.", GetRPName(playerid), name);
	        SM(playerid, COLOR_AQUA, "You have created point {F7A763}%s{CCFFFF}. /editpoint %i to edit this point.", name, i);
	        return 1;
		}
	}

	return 1;
}

CMD:gotopoint(playerid, params[])
{
	new pointid;

	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", pointid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gotopoint [pointid]");
	}
	if(!(0 <= pointid < MAX_POINTS) || !PointInfo[pointid][pExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid point.");
	}

	GameTextForPlayer(playerid, "~w~Teleported", 5000, 1);

	SetPlayerPos(playerid, PointInfo[pointid][pPointX], PointInfo[pointid][pPointY], PointInfo[pointid][pPointZ]);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:editpoint(playerid, params[])
{
	new pointid, option[14], param[32];

	if(pData[playerid][pAdmin] < 5 && !pData[playerid][pGangMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[14]S()[32]", pointid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /editpoint [pointid] [option]");
		SCM(playerid, COLOR_WHITE, "Available options: Name, Location, CapturedBy, Gang, Type, Profits, Time");
	    return 1;
	}
	if(!(0 <= pointid < MAX_POINTS) || !PointInfo[pointid][pExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid point.");
	}

 	if(!strcmp(option, "name", true))
    {
        if(isnull(param))
        {
            return SCM(playerid, COLOR_SYNTAX, "Usage: /editpoint [pointid] [name] [text]");
		}

		strcpy(PointInfo[pointid][pName], param, 32);
		ReloadPoint(pointid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET name = '%e' WHERE id = %i", PointInfo[pointid][pName], pointid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the name of point %i to %s.", GetRPName(playerid), pointid, param);
		SM(playerid, COLOR_AQUA, "You have set the name of point %i to {F7A763}%s{CCFFFF}.", pointid, param);
	}
	else if(!strcmp(option, "location", true))
    {
		GetPlayerPos(playerid, PointInfo[pointid][pPointX], PointInfo[pointid][pPointY], PointInfo[pointid][pPointZ]);
		PointInfo[pointid][pPointInterior] = GetPlayerInterior(playerid);
		PointInfo[pointid][pPointWorld] = GetPlayerVirtualWorld(playerid);
		ReloadPoint(pointid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET point_x = '%f', point_y = '%f', point_z = '%f', pointinterior = %i, pointworld = %i WHERE id = %i", PointInfo[pointid][pPointX], PointInfo[pointid][pPointY], PointInfo[pointid][pPointZ], PointInfo[pointid][pPointInterior], PointInfo[pointid][pPointWorld], pointid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has moved the location of point %i.", GetRPName(playerid), pointid);
		SM(playerid, COLOR_AQUA, "You have moved the location of point %i.", pointid);
	}
	else if(!strcmp(option, "capturedby", true))
    {
        if(isnull(param) || strlen(params) > 24)
        {
            return SCM(playerid, COLOR_SYNTAX, "Usage: /editpoint [pointid] [capturedby] [name]");
		}

		strcpy(PointInfo[pointid][pCapturedBy], param, MAX_PLAYER_NAME);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET capturedby = '%e' WHERE id = %i", PointInfo[pointid][pCapturedBy], pointid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the capturer of point %i to %s.", GetRPName(playerid), pointid, param);
		SM(playerid, COLOR_AQUA, "You have set the capturer of point %i to {F7A763}%s{CCFFFF}.", pointid, param);
	}
	else if(!strcmp(option, "gang", true))
    {
        new gangid;

        if(sscanf(param, "i", gangid))
        {
            return SCM(playerid, COLOR_SYNTAX, "Usage: /editpoint [pointid] [gang] [gangid (-1 = none)]");
		}
		if(!(0 <= gangid < MAX_GANGS) || (gangid >= 0 && !GangInfo[gangid][gSetup]))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid gang.");
		}

		PointInfo[pointid][pCapturedGang] = gangid;
		ReloadPoint(pointid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET capturedgang = %i WHERE id = %i", PointInfo[pointid][pCapturedBy], pointid);
		mysql_tquery(connectionID, queryBuffer);

		if(gangid == -1)
		{
            SAM(COLOR_LIGHTRED, "AdmCmd: %s has reset the capturing gang of point %i.", GetRPName(playerid), pointid);
			SM(playerid, COLOR_AQUA, "You have reset the capturing gang of point %i.", pointid);
		}
		else
		{
			SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the capturing gang of point %i to %s.", GetRPName(playerid), pointid, GangInfo[gangid][gName]);
			SM(playerid, COLOR_AQUA, "You have set the capturing gang of point %i to "SVRCLR"%s{CCFFFF}.", pointid, GangInfo[gangid][gName]);
		}
	}
	else if(!strcmp(option, "type", true))
    {
        new type;

        if(sscanf(param, "i", type))
        {
            SCM(playerid, COLOR_SYNTAX, "Usage: /editpoint [pointid] [type] [value]");
           	SCM(playerid, COLOR_GREY2, "List of types: (1) Drug factory (2) Drug den (3) Crack house (4) Auto export (5) Fuel");
			SCM(playerid, COLOR_GREY2, "List of types: (6) Mat pickup 1 (7) Mat pickup 2 (8) Mat factory 1 (9) Mat factory 2");
            return 1;
		}
		if(!(0 <= type <= 9))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
		}

		PointInfo[pointid][pType] = type;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET type = %i WHERE id = %i", PointInfo[pointid][pType], pointid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the type of point %i to %i.", GetRPName(playerid), pointid, type);
		SM(playerid, COLOR_AQUA, "You have set the type of point %i to %i.", pointid, type);
	}
    else if(!strcmp(option, "profits", true))
    {
        new value;

        if(sscanf(param, "i", value))
        {
            return SCM(playerid, COLOR_SYNTAX, "Usage: /editpoint [pointid] [profits] [value]");
		}

		PointInfo[pointid][pProfits] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET profits = %i WHERE id = %i", PointInfo[pointid][pProfits], pointid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the profits of point %i to $%i.", GetRPName(playerid), pointid, value);
		SM(playerid, COLOR_AQUA, "You have set the profits of point %i to $%i.", pointid, value);
	}
	else if(!strcmp(option, "time", true))
    {
        new value;

        if(sscanf(param, "i", value))
        {
            return SCM(playerid, COLOR_SYNTAX, "Usage: /editpoint [pointid] [time] [hours (0-24)]");
		}
		if(!(0 <= value <= 24))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The amount of hours must range from 0 to 24.");
		}

		PointInfo[pointid][pTime] = value;

		if(PointInfo[pointid][pTime] == 0)
		{
		    SMA(COLOR_TEAL, ""WHITE"%s"TEAL" is now available to capture.", PointInfo[pointid][pName]);
		}
		else
		{
		    PointInfo[pointid][pCapturer] = INVALID_PLAYER_ID;
		    PointInfo[pointid][pCaptureTime] = 0;
		}

		ReloadPoint(pointid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET time = %i WHERE id = %i", PointInfo[pointid][pTime], pointid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the time of point %i to %i hours.", GetRPName(playerid), pointid, value);
		SM(playerid, COLOR_AQUA, "You have set the time of point %i to %i hours.", pointid, value);
	}

	return 1;
}

CMD:removepoint(playerid, params[])
{
	new pointid;

	if(pData[playerid][pAdmin] < 5 && !pData[playerid][pGangMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", pointid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /removepoint [pointid]");
	}
	if(!(0 <= pointid < MAX_POINTS) || !PointInfo[pointid][pExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid point.");
	}

	DestroyDynamic3DTextLabel(PointInfo[pointid][pText]);
	DestroyDynamicPickup(PointInfo[pointid][pPickup]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM points WHERE id = %i", pointid);
	mysql_tquery(connectionID, queryBuffer);

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has deleted point %s.", GetRPName(playerid), PointInfo[pointid][pName]);
	SM(playerid, COLOR_AQUA, "You have deleted point {F7A763}%s{CCFFFF}.", PointInfo[pointid][pName]);

	PointInfo[pointid][pExists] = 0;
	PointInfo[pointid][pCapturedGang] = -1;
	PointInfo[pointid][pTime] = 0;
	return 1;
}

GangClaimingTurfs(gang)
{
	new capCount = 0;
	for(new x = 0; x < MAX_TURFS; x++)
	{
		if(TurfInfo[x][tExists] && TurfInfo[x][tCapturer] != INVALID_PLAYER_ID && TurfInfo[x][tTime] == 0)
		{
			if(pData[TurfInfo[x][tCapturer]][pGang] == gang)
			{
    			capCount++;
			}
		}
	}
	return capCount;
}

CMD:capture(playerid, params[])
{
    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not rank 5+ in any gang at the moment.");
	}
	if(pData[playerid][pCapturingPoint] >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are already attempting to capture the point.");
	}
	if(pData[playerid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't capture a point while injured.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be onfoot in order to use this command.");
	}
	for(new i = 0; i < MAX_POINTS; i ++)
	{
	    if(PointInfo[i][pExists] && IsPlayerInRangeOfPoint(playerid, 1.0, PointInfo[i][pPointX], PointInfo[i][pPointY], PointInfo[i][pPointZ]) && GetPlayerInterior(playerid) == PointInfo[i][pPointInterior] && GetPlayerVirtualWorld(playerid) == PointInfo[i][pPointWorld])
		{
			if(PointInfo[i][pTime] > 0)
			{
			    return SCM(playerid, COLOR_SYNTAX, "This point is not available to capture yet.");
		    }
		    if(PointInfo[i][pCapturer] == playerid)
		    {
		        return SCM(playerid, COLOR_SYNTAX, "This point is already being captured by you.");
		    }
		    if(PointInfo[i][pCapturer] != INVALID_PLAYER_ID && pData[PointInfo[i][pCapturer]][pGang] == pData[playerid][pGang])
		    {
		        return SCM(playerid, COLOR_SYNTAX, "This point is already being captured by your gang.");
			}

		    foreach(new x : Player)
		    {
		        if(pData[x][pCapturingPoint] == i && pData[x][pCaptureTime] > 0)
		        {
		            return SCM(playerid, COLOR_SYNTAX, "Someone else is already attempting to capture. Please wait until they're done.");
				}
			}

		    pData[playerid][pCapturingPoint] = i;
		    pData[playerid][pCaptureTime] = 10;

			GetPlayerPos(playerid, pData[playerid][pPointX], pData[playerid][pPointY], pData[playerid][pPointZ]);
		    SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "(( %s is attempting to capture %s. ))", GetRPName(playerid), PointInfo[i][pName]);
		    return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "You are not in range of any points.");
	return 1;
}

CMD:claim(playerid, params[])
{
	new turfid, count;

    if((pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 5) && GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_FEDERAL && GetFactionType(playerid) != FACTION_SHERIFF)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not rank 5+ in a gang or apart of law enforcement.");
	}
	if((turfid = GetNearbyTurf(playerid)) == -1)
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not in range of any turfs which you can claim.");
	}
	if(GetFactionType(playerid) == FACTION_POLICE && pData[playerid][pGang] >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're not allowed to claim turfs as a law enforcer and a gang member.");
	}
	if(pData[playerid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't claim a turf while injured.");
	}
	if(TurfInfo[turfid][tTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This turf is not yet available to claim.");
	}
	if(TurfInfo[turfid][tCapturer] == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This turf is already being captured by you.");
	}
	if(GetFactionType(playerid) != FACTION_POLICE && TurfInfo[turfid][tCapturer] != INVALID_PLAYER_ID && pData[TurfInfo[turfid][tCapturer]][pGang] == pData[playerid][pGang])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This turf is already being claimed by your gang.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be onfoot in order to use this command.");
	}
	if(!IsLawEnforcement(playerid) && GangClaimingTurfs(pData[playerid][pGang]) >= MaxCapCount[0])
	{
	    return SM(playerid, COLOR_SYNTAX, "You're gang is already claiming %i turfs.", MaxCapCount[0]);
	}

	if(TurfInfo[turfid][tCapturer] != INVALID_PLAYER_ID && TurfInfo[turfid][tTime] == 0)
	{
		foreach(new i : Player)
		{
		    if(i != playerid && GetNearbyTurf(i) == turfid && !pData[i][pInjured] && !pData[i][pAdminDuty] && !pData[i][pAcceptedHelp] && !pData[i][pAFK] && GetPlayerState(i) != PLAYER_STATE_SPECTATING)
 			{
			    if(pData[TurfInfo[turfid][tCapturer]][pGang] >= 0 && pData[i][pGang] == pData[TurfInfo[turfid][tCapturer]][pGang] && pData[i][pGang] != GangInfo[pData[playerid][pGang]][gAlliance])
			    {
					return SCM(playerid, COLOR_SYNTAX, "You must eliminate all members of the attacking gang before you can claim this.");
			    }
			    else if(IsLawEnforcement(TurfInfo[turfid][tCapturer]) && IsLawEnforcement(i))
			    {
      				return SCM(playerid, COLOR_SYNTAX, "You must eliminate all LEO in this turf before you can claim this.");
			    }
			}
		}
	}

	if(pData[playerid][pGang] >= 0)
	{
	    if(GangInfo[pData[playerid][pGang]][gTurfTokens] <= 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your gang doesn't have any turf tokens left.");
		}

	    foreach(new i : Player)
	    {
	        if(GetNearbyTurf(i) == turfid && pData[i][pGang] == pData[playerid][pGang])
	        {
	            count++;
			}
		}

		if(count < 2)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You need at least 2 members of your gang in this turf to claim it.");
		}
		else
		{
			GangInfo[pData[playerid][pGang]][gTurfTokens]--;
			//SMA(COLOR_GREEN, "> Turf"WHITE": %s has attempted to claim %s for %s. It will be their turf in 10 minutes!", GetRPName(playerid), TurfInfo[turfid][tName], GangInfo[pData[playerid][pGang]][gName]);
			SMA(COLOR_YELLOW, "%s is attempting to claim %s turf for %s in 10 minutes!", GetRPName(playerid), TurfInfo[turfid][tName], GangInfo[pData[playerid][pGang]][gName]);
			SMA(COLOR_RED, "%s is now redzone!", TurfInfo[turfid][tName]);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET turftokens = turftokens - 1 WHERE id = %i", pData[playerid][pGang]);
			mysql_tquery(connectionID, queryBuffer);
		}
	}
	else if(GetFactionType(playerid) == FACTION_POLICE && pData[playerid][pGang] == -1)
	{
	    if(FactionInfo[pData[playerid][pFaction]][fTurfTokens] <= 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your faction doesn't have any turf tokens left.");
		}

	    FactionInfo[pData[playerid][pFaction]][fTurfTokens]--;
	    SMA(COLOR_YELLOW, "Law Enforement Officer %s is attempting to claim back %s to be civilian owned in 10 minutes!", GetRPName(playerid), TurfInfo[turfid][tName]);

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET turftokens = turftokens - 1 WHERE id = %i", pData[playerid][pFaction]);
		mysql_tquery(connectionID, queryBuffer);
	}

	TurfInfo[turfid][tCapturer] = playerid;
	TurfInfo[turfid][tCaptureTime] = 10;
	ReloadTurf(turfid);
	return 1;
}

CMD:reclaim(playerid, params[])
{
	new turfid;

    if(pData[playerid][pGang] == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not apart of any gang at the moment.");
	}
	if((turfid = GetNearbyTurf(playerid)) == -1)
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not in range of any turfs.");
	}
	if(GetFactionType(playerid) == FACTION_POLICE && pData[playerid][pGang] >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're not allowed to claim turfs as a law enforcer and a gang member.");
	}
	if(pData[playerid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't reclaim a turf while injured.");
	}
	if(TurfInfo[turfid][tCapturedGang] != pData[playerid][pGang])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This turf does not belong to your gang. Therefore you can't reclaim it.");
	}
	if(TurfInfo[turfid][tType] == 8)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This is a locked turf and therefore cannot be claimed.");
	}
	if(TurfInfo[turfid][tCapturer] == INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This turf is not being claimed by anyone. Therefore you can't reclaim it.");
	}

 	if(TurfInfo[turfid][tCapturer] != INVALID_PLAYER_ID && TurfInfo[turfid][tTime] == 0)
	{
		foreach(new i : Player)
		{
		    if(i != playerid && GetNearbyTurf(i) == turfid && !pData[i][pInjured] && !pData[i][pAdminDuty] && !pData[i][pAcceptedHelp] && !pData[i][pAFK] && GetPlayerState(i) != PLAYER_STATE_SPECTATING)
 			{
			    if(pData[TurfInfo[turfid][tCapturer]][pGang] >= 0 && pData[i][pGang] == pData[TurfInfo[turfid][tCapturer]][pGang] && pData[i][pGang] != GangInfo[pData[playerid][pGang]][gAlliance])
			    {
					return SCM(playerid, COLOR_SYNTAX, "You must eliminate all members of the attacking gang before you can claim this.");
			    }
			    else if(IsLawEnforcement(TurfInfo[turfid][tCapturer]) && IsLawEnforcement(i))
			    {
      				return SCM(playerid, COLOR_SYNTAX, "You must eliminate all LEO in this turf before you can claim this.");
			    }
			}
		}
	}

	SMA(COLOR_GREEN, "%s has reclaimed %s for %s and ended the turf war.", GetRPName(playerid), TurfInfo[turfid][tName], GangInfo[pData[playerid][pGang]][gName]);

	TurfInfo[turfid][tCapturer] = INVALID_PLAYER_ID;
	TurfInfo[turfid][tCaptureTime] = 0;
	ReloadTurf(turfid);

	return 1;
}

CMD:endalliance(playerid, params[])
{
	new gangid = pData[playerid][pGang];
	new allyid = GangInfo[gangid][gAlliance];
	new color, color2;

	if(isnull(params) || strcmp(params, "confirm", true) != 0)
	{
	   return SCM(playerid, COLOR_SYNTAX, "Usage: /endalliance [confirm]");
	}
	if(pData[playerid][pGang] == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need to be in a gang to use this command");
	}
	if(pData[playerid][pGangRank] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need to be rank 6 to use this command.");
	}
	if(GangInfo[gangid][gAlliance] == -1)
	{
		return SCM(playerid, COLOR_SYNTAX, "Your gang isn't currently in an alliance.");
	}

	SM(playerid, COLOR_YELLOW, "You just ended your alliance with %s.", GangInfo[gangid][gName]);

	if(GangInfo[gangid][gColor] == -1 || GangInfo[gangid][gColor] == -256)
	{
		color = 0xC8C8C8FF;
	}
	else
	{
	    color = GangInfo[gangid][gColor];
	}
	if(GangInfo[allyid][gColor] == -1 || GangInfo[allyid][gColor] == -256)
	{
	    color2 = 0xC8C8C8FF;
	}
	else
	{
	    color2 = GangInfo[allyid][gColor];
	}

	SMA(COLOR_GREEN, "Gang News: {%06x}%s"GREEN" has ended their alliance with {%06x}%s", color >>> 8, GangInfo[gangid][gName], color2 >>> 8, GangInfo[allyid][gName]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = -1 WHERE id = %i", gangid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = -1 WHERE id = %i", allyid);
	mysql_tquery(connectionID, queryBuffer);

	GangInfo[allyid][gAlliance] = -1;
	GangInfo[gangid][gAlliance] = -1;

	return 1;
}

CMD:guninv(playerid, params[])
{
	SCM(playerid, COLOR_GREEN, "My Weapons:");

	for(new i = 0; i < 13; i ++)
	{
     	if(pData[playerid][pWeapons][i] > 0)
	    {
	        SM(playerid, COLOR_GREY2, "(ID: %i) %s", pData[playerid][pWeapons][i], GetWeaponNameEx(pData[playerid][pWeapons][i]));
		}
	}

	return 1;
}

/*CMD:armsdealer(playerid, params[])
{
    if(pData[playerid][pHours] < 2 || pData[playerid][pWeaponRestricted] > 0)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are either weapon restricted or you played less than two playing hours.");
    }

	for(new i = 0; i < MAX_GANGS; i ++)
	{
	    if(GangInfo[i][gArmsDealer] && IsPlayerInRangeOfPoint(playerid, 3.0, GangInfo[i][gArmsX], GangInfo[i][gArmsY], GangInfo[i][gArmsZ]) && GetPlayerVirtualWorld(playerid) == GangInfo[i][gArmsWorld])
	    {
	        pData[playerid][pDealerGang] = i;
	        ShowDialogToPlayer(playerid, DIALOG_GANGARMSDEALER);
	        return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "You are not in range of any gang owned arms dealers.");
	return 1;
}

CMD:drugdealer(playerid, params[])
{
	for(new i = 0; i < MAX_GANGS; i ++)
	{
	    if(GangInfo[i][gDrugDealer] && IsPlayerInRangeOfPoint(playerid, 3.0, GangInfo[i][gDrugX], GangInfo[i][gDrugY], GangInfo[i][gDrugZ]) && GetPlayerVirtualWorld(playerid) == GangInfo[i][gDrugWorld])
	    {
	        pData[playerid][pDealerGang] = i;
	        ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEALER);
	        return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "You are not in range of any gang owned drug dealers.");
	return 1;
}*/

CMD:loadammo(playerid, params[])
{
	new weaponid, type[14];

	if(sscanf(params, "is[14]", weaponid, type))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /loadammo [weaponid] [type] (/guninv for weapon IDs)");
	    SCM(playerid, COLOR_GREY2, "List of types: Normal, HollowPoint, PoisonTip, FMJ");
	    return 1;
	}
    if(!(1 <= weaponid <= 46) || pData[playerid][pWeapons][weaponSlotIDs[weaponid]] != weaponid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have that weapon. /guninv for a list of your weapons.");
	}
	if(!(22 <= weaponid <= 34))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That weapon can't be loaded with ammunition.");
	}
	if(pData[playerid][pJoinedEvent] > 0 || pData[playerid][pDueling] != INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}

	if(!strcmp(type, "normal", true))
	{
	    pData[playerid][pAmmoType] = AMMOTYPE_NORMAL;
	    pData[playerid][pAmmoWeapon] = 0;

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s loads their %s with normal ammunition.", GetRPName(playerid), GetWeaponNameEx(weaponid));
	    SCM(playerid, COLOR_AQUA, "You have loaded this weapon with "SVRCLR"Normal{CCFFFF} ammunition.");
	    ApplyAnimation(playerid, "PYTHON", "python_reload", 4.1, 0, 0, 0, 0, 0);
	}
	else if(!strcmp(type, "hollowpoint", true))
	{
	    if(!pData[playerid][pHPAmmo])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have no hollow point ammunition to load this weapon with.");
	    }

	    pData[playerid][pAmmoType] = AMMOTYPE_HP;
	    pData[playerid][pAmmoWeapon] = weaponid;

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s loads their %s with hollow point ammunition.", GetRPName(playerid), GetWeaponNameEx(weaponid));
	    SCM(playerid, COLOR_AQUA, "You have loaded this weapon with "SVRCLR"Hollow point{CCFFFF} ammunition.");
		ApplyAnimation(playerid, "PYTHON", "python_reload", 4.1, 0, 0, 0, 0, 0);
	}
	else if(!strcmp(type, "poisontip", true))
	{
	    if(!pData[playerid][pPoisonAmmo])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have no poison tip ammunition to load this weapon with.");
	    }

	    pData[playerid][pAmmoType] = AMMOTYPE_POISON;
	    pData[playerid][pAmmoWeapon] = weaponid;

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s loads their %s with poison tip ammunition.", GetRPName(playerid), GetWeaponNameEx(weaponid));
	    SCM(playerid, COLOR_AQUA, "You have loaded this weapon with "SVRCLR"Poison tip{CCFFFF} ammunition.");
		ApplyAnimation(playerid, "PYTHON", "python_reload", 4.1, 0, 0, 0, 0, 0);
	}
	else if(!strcmp(type, "fmj", true))
	{
	    if(!pData[playerid][pFMJAmmo])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have no full metal jacket ammunition to load this weapon with.");
	    }

	    pData[playerid][pAmmoType] = AMMOTYPE_FMJ;
	    pData[playerid][pAmmoWeapon] = weaponid;

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s loads their %s with full metal jacket ammunition.", GetRPName(playerid), GetWeaponNameEx(weaponid));
	    SCM(playerid, COLOR_AQUA, "You have loaded this weapon with "SVRCLR"Full metal jacket{CCFFFF} ammunition.");
		ApplyAnimation(playerid, "PYTHON", "python_reload", 4.1, 0, 0, 0, 0, 0);
	}

	SetPlayerWeapons(playerid);
	return 1;
}

CMD:createturf(playerid, params[])
{
	new type, name[32];

	if(!pData[playerid][pGangMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[32]", type, name))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /createturf [special type] [name]");
	    SCM(playerid, COLOR_GREY2, "List of types: (0)None (1)Hollowpoint Ammo (2)Poison Ammo (3)FMJ ammo (4)Materials (5)Traphouse");
	    SCM(playerid, COLOR_GREY2, "List of types: (6)Crackhouse (7)Sales taxing (8)Disabled (9)Medium weps (10)High weps");
	    return 1;
	}
	if(!(0 <= type <= 10))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
	}
	if(GetNearbyTurf(playerid) >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is a turf in range. Find somewhere else to create this one.");
	}
	if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot create turfs indoors.");
	}

	pData[playerid][pTurfType] = type;
	pData[playerid][pZoneType] = ZONETYPE_TURF;

	strcpy(pData[playerid][pTurfName], name, 32);
	ShowPlayerDialog(playerid, DIALOG_CREATEZONE, DIALOG_STYLE_MSGBOX, "Turf creation system", "You have entered turf creation mode. In order to create a turf you need\nto mark four points around the area you want your turf to be in, forming\na square. You must make a square or your outcome won't be as expected.\n\nPress "SVRCLR"Confirm{A9C4E4} to begin turf creation.", "Confirm", "Cancel");
	return 1;
}

CMD:turfcancel(playerid, params[])
{
	if(!pData[playerid][pGangMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(pData[playerid][pZoneCreation] != ZONETYPE_TURF)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not creating a turf at the moment.");
	}

	CancelZoneCreation(playerid);
	SCM(playerid, COLOR_LIGHTRED, "** Turf creation cancelled.");
	return 1;
}

CMD:gototurf(playerid, params[])
{
	new turfid;

	if(!pData[playerid][pGangMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", turfid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gototurf [turfid]");
	}
	if(!(0 <= turfid < MAX_TURFS) || !TurfInfo[turfid][tExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid turf.");
	}

	GameTextForPlayer(playerid, "~w~Teleported", 5000, 1);

	SetPlayerPos(playerid, TurfInfo[turfid][tMinX], TurfInfo[turfid][tMinY], TurfInfo[turfid][tHeight]);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:removeturf(playerid, params[])
{
	new turfid;

	if(!pData[playerid][pGangMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", turfid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /removeturf [turfid]");
	}
	if(!(0 <= turfid < MAX_TURFS) || !TurfInfo[turfid][tExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid turf.");
	}

	GangZoneDestroy(TurfInfo[turfid][tGangZone]);
	DestroyDynamicArea(TurfInfo[turfid][tArea]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM turfs WHERE id = %i", turfid);
	mysql_tquery(connectionID, queryBuffer);

	TurfInfo[turfid][tExists] = 0;
	TurfInfo[turfid][tCapturedGang] = 0;
    TurfInfo[turfid][tType] = 0;

    SM(playerid, COLOR_AQUA, "** You have removed turf %i.", turfid);
	return 1;
}

CMD:editturf(playerid, params[])
{
	new turfid, option[14], param[32];

	if(!pData[playerid][pGangMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[14]S()[32]", turfid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /editturf [turfid] [option]");
		SCM(playerid, COLOR_WHITE, "Available options: Name, ClaimBy, Gang, Type, Time");
	    return 1;
	}
	if(!(0 <= turfid < MAX_TURFS) || !TurfInfo[turfid][tExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid turf.");
	}

 	if(!strcmp(option, "name", true))
    {
        if(isnull(param))
        {
            return SCM(playerid, COLOR_SYNTAX, "Usage: /editturf [turfid] [name] [text]");
		}

		strcpy(TurfInfo[turfid][tName], param, 32);
		ReloadTurf(turfid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET name = '%e' WHERE id = %i", TurfInfo[turfid][tName], turfid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the name of turf %i to %s.", GetRPName(playerid), turfid, param);
		SM(playerid, COLOR_AQUA, "You have set the name of turf %i to {F7A763}%s{CCFFFF}.", turfid, param);
	}
	else if(!strcmp(option, "claimby", true))
    {
        if(isnull(param) || strlen(params) > 32)
        {
            return SCM(playerid, COLOR_SYNTAX, "Usage: /editturf [turfid] [capturedby] [name]");
		}

		strcpy(TurfInfo[turfid][tCapturedBy], param, MAX_PLAYER_NAME);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET capturedby = '%e' WHERE id = %i", TurfInfo[turfid][tCapturedBy], turfid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the capturer of turf %i to %s.", GetRPName(playerid), turfid, param);
		SM(playerid, COLOR_AQUA, "You have set the capturer of turf %i to {F7A763}%s{CCFFFF}.", turfid, param);
	}
 	else if(!strcmp(option, "gang", true))
    {
        new gangid;

        if(sscanf(param, "i", gangid))
        {
            return SCM(playerid, COLOR_SYNTAX, "Usage: /editturf [turfid] [gang] [gangid (-1 = none)]");
		}
		if(!(0 <= gangid < MAX_GANGS) || (gangid >= 0 && !GangInfo[gangid][gSetup]))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid gang.");
		}

		TurfInfo[turfid][tCapturedGang] = gangid;
		ReloadTurf(turfid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET capturedgang = %i WHERE id = %i", TurfInfo[turfid][tCapturedGang], turfid);
		mysql_tquery(connectionID, queryBuffer);

		if(gangid == -1)
		{
            SAM(COLOR_LIGHTRED, "AdmCmd: %s has reset the capturing gang of turf %i.", GetRPName(playerid), turfid);
			SM(playerid, COLOR_AQUA, "You have reset the capturing gang of turf %i.", turfid);
		}
		else
		{
			SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the capturing gang of turf %i to %s.", GetRPName(playerid), turfid, GangInfo[gangid][gName]);
			SM(playerid, COLOR_AQUA, "You have set the capturing gang of turf %i to "SVRCLR"%s{CCFFFF}.", turfid, GangInfo[gangid][gName]);
		}
	}
	else if(!strcmp(option, "type", true))
    {
        new type;

        if(sscanf(param, "i", type))
        {
            SCM(playerid, COLOR_SYNTAX, "Usage: /editturf [turfid] [type] [value]");
	    	SCM(playerid, COLOR_GREY2, "List of types: (0)None (1)Hollowpoint Ammo (2)Poison Ammo (3)FMJ ammo (4)Materials (5)Traphouse");
	    	SCM(playerid, COLOR_GREY2, "List of types: (6)Crackhouse (7)Sales taxing (8)Low weps (9)Medium weps (10)High weps");
            return 1;
		}
		if(!(0 <= type <= 10))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
		}

		TurfInfo[turfid][tType] = type;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET type = %i WHERE id = %i", TurfInfo[turfid][tType], turfid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the type of turf %i to %i.", GetRPName(playerid), turfid, type);
		SM(playerid, COLOR_AQUA, "You have set the type of turf %i to %i.", turfid, type);
	}
	else if(!strcmp(option, "time", true))
    {
        new value;

        if(sscanf(param, "i", value))
        {
            return SCM(playerid, COLOR_SYNTAX, "Usage: /editturf [turfid] [time] [hours (0-24)]");
		}
		if(!(0 <= value <= 24))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The amount of hours must range from 0 to 24.");
		}

		TurfInfo[turfid][tTime] = value;

		if(TurfInfo[turfid][tTime] == 0 && TurfInfo[turfid][tType] != 8)
		{
		    SMA(COLOR_TEAL	, "[Turf update]: "WHITE"%s(Perk: "TEAL"%s"WHITE") is now available to capture.", TurfInfo[turfid][tName]);
		}
		else
		{
		    TurfInfo[turfid][tCapturer] = INVALID_PLAYER_ID;
		    TurfInfo[turfid][tCaptureTime] = 0;
		}

		ReloadTurf(turfid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET time = %i WHERE id = %i", TurfInfo[turfid][tTime], turfid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_LIGHTRED, "AdmCmd: %s has set the time of turf %i to %i hours.", GetRPName(playerid), turfid, value);
		SM(playerid, COLOR_AQUA, "You have set the time of turf %i to %i hours.", turfid, value);
	}

	return 1;
}

CMD:carhelp(playerid)
{
	return callcmd::vehiclehelp(playerid);
}

CMD:armbomb(playerid, params[])
{
	return callcmd::plantbomb(playerid, params);
}

CMD:defend(playerid, params[])
{
	new targetid, amount, time = (5 - GetJobLevel(playerid, JOB_LAWYER)) * 30;

    if(!PlayerHasJob(playerid, JOB_LAWYER))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command unless you're a Lawyer.");
	}
	if(gettime() - pData[playerid][pLastDefend] < time)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can only defend a player every %i seconds. Please wait %i more seconds.", time, time - (gettime() - pData[playerid][pLastDefend]));
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /defend [playerid] [amount]");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't defend yourself.");
	}
	if(!pData[targetid][pWantedLevel])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is not wanted.");
	}
	if(amount < 50 || amount > 250)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The amount specified must range between $50 and $250.");
	}

	pData[targetid][pDefendOffer] = playerid;
	pData[targetid][pDefendPrice] = amount;
	pData[playerid][pLastDefend] = gettime();

	SM(targetid, COLOR_AQUA, "** Lawyer %s has offered to defend your wanted level for $%i. (/accept lawyer)", GetRPName(playerid), amount);
	SM(playerid, COLOR_AQUA, "** You have offered to defend %s's wanted level for $%i.", GetRPName(targetid), amount);
	return 1;
}

CMD:free(playerid, params[])
{
	new targetid, time = GetJobLevel(playerid, JOB_LAWYER);

    if(!PlayerHasJob(playerid, JOB_LAWYER))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command unless you're a Lawyer.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /free [playerid]");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
	}
	if(pData[targetid][pJailType] != 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is not in IC jail.");
	}
	if(pData[targetid][pJailTime] < time * 60)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't free this player, their jail time expires soon.");
	}

	pData[targetid][pJailTime] -= time * 60;

	SM(targetid, COLOR_AQUA, "** Lawyer %s has reduced your jail sentence by %i minutes.", GetRPName(playerid), time);
	SM(playerid, COLOR_AQUA, "** You have reduced %s's jail sentence by %i minutes.", GetRPName(targetid), time);
	return 1;
}

CMD:eject(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /eject [playerid]");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not driving any vehicle.");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInVehicle(targetid, GetPlayerVehicleID(playerid)))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected, or is not in your vehicle.");
	}

	RemovePlayerFromVehicle(targetid);
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s ejects %s from the vehicle.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:dicebet(playerid, params[])
{
	new targetid, amount;

	if(!IsPlayerInRangeOfPoint(playerid, 70.0, 1068.0618,-75.6287,1003.8516) && !IsPlayerInRangeOfPoint(playerid, 50.0, 2017.6475,-2036.6041,868.2566))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the casino.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /dicebet [playerid] [amount]");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
	}
	if(amount < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The amount can't be below $1.");
	}
	if(pData[playerid][pCash] < amount)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have that much money to bet.");
	}
	if(gettime() - pData[playerid][pLastBet] < 7)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can only use this command every 7 seconds. Please wait %i more seconds.", 7 - (gettime() - pData[playerid][pLastBet]));
	}

	pData[targetid][pDiceOffer] = playerid;
	pData[targetid][pDiceBet] = amount;
	pData[playerid][pLastBet] = gettime();

	SM(targetid, COLOR_AQUA, "** %s has initiated a bet with you for $%i (/accept dicebet).", GetRPName(playerid), amount);
	SM(playerid, COLOR_AQUA, "** You have initiated a bet against %s for $%i.", GetRPName(targetid), amount);
	return 1;
}

CMD:calculate(playerid, params[])
{
	new option, Float:value1, Float:value2;

	if(sscanf(params, "fcf", value1, option, value2))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /calculate [value 1] [option] [value 2]");
	    SCM(playerid, COLOR_WHITE, "Available options: (+) Add (-) Subtract (*) Multiply (/) Divide");
	    return 1;
	}
	if(option == '/' && value2 == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't divide by zero.");
	}

	if(option == '+') {
	    SM(playerid, COLOR_YELLOW, "** Result: %.2f + %.2f = %.2f", value1, value2, value1 + value2);
	} else if(option == '-') {
	    SM(playerid, COLOR_YELLOW, "** Result: %.2f - %.2f = %.2f", value1, value2, value1 - value2);
	} else if(option == '*' || option == 'x') {
		SM(playerid, COLOR_YELLOW, "** Result: %.2f * %.2f = %.2f", value1, value2, value1 * value2);
	} else if(option == '/') {
		SM(playerid, COLOR_YELLOW, "** Result: %.2f / %.2f = %.2f", value1, value2, value1 / value2);
	}

	return 1;
}

CMD:serverstats(playerid, params[])
{
	// Discord Properties
	new count;
	new DCC_Guild:guild = DCC_FindGuildById("905667779103977522");

	new houses, businesses, garages, lands, vehicles, entrances, turfs, points, gangs, factions;

	for(new i = 0; i < MAX_HOUSES; i ++) 	 if(HouseInfo[i][hExists]) 		houses++;
	for(new i = 0; i < MAX_BUSINESSES; i ++) if(BusinessInfo[i][bExists]) 	businesses++;
	for(new i = 0; i < MAX_GARAGES; i ++) 	 if(GarageInfo[i][gExists]) 	garages++;
	for(new i = 0; i < MAX_VEHICLES; i ++) 	 if(IsValidVehicle(i)) 			vehicles++;
	for(new i = 0; i < MAX_LANDS; i ++) 	 if(LandInfo[i][lExists]) 		lands++;
	for(new i = 0; i < MAX_ENTRANCES; i ++)  if(EntranceInfo[i][eExists]) 	entrances++;
	for(new i = 0; i < MAX_TURFS; i ++) 	 if(TurfInfo[i][tExists]) 		turfs++;
	for(new i = 0; i < MAX_POINTS; i ++) 	 if(PointInfo[i][pExists]) 		points++;
	for(new i = 0; i < MAX_GANGS; i ++) 	 if(GangInfo[i][gSetup]) 		gangs++;
	for(new i = 0; i < MAX_FACTIONS; i ++) 	 if(FactionInfo[i][fType]) 		factions++;

	SCM(playerid, SERVER_COLOR, ""SERVER_NAME" Stats:");
	SM(playerid, COLOR_GREY2, "Connections: %i - Registered: %i - Kill Counter: %i - Death Counter: %i - Hours Played: %i", gConnections, gTotalRegistered, gTotalKills, gTotalDeaths, gTotalHours);
	SM(playerid, COLOR_WHITE, "Houses: %i/%i - Businesses: %i/%i - Garages: %i/%i - Lands: %i/%i - Vehicles: %i/%i", houses, MAX_HOUSES, businesses, MAX_BUSINESSES, garages, MAX_GARAGES, lands, MAX_LANDS, vehicles, MAX_VEHICLES);
	SM(playerid, COLOR_GREY2, "Entrances: %i/%i - Turfs: %i/%i - Points: %i/%i - Gangs: %i/%i - Factions: %i/%i", entrances, MAX_ENTRANCES, turfs, MAX_TURFS, points, MAX_POINTS, gangs, MAX_GANGS, factions, MAX_FACTIONS);
	SM(playerid, COLOR_WHITE, "Players Online: %i/%i - Player Record: %i - Record Date: %s - Anticheat Bans: %i", Iter_Count(Player), MAX_PLAYERS, gPlayerRecord, gRecordDate, gAnticheatBans);

	// Discord Member Count
	DCC_GetGuildMemberCount(guild, count);
	SM(playerid, COLOR_WHITE, "Discord Member Count: %i", count);
	return 1;
}

CMD:ww(playerid, params[])
{
	return callcmd::pw(playerid, params);
}

CMD:pw(playerid, params[])
{
	if(!pData[playerid][pWatch])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a pocket watch. You can buy one at 24/7.");
	}

	if(!pData[playerid][pWatchOn])
	{
	    if(pData[playerid][pToggleTextdraws])
		{
	    	return SCM(playerid, COLOR_SYNTAX, "You can't turn on your watch as you have textdraws toggled! (/toggle textdraws)");
		}

	    pData[playerid][pWatchOn] = 1;
	    ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_watch", 4.1, 0, 0, 0, 0, 0);
	    TextDrawShowForPlayer(playerid, TimeTD);
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s turns on their watch.", GetRPName(playerid));
	}
	else
	{
	    pData[playerid][pWatchOn] = 0;
	    ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_watch", 4.1, 0, 0, 0, 0, 0);
	    TextDrawHideForPlayer(playerid, TimeTD);
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s turns off their watch.", GetRPName(playerid));
	}

	return 1;
}

CMD:gps(playerid, params[])
{
	if(!pData[playerid][pGPS])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a GPS. You can buy one at 24/7.");
	}

	if(!pData[playerid][pGPSOn])
	{
	    if(pData[playerid][pToggleTextdraws])
		{
	    	return SCM(playerid, COLOR_SYNTAX, "You can't turn on your GPS as you have textdraws toggled! (/toggle textdraws)");
		}

	    pData[playerid][pGPSOn] = 1;

	    PlayerTextDrawSetString(playerid, pData[playerid][pText][0], "Loading...");
	    ShowGPSTextdraw(playerid);

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s turns on their GPS.", GetRPName(playerid));
	}
	else
	{
	    pData[playerid][pGPSOn] = 0;
	    HideGPSTextdraw(playerid);
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s turns off their GPS.", GetRPName(playerid));
	}

	return 1;
}

CMD:fixvw(playerid, params[])
{
	if(pData[playerid][pJoinedEvent])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are currently in a in the event. Use /quitevent instead.");
	}
	if(GetPlayerVirtualWorld(playerid) > 0 && GetPlayerInterior(playerid) == 0)
	{
	    SetPlayerVirtualWorld(playerid, 0);
	    SCM(playerid, COLOR_SYNTAX, "Your virtual world has been fixed.");
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "Your virtual world is not bugged at the moment. /report or relog if the problem persists.");
	}

	return 1;
}

CMD:stuck(playerid, params[])
{
	if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pAcceptedHelp] || pData[playerid][pMiningTime] > 0 || pData[playerid][pConstructionTime] > 0 || pData[playerid][pFishTime] > 0 || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY || IsPlayerInAnyVehicle(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}
    if(gettime() - pData[playerid][pLastStuck] < 5)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can only use this command every 5 seconds. Please wait %i more seconds.", 5 - (gettime() - pData[playerid][pLastStuck]));
	}

	new
	    Float:x,
    	Float:y,
    	Float:z;

	GetPlayerPos(playerid, x, y, z);
	SetPlayerPos(playerid, x, y, z + 0.5);

	ClearAnimations(playerid);
	TogglePlayerControllable(playerid, 1);

	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 0, 1);
	SCM(playerid, SERVER_COLOR, "**"WHITE" You are no longer stuck.");

	pData[playerid][pLastStuck] = gettime();
	return 1;
}

CMD:badge(playerid, params[])
{
    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_DOC && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOVERNMENT && GetFactionType(playerid) != FACTION_MECHANIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic or law enforcer.");
	}
    if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pJailTime] > 0 || pData[playerid][pJoinedEvent] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}
	if(!pData[playerid][pDuty])
	{
		new string[128], color, faction = pData[playerid][pFaction];
		if(FactionInfo[faction][fColor] == -1 || FactionInfo[faction][fColor] == -256)
		{
			color = 0xC8C8C8FF;
		}
		else
		{
			color = FactionInfo[faction][fColor];
		}
		SendFactionMessage(pData[playerid][pFaction], FACTION_DUTY, "HQ: %s %s is now back on duty...", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid));
		format(string, sizeof(string), "{%06x}%s\n"WHITE"%s", color >>> 8, FactionInfo[faction][fName],FactionRanks[faction][pData[playerid][pFactionRank]]);
		UpdateDynamic3DTextLabelText(PlayerLabel[playerid], COLOR_WHITE, string);

	    pData[playerid][pDuty] = 1;
	    SCM(playerid, COLOR_WHITE, "You have enabled your badge. You now appear on-duty for all players.");
	}
	else
	{
		SendFactionMessage(pData[playerid][pFaction], FACTION_DUTY, "HQ: %s %s is now off duty...", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid));
		UpdateDynamic3DTextLabelText(PlayerLabel[playerid], COLOR_WHITE, "");
	    pData[playerid][pDuty] = 0;
	    SCM(playerid, COLOR_WHITE, "You have disabled your badge. You no longer appear on-duty for any players.");
	}
	return 1;
}

CMD:duel(playerid, params[])
{
	new target1, target2, Float:health, Float:armor, weapon1, weapon2;

    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "uuffii", target1, target2, health, armor, weapon1, weapon2))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /duel [player1] [player2] [health] [armor] [weapon1] [weapon2]");
	}
	if(target1 == INVALID_PLAYER_ID || target2 == INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid player specified.");
	}
	if(health < 1.0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Health can't be under 1.0.");
	}
	if(!(0 <= weapon1 <= 46) || !(0 <= weapon2 <= 46))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid weapon. Valid weapon IDs range from 0 to 46.");
	}

	new rand = random(99999);

	SavePlayerVariables(target1);
	SavePlayerVariables(target2);

	ResetPlayerWeapons(target1);
	ResetPlayerWeapons(target2);

	SetPlayerPos(target1, 1413.1495, -15.9198, 1000.9246);
	SetPlayerPos(target2, 1367.6084, -17.7317, 1000.9219);
	SetPlayerInterior(target1, 1);
	SetPlayerInterior(target2, 1);
	SetPlayerVirtualWorld(target1, rand);
	SetPlayerVirtualWorld(target2, rand);

	SetPlayerHealth(target1, health);
	SetPlayerArmour(target1, armor);
	SetPlayerHealth(target2, health);
	SetPlayerArmour(target2, armor);

	GiveWeapon(target1, weapon1, true);
	GiveWeapon(target1, weapon2, true);
	GiveWeapon(target2, weapon1, true);
	GiveWeapon(target2, weapon2, true);

	GameTextForPlayer(target1, "~r~Duel time!", 3000, 3);
	GameTextForPlayer(target2, "~r~Duel time!", 3000, 3);

	pData[target1][pDueling] = target2;
	pData[target2][pDueling] = target1;

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has forced %s and %s into a duel.", GetRPName(playerid), GetRPName(target1), GetRPName(target2));
	return 1;
}

CMD:mole(playerid, params[])
{
 	if(pData[playerid][pAdmin] < 3)
 	{
  		return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
 	}
 	if(isnull(params))
 	{
     	SCM(playerid, COLOR_SYNTAX, "Usage: /mole [text]");
     	SCM(playerid, COLOR_YELLOW, "This command sends a SMS to the entire server. Abusing this command will result in heavy punishment.");
     	return 1;
 	}
	SMA(COLOR_YELLOW, "** SMS from Unknown(0): %s **", params);
 	return 1;
}

CMD:hmole(playerid, params[])
{
 	if(GetFactionType(playerid) != FACTION_HITMAN)
 	{
  		return SCM(playerid, COLOR_SYNTAX, "You are not a hitman!");
 	}
 	if(isnull(params))
 	{
     	SCM(playerid, COLOR_SYNTAX, "Usage: /hmole [text]");
     	SCM(playerid, COLOR_YELLOW, "This command automatically places ((/contract)) text.");
     	return 1;
 	}
	SMA(COLOR_YELLOW, "** SMS from Unknown(#null): %s((/contract)) **", params);
 	return 1;
}

CMD:info(playerid) callcmd::information(playerid);
CMD:information(playerid)
{
	SCM(playerid, COLOR_WHITE, ""SERVER_NAME": "SERVER_URL"");
}

CMD:takecall(playerid, params[])
{
	new targetid, Float:x, Float:y, Float:z;

	if(!PlayerHasJob(playerid, JOB_TAXIDRIVER))
	{
     	return SCM(playerid, COLOR_SYNTAX, "You can't use this command unless you're a Mechanic or Taxi Driver.");
	}
    if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /takecall [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	if((FactionInfo[pData[playerid][pFaction]][fType] == FACTION_MECHANIC) && pData[targetid][pMechanicCall] > 0)
	{
		if(GetPlayerInterior(targetid))
		{
	    	return SCM(playerid, COLOR_SYNTAX, "That player is currently unreachable.");
		}

		pData[targetid][pMechanicCall] = 0;
		pData[playerid][pCP] = CHECKPOINT_MISC;

		GetPlayerPos(targetid, x, y, z);
		SetPlayerCheckpoint(playerid, x, y, z, 5.0);

		SM(playerid, COLOR_AQUA, "** You have accepted %s's mechanic call. Their location was marked on your map.", GetRPName(targetid));
		SM(targetid, COLOR_AQUA, "** %s has accepted your mechanic call. Please wait patiently until they arrive.", GetRPName(playerid));
	}
	else if(PlayerHasJob(playerid, JOB_TAXIDRIVER) && pData[targetid][pTaxiCall] > 0)
	{
        if(GetPlayerInterior(targetid))
		{
	    	return SCM(playerid, COLOR_SYNTAX, "That player is currently unreachable.");
		}

		pData[targetid][pTaxiCall] = 0;
		pData[playerid][pCP] = CHECKPOINT_MISC;

		GetPlayerPos(targetid, x, y, z);
		SetPlayerCheckpoint(playerid, x, y, z, 5.0);

		SM(playerid, COLOR_AQUA, "** You have accepted %s's taxi call. Their location was marked on your map.", GetRPName(targetid));
		SM(targetid, COLOR_AQUA, "** %s has accepted your taxi call. Please wait patiently until they arrive.", GetRPName(playerid));
	}
	else
	{
		SCM(playerid, COLOR_SYNTAX, "That player has no calls which can be taken.");
	}

	return 1;
}

CMD:listcallers(playerid, params[])
{
    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic or law enforcer.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}

	SCM(playerid, SERVER_COLOR, "Emergency Calls:");

	foreach(new i : Player)
	{
	    if((pData[i][pEmergencyCall] > 0) && ((pData[i][pEmergencyType] == FACTION_MEDIC && GetFactionType(playerid) == FACTION_MEDIC) || (pData[i][pEmergencyType] == FACTION_POLICE && IsLawEnforcement(playerid))))
	    {
	        SM(playerid, COLOR_GREY2, "** %s[%i] - Expiry: %i seconds - Emergency: %s", GetRPName(i), i, pData[i][pEmergencyCall], pData[i][pEmergency]);
		}
	}

	return 1;
}

CMD:trackcall(playerid, params[])
{
	new targetid, Float:x, Float:y, Float:z;

	if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_DOC && GetFactionType(playerid) != FACTION_MECHANIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic or law enforcer.");
	}
    if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /trackcall [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!pData[targetid][pEmergencyCall])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't called 911 recently or their call expired.");
	}
	if(!GetPlayerPosEx(targetid, x, y, z))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is currently unreachable.");
	}

	//pData[targetid][pEmergencyCall] = 0;
	pData[playerid][pCP] = CHECKPOINT_MISC;

	SetPlayerCheckpoint(playerid, x, y, z, 5.0);
	SM(playerid, COLOR_AQUA, "** You have accepted %s's emergency call. Their location was marked on your map.", GetRPName(targetid));

	if(pData[targetid][pEmergencyCall] == FACTION_MEDIC)
	{
		SM(targetid, COLOR_AQUA, "** %s has accepted your emergency call. Please wait patiently until they arrive.", GetRPName(playerid));
	}

	return 1;
}


CMD:startchat(playerid, params[])
{
	new targetid;

	if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /startchat [playerid]");
	}
	if(IsPlayerChatActive(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are already in an active chat. /invitechat to invite them.");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
    if(IsPlayerChatActive(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is in an active chat with another admin.");
	}

	chattingWith[playerid]{targetid} = true;
	chattingWith[targetid]{playerid} = true;

	SM(targetid, COLOR_YELLOW, "Administrator %s has started a chat with you. /(ac)hat to speak with this admin.", GetRPName(playerid));
	SM(playerid, COLOR_YELLOW, "You have started a chat with %s (ID %i). /(ac)hat to speak to the player.", GetRPName(targetid), targetid);
	return 1;
}

CMD:invitechat(playerid, params[])
{
    new targetid;

	if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /invitechat [playerid]");
	}
	if(!IsPlayerChatActive(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have not started a chat yet. /startchat to start one.");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
    if(IsPlayerChatActive(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is in an active chat with another admin.");
	}

	chattingWith[playerid]{targetid} = true;
	chattingWith[targetid]{playerid} = true;

	SM(targetid, COLOR_YELLOW, "Administrator %s has invited you to a chat. /(ac)hat to speak with them.", GetRPName(playerid));
	SM(playerid, COLOR_YELLOW, "You have invited %s (ID %i) to your chat.", GetRPName(targetid), targetid);
	return 1;
}

CMD:kickchat(playerid, params[])
{
    new targetid;

	if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /kickchat [playerid]");
	}
	if(!IsPlayerChatActive(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have not started a chat yet. /startchat to start one.");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
    if(!chattingWith[playerid]{targetid})
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is currently not in a chat with you.");
	}

	chattingWith[playerid]{targetid} = false;
	chattingWith[targetid]{playerid} = false;

	SM(targetid, COLOR_YELLOW, "Administrator %s has removed you from the chat.", GetRPName(playerid));
	SM(playerid, COLOR_YELLOW, "You have removed %s (ID %i) from your chat.", GetRPName(targetid), targetid);
	return 1;
}

CMD:endchat(playerid, params[])
{
	if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!IsPlayerChatActive(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have not started a chat yet. /startchat to start one.");
	}

	foreach(new i : Player)
	{
	    if(i == playerid || chattingWith[playerid]{i})
	    {
	        chattingWith[playerid]{i} = false;
	        SM(i, COLOR_YELLOW, "Administrator %s has ended the chat.", GetRPName(playerid));
		}
	}

	return 1;
}

CMD:ac(playerid, params[])
{
	return callcmd::achat(playerid, params);
}

CMD:achat(playerid, params[])
{
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_WHITE, "USAGE /(ac)hat [text]");
	}
	if(!IsPlayerChatActive(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You haven't been invited to any chats by an admin.");
	}

	foreach(new i : Player)
	{
	    if(i == playerid || chattingWith[i]{playerid})
	    {
	        if(pData[playerid][pAdmin] > 1)
				SM(i, COLOR_YELLOW, "** %s %s (ID %i): %s **", GetAdminRank(playerid), GetRPName(playerid), playerid, params);
			else
			    SM(i, COLOR_YELLOW, "** Player %s (ID %i): %s **", GetRPName(playerid), playerid, params);
	    }
	}

	return 1;
}

CMD:gascan(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid), amount;

	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be driving a vehicle to use this command.");
	}
	if(!VehicleHasEngine(vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "This vehicle has no engine which runs off gas.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gascan [amount]");
	}
	if(amount < 1 || amount > pData[playerid][pGasCan])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
	}
	if(vehicleFuel[vehicleid] + amount > 100)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't add that much gasoline to the vehicle.");
	}

	pData[playerid][pGasCan] -= amount;
	vehicleFuel[vehicleid] += amount;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gascan = %i WHERE uid = %i", pData[playerid][pGasCan], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s refills the %s's gas tank with %i liters of gasoline.", GetRPName(playerid), GetVehicleName(vehicleid), amount);
	return 1;
}

CMD:robbank(playerid, params[])
{
	new count;
    if(!IsPlayerInRangeOfPoint(playerid, 20.0, 1667.4260, -972.6691, 683.6873))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the bank.");
	}
	if(RobberyInfo[rTime] > 0)
	{
	    return SM(playerid, COLOR_SYNTAX, "The bank can be robbed again in %i hours. You can't rob it now.", RobberyInfo[rTime]);
	}
	if(RobberyInfo[rPlanning])
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is a bank robbery being planned already. Ask the leader to join.");
	}
	if(RobberyInfo[rStarted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't rob the bank as a robbery has already started.");
	}
	if(pData[playerid][pDuty] == 1)
	{
	    return SCM(playerid, COLOR_GREY2, "You can't rob the bank while on-duty.");
	}

	foreach(new i : Player)
	{
	    if(IsLawEnforcement(i) && pData[i][pDuty] == 1)
	    {
	        count++;
		}
	}

	/*if(count < 4)
	{
	    return SCM(playerid, COLOR_GREY2, "There needs to be at least 4+ LEO on-duty in order to rob the bank.");
	}*/

    RobberyInfo[rRobbers][0] = playerid;
    RobberyInfo[rPlanning] = 1;

    pData[playerid][pCP] = CHECKPOINT_MISC;
    SetPlayerCheckpoint(playerid, 1677.2610, -987.6659, 671.1152, 2.0);

    SCM(playerid, COLOR_AQUA, "You have setup a "SVRCLR"bank robbery{CCFFFF}. You need to /invite at least 2 more people in order to begin the heist.");
	SCM(playerid, COLOR_AQUA, "After you've found two additional heisters, you can use /setupvault at the checkpoint to blow the vault.");
	return 1;
}

CMD:invite(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /invite [playerid]");
	}
	if(!(RobberyInfo[rPlanning] && RobberyInfo[rRobbers][0] == playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are currently not planning a bank robbery.");
	}
 	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
	}
	if(IsPlayerInBankRobbery(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is already in the robbery with you.");
	}
	if(GetBankRobbers() >= MAX_BANK_ROBBERS)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can't have more than %i bank robbers in this robbery.", MAX_BANK_ROBBERS);
 	}
	if(pData[targetid][pDuty] == 1)
	{
	    return SCM(playerid, COLOR_GREY2, "That player can't rob the bank while on-duty.");
	}

	pData[targetid][pRobberyOffer] = playerid;

	SM(targetid, COLOR_AQUA, "** %s has invited you to a bank robbery. (/accept robbery)", GetRPName(playerid));
	SM(playerid, COLOR_AQUA, "** You have invited %s to join your bank robbery.", GetRPName(targetid));
	return 1;
}

CMD:setupvault(playerid, params[])
{
    if(RobberyInfo[rPlanning] == 0 && RobberyInfo[rRobbers][0] != playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are currently not planning a bank robbery.");
	}
	if(GetBankRobbers() < 5)
	{
		return SCM(playerid, COLOR_SYNTAX, "You need at least two other heisters in your robbery.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1677.2610, -987.6659, 671.1152))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the vault.");
	}
	if(IsValidDynamicObject(RobberyInfo[rObjects][1]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The vault is already being bombed at the moment.");
	}

	RobberyInfo[rObjects][1] = CreateDynamicObject(1654, 1677.787475, -988.009765, 671.625366, 0.000000, 0.000000, 180.680709);
	
	new string[128];
    format(string, sizeof(string), "~w~Illegal Activity: ~g~Bank Heist In Progress");
    TextDrawSetString(Textdraw2, string);

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s firmly plants an explosive on the vault door.", GetRPName(playerid));
	SCM(playerid, COLOR_WHITE, "** Bomb planted. Shoot at the bomb to blow that sumbitch' up!");
	return 1;
}

CMD:lootbox(playerid, params[])
{
	if(!RobberyInfo[rStarted] && !IsPlayerInBankRobbery(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in an active bank robbery.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1680.2344, -994.6146, 671.0032) && !IsPlayerInRangeOfPoint(playerid, 3.0, 1680.2335, -998.6115, 671.0032) && !IsPlayerInRangeOfPoint(playerid, 3.0, 1680.2344, -1002.5356, 671.0032) && !IsPlayerInRangeOfPoint(playerid, 3.0, 1674.2708, -998.4954, 671.0032) && !IsPlayerInRangeOfPoint(playerid, 3.0, 1674.2708, -994.5173, 671.0032))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the deposit boxes.");
	}
	if(pData[playerid][pLootTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are already looting a deposit box.");
	}
	if(pData[playerid][pRobCash] >= gVault)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Your pockets can't hold anymore!");
	}
	if(!IsPlayerInBankRobbery(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not apart of this bank robbery.");
	}

	pData[playerid][pLootTime] = 5;
	LootBoxProgress(playerid);

	ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Loop", 4.1, 1, 0, 0, 0, 0, 1);
	GameTextForPlayer(playerid, "~w~Looting deposit box...", 5000, 3);
	return 1;
}

CMD:setscore(playerid, params[])
{
	new targetid, score;
    if(pData[playerid][pAdmin] < 5)
	{
	  	return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "ui", targetid, score))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setscore [playerid] [score]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	SetPlayerScore(targetid, score);
	SM(playerid, COLOR_SAMP, "You have set %s's score to %i.", GetPlayerNameEx(targetid), score);
	return 1;
}

CMD:turfs(playerid, params[])
{
	new turfid, name[32], color, timeleft[32], string[2048];
	tsstring = "";
	for(turfid = 0; turfid < MAX_TURFS; turfid++)
	{
	    if((TurfInfo[turfid][tType] < 11) && TurfInfo[turfid][tExists])
	    {
			if(TurfInfo[turfid][tCapturedGang] >= 0)
			{
    			strcpy(name, GangInfo[TurfInfo[turfid][tCapturedGang]][gName]);
				color = GangInfo[TurfInfo[turfid][tCapturedGang]][gColor];
			}
			else if(TurfInfo[turfid][tCapturedGang] == -5)
			{
				name = "Shutdown by The Police";
				color = 0x8D8DFF00;
			}
			else
			{
				color = COLOR_FACTIONCHAT;
				name = "None";
			}
			if(TurfInfo[turfid][tTime] > 0) format(timeleft, sizeof(timeleft), "%d Hours left", TurfInfo[turfid][tTime]);
			else format(timeleft, sizeof(timeleft), "Vulnerable");
			if(strlen(string) < 1950)
			{
			    format(string, sizeof(string), "%s{%06x}%i. %s | %s | Claimer: %s | Perk: %s | %s\n", string, color >>> 8, turfid, TurfInfo[turfid][tName], name, TurfInfo[turfid][tCapturedBy], getTurftype(turfid), timeleft);
			}
			else
			{
			    format(tsstring, sizeof(tsstring), "%s{%06x}%i. %s | %s | Claimer: %s | Perk: %s | %s\n", tsstring, color >>> 8, turfid, TurfInfo[turfid][tName], name, TurfInfo[turfid][tCapturedBy], getTurftype(turfid), timeleft);
			}
		}
	}
    ShowPlayerDialog(playerid, DIALOG_TURFLIST, DIALOG_STYLE_MSGBOX, ""SVRCLR"Point List"WHITE" ("REVISION")", string, "Next", "Cancel");
	return 1;
}

CMD:setformeradmin(playerid, params[])
{
	new targetid, status;
	if(pData[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "ui", targetid, status) || !(0 <= status <= 1))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /setformeradmin [playerid] [status (0/1)]");
		return 1;
	}

    if(status)
    {
	   	if(pData[targetid][pAdmin])
		{
		    return SCM(playerid, COLOR_SYNTAX, "The specified player is an admin and therefore cannot be set as a former admin.");
		}
        SAM(COLOR_LIGHTRED, "AdmCmd: %s has made %s a Former Admin.", GetRPName(playerid), GetRPName(targetid));
        Log_Write("log_admin", "%s (uid: %i) has made %s (uid: %i) a Former Admin.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

        SM(playerid, COLOR_AQUA, "You have made %s a "SVRCLR"Former Admin{CCFFFF}.", GetRPName(targetid));
	    SM(targetid, COLOR_AQUA, "%s has made you a "SVRCLR"Former Admin{CCFFFF}.", GetRPName(playerid));
	}
	else
    {
        SAM(COLOR_LIGHTRED, "AdmCmd: %s has removed %s's Former Admin status.", GetRPName(playerid), GetRPName(targetid));
        Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) Former Admin status.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

        SM(playerid, COLOR_AQUA, "You have removed %s's "SVRCLR"Former Admin{CCFFFF} status.", GetRPName(targetid));
	    SM(targetid, COLOR_AQUA, "%s has removed your "SVRCLR"Former Admin{CCFFFF} status.", GetRPName(playerid));
	}
    pData[targetid][pFormerAdmin] = status;

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET formeradmin = %i WHERE uid = %i", pData[targetid][pFormerAdmin], pData[targetid][pID]);
    mysql_tquery(connectionID, queryBuffer);
	return 1;
}

CMD:callsign(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic or law enforcer.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(!vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside of any vehicle.");
	}
	if(isnull(params) || strlen(params) > 12)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /callsign [text ('none' to reset)]");
	}

	if(IsValidDynamic3DTextLabel(vehicleCallsign[vehicleid]))
	{
	    DestroyDynamic3DTextLabel(vehicleCallsign[vehicleid]);
		vehicleCallsign[vehicleid] = Text3D:INVALID_3DTEXT_ID;

		if(!strcmp(params, "none", true))
		{
			SCM(playerid, COLOR_WHITE, "** Callsign removed from the vehicle.");
		}
	}

	if(strcmp(params, "none", true) != 0)
	{
		vehicleCallsign[vehicleid] = CreateDynamic3DTextLabel(params, COLOR_GREY2, 0.0, -3.0, 0.0, 10.0, .attachedvehicle = vehicleid);
 		SCM(playerid, COLOR_WHITE, "** Callsign attached. '/callsign none' to detach the callsign.");
	}

	return 1;
}
CMD:kill(playerid, params[])
{
	new Float:health;
	GetPlayerHealth(playerid, health);

	if(pData[playerid][pCuffed] == 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot kill yourself while cuffed!");
	}
	if(pData[playerid][pJailTime] > 1)
	{
		return SCM(playerid, COLOR_SYNTAX, "You cannot do this while in jail.");
	}
	if(pData[playerid][pInjured] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are too injured to attempt suicide!");
	}

	if(health < 15.0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Your health is currently too low to kill yourself.");
	}

    switch(GetPlayerWeapon(playerid))
	{
		case 0 .. 21:
		{
            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s reaches into their pocket, pulling out a large quantity of pills, swallowing them.", GetRPName(playerid));
		}
		case 22 .. 24:
		{
		   SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s raises their handgun to their head, pulling the trigger.", GetRPName(playerid));
		}
		case 25 .. 27:
		{
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s places the barrel of their shotgun into their mouth, pulling the trigger.", GetRPName(playerid));
		}
		case 28 .. 39:
  		{
		    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s places the barrel of their weapon into their mouth, pulling the trigger.", GetRPName(playerid));
		}
	}
	SetPlayerHealth(playerid, -300);
	//DamagePlayer(playerid, 300, playerid, WEAPON_EXPLOSION, BODY_PART_UNKNOWN, false);
	return 1;
}

CMD:clearreports(playerid, params[])
{	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	for(new i = 0; i < MAX_REPORTS; i ++)
	{
 		if(ReportInfo[i][rExists])
		{
			ReportInfo[i][rExists] = 0;
		}
	}
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has cleared all active reports.", GetRPName(playerid));
	return 1;
}

// - COMMANDS BY DEV86
CMD:taclight(playerid, params[])
{
	if (!pData[playerid][pFlashlight]) {
		return SM(playerid, COLOR_SYNTAX, "You must have a flashlight to use this command.");
	}
	if(pData[playerid][pUsedFlashlight] == 0)
	{
		if(IsPlayerAttachedObjectSlotUsed(playerid,8)) RemovePlayerAttachedObject(playerid,8);
		if(IsPlayerAttachedObjectSlotUsed(playerid,9)) RemovePlayerAttachedObject(playerid,9);
		SetPlayerAttachedObject(playerid, 8, 18656, 6, 0.25, -0.0175, 0.16, 86.5, -185, 86.5, 0.03, 0.1, 0.03);
		SetPlayerAttachedObject(playerid, 9, 18641, 6, 0.2, 0.01, 0.16, 90, -95, 90, 1, 1, 1);
		SendProximityMessage(playerid, 30.0, COLOR_PURPLE, "** %s attaches their flashlight to the top of their weapon.", GetRPName(playerid));

		pData[playerid][pUsedFlashlight] = 1;
	}
	else
	{
		RemovePlayerAttachedObject(playerid,8);
		RemovePlayerAttachedObject(playerid,9);
		pData[playerid][pUsedFlashlight] =0;
		SendProximityMessage(playerid, 30.0, COLOR_PURPLE, "** %s detaches their flashlight from their weapon.", GetRPName(playerid));
	}
	return 1;
}
CMD:flashlight(playerid, params[])
{
	if (!pData[playerid][pFlashlight]) {
		return SM(playerid, COLOR_SYNTAX, "You must have a flashlight to use this command.");
	}
	if(pData[playerid][pUsedFlashlight] == 0)
	{
		if(IsPlayerAttachedObjectSlotUsed(playerid,8)) RemovePlayerAttachedObject(playerid,8);
		if(IsPlayerAttachedObjectSlotUsed(playerid,9)) RemovePlayerAttachedObject(playerid,9);
		SetPlayerAttachedObject(playerid, 8, 18656, 5, 0.1, 0.038, -0.01, -90, 180, 0, 0.03, 0.1, 0.03);
		SetPlayerAttachedObject(playerid, 9, 18641, 5, 0.1, 0.02, -0.05, 0, 0, 0, 1, 1, 1);
		SendProximityMessage(playerid, 30.0, COLOR_PURPLE, "** %s takes out a flashlight and turns it on.", GetRPName(playerid));

		pData[playerid][pUsedFlashlight] =1;
	}
	else
	{
 		RemovePlayerAttachedObject(playerid,8);
		RemovePlayerAttachedObject(playerid,9);
		pData[playerid][pUsedFlashlight] =0;
  		SendProximityMessage(playerid, 30.0, COLOR_PURPLE, "** %s puts their flashlight back in their pocket.", GetRPName(playerid));
	}
	return 1;
}
CMD:toll(playerid, params[])
{
	if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_DOC && GetFactionType(playerid) != FACTION_GOVERNMENT)
		return SCM(playerid, COLOR_ERROR, "You are not part of a law enforcement faction.");

	if(Toll)
	{
		Toll = 0;

		foreach(new i : Player)
		{
			if((!pData[i][pToggleRadio]) && (GetFactionType(i) == FACTION_POLICE || GetFactionType(i) == FACTION_SHERIFF || GetFactionType(i) == FACTION_MEDIC || GetFactionType(i) == FACTION_GOVERNMENT || GetFactionType(i) == FACTION_FEDERAL || GetFactionType(i) == FACTION_NEWS || GetFactionType(i) == FACTION_DOC))
			{
				SCMf(i, COLOR_ORANGE, "[DISPATCH] Attention All Units. The Toll Bridges have been shutdown on behalf of %s %s of the %s.", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), FactionInfo[pData[playerid][pFaction]][fName]);
				SCMf(i, COLOR_ORANGE, "[DISPATCH] All Non-Government traffic will not be permitted through.");
			}
		}
	}
	else
	{
		Toll = 1;

		foreach(new i : Player)
		{
			if((!pData[i][pToggleRadio]) && (GetFactionType(i) == FACTION_POLICE || GetFactionType(i) == FACTION_SHERIFF || GetFactionType(i) == FACTION_MEDIC || GetFactionType(i) == FACTION_GOVERNMENT || GetFactionType(i) == FACTION_FEDERAL || GetFactionType(i) == FACTION_NEWS || GetFactionType(i) == FACTION_DOC))
			{
				SCMf(i, COLOR_ORANGE, "[DISPATCH] Attention All Units. The Toll Bridges have been re-opened on behalf of %s %s of the %s.", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), FactionInfo[pData[playerid][pFaction]][fName]);
				SCMf(i, COLOR_ORANGE, "[DISPATCH] All vehicle traffic may resume as normal.");
			}
		}
	}
	return 1;
}

CMD:resetph(playerid, params[])
{
	if(pData[playerid][pAdmin] < 7)
	{
		return SendClientMessage(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	foreach(new i : Player)
	{
		if(pData[i][pLogged])
		{
			pData[i][pPlayingHours] = 0;
		}
	}
	mysql_tquery(connectionID, "UPDATE users SET playinghours = 0");

	new string[128];
	format(string, sizeof(string), "AdmCmd: %s has resetted all Player's Playing Hours from last Month.", GetRPName(playerid));
	SAM(COLOR_LIGHTRED, string);
	return 1;
}

CMD:pass(playerid, params[])
{
	new cashhy=500;
	if(pData[playerid][pCash] < cashhy)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to pay for the toll");
	}
 	if (IsPlayerInRangeOfPoint(playerid, 7, 1813.34851, 813.63531, 10.66680))
	{
		if(Border11 == 1) { SCM(playerid, COLOR_GREY, "** Contact a developer"); return 1; }
   		DestroyDynamicObject( Border1 );
 		Border111 = CreateDynamicObject(968, 1813.34851, 813.63531, 10.66680,   0.00000, 0.00000, 0.00000);
 		SetTimerEx("Toll_G", 5000, false, "i", playerid);
   		SCM(playerid, SERVER_COLOR,"Toll Guard: {FFFFFF}The toll is now open, you have 5 seconds to pass through it.");
		Border11 = 1;
		GivePlayerCash(playerid, -cashhy);
	}
	else if (IsPlayerInRangeOfPoint(playerid, 7, -173.392,374.704,11.722))
	{
		if(Border00 == 1) { SCM(playerid, COLOR_GREY, "The toll is opened."); return 1; }
   		DestroyDynamicObject( Border0 );
 		Border000 = CreateDynamicObject(968,-173.392,374.704,11.722,0.000,0.000,0.00);
 		SetTimerEx("Toll_G10", 5000, false, "i", playerid);
   		SCM(playerid, SERVER_COLOR,"Toll Guard: {FFFFFF}The toll is now open, you have 5 seconds to pass through it.");
		Border00 = 1;
		GivePlayerCash(playerid, -cashhy);
	}
    else if (IsPlayerInRangeOfPoint(playerid, 7, -159.520,371.172,11.722))
	{
		if(Border99 == 1) { SCM(playerid, COLOR_GREY, "The toll is opened."); return 1; }
   		DestroyDynamicObject( Border9 );
 		Border999 = CreateDynamicObject(968,-159.520,371.172,11.722,0.000,0.000,0);
 		SetTimerEx("Toll_G9", 5000, false, "i", playerid);
   		SCM(playerid, SERVER_COLOR,"Toll Guard: {FFFFFF}The toll is now open, you have 5 seconds to pass through it.");
		Border99 = 1;
		GivePlayerCash(playerid, -cashhy);
	}
	else if (IsPlayerInRangeOfPoint(playerid, 7, 525.827,477.249,18.799))
	{
		if(Border88 == 1) { SCM(playerid, COLOR_GREY, "The toll is opened."); return 1; }
   		DestroyDynamicObject( Border8 );
 		Border888 = CreateDynamicObject(968,525.827,477.249,18.799,0.000,0.000,0);
 		SetTimerEx("Toll_G8", 5000, false, "i", playerid);
   		SCM(playerid, SERVER_COLOR,"Toll Guard: {FFFFFF}The toll is now open, you have 5 seconds to pass through it.");
		Border88 = 1;
		GivePlayerCash(playerid, -cashhy);
	}
    else if (IsPlayerInRangeOfPoint(playerid, 7, 514.546,468.370,18.759))
	{
		if(Border77 == 1) { SCM(playerid, COLOR_GREY, "The toll is opened."); return 1; }
   		DestroyDynamicObject( Border7 );
 		Border777 = CreateDynamicObject(968,514.546,468.370,18.759,0.000,0.000,0);
 		SetTimerEx("Toll_G7", 5000, false, "i", playerid);
   		SCM(playerid, SERVER_COLOR,"Toll Guard: {FFFFFF}The toll is now open, you have 5 seconds to pass through it.");
		Border77 = 1;
		GivePlayerCash(playerid, -cashhy);
	}
	else if (IsPlayerInRangeOfPoint(playerid, 7, 71.514,-1305.882,12.010))
	{
		if(Border66 == 1) { SCM(playerid, COLOR_GREY, "The toll is opened."); return 1; }
   		DestroyDynamicObject( Border6 );
 		Border666 = CreateDynamicObject(968,71.514,-1305.882,12.010,0.000,0.000,0);
 		SetTimerEx("Toll_G6", 5000, false, "i", playerid);
   		SCM(playerid, SERVER_COLOR,"Toll Guard: {FFFFFF}The toll is now open, you have 5 seconds to pass through it.");
		Border66 = 1;
		GivePlayerCash(playerid, -cashhy);
	}
	else if (IsPlayerInRangeOfPoint(playerid, 7, 51.067,-1286.589,13.659))
	{
		if(Border55 == 1) { SCM(playerid, COLOR_GREY, "The toll is opened."); return 1; }
   		DestroyDynamicObject( Border5 );
 		Border555 = CreateDynamicObject(968,51.067,-1286.589,13.659,0.000,0.000,0);
 		SetTimerEx("Toll_G5", 5000, false, "i", playerid);
   		SCM(playerid, SERVER_COLOR,"Toll Guard: {FFFFFF}The toll is now open, you have 5 seconds to pass through it.");
		Border55 = 1;
		GivePlayerCash(playerid, -cashhy);
	}
	else if (IsPlayerInRangeOfPoint(playerid, 7, 53.587,-1541.730,4.809))
	{
		if(Border33 == 1) { SCM(playerid, COLOR_GREY, "The toll is opened."); return 1; }
   		DestroyDynamicObject( Border3 );
 		Border333 = CreateDynamicObject(968,53.587,-1541.730,4.809,0.000,0.000,0);
 		SetTimerEx("Toll_G3", 5000, false, "i", playerid);
   		SCM(playerid, SERVER_COLOR,"Toll Guard: {FFFFFF}The toll is now open, you have 5 seconds to pass through it.");
		Border33 = 1;
		GivePlayerCash(playerid, -cashhy);
	}
	else if (IsPlayerInRangeOfPoint(playerid, 7, 1780.06458, 802.22620, 10.66680))
	{
		if(Border22 == 1) { SCM(playerid, COLOR_GREY, "The toll is opened."); return 1; }
   		DestroyDynamicObject( Border2 );
 		Border222 = CreateDynamicObject(968, 1780.06458, 802.22620, 10.66680,   0.00000, 0.00000, 900.00000);
 		SetTimerEx("Toll_G2", 5000, false, "i", playerid);
   		SCM(playerid, SERVER_COLOR,"Toll Guard: {FFFFFF}The toll is now open, you have 5 seconds to pass through it.");
		Border22 = 1;
		GivePlayerCash(playerid, -cashhy);
	}
	else if (IsPlayerInRangeOfPoint(playerid, 7, 55.194,-1522.403,4.809))
	{
		if(Border44 == 1) { SCM(playerid, COLOR_GREY, "The toll is opened."); return 1; }
   		DestroyDynamicObject( Border4 );
 		Border444 = CreateDynamicObject(968,55.194,-1522.403,4.809,0.000,0.000,0);
 		SetTimerEx("Toll_G4", 5000, false, "i", playerid);
   		SCM(playerid, SERVER_COLOR,"Toll Guard: {FFFFFF}The toll is now open, you have 5 seconds to pass through it.");
		Border44 = 1;
		GivePlayerCash(playerid, -cashhy);
	}
 	return 1;
}

/*
CMD:carol(playerid, params[])
{
	#if defined Christmas
		new houseid = GetNearbyHouse(playerid);
		if(pData[playerid][pHours] < 1)
		{
			return SCM(playerid, COLOR_SYNTAX, "You need to played 1 playing hour.");
		}
		if(houseid == -1)
		{
			return SendClientMessage(playerid, COLOR_SYNTAX, "You must be near a house to use this command.");
		}
		if(IsHouseOwner(playerid, houseid))
		{
			return SendClientMessage(playerid, COLOR_SYNTAX, "You cannot carol at a house that you own.");
		}
		if(pData[playerid][pLastCarolTime] > 0)
		{
			return SendClientMessage(playerid, COLOR_SYNTAX, "You can only carol every 30 seconds.");
		}
		if(pData[playerid][pLastHouseCarol] == houseid)
		{
			return SendClientMessage(playerid, COLOR_SYNTAX, "You have carolled at this house already.");
		}
		pData[playerid][pLastHouseCarol] = houseid;
		CarolLyrics[playerid] = Random(1, 5);
		ShowDialogToPlayer(playerid, DIALOG_CAROL);
	#else
		SendClientMessage(playerid, COLOR_SYNTAX, "It isn't Christmas!");
	#endif
	return 1;
}*/

stock ReturnLyrics(lyricid)
{
	new lyString[65];
	switch(lyricid)
	{
	    case 1: lyString = "Jingle bells, jingle bells, jingle all, the way!";
		case 2: lyString = "We wish you a merry christmas and a happy new year!";
		case 3: lyString = "I wanna wish you a merry christmas!";
		case 4: lyString = "Last christmas, i gave you my heart";
		case 5: lyString = "Santa claus is coming to town!";
	}
	return lyString;
}

stock CountTaxiDrivers()
{
	new count = 0;
	foreach(new i : Player)
	{
		if(pData[i][pTaxiFare] > 0)
		{
			count ++;
		}
	}
	return count;
}